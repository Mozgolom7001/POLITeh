
Перем мОсновнаяПанель;
Перем мСтраницыОсновнойПанели;

Перем мМассивПереходовПоСтраницам;

Перем мДействиеНазад; 
Перем мНужноПропуститьОсновнуюСтраницуНастроек;
Перем мБазоваяПоставка;

Перем мОбщаяТаблицаНастроекПолейПоиска Экспорт;
Перем мОбщаяТаблицаНастроекВыгрузки Экспорт;


Функция ПроверитьДоступностьВыполненияОбменаСИнформационнойБазой()
	
	СинонимИБДляОбмена = ПодключениеКПриемнику.Метаданные().Synonym;
	
	// ищем синонним в списке возможных обменов
	СтрокиОбмена = мТаблицаВозможныхОбменов.НайтиСтроки(Новый Структура("НаименованиеКонфигурации", СинонимИБДляОбмена));
	
	Если СтрокиОбмена.Количество() = 0 Тогда
		
		Сообщить("Не найдены правила для обмена с конфигурацией: " + СинонимИБДляОбмена);
		Сообщить("Укажите тип информационной базы приемника");
		
	Иначе
		
		// правила есть, нужно теперь в форме отсеять что бы отображались эти правила	
		ЗаполнитьСписокТиповИнформационныхБазДляОбмена(ЭлементыФормы.ТипИнформационнойБазыДляОбмена.СписокВыбора, СтрокиОбмена);
	
		ЭлементыФормы.ТипИнформационнойБазыДляОбмена.Значение = 0;	
		ТипИнформационнойБазыДляОбмена = СтрокиОбмена[0].ИмяПланаОбмена;
		
	КонецЕсли;	
	
	Возврат Истина;	
	
КонецФункции

Процедура УстановитьТипИнформационнойБазыДляОбменаПоПодлючению(ПодключениеКПриемнику)
	
	// по подключению определяем наименование конфигурации
	// по наименованию определяем одну из возможных строк в настройке
	
	НаименованиеКонфигурации = ПодключениеКПриемнику.Метаданные().Synonym;
	
	Для ТекущийНомер = 0 По мТаблицаВозможныхОбменов.Количество() - 1 Цикл
		
		Если мТаблицаВозможныхОбменов[0].НаименованиеКонфигурации = НаименованиеКонфигурации Тогда
			
			ИнформацияОТипеОбмена = ТекущийНомер;
			ЭлементыФормы.ТипИнформационнойБазыДляОбмена.Значение = ТекущийНомер;
			ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[ТекущийНомер].ИмяПланаОбмена;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 2
	               |	НастройкиОбменаДанными.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
				   |ГДЕ
	               |	НастройкиОбменаДанными.ПометкаУдаления = Ложь
				   |	И НастройкиОбменаДанными.OnLineОбмен = Истина
				   |	И НастройкиОбменаДанными.ТипУзлаИнформационнойБазы = &ТипУзла";
				   
	Запрос.УстановитьПараметр("ТипУзла", ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ПустаяСсылка());
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() = 1 Тогда
		ЕдинственнаяНастройка = ТаблицаРезультата[0].Ссылка;
	КонецЕсли;
	
	Возврат ТаблицаРезультата.Количество();
	
КонецФункции

Процедура ОткрытьНастройкуОбменаИЗакрытьФорму(НастройкаОбменаДанными)
	
	ФормаНастройки = НастройкаОбменаДанными.ПолучитьФорму();
	ФормаНастройки.Открыть();
	Закрыть(Истина);	
	
Конецпроцедуры

Процедура ВыполнитьДействияПередПереходомНаСтраницуПараметров()
	
	ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(Ложь);
		
	//ВидимостьНастроекПользователя = НастройкаВариантовПоискаОбъектов.Количество() > 0;
	//	
	//ЭлементыФормы.НастройкиВыгрузки.Видимость = ВидимостьНастроекПользователя;
	
КонецПроцедуры

Процедура ВыполнитьПереходДалее()
	
	ТекущаяСтраница = мОсновнаяПанель.ТекущаяСтраница;
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ТекущаяСтраница = мСтраницыОсновнойПанели.Главная Тогда
		
		Если ДействиеВыбранноеПользователем <> 2 Тогда
            						
			мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		КонецЕсли;
				
		Если ДействиеВыбранноеПользователем = 0 Тогда
			
			Если мБазоваяПоставка Тогда
				ВозможностьПодключенияКоВторойИнформационнойБазе = Ложь;				
			КонецЕсли;
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВозможностьПодключенияКоВторойИнформационнойБазе;			
			ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(ЭтотОбъект);
						
		ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РедактированиеСуществующегоОбмена;
			
		ИначеЕсли ДействиеВыбранноеПользователем = 2 Тогда
			
			ЕдинственнаяНастройка = Неопределено;
			КоличествоНастроек = ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка);
			
			Если КоличествоНастроек = 0 Тогда
				
				ДействиеВыбранноеПользователем = 0;
				Предупреждение("Нет ни одной созданной настройки для обмена данными");
				Возврат;
				
			ИначеЕсли КоличествоНастроек = 1 Тогда	
				
				ОткрытьНастройкуОбменаИЗакрытьФорму(ЕдинственнаяНастройка);
				Возврат;
				
			Иначе
				
				// настроек несколько - предложим выбрать
				ФормаВыбораНастройки = Справочники.НастройкиОбменаДанными.ПолучитьФормуВыбора();
				ФормаВыбораНастройки.Заголовок = "Выберите настройку для редактирования";
				ФормаВыбораНастройки.Отбор.OnLineОбмен.Установить(Истина);
				ФормаВыбораНастройки.Отбор.ТипУзлаИнформационнойБазы.Установить(ПланыОбмена.ОбменУправлениеТорговлейРозничнаяТорговля.ПустаяСсылка());
				ВыбраннаяНастройка = ФормаВыбораНастройки.ОткрытьМодально();
				Если ЗначениеЗаполнено(ВыбраннаяНастройка) Тогда
					
					ОткрытьНастройкуОбменаИЗакрытьФорму(ВыбраннаяНастройка);	
					
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;			
			
		КонецЕсли;
		
		мКоличествоОбъектовДляСопоставления = Неопределено;
		
		СоздатьКнопкуНазадПриНеобходимости();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ВозможностьПодключенияКоВторойИнформационнойБазе Тогда
		
		Если ВозможностьПодключенияКоВторойИнформационнойБазе Тогда
			
			// ко второй базе можно подлючиться, все в один этап делаем
			ПодключениеКПриемнику = ВыполнитьПодключениеКИБПриемнику();
	
			Если ПодключениеКПриемнику = Неопределено Тогда
				
				// подключиться не смогли
				Предупреждение("Подключиться у информационной базе-приемнику не удалось.
				|Проверьте параметры подключения и повторите попытку.");
				
				ПрефиксДляИБПриемника = "";
				мПрефиксДляИБПриемника = "";
				
				Возврат;
				
			Иначе	
				
				ПрефиксДляИБПриемника = ПодключениеКПриемнику.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
				мПрефиксДляИБПриемника = ПрефиксДляИБПриемника;
            	
			КонецЕсли;
			
			// нужно проверить можно ли с этой информационной базой настроить обмен данными
			// есть ли соотвествующие правила обмена
			ДоступностьВыполненияОбмена = ПроверитьДоступностьВыполненияОбменаСИнформационнойБазой();
			Если Не ДоступностьВыполненияОбмена Тогда
					
				ПрефиксДляИБПриемника = "";
				мПрефиксДляИБПриемника = "";
				
				Возврат;
			КонецЕсли;			
			
			// смогли подключиться к информационной базе применику, нужно тип обмена установить
			УстановитьТипИнформационнойБазыДляОбменаПоПодлючению(ПодключениеКПриемнику);
			
			мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена;
			
			ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение;			
						
		Иначе
			
			ПодключениеКПриемнику = Неопределено;
			// ко второй базе не подключиться, настройка обмена в два этапа
			мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена;
						
		КонецЕсли;		
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена Тогда
		
		// проверка на заполненность параметров
		Если ПустаяСтрока(ТипИнформационнойБазыДляОбмена) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указан тип информационной базы для обмена данными", Отказ);
			
		КонецЕсли;
		
		Если ПустаяСтрока(НаименованиеИнформационнойБазыДляОбмена) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указано наименование информационной базы для обмена данными", Отказ);
			
		КонецЕсли;
		
		Если ВыгружатьСебестоимость И Не ЗначениеЗаполнено(ПериодичностьПередачиСебестоимости) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указана периодичность передачи себестоимости!", Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мОбщаяТаблицаНастроекПолейПоиска = Неопределено;
		мОбщаяТаблицаНастроекВыгрузки = Неопределено;
		НастройкаВариантовПоискаОбъектов.Очистить();
		НастройкаВыгрузкиДанных.Очистить();
		
		ЗаполнитьОграниченияПоОрганизациям();
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ФильтрацияСправочников;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ФильтрацияСправочников Тогда
		
		Организации.Очистить();
		
		ВыбраныВсеОрганизации = ОпределитьВыбраныВсеЭлементыТаблицы(ТаблицаВыбораОрганизаций);
		
		Если ФильтрацияСправочникаОрганизации Тогда
			
			Если Не ВыбраныВсеОрганизации Тогда
				
				Для Каждого СтрокаВыбора Из ТаблицаВыбораОрганизаций Цикл
					
					Если СтрокаВыбора.Пометка Тогда
						
						СтрокаТЧ = Организации.Добавить();
						СтрокаТЧ.Организация = СтрокаВыбора.Организация;
						
					КонецЕсли;
					
				КонецЦикла;	
				
				Если Организации.Количество() > 0 Тогда
					
					МассивИспользуемыхОрганизаций = СоответствияМагазиновИСкладов.ВыгрузитьКолонку("Организация");
					
					Для каждого ИспользуемаяОрганизация Из МассивИспользуемыхОрганизаций Цикл
						
						Если Организации.Найти(ИспользуемаяОрганизация) = Неопределено Тогда
							
							ОбщегоНазначения.СообщитьОбОшибке("Используемая в соответствии магазинов и складов организация
							|" + ИспользуемаяОрганизация + " не указана в фильтре по организациям", Отказ);
							
						КонецЕсли;	
						
					КонецЦикла;	
					
					Если Отказ Тогда
						
						Возврат;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если ВозможностьПодключенияКоВторойИнформационнойБазе Тогда 
			
			// если к базе смогли подключиться - тогда второй раз не спрашиваем тип обмена
			ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение;
			мНужноПропуститьОсновнуюСтраницуНастроек = Истина;
			
		КонецЕсли;
		
		ВыполнитьДействияПередПереходомНаСтраницуПараметров();
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДокументами;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ОтветныеПакетыВторойИнформационнойБазы Тогда
						
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОсновныеПараметрыНастройкиОбменаДанными;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДокументами Тогда
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			Если ПустаяСтрока(ПрефиксДляИБПриемника) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Заполните префикс для объектов в  информационной базе-приемнике",Отказ);
			КонецЕсли;	
			Если ПустаяСтрока(ПрефиксДляИБИсточника) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Заполните префикс для объектов в текущей информационной базе",Отказ);
			КонецЕсли;	
		Иначе
			
			Если ПустаяСтрока(ПрефиксДляИБИсточника) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Заполните префикс для объектов в текущей информационной базе",Отказ);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		мКоличествоОбъектовДляСопоставления = Неопределено;
		
		Если мНужноПропуститьОсновнуюСтраницуНастроек = Истина Тогда
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗнакомстваИнформационныхБаз;
			
		Иначе
		
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОсновныеПараметрыНастройкиОбменаДанными;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ОсновныеПараметрыНастройкиОбменаДанными Тогда
						
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда  
			
			Если ПустаяСтрока(КаталогОбменаИнформацией) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указан каталог для обмена данными", Отказ);
				
			Иначе
				
				// существует ли указанный каталог обмена данными
				РаботаСФайлами.ПроверитьСуществованиеКаталога(КаталогОбменаИнформацией);
				
			КонецЕсли;
			
		ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда 
			
			Если ПустаяСтрока(FTPАдресОбмена) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указан FTP адрес для обмена данными", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда 
			
			Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указан адрес получателя для оправки почтовых сообщений", Отказ);
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьПриемаОтправкиСообщений) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указана учетная запись для отправки почтовых сообщений", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
						
			ПараметровДостаточно = ВыполнитьПроверкуДостаточностиПараметровДляПодключенияКПриемнику();
			
			Если Не ПараметровДостаточно Тогда
				Отказ = Истина;
			КонецЕсли;
						
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗнакомстваИнформационныхБаз;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗнакомстваИнформационныхБаз Тогда
		
		ПользовательЗаполнилВсеНеобходимыеДанные();
						
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.РедактированиеСуществующегоОбмена Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФайлаНастроекОбменаПервойИнформационнойБазы) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не указано имя файла настроек обмена данными в первой информационной базе.", Отказ);
			
		КонецЕсли;		
		
		РезультатЗагрузкиНастроекИзФайла = ЗагрузитьНастройкиИзФайла(ИмяФайлаНастроекОбменаПервойИнформационнойБазы);
						
		Если Отказ ИЛИ НЕ РезультатЗагрузкиНастроекИзФайла Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьДействияПередПереходомНаСтраницуПараметров();
		
    	мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДокументами;
		
	Иначе
		
		Закрыть();
						
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьНастройкуОбменаИПредложитьВыполнитьОбмен()
	
	ВопросПользователю = "Настройка для обмена с информационной базой """ + НаименованиеИнформационнойБазыДляОбмена + """ успешно сохранена. 
	|
	|Выполнить обмен данными (это может потребовать некоторого времени)?";
	
	ОтветПользователя = Вопрос(ВопросПользователю, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбменДаннымиПоНастройкеПользователя();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПользовательЗаполнилВсеНеобходимыеДанные()
	
	Настройка = Неопределено;
	
	ОтборПоНоменклатуре = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоНоменклатуре);
	ОтборПоКонтрагентам = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоКонтрагентам);
	ОтборПоСкладам      = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоСкладам);
	ОтборПоКассам       = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоКассам);
	
	РезультатПрименения = ВсеНастройкиЗаданыХотиимИхПрименить(Настройка, ИнформацияОТипеОбмена);
			
	Если НЕ РезультатПрименения Тогда
		Возврат;
	КонецЕсли;
	
	СозданнаяНастройкаОбмена = Настройка.Ссылка;
		
	мМассивПереходовПоСтраницам.Очистить();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель.Доступность = Ложь;
		
	УстановитьТекстыКнопокИКартинки("Готово");
	
	Если ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику <> Неопределено Тогда
	
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбменаCOM;
						
	Иначе
		
		Если ДействиеВыбранноеПользователем = 0 Тогда
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбмена;
		Иначе
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбменаCOM;
		КонецЕсли;
				
	КонецЕсли;
	
	Если ВладелецФормы <> Неопределено Тогда
		
		Попытка
			
			// оповещаем форму списка настроек о том, что создан новый элемент
			ВладелецФормы.ОповеститьОЗаписиНовогоОбъекта(СозданнаяНастройкаОбмена);
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	
	Если ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику <> Неопределено Тогда
		
		ЗавершитьНастройкуОбменаИПредложитьВыполнитьОбмен();
		
	Иначе
		
		Если ДействиеВыбранноеПользователем = 0 Тогда
			СтрокаСообщенияПользователю = "Настройка для обмена с информационной базой """ + НаименованиеИнформационнойБазыДляОбмена + """ успешно сохранена. 
			|
			|Необходимо создать настройку для обмена в информационной базе """ + НаименованиеИнформационнойБазыДляОбмена + """ (Продолжение настройки) ";
			
			Предупреждение(СтрокаСообщенияПользователю);
			
		Иначе
			
			ЗавершитьНастройкуОбменаИПредложитьВыполнитьОбмен();			
			
		КонецЕсли;		
		
	КонецЕсли;				

КонецПроцедуры

Процедура ВыполнитьПереходНазад()
	
	КоличествоСтраницИстории = мМассивПереходовПоСтраницам.Количество();
	
	Если КоличествоСтраницИстории = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мОсновнаяПанель.ТекущаяСтраница = мМассивПереходовПоСтраницам[КоличествоСтраницИстории - 1];
	
	мМассивПереходовПоСтраницам.Удалить(КоличествоСтраницИстории - 1);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	// назад
	ВыполнитьПереходНазад();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	// далее
	ВыполнитьПереходДалее();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	мДействиеНазад = Новый Действие("ОсновныеДействияФормыНазад");
	
	мОсновнаяПанель = ЭлементыФормы.ПанельОсновная;
	мСтраницыОсновнойПанели =  мОсновнаяПанель.Страницы;
	
	ЗаполнитьСписокТиповИнформационныхБазДляОбмена(ЭлементыФормы.ТипИнформационнойБазыДляОбмена.СписокВыбора, мТаблицаВозможныхОбменов);
	
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоНоменклатуре, "Номенклатура", "Номенклатура");
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоКонтрагентам, "Контрагенты" , "Контрагент");
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоСкладам     , "Склады"      , "Склад");
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоКассам      , "Кассы"       , "Касса");

	УстановитьВидимостьОтборовПоСправочникам();
	
	мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Главная;
	
	ЭлементыФормы.ДатаНачалаВыгрузкиСебестоимости.Доступность    = Ложь;
	ЭлементыФормы.ПериодичностьПередачиСебестоимости.Доступность = Ложь;
	
	ПериодичностьПередачиСебестоимости = Перечисления.Периодичность.День;
	
КонецПроцедуры

Процедура СоздатьКнопкуНазадПриНеобходимости()
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель.Доступность = Истина;	
		
КонецПроцедуры

Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НужнаКопкаГотово = Ложь;
	НужнаКнопкаЗакрыть = Ложь;
	
	Если мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена Тогда
		
		КоличествоНастроекДляВыбора = ЭлементыФормы.ТипИнформационнойБазыДляОбмена.СписокВыбора.Количество();
		
		Если ПустаяСтрока(ТипИнформационнойБазыДляОбмена)
			И КоличествоНастроекДляВыбора > 0 Тогда
			
			ЭлементыФормы.ТипИнформационнойБазыДляОбмена.Значение = 0;	
			ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[0].ИмяПланаОбмена;
			
		КонецЕсли;
		
		ВыполнитьДействияПриВыбореТипаИнформационнойБазы();
		
		Если КоличествоНастроекДляВыбора = 1 Тогда
			
			ТекущийЭлемент = ЭлементыФормы.НаименованиеИнформационнойБазыДляОбмена;
			
		КонецЕсли;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВозможностьПодключенияКоВторойИнформационнойБазе Тогда
		
		ДействияПрограммыПриИзмененииДоступностиИнформационнойБазыДляПодключения();
		
		Если мБазоваяПоставка Тогда
			
			ВыполнитьПереходДалее();
			
		КонецЕсли;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РедактированиеСуществующегоОбмена Тогда
		
		Если ПустаяСтрока(ИмяФайлаНастроекОбменаПервойИнформационнойБазы) Тогда
			
			ИмяФайлаДляУстановки = КаталогВременныхФайлов() + "НастройкиДляВторойИнформационнойБазы.xml";
			Файл = Новый Файл(ИмяФайлаДляУстановки);
		
			Если Файл.Существует() Тогда
				
				ИмяФайлаНастроекОбменаПервойИнформационнойБазы = ИмяФайлаДляУстановки;
				
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОсновныеПараметрыНастройкиОбменаДанными Тогда
				
		УстановитьСтраницуДополнительныхНастроек();
		ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();
						
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Главная Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
				
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗнакомстваИнформационныхБаз Тогда
		
		ЭлементыФормы.ДополнитеьльныеНастройкиФоновогоЗнакомства.Доступность = (ТипЗнакомстваИнформационныхБаз = 0);
		НужнаКопкаГотово = Истина;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбмена
		ИЛИ мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбменаCOM Тогда
		
		НужнаКнопкаЗакрыть = Истина;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДокументами Тогда
		
		Если ТипНастройки <> Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			ЭлементыФормы.ПрефиксДляИБПриемника.Видимость = Ложь;
			ЭлементыФормы.НадписьПрефиксТекущейБазыПриемника.Видимость = Ложь;
			
		КонецЕсли;	
		
		Если ПустаяСтрока(мПрефиксДляИБПриемника) Тогда
			Если ПустаяСтрока(ПрефиксДляИБПриемника) Тогда
				ПрефиксДляИБПриемника = мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ПрефиксПоУмолчанию;	
			КонецЕсли;
		Иначе
			ПрефиксДляИБПриемника = мПрефиксДляИБПриемника;
			ЭлементыФормы.ПрефиксДляИБПриемника.Доступность = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(мПрефиксДляИБИсточника) Тогда
			Если ПустаяСтрока(ПрефиксДляИБИсточника) Тогда
				ПрефиксДляИБИсточника = мСтруктураИнформацииОТекущейИнформационнойБазе.ПрефиксПоУмолчанию;	
			КонецЕсли;
			
		Иначе
			ПрефиксДляИБИсточника = мПрефиксДляИБИсточника;
			ЭлементыФормы.ПрефиксДляИБИсточника.Доступность = Ложь;
			
		КонецЕсли;

		
	КонецЕсли;
	
	УстановитьТекстыКнопокИКартинки(?(НужнаКопкаГотово, "Готово", ?(НужнаКнопкаЗакрыть, "Закрыть", "Далее")));
		
КонецПроцедуры

Процедура УстановитьТекстыКнопокИКартинки(ТекстКнопки)
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = ТекстКнопки;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Подсказка = ?(ТекстКнопки = "Готово", "Применить настройки", ?(ТекстКнопки = "Закрыть", "Закрыть", "Перейти к следующему пункту настройки"))	;
	
	ЭлементыФормы.ПанельКартинки.ТекущаяСтраница = ?(ТекстКнопки <> "Далее", 
		ЭлементыФормы.ПанельКартинки.Страницы.СтраницаГотово, 
		ЭлементыФормы.ПанельКартинки.Страницы.СтраницаНастройки);
	
КонецПроцедуры

// процедура устанавливает активной нужную страницу дополнительных настроек
Процедура УстановитьСтраницуДополнительныхНастроек()
	
	Если ДействиеВыбранноеПользователем = 0 
		И НЕ ВозможностьПодключенияКоВторойИнформационнойБазе Тогда
		
		ЭлементыФормы.ОбменЧерезCOMСоединение.Доступность = Ложь;
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
		КонецЕсли;			
		
	Иначе
		
		ЭлементыФормы.ОбменЧерезCOMСоединение.Доступность = Истина;
		
	КонецЕсли;
	
	// в зависимости от типа обмена устанавливаем нужную настройку
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.Видимость = Истина;		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.Файловый;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаКаталог;
		НадписьПояснениеКПроцедуреОбмена = "Данные для обмена будут выгружаться и загружаться в единый для двух информационных баз каталог обмена.";
		
		Если ПустаяСтрока(КаталогОбменаИнформацией) Тогда
			
			КаталогОбменаИнформацией = ПроцедурыОбменаДанными.ОпределитьНовоеИмяКаталогаДляОбменаДанными();
			
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.Видимость = Истина;
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.FTPОбмен;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаFTP;
		НадписьПояснениеКПроцедуреОбмена = "Данные для обмена будут выгружаться и загружаться в единый для двух информационных баз FTP адрес обмена.";
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезПочту Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.Видимость = Истина;
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.ОбменЧерезПочту;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаПочта;
		НадписьПояснениеКПроцедуреОбмена = "Данные для обмена будут выгружаться и загружаться через электронную почту.";
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.Видимость = (ПодключениеКПриемнику = Неопределено);
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.ОбменЧерезCOM;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаПодключение;
		НадписьПояснениеКПроцедуреОбмена = "Данные будут передаваться путем подключения к информационной базы-приемника.";
		
	КонецЕсли;
	
КонецПроцедуры

  // при изменении типа настройки
Процедура ТипНастройкиПриИзменении(Элемент)
	
	УстановитьСтраницуДополнительныхНастроек();

КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога обмена информацией
Процедура КаталогОбменаИнформациейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РезультатВыбора = ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
			
КонецПроцедуры

// при изменении каталога обмена информацией
Процедура КаталогОбменаИнформациейПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
			
КонецПроцедуры

// при изменении FTP адреса обмена
Процедура FTPАдресОбменаПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// открытие каталога FTP
Процедура FTPАдресОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение("ftp://" + ПроцедурыОбменаДанными.НормализоватьFTPАдрес(Элемент.Значение));
	
КонецПроцедуры

// при нажатии на кнопку проверить FTP соединение
Процедура ПроверитьНажатие(Элемент)
	
	ОчиститьСообщения();
	
	РезультатПроверки = ПроцедурыОбменаДанными.ПроверитьНастройкиFTPПодключения(ЭтотОбъект);
	
	Если РезультатПроверки Тогда
		Предупреждение("Проверка успешно пройдена !" , 30, "Проверка FTP подключения");
	Иначе
		Предупреждение("Возникли ошибки при подключении !", 30, "Проверка FTP подключения");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения()
	
	Если ТипИнформационнойБазыДляПодключения Тогда
		ЭлементыФормы.ПанельподключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник.Страницы.ПодключениеФайловаяИБ;
		ЭлементыФормы.ПанельподключениеИБПриемник1.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник1.Страницы.ПодключениеФайловаяИБ;
	Иначе
		ЭлементыФормы.ПанельподключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник.Страницы.ПодключениеСервернаяИБ;
		ЭлементыФормы.ПанельподключениеИБПриемник1.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник1.Страницы.ПодключениеСервернаяИБ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();		
	
КонецПроцедуры

Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьПользовательДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.НадписьПароль.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Функция ВыполнитьПроверкуДостаточностиПараметровДляПодключенияКПриемнику()
	
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();
	
	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);
	
	Результат = ОбработкаОбмена.ОпределитьДостаточностьПараметровДляПодключенияКПриемнику();
	
	Возврат Результат;	
	
КонецФункции

Процедура ТестПодключенияНажатие(Элемент)
	
	ОчиститьСообщения();
	
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();
	
	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);
	
	РезультатПодключения = ОбработкаОбмена.ВыполнитьПодключениеКИБПриемнику();
	
	Если РезультатПодключения = Неопределено Тогда
		
		Предупреждение("Возникли ошибки при подключении к информационной базе-приемнику.");
		
	Иначе
		
		Предупреждение("Подключение к информационной базе-приемнику произошло успешно.");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);	
		
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыполнитьДействияПриВыбореТипаИнформационнойБазы()
	
	// определим сколько узлов в плане обмена который выбрал пользователь. Если узел только свой - то зададим имя настройки по умолчанию
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ 
	               |	Количество(ПланОбменаПользователя.Ссылка) КАК Количество
	               |ИЗ
	               |	ПланОбмена." + ТипИнформационнойБазыДляОбмена + " КАК ПланОбменаПользователя
				   |	ГДЕ ПланОбменаПользователя.ПометкаУдаления = ЛОжь";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоУзлов = 0;
	Если Выборка.Следующий() Тогда
		КоличествоУзлов = Выборка.Количество;
	КонецЕсли;
	
	Если КоличествоУзлов < 2 Тогда
		
		НаименованиеИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ПредставлениеКонфигурации;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляОбменаПриИзменении(Элемент)
	
	мКоличествоОбъектовДляСопоставления = Неопределено;
	ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяПланаОбмена;
	
	ВыполнитьДействияПриВыбореТипаИнформационнойБазы();
	
КонецПроцедуры



// при нажатии на "Открытие" у каталога обмена данными
Процедура КаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

//Функция определяет наличие настройки обмена
Функция ОпределитьНаличиеНастройки()
	
	Если НЕ ЗначениеЗаполнено(СозданнаяНастройкаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;	
			
	ОбъектНастройки = СозданнаяНастройкаОбмена.ПолучитьОбъект();
		
	Если ОбъектНастройки = Неопределено Тогда
		Возврат Ложь;
	Конецесли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиПоНастройкеПользователя(ЗакрытьПомощникПослеОбмена = Ложь)
	
	Если НЕ ОпределитьНаличиеНастройки() Тогда
		Предупреждение("Не выбрана настройка для проведения обмена данными");
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(СозданнаяНастройкаОбмена, , глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
		
	Если ЗакрытьПомощникПослеОбмена Тогда
		Закрыть();
	КонецЕсли;
	
Конецпроцедуры

Процедура ВыполнитьНажатие(Элемент)
	
	ВыполнитьОбменДаннымиПоНастройкеПользователя();	
	
КонецПроцедуры

Процедура ИмяФайлаНастроекОбменаПервойИнформационнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ИмяФайлаНастроекОбменаПервойИнформационнойБазыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.Заголовок = "Файл для настройки обмена";
	Диалог.Фильтр = "Файл для настройки обмена (*.xml)|*.xml";
	
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.ПолноеИмяФайла = "НастройкиДляВторойИнформационнойБазы.xml";

	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	Иначе
		Элемент.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаНастроекОбменаПервойИнформационнойБазы1Открытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДополнительныеНастройкиОбменаДаннымиНажатие(Элемент)
	
	// доп настройки обмена
	ФормаДопНастроекАвтообмена = ПолучитьФорму("ДополнительныеНастройки", ЭтаФорма); 
	РезультатОткрытия = ФормаДопНастроекАвтообмена.ОткрытьМодально();	
	
КонецПроцедуры

Процедура ДополнитеьльныеНастройкиФоновогоЗнакомстваНажатие(Элемент)
	
	ФормаДопНастроекАвтообмена = ПолучитьФорму("ДополнительныеНастройкиФоновогоОбмена", ЭтаФорма); 
	ФормаДопНастроекАвтообмена.ИнформацияОТипеОбмена = ИнформацияОТипеОбмена;
	РезультатОткрытия = ФормаДопНастроекАвтообмена.ОткрытьМодально();
	
КонецПроцедуры

Процедура ВыполнитьСопоставлениеВФоновомРежимеПриИзменении(Элемент)
	
	ЭлементыФормы.ДополнитеьльныеНастройкиФоновогоЗнакомства.Доступность = (ТипЗнакомстваИнформационныхБаз = 0);
	
КонецПроцедуры

Процедура ДействияПрограммыПриИзмененииДоступностиИнформационнойБазыДляПодключения()
	
	ЭлементыФормы.НадписьТипИнформационнойБазыДляПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.ТипИнформационнойБазыДляПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.ПанельподключениеИБПриемник1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.АутентификацияWindowsИнформационнойБазыДляПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.ТестПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.НадписьПользовательДляПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.НадписьПароль1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения1.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	ЭлементыФормы.ВерсияПлатформыИнформационнойБазыДляПодключения.Доступность = ВозможностьПодключенияКоВторойИнформационнойБазе;
	
КонецПроцедуры

Процедура ВозможностьПодключенияКоВторойИнформационнойБазеПриИзменении(Элемент)
	
	ДействияПрограммыПриИзмененииДоступностиИнформационнойБазыДляПодключения();
	
КонецПроцедуры

Процедура Надпись121Нажатие(Элемент)
	
	ОткрытьПодсказкуПользователю("ПараметрыПодключения");	
	
КонецПроцедуры

Процедура ОткрытьПодсказкуПользователю(ИмяПодсказки)
	
	ФормаПомощи = ПолучитьФорму("ФормаПомощи");
	ФормаПомощи.ОткрытьПомощь(ИмяПодсказки);
	ФормаПомощи.Открыть();	
	
КонецПроцедуры

Функция ПолучитьСписокВыбораРазмеровПакетовFTP()
	
	СписокВыбора = Новый СписокЗначений();
	
	СписокВыбора.Добавить(256 , "256 КБт");
	СписокВыбора.Добавить(512 , "512 КБт");
	СписокВыбора.Добавить(1024 ,"1 MБт");
	СписокВыбора.Добавить(2048 ,"2 MБт");
	СписокВыбора.Добавить(4096 ,"4 MБт");
	СписокВыбора.Добавить(8192 ,"8 MБт");
	СписокВыбора.Добавить(16384,"16 MБт");
	СписокВыбора.Добавить(32768,"32 MБт");
	СписокВыбора.Добавить(65536,"64 MБт");
	СписокВыбора.Добавить(131072,"128 MБт");
	СписокВыбора.Добавить(262144,"256 MБт");
	СписокВыбора.Добавить(0 , "Без ограничений");
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ПолучитьСписокВыбораРазмеровПакетовFTP();
	
	ВыбранноеЗначениеСписка = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	
	Если ВыбранноеЗначениеСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначениеСписка.Значение;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьСписокПротоколовПроксиСервера()
	
	СписокВыбора = Новый СписокЗначений();
	
	СписокВыбора.Добавить("http" , "http");
	СписокВыбора.Добавить("https" , "https");
	СписокВыбора.Добавить("ftp" , "ftp");	
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура ПротоколПроксиFTPНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ПолучитьСписокПротоколовПроксиСервера();
	
	ВыбранноеЗначениеСписка = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	
	Если ВыбранноеЗначениеСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначениеСписка.Значение;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТипыЦенНоменклатурыТипЦеныНоменклатурыПриИзменении(Элемент)
	
	ВыбранныйТипЦен = ЭлементыФормы.ТипыЦенНоменклатуры.ТекущаяСтрока.ТипЦеныНоменклатуры;
	
	Если ВыбранныйТипЦен.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон 
	 Или ВыбранныйТипЦен.Рассчитывается Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя выбирать динамические типы цен, и типы цен, рассчитываемые от вхождения в диапазон базовой цены!");
	
		ТипыЦенНоменклатуры.Удалить(ЭлементыФормы.ТипыЦенНоменклатуры.ТекущаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ФильтрацияСправочникаОрганизацииПриИзменении(Элемент)
	
	УстановитьВидимостьОтборовПоСправочникам();
	
КонецПроцедуры


Процедура ФильтрацияСправочникаНоменклатураПриИзменении(Элемент)
	
	УстановитьВидимостьОтборовПоСправочникам();
	
КонецПроцедуры

Процедура ФильтрацияСправочникаКонтрагентыПриИзменении(Элемент)
	
	УстановитьВидимостьОтборовПоСправочникам();
	
КонецПроцедуры

Процедура ФильтрацияСправочникаСкладыПриИзменении(Элемент)
	
	УстановитьВидимостьОтборовПоСправочникам();
	
КонецПроцедуры

Процедура ФильтрацияСправочникаКассыПриИзменении(Элемент)
	
	УстановитьВидимостьОтборовПоСправочникам();
	
КонецПроцедуры

Процедура УстановитьВидимостьОтборовПоСправочникам()
	
	Если ФильтрацияСправочникаНоменклатура 
		ИЛИ ФильтрацияСправочникаКонтрагенты 
		ИЛИ ФильтрацияСправочникаСклады 
		ИЛИ ФильтрацияСправочникаКассы 
		ИЛИ ФильтрацияСправочникаОрганизации Тогда
	
		ЭлементыФормы.ОтборПоСправочникам.Видимость = Истина;
		
		ЭлементыФормы.ОтборПоСправочникам.Страницы.Номенклатура.Видимость = ФильтрацияСправочникаНоменклатура;
		ЭлементыФормы.ОтборПоСправочникам.Страницы.Контрагенты.Видимость  = ФильтрацияСправочникаКонтрагенты;
		ЭлементыФормы.ОтборПоСправочникам.Страницы.Склады.Видимость       = ФильтрацияСправочникаСклады;
		ЭлементыФормы.ОтборПоСправочникам.Страницы.Кассы.Видимость        = ФильтрацияСправочникаКассы;
		ЭлементыФормы.ОтборПоСправочникам.Страницы.Организации.Видимость  = ФильтрацияСправочникаОрганизации;
		
	Иначе
		
		ЭлементыФормы.ОтборПоСправочникам.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПостроительОтчета(ПостроительОтчета, ИмяСправочника, ПредставлениеЭлемента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИмяСправочника.Ссылка КАК ПредставлениеЭлемента
	|ИЗ
	|	Справочник.ИмяСправочника КАК ИмяСправочника";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника", ИмяСправочника);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредставлениеЭлемента", ПредставлениеЭлемента);
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
КонецПроцедуры

Функция ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчета)
	
	СтруктураПостроителяОтчета = Новый Структура;
	СтруктураПостроителяОтчета.Вставить("Отбор"    , ПостроительОтчета.Отбор);
	СтруктураПостроителяОтчета.Вставить("Настройки", ПостроительОтчета.ПолучитьНастройки(Ложь, Истина, Истина, Истина, Истина));
	Возврат Новый ХранилищеЗначения(СтруктураПостроителяОтчета);
	
КонецФункции

Процедура НадписьДобавлениеНастройкиВСуществующееРасписаниеНажатие(Элемент)
	
	// добавить настройку в существующее расписание
	ФормаСписка = Справочники.НастройкиВыполненияОбмена.ПолучитьФормуСписка();
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура НадписьДобавлениеНастройкиВНовоеРасписаниеНажатие(Элемент)
	
	// создать новую настройку для расписания
	ЭлементОбмена = Справочники.НастройкиВыполненияОбмена.СоздатьЭлемент();
	ЭлементОбмена.Заполнить(СозданнаяНастройкаОбмена);
	ЭлементОбмена.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовОписаниеНастройкиДляПользователяОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьФормуРедактированияТекста(ЭтаФорма, Элемент.Значение, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедурыОбменаДаннымиКлиент.ОпределитьИмяВыгрузкиЭлементаПоСтрокеНастройки(Элемент);
	
	// новые настройки для обмена, которые не поддерживаются правилами обмена загружать нельзя
	Если НоваяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ОбязательноОбновитьТаблицуНастроекИзПравил = Ложь) Экспорт
	
	ПравилаВыгрузки = Новый ХранилищеЗначения(ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена));
	
	НужноВнестиИзмененияВИнформационнуюБазуПриемника = (ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику <> Неопределено);
		
	Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
		ПравилаЗагрузки = Новый ХранилищеЗначения(ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена));
	Иначе
		ПравилаЗагрузки = Новый ХранилищеЗначения("");
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ЭтаФорма, ПравилаВыгрузки, ПравилаЗагрузки, ОбязательноОбновитьТаблицуНастроекИзПравил);
		
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		
		ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные.ОписаниеНастройкиДляПользователя = "";	
		ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные.ВариантПоискаНеПоддерживается = Ложь;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Этаформа, Элемент, СтандартнаяОбработка);
			
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.НастройкаНеПоддерживается Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхНастройкаВыгрузкиПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(ЭлементыФормы, Элемент.Значение);
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ПрефиксДляЗагружаемыхДокументовПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

Процедура ПрефиксДляДокументовВТекущейИБПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкаВыгрузкиДанныхИзменитьНастройку(Кнопка)
	
	ПроцедурыОбменаДаннымиКлиент.ИзменитьНастройкиВыгрузкиДляВыделенныхСтрок(ЭлементыФормы);
	
КонецПроцедуры

Процедура ВыгружатьСебестоимостьПриИзменении(Элемент)
	
	ЭлементыФормы.ДатаНачалаВыгрузкиСебестоимости.Доступность    = ВыгружатьСебестоимость;
	ЭлементыФормы.ПериодичностьПередачиСебестоимости.Доступность = ВыгружатьСебестоимость;
	
КонецПроцедуры

Процедура ЗаполнитьОграниченияПоОрганизациям()
	
	Если ТаблицаВыбораОрганизаций.Количество() = 0 Тогда
		
		ВыбраныВсеОрганизации = (Организации.Количество() = 0);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(НЕ Организации.ПометкаУдаления)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаВыбораОрганизаций.Добавить();	
			СтрокаТаблицы.Организация = Выборка.Ссылка;
			СтрокаТаблицы.Пометка = ВыбраныВсеОрганизации
			ИЛИ (Организации.Найти(Выборка.Ссылка, "Организация") <> Неопределено);
			
		КонецЦикла;		
		
	КонецЕсли;
    	
КонецПроцедуры	

Функция ОпределитьВыбраныВсеЭлементыТаблицы(ТаблицаВыбора)
	
	Для Каждого СтрокаВыбора Из ТаблицаВыбора Цикл
		
		Если НЕ СтрокаВыбора.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

ФильтрацияСправочникаОрганизации  = Ложь;
ФильтрацияСправочникаНоменклатура = Ложь;
ФильтрацияСправочникаКонтрагенты  = Ложь;
ФильтрацияСправочникаСклады       = Ложь;
ФильтрацияСправочникаКассы        = Ложь;

мМассивПереходовПоСтраницам = Новый Массив();
мНужноПропуститьОсновнуюСтраницуНастроек = Ложь;

мБазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);

мОбщаяТаблицаНастроекПолейПоиска = Неопределено;
мОбщаяТаблицаНастроекВыгрузки = Неопределено;

