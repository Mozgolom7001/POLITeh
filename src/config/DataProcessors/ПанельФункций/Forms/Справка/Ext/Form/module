////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

Перем мСоответствиеСтраниц;
Перем мСоответствиеКартинокСтраниц;
Перем ВсегоСтраниц;
Перем мСоответствиеМакетов;
Перем мДействиеПерехода;
Перем мДобавленныеСтраницы;
Перем мРазмерШрифта;

Перем КоллекцияПереходов;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

// Процедура устанавливает доступность кнопки истории.
//
// Параметры 
//  Нет
//
Процедура УстановитьДоступностьКнопокИстории()  Экспорт

	СчетчикИстории    = мСоответствиеИстории["Счетчик"];
	КоличествоИстории = мСоответствиеИстории["Количество"];

	ЭлементыФормы.КоманднаяПанельНавигации.Кнопки.ПерейтиВперед.Доступность = (СчетчикИстории < КоличествоИстории);
	ЭлементыФормы.КоманднаяПанельНавигации.Кнопки.ПерейтиНазад.Доступность  = (СчетчикИстории > 1);

КонецПроцедуры //УстановитьДоступностьКнопокИстории()

// Функция получает текст страницы макета
//
// Параметры
//  ИмяСтраницы - имя страницы макета
//		Тип - Строка
//
// Возращаемое значение - текст макета страницы
//		Тип - Строка
//
Функция ПолучитьТекстМакета(ИмяСтраницы)

	ТекстМакета = мСоответствиеМакетов[ИмяСтраницы];

	Если ТекстМакета = Неопределено Тогда 
		Предупреждение("Не найдена страница: " + мСоответствиеСтраниц[ИмяСтраницы]);
		Возврат "";
	КонецЕсли;

	Возврат ТекстМакета;

КонецФункции // ПолучитьТекстМакета()


// Процедура выполняет переход на страницу HTLM документа текущей страницы макета.
//
// Параметры
//  Нет
//
Процедура ВыполнитьУстановкуТекущейСтраницы()
	
	ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ПолучитьТекстМакета(мИмяТекущейСтраницы));
	
	ЭтаФорма.Заголовок = "Справка: " + мСоответствиеСтраниц[мИмяТекущейСтраницы];
	
	// Обновим отображение формы ПанельФункций на текущую страницу
	ЭтаФорма.ВладелецФормы.Обновить();
	
	// Синхронизируем формы Справка и ПанельФункций
	мТекущаяСтраница = мИмяТекущейСтраницы ;

КонецПроцедуры // ВыполнитьУстановкуТекущейСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА HTML

// Процедура формирует раздел HTML документа
//
// Параметры
//  ТекстТекущейСтраницы - название раздела
//		Тип - Строка
//  ТагВыполнить - выполняемая строка 1С предприятия
//		Тип - Строка
//  ТагПерейти - имя узла перехода на другую страницу
//		Тип - Строка
//  Содержание - заголовок пункта
//		Тип - Строка
//  ИмяКартинки - имя картинки раздела
//		Тип - Строка
//  УровеньСодержания - уровнь подраздела
//		Тип - Строка
//
Процедура ДобавитьПунктВHTML(ТекстТекущейСтраницы, Содержание, УровеньСодержания, ТагВыполнить, ТагПерейти, ИмяКартинки)

	ВставлятьСсылку = Ложь;
	ТекстСсылки     = "";

	Если НЕ ПустаяСтрока(ТагВыполнить) Тогда
		ВставлятьСсылку = Истина;
		ТекстСсылки = ТекстСсылки + Содержание;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТагПерейти) Тогда
		ВставлятьСсылку = Истина;
		ТекстСсылки = ТекстСсылки + "Перейти=" + СформироватьИмяСтраницы(ТагПерейти);
	КонецЕсли;

	ИмяСтиля = "Item" + УровеньСодержания;
	
	ТекстТекущейСтраницы = ТекстТекущейСтраницы + "<DIV class=""" + ИмяСтиля + """>";

	Если ВставлятьСсылку Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + "<A title="""" href=""" + ТекстСсылки + """>";
	КонецЕсли;

	Если НЕ ПустаяСтрока(ИмяКартинки) Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + "<IMG border=""0"" align=top src=""" + ЭлементыФормы.ПолеHTMLДокумента.ПолучитьURL(Метаданные.ОбщиеКартинки[ИмяКартинки]) + """>";
	КонецЕсли;
	
	ТекстТекущейСтраницы = ТекстТекущейСтраницы + Содержание + Символы.ПС;
	
	Если ВставлятьСсылку Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + "</A>"
	КонецЕсли;

	ТекстТекущейСтраницы = ТекстТекущейСтраницы + "</DIV>";

КонецПроцедуры // ДобавитьПунктВHTML()

// Процедура добавляет пояснение в текст текущей страницы
//
// Параметры
//  ТекстТекущейСтраницы - текст текущей страницы
//		Тип - Строка
//  Пояснение - вставляемое поясненние
//		Тип - Строка
//
Процедура ДобавитьПояснениеВHTML(ТекстТекущейСтраницы, Пояснение)

	Если НЕ ПустаяСтрока(Пояснение) Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + "<!--<DIV class=""Description"">" + Пояснение + "</DIV>-->" + Символы.ПС;
	КонецЕсли;

КонецПроцедуры // ДобавитьПояснениеВHTML()

// Процедура додавляет заголовок в текст HTLM документа текущей страницы
// 
// Параметры
//  ТекстТекущейСтраницы - HTLM текст текущей страницы
//		Тип - Строка
//  ТекстЗаголовка - добавляемый текст заголовка
//		Тип - Строка
//  КартинкаЗаголовка - имя картинки заголовка
//		Тип - строка
//
Процедура ДобавитьЗаголовокВHTML(ТекстТекущейСтраницы, ТекстЗаголовка, КартинкаЗаголовка = "")

	ВыводитьЗаголовок = (НЕ ПустаяСтрока(КартинкаЗаголовка)) ИЛИ (НЕ ПустаяСтрока(ТекстЗаголовка));

	Если ВыводитьЗаголовок Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + "<DIV top=0 class=""Paragraf"">";
	КонецЕсли;

	Если НЕ ПустаяСтрока(КартинкаЗаголовка) Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + "<IMG border=""0""  align=top src=""" + ЭлементыФормы.ПолеHTMLДокумента.ПолучитьURL(Метаданные.ОбщиеКартинки[КартинкаЗаголовка]) + """>";
	КонецЕсли;

	Если ВыводитьЗаголовок Тогда
		ТекстТекущейСтраницы = ТекстТекущейСтраницы + " &nbsp " + ТекстЗаголовка + "</DIV>" + Символы.ПС;
	КонецЕсли;

КонецПроцедуры //ДобавитьЗаголовокВHTML()

// Функция формирует заголовок HTLM документа панели функций
//
// Параметры
//  Нет
//
// Возращаемое значение - текст HTLM документа
//		Тип - Строка
//
Функция ЗаголовокСтраницы()

	РазмерЗаголовка  = мРазмерШрифта * 4 + 12;
	РазмерПодраздела = "medium";
	РазмерПункта     = "small";
	РазмерПодПункта  = "x-small";
	РазмерОписания   = "x-small";
	
	
	Возврат "
	|<HTML>
	|<HEAD>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<STYLE type=text/css>
	|
	|A{TEXT-DECORATION: none}
	|A:visited {COLOR: #000000}
	|A:active {COLOR: #000000}
	|A:link {COLOR: #000000}
	|A:hover {COLOR: #000080; TEXT-DECORATION: none; border-bottom-style:dashed ; border-bottom-width:1; background-color: #fbfbfd;}
	|
	|.Paragraf {border-bottom-style:solid; border-bottom-width:1; border-top-style:none; border-top-width:2; background-color: #f6f6f6; border-color: #888888;
	|line-height: 180%; text-shadow: 10px 10px 2px red; MARGIN-TOP: 0px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 0px; MARGIN-LEFT: 0 px; MARGIN-RIGHT: 0px; FONT-FAMILY: Arial; font-weight: bold; font-size: " + РазмерЗаголовка + "
	|}
	|.Item0 {border-bottom-style: dashed; border-bottom-width:1; border-top-style:dashed; border-top-width:1; background-color: #FDFDFD; border-color: #e8e8e8;
	|MARGIN-TOP: 10px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 4px; MARGIN-LEFT: 8 px; MARGIN-RIGHT: 0px; background-color: #FCFCFC; FONT-FAMILY: Arial; font-size: " + РазмерПодраздела + ",
	|}
	|.Item1 {
	|MARGIN-TOP: 10px; FONT-WEIGHT: bold; MARGIN-BOTTOM: 4px; MARGIN-LEFT: 8 px; MARGIN-RIGHT: 0px; background-color: #FCFCFC; FONT-FAMILY: Arial; font-size: " + РазмерПункта + ",
	|}
	|.Item2 {
	|MARGIN-TOP: 10px; MARGIN-BOTTOM: 4px; MARGIN-LEFT: 18 px; MARGIN-RIGHT: 8px; FONT-FAMILY: Arial; font-size: " + РазмерПодПункта + ",
	|}
	|.Description {COLOR: #888888;
	|MARGIN-TOP: 4px; MARGIN-BOTTOM: 4px; MARGIN-LEFT: 24 px; MARGIN-RIGHT: 8px; FONT-FAMILY: Arial; TEXT-ALIGN: justify; font-size: " + РазмерОписания + ",
	|}
	|</STYLE>
	|</HEAD>
	|<BODY bottomMargin=0 leftMargin=0 topMargin=0 rightMargin=0 bgColor=#ffffff> <BASEFONT SIZE=" + мРазмерШрифта + ">
	|";

КонецФункции // ЗаголовокСтраницы()

// Функция формирует теги конца HTLM документа
//
// Параметры
//  Нет
//
// Возращаемое значение - текст HTLM документа
//		Тип - Строка
//
Функция ЗавершениеСтраницы()

	Возврат "</BODY></HTML>" + Символы.ПС;

КонецФункции // ЗавершениеСтраницы()

// Функция преобразует название страницы в имя страницы.
//
// Параметры
//  НазваниеТекущейСтраницы - название страницы
//		Тип - Строка
//
// Возращаемое значение
//		Тип - Строка
Функция СформироватьИмяСтраницы(НазваниеТекущейСтраницы)

	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(НазваниеТекущейСтраницы, " ", "_"), ".", "_"), ",", "_");

КонецФункции // СформироватьИмяСтраницы()

// Процедура формирует HTLM документ и структуру навигации по макету.
//
// Параметры
//  Нет
//
Процедура ПодготовитьКонтекстСтраниц()

	мСоответствиеСтраниц         = Новый Соответствие;
	мСоответствиеКартинокСтраниц = Новый Соответствие;
	мСоответствиеМакетов         = Новый Соответствие;

	КоллекцияПереходов   = ЭлементыФормы.КоманднаяПанельНавигации.Кнопки.Разделы.Кнопки;
	мДобавленныеСтраницы = Новый Соответствие;

	ЭлементыФормы.КоманднаяПанельНавигации.Кнопки.Разделы.Кнопки.Очистить();
	
	ИмяМакетаКонтекста = "Основной";
	
	МакетНЕПрисутствует = Истина;
	
	Для каждого МетаМакет из Метаданные().Макеты Цикл
		Если ВРЕГ(ИмяМакетаКонтекста) = ВРЕГ(МетаМакет.Имя) Тогда
			МакетНЕПрисутствует = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МакетНЕПрисутствует Тогда
		ИмяМакетаКонтекста = "Основной";
		
	КонецЕсли;
	
	МакетКонтекста = ПолучитьМакет(ИмяМакетаКонтекста);
	КоличествоСтрокВМакете = МакетКонтекста.КоличествоСтрок();

	ОбъектХраненияДанныхПанели = Новый ЧтениеXML();
	ОбъектХраненияДанныхПанели.УстановитьСтроку(МакетКонтекста.ПолучитьТекст());
	
	СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели, "ПанельФункций");


	Если СоответствиеАтрибутов = Неопределено Тогда
		Предупреждение("Ошибка в исходном макете панели функций, работа панели функций не может быть продолжена!");
		Закрыть();
		Возврат;
	КонецЕсли;
	
	СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели, "СтраницаПанели");

	Пока СоответствиеАтрибутов <> Неопределено Цикл
		
		ПрочиталиСледующуюСтраницу = Ложь;
		ИмяСтраницы = СоответствиеАтрибутов["ИмяСтраницы"];
		Если НЕ ПустаяСтрока(ИмяСтраницы) Тогда 
			
			ЗаголовокСтраницы = СоответствиеАтрибутов["ЗаголовокСтраницы"];
			Если НЕ ПустаяСтрока(ЗаголовокСтраницы) Тогда
				
				КартинкаСтраницы = СоответствиеАтрибутов["КартинкаСтраницы"];
				ТекстТекущейСтраницы = "";
				ДобавитьЗаголовокВHTML(ТекстТекущейСтраницы, ЗаголовокСтраницы);

				СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели);
				Пока (СоответствиеАтрибутов <> Неопределено) И (мТекущийУзел = "ПунктПанели") Цикл
					Содержание   = СоответствиеАтрибутов["ЗаголовокПункта"];
					ТагВыполнить = СоответствиеАтрибутов["ВыполнитьВПункте"];
					ТагПерейти   = СоответствиеАтрибутов["ПерейтиВПункте"];
					Пояснение    = СоответствиеАтрибутов["ОписаниеПункта"];
					ИмяКартинки  = СоответствиеАтрибутов["Картинка"];
					Подраздел    = (СоответствиеАтрибутов["Подраздел"] = "Истина");
					
					Если СокрЛП(ИмяСтраницы) = "Содержание" Тогда
						УровеньПункта = 1;
						
					Иначе
						УровеньПункта = ?(Подраздел, 0, 2);
						
					КонецЕсли;
					
					ДобавитьПунктВHTML(ТекстТекущейСтраницы, Содержание, УровеньПункта, ТагВыполнить, ТагПерейти, ИмяКартинки);
					ДобавитьПояснениеВHTML(ТекстТекущейСтраницы, Пояснение);
					
					СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели);
				КонецЦикла;
				
				ДобавитьМакетСтраницы(ЗаголовокСтраницы, СформироватьИмяСтраницы(ИмяСтраницы), ТекстТекущейСтраницы, КартинкаСтраницы);
				
				Если СоответствиеАтрибутов = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				Если (СоответствиеАтрибутов <> Неопределено) И (мТекущийУзел = "СтраницаПанели") Тогда
					ПрочиталиСледующуюСтраницу = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПрочиталиСледующуюСтраницу Тогда
			СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели, "СтраницаПанели");
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры //ПодготовитьКонтекстСтраниц()

// Процедура добавляет страницу макета в структуру навигации
//
// Параметры
//  НазваниеТекущейСтраницы - название текущей страницы
//		Тип - Строка
//  ИмяТекущейСтраницы - имя текущей страницы
//		Тип - Строка
//  ТекстТекущейСтраницы - содержание страницы
//		Тип - Строка
//  ИмяКартинкиТекущейСтраницы - имя картинки страницы
//		Тип - Строка
//
Процедура ДобавитьМакетСтраницы(НазваниеТекущейСтраницы, ИмяТекущейСтраницы, ТекстТекущейСтраницы, ИмяКартинкиТекущейСтраницы)

	// Если уже формировали страницу, запишем её в соответствие
	Если НЕ ПустаяСтрока(НазваниеТекущейСтраницы) Тогда

		Если мДобавленныеСтраницы[ИмяТекущейСтраницы] = Истина Тогда
			Сообщить("Страница " + НазваниеТекущейСтраницы + "(" + ИмяТекущейСтраницы + ") не может быть добавлена, так как уже есть страница с таким именем!");

		Иначе
			мСоответствиеМакетов.Вставить(ИмяТекущейСтраницы, ЗаголовокСтраницы() + Символы.ПС + ТекстТекущейСтраницы + ЗавершениеСтраницы());
			мСоответствиеСтраниц.Вставить(ИмяТекущейСтраницы, НазваниеТекущейСтраницы);
			мСоответствиеКартинокСтраниц.Вставить(ИмяТекущейСтраницы, ИмяКартинкиТекущейСтраницы);
			мДобавленныеСтраницы.Вставить(ИмяТекущейСтраницы, Истина);

			КнопкаПерехода = КоллекцияПереходов.Добавить(ИмяТекущейСтраницы, ТипКнопкиКоманднойПанели.Действие, НазваниеТекущейСтраницы, мДействиеПерехода);

			Если НЕ ПустаяСтрока(ИмяКартинкиТекущейСтраницы) Тогда
				КнопкаПерехода.Картинка = БиблиотекаКартинок[ИмяКартинкиТекущейСтраницы];
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДобавитьМакетСтраницы()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	мСоответствиеИстории = Новый Соответствие;
	мСоответствиеИстории.Вставить("Счетчик", 0);
	мСоответствиеИстории.Вставить("Количество", 0);

	СохраненныйРазмерШрифта = ВосстановитьЗначение("Обработка.ПанельФункций.РазмерШрифта");
	
	Если ТипЗнч(СохраненныйРазмерШрифта) <> Тип("Число") Тогда
		мРазмерШрифта = 2;
		
	ИначеЕсли (СохраненныйРазмерШрифта > 5) ИЛИ (СохраненныйРазмерШрифта < 1) Тогда
		мРазмерШрифта = 2;
		
	Иначе
		мРазмерШрифта = СохраненныйРазмерШрифта;
		
	КонецЕсли;
	
	УстановитьПометкуРазмераШрифтаВПодменю();
	
	УстановитьДоступностьКнопокИстории();
	ПодготовитьКонтекстСтраниц();


	мТекущаяСтраница = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТекущаяСтраницаПанелиФункций");
	Если НЕ ТипЗнч(мТекущаяСтраница) = Тип("Строка") Тогда
		мТекущаяСтраница = "Содержание";
	КонецЕсли;

	Если мДобавленныеСтраницы[мТекущаяСтраница] <> Истина Тогда
		мТекущаяСтраница = "Содержание";
	КонецЕсли;

	мОткрыватьПриЗапуске = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеПанельФункций");

	Если НЕ ТипЗнч(мОткрыватьПриЗапуске) = Тип("Булево") Тогда
		ОткрыватьПриЗапуске = Истина;
	Иначе
		ОткрыватьПриЗапуске = мОткрыватьПриЗапуске;
	КонецЕсли;

	ЭлементыФормы.КоманднаяПанельНастройка.Кнопки.Настройка.Кнопки.ОткрыватьПриЗапуске.Пометка = ОткрыватьПриЗапуске;

	ВыполнитьУстановкуТекущейСтраницы();
	ЗаписатьВИсторию();

КонецПроцедуры //ПриОткрытии()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("Обработка.ПанельФункций.РазмерШрифта", мРазмерШрифта);
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТекущаяСтраницаПанелиФункций",     мТекущаяСтраница);
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеПанельФункций", ЭлементыФормы.КоманднаяПанельНастройка.Кнопки.Настройка.Кнопки.ОткрыватьПриЗапуске.Пометка);

КонецПроцедуры // ПриЗакрытии()

// Процедура обработчик события "Обновление отображения" формы
//
Процедура ОбновлениеОтображения()
	Если мТекущаяСтраница <> мИмяТекущейСтраницы Тогда
		ВыполнитьУстановкуТекущейСтраницы();
		УстановитьДоступностьКнопокИстории();
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработчик события "Нажатие" элемента ОткрыватьПриЗапуске меню Настройка
//
Процедура ИндексОткрыватьПриЗапуске(Кнопка)

	Кнопка.Пометка      = НЕ Кнопка.Пометка;
	ОткрыватьПриЗапуске = Кнопка.Пометка;

КонецПроцедуры // ИндексОткрыватьПриЗапуске

// Процедура скрывает или раскрывает описание пункта HTLM страницы.
//
// Параметры:
//  htmlElement - srcElement объекта HTLM страницы.
//		Тип - COMОбъект
//
Процедура РаскрытьСкрытьОписание(htmlElement)
	
	HTLMТекстСтраницы = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьТекст();
	Позиция = Найти(HTLMТекстСтраницы,htmlElement.innerText+"</A></DIV><!--<DIV");
	Если Позиция > 0 Тогда
		ЛевHTLMТекстСтраницы  = Лев(HTLMТекстСтраницы,Позиция+СтрДлина(htmlElement.innerText+"</A></DIV>")-1);
		ПравHTLMТекстСтраницы = Прав(HTLMТекстСтраницы,СтрДлина(HTLMТекстСтраницы)-Позиция-СтрДлина(htmlElement.innerText+"</A></DIV>")-3);
		Позиция = Найти (ПравHTLMТекстСтраницы,"-->");
		Если Позиция > 0 Тогда
			ПравHTLMТекстСтраницы = Лев(ПравHTLMТекстСтраницы,Позиция-1)+Прав(ПравHTLMТекстСтраницы,СтрДлина(ПравHTLMТекстСтраницы)-Позиция-2);
			HTLMТекстСтраницы = ЛевHTLMТекстСтраницы + ПравHTLMТекстСтраницы;
			ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(HTLMТекстСтраницы);
			
		КонецЕсли;
	Иначе
		Позиция = Найти(HTLMТекстСтраницы,htmlElement.innerText+"</A></DIV>");
		Если Позиция > 0 Тогда
			ЛевHTLMТекстСтраницы = Лев(HTLMТекстСтраницы,Позиция+СтрДлина(htmlElement.innerText+"</A></DIV>")-1);
			ПравHTLMТекстСтраницы = Прав(HTLMТекстСтраницы,СтрДлина(HTLMТекстСтраницы)-Позиция-СтрДлина(htmlElement.innerText+"</A></DIV>")-1);
			Позиция = Найти (ПравHTLMТекстСтраницы,"</DIV>");
			Если Позиция > 0 Тогда
				ПравHTLMТекстСтраницы = Лев(ПравHTLMТекстСтраницы,Позиция+6)+"-->"+Прав(ПравHTLMТекстСтраницы,СтрДлина(ПравHTLMТекстСтраницы)-Позиция-5);
				HTLMТекстСтраницы = ЛевHTLMТекстСтраницы +"<!--"+ ПравHTLMТекстСтраницы;
				ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(HTLMТекстСтраницы);
				
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // РаскрытьСкрытьОписание()

// Обработчик события "onClick" поля HTML документа.
//
Процедура ПолеHTMLДокументаОnСlick(Элемент, pEvtObj)

	htmlElement = pEvtObj.srcElement;

	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;

	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Позиция = Найти(htmlElement.href, "Перейти=");

	Если Позиция > 0 Тогда

		ИмяСтраницы = Сред(htmlElement.href, Позиция + 8);
		Если мДобавленныеСтраницы[ИмяСтраницы] = Истина Тогда
			мИмяТекущейСтраницы = ИмяСтраницы;
			ВыполнитьУстановкуТекущейСтраницы();
			ЗаписатьВИсторию();

		Иначе
			Предупреждение("Не найдена страница перехода:" + ИмяСтраницы + "!");

		КонецЕсли;

		pEvtObj.returnValue = Ложь;

	КонецЕсли;
	
	РаскрытьСкрытьОписание(htmlElement);
	
	pEvtObj.returnValue = Ложь;
КонецПроцедуры // ПолеHTMLДокументаОnСlick()

// Обработчик события "OnDragStart" поля HTML документа.
//
Процедура ПолеHTMLДокументаOnDragStart(Элемент, pEvtObj)

	Если НЕ pEvtObj.srcElement = Неопределено И pEvtObj.srcElement.tagName = "IMG" Тогда

		pEvtObj.returnValue = Ложь;

	КонецЕсли;

КонецПроцедуры // ПолеHTMLДокументаOnDragStart()

// Процедура обработчик события "Нажатие" элемента Содержание командной панели КоманднаяПанельНавигации
//
Процедура КоманднаяПанельНавигацииСодержание(Кнопка)

	мИмяТекущейСтраницы = "Содержание";

	ВыполнитьУстановкуТекущейСтраницы();
	ЗаписатьВИсторию();
	УстановитьДоступностьКнопокИстории();
	ЭтаФорма.ВладелецФормы.Обновить();

КонецПроцедуры // КоманднаяПанельНавигацииСодержание()

// Процедура обработчик события "Нажатие" элемента Переход командной панели КоманднаяПанельНавигации
//
Процедура КоманднаяПанельНавигацииДействиеПерехода(Кнопка)

	мИмяТекущейСтраницы = СформироватьИмяСтраницы(Кнопка.Имя);

	ВыполнитьУстановкуТекущейСтраницы();
	ЗаписатьВИсторию();
	УстановитьДоступностьКнопокИстории();

КонецПроцедуры // КоманднаяПанельНавигацииДействиеПерехода()

// Процедура обработчик события "Нажатие" элемента ПерейтиВперед командной панели КоманднаяПанельНавигации
//
Процедура КоманднаяПанельНавигацииПерейтиВперед(Кнопка)

	СчетчикИстории    = мСоответствиеИстории["Счетчик"];
	КоличествоИстории = мСоответствиеИстории["Количество"];
	СчетчикИстории    = СчетчикИстории + 1;

	Если СчетчикИстории > КоличествоИстории Тогда
		СчетчикИстории = КоличествоИстории;
	КонецЕсли;

	ТекущаяСтраницаИстории = мСоответствиеИстории[СчетчикИстории];

	Если ТекущаяСтраницаИстории <> Неопределено Тогда

		мИмяТекущейСтраницы    = ТекущаяСтраницаИстории;

		мСоответствиеИстории.Вставить("Счетчик", СчетчикИстории);
		ЭтаФорма.ВладелецФормы.Обновить();
		ВыполнитьУстановкуТекущейСтраницы();

	КонецЕсли;
	
	УстановитьДоступностьКнопокИстории();
	


КонецПроцедуры // КоманднаяПанельНавигацииПерейтиВперед()

// Процедура обработчик события "Нажатие" элемента ПерейтиНазад командной панели КоманднаяПанельНавигации
//
Процедура КоманднаяПанельНавигацииПерейтиНазад(Кнопка)

	СчетчикИстории         = мСоответствиеИстории["Счетчик"];
	КоличествоИстории      = мСоответствиеИстории["Количество"];
	ТекущаяСтраницаИстории = мСоответствиеИстории[СчетчикИстории - 1];

	Если ТекущаяСтраницаИстории <> Неопределено Тогда

		мИмяТекущейСтраницы    = ТекущаяСтраницаИстории;
		
		ЭтаФорма.ВладелецФормы.Обновить();
		ВыполнитьУстановкуТекущейСтраницы();

		СчетчикИстории   = СчетчикИстории - 1;

		Если СчетчикИстории < 1 Тогда
			СчетчикИстории = 1;
		КонецЕсли;

		мСоответствиеИстории.Вставить("Счетчик", СчетчикИстории);

	КонецЕсли;

	УстановитьДоступностьКнопокИстории();
	
	
КонецПроцедуры // КоманднаяПанельНавигацииПерейтиНазад()

// Процедура обработчик события "Нажатие" элемента СамыйМалыйШрифт командной панели КоманднаяПанельНастройка
//
Процедура КоманднаяПанельНастройкаСамыйМалыйШрифт(Кнопка)
	
	мРазмерШрифта = 1;
	
	ПодготовитьКонтекстСтраниц();
	ВыполнитьУстановкуТекущейСтраницы();
	УстановитьПометкуРазмераШрифтаВПодменю();
	
КонецПроцедуры // КоманднаяПанельНастройкаСамыйМалыйШрифт()

// Процедура обработчик события "Нажатие" элемента МалыйШрифт командной панели КоманднаяПанельНастройка
//
Процедура КоманднаяПанельНастройкаМалыйШрифт(Кнопка)

	мРазмерШрифта = 2;
	
	ПодготовитьКонтекстСтраниц();
	ВыполнитьУстановкуТекущейСтраницы();
	УстановитьПометкуРазмераШрифтаВПодменю();
	
КонецПроцедуры // КоманднаяПанельНастройкаМалыйШрифт()

// Процедура обработчик события "Нажатие" элемента СреднийШрифт командной панели КоманднаяПанельНастройка
//
Процедура КоманднаяПанельНастройкаСреднийШрифт(Кнопка)
	
	мРазмерШрифта = 3;
	
	ПодготовитьКонтекстСтраниц();
	ВыполнитьУстановкуТекущейСтраницы();
	УстановитьПометкуРазмераШрифтаВПодменю();
	
КонецПроцедуры // КоманднаяПанельНастройкаСреднийШрифт()

// Процедура обработчик события "Нажатие" элемента БольшойШрифт командной панели КоманднаяПанельНастройка
//
Процедура КоманднаяПанельНастройкаБольшойШрифт(Кнопка)
		
	мРазмерШрифта = 4;
	
	ПодготовитьКонтекстСтраниц();
	ВыполнитьУстановкуТекущейСтраницы();
	УстановитьПометкуРазмераШрифтаВПодменю();

КонецПроцедуры // КоманднаяПанельНастройкаБольшойШрифт()

// Процедура обработчик события "Нажатие" элемента СамыйБольшойШрифт командной панели КоманднаяПанельНастройка
//
Процедура КоманднаяПанельНастройкаСамыйБольшойШрифт(Кнопка)
		
	мРазмерШрифта = 5;
	
	ПодготовитьКонтекстСтраниц();
	ВыполнитьУстановкуТекущейСтраницы();
	УстановитьПометкуРазмераШрифтаВПодменю();

КонецПроцедуры // КоманднаяПанельНастройкаСамыйБольшойШрифт()

// Процедура устанавливает пометку подменю Настройка
//
Процедура УстановитьПометкуРазмераШрифтаВПодменю()
	
	Подменю = ЭлементыФормы.КоманднаяПанельНастройка.Кнопки.Настройка.Кнопки;
	
	Подменю.СамыйМалыйШрифт.Пометка   = (мРазмерШрифта = 1);
	Подменю.МалыйШрифт.Пометка        = (мРазмерШрифта = 2);
	Подменю.СреднийШрифт.Пометка      = (мРазмерШрифта = 3);
	Подменю.БольшойШрифт.Пометка      = (мРазмерШрифта = 4);
	Подменю.СамыйБольшойШрифт.Пометка = (мРазмерШрифта = 5);
	
КонецПроцедуры // УстановитьПометкуРазмераШрифтаВПодменю()


мДействиеПерехода = Новый Действие("КоманднаяПанельНавигацииДействиеПерехода");
