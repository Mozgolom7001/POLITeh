////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ТекущийРабочийСтол;   // переменная содержит текущую схему страницы
Перем СписокСтраниц;        // переменнная содержит список страниц макета панели функций
Перем ФормаСправки Экспорт; // переменная содержит форму Справка обработки, подчиненной форме ПанельФункций

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
 
// Функция преобразует web-строку в обычную.
//
// Параметры
//  Строка 
//		Тип - Строка
//
// Возращаемое значение
//		Тип - Строка
Функция ПодготовитьСтроку(Строка)
	
	Стр = Строка;
	
	Стр = СтрЗаменить(Стр, "%20", " ");
	
	Возврат Стр;
	
КонецФункции // ПодготовитьСтроку()

// Функция преобразует название страницы в имя страницы.
//
// Параметры
//  НазваниеТекущейСтраницы - название страницы
//		Тип - Строка
//
// Возращаемое значение
//		Тип - Строка
Функция СформироватьИмяСтраницы(НазваниеТекущейСтраницы)

	Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(НазваниеТекущейСтраницы, " ", "_"), ".", "_"), ",", "_");

КонецФункции // СформироватьИмяСтраницы()

// Функция формирует раздел HTML документа
//
// Параметры
//  ТекстПункта - содержание раздела
//		Тип - Строка
//  ТагВыполнить - выполняемая строка 1С предприятия
//		Тип - Строка
//  ТагПерейти - имя узла перехода на другую страницу
//		Тип - Строка
//  Пояснение - пояснение к разделу
//		Тип - Строка
//  ИмяКартинки - имя картинки раздела
//		Тип - Строка
//  ПризнакПодраздела - признак подраздела
//		Тип - Булево
//
// Возращаемое значение - строка, содержащая строку HTLM документа 
//  Тип - Строка 
Функция СформироватьПунктHTML(ТекстПункта, ТагВыполнить, ТагПерейти, Пояснение, ИмяКартинки, ПризнакПодраздела)
	
	ВставлятьСсылку = Ложь;
	ТекстСсылки     = "";

	Если НЕ ПустаяСтрока(ТагВыполнить) Тогда
		ВставлятьСсылку = Истина;
		Если Найти(ТагВыполнить, "ПолучитьОбщуюФорму=") = 0 Тогда
			ТекстСсылки = ТекстСсылки + "Выполнить=";
		КонецЕсли;

		ТекстСсылки = ТекстСсылки + СтрЗаменить(ТагВыполнить, """", "&quot;");

	КонецЕсли;

	Если НЕ ПустаяСтрока(ТагПерейти) Тогда
		ВставлятьСсылку = Истина;
		ТекстСсылки = ТекстСсылки + "Перейти=" + СформироватьИмяСтраницы(ТагПерейти);
	КонецЕсли;
	
	ТекстОписания = "<div class=""item description group"">" + ТекстПункта+ "</div><div class=""item description"">" + Пояснение + "</div>";
		
	Возврат   "<div class=""item" + ?(ПризнакПодраздела, " group", "") + """>" 
	        + ?(НЕ ПустаяСтрока(ИмяКартинки) И ВставлятьСсылку, "<a title=""" + Пояснение + """ href='" + ТекстСсылки + "'>", "")        
	        + ?(ПустаяСтрока(ИмяКартинки), "", "<img border=""0"" align=absmiddle src=""" + ЭлементыФормы.ПолеHTMLДокумента.ПолучитьURL(Метаданные.ОбщиеКартинки[ИмяКартинки]) + """>")
	        + ?(НЕ ПустаяСтрока(ИмяКартинки) И ВставлятьСсылку, "</a>&nbsp;", "")
	        + ?(ВставлятьСсылку, "<a " + "title=""" + ТекстПункта + ?(ПустаяСтрока(Пояснение), "", ":" +  Символы.ПС + Пояснение) + """ href='" + ТекстСсылки + "'>", "")
	        + "<nobr>" + ТекстПункта + "</nobr>"
	        + ?(ВставлятьСсылку, "</a>", "")
	        + "</div>";
	
КонецФункции // СформироватьПунктHTML()

// Функция возращает заголовок HTLM страницы макета.
//
// Параметры
//  Нет
//
// Возращаемое значеие - заголовок HTLM документа
//		Тип - Строка
Функция ЗаголовокСтраницы()

	Возврат
	"<html>
	|<head>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<style type=text/css>
	|
	|body {
	|	margin: 12px 0px 12px 0px;
	|	background-color: #FFFBF0;
	|}
	|
	|a:visited {color: #3366FF}
	|a:active {color: #3366FF}
	|a:link {color: #3366FF}
	|a:hover {color: #3366FF}
	|
	|.item {
	|	font-family: ""MS Shell Dlg"";
	|	font-size: 8pt;
	|	margin: 4px 0px 8px 8px;
	|	color: #000000;
	|}
	|
	|.group {
	|	font-weight: bold;
	|	margin: 18px 0px 12px 8px;
	|	color: #898477;
	|}
	|
	|.description {
	|	color: #000080;
	|}
	|
	|</style>
	|</head>
	|<body scroll=""auto""> 
	|";

КонецФункции // ЗаголовокСтраницы()

// Функция возращает теги завершения HTLM документа
//
// Параметры
//  Нет
//
// Возращаемое значение - теги завершения документа HTLM
//		Тип - Строка
Функция ЗавершениеСтраницы()

	Возврат "</body></html>" + Символы.ПС;

КонецФункции // ЗавершениеСтраницы()

// Процедура формирует HTLM документ и структуру навигации по макету.
//
// Параметры
//  Нет
//
Процедура ПрочитатьИзМакета()
	
	ОбъектХраненияДанныхПанели = Новый ЧтениеXML();
	ОбъектХраненияДанныхПанели.УстановитьСтроку(ОбработкаОбъект.ПолучитьМакет("Основной").ПолучитьТекст());
	
	
	СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели, "ПанельФункций");
	Если СоответствиеАтрибутов = Неопределено Тогда
		Предупреждение("Ошибка в исходном макете панели функций, работа панели функций не может быть продолжена!");
		Закрыть();
		Возврат;
	КонецЕсли;
	
	СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели, "СтраницаПанели");
	мСтраницыПанели = Новый Соответствие;
	
	НомерСтраницы = 0;
	
	Пока СоответствиеАтрибутов <> Неопределено Цикл
		
		НомерСтраницы = НомерСтраницы + 1;
		ПрочиталиСледующуюСтраницу = Ложь;
		ИмяСтраницы = СоответствиеАтрибутов["ИмяСтраницы"];
		Если НЕ ПустаяСтрока(ИмяСтраницы) Тогда 
			
			ЗаголовокСтраницы = СоответствиеАтрибутов["ЗаголовокСтраницы"];
			Если НЕ ПустаяСтрока(ЗаголовокСтраницы) Тогда
				
				КартинкаСтраницы = СоответствиеАтрибутов["КартинкаСтраницы"];
				ТекстСтраницы = "" + ЗаголовокСтраницы();

				СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели);

				Пока (СоответствиеАтрибутов <> Неопределено) И (мТекущийУзел = "ПунктПанели") Цикл
					Содержание   = СоответствиеАтрибутов["ЗаголовокПункта"];
					ТагВыполнить = СоответствиеАтрибутов["ВыполнитьВПункте"];
					ТагПерейти   = СоответствиеАтрибутов["ПерейтиВПункте"];
					Пояснение    = СоответствиеАтрибутов["ОписаниеПункта"];
					ИмяКартинки  = СоответствиеАтрибутов["Картинка"];
					Подраздел    = (СоответствиеАтрибутов["Подраздел"] = "Истина");
					
					Если СокрЛП(ИмяСтраницы) = "Содержание" Тогда
						УровеньПункта = 1;
					Иначе
						УровеньПункта = ?(Подраздел, 0, 2);
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(Содержание) Тогда
						
						ТекстСтраницы = ТекстСтраницы + СформироватьПунктHTML(Содержание, ТагВыполнить, ТагПерейти, Пояснение, ИмяКартинки, Подраздел);
					
					КонецЕсли;

					СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели);
				КонецЦикла;
				
				мСтраницыПанели.Вставить(ИмяСтраницы, ТекстСтраницы + ЗавершениеСтраницы());
				СписокСтраниц.Добавить(ИмяСтраницы, ЗаголовокСтраницы);
				
				Если СоответствиеАтрибутов = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				Если (СоответствиеАтрибутов <> Неопределено) И (мТекущийУзел = "СтраницаПанели") Тогда
					ПрочиталиСледующуюСтраницу = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ПрочиталиСледующуюСтраницу Тогда
			СоответствиеАтрибутов = ПрочитатьЭлементXMLМакета(ОбъектХраненияДанныхПанели, "СтраницаПанели");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьИзМакета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ИНТЕРФЕЙСОМ

// Скрывает форму со схемой.
//
// Параметры
//  Нет
//
Процедура СкрытьСхему() Экспорт
	
	ТекущийРабочийСтол.Закрыть();
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьСхемыПанелиФункций", Ложь);

КонецПроцедуры // СкрытьСхему()

// Открывает форму со схемой по имени страницы. 
//
// Параметры
//  ИмяСтраницы - имя текущей страницы панели функций 
//		Тип - Строка
//
Процедура ОткрытьСхему(ИмяСтраницы)
	
	Если НЕ (ОбработкаОбъект.Метаданные().Формы.Найти(ИмяСтраницы) = Неопределено) Тогда
		
		Форма = ОбработкаОбъект.ПолучитьФорму(ИмяСтраницы, ЭтаФорма);
		Форма.Открыть();
		
		Если НЕ (ТекущийРабочийСтол = Форма) Тогда
			
			Если ТипЗнч(ТекущийРабочийСтол) = Тип("Форма") Тогда
				Если ТекущийРабочийСтол.Открыта() Тогда
					ТекущийРабочийСтол.Закрыть();
				КонецЕсли;
			КонецЕсли;
			
			ТекущийРабочийСтол = Форма;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСхему()

// Процедура установки отображения текущей страницы HTLM документа панели функций.
//
// Параметры
//  ИмяСтраницы - имя страницы
//		Тип - Строка
//
Процедура УстановитьСтраницу(ИмяСтраницы)
	
	Для Каждого Страница Из СписокСтраниц Цикл
		Страница.Пометка = Ложь;
	КонецЦикла;
	
	Страница = СписокСтраниц.НайтиПоЗначению(ИмяСтраницы);
		
	Если НЕ (Страница = Неопределено) Тогда
		
		Страница.Пометка = Истина;
		ЭлементыФормы.ПереключательРазделов.Заголовок = Страница.Представление;
		мИмяТекущейСтраницы = Страница.Значение;
		
	ИначеЕсли НЕ (СписокСтраниц.Количество() = 0) Тогда
		
		СписокСтраниц[0].Пометка = Истина;
		ЭлементыФормы.ПереключательРазделов.Заголовок = СписокСтраниц[0].Представление;
		мИмяТекущейСтраницы = СписокСтраниц[0].Значение;
		
	Иначе
		
		мИмяТекущейСтраницы = "";
		
	КонецЕсли;
	
	
	МакетСтраницы = мСтраницыПанели[мИмяТекущейСтраницы];
	
	ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(?(МакетСтраницы = Неопределено,
													  ЗаголовокСтраницы() + ЗавершениеСтраницы(),
													  МакетСтраницы));
		
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьСхемыПанелиФункций") Тогда
		Если мИмяТекущейСтраницы<>"Содержание" Тогда
			ОткрытьСхему(мИмяТекущейСтраницы);
		Иначе
			Если ТипЗнч(ТекущийРабочийСтол) = Тип("Форма") Тогда
				Если ТекущийРабочийСтол.Открыта() Тогда
					ТекущийРабочийСтол.Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ФормаСправки.Открыта() Тогда
		ФормаСправки.Обновить();
	КонецЕсли;

КонецПроцедуры // УстановитьСтраницу()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ПрочитатьИзМакета();
	
	ТекущаяСтраница = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТекущаяСтраницаПанелиФункций");
	Если ПустаяСтрока(ТекущаяСтраница) Тогда
		ТекущаяСтраница = "Содержание";
	КонецЕсли;

	мИмяТекущейСтраницы = ТекущаяСтраница;
	ФормаСправки = ОбработкаОбъект.ПолучитьФорму("Справка", ЭтаФорма);

	Если Не ПервыйЗапуск Тогда
		ФормаСправки.Открыть();
	КонецЕсли;

	УстановитьСтраницу(ТекущаяСтраница);

КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	Для Каждого Страница Из СписокСтраниц Цикл
		Если Страница.Пометка Тогда
			УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТекущаяСтраницаПанелиФункций", Страница.Значение);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПриЗакрытии()

// Процедура обработчик события "Обновление отображения" формы
//
Процедура ОбновлениеОтображения()
	Если мИмяТекущейСтраницы <> мТекущаяСтраница Тогда
		УстановитьСтраницу(мИмяТекущейСтраницы);
		
	КонецЕсли;
КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "Нажатие" на кнопку-переключатель разделов.
//
Процедура ПереключательРазделовНажатие(Элемент)
	
	ВыбранныйРаздел = ВыбратьИзМеню(СписокСтраниц, Элемент);
	
	Если НЕ (ВыбранныйРаздел = Неопределено) Тогда
		
		УстановитьСтраницу(ВыбранныйРаздел.Значение);
		Если ФормаСправки.Открыта() Тогда
			ФормаСправки.Обновить();
			ФормаСправки.УстановитьДоступностьКнопокИстории();
		КонецЕсли;

		ЗаписатьВИсторию();
		
	КонецЕсли;
	
КонецПроцедуры // ПереключательРазделовНажатие()

// Обработчик события "Нажатие" на гиперссылку "Схема".
//
Процедура СхемаНажатие(Элемент)
	
	ОткрытьСхему(мИмяТекущейСтраницы);
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьСхемыПанелиФункций", Истина);
	
КонецПроцедуры // СхемаНажатие()

// Обработчик события "onClick" поля HTML документа.
//
Процедура ПолеHTMLДокументаОnСlick(Элемент, pEvtObj)
	htmlElement = pEvtObj.srcElement;

	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;

	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Позиция = Найти(htmlElement.href, "Перейти=");

	Если Позиция > 0 Тогда

		ИмяСтраницы = ПодготовитьСтроку(Сред(htmlElement.href, Позиция + 8));
		Если НЕ (мСтраницыПанели[ИмяСтраницы] = Неопределено) Тогда
			УстановитьСтраницу(ИмяСтраницы);
		Иначе
			Предупреждение("Не найдена страница перехода:" + ИмяСтраницы + "!");
		КонецЕсли;

		pEvtObj.returnValue = Ложь;

	КонецЕсли;

	Позиция = Найти(htmlElement.href, "Выполнить=");

	Если Позиция > 0 Тогда

		Попытка
			Выполнить(ПодготовитьСтроку(Сред(htmlElement.href, Позиция + 10)));
		Исключение
			Предупреждение("При выполнении действия произошла ошибка!");
		КонецПопытки;

		pEvtObj.returnValue = Ложь;

	КонецЕсли;

	Позиция = Найти(htmlElement.href, "ПолучитьОбщуюФорму=");

	Если Позиция > 0 Тогда

		Попытка
			ПолучитьОбщуюФорму(ПодготовитьСтроку(Сред(htmlElement.href, Позиция + 19))).Открыть();;
		Исключение
			Предупреждение("При открытии общей формы произошла ошибка!");
		КонецПопытки;

		pEvtObj.returnValue = Ложь;

	КонецЕсли;

	
КонецПроцедуры // ПолеHTMLДокументаОnСlick()

// Обработчик события "OnDragStart" поля HTML документа.
//
Процедура ПолеHTMLДокументаOnDragStart(Элемент, pEvtObj)

	Если НЕ pEvtObj.srcElement = Неопределено И pEvtObj.srcElement.tagName = "IMG" Тогда

		pEvtObj.returnValue = Ложь;

	КонецЕсли;

КонецПроцедуры // ПолеHTMLДокументаOnDragStart()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ПАНЕЛИ ФУНКЦИЙ

// Процедура открывает форму списка документов
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя документа
//		Тип - элемент формы
//
Процедура ОткрытьДокумент(Элемент) Экспорт
	
	Форма = Документы[Элемент.Имя].ПолучитьФормуСписка();
	Форма.Открыть();

КонецПроцедуры // ОткрытьДокумент()

// Процедура открывает новый документ
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя документа
//		Тип - элемент формы
//
Процедура ОткрытьДокументНовый(Элемент) Экспорт
	
	Документы [Элемент.Имя].ПолучитьФорму("ФормаДокумента").Открыть();
	

КонецПроцедуры // ОткрытьДокумент()

// Процедура открывает форму журнала документов
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя журнала
//		Тип - элемент формы
//
Процедура ОткрытьЖурналДокументов(Элемент) Экспорт
	
	Форма = ЖурналыДокументов[Элемент.Имя].ПолучитьФорму();
	Форма.Открыть();	
	
КонецПроцедуры // ОткрытьЖурналДокументов()

// Процедура открывает основной формы обработки
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя обработки
//		Тип - элемент формы
//
Процедура ОткрытьОбработку(Элемент) Экспорт
	
	Форма = Обработки[Элемент.Имя].ПолучитьФорму();
	Форма.Открыть();	
	
КонецПроцедуры // ОткрытьОбработку()

// Процедура открывает форму списка справочника
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя справочника
//		Тип - элемент формы
//
Процедура ОткрытьСправочник(Элемент) Экспорт
	
	Форма = Справочники[Элемент.Имя].ПолучитьФормуСписка();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСправочник()

// Процедура открывает форму списка регистра сведений
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя регистра сведений
//		Тип - элемент формы
//
Процедура ОткрытьРегистрСведений(Элемент) Экспорт
	
	РегистрыСведений[Элемент.Имя].ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры // ОткрытьРегистрСведений()

// Процедура открывает отчет
//
// Параметры
//  Элемент - элемент формы, имя которого содержит имя отчета
//		Тип - элемент формы
//
Процедура ОткрытьОтчет(Элемент) Экспорт
	
	Отчеты[Элемент.Имя].ПолучитьФорму().Открыть();
	
КонецПроцедуры // ОткрытьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СписокСтраниц = Новый СписокЗначений;
