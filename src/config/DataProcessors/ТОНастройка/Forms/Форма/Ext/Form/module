///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСоответствиеСтраницВидуТО;
Перем мСоответствиеСтраницТаблицамТО;
Перем мСоответствиеНазванийСтраниц;
Перем мВидыТО;

Перем мАдресИПараметрыСервера;

///////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "При открытии" формы. Данное событие
// возникает при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Нет.
//
Процедура ПриОткрытии()

	НастроитьОтборы();

	ЭлементыФормы.ДляКомпьютера.Значение = "для компьютера """ + ПолучитьСерверТО().ПолучитьИмяКомпьютераТО() + """";

	ОбновитьТекстКнопкиВыгрузкаООВидаТО();
	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода
// "ДисплеиПокупателяМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ДисплеиПокупателяМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ДисплеиПокупателяМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ДисплейПокупателя);

КонецПроцедуры // ДисплеиПокупателяМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "ККМOfflineМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ККМOfflineМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ККМOfflineМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ККМOffLine);

КонецПроцедуры // ККМOfflineМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "ККМOnlineМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ККМOnlineМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ККМOnlineМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ККМOnLine);

КонецПроцедуры // ККМOnlineМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "СканерыШтрихКодаМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("СканерыШтрихКодаМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура СканерыШтрихКодаМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.СканерШтрихКода);

КонецПроцедуры // СканерыШтрихКодаМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "ТерминалыСбораДанныхМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ТерминалыСбораДанныхМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ТерминалыСбораДанныхМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ТерминалСбораДанных);

КонецПроцедуры // ТерминалыСбораДанныхМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "ФискальныеРегистраторыМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ФискальныеРегистраторыМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ФискальныеРегистраторыМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ФискальныйРегистратор);

КонецПроцедуры // ФискальныеРегистраторыМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "ЭлектронныеВесыМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ЭлектронныеВесыМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ЭлектронныеВесыМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ЭлектронныеВесы);

КонецПроцедуры // ЭлектронныеВесыМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "УстройстваДляСчитыванияМагнитныхКартМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("УстройстваДляСчитыванияМагнитныхКартМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура УстройстваДляСчитыванияМагнитныхКартМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.СчитывательМагнитныхКарт);

КонецПроцедуры // УстройстваДляСчитыванияМагнитныхКартМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "ВесыСПечатьюЭтикетокМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ВесыСПечатьюЭтикетокМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ВесыСПечатьюЭтикетокМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ВесыСПечатьюЭтикеток);

КонецПроцедуры // ВесыСПечатьюЭтикетокМодельНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля ввода
// "СчитывателиRFIDМетокМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("СчитывателиRFIDМетокМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура СчитывателиRFIDМетокМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.СчитывательRFIDМеток);

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода
// "ЭквайринговыеСистемыМодель".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("ЭквайринговыеСистемыМодель").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ЭквайринговыеСистемыПередНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ЭквайринговаяСистема);

КонецПроцедуры

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ДисплеиПокупателя").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ДисплеиПокупателяПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                         ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ДисплеиПокупателяПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ККМOffline").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ККМOfflineПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                  ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ККМOfflineПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ККМOnline").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ККМOnlineПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                 ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ККМOnlineПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("СканерыШтрихКода").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура СканерыШтрихКодаПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                        ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // СканерыШтрихКодаПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ТерминалыСбораДанных").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ТерминалыСбораДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                            ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ТерминалыСбораДанныхПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ФискальныеРегистраторы").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ФискальныеРегистраторыПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                              ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ФискальныеРегистраторыПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ЭлектронныеВесы").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ЭлектронныеВесыПередОкончаниемРедактирования(Элемент, НоваяСтрока,
                                                       ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ЭлектронныеВесыПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("СчитывателиМагнитныхКарт").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура УстройстваДляСчитыванияМагнитныхКартПередОкончаниемРедактирования(
    Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // УстройстваДляСчитыванияМагнитныхКартПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ВесыСПечатьюЭтикеток").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ВесыСПечатьюЭтикетокПередОкончаниемРедактирования(
    Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ВесыСПечатьюЭтикетокПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("СчитывателиRFIDМеток").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура СчитывателиRFIDМетокПередОкончаниемРедактирования(
    Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // СчитывателиRFIDМетокПередОкончаниемРедактирования()

// Процедура - обработчик события "Перед окончанием редактирования" строки
// табличного поля "".
//
// Параметры:
//  Элемент              - <ТабличноеПоле>
//                       - Табличное поле, с которым связано данное событие
//                         ("ЭквайринговыеСистемы").
//
//  НоваяСтрока          - <Булево>
//                       - Установлен в Истина, если строка была добавлена
//                         или скопирована.
//
//  ОтменаРедактирования - <Булево>
//                       - Истина, если произошла отмена редактирования.
//
//  Отказ                - <Булево>
//                       - Признак отказа от выполнения действия.
//                         Значение по умолчанию: Ложь.
//
Процедура ЭквайринговыеСистемыПередОкончаниемРедактирования(
    Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент,
	                                 НоваяСтрока,
	                                 ОтменаРедактирования,
	                                 Отказ);

КонецПроцедуры // ЭквайринговыеСистемыПередОкончаниемРедактирования()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельДП".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельДППараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ДисплеиПокупателя);

КонецПроцедуры // КоманднаяПанельДППараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельККМOffline".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельККМOfflineПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ККМOffline);

КонецПроцедуры // КоманднаяПанельККМOfflineПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельККМOnline".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельККМOnlineПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ККМOnline);

КонецПроцедуры // КоманднаяПанельККМOnlineПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельСШК".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельСШКПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.СканерыШтрихКода);

КонецПроцедуры // КоманднаяПанельСШКПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельТСД".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельТСДПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ТерминалыСбораДанных);

КонецПроцедуры // КоманднаяПанельТСДПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельФР".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельФРПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ФискальныеРегистраторы);

КонецПроцедуры // КоманднаяПанельФРПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельЭВ".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельЭВПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ЭлектронныеВесы);

КонецПроцедуры // КоманднаяПанельЭВПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельРМК".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельРМКПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.СчитывателиМагнитныхКарт);

КонецПроцедуры // КоманднаяПанельРМКПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельВесыСПЭ".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельВесыСПЭПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ВесыСПечатьюЭтикеток);

КонецПроцедуры // КоманднаяПанельВесыСПЭПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельСчитывателиRFIDМеток".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельСчитывателиRFIDМетокПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.СчитывателиRFIDМеток);

КонецПроцедуры // КоманднаяПанельВесыСПЭПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Параметры" командной панели "КоманднаяПанельЭквайринговыхСистем".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Параметры").
//
Процедура КоманднаяПанельЭквайринговыхСистемПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ЭквайринговыеСистемы);

КонецПроцедуры // КоманднаяПанельВесыСПЭПараметры()

// Процедура представляет обработчик события "Нажатие" кнопки
// "Проверка" командной панели "ОсновныеДействияФормы".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Проверка").
//
Процедура ОсновныеДействияФормыПроверка(Кнопка)

	НетОшибок = Истина;
	ВидыТО    = Новый Соответствие();

	Если Не ПолучитьСерверТО().ОтключитьОбработкиОбслуживания() Тогда
		ТекстОшибки = "Перед выполнением проверки необходимо закрыть все формы, использующие торговое оборудование.";
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|    РегТО.Модель    КАК Модель,
	|    РегТО.Параметры КАК Параметры,
	|    РегТО.Вид       КАК Вид
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Компьютер = &Компьютер
	|    И РегТО.Подключено
	|");
	Запрос.УстановитьПараметр("Компьютер", ПолучитьСерверТО().ПолучитьИмяКомпьютераТО());
	РезультатЗапроса = Запрос.Выполнить();
	Обработка        = Неопределено;
	Объект           = Неопределено;
	ДопИнфо          = "";
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДопИнфо          = "";
			Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(Выборка.Модель, Обработка);
			ВидыТО[Выборка.Вид] = Истина;
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Форма     = Обработка.ПолучитьФорму();
				Параметры = ?(ПустаяСтрока(Выборка.Параметры),
				              Новый Структура(),
				              ЗначениеИзСтрокиВнутр(Выборка.Параметры));
				Результат = Форма.СоздатьОбъектДрайвера(Объект,
				                                        Выборка.Модель.Модель,
				                                        Параметры);
				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Объект.ОписаниеОшибки = "";
					Результат = Форма.ТестУстройства(Объект);
					ДопИнфо = Объект.ОписаниеОшибки;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Результат) Тогда
				НетОшибок  = Ложь;
				ТекстОшибки = """" + Выборка.Модель + """:
				              |" + ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат);
				ТекстОшибки = ТекстОшибки + "
				                            |" + ДопИнфо;
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если НетОшибок Тогда
		Предупреждение("Торговое оборудование настроено корректно.");
	КонецЕсли;

КонецПроцедуры // ОсновныеДействияФормыПроверка()

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура настраивает отбор записей регистра сведений для определённого ТП.
//
// Параметры:
//  ИмяТП - <Строка>
//        - Имя табличного поля, параметры отбора которого необходимо настроить.
//
//  Вид   - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//
Процедура НастроитьОтбор(ИмяТП, Вид)

	ЭлементыФормы[ИмяТП].Значение.Отбор.Компьютер.Установить(ПолучитьСерверТО().ПолучитьИмяКомпьютераТО());
	ЭлементыФормы[ИмяТП].Значение.Отбор.Вид.Установить(Вид);

КонецПроцедуры // НастроитьОтбор()

// Процедура осуществляет настройку отбора табличных полей формы
//
// Параметры:
//  Нет.
//
Процедура НастроитьОтборы()

	НастроитьОтбор("ДисплеиПокупателя"       , мВидыТО.ДисплейПокупателя);
	НастроитьОтбор("ККМOffline"              , мВидыТО.ККМOffLine);
	НастроитьОтбор("ККМOnline"               , мВидыТО.ККМOnLine);
	НастроитьОтбор("СканерыШтрихКода"        , мВидыТО.СканерШтрихКода);
	НастроитьОтбор("ТерминалыСбораДанных"    , мВидыТО.ТерминалСбораДанных);
	НастроитьОтбор("ФискальныеРегистраторы"  , мВидыТО.ФискальныйРегистратор);
	НастроитьОтбор("ЭлектронныеВесы"         , мВидыТО.ЭлектронныеВесы);
	НастроитьОтбор("СчитывателиМагнитныхКарт", мВидыТО.СчитывательМагнитныхКарт);
	НастроитьОтбор("ВесыСПечатьюЭтикеток"    , мВидыТО.ВесыСПечатьюЭтикеток);
	НастроитьОтбор("СчитывателиRFIDМеток"    , мВидыТО.СчитывательRFIDМеток);
	НастроитьОтбор("ЭквайринговыеСистемы"    , мВидыТО.ЭквайринговаяСистема);
	НастроитьОтбор("ККТсПередачейДанных"     , мВидыТО.ККТ);

КонецПроцедуры // НастроитьОтборы()

// Процедура выполняет действия, связанные с окончанием редактирования строки
// табличного поля, в котором содержатся сведения о подключаемом торговом
// оборудовании.
//
// Параметры:
//  Элемент     - <ТабличноеПоле>
//              - Табличное поле, с которым связано данное событие.
//
//  НоваяСтрока - <Булево>
//              - Признак редактирования новой строки.
//
//  Отмена      - <Булево>
//              - Отмена редактирования.
//
//  Отказ       - <Булево>
//              - Выходной параметр; отказ от редактирования строки ТП.
//
Процедура ОбработкаОкончанияРедактирования(Элемент, НоваяСтрока, Отмена, Отказ)

	Если Отмена Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Модель) Тогда
		Предупреждение("Не указана модель торгового оборудования!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Элемент.Колонки.Найти("КассаККМ") <> Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КассаККМ) Тогда
			Предупреждение("Не указана касса ККМ!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НоваяСтрока Тогда
		ТекущиеДанные.Идентификатор = ВРег(Новый УникальныйИдентификатор());
		ТекущиеДанные.Компьютер     = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО();
	КонецЕсли;

	НастроитьОтборы();

КонецПроцедуры // ОбработкаОкончанияРедактирования()

// Процедура открывает форму выбора элемента справочника "Торговое оборудование".
//
// Параметры:
//  Элемент - <ПолеВвода>
//          - Поле ввода, в которое осуществляется подбор.
//
//  Вид     - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//          - Вид торгового оборудования, подходящий для данного поля ввода.
//
Процедура ОткрытьФормуВыбораМодели(Элемент, Вид)

	СтандартнаяОбработка = Ложь;
	Форма                = Справочники.ТорговоеОборудование.ПолучитьФормуВыбора(, Элемент, );

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    СпрОбработки.Ссылка КАК ОбработкаОбслуживания
	|ИЗ
	|    Справочник.ОбработкиОбслуживанияТО КАК СпрОбработки
	|ГДЕ
	|    СпрОбработки.Вид = &Вид");
	Запрос.УстановитьПараметр("Вид", Вид);

	Список    = Новый СписокЗначений();
	Список.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0));

	Форма.Отбор.ОбработкаОбслуживания.ВидСравнения  = ВидСравнения.ВСписке;
	Форма.Отбор.ОбработкаОбслуживания.Значение      = Список;
	Форма.Отбор.ОбработкаОбслуживания.Использование = Истина;

	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОбработкаОбслуживания.Доступность = Ложь;

	Форма.Открыть();

КонецПроцедуры // ОткрытьФормуВыбораМодели()

// Процедура осуществляет открытие формы настройки для выбранной модели торгового
// оборудования.
//
// Параметры:
//  ТП - <ТабличноеПоле>
//     - Табличное поле, для текущего выбранного элемента которого следует открыть
//       форму настройки.
//
Процедура ОткрытьФормуНастройки(ТП)

	Если ТП.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Необходимо выбрать строку табличного поля, соответствующую
		               |настраиваемой модели торгового оборудования.");
		Возврат;
	КонецЕсли;

	Обработка = Неопределено;
	Ошибка    = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(ТП.ТекущиеДанные.Модель, Обработка);
	Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
		Набор = РегистрыСведений.ТорговоеОборудование.СоздатьНаборЗаписей();
		Набор.Отбор.Идентификатор.Установить(ТП.ТекущаяСтрока.Идентификатор);
		Набор.Прочитать();

		Параметры = ?(ПустаяСтрока(Набор[0].Параметры),
		              Новый Структура(),
		              ЗначениеИзСтрокиВнутр(Набор[0].Параметры));
		Обработка.НастроитьОборудование(ТП.ТекущиеДанные.Модель, Параметры);
		Набор[0].Параметры = ЗначениеВСтрокуВнутр(Параметры);
		Набор.Записать();
	Иначе
		Предупреждение("Ошибка при попытке открыть форму настройки параметров модели:
		               |" + ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Ошибка));
	КонецЕсли;

КонецПроцедуры // ОткрытьФормуНастройки()

Процедура ОбработкиОбслуживанияЗагрузитьВсе(Кнопка)

	РаботаСТорговымОборудованием.ИмпортироватьОбработки(Ложь,);

КонецПроцедуры

Процедура ОбработкиОбслуживанияОбновитьТекущие(Кнопка)

	РаботаСТорговымОборудованием.ИмпортироватьОбработки(Истина,);

КонецПроцедуры

Процедура ОбработкиОбслуживанияЗагрузитьВсеССайта(Кнопка)

	РаботаСТорговымОборудованием.ИмпортироватьОбработки(Ложь,, Истина, мАдресИПараметрыСервера);

КонецПроцедуры

Процедура ОбработкиОбслуживанияОбновитьВсеССайта(Кнопка)

	РаботаСТорговымОборудованием.ИмпортироватьОбработки(Истина, , Истина, мАдресИПараметрыСервера);

КонецПроцедуры

Процедура ОбработкиОбслуживанияВыгрузитьВсе(Кнопка)

	РаботаСТорговымОборудованием.ЭкспортироватьОбработки();

КонецПроцедуры

Процедура ОбработкиОбслуживанияВыгрузитьТекущегоВидаТО(Кнопка)

	РаботаСТорговымОборудованием.ЭкспортироватьОбработки(мСоответствиеСтраницВидуТО[ЭлементыФормы.КлассыТорговогоОборудования.ТекущаяСтраница]);

КонецПроцедуры

Процедура ОбработкиОбслуживанияСправочникОбработкиОбслуживания(Кнопка)

	ФормаСписка = Справочники.ОбработкиОбслуживанияТО.ПолучитьФормуСписка();
	Если Не ФормаСписка.Открыта() Тогда
		ФормаСписка.Открыть();
	Иначе
		ФормаСписка.Активизировать();
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкиОбслуживанияТекущаяОбработкаОбслуживания(Кнопка)

	ТекущаяТаблицаТО = мСоответствиеСтраницТаблицамТО[ЭлементыФормы.КлассыТорговогоОборудования.ТекущаяСтраница];
	
	Если ТекущаяТаблицаТО.ТекущаяСтрока <> Неопределено Тогда
		ЭлементаСправочника = ТекущаяТаблицаТО.ТекущиеДанные.Модель.ОбработкаОбслуживания;
		ЭлементаСправочника.ПолучитьФорму().Открыть();
	Иначе
		Предупреждение("Для обновления обработки обслуживания выберите модель устройства");
	КонецЕсли;

КонецПроцедуры

// Обработчики начала выбора из списка таблиц ТО

// Процедура открывает форму выбора элемента справочника "Торговое оборудование".
//
// Параметры:
//  Элемент - <ПолеВвода>
//          - Поле ввода, в которое осуществляется подбор.
//
//  Вид     - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//          - Вид торгового оборудования, подходящий для данного поля ввода.
//
Процедура ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, Вид)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СпрТО.Ссылка КАК Модель
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК СпрТО
	|ГДЕ
	|	СпрТО.ОбработкаОбслуживания.Вид = &Вид");

	Запрос.УстановитьПараметр("Вид", Вид);

	Элемент.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Модель"));

КонецПроцедуры // ЗаполнитьСписокВыбораСозданнымиМоделями()

Процедура ДисплеиПокупателяМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ДисплейПокупателя);

КонецПроцедуры

Процедура ККМOfflineМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ККМOffLine);

КонецПроцедуры

Процедура ККМOnlineМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ККМOnLine);

КонецПроцедуры

Процедура СканерыШтрихКодаМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.СканерШтрихКода);

КонецПроцедуры

Процедура ТерминалыСбораДанныхМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ТерминалСбораДанных);

КонецПроцедуры

Процедура ФискальныеРегистраторыМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ФискальныйРегистратор);

КонецПроцедуры

Процедура УстройстваДляСчитыванияМагнитныхКартМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.СчитывательМагнитныхКарт);

КонецПроцедуры

Процедура ЭлектронныеВесыМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ЭлектронныеВесы);

КонецПроцедуры

Процедура ВесыСПечатьюЭтикетокМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ВесыСПечатьюЭтикеток);

КонецПроцедуры

Процедура СчитывателиRFIDМетокМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.СчитывательRFIDМеток);

КонецПроцедуры

Процедура ЭквайринговыеСистемыМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ЭквайринговаяСистема);

КонецПроцедуры

Процедура ОткрытьПомощникНастройки(Кнопка)

	РаботаСТорговымОборудованием.ОткрытьПомощникПодключенияИНастройкиТО(мСоответствиеСтраницВидуТО[ЭлементыФормы.КлассыТорговогоОборудования.ТекущаяСтраница]);

КонецПроцедуры

// Процедура
//
// Параметры:
//  
//
Процедура ВывестиКоличествоПодключенныхУстройствНаЗакладках()

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР КОГДА РегТО.Подключено ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КолвоПодключено,
	|	КОЛИЧЕСТВО(РегТО.Вид) КАК Колво,
	|	РегТО.Вид КАК ВидТО
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|	РегТО.Компьютер = &Компьютер
	|СГРУППИРОВАТЬ ПО
	|	РегТО.Вид
	|");

	Запрос.УстановитьПараметр("Компьютер", ПолучитьСерверТО().ПолучитьИмяКомпьютераТО());

	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Индексы.Добавить("ВидТО");

	Для Каждого ТекСтраница Из ЭлементыФормы.КлассыТорговогоОборудования.Страницы Цикл
		ТекСтрокаКолво = ТЗ.Найти(мСоответствиеСтраницВидуТО[ТекСтраница], "ВидТО");

		Если ТекСтрокаКолво = Неопределено Тогда
			ТекКолво = "";
		Иначе
			ТекКолво = " (" + ТекСтрокаКолво.КолвоПодключено + "/" + ТекСтрокаКолво.Колво + ")";
		КонецЕсли;

		ТекСтраница.Заголовок = мСоответствиеНазванийСтраниц[ТекСтраница] + ТекКолво;
	КонецЦикла;

КонецПроцедуры // ВывестиКоличествоПодключенныхУстройствНаЗакладках()

Процедура ОбновлениеОтображения()

	ВывестиКоличествоПодключенныхУстройствНаЗакладках();

КонецПроцедуры

Процедура СканерыШтрихКодаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ФискальныеРегистраторыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Подключено = Истина;
		Элемент.ТекущиеДанные.Вид        = мСоответствиеСтраницВидуТО[ЭлементыФормы.КлассыТорговогоОборудования.ТекущаяСтраница];
	КонецЕсли;

КонецПроцедуры

Процедура ТерминалыСбораДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ДисплеиПокупателяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура СчитывателиМагнитныхКартПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ЭлектронныеВесыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ВесыСПечатьюЭтикетокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ККМOfflineПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ККМOnlineПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ЭквайринговыеСистемыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура СчитывателиRFIDМетокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура КлассыТорговогоОборудованияПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьТекстКнопкиВыгрузкаООВидаТО();
	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания()

	ТекущаяТаблицаТО = мСоответствиеСтраницТаблицамТО[ЭлементыФормы.КлассыТорговогоОборудования.ТекущаяСтраница];

	Если ТекущаяТаблицаТО.ТекущаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ОбработкиОбслуживания.Кнопки.ОбновитьОбработкуОбслуживания.Текст = "Обновить обработку обслуживания для """ + 
			ТекущаяТаблицаТО.ТекущиеДанные.Модель + """";
		ЭлементыФормы.ОбработкиОбслуживания.Кнопки.ОбновитьОбработкуОбслуживания.Доступность = Истина;
	Иначе
		ЭлементыФормы.ОбработкиОбслуживания.Кнопки.ОбновитьОбработкуОбслуживания.Текст = "Обновить обработку обслуживания (Не выбрана модель устройства)";
		ЭлементыФормы.ОбработкиОбслуживания.Кнопки.ОбновитьОбработкуОбслуживания.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура СканерыШтрихКодаПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура СканерыШтрихКодаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ФискальныеРегистраторыПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ФискальныеРегистраторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ТерминалыСбораДанныхПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ТерминалыСбораДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ДисплеиПокупателяПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ДисплеиПокупателяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура СчитывателиМагнитныхКартПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура СчитывателиМагнитныхКартПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ЭлектронныеВесыПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ЭлектронныеВесыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ВесыСПечатьюЭтикетокПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ВесыСПечатьюЭтикетокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ККМOfflineПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ККМOfflineПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ККМOnlineПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ККМOnlineПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ЭквайринговыеСистемыПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ЭквайринговыеСистемыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура СчитывателиRFIDМетокПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура СчитывателиRFIDМетокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ОбновитьТекстКнопкиВыгрузкаООВидаТО()

	ЭлементыФормы.ОбработкиОбслуживания.Кнопки.ЭкспортироватьТекущегоВидаТО.Текст = "Выгрузить обработки обслуживания вида """ + 
	    мСоответствиеСтраницВидуТО[ЭлементыФормы.КлассыТорговогоОборудования.ТекущаяСтраница] + """";

КонецПроцедуры

Процедура ОбработкиОбслуживанияПроверитьНаличиеОбновленийНаСайте(Кнопка)

	РаботаСТорговымОборудованием.ОткрытьОбновлениеОбработокОбслуживания(мАдресИПараметрыСервера);

КонецПроцедуры

// ККТ с передачей данных

Процедура КоманднаяПанельККТсПередачейДанныхПараметры(Кнопка)

	ОткрытьФормуНастройки(ЭлементыФормы.ККТсПередачейДанных);

КонецПроцедуры

Процедура ККТсПередачейДанныхПриАктивизацииСтроки(Элемент)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();

КонецПроцедуры

Процедура ККТсПередачейДанныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьПодключено(Элемент, НоваяСтрока, Копирование)

КонецПроцедуры

Процедура ККТсПередачейДанныхПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ОбработкаОкончанияРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ);

КонецПроцедуры

Процедура ККТсПередачейДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьТекстКнопкиОбновитьОбработкиОбслуживания();
	
	Если Не ОтменаРедактирования Тогда
		ПроверитьФлагАрхивироватьЧеки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ККТсПередачейДанныхМодельНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораМодели(Элемент, мВидыТО.ККТ);

КонецПроцедуры

Процедура ККТсПередачейДанныхМодельНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ЗаполнитьСписокВыбораСозданнымиМоделями(Элемент, мВидыТО.ККТ);

КонецПроцедуры

Процедура КоманднаяПанельККТсПередачейДанныхПараметрыФискализации(Кнопка)

	ТП = ЭлементыФормы.ККТсПередачейДанных;
	Если ТП.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Необходимо выбрать строку табличного поля, соответствующую
		               |настраиваемой модели торгового оборудования.");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Идентификатор,Модель,КассаККМ", 
		ТП.ТекущаяСтрока.Идентификатор, ТП.ТекущиеДанные.Модель, ТП.ТекущиеДанные.КассаККМ);
	ОткрытьФормуМодально("ОбщаяФорма.ПараметрыФискализации", ПараметрыФормы);

КонецПроцедуры

Процедура ПроверитьФлагАрхивироватьЧеки(Элемент)
	ТД = Элемент.ТекущиеДанные;
	Если ТД.Подключено И Найти(ВРег(ТД.Модель.Модель), "ПРИНТЕР ЧЕКОВ") > 0 Тогда
		АрхивироватьЧеки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТД.КассаККМ, "АрхивироватьЧеки");
		Если АрхивироватьЧеки = Ложь Тогда
			ОбщегоНазначения.СообщитьИнформациюПользователю("При использовании оборудования без фискального накопителя, для формирования отчета """ +
				Метаданные.Отчеты.ЖурналУчетаВыданныхПокупателюДокументов.Синоним + """ 
				|нужно в элементе справочника """+Строка(Элемент.ТекущиеДанные.КассаККМ)+""" установить флаг ""Архивировать чеки""");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СтраницыТО = ЭлементыФормы.КлассыТорговогоОборудования.Страницы;
мВидыТО    = Перечисления.ВидыТорговогоОборудования;

мСоответствиеСтраницВидуТО = Новый Соответствие;
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ДисплеиПокупателя       , мВидыТО.ДисплейПокупателя);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ККМВРежимеOffline       , мВидыТО.ККМOffLine);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ККМВРежимеOnline        , мВидыТО.ККМOnLine);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.СканерыШтрихкода        , мВидыТО.СканерШтрихКода);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ТерминалыСбораДанных    , мВидыТО.ТерминалСбораДанных);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ФискальныеРегистраторы  , мВидыТО.ФискальныйРегистратор);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.СчитывателиМагнитныхКарт, мВидыТО.СчитывательМагнитныхКарт);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ЭлектронныеВесы         , мВидыТО.ЭлектронныеВесы);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ВесыСПечатьюЭтикеток    , мВидыТО.ВесыСПечатьюЭтикеток);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.СчитывателиRFIDМеток    , мВидыТО.СчитывательRFIDМеток);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ЭквайринговыеСистемы    , мВидыТО.ЭквайринговаяСистема);
мСоответствиеСтраницВидуТО.Вставить(СтраницыТО.ККТсПередачейДанных     , мВидыТО.ККТ);

мСоответствиеСтраницТаблицамТО = Новый Соответствие;
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ДисплеиПокупателя       , ЭлементыФормы.ДисплеиПокупателя);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ККМВРежимеOffline       , ЭлементыФормы.ККМOffline);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ККМВРежимеOnline        , ЭлементыФормы.ККМOnline);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.СканерыШтрихкода        , ЭлементыФормы.СканерыШтрихКода);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ТерминалыСбораДанных    , ЭлементыФормы.ТерминалыСбораДанных);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ФискальныеРегистраторы  , ЭлементыФормы.ФискальныеРегистраторы);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.СчитывателиМагнитныхКарт, ЭлементыФормы.СчитывателиМагнитныхКарт);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ЭлектронныеВесы         , ЭлементыФормы.ЭлектронныеВесы);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ВесыСПечатьюЭтикеток    , ЭлементыФормы.ВесыСПечатьюЭтикеток);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.СчитывателиRFIDМеток    , ЭлементыФормы.СчитывателиRFIDМеток);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ЭквайринговыеСистемы    , ЭлементыФормы.ЭквайринговыеСистемы);
мСоответствиеСтраницТаблицамТО.Вставить(СтраницыТО.ККТсПередачейДанных     , ЭлементыФормы.ККТсПередачейДанных);

мСоответствиеНазванийСтраниц = Новый Соответствие;
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ДисплеиПокупателя       , "Дисплеи покупателя");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ККМВРежимеOffline       , "ККМ в режиме Offline");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ККМВРежимеOnline        , "ККМ в режиме Online");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.СканерыШтрихкода        , "Сканеры штрихкода");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ТерминалыСбораДанных    , "Терминалы сбора данных");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ФискальныеРегистраторы  , "Фискальные регистраторы");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.СчитывателиМагнитныхКарт, "Считыватели магнитных карт");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ЭлектронныеВесы         , "Электронные весы");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ВесыСПечатьюЭтикеток    , "Весы с печатью этикеток");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.СчитывателиRFIDМеток    , "Считыватели RFID меток");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ЭквайринговыеСистемы    , "Эквайринговые системы");
мСоответствиеНазванийСтраниц.Вставить(СтраницыТО.ККТсПередачейДанных     , "ККТ с передачей данных");

мАдресИПараметрыСервера = Новый Структура;
мАдресИПараметрыСервера.Вставить("АдресОбработок", ПолучитьСерверТО().ПолучитьАдресОбновленияОбработокОбслуживания());
