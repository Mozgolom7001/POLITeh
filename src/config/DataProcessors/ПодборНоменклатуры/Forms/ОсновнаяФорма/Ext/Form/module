Перем мПустаяКартинка;
Перем мКартинкаНабор;
Перем мКартинкаНаборУдален;
Перем мСписокПометокНаборов;
Перем мТекущийЭлементФормы;
Перем мВремяПоследнегоПоиска;
Перем мВалютаРегламентированногоУчета;
Перем мСтруктураВидимостиКолонокПодбора;
Перем мСписокДоступныхСкладов;
Перем мНетГруппыДоступностиСкладов;
Перем мКолонкаНоменклатура;
Перем мКолонкаХарактеристикаНоменклатуры;
Перем мКолонкаСерияНоменклатуры;
Перем мКолонкаЕдиницаИзмерения;
Перем мКолонкаВалюта;
Перем мКолонкаСклад;
Перем мКолонкаКачество;
Перем мНужноОбновитьОтображениеОстатков;
Перем мКнопкаПересчитатьОстаткиВЕдиницуЦены;
// список значений строк - префиксов колонок с суммами
Перем мСписокПрефиксовЦен;
// соответсвие хранит структуры курсов валют
Перем мСоответствиеКурсовВалют;
// количество колонок в табличном поле ОстаткиДляНовогоКлиента без учета колонок сумм
Перем мКоличествоБазовыхКолонокОстаткиТоваров;
Перем мПерезаполнятьТаблицуНоменклатуры;
Перем ПлановыйТипЦен;
Перем ЕстьХарактеристика;
// управление отображением услуг
Перем ПодбиратьУслуги;
Перем ОтборУслугПоСправочнику;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает видимость таблицы с остатками товаров на скаладах
Процедура УстановитьВидимостьОстатковНаСкладах()

	Если ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница <> ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы.ПоСправочнику Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Кнопки.ОстаткиТоваровНаСкладах.Пометка Тогда
		
		ЭлементыФормы.РазделительОстатковНаСкладах.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.СправочникНоменклатура.Высота = Цел(ЭлементыФормы.ПанельНоменклатураДляПодбора.Высота/2) - 6;
		ЭлементыФормы.РазделительОстатковНаСкладах.Верх = ЭлементыФормы.СправочникНоменклатура.Высота + 1;
		НоваяВысота = ЭлементыФормы.ПанельНоменклатураДляПодбора.Высота - (ЭлементыФормы.РазделительОстатковНаСкладах.Верх + ЭлементыФормы.РазделительОстатковНаСкладах.Высота);
		НовыйВерх = ЭлементыФормы.РазделительОстатковНаСкладах.Верх + ЭлементыФормы.РазделительОстатковНаСкладах.Высота;
		
		Если НовыйВерх >= ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх Тогда
			
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Высота = НоваяВысота;
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх = НовыйВерх;
		
		Иначе
			
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх = НовыйВерх;
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Высота = НоваяВысота;
			
		КонецЕсли;
					
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительОстатковНаСкладах, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.СправочникНоменклатура.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительОстатковНаСкладах, ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.РазделительОстатковНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.РазделительОстатковНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительОстатковНаСкладах, ГраницаЭлементаУправления.Верх);
		
	Иначе
		
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОстаткиТоваровНаСкладах, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.СправочникНоменклатура.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельНоменклатураДляПодбора, ГраницаЭлементаУправления.Низ);
		
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительОстатковНаСкладах.Свертка = РежимСверткиЭлементаУправления.Низ;
		
		ЭлементыФормы.СправочникНоменклатура.Высота = ЭлементыФормы.ПанельНоменклатураДляПодбора.Высота;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура пересчитывает суммы номенклатуры по курсам
Процедура ПересчитатьВалютыОстатковНоменклатуры()
	
	Если НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
		СтруктураКурса = УправлениеЗапасами.ВернутьСтруктуруКурсВалюты(мСоответствиеКурсовВалют, ВалютаЦены);
    КонецЕсли;

	УправлениеЗапасами.ПересчитатьОстаткиВВалюте(ОстаткиТоваров, мСписокПрефиксовЦен, СтруктураКурса, ВВалютеЦены, ВалютаЦены)

КонецПроцедуры

// Процедура обновляет таблицу остатков на складах, основываясь на текущей номенклатуре
Процедура ПоказатьОстаткиТоваров()

	Если ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница <> ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы.ПоСправочнику Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Кнопки.ОстаткиТоваровНаСкладах.Пометка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные <> Неопределено
	   И НЕ ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.ЭтоГруппа Тогда
	   
		мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
		Склад = Неопределено;
		СтруктураИсходныхПараметров.Свойство("Склад", Склад);
		
		УправлениеЗапасами.ПолучитьДеревоОстатковНоменклатуры(ОстаткиТоваров, ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.Ссылка, Истина, 
				СписокЦенОстатков, , мСоответствиеКурсовВалют, , ДатаРасчетов);
		//Разворачиваем дерево
		Для Каждого СтрокаДереваОстатков Из ОстаткиТоваров.Строки Цикл
			ЭлементыФормы.ТабличноеПолеОстаткиТоваров.Развернуть(СтрокаДереваОстатков, Истина);
		КонецЦикла;
		РаботаСДиалогами.ОбновитьШапкиКолонокОстатков(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.Ссылка);
		ПересчитатьВалютыОстатковНоменклатуры();
	Иначе
		Если ОстаткиТоваров.Строки.Количество() <> 0 Тогда
			ОстаткиТоваров.Строки.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура полностью перестраивает дерево остатков
Процедура ПерестроитьДеревоОстатков()
	
	// структуры остатков надо восстановить
	ОстаткиТоваров = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
	ПоказатьОстаткиТоваров();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура устанавливает доступность элемента управления ВалютаЦены
Процедура ПроверитьДоступностьВалютуЦен()
	
	ЭлементыФормы.ВалютаЦены.Доступность = НЕ ВВалютеЦены;
	ЭлементыФормы.НадписьВалютаЦены.Доступность = НЕ ВВалютеЦены;
	
КонецПроцедуры


// Процедура получает список долтупности складов
//
Процедура ПолучитьСписокДоступностиСкладов(Склад)
	Перем ИспользоватьГруппуДоступности;

	ИспользоватьГруппуДоступности = ?(СтруктураИсходныхПараметров.Свойство("ИспользоватьГруппуДоступности", ИспользоватьГруппуДоступности), ИспользоватьГруппуДоступности, Ложь);

	Если НЕ ИспользоватьГруппуДоступности Тогда
		мСписокДоступныхСкладов = Справочники.Склады.ПустаяСсылка();
		возврат;
	КонецЕсли;

	ГруппаДоступностиСкладов = ?(ТипЗнч(Склад) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") И ЗначениеЗаполнено(Склад), Склад, УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов"));
	Запрос                   = Новый Запрос;

	Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);

	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ГруппыДоступности.Склад
	|ИЗ
	|	РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|ГДЕ 
	|	ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		мСписокДоступныхСкладов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Склад");
	Иначе
		мСписокДоступныхСкладов = ?(мСписокДоступныхСкладов = Неопределено, Справочники.Склады.ПустаяСсылка(), мСписокДоступныхСкладов);
	КонецЕсли;

КонецПроцедуры // ПолучитьСписокДоступностиСкладов()

// Процедура устанавливает текущего родителя
//
// Параметры:
//  Родитель - ссылка, содержащая значение родителя
//
Процедура УстановитьТекущегоРодителя(Родитель)

	ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока = Родитель;

КонецПроцедуры // УстановитьТекущегоРодителя()

// Функция получить текущего родителя
//
// Возвращаемое значение:
//	Ссылку на текущего родителя
//
Функция ПолучитьТекущегоРодителя() Экспорт

	Возврат ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;

КонецФункции // ПолучитьТекущегоРодителя()

// Процедура сохранения видимости колонок подбора
//
Процедура СохранитьВидимостьКолонокПодбора()

	// Это первом обращении восстанавливаем значения
	Если мСтруктураВидимостиКолонокПодбора = Неопределено Тогда
		мСтруктураВидимостиКолонокПодбора = ВосстановитьЗначение("ВидимостьКолонокПриПодборе");
	КонецЕсли;

	Если ТипЗнч(мСтруктураВидимостиКолонокПодбора) <> Тип("Структура") Тогда
		мСтруктураВидимостиКолонокПодбора = Новый Структура;
	КонецЕсли;

	Для каждого Колонка Из ЭлементыФормы.НоменклатураДляПодбора.Колонки Цикл
		ИмяКолонки = Колонка.Имя;

		Если ИмяКолонки = "Пиктограмма"
		 ИЛИ ИмяКолонки = "ПредставлениеНоменклатура"
		 ИЛИ ИмяКолонки = "ПереходитьВверх"
		 ИЛИ ИмяКолонки = "ФлагУсловийПоставки"
		 ИЛИ НЕ Колонка.ИзменятьВидимость Тогда
			Продолжить;
		КонецЕсли;

		Если мСтруктураВидимостиКолонокПодбора.Свойство(ИмяКолонки) Тогда
			мСтруктураВидимостиКолонокПодбора[ИмяКолонки] = Колонка.Видимость;
		Иначе
			мСтруктураВидимостиКолонокПодбора.Вставить(ИмяКолонки, Колонка.Видимость);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СохранитьВидимостьКолонокПодбора()

// Процедура обновить изображение
//
Процедура ОбновитьИзображение()

	Если ПодборПоСправочнику Тогда
		Если ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка Тогда
			Если ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные <> Неопределено Тогда

				Номенклатура = ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.Ссылка;

				Если НЕ ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.ЭтоГруппа Тогда
					Если ЗначениеЗаполнено(Номенклатура.ОсновноеИзображение) Тогда
						ЭлементыФормы.ОсновноеИзображение.Картинка = Номенклатура.ОсновноеИзображение.Хранилище.Получить();
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
		КонецЕсли;

	Иначе

		Если ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка Тогда
			Если ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные <> Неопределено Тогда

				Номенклатура = ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные.Номенклатура;

				Если НЕ ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные.ЭтоГруппа Тогда
					Если ЗначениеЗаполнено(Номенклатура.ОсновноеИзображение) Тогда
						ЭлементыФормы.ОсновноеИзображение.Картинка = Номенклатура.ОсновноеИзображение.Хранилище.Получить();
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбновитьИзображение()

// Процедура управляет видимостью, доступностью, отбором элементов диалога.
//
Процедура УправлениеДиалогом()

	Перем ЕстьЦена, ЕстьСерия, ЕстьКоличество;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьЦена" , ЕстьЦена) Тогда
		ЭлементыФормы.ЗапрашиватьЦену.Доступность  = ЕстьЦена;
		ЗапрашиватьЦену  = ?(ЕстьЦена,  ЗапрашиватьЦену,  Ложь);
	Иначе
		ЭлементыФормы.ЗапрашиватьЦену.Доступность  = Ложь;
		ЗапрашиватьЦену  = Ложь;
	КонецЕсли;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьСерия", ЕстьСерия) Тогда
		ЭлементыФормы.ЗапрашиватьСерию.Доступность = ЕстьСерия;
		ЗапрашиватьСерию = ?(ЕстьСерия, ЗапрашиватьСерию, Ложь);
	Иначе
		ЭлементыФормы.ЗапрашиватьСерию.Доступность = Ложь;
		ЗапрашиватьСерию = Ложь;
	КонецЕсли;

	Если НЕ СтруктураИсходныхПараметров.Свойство("ЕстьХарактеристика", ЕстьХарактеристика) Тогда
		ЕстьХарактеристика = Истина;
	КонецЕсли;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьКоличество", ЕстьКоличество) Тогда
		ЭлементыФормы.ЗапрашиватьКоличество.Доступность = ЕстьКоличество;
		ЗапрашиватьКоличество = ?(ЕстьКоличество, ЗапрашиватьКоличество, Ложь);
	Иначе

		// по умолчанию если параметр не передан, то флаг запроса количесва доступен,
		// а выставлен он или нет регулируется в процедуре ПриОткрытии()
		ЭлементыФормы.ЗапрашиватьКоличество.Доступность = Истина;
	КонецЕсли;

	ЭлементыФормы.НадписьДатаРасчетов.Видимость  = ЗначениеЗаполнено(ДатаРасчетов);
	ЭлементыФормы.ДатаРасчетов.Видимость         = ЗначениеЗаполнено(ДатаРасчетов);
	
	СтруктураИсходныхПараметров.Свойство("ПодбиратьУслуги",         ПодбиратьУслуги);
	СтруктураИсходныхПараметров.Свойство("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	ОтборУслугПоСправочнику = ?(ОтборУслугПоСправочнику = Неопределено, Истина, ОтборУслугПоСправочнику);
	ПодбиратьУслуги         = ?(ПодбиратьУслуги = Неопределено, Ложь, ПодбиратьУслуги);

	Если ОтборУслугПоСправочнику Тогда
		ОтборУслуга = СправочникНоменклатура.Отбор.Услуга;
		ОтборУслуга.Значение      = ПодбиратьУслуги;
		ОтборУслуга.ВидСравнения  = ВидСравнения.Равно;
		ОтборУслуга.Использование = Истина;
	КонецЕсли;

КонецПроцедуры // УправлениеДиалогом()

// Процедура выполняет поиск номенклатуры по заданным критериям.
//
Процедура ВыполнитьПоиск()

	Если мВремяПоследнегоПоиска = ТекущаяДата() Тогда
		// Искать не надо, вероятно после изменения текста в окне поиска пользователь нажал на
		// кнопку открытия.
		Возврат;
	КонецЕсли;

	// Надо добавить шаблон в историю
	ЭлементИстории = ЭлементыФормы.ПолеПоиска.СписокВыбора.НайтиПоЗначению(ПолеПоиска);
	Если ЭлементИстории = Неопределено Тогда
		// Надо добавить
		ЭлементыФормы.ПолеПоиска.СписокВыбора.Вставить(0, ПолеПоиска);
	Иначе
		// Надо переместить в начало истории
		ИндексЭлементаИстории = ЭлементыФормы.ПолеПоиска.СписокВыбора.Индекс(ЭлементИстории);
		ЭлементыФормы.ПолеПоиска.СписокВыбора.Сдвинуть(ЭлементИстории, - ИндексЭлементаИстории);
	КонецЕсли;

	ШаблонПоиска = СокрЛП(ПолеПоиска);
	Если НЕ ЗначениеЗаполнено(ШаблонПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СписокВидовПоиска.Значение = "Штрихкод" Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(ШаблонПоиска, ЭтаФорма);
	Иначе
		ЕстьНоменклатурнаяГруппа = ЗначениеЗаполнено(НоменклатурнаяГруппа);

		// заменим спецсимволы
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "~", "~~");
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "%", "~%");
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "_", "~_");
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "[", "~[");
		ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "-", "~-");
		ШаблонПоиска = "%" + ШаблонПоиска + "%";

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ШаблонПоиска", ШаблонПоиска);
		Если ЕстьНоменклатурнаяГруппа Тогда
			Запрос.УстановитьПараметр("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
		КонецЕсли;

		// Инициализируем структуру выбранной строки (реквизиты обработки).
		Если ПодборПоСправочнику Тогда

			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 51
			|	Номенклатура.Код КАК Код,
			|	Номенклатура.Артикул КАК Артикул,
			|	Номенклатура.Ссылка КАК Номенклатура,
			|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
			|	Номенклатура.Родитель КАК Родитель
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|
			|ГДЕ
			|	Номенклатура." + ЭлементыФормы.СписокВидовПоиска.Значение + " ПОДОБНО &ШаблонПоиска СПЕЦСИМВОЛ ""~""
			|	И Номенклатура.ЭтоГруппа = Ложь
			|	" + ?(ЕстьНоменклатурнаяГруппа, "И Номенклатура.НоменклатурнаяГруппа В (&НоменклатурнаяГруппа)", "") + "
			|";

		Иначе

			Организация = СтруктураИсходныхПараметров["Организация"];
			Склад       = СтруктураИсходныхПараметров["Склад"];
			мДоговорКонтрагента = Неопределено;
			СтруктураИсходныхПараметров.Свойство("ДоговорКонтрагента", мДоговорКонтрагента);

			Запрос.УстановитьПараметр("Дата",               ДатаРасчетов);
			Запрос.УстановитьПараметр("Организация",        Организация);
			Запрос.УстановитьПараметр("Склад",              Склад);
			Запрос.УстановитьПараметр("ВидПодбора",         ЭлементыФормы.СписокВидовПодбора.Значение);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", мДоговорКонтрагента);
			
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 51
			|	сНоменклатура.Код                КАК Код,
			|	сНоменклатура.Артикул            КАК Артикул,
			|	сНоменклатура.Ссылка             КАК Номенклатура,
			|	сНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
			|	сНоменклатура.Родитель           КАК Родитель
			|ИЗ
			|	Справочник.Номенклатура КАК сНоменклатура
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|(
			|ВЫБРАТЬ
			|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
			|	СУММА((ВЫБОР КОГДА ТоварыНаСкладах.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыНаСкладах.КоличествоОстаток КОНЕЦ)
			|	      - (ВЫБОР КОГДА ТоварыВРезервеНаСкладах.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыВРезервеНаСкладах.КоличествоОстаток КОНЕЦ)
			|	      - (ВЫБОР КОГДА ТоварыКПередачеСоСкладов.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыКПередачеСоСкладов.КоличествоОстаток КОНЕЦ)) КАК КоличествоСвободныйОстаток,
			|	СУММА(ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток КОНЕЦ) КАК КоличествоОстатокОрганизации
			|ИЗ
			|	(	ВЫБРАТЬ
			|			  ТоварыНаСкладахОстаткиОрганизации.Номенклатура
			|			, СУММА(ТоварыНаСкладахОстаткиОрганизации.КоличествоОстаток) КАК КоличествоОстаток
			|		ИЗ
			|
			|		(ВЫБРАТЬ
			|			  Номенклатура
			|			, КоличествоОстаток
			|		ИЗ
			|			РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Склад), "Склад В (&Склад)", "") + ") КАК ТоварыНаСкладах
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|	
			|		ВЫБРАТЬ
			|			  Номенклатура
			|			, 0
			|		ИЗ
			|			РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Организация), "Организация = &Организация", "") +") КАК ОстаткиОрганизации
			|
			|		ОБЪЕДИНИТЬ ВСЕ
			|
			|		ВЫБРАТЬ
			|			  ТоварыВРознице.Номенклатура
			|			, КоличествоОстаток
			|		ИЗ
			|		РегистрНакопления.ТоварыВРознице.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Склад), "Склад В (&Склад)", "") + ") КАК ТоварыВРознице
			|
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			  ТоварыВНТТ.Номенклатура
			|			, КоличествоОстаток
			|		ИЗ
			|		РегистрНакопления.ТоварыВНТТ.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Склад), "Склад В (&Склад)", "") + ") КАК ТоварыВНТТ) КАК ТоварыНаСкладахОстаткиОрганизации
			|		
			|		СГРУППИРОВАТЬ ПО ТоварыНаСкладахОстаткиОрганизации.Номенклатура
			|	) КАК ТоварыНаСкладах
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Склад), "Склад В (&Склад)", "") + ") КАК ТоварыВРезервеНаСкладах
			|		ПО
			|			ТоварыВРезервеНаСкладах.Номенклатура = ТоварыНаСкладах.Номенклатура
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|			РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Склад), "Склад В (&Склад)", "") + ") КАК ТоварыКПередачеСоСкладов
			|		ПО
			|			ТоварыКПередачеСоСкладов.Номенклатура = ТоварыНаСкладах.Номенклатура
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|			РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, " + ?(ЗначениеЗаполнено(Организация), "Организация = &Организация", "") +") КАК ОстаткиОрганизации
			|		ПО
			|			ОстаткиОрганизации.Номенклатура = ТоварыНаСкладах.Номенклатура
			|	ГДЕ &ВидПодбора <> ""ЛимитПоставщика"" И &ВидПодбора <> ""ЛимитПокупателю""
			|СГРУППИРОВАТЬ ПО
			|	ТоварыНаСкладах.Номенклатура
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	Лимиты.Номенклатура КАК Номенклатура,
			|	ВЫБОР	КОГДА &ВидПодбора = ""ЛимитПоставщика"" ТОГДА Лимиты.ЛимитПоставщика
			|			КОГДА &ВидПодбора = ""ЛимитПокупателю"" ТОГДА Лимиты.ЛимитПокупателю
			|			ИНАЧЕ 0.00
			|	КОНЕЦ               КАК КоличествоСвободныйОстаток,
			|	0.00                КАК КоличествоОстатокОрганизации
			|ИЗ
			|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(&Дата, ДоговорКонтрагента = &ДоговорКонтрагента) КАК Лимиты
			|ГДЕ
			|	(&ВидПодбора = ""ЛимитПоставщика"" ИЛИ &ВидПодбора = ""ЛимитПокупателю"")
			|	И
			|	ВЫБОР	КОГДА &ВидПодбора = ""ЛимитПоставщика"" ТОГДА Лимиты.ЛимитПоставщика
			|			КОГДА &ВидПодбора = ""ЛимитПокупателю"" ТОГДА Лимиты.ЛимитПокупателю
			|			ИНАЧЕ 0.00
			|	КОНЕЦ <> 0
			|) КАК Остатки
			|ПО
			|	Остатки.Номенклатура = сНоменклатура.Ссылка
			|ГДЕ
			|	(НЕ Остатки.Номенклатура ЕСТЬ NULL
			|	И сНоменклатура." + ЭлементыФормы.СписокВидовПоиска.Значение + " ПОДОБНО &ШаблонПоиска СПЕЦСИМВОЛ ""~""
			|	И сНоменклатура.ЭтоГруппа = Ложь
			|	И (ЕСТЬNULL(Остатки.КоличествоСвободныйОстаток, 0.00) <> 0 ИЛИ ЕСТЬNULL(Остатки.КоличествоОстатокОрганизации, 0.00) <> 0)
			|	" + ?(ЕстьНоменклатурнаяГруппа, " И сНоменклатура.НоменклатурнаяГруппа В (&НоменклатурнаяГруппа)", "") + ")
			|	ИЛИ
			|	(сНоменклатура." + ЭлементыФормы.СписокВидовПоиска.Значение + " ПОДОБНО &ШаблонПоиска СПЕЦСИМВОЛ ""~""
			|	И сНоменклатура.ЭтоГруппа = Ложь И (сНоменклатура.Набор ИЛИ сНоменклатура.Услуга ИЛИ сНоменклатура.Комплект ИЛИ &ВидПодбора = ""РасходЦеныНоменклатуры"")
			|	" + ?(ЕстьНоменклатурнаяГруппа, " И сНоменклатура.НоменклатурнаяГруппа В (&НоменклатурнаяГруппа)", "") + ")
			|";

		КонецЕсли;

		ВыбраннаяНоменклатура = Неопределено;
		Родитель = Неопределено;

		ФормаВыбораПоиска = ПолучитьФорму("ФормаВыбораПоиска", ЭтаФорма);
		ФормаВыбораПоиска.ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();

		ВыбраннаяНоменклатура = Неопределено;
		Если ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 0 Тогда
			Предупреждение("Отсутствует номенклатура с заданными критериями поиска!");
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат;
		ИначеЕсли ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 1 Тогда
			ВыбраннаяНоменклатура = ФормаВыбораПоиска.ТаблицаНоменклатуры[0].Номенклатура;
			Родитель              = ФормаВыбораПоиска.ТаблицаНоменклатуры[0].Родитель;
		Иначе
			Если ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 51 Тогда
				Предупреждение("По заданным критериям поиска найдено более 50 элементов номенклатуры!
								|Будут показаны первые 50.");
				ФормаВыбораПоиска.ТаблицаНоменклатуры.Удалить(50);
			КонецЕсли;

			СтруктураПараметров = ФормаВыбораПоиска.ОткрытьМодально();

			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
				СтруктураПараметров.Свойство("ВыбраннаяНоменклатура", ВыбраннаяНоменклатура);
				СтруктураПараметров.Свойство("Родитель"             , Родитель);
			Иначе
				мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
				Возврат; // форма закрыта не по кнопке "ОК"
			КонецЕсли;

			Если ВыбраннаяНоменклатура = Неопределено Тогда
				мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
		УстановитьТекущегоРодителя(Родитель);
		ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
		мПерезаполнятьТаблицуНоменклатуры = Истина;

		Если ПодборПоСправочнику Тогда
			ЭлементыФормы.СправочникНоменклатура.ТекущаяСтрока = ВыбраннаяНоменклатура;
			мТекущийЭлементФормы = ЭлементыФормы.СправочникНоменклатура;
		Иначе
			СтрокаНоменклатуры = НоменклатураДляПодбора.Найти(ВыбраннаяНоменклатура, "Номенклатура");
			Если СтрокаНоменклатуры = Неопределено Тогда
				Предупреждение("Найденная номенклатура отсутствует в подборе для заданных условий!");
				мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
				Возврат;
			Иначе
				ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = СтрокаНоменклатуры;
			КонецЕсли;
			мТекущийЭлементФормы = ЭлементыФормы.НоменклатураДляПодбора;
		КонецЕсли;
	КонецЕсли;

	мВремяПоследнегоПоиска = ТекущаяДата();

КонецПроцедуры // ВыполнитьПоиск()

// Процедура устанавливает отвор по номенклатурной группе.
//
Процедура УстановитьОтборПоНоменклатурнойГруппе()

	ЕстьНоменклатурнаяГруппа = ЗначениеЗаполнено(НоменклатурнаяГруппа);

	Если ПодборПоСправочнику Тогда
		ЭлементОтбора               = ЭлементыФормы.СправочникНоменклатура.Значение.Отбор.НоменклатурнаяГруппа;
		ЭлементОтбора.Значение      = НоменклатурнаяГруппа;
		ЭлементОтбора.Использование = ЕстьНоменклатурнаяГруппа;
	Иначе
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить("Группа");
		СписокОтбора.Добавить(?(ЕстьНоменклатурнаяГруппа, СокрЛП(НоменклатурнаяГруппа), ""));

		ЭлементОтбора               = ЭлементыФормы.НоменклатураДляПодбора.ОтборСтрок.ПредставлениеНоменклатурнаяГруппа;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение      = СписокОтбора;
		ЭлементОтбора.Использование = ЕстьНоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует и выводит текст в информационной надписи о параметрах подбора.
//
// Параметры:
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса) Экспорт

	Перем ВременнаяСтрока;
	Перем СтруктураПараметров;

	Если ЗначениеЗаполнено(СтруктураЗапроса) Тогда
	
		ВременнаяСтрока = "";
		
		НайденныйЭлементСпискаВыбора = ЭлементыФормы.СписокВидовПодбора.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.СписокВидовПодбора.Значение);
		Если НайденныйЭлементСпискаВыбора <> Неопределено Тогда
			ВременнаяСтрока = ВременнаяСтрока + НайденныйЭлементСпискаВыбора.Представление + "; ";
		КонецЕсли;
		
		СписокПараметровЗапроса = ПолучитьСписокПараметровЗапроса(ЭлементыФормы.СписокВидовПодбора.Значение);

		Организация = Неопределено;
		Склад = Неопределено;
		СтруктураИсходныхПараметров.Свойство("Организация", Организация);
		СтруктураИсходныхПараметров.Свойство("Склад", Склад);
		Если ?(УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация), Истина, ?(ЗначениеЗаполнено(Организация), Ложь, Истина)) Тогда
			НайденныйЭлементОрганизация = СписокПараметровЗапроса.НайтиПоЗначению("Организация");
			Если НайденныйЭлементОрганизация <> Неопределено Тогда
				СписокПараметровЗапроса.Удалить(НайденныйЭлементОрганизация);
			КонецЕсли;
		КонецЕсли;
		Если ?(ЗначениеЗаполнено(Склад), Ложь, Истина) Тогда
			НайденныйЭлементОрганизация = СписокПараметровЗапроса.НайтиПоЗначению("Склад");
			Если НайденныйЭлементОрганизация <> Неопределено Тогда
				СписокПараметровЗапроса.Удалить(НайденныйЭлементОрганизация);
			КонецЕсли;
		КонецЕсли;
		
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
			Если ЗначениеЗаполнено(СтруктураИсходныхПараметров[ЭлементСписка.Значение]) Тогда
				ВременнаяСтрока = ВременнаяСтрока + ?(ТипЗнч(СтруктураИсходныхПараметров[ЭлементСписка.Значение]) = Тип("Массив"), "", Строка(СтруктураИсходныхПараметров[ЭлементСписка.Значение]) + "; ");
			КонецЕсли; 
		КонецЦикла; 
		
		ВременнаяСтрока = Врег(Лев(ВременнаяСтрока, 1)) + Сред(ВременнаяСтрока, 2);
		ВременнаяСтрока = Лев(ВременнаяСтрока, СтрДлина(ВременнаяСтрока) - 2);

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьПараметрыПодбора.Заголовок = ВременнаяСтрока;

КонецПроцедуры // ОбновитьИнформационнуюНадписьПараметрыПодбора()

// Перезаполняет таблицу номенклатуры по запросу по переданному родителю.
//
// Параметры: 
//  Родитель         - Справочник.Номенклатура (группа), таблица номенклатуры
//                     заполняется только подчиненными этой группе элементами,
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса) Экспорт

	Перем СтруктураПараметров;
	Перем Номенклатура;
	Перем МенеджерВТ;
	Перем СкрыватьХарактеристику;

	ЕстьПараметрСклад = СтруктураИсходныхПараметров.Свойство("Склад");
	Если ЕстьПараметрСклад И (ЗначениеЗаполнено(СтруктураИсходныхПараметров.Склад) И
			НЕ (ТипЗнч(СтруктураИсходныхПараметров.Склад) = Тип("СправочникСсылка.Склады")
					ИЛИ ТипЗнч(СтруктураИсходныхПараметров.Склад) = Тип("СправочникСсылка.ГруппыДоступностиСкладов")
					ИЛИ мНетГруппыДоступностиСкладов) ИЛИ ТипЗнч(СтруктураИсходныхПараметров.Склад) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")) Тогда
		мНетГруппыДоступностиСкладов = Ложь;
		мСписокДоступныхСкладов = Неопределено;
		СтруктураИсходныхПараметров.Склад = Неопределено;
	КонецЕсли;

	Если ЕстьПараметрСклад И (НЕ ЗначениеЗаполнено(СтруктураИсходныхПараметров.Склад) ИЛИ ТипЗнч(СтруктураИсходныхПараметров.Склад) = Тип("СправочникСсылка.ГруппыДоступностиСкладов")) Тогда
		Если ТипЗнч(СтруктураИсходныхПараметров.Склад) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") ИЛИ СтруктураИсходныхПараметров.Склад = Неопределено Тогда
			мНетГруппыДоступностиСкладов = Ложь;
			мСписокДоступныхСкладов = Неопределено;
		КонецЕсли;
		Если НЕ мНетГруппыДоступностиСкладов
		   И НЕ ЗначениеЗаполнено(мСписокДоступныхСкладов) Тогда

			ПолучитьСписокДоступностиСкладов(СтруктураИсходныхПараметров.Склад);

			мНетГруппыДоступностиСкладов      = Истина;
			СтруктураИсходныхПараметров.Склад = мСписокДоступныхСкладов;

		Иначе
			СтруктураИсходныхПараметров.Склад = мСписокДоступныхСкладов;
		КонецЕсли;
	КонецЕсли;

	РазворачиватьДоКачества = ?(СтруктураИсходныхПараметров.Свойство("РазворачиватьДоКачества"), СтруктураИсходныхПараметров.РазворачиватьДоКачества, Ложь);

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.СправочникНоменклатура.ТекущийРодитель = ?(Родитель.ЭтоГруппа, Родитель, Неопределено);
		УстановитьОтборПоНоменклатурнойГруппе();
		Возврат;
	КонецЕсли;

	Запрос = ПолучитьЗапросДляПодбора(ЭлементыФормы.СписокВидовПодбора.Значение, Родитель, ДатаРасчетов, мКнопкаПересчитатьОстаткиВЕдиницуЦены.Пометка, РазворачиватьДоКачества, ЭтаФорма.ВладелецФормы);
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	ВидимостьКолонкиКачество = Истина;
	Если НЕ РазворачиватьДоКачества И НЕ РезультатЗапроса.Колонки.Найти("Качество") = Неопределено Тогда
		ВидимостьКолонкиКачество = Ложь;
	КонецЕсли;

	СтруктураИсходныхПараметров.Вставить("РезультатПодборПоЗапросу", РезультатЗапроса);
	// Скроем колонки, которых нет в результате запроса.
	// Колонки скрытые польльзователем тоже не будем показывать
	СохранитьВидимостьКолонокПодбора();
	Для Каждого Колонка Из ЭлементыФормы.НоменклатураДляПодбора.Колонки Цикл
		ИмяКолонки = Колонка.Имя;

		Если ИмяКолонки = "Пиктограмма"
		 ИЛИ ИмяКолонки = "Номенклатура" Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Истина;

		ИначеЕсли ИмяКолонки = "ПереходитьВверх"
		      ИЛИ ИмяКолонки = "ФлагУсловийПоставки"  Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Ложь;
			
		ИначеЕсли ИмяКолонки = "ПереходитьВверх"
		      ИЛИ ИмяКолонки = "ФлагУсловийПоставки" Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Ложь;
		Иначе

			Если Найти(ИмяКолонки, "Представление") = 0 Тогда
				ЕстьКолонка = (НЕ РезультатЗапроса.Колонки.Найти(ИмяКолонки) = Неопределено);
			Иначе
				ЕстьКолонка = Ложь;
			КонецЕсли;

			Если ЕстьКолонка Тогда
				ПризнакВидимости = Неопределено;

				Если мСтруктураВидимостиКолонокПодбора.Свойство(ИмяКолонки, ПризнакВидимости) Тогда
					Если ИмяКолонки = "Качество" Тогда
						ПризнакВидимости         = ВидимостьКолонкиКачество И ПризнакВидимости;
						ПризнакИзменятьВидимость = ВидимостьКолонкиКачество;
						ПризнакДоступностиОтбора = ВидимостьКолонкиКачество;
					Иначе
						ПризнакВидимости         = ПризнакВидимости;
						ПризнакИзменятьВидимость = Истина;
						ПризнакДоступностиОтбора = Истина;
					КонецЕсли;
				Иначе
					ПризнакВидимости         = Истина;
					ПризнакИзменятьВидимость = Истина;
					ПризнакДоступностиОтбора = Истина;
				КонецЕсли;
			Иначе
				ПризнакВидимости         = Ложь;
				ПризнакИзменятьВидимость = Ложь;
				ПризнакДоступностиОтбора = Ложь;
			КонецЕсли;

			Колонка.ИзменятьВидимость = ПризнакИзменятьВидимость;
			Колонка.Видимость         = ПризнакВидимости;
			ЭлементыФормы.НоменклатураДляПодбора.НастройкаОтбораСтрок[ИмяКолонки].Доступность = ПризнакДоступностиОтбора;

		КонецЕсли;
	КонецЦикла;

	// Управление видимостью колонок "ХарактеристикаНоменклатуры"
	СтруктураИсходныхПараметров.Свойство("СкрыватьХарактеристику", СкрыватьХарактеристику);
	СкрыватьХарактеристику = ?(СкрыватьХарактеристику = Неопределено, Ложь, СкрыватьХарактеристику);
	КолонкиПодбора = ЭлементыФормы.НоменклатураДляПодбора.Колонки;
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиПодбора, Новый Структура("ХарактеристикаНоменклатуры"), мИспользоватьХарактеристики И НЕ СкрыватьХарактеристику);
	ЭлементыФормы.НоменклатураДляПодбора.НастройкаОтбораСтрок.ХарактеристикаНоменклатуры.Доступность = мИспользоватьХарактеристики И НЕ СкрыватьХарактеристику;

	// Заполним табличную часть НоменклатураДляПодбора.
	НоменклатураДляПодбора.Загрузить(РезультатЗапроса.Выгрузить());

	ПлановыйТипЦен = ?(ПлановыйТипЦен = Неопределено, Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить(), ПлановыйТипЦен);
	Если (СтруктураИсходныхПараметров.Свойство("ТипЦен") И ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры"))
	 ИЛИ (ЭлементыФормы.СписокВидовПодбора.Значение = "РасходЦеныПлановойСебестоимостиНоменклатуры" И ЗначениеЗаполнено(ПлановыйТипЦен) И ПлановыйТипЦен.Рассчитывается) Тогда

		РассчитыватьЦену = Истина;
		Если ЭлементыФормы.СписокВидовПодбора.Значение = "РасходЦеныПлановойСебестоимостиНоменклатуры" Тогда
			РасчетныйТипЦен = ПлановыйТипЦен;
		Иначе
			РасчетныйТипЦен = СтруктураИсходныхПараметров.ТипЦен;
		КонецЕсли;
	Иначе
		РассчитыватьЦену = Ложь;
	КонецЕсли;
		
		Для Каждого СтрокаТабличнойЧасти Из НоменклатураДляПодбора Цикл
			Если СтрокаТабличнойЧасти.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (1 + СтрокаТабличнойЧасти.ПроцентНаценки /100);
			Если РассчитыватьЦену И ЭлементыФормы.СписокВидовПодбора.Значение <> "ОстаткиНТТ" Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена,
				                            РасчетныйТипЦен.ПорядокОкругления,
				                            РасчетныйТипЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
		КонецЦикла;
		
	// Заполним групы для перехода на предыдущий уровень.
	ТекГруппа = Родитель;
	Пока ТекГруппа <> Справочники.Номенклатура.ПустаяСсылка() Цикл

		НоваяСтрока  = НоменклатураДляПодбора.Вставить(0);
		Номенклатура = ТекГруппа;

		НоваяСтрока.Код                               = Номенклатура.Код;
		НоваяСтрока.Номенклатура                      = Номенклатура;
		НоваяСтрока.ПредставлениеНоменклатура         = Номенклатура.Наименование;
		НоваяСтрока.ПредставлениеНоменклатурнаяГруппа = "Группа";
		НоваяСтрока.ПереходитьВверх                   = Истина;
		НоваяСтрока.ЭтоГруппа                         = Истина;

		ТекГруппа = ТекГруппа.Родитель;
	КонецЦикла;

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры // ПерезаполнитьТаблицуНоменклатуры()

// Показывает соответствующее выбранному виду подбора табличное поле
// и перезаполняет таблицу номенклатуры.
//  Если значение элемента списка "СписокВидовПодбора" не заполнено, то
// делает видимым табличное поле "СправочникНоменклатура", а если - заполнено,
// то - "НоменклатураДляПодбора".
//
// Параметры:
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ПриИзмененииВидаПодбора(СтруктураЗапроса, ОбновитьЭлементыРамкиЗапрашивать = Истина)

	Перем Команда;

	мИмяРегистраДляПодбораСерий = "";

	ПодборПоСправочнику = НЕ ЗначениеЗаполнено(СтруктураЗапроса);
	
	СтруктураИсходныхПараметров.Свойство("Команда", Команда);

	Если мИспользоватьХарактеристики Тогда
		Если Команда = "ПодборВТабличнуюЧастьУслуги"
		ИЛИ Команда = "ПодборВТабличнуюЧастьВозвратнаяТара"
		ИЛИ НЕ ЕстьХарактеристика Тогда
			Если ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность Тогда
				СохранитьЗначение("ЗапрашиватьХарактеристикуПриПодборе", ЗапрашиватьХарактеристику);
			КонецЕсли;

			ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность = Ложь;
			ЗапрашиватьХарактеристику                           = Ложь;
		Иначе
			Если ОбновитьЭлементыРамкиЗапрашивать Тогда
				ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность = Истина;
				ЗапрашиватьХарактеристику                           = ВосстановитьЗначение("ЗапрашиватьХарактеристикуПриПодборе");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Видимость = ПодборПоСправочнику;
	ЭлементыФормы.ИнфНадписьПараметрыПодбора.Видимость = Не ПодборПоСправочнику;
	//ЭлементыФормы.КнопкаОбновить.Видимость             = Не ПодборПоСправочнику;
	ЭлементыФормы.НадписьДатаРасчетов.Видимость        = Не (ПодборПоСправочнику или НЕ ЗначениеЗаполнено(ДатаРасчетов));
	ЭлементыФормы.ДатаРасчетов.Видимость               = Не (ПодборПоСправочнику или НЕ ЗначениеЗаполнено(ДатаРасчетов));

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница   = ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы["ПоСправочнику"];
		ЭтаФорма.ЭлементыФормы.СправочникНоменклатура.ТекущаяКолонка = ЭтаФорма.ЭлементыФормы.СправочникНоменклатура.Колонки.Наименование;
	Иначе
		ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница   = ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы["ПоЗапросу"];
		ЭтаФорма.ЭлементыФормы.НоменклатураДляПодбора.ТекущаяКолонка = ЭтаФорма.ЭлементыФормы.НоменклатураДляПодбора.Колонки.Номенклатура;
	КонецЕсли;
	
	ПроверитьВидимостьКартинки();
	
	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.ПоказыватьОстатки.Видимость = Истина;
	Иначе
		ЭлементыФормы.ПоказыватьОстатки.Видимость = Ложь;
	КонецЕсли;

	// Заполним таблицу номенклатуры текущего родителя.
	Родитель = ПолучитьТекущегоРодителя();
	Родитель = ?(НЕ ЗначениеЗаполнено(Родитель), Справочники.Номенклатура.ПустаяСсылка(), Родитель);

	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
	ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);

КонецПроцедуры // ПриИзмененииВидаПодбора()

// Процедура выполняет стандартные действия при открытии формы.
//  Вызывается при открытии, при повторном открытии 
//
Процедура ДействияПриОткрытии()

	Перем Команда;

	Если СтруктураИсходныхПараметров.Свойство("ДатаРасчетов") Тогда
		ДатаРасчетов = СтруктураИсходныхПараметров.ДатаРасчетов;
	Иначе
		ДатаРасчетов = ТекущаяДата();
	КонецЕсли; 
	ЭлементыФормы.СписокВидовПодбора.СписокВыбора = СтруктураИсходныхПараметров.СписокВидовПодбора;

	СписокВидовПоиска = Новый СписокЗначений;
	СписокВидовПоиска.Добавить("Наименование",       "наименованию");
	СписокВидовПоиска.Добавить("НаименованиеПолное", "полному наименованию");
	СписокВидовПоиска.Добавить("Код",                "коду");
	СписокВидовПоиска.Добавить("Артикул",            "артикулу");
	СписокВидовПоиска.Добавить("Штрихкод",           "штрихкоду");
	ЭлементыФормы.СписокВидовПоиска.СписокВыбора = СписокВидовПоиска;

	УправлениеДиалогом(); // если цен в подборе нет, скроем колонки, относящиеся к ценам
	ПроверитьВидимостьКартинки();
	
	// Восстановим значение варианта подбора.
	// Считаем, что подобр зовется только из форм документов
	НомерВидаПодбора = ВосстановитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                                        + СокрЛП(СтруктураИсходныхПараметров.Команда) + "НомерВидаПодбора");

	// Если не удалось восстановить, то инициализируем список видов подбора первым значением из списка.
	ЭлементыФормы.СписокВидовПодбора.Значение = ?(НомерВидаПодбора = Неопределено
	                                              Или НомерВидаПодбора >= СтруктураИсходныхПараметров.СписокВидовПодбора.Количество(), 
	                                              СтруктураИсходныхПараметров.СписокВидовПодбора[0].Значение,
	                                              СтруктураИсходныхПараметров.СписокВидовПодбора[НомерВидаПодбора].Значение);

	// Восстановим значение варианта поиска.
	// Считаем, что подбор зовется только из форм документов
	НомерВидаПоиска = ВосстановитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                                       + СокрЛП(СтруктураИсходныхПараметров.Команда) + "НомерВидаПоиска");

	// Если не удалось восстановить, то инициализируем список видов поиска первым значением из списка.
	ЭлементыФормы.СписокВидовПоиска.Значение = ?(НомерВидаПоиска = Неопределено
	                                             Или НомерВидаПоиска >= ЭлементыФормы.СписокВидовПоиска.СписокВыбора.Количество(),
	                                             ЭлементыФормы.СписокВидовПоиска.СписокВыбора[0].Значение,
	                                             ЭлементыФормы.СписокВидовПоиска.СписокВыбора[НомерВидаПоиска].Значение);

	// Покажем соответствующее табличное поле и заполним таблицу номенклатуры текущего родителя.
	ПриИзмененииВидаПодбора(ЭлементыФормы.СписокВидовПодбора.Значение);
	
	мПерезаполнятьТаблицуНоменклатуры = Истина;
	
	УстановитьВидимостьКолонокСОстатками();
	
	Если ПодборПоСправочнику Тогда
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.СправочникНоменклатура;
		УстановитьВидимостьОстатковНаСкладах();
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.НоменклатураДляПодбора;
	КонецЕсли;

	ЭтаФорма.Заголовок = СтруктураИсходныхПараметров.Заголовок;

КонецПроцедуры // ДействияПриОткрытии()

// В зависимости от состояния кнопки Изображение устанавливает соответсвующую страницу панели дерева
//
Процедура ПроверитьВидимостьКартинки()

	Если ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка Тогда
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;

		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);

		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Лево);

		ОбновитьИзображение();
	Иначе
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Право);

		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Лево);

		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Лево;

		ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
	КонецЕсли;

КонецПроцедуры // ПроверитьВидимостьКартинки()

Процедура УстановитьВидимостьКолонокСОстатками()
	
	Если ЗначениеЗаполнено(ЭлементыФормы.СписокВидовПодбора.Значение) Тогда
		Возврат;
	Конецесли;
	
	Если ПоказыватьОстатки Тогда
		ЭлементыФормы.СправочникНоменклатура.Колонки.СвободныйОстаток.Видимость = Истина;
		ЭлементыФормы.СправочникНоменклатура.Колонки.ОстатокОрганизации.Видимость = Истина;
	Иначе
		ЭлементыФормы.СправочникНоменклатура.Колонки.СвободныйОстаток.Видимость = Ложь;
		ЭлементыФормы.СправочникНоменклатура.Колонки.ОстатокОрганизации.Видимость = Ложь;
		СтруктураОстаткиПриВыбореНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	мКоличествоБазовыхКолонокОстаткиТоваров = ЭлементыФормы.ТабличноеПолеОстаткиТоваров.Колонки.Количество();
	// Проверим тип реквизита формы СтруктураПараметровФормы. Должен быть "Структура".
	// При неверном типе не будем запускать подбор.
	Если ТипЗнч(СтруктураИсходныхПараметров) <> Тип("Структура") Тогда
		
		Отказ = Истина;
		Предупреждение("Не верный тип параметра ""СтруктураПараметровФормы""!
		               |Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;

	КонецЕсли;

	РежимВыбора        = Истина;
	ЗакрыватьПриВыборе = Ложь;

	флПоказыватьОстатки  = ВосстановитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.Остатки");

	Если флПоказыватьОстатки = Неопределено Тогда
		флПоказыватьОстатки = Ложь;
	КонецЕсли;                          

	ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Кнопки.ОстаткиТоваровНаСкладах.Пометка = флПоказыватьОстатки;

	ЭлементыФормы.НоменклатураДляПодбора.Колонки.Пиктограмма.ИзменятьНастройку = Ложь;
	ЭлементыФормы.СправочникНоменклатура.Колонки.Наименование.ИзменятьВидимость = Ложь;
	ЭлементыФормы.СправочникНоменклатура.Колонки.Наименование.Видимость = Истина;
	ЭлементыФормы.СправочникНоменклатура.Колонки.Картинка.Видимость = Истина;
	ЭлементыФормы.СправочникНоменклатура.Колонки.Картинка.ИзменятьНастройку = Ложь;

	// восстановление параметров отображения остатков
	ВВалютеЦены = ВосстановитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.ВВалютеЦены");
	ВалютаЦены = ВосстановитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.ВалютаЦены");
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов")
	КонецЕсли;

	Если (ВВалютеЦены = Неопределено) Или НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВВалютеЦены = Истина;
	КонецЕсли;
	ПроверитьДоступностьВалютуЦен();

	СписокПомеченныхЭлементовТиповЦен = ВосстановитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.СписокПомеченныхЭлементовТиповЦен");
	УправлениеЗапасами.ОбновитьСписокТиповЦен(СписокЦенОстатков, СписокПомеченныхЭлементовТиповЦен);

	ПорядокСледованияТиповЦен = ВосстановитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.ПрядокСледованияЭлементовТиповЦен");
	УправлениеЗапасами.УпорядочитьСписокТиповЦен(СписокЦенОстатков, ПорядокСледованияТиповЦен);

	ПерестроитьДеревоОстатков();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	мКнопкаПересчитатьОстаткиВЕдиницуЦены = ЭлементыФормы.КоманднаяПанельНастройкаПодбора.Кнопки.ПересчитатьОстаткиВЕдиницуЦены;

	ЭлементыФормы.ПанельНоменклатураДляПодбора.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ЭлементыФормы.ЗапрашиватьХарактеристику.Видимость              = мИспользоватьХарактеристики;
	ЭлементыФормы.ЗапрашиватьСерию.Видимость                       = мИспользоватьСерии;
	
	ПоказыватьОстатки = ВосстановитьЗначение("ПоказыватьОстаткиПриПодборе");

	// Восстановим значения что надо запрашивать при подборе.
	// Это надо сделать до управления диалогом.
	ЗапрашиватьЦену       = ВосстановитьЗначение("ЗапрашиватьЦенуПриПодборе");
	ЗапрашиватьКоличество = ВосстановитьЗначение("ЗапрашиватьКоличествоПриПодборе");
	ПоказыватьИзображение = ВосстановитьЗначение("ПоказыватьИзображениеПриПодборе");

	Если мИспользоватьХарактеристики Тогда
		ЗапрашиватьХарактеристику = ВосстановитьЗначение("ЗапрашиватьХарактеристикуПриПодборе");
	КонецЕсли;

	Если мИспользоватьСерии Тогда
		ЗапрашиватьСерию          = ВосстановитьЗначение("ЗапрашиватьСериюПриПодборе");
	КонецЕсли;

	Если ПоказыватьИзображение <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка = ПоказыватьИзображение;
	КонецЕсли;

	// Восстановить значения текущего родителя
	ТекущийРодитель = ВосстановитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) + "ТекущийРодитель");
	Если ЗначениеЗаполнено(ТекущийРодитель) Тогда
		УстановитьТекущегоРодителя(ТекущийРодитель);
	КонецЕсли;

	// Восстановить значение пересчета остатков в единицу цены
	ПересчитатьОстаткиВЕдиницуЦены = ВосстановитьЗначение("ПересчитатьОстаткиВЕдиницуЦены");
	ПересчитатьОстаткиВЕдиницуЦены = ?(ТипЗнч(ПересчитатьОстаткиВЕдиницуЦены) = Тип("Булево"), ПересчитатьОстаткиВЕдиницуЦены, Истина);
	мКнопкаПересчитатьОстаткиВЕдиницуЦены.Пометка = ПересчитатьОстаткиВЕдиницуЦены;

	мНужноОбновитьОтображениеОстатков = Истина;
	ДействияПриОткрытии();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии()

	мНужноОбновитьОтображениеОстатков = Истина;
	ДействияПриОткрытии();

КонецПроцедуры // ПриПовторномОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Перем Команда;

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
	СохранитьЗначение("ПоказыватьОстаткиПриПодборе", ПоказыватьОстатки);

	// Сохраним значения что надо запрашивать при подборе.
	// Это надо сделать если могли их менять.
	Если ЭлементыФормы.ЗапрашиватьЦену.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьЦенуПриПодборе", ЗапрашиватьЦену);
	КонецЕсли;

	Если ЭлементыФормы.ЗапрашиватьКоличество.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьКоличествоПриПодборе", ЗапрашиватьКоличество);
	КонецЕсли;

	Если мИспользоватьСерии
	   И ЭлементыФормы.ЗапрашиватьСерию.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьСериюПриПодборе", ЗапрашиватьСерию);
	КонецЕсли;

	Если мИспользоватьХарактеристики
	   И ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьХарактеристикуПриПодборе", ЗапрашиватьХарактеристику);
	КонецЕсли;

	// Сохраним пометку показа изображения.
	СохранитьЗначение("ПоказыватьИзображениеПриПодборе", ЭлементыФормы.КоманднаяПанельИзображения.Кнопки.Изображение.Пометка);

	// Сохраним номер текущего вида подбора.
	СтруктураИсходныхПараметров.Свойство("Команда", Команда);
	ЭлементФормы     = ЭлементыФормы.СписокВидовПодбора;
	НомерВидаПодбора = ЭлементФормы.СписокВыбора.Индекс(
	                   ЭлементФормы.СписокВыбора.НайтиПоЗначению(ЭлементФормы.Значение));
	СохранитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                  + СокрЛП(Команда) + "НомерВидаПодбора", НомерВидаПодбора);

	// Сохраним номер текущего вида поиска.
	ЭлементФормы    = ЭлементыФормы.СписокВидовПоиска;
	НомерВидаПоиска = ЭлементФормы.СписокВыбора.Индекс(
	                  ЭлементФормы.СписокВыбора.НайтиПоЗначению(ЭлементФормы.Значение));
	СохранитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) 
	                  + СокрЛП(Команда) + "НомерВидаПоиска", НомерВидаПоиска);

	// Сохраним структуру видимости колонок таблицы подбора.
	СохранитьЗначение("ВидимостьКолонокПриПодборе", мСтруктураВидимостиКолонокПодбора);

	// Сохранить значения текущего родителя
	СохранитьЗначение(СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) + "ТекущийРодитель", ПолучитьТекущегоРодителя());

	// Сохранить значение пересчета остатков в единицу цены
	СохранитьЗначение("ПересчитатьОстаткиВЕдиницуЦены", мКнопкаПересчитатьОстаткиВЕдиницуЦены.Пометка);

	СохранитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.Остатки", ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Кнопки.ОстаткиТоваровНаСкладах.Пометка);
	// сохранение параметров отображения остатков
	СохранитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.ВВалютеЦены", ВВалютеЦены);
	СохранитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.ВалютаЦены", ВалютаЦены);

	// список элементов СписокЦенОстатков помеченных галочками
	ПорядокСледованияТиповЦен = Новый Массив;
	ПорядокСледованияТиповЦен = СписокЦенОстатков.ВыгрузитьКолонку("Ссылка");
	СохранитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.ПрядокСледованияЭлементовТиповЦен", ПорядокСледованияТиповЦен);
	СохранитьЗначение("Обработки.ПодборНоменклатуры.ОсновнаяФорма.СписокПомеченныхЭлементовТиповЦен", мСписокПрефиксовЦен);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	Если мТекущийЭлементФормы <> Неопределено Тогда
		ТекущийЭлемент = мТекущийЭлементФормы;
		мТекущийЭлементФормы = Неопределено;
	КонецЕсли;
	
	Если мНужноОбновитьОтображениеОстатков Тогда
		УстановитьВидимостьОстатковНаСкладах();
		мНужноОбновитьОтображениеОстатков = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанЭлементНоменклатуры" Тогда
		ОбновитьИзображение();
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.СправочникНоменклатура.ТекущаяСтрока = Номенклатура;
		мТекущийЭлементФормы                               = ЭлементыФормы.СправочникНоменклатура;
	Иначе
		СтрокаНоменклатуры = НоменклатураДляПодбора.Найти(Номенклатура, "Номенклатура");
		Если СтрокаНоменклатуры = Неопределено Тогда
			Предупреждение("Найденная номенклатура отсутствует в подборе при заданных условиях!");
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат Результат;
		Иначе
			ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = СтрокаНоменклатуры;
		КонецЕсли;
		мТекущийЭлементФормы = ЭлементыФормы.НоменклатураДляПодбора;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Очистка" поля выбора списка видов подбора.
//
Процедура СписокВидовПодбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Не будем давать очищать значение.
	
КонецПроцедуры // СписокВидовПодбораОчистка()

// Процедура - обработчик события "ПриИзменении" поля выбора списка видов поиска.
//
Процедура СписокВидовПоискаПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.СписокВидовПоиска.Значение) Тогда
		ЭлементыФормы.СписокВидовПоиска.Значение = ЭлементыФормы.СписокВидовПоиска.СписокВыбора[0].Значение;
	КонецЕсли;

	ВыполнитьПоиск();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода шаблона поиска.
//
Процедура ПолеПоискаПриИзменении(Элемент)

	ВыполнитьПоиск();

КонецПроцедуры // ПолеПоискаПриИзменении()

// Процедура - обработчик события "Открытие" поля ввода шаблона поиска.
//
Процедура ПолеПоискаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыполнитьПоиск();

КонецПроцедуры // ПолеПоискаОткрытие()

// Процедура - обработчик события "Нажатие" кнопки "Обновить".
//
Процедура КнопкаОбновитьНажатие(Элемент)
	Перем ТекущаяСтрока, НомерСтроки;
	
	//ЭтаФорма.Заголовок = ПолучитьЗаголовокОкна();
	
	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПодборПоСправочнику = НЕ ЗначениеЗаполнено(СтруктураЗапроса);
	
	Если ПодборПоСправочнику Тогда
		
		СписокВидовПодбораПриИзменении(ЭлементыФормы.СписокВидовПодбора);
		
	Иначе
		
		НомерСтроки = 1;
		Если НЕ ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные = Неопределено Тогда
			НомерСтроки = ЭлементыФормы.НоменклатураДляПодбора.ТекущиеДанные.НомерСтроки;
		КонецЕсли;
		
		ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
		
		Если НоменклатураДляПодбора.Количество() > 0 Тогда
			НомерСтроки = Мин(НоменклатураДляПодбора.Количество() - 1 , НомерСтроки - 1);
			ТекущаяСтрока = НоменклатураДляПодбора.Получить(НомерСтроки);
			ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КнопкаОбновитьНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты расчетов.
//
Процедура ДатаРасчетовПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ДатаРасчетов) Тогда
		СтруктураИсходныхПараметров.Свойство("ДатаРасчетов", ДатаРасчетов);
	КонецЕсли;

	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

КонецПроцедуры // ДатаРасчетовПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода даты расчетов.
//
Процедура ДатаРасчетовОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ДатаРасчетовОчистка()

// Процедура - обработчик события "Выбор" табличного поля дерева номенклатуры.
//
Процедура ДеревоНоменклатурыВыбор(Элемент, ВыбРодитель, Колонка, СтандартнаяОбработка)

	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(ВыбРодитель, СтруктураЗапроса);

КонецПроцедуры // ДеревоНоменклатурыВыбор()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля таблицы номенклатуры.
//
Процедура НоменклатураДляПодбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеЯчейки  = ОформлениеСтроки.Ячейки;
	ЯчейкаПиктограмма = ОформлениеЯчейки.Пиктограмма;
	ЯчейкаПиктограмма.ОтображатьКартинку = Истина;

	Если ДанныеСтроки.ЭтоГруппа Тогда

		ЯчейкаПиктограмма.ИндексКартинки = 0; // группа
		Если ДанныеСтроки.ПереходитьВверх Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;

	Иначе

		Если ДанныеСтроки.Набор Тогда
			Если ДанныеСтроки.ПометкаУдаления Тогда
				ЯчейкаПиктограмма.Картинка = мКартинкаНаборУдален;
			Иначе
				ЯчейкаПиктограмма.Картинка = мКартинкаНабор;
			КонецЕсли;
		Иначе
			ЯчейкаПиктограмма.ИндексКартинки = 1; // элемент
		КонецЕсли;

	КонецЕсли;

	// Выделим цветом те цены, которые заданы особыми условиями поставок
	Если ДанныеСтроки.ФлагУсловийПоставки Тогда
		ОформлениеЯчейки.Цена.ЦветФона = WebЦвета.Лимонный;
	КонецЕсли;

	// Выделим цветом минимальный остаток из свободного остатка и остатка по организации
	Если ДанныеСтроки.КоличествоСвободныйОстаток < ДанныеСтроки.КоличествоОстатокОрганизации Тогда
		ОформлениеЯчейки.КоличествоСвободныйОстаток.ЦветТекста = WebЦвета.ТемноСиний;
	ИначеЕсли ДанныеСтроки.КоличествоСвободныйОстаток > ДанныеСтроки.КоличествоОстатокОрганизации Тогда
		ОформлениеЯчейки.КоличествоОстатокОрганизации.ЦветТекста = WebЦвета.ТемноСиний;
	КонецЕсли;

	// Установка текста ссылочного значения по представлению
	Если мКолонкаНоменклатура.Видимость Тогда
		ОформлениеЯчейки.Номенклатура.УстановитьТекст(ДанныеСтроки.ПредставлениеНоменклатура);
	КонецЕсли;

	Если мКолонкаХарактеристикаНоменклатуры.Видимость Тогда
		ОформлениеЯчейки.ХарактеристикаНоменклатуры.УстановитьТекст(ДанныеСтроки.ПредставлениеХарактеристикаНоменклатуры);
	КонецЕсли;

	Если мКолонкаСерияНоменклатуры.Видимость Тогда
		ОформлениеЯчейки.СерияНоменклатуры.УстановитьТекст(ДанныеСтроки.ПредставлениеСерияНоменклатуры);
	КонецЕсли;

	Если мКолонкаЕдиницаИзмерения.Видимость Тогда
		ОформлениеЯчейки.ЕдиницаИзмерения.УстановитьТекст(ДанныеСтроки.ПредставлениеЕдиницаИзмерения);
	КонецЕсли;

	Если мКолонкаВалюта.Видимость Тогда
		ОформлениеЯчейки.Валюта.УстановитьТекст(ДанныеСтроки.ПредставлениеВалюта);
	КонецЕсли;

	Если мКолонкаСклад.Видимость Тогда
		ОформлениеЯчейки.Склад.УстановитьТекст(ДанныеСтроки.ПредставлениеСклад);
	КонецЕсли;

	Если мКолонкаКачество.Видимость Тогда
		ОформлениеЯчейки.Качество.УстановитьТекст(ДанныеСтроки.ПредставлениеКачество);
	КонецЕсли;

КонецПроцедуры // НоменклатураДляПодбораПриВыводеСтроки()

// Процедура - обработчик события "Выбор" табличного поля таблицы номенклатуры.
//
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбСтрока, Колонка, СтандартнаяОбработка)

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Лимит, ВалютаЦены, Характеристика, Серия, СпособЗаполненияЦен, Качество, РассчитыватьЦену;
	Перем СтруктураПараметров;
	Перем Команда, СтруктураПодбора;
	Перем Склад, ТипЦен, ДоговорКонтрагента, УсловиеПродаж, ЕстьСкладВТабличнойЧасти;

	СтруктураИсходныхПараметров.Свойство("ТипЦен",              ТипЦен);
	СтруктураИсходныхПараметров.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураИсходныхПараметров.Свойство("Склад",               Склад);
	СтруктураИсходныхПараметров.Свойство("Команда",             Команда);

	СтруктураИсходныхПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураИсходныхПараметров.Свойство("УсловиеПродаж", УсловиеПродаж);

	Если НЕ СтруктураИсходныхПараметров.Свойство("РассчитыватьЦены", РассчитыватьЦену) Тогда
		РассчитыватьЦену = Истина;
	КонецЕсли;
	
	Если СтруктураИсходныхПараметров.Свойство("ЕстьСкладВТабличнойЧасти") Тогда
		СтруктураИсходныхПараметров.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);
	Иначе
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	ДатаЦены             = ДатаРасчетов;
	СтандартнаяОбработка = Ложь;
	
	// Инициализируем структуру выбранной строки (реквизиты обработки).
	Если ПодборПоСправочнику Тогда

		Если ВыбСтрока.ЭтоГруппа Тогда
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;

		Номенклатура     = ВыбСтрока;
		ЕдиницаИзмерения = Неопределено;

		// Получим Цену
		Цена = 0;
		Если РассчитыватьЦену Тогда
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
				Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДатаЦены, Номенклатура, , ЕдиницаИзмерения, Склад, УсловиеПродаж);
			ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
				Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Номенклатура, , Склад,,ДатаЦены,,,,);
			Иначе
				Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
					Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
						Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, , СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,,, ДоговорКонтрагента, УсловиеПродаж);
					ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
						Цена = Ценообразование.ПолучитьЦенуКонтрагента(Номенклатура, , СтруктураИсходныхПараметров.Контрагент,
						                               СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,, ДоговорКонтрагента, УсловиеПродаж);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли;

		Лимит          = 0;
		ВалютаЦены     = ?(НЕ ЗначениеЗаполнено(ВалютаЦены), ?(СтруктураИсходныхПараметров.Свойство("ВалютаДокумента"), СтруктураИсходныхПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета), ВалютаЦены);
		Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Серия          = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Качество       = ?(СтруктураИсходныхПараметров.Свойство("КачествоПоУмолчанию"), СтруктураИсходныхПараметров.КачествоПоУмолчанию, Справочники.Качество.Новый);
		
	Иначе // подбор по запросу

		Если НЕ ЗначениеЗаполнено(ВыбСтрока) Тогда
			Возврат;
		КонецЕсли;

		Если ВыбСтрока.Номенклатура.ЭтоГруппа Тогда
			Родитель         = ?(ВыбСтрока.ПереходитьВверх, ВыбСтрока.Номенклатура.Родитель, ВыбСтрока.Номенклатура);
			СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;

			ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
			Возврат;
		КонецЕсли;

		Номенклатура     = ВыбСтрока.Номенклатура;
		ЕдиницаИзмерения = ВыбСтрока.ЕдиницаИзмерения;
		Цена             = ?(РассчитыватьЦену, ВыбСтрока.Цена, 0);
		Лимит            = ВыбСтрока.Лимит;
		ВалютаЦены       = ВыбСтрока.Валюта;
		Характеристика   = ВыбСтрока.ХарактеристикаНоменклатуры;
		Склад            = ВыбСтрока.Склад;
		Серия            = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Качество         = ?(ЗначениеЗаполнено(ВыбСтрока.Качество),ВыбСтрока.Качество,Неопределено);

		Если РассчитыватьЦену И Цена = 0 Тогда
			// Получим Цену
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
				Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДатаЦены, Номенклатура, , ЕдиницаИзмерения, Склад, УсловиеПродаж);
			ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
				Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Номенклатура, , Склад,,ДатаЦены,,,,);
			Иначе
				Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
					Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
						Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,,, ДоговорКонтрагента, УсловиеПродаж);
					ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
						Цена = Ценообразование.ПолучитьЦенуКонтрагента(Номенклатура, Характеристика, СтруктураИсходныхПараметров.Контрагент,
						                               СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, ЕдиницаИзмерения, ВалютаЦены,,, ДоговорКонтрагента, УсловиеПродаж);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			Цена       = 0;
			ВалютаЦены = ?(СтруктураИсходныхПараметров.Свойство("ВалютаДокумента"), СтруктураИсходныхПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;

	// Для тары пересчитываем цену в единицу хранения
	Если Команда = "ПодборВТабличнуюЧастьВозвратнаяТара"
	   И ЗначениеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) И ЗначениеЗаполнено(ЕдиницаИзмерения)
	   И Номенклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 И ЕдиницаИзмерения.Коэффициент <> 0 Тогда
	
		Цена = Окр((Цена * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕдиницаИзмерения.Коэффициент), 2);
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;

	Количество = 1;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;

	Если ЗапрашиватьКоличество Или ЗапрашиватьЦену
	 Или (ЗапрашиватьСерию И Номенклатура.ВестиУчетПоСериям)
	 Или (ЗапрашиватьХарактеристику И Номенклатура.ВестиУчетПоХарактеристикам) Тогда

		ИмяФормыВводаПараметров = "ВводПараметров";

		Если ЗапрашиватьСерию И Номенклатура.ВестиУчетПоСериям Тогда
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "ССериями";
		Иначе
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "БезСерий";
		КонецЕсли;

		Если ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность
		   И ЗапрашиватьХарактеристику
		   И Номенклатура.ВестиУчетПоХарактеристикам Тогда
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "СХарактеристиками";
		Иначе
			ИмяФормыВводаПараметров = ИмяФормыВводаПараметров + "БезХарактеристик";
		КонецЕсли;

		ФормаВводПараметров = ПолучитьФорму(ИмяФормыВводаПараметров, ЭтаФорма);

		ФормаВводПараметров.Номенклатура     = Номенклатура;
		ФормаВводПараметров.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ФормаВводПараметров.Количество       = Количество;
		ФормаВводПараметров.Характеристика   = Характеристика;
		ФормаВводПараметров.Цена             = Цена;
		ФормаВводПараметров.ВалютаЦены       = ВалютаЦены;
		ФормаВводПараметров.ДатаРасчетов     = ДатаРасчетов;
		Если ЗапрашиватьСерию И Номенклатура.ВестиУчетПоСериям Тогда
			ФормаВводПараметров.Качество         = Качество;
		КонецЕсли;

		Если ЭлементыФормы.ЗапрашиватьХарактеристику.Доступность
		   И ЗапрашиватьХарактеристику
		   И Номенклатура.ВестиУчетПоХарактеристикам Тогда

			ТаблицаХарактеристикНоменклатуры = ФормаВводПараметров.ТаблицаХарактеристикНоменклатуры;
			ТаблицаХарактеристикНоменклатуры.Очистить();
			МассивСтрокИзПодбора = Новый Массив();

			Если НЕ ПодборПоСправочнику Тогда
				МассивСтрокИзПодбора = НоменклатураДляПодбора.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
			КонецЕсли;
			
			Для каждого строкаИзПодбора Из МассивСтрокИзПодбора Цикл
				НоваяСтрока = ТаблицаХарактеристикНоменклатуры.Добавить();
				НоваяСтрока.Характеристика               = строкаИзПодбора.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения             = строкаИзПодбора.ЕдиницаИзмерения;
				НоваяСтрока.Цена                         = строкаИзПодбора.Цена;
				НоваяСтрока.ВалютаЦены                   = строкаИзПодбора.Валюта;
				НоваяСтрока.Качество                     = строкаИзПодбора.Качество;
			КонецЦикла;
		Иначе
			// Для тары блокируем изменение единицы измерения
			Если Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
				ФормаВводПараметров.ЭлементыФормы.ЕдиницаИзмерения.ТолькоПросмотр = Истина;
			КонецЕсли;

			// Для набора блокируем изменение цены
			Если Номенклатура.Набор Тогда
				ФормаВводПараметров.ЭлементыФормы.Цена.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;

		СтруктураПараметров = ФормаВводПараметров.ОткрытьМодально();

		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			СтруктураПараметров.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураПараметров.Свойство("Количество"      , Количество);
			СтруктураПараметров.Свойство("Цена"            , Цена);
			СтруктураПараметров.Свойство("Лимит"           , Лимит);
			СтруктураПараметров.Свойство("Серия"           , Серия);

			Если ПодборПоСправочнику Тогда
				СтруктураПараметров.Свойство("Характеристика" , Характеристика);
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураПараметров) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из СтруктураПараметров Цикл
				ЭлементМассива.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
				ЭлементМассива.Свойство("Количество",       Количество);
				ЭлементМассива.Свойство("Цена",             Цена);
				ЭлементМассива.Свойство("ВалютаЦены",       ВалютаЦены);
				ЭлементМассива.Свойство("Лимит",            Лимит);
				ЭлементМассива.Свойство("Серия",            Серия);
				ЭлементМассива.Свойство("Качество",         Качество);
				ЭлементМассива.Свойство("Характеристика",   Характеристика);

				СтруктураПодбора = Новый Структура();
				СтруктураПодбора.Вставить("Команда",                  Команда);
				СтруктураПодбора.Вставить("ВалютаЦены",               ВалютаЦены);
				СтруктураПодбора.Вставить("Номенклатура",             Номенклатура);
				СтруктураПодбора.Вставить("ЕдиницаИзмерения",         ЕдиницаИзмерения);
				СтруктураПодбора.Вставить("Характеристика",           Характеристика);
				СтруктураПодбора.Вставить("Серия",                    Серия);
				СтруктураПодбора.Вставить("Качество",                 Качество);
				СтруктураПодбора.Вставить("Склад",                    Склад);
				СтруктураПодбора.Вставить("Лимит",                    Лимит);
				СтруктураПодбора.Вставить("СпособЗаполненияЦен",      СпособЗаполненияЦен);
				СтруктураПодбора.Вставить("Цена",                     Цена);
				СтруктураПодбора.Вставить("Количество",               Количество);
				СтруктураПодбора.Вставить("ЗапрашиватьЦену",          ЗапрашиватьЦену);
				СтруктураПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);

				ОповеститьОВыборе(СтруктураПодбора);
			КонецЦикла;
			Возврат;
		Иначе
			Возврат; // форма ввода количества(количества и цены) закрыта не по кнопке "ОК"
		КонецЕсли;
	КонецЕсли;

	// Оповестим о выборе документ, инициировавший подбор.
	Если Номенклатура.Набор Тогда

		СтруктураИсходныхПараметров.Свойство("Склад",               Склад);

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("Номенклатура",               Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Характеристика);
		Запрос.УстановитьПараметр("Коэффициент",                ЕдиницаИзмерения.Коэффициент);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения",           ЕдиницаИзмерения);
		Запрос.УстановитьПараметр("Количество",                 Количество);

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	КомплектующиеНоменклатуры.Комплектующая                             КАК Номенклатура,
		|	КомплектующиеНоменклатуры.ХарактеристикаКомплектующей               КАК Характеристика,
		|	(КомплектующиеНоменклатуры.Количество * &Коэффициент * &Количество) КАК Количество,
		|	КомплектующиеНоменклатуры.ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|
		|ГДЕ
		|	КомплектующиеНоменклатуры.Номенклатура = &Номенклатура И
		|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
		|";

		Выборка = Запрос.Выполнить().Выбрать();

		// Надо передать в форму каждую составляющую набора
		Пока Выборка.Следующий() Цикл

			// Получим Цену
			Цена = 0;
			Если РассчитыватьЦену Тогда
				Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам Тогда
					Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(ДатаЦены, Выборка.Номенклатура, , Выборка.ЕдиницаИзмерения, Склад, УсловиеПродаж);
				ИначеЕсли СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
					Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(Номенклатура, , Склад,,ДатаЦены,,,,);
				Иначе
					Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
						Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
							Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,
							                              СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, Выборка.ЕдиницаИзмерения, ВалютаЦены,,,, ДоговорКонтрагента, УсловиеПродаж);
						ИначеЕсли ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
							Цена = Ценообразование.ПолучитьЦенуКонтрагента(Выборка.Номенклатура, Выборка.Характеристика, СтруктураИсходныхПараметров.Контрагент,
							                              СтруктураИсходныхПараметров.ТипЦен, ДатаЦены, Выборка.ЕдиницаИзмерения, ВалютаЦены,,, ДоговорКонтрагента, УсловиеПродаж);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			СтруктураПодбора = Новый Структура();
			СтруктураПодбора.Вставить("Команда",                  Команда);
			СтруктураПодбора.Вставить("ВалютаЦены",               ВалютаЦены);
			СтруктураПодбора.Вставить("Номенклатура",             Выборка.Номенклатура);
			СтруктураПодбора.Вставить("ЕдиницаИзмерения",         Выборка.ЕдиницаИзмерения);
			СтруктураПодбора.Вставить("Характеристика",           Выборка.Характеристика);
			СтруктураПодбора.Вставить("Серия",                    Справочники.СерииНоменклатуры.ПустаяСсылка());
			СтруктураПодбора.Вставить("Качество",                 ?(СтруктураИсходныхПараметров.Свойство("КачествоПоУмолчанию"), СтруктураИсходныхПараметров.КачествоПоУмолчанию, Справочники.Качество.Новый));
			СтруктураПодбора.Вставить("Склад",                    Склад);
			СтруктураПодбора.Вставить("СпособЗаполненияЦен",      СпособЗаполненияЦен);
			СтруктураПодбора.Вставить("Лимит",                    0);
			СтруктураПодбора.Вставить("Цена",                     Цена);
			СтруктураПодбора.Вставить("Количество",               Выборка.Количество);
			СтруктураПодбора.Вставить("ЗапрашиватьЦену",          ЗапрашиватьЦену);
			СтруктураПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);

			ОповеститьОВыборе(СтруктураПодбора);
		КонецЦикла;
	Иначе

		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Команда",                  Команда);
		СтруктураПодбора.Вставить("ВалютаЦены",               ВалютаЦены);
		СтруктураПодбора.Вставить("Номенклатура",             Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",         ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",           Характеристика);
		СтруктураПодбора.Вставить("Серия",                    Серия);
		СтруктураПодбора.Вставить("Качество",                 Качество);
		СтруктураПодбора.Вставить("Склад",                    Склад);
		СтруктураПодбора.Вставить("Лимит",                    Лимит);
		СтруктураПодбора.Вставить("СпособЗаполненияЦен",      СпособЗаполненияЦен);
		СтруктураПодбора.Вставить("Цена",                     Цена);
		СтруктураПодбора.Вставить("Количество",               Количество);
		СтруктураПодбора.Вставить("ЗапрашиватьЦену",          ЗапрашиватьЦену);
		СтруктураПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);

		ОповеститьОВыборе(СтруктураПодбора);
	КонецЕсли;

КонецПроцедуры // ТаблицаНоменклатурыВыбор()

// Процедура - обработчик события "ПриПолученииДанных" табличного поля таблицы номенклатуры.
//
Процедура СправочникНоменклатураПриПолученииДанных(Элемент, ОформленияСтрок)

	Перем Организация, Склад;

	СтруктураИсходныхПараметров.Вставить("РезультатПодборПоЗапросу", Неопределено);

	МассивНоменклатуры = Новый Массив;

	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.Набор = Истина Тогда
			Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
				ОформлениеСтроки.Ячейки.Картинка.УстановитьКартинку(мКартинкаНаборУдален);
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.УстановитьКартинку(мКартинкаНабор);
			КонецЕсли;
		КонецЕсли;

		Если Не ОформлениеСтроки.ДанныеСтроки.ЭтоГруппа Тогда
			МассивНоменклатуры.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ЭлементыФормы.СписокВидовПодбора.Значение)
	 Или Не ПоказыватьОстатки
	 Или МассивНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураИсходныхПараметров.Свойство("Организация", Организация);
	СтруктураИсходныхПараметров.Свойство("Склад", Склад);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ДобавитьВременнуюТаблицу(Запрос);

	//Если УчитыватьЗаказ["СтруктураЗаказов"] равен Неопределено значит в запросе не нужно считать по заказам в резерве
	//иначе нужно считать заказы в резерве
	УчитыватьЗаказ = ПолучитьСтруктуруЗаказовВРезерве();
	ДокументРезерва = Неопределено;
	ВидРегистраПлюсСвободныйОстаток = Неопределено;
	УчитыватьЗаказ.Свойство("ДокументРезерва"                , ДокументРезерва);
	УчитыватьЗаказ.Свойство("ВидРегистраПлюсСвободныйОстаток", ВидРегистраПлюсСвободныйОстаток);
	СтруктураЗаказов = УчитыватьЗаказ["СтруктураЗаказов"];
	ЗаказИзШапки = УчитыватьЗаказ["ЗаказИзШапки"];

	Запрос.УстановитьПараметр("ДокументРезерва"        , ДокументРезерва);
	Запрос.УстановитьПараметр("Дата"                   , ДатаРасчетов);
	Запрос.УстановитьПараметр("МассивНоменклатуры"     , МассивНоменклатуры);
	Запрос.УстановитьПараметр("Склад"                  , Склад);
	Запрос.УстановитьПараметр("Организация"            , Организация);
	Запрос.УстановитьПараметр("РазворачиватьДоКачества", РазворачиватьДоКачества);

	СформироватьОтборыДляЗапросов(Новый Структура("Организация, Склад, ДатаЗапроса, МассивНоменклатуры", Организация, Склад, ДатаРасчетов, МассивНоменклатуры), Истина);
	СтруктураЗапросаОстаткиНоменклатурыСХарактеристиками(ДатаРасчетов, СтруктураИсходныхПараметров, Новый Структура("ПоказыватьОстатки,ПоказыватьКолонки", Истина, ЭлементыФормы.ПоказыватьОстатки.Значение), РазворачиватьДоКачества);

	ТекстУсловияКачества = " И ВЫБОР КОГДА &РазворачиватьДоКачества ТОГДА ИСТИНА ИНАЧЕ Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый) КОНЕЦ";

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыНаСкладах.Номенклатура                                КАК Номенклатура,
	|	СУММА(  ЕСТЬNULL(ТоварыНаСкладах.КоличествоОстаток, 0.00)
	|	      - ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0.00)
	|	      - ЕСТЬNULL(ТоварыКПередачеСоСкладов.КоличествоОстаток, 0.00)
	|	      " + ?(СтруктураЗаказов = Неопределено,"","+ ЕСТЬNULL(ТоварыВРезерве.КоличествоОстаток, 0.00)") + "
	|	)                                                           КАК КоличествоСвободныйОстаток,
	|	СУММА(ЕСТЬNULL(ОстаткиОрганизации.КоличествоОстаток, 0.00)) КАК КоличествоОстатокОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбщиеОстатки.Номенклатура               КАК Номенклатура,
	|		ОбщиеОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ОбщиеОстатки.Качество                   КАК Качество,
	|		СУММА(ОбщиеОстатки.КоличествоОстаток)   КАК КоличествоОстаток
	|	ИЗ
	|		(";
	ТекстЗапроса = ТекстЗапроса + ПолучитьСтрокуЗапросаСвободныеОстатки(Новый Структура("ТоварыНаСкладах,ТоварыВРознице,ТоварыОрганизаций,ТоварыВНТТ"), ТекстУсловияКачества, Истина);
	ТекстЗапроса = ТекстЗапроса + "
	|		) КАК ОбщиеОстатки
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОбщиеОстатки.Номенклатура, ОбщиеОстатки.ХарактеристикаНоменклатуры, ОбщиеОстатки.Качество
	|	) КАК ТоварыНаСкладах
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата, " + мУсловиеНоменклатураСклад + ") КАК ТоварыВРезервеНаСкладах
	|ПО
	|	ТоварыВРезервеНаСкладах.Номенклатура = ТоварыНаСкладах.Номенклатура
	|	И ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
	|	И ТоварыНаСкладах.Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)";
	Если НЕ СтруктураЗаказов = Неопределено Тогда
		Если ЗаказИзШапки Тогда
			Если ВидРегистраПлюсСвободныйОстаток = "ТоварыВРезервеНаСкладах" Тогда
				ТекстЗапроса = ТекстЗапроса +"
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата, " + мУсловиеНоменклатураСклад + " И ДокументРезерва = &ДокументРезерва) КАК ТоварыВРезерве
				|ПО
				|	ТоварыВРезерве.Номенклатура = ТоварыНаСкладах.Номенклатура
				|	И ТоварыВРезерве.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
				|	И ТоварыНаСкладах.Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)
				|";
			ИначеЕсли ВидРегистраПлюсСвободныйОстаток = "ТоварыКПередачеСоСкладов" Тогда
				ТекстЗапроса = ТекстЗапроса +"
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&Дата, " + мУсловиеНоменклатураСклад + " И ДокументПередачи = &ДокументРезерва) КАК ТоварыВРезерве
				|ПО ТоварыВРезерве.Номенклатура = ТоварыНаСкладах.Номенклатура
				|	И ТоварыВРезерве.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
				|	И ТоварыВРезерве.Качество = ТоварыНаСкладах.Качество
				|";
			КонецЕсли;
		Иначе
			//временная таблица товаров в резерве
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТоварыВРезервеНаСкладах.Номенклатура               КАК Номенклатура,
			|	ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
			|	СУММА(ТоварыВРезервеНаСкладах.КоличествоОстаток)   КАК КоличествоОстаток
			|ПОМЕСТИТЬ ТоварыВРезерве
			|ИЗ
			|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата, " + мУсловиеНоменклатураСклад + ") КАК ТоварыВРезервеНаСкладах
			|ЛЕВОЕ СОЕДИНЕНИЕ
			//
			|	ЗаказыТаблицаНоменклатура КАК ЗаказаноПоДокументуЗаказ
			//
			|ПО
			|	ЗаказаноПоДокументуЗаказ.Номенклатура = ТоварыВРезервеНаСкладах.Номенклатура
			|	И ЗаказаноПоДокументуЗаказ.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
			|	И ЗаказаноПоДокументуЗаказ.ДокументРезерва = ТоварыВРезервеНаСкладах.ДокументРезерва
			|ГДЕ
			|	НЕ ЗаказаноПоДокументуЗаказ.ДокументРезерва ЕСТЬ NULL
			|	ИЛИ ТоварыВРезервеНаСкладах.ДокументРезерва = &ДокументРезерва
			|СГРУППИРОВАТЬ ПО ТоварыВРезервеНаСкладах.Номенклатура, ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО ТоварыВРезервеНаСкладах.Номенклатура, ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры
			|";
			Запрос.Выполнить();

			ТекстЗапроса = ТекстЗапроса +"
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	ТоварыВРезерве КАК ТоварыВРезерве
			|ПО
			|	ТоварыВРезерве.Номенклатура = ТоварыНаСкладах.Номенклатура
			|	И ТоварыВРезерве.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
			|	И ТоварыНаСкладах.Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)
			|";
		КонецЕсли;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&Дата, " + мУсловиеНоменклатураСклад + ТекстУсловияКачества + ") КАК ТоварыКПередачеСоСкладов
	|ПО
	|	ТоварыКПередачеСоСкладов.Номенклатура = ТоварыНаСкладах.Номенклатура
	|	И ТоварыКПередачеСоСкладов.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
	|	И ТоварыКПередачеСоСкладов.Качество = ТоварыНаСкладах.Качество
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, " + мУсловиеНоменклатураСкладОрганизация + ТекстУсловияКачества + ") КАК ОстаткиОрганизации
	|ПО
	|	ОстаткиОрганизации.Номенклатура = ТоварыНаСкладах.Номенклатура
	|	И ОстаткиОрганизации.ХарактеристикаНоменклатуры = ТоварыНаСкладах.ХарактеристикаНоменклатуры
	|	И ОстаткиОрганизации.Качество = ТоварыНаСкладах.Качество
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладах.Номенклатура
	|";
	Запрос.Текст = ТекстЗапроса;

	РезультатЗапроса = Запрос.Выполнить();
	СтруктураИсходныхПараметров.Вставить("РезультатПодборПоЗапросу", РезультатЗапроса);
	ТаблицаОстатков = РезультатЗапроса.Выгрузить();

	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		НайденнаяСтрока = ТаблицаОстатков.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ОформлениеСтроки.Ячейки.СвободныйОстаток.УстановитьТекст(Формат(НайденнаяСтрока.КоличествоСвободныйОстаток,"ЧО="));
			ОформлениеСтроки.Ячейки.ОстатокОрганизации.УстановитьТекст(Формат(НайденнаяСтрока.КоличествоОстатокОрганизации,"ЧО="));
			
			// Выделим цветом минимальный остаток из свободного остатка и остатка по организации
			Если НайденнаяСтрока.КоличествоСвободныйОстаток < НайденнаяСтрока.КоличествоОстатокОрганизации Тогда
				ОформлениеСтроки.Ячейки.СвободныйОстаток.ЦветТекста = WebЦвета.ТемноСиний;
			ИначеЕсли НайденнаяСтрока.КоличествоСвободныйОстаток > НайденнаяСтрока.КоличествоОстатокОрганизации Тогда
				ОформлениеСтроки.Ячейки.ОстатокОрганизации.ЦветТекста = WebЦвета.ТемноСиний;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы НоменклатураДляПодбора.
//
Процедура НоменклатураДляПодбораПриАктивизацииСтроки(Элемент)

    ПодключитьОбработчикОжидания("ОбработчикОжиданияНоменклатураДляПодбораПриАктивизацииСтроки", 0.1, Истина);	 
 
КонецПроцедуры // НоменклатураДляПодбораПриАктивизацииСтроки

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля НоменклатураДляПодбора
//
Процедура ОбработчикОжиданияНоменклатураДляПодбораПриАктивизацииСтроки()
    
    ОбновитьИзображение();
    
КонецПроцедуры // ОбработчикОжиданияНоменклатураДляПодбораПриАктивизацииСтроки

 
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияСправочникНоменклатураПриАктивизацииСтроки", 0.1, Истина);	 
    
КонецПроцедуры // СправочникНоменклатураПриАктивизацииСтроки

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля СправочникНоменклатура
//
Процедура ОбработчикОжиданияСправочникНоменклатураПриАктивизацииСтроки()
    
    ОбновитьИзображение();
	ПоказатьОстаткиТоваров();
    
КонецПроцедуры // ОбработчикОжиданияСправочникНоменклатураПриАктивизацииСтроки

 
// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)

	ЭтаФорма.Активизировать();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы СписокВидовПодбора.
//
Процедура СписокВидовПодбораПриИзменении(Элемент)

	мНужноОбновитьОтображениеОстатков = Истина;
	УстановитьВидимостьОстатковНаСкладах();
	// Покажем соответствующее табличное поле и заполним таблицу номенклатуры текущего родителя.
	ПриИзмененииВидаПодбора(Элемент.Значение, Ложь);
	ПоказатьОстаткиТоваров();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатурнаяГруппа.
//
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы НоменклатурнаяГруппа.
//
Процедура НоменклатурнаяГруппаОчистка(Элемент, СтандартнаяОбработка)

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры

Процедура ДействияФормыИзображение(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;

	ПроверитьВидимостьКартинки();

КонецПроцедуры

// Процедура - обработчик "При изменении флажка" у табличного поля СписокЦенОстатков
Процедура СписокЦенОстатковПриИзмененииФлажка(Элемент, Колонка)

	КолонкаВДеревеОстатков = Неопределено;
	// если добавилась новая колонка
	Если Элемент.ТекущиеДанные.Пометка Тогда
		// а может колонка то есть в дереве, а в таблице она не отображается 
		КолонкаВДеревеОстатков = ОстаткиТоваров.Колонки.Найти(Элемент.ТекущиеДанные.Префикс + "Цена");

		Если КолонкаВДеревеОстатков = Неопределено Тогда
			// поля в дереве нет - надо все пересчитать
			ОстаткиТоваров = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
		КонецЕсли;
		// обновляем суммы
		ПоказатьОстаткиТоваров();

	КонецЕсли;

	мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);

	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);//мКоличествоБазовыхКолонокОстаткиТоваров
	
КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Пересчитывать остатки в единицу измерения цены"
Процедура КоманднаяПанельНастройкаПодбораПересчитатьОстаткиВЕдиницуЦены(Кнопка)

	Кнопка.Пометка   = НЕ Кнопка.Пометка;
	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Пометить все типы цен"
Процедура КоманднаяПанельТипыЦенДействие(Кнопка)

	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Истина);
	ПерестроитьДеревоОстатков();

КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Отменить пометку всех типов цен"
Процедура КоманднаяПанельТипыЦенОтменитьВсе(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Ложь);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура - обработчик  "При Изменении" поля выбора ВыборТипаРасчетаВалюты
Процедура ВыборТипаРасчетаВалютыПриИзменении(Элемент)
	
	ПроверитьДоступностьВалютуЦен();
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик  "При Изменении" поля ввода ВалютаЦены
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик события ПриВыводеСтроки элемента управления ТабличноеПолеОстаткиТоваров.
//
Процедура ТабличноеПолеОстаткиТоваровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиБезЦены(Элемент, ОформлениеСтроки, ДанныеСтроки, Истина, ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные);
	РаботаСДиалогами.ПриВыводеСуммОстатковНоменклатуры(ОформлениеСтроки, ДанныеСтроки, мСписокПрефиксовЦен, ВВалютеЦены);
	
КонецПроцедуры

// Процедура - обработчик события Выбор элемента управления ТабличноеПолеОстаткиТоваров.
//
Процедура ТабличноеПолеОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные <> Неопределено
	   И НЕ ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.ЭтоГруппа Тогда
		РаботаСДиалогами.ОбработатьВыборТаблицаОстатков(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭлементыФормы.СправочникНоменклатура.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

//Процедура - обработчик события нажатия на кнопку "ОстаткиТоваровНаСкладах" 
Процедура КоманднаяПанельНоменклатураДляПодбораОстаткиТоваровНаСкладах(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьВидимостьОстатковНаСкладах();
	Если Кнопка.Пометка Тогда
		ПоказатьОстаткиТоваров();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Обновить" у типов цен
Процедура КоманднаяПанельТипыЦенОбновить(Кнопка)
	
	УправлениеЗапасами.ОбновитьИУпорядочитьСписокТиповЦен(СписокЦенОстатков);
		
КонецПроцедуры

// Процедура - обработчик пункта меню "Переместить вверх" у типов цен
Процедура КоманднаяПанельТипыЦенПереместитьВверх(Кнопка)

	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Истина);
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Переместить вниз" у типов цен
Процедура КоманднаяПанельТипыЦенПереместитьВниз(Кнопка)
	
	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Ложь);
	
КонецПроцедуры

// Процедура - обработчик "Перед удалением" у типов цен
Процедура СписокЦенОстатковПередУдалением(Элемент, Отказ)
	// Удалять ничего нельзя
	Отказ = Истина; 
КонецПроцедуры

// Процедура - обработчик "Перед началом добавления" у типов цен
Процедура СписокЦенОстатковПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Добавлять ничего нельзя
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик "Окончание перетаскивания" у типов цен
Процедура СписокЦенОстатковОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьПорядокКолонокСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров) 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ПоказыватьОстатки".
//
Процедура ПоказыватьОстаткиПриИзменении(Элемент)
	
	УстановитьВидимостьКолонокСОстатками();
	
КонецПроцедуры
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "ДеревоНоменклатуры"
Процедура ДеревоНоменклатурыПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДеревоНоменклатурыПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
Процедура ОбработчикОжиданияДеревоНоменклатурыПриАктивизацииСтроки()
	Перем ДеревоНоменклатурыЭлемент, СтруктураЗапроса;
	
	Если ТипЗнч(мПерезаполнятьТаблицуНоменклатуры) = Тип("Булево") И мПерезаполнятьТаблицуНоменклатуры Тогда
		мПерезаполнятьТаблицуНоменклатуры = Ложь;
		возврат;
	КонецЕсли;
	
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ДеревоНоменклатурыЭлемент = Справочники.Номенклатура.ПустаяСсылка();
	
	Если НЕ ЭлементыФормы.ДеревоНоменклатуры.ТекущиеДанные = Неопределено Тогда
		ДеревоНоменклатурыЭлемент = ЭлементыФормы.ДеревоНоменклатуры.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПерезаполнитьТаблицуНоменклатуры(ДеревоНоменклатурыЭлемент, СтруктураЗапроса);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ ИЗ ПОДБОРА В ДОКУМЕНТ

// Функция - получить структуру значений для перетаскивания.
//
Функция ПолучитьСтруктуруЗначенийПеретаскивания(ПараметрыПеретаскивания)
	Перем Команда;

	СтруктураИсходныхПараметров.Свойство("Команда", Команда);

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("ИзПодбора");
	СтруктураЗначений.Вставить("Владелец"       ,  ЭтаФорма.ВладелецФормы.ЭтотОбъект.Ссылка);
	СтруктураЗначений.Вставить("ИмяТЧ"          , СтрЗаменить(Команда, "ПодборВТабличнуюЧасть", ""));
	СтруктураЗначений.Вставить("Номенклатура"   , ПараметрыПеретаскивания.Значение);
	СтруктураЗначений.Вставить("ПодбиратьУслуги", (ОтборУслугПоСправочнику И ПодбиратьУслуги) ИЛИ ПодбиратьУслуги);

	Возврат СтруктураЗначений;

КонецФункции // ПолучитьСтруктуруЗначенийПеретаскивания()

// Процедура - обработчик события "НачалоПеретаскивания" элемента формы НоменклатураДляПодбора.
//
Процедура НоменклатураДляПодбораНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Значение           = ПолучитьСтруктуруЗначенийПеретаскивания(ПараметрыПеретаскивания);
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // НоменклатураДляПодбораНачалоПеретаскивания()

// Процедура - обработчик события "ОкончаниеПеретаскивания" элемента формы НоменклатураДляПодбора.
//
Процедура НоменклатураДляПодбораОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		ТаблицаНоменклатурыВыбор(Элемент, ПараметрыПеретаскивания.Значение.Номенклатура, Неопределено, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // НоменклатураДляПодбораОкончаниеПеретаскивания()

// Процедура - обработчик события "НачалоПеретаскивания" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Значение           = ПолучитьСтруктуруЗначенийПеретаскивания(ПараметрыПеретаскивания);
	Иначе
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;

КонецПроцедуры // СправочникНоменклатураНачалоПеретаскивания()

// Процедура - обработчик события "ОкончаниеПеретаскивания" элемента формы СправочникНоменклатура.
//
Процедура СправочникНоменклатураОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование Тогда
		ТаблицаНоменклатурыВыбор(Элемент, ПараметрыПеретаскивания.Значение.Номенклатура, Неопределено, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // СправочникНоменклатураОкончаниеПеретаскивания()

//Процедура - обработчик события вызова справочной информации для объекта Подбор номенклатуры
Процедура кнСправкаНажатие(Элемент)
	ОткрытьСправку(ЭтотОбъект.Метаданные());
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мПустаяКартинка       = Новый Картинка;
мСписокПометокНаборов = Новый СписокЗначений;

мКартинкаНабор        = БиблиотекаКартинок.Набор;
мКартинкаНаборУдален  = БиблиотекаКартинок.НаборУдален;

мТекущийЭлементФормы              = Неопределено;
мСтруктураВидимостиКолонокПодбора = Неопределено;
мВремяПоследнегоПоиска            = Неопределено;
мВалютаРегламентированногоУчета   = глЗначениеПеременной("ВалютаРегламентированногоУчета");

мСписокДоступныхСкладов      = Неопределено;
мНетГруппыДоступностиСкладов = Ложь;

// Зададим возможные состояния окна.
СоединяемоеОкно                 = Истина;
РазрешитьСостояниеПрикрепленное = Истина;
РазрешитьСостояниеСвободное     = Истина;

// Положение окна по умолчанию.
СостояниеОкна                   = ВариантСостоянияОкна.Прикрепленное;
ПоложениеПрикрепленногоОкна     = ВариантПрикрепленияОкна.Право;

СправочникНоменклатура.Колонки.Добавить("ВестиУчетПоХарактеристикам");
СправочникНоменклатура.Колонки.Добавить("ЕдиницаХраненияОстатков");

мСоответствиеКурсовВалют          = Новый Соответствие;
мНужноОбновитьОтображениеОстатков = Ложь;

// Колонки табличной части
мКолонкаНоменклатура               = ЭлементыФормы.НоменклатураДляПодбора.Колонки.Номенклатура;
мКолонкаХарактеристикаНоменклатуры = ЭлементыФормы.НоменклатураДляПодбора.Колонки.ХарактеристикаНоменклатуры;
мКолонкаСерияНоменклатуры          = ЭлементыФормы.НоменклатураДляПодбора.Колонки.СерияНоменклатуры;
мКолонкаЕдиницаИзмерения           = ЭлементыФормы.НоменклатураДляПодбора.Колонки.ЕдиницаИзмерения;
мКолонкаВалюта                     = ЭлементыФормы.НоменклатураДляПодбора.Колонки.Валюта;
мКолонкаСклад                      = ЭлементыФормы.НоменклатураДляПодбора.Колонки.Склад;
мКолонкаКачество                   = ЭлементыФормы.НоменклатураДляПодбора.Колонки.Качество;

СправочникНоменклатура.Колонки.Добавить("Набор");