Перем КоличествоЭтапов;
Перем КоличествоШагов;
Перем СписокШагов;
Перем Этап;
Перем Шаг;

Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;
Перем мОбъектКИ;
Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мКнопкаРедактироватьКИВДиалоге;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

Перем Рисунки;
Перем Рисунки1;

Перем ЦветПолногоЗаполнения;

Перем АвтоНаименование;
Перем ЭтоВалютныйСчет;

Перем мВалютаРегламентированногоУчета;

Перем Базовая;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует текст для наименования банковского счета
 //
 // Параметры:
 //  Нет.
 //
Функция СформироватьАвтоНаименование()
	
	ЭлементыФормы.НаименованиеБанковскогоСчета.СписокВыбора.Очистить();

	СтрокаНаименования = Лев(ОсновнойБанковскийСчет.ВидСчета 
	                   + ?(ОсновнойБанковскийСчет.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета, " (" + ОсновнойБанковскийСчет.ВалютаДенежныхСредств + ")", "")
	                   + ?(НЕ ОсновнойБанковскийСчет.Банк.Пустая(), " в " + ОсновнойБанковскийСчет.Банк, ""), 
					   100);
	
	ЭлементыФормы.НаименованиеБанковскогоСчета.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = Лев(ОсновнойБанковскийСчет.НомерСчета 
	                   + ?(НЕ ОсновнойБанковскийСчет.Банк.Пустая(), ", " + ОсновнойБанковскийСчет.Банк, ""), 
					   100);
	ЭлементыФормы.НаименованиеБанковскогоСчета.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = Лев(
	                     ?(НЕ ОсновнойБанковскийСчет.Банк.Пустая(),""+ ОсновнойБанковскийСчет.Банк, "")
					   + " ("+ ОсновнойБанковскийСчет.ВидСчета 
	                   + ?(ОсновнойБанковскийСчет.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета, ", " + ОсновнойБанковскийСчет.ВалютаДенежныхСредств , "")
					   +")", 
					   100);
	ЭлементыФормы.НаименованиеБанковскогоСчета.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции // СформироватьАвтоНаименование()

// Формирует текст для реквизита "ТекстКорреспондента"
 //
 // Параметры:
 //  Нет.
 //
Функция СформироватьТекстКорреспондента()

	СтрКорреспондента = ?(ПустаяСтрока(Организация.НаименованиеПолное), Организация.Наименование, Организация.НаименованиеПолное);

	Если НЕ ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондента = СтрКорреспондента + " р/с " + ОсновнойБанковскийСчет.НомерСчета
			+ " в " + ОсновнойБанковскийСчет.Банк + " " + ОсновнойБанковскийСчет.Банк.Город;
	КонецЕсли;	
	
	Возврат СтрКорреспондента;

КонецФункции // СформироватьТекстКорреспондента()

// Управляет видимостью некоторых элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ЭтоВалютныйСчет Тогда
		ЭлементыФормы.НомерСчета.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.НомерСчета.ОтметкаНезаполненного     = Ложь;
	Иначе
		ЭлементыФормы.НомерСчета.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ПанельРеквизитовСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитовСчетов.Страницы.РеквизитыСчетаОрганизации;
	ЭлементыФормы.НомерИДатаРазрешения.Видимость         = ЭтоВалютныйСчет;
	ЭлементыФормы.НадписьНомерИДатаРазрешения.Видимость  = ЭтоВалютныйСчет;
		
	ПолеВводаТекстаКорреспондента = ЭлементыФормы.ТекстПлательщика;	
	
	Если ПрямыеРасчеты Тогда
		ЭлементыФормы.ПанельБанкаДляРасчетов.ТекущаяСтраница = ЭлементыФормы.ПанельБанкаДляРасчетов.Страницы.ПрямыеРасчеты;
	Иначе
		ЭлементыФормы.ПанельБанкаДляРасчетов.ТекущаяСтраница = ЭлементыФормы.ПанельБанкаДляРасчетов.Страницы.НепрямыеРасчеты;
	КонецЕсли;
	
	Если РедактироватьТекстКорреспондента Тогда
		ПолеВводаТекстаКорреспондента.Данные             = "ОсновнойБанковскийСчет.ТекстКорреспондента";
		ПолеВводаТекстаКорреспондента.ЦветТекстаПоля     = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВводаТекстаКорреспондента.ЦветФонаПоля       = ЦветаСтиля.ЦветФонаПоля;
		ПолеВводаТекстаКорреспондента.ТолькоПросмотр     = Ложь;
		ПолеВводаТекстаКорреспондента.ПропускатьПриВводе = Ложь;
	Иначе
		ПолеВводаТекстаКорреспондента.Данные             = "";
		ПолеВводаТекстаКорреспондента.ЦветТекстаПоля     = ЦветаСтиля.ТекстИнформационнойНадписи;
		ПолеВводаТекстаКорреспондента.ЦветФонаПоля       = ЦветаСтиля.ЦветФонаФормы;
		ПолеВводаТекстаКорреспондента.ТолькоПросмотр     = Истина;
		ПолеВводаТекстаКорреспондента.ПропускатьПриВводе = Истина;
	КонецЕсли;
	
	ОбновитьНадписи();

КонецПроцедуры // УстановитьВидимость()

// Обновляет надписи, связанные с основным банковским счетам
//
// Параметры:
//  Нет.
//
Процедура ОбновитьНадписи()
	
	ПолеВводаТекстаКорреспондента = ЭлементыФормы.ТекстПлательщика;
	Если ПустаяСтрока(ПолеВводаТекстаКорреспондента.Данные) Тогда
		ПолеВводаТекстаКорреспондента.Значение = СформироватьТекстКорреспондента();
	КонецЕсли;
	
	ЭлементыФормы.НадписьБанк.Заголовок            = ?(ОсновнойБанковскийСчет.Банк.Пустая(), "", ОсновнойБанковскийСчет.Банк.Наименование + " " + ОсновнойБанковскийСчет.Банк.Город);
	ЭлементыФормы.НадписьБанкДляРасчетов.Заголовок = ?(ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая(), "", ОсновнойБанковскийСчет.БанкДляРасчетов.Наименование + " " + ОсновнойБанковскийСчет.БанкДляРасчетов.Город);
	
КонецПроцедуры // ОбновитьНадписи()

// Осществляет поиск банка в классификаторе банков
//
// Параметры:
//  ТекстДляПоиска - Текст, по которому необходимо найти банк (например БИКБанка)
//  ОбластьПоиска - Реквизит, по которому следует искать банк (например Код) 
//
// Возвращаемое значение:
//  БанкСсылка - Ссылка на найденный банк (если банк не найден - пустая ссылка на банк)
//
Функция НайтиБанкВКлассификаторе(ТекстДляПоиска, ОбластьПоиска = "Код",Элемент=неопределено)
	
	БанкСсылка = Справочники.Банки.ПустаяСсылка();
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		Возврат БанкСсылка;
	КонецЕсли;
	
	ОбластьПоиска = НРег(ОбластьПоиска);
	СписокНайденныхБанков = новый СписокЗначений;
	Если ОбластьПоиска = "код" Тогда
		Отбор = Новый Структура("Код");
		Отбор.Код = ТекстДляПоиска;
	ИначеЕсли ОбластьПоиска = "коррсчет" Тогда
		Отбор = Новый Структура("КоррСчет");
		Отбор.КоррСчет = ТекстДляПоиска;
	КонецЕсли;
	Выборка = Справочники.Банки.Выбрать(,,Отбор,"Код Возр");
	Пока Выборка.Следующий() и Не Выборка.ЭтоГруппа Цикл
		СписокНайденныхБанков.Добавить(Выборка.Ссылка); 
	КонецЦикла;
	
	НетБанкаВКлассификаторе = СписокНайденныхБанков.Количество()=0;
	
	Если НетБанкаВКлассификаторе Тогда
		
		ТекстОшибки = "";

		Если ОбластьПоиска = "код" Тогда
			
			ТекстДляПоискаВведенКорректно = ОсновнойБанковскийСчет.ПроверитьКорректностьБИК(ТекстДляПоиска, ТекстОшибки);
			Если ТекстДляПоискаВведенКорректно Тогда
				
				ТекстВопроса = "Банк с БИК " + ТекстДляПоиска + " не найден в классификаторе банков.
					|Добавить новый банк в классификатор?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтруктураПараметров = Новый Структура("Код", ТекстДляПоиска);
					ДобавитьНовыйБанк(СтруктураПараметров);
					БанкСсылка = Справочники.Банки.НайтиПоКоду(СтруктураПараметров.Код);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // ОбластьПоиска = "КоррСчет"
			
			ТекстДляПоискаВведенКорректно = ОсновнойБанковскийСчет.ПроверитьКорректностьКоррсчета(ТекстДляПоиска, ТекстОшибки);
			Если ТекстДляПоискаВведенКорректно Тогда
				
				ТекстВопроса = "Банк с корр.счетом " + ТекстДляПоиска + " не найден в классификаторе банков.
					|Добавить новый банк в классификатор?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтруктураПараметров = Новый Структура("КоррСчет", ТекстДляПоиска);
					ДобавитьНовыйБанк(СтруктураПараметров);
					БанкСсылка = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", СтруктураПараметров.КоррСчет);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТекстДляПоискаВведенКорректно Тогда
			БанкСсылка = Справочники.Банки.ПустаяСсылка();
			Предупреждение(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НетБанкаВКлассификаторе Тогда
		Возврат БанкСсылка;
	ИначеЕсли СписокНайденныхБанков.Количество()=1 Тогда
		Возврат СписокНайденныхБанков[0].Значение;
	Иначе
		ВыбранныйБанк = ВыбратьИзСписка(СписокНайденныхБанков,Элемент,);
		Если ВыбранныйБанк<>неопределено Тогда
			Возврат ВыбранныйБанк.Значение;
		Иначе
			Возврат БанкСсылка;
		КонецЕсли;
	КонецЕсли;

КонецФункции // НайтиБанкВКлассификаторе()

// Добавляет новый элемент справочника и открывает модально форму элемента
//
// Параметры:
//	СтруктураПараметров - параметры для заполнения нового элемента справочника  
//
Процедура ДобавитьНовыйБанк(СтруктураПараметров)

	ФормаБанка = Справочники.Банки.ПолучитьФормуНовогоЭлемента();
	ЗаполнитьЗначенияСвойств(ФормаБанка, СтруктураПараметров);
	ФормаБанка.ОткрытьМодально();

КонецПроцедуры // ДобавитьНовыйБанк()

// Устанавливает наименование основного банковского счета 
//
// Параметры:
//	Нет  
//
Процедура УстановитьНаименованиеСчета()
	
	Если ПустаяСтрока(ОсновнойБанковскийСчет.Наименование) ИЛИ ОсновнойБанковскийСчет.Наименование = АвтоНаименование Тогда
		ОсновнойБанковскийСчет.Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	
КонецПроцедуры // УстановитьНаименование()

// Устанавливает наименование основного банковского счета 
//
// Параметры:
//	Нет  
//
Процедура НадписьБанкНажатие(Элемент)
	
	ФормаБанка = ОсновнойБанковскийСчет.Банк.ПолучитьФорму( , ЭлементыФормы.БИКБанка);
	ФормаБанка.Открыть();

КонецПроцедуры // НадписьБанкНажатие()

// Инициализирует значения основного банковского счета
//
Процедура ЗаполнитьОсновнойБанковскийСчет()

	Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет.ВидСчета) Тогда
		ОсновнойБанковскийСчет.ВидСчета = ЭлементыФормы.ВидСчета.СписокВыбора[0];
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет.ВалютаДенежныхСредств) Тогда
		ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновнойБанковскийСчет()

// Обновляет представление элементов формы, связанных с основным банковским счетом
//
Процедура ОбновитьПредставлениеОсновногоБанковскогоСчета()

	ОсновнойБанковскийСчет.Наименование = СформироватьАвтоНаименование();
	
	ПрямыеРасчеты = НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет.БанкДляРасчетов);
	ЭтоВалютныйСчет = ОсновнойБанковскийСчет.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета;
			
	РедактироватьТекстКорреспондента = НЕ ПустаяСтрока(ОсновнойБанковскийСчет.ТекстКорреспондента);
	
	БИКБанка      = СокрП(ОсновнойБанковскийСчет.Банк.Код);
	КоррсчетБанка = СокрП(ОсновнойБанковскийСчет.Банк.КоррСчет);
	
	БИКБанкаДляРасчетов      = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет);

	УстановитьВидимость();			
	АвтоНаименование = СформироватьАвтоНаименование();

КонецПроцедуры // ОбновитьПредставлениеОсновногоБанковскогоСчета()

////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКА ОСНОВНЫХ ДЕЙСТВИЙ ФОРМЫ И НАВИГАЦИИ ПО СТРАНИЦАМ

// Процедура обработчик события "Нажатие" кнопки Назад.
//
Процедура КнопкаНазад(Элемент)
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Если (Шаг > 1) И НЕ (Этап = 2 и Шаг = 2 и Базовая) Тогда
		Шаг = Шаг - 1;
	Иначе
		Если Этап > 1 Тогда
			Этап = Этап - 1;
			ОпределитьКоличествоШагов();
			Шаг = КоличествоШагов;
						
		КонецЕсли;
	КонецЕсли;
	УстановитьСтраницу();
КонецПроцедуры // КнопкаНазад()

// Процедура обработчик события "Нажатие" кнопки Вперед.
//
Процедура КнопкаВпередНажатие(Элемент)
	
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Если Шаг < КоличествоШагов Тогда
		Шаг = Шаг + 1;
	Иначе
		Если Этап < КоличествоЭтапов Тогда
			Этап = Этап + 1;
			ОпределитьКоличествоШагов();
			Шаг = 1;
		Иначе
			Шаг = 0;
			Этап = 0;
		КонецЕсли;
	КонецЕсли;
				
	ОбработатьНажатиеВперед();
	УстановитьСтраницу();
КонецПроцедуры

// Процедура управляет доступностью элементов НадписьВперед, НадписьНазад.
//
Процедура УстановитьДоступность()
	
	ДоступностьВперед = Истина;
	ДоступностьНазад  = Истина;
	Если ((Этап = 1) И (Шаг = 1)) Тогда
		ДоступностьНазад = Ложь;
	ИначеЕсли ((Этап = 2) И (Шаг = 1)) Тогда
		Если СозданиеОрг1 = 0 Тогда
			СозданиеОрг1 = 2;			
		ИначеЕсли СозданиеОрг1 = 3 Тогда
			ДоступностьВперед = Не (НЕ ЗначениеЗаполнено(Орг));
		ИначеЕсли СозданиеОрг1 = 4 Тогда
			ДоступностьВперед = Истина;
		КонецЕсли;
		ЭлементыФормы.Орг.Видимость = (СозданиеОрг1 = 3)
		
	ИначеЕсли ((Этап = 2) И (Шаг = 2)) Тогда
		ДоступностьВперед = Не (НЕ ЗначениеЗаполнено(Организация.Наименование));
		
		Если НЕ ЗначениеЗаполнено(Организация.ЮрФизЛицо) Тогда
			Предупреждение("Не указан тип организации (юр./физ. лицо)");
			ДоступностьВперед = Ложь;
		
		КонецЕсли;
	ИначеЕсли ((Этап = 2) И (Шаг = 3)) Тогда

	ИначеЕсли ((Этап = 2) И (Шаг = 4)) Тогда
	
		ТекстЗаголовок = "Некорректное значение ";
		ОшибкаИНН = Ложь;
		ОшибкаКПП = Ложь;

		Если Организация.Ссылка.ИНН <> Организация.ИНН Тогда
			Если (НЕ ПустаяСтрока(Организация.ИНН)) Тогда
				
				ДлинаИНН       = СтрДлина(Организация.ИНН);
				ТекстСообщения = "";

				Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					Если НЕ ДлинаИНН = 12 Тогда
						ТекстСообщения = """ИНН"" физического лица 12 символов";
					КонецЕсли;
				Иначе
					Если НЕ ДлинаИНН = 10 Тогда
						ТекстСообщения = """ИНН"" юридического лица 10 символов";
					КонецЕсли;
				КонецЕсли;
				
				ОшибкаИНН = (НЕ РегламентированнаяОтчетность.ИННсоответствуетТребованиям(Организация.ИНН, Организация.ЮрФизЛицо)) ИЛИ ЗначениеЗаполнено(ТекстСообщения);
					
				Если ЗначениеЗаполнено(ТекстСообщения) Тогда
					ТекстСообщения = ". Длина ""ИНН"" не соответствует требованиям: " + ТекстСообщения;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;

		Если Организация.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ФизЛицо И Организация.Ссылка.КПП <> Организация.КПП Тогда
			Если (НЕ ПустаяСтрока(Организация.КПП)) Тогда
				ОшибкаКПП = (СтрДлина(Организация.КПП) <> 9);
			КонецЕсли;
		КонецЕсли;

		Если ОшибкаИНН ИЛИ ОшибкаКПП Тогда
			ТекстЗаголовок = ТекстЗаголовок + ?(ОшибкаИНН, "ИНН", "") + ?(ОшибкаКПП, ?(ОшибкаИНН, " и ", "") + "КПП", "");
			ТекстЗаголовок = ТекстЗаголовок + ТекстСообщения;
			ТекстЗаголовок = ТекстЗаголовок + ". Укажите корректное значение или очистите поле.";
			Предупреждение(ТекстЗаголовок);
			ДоступностьВперед = Ложь;
		КонецЕсли;
	ИначеЕсли ((Этап = 2) И (Шаг = 5)) Тогда
		Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет.ВалютаДенежныхСредств) Тогда
			ДоступностьВперед = Ложь;
		ИначеЕсли ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета Тогда	
			Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет.НомерСчета) Тогда
				ДоступностьВперед = Ложь;
			ИначеЕсли НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет.Банк) Тогда
				ДоступностьВперед = Ложь;
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли ((Этап = 2) И (Шаг = 8)) Тогда
		ЭлементыФормы.НДСНалоговыйПериод.Доступность = Не НалоговыйУчетЗапись.Период >= '20080101';
	ИначеЕсли ((Этап = 2) И (Шаг = 9)) Тогда
		ДоступностьНазад = НЕ ИзмененияЗаписаны_Этап2;
		ЭлементыФормы.РамкаПовторитьЭтап.Видимость = НЕ Базовая; 
		ЭлементыФормы.ПовторитьЭтап.Видимость = НЕ Базовая; 
		ЭлементыФормы.ПовторитьЭтап1.Видимость = НЕ Базовая;		
	ИначеЕсли ((Этап = 3) И (Шаг = 1)) Тогда
		ДоступностьНазад = Ложь;
	ИначеЕсли ((Этап = 3) И (Шаг = 7)) Тогда
		ДоступностьНазад = НЕ ИзмененияЗаписаны_Этап3;
	ИначеЕсли ((Этап = 4) И (Шаг = 1)) Тогда
		ДоступностьНазад = Ложь;
	КонецЕсли;

	Если (Этап = КоличествоЭтапов) и (Шаг = КоличествоШагов) Тогда
		ЭлементыФормы.ПанельКнопок.ТекущаяСтраница = ЭлементыФормы.ПанельКнопок.Страницы.Готово;
	Иначе
		ЭлементыФормы.ПанельКнопок.ТекущаяСтраница = ЭлементыФормы.ПанельКнопок.Страницы.Далее;
	Конецесли;
	
	ЭлементыФормы.КнопкаВперед.Доступность  = ДоступностьВперед;
	ЭлементыФормы.НадписьВперед.Доступность = ДоступностьВперед;
	
	
	ЭлементыФормы.НадписьНазад.Доступность  = ДоступностьНазад;
	
	ЭлементыФормы.НадписьНазад1.Доступность = ДоступностьНазад;
	ЭлементыФормы.НадписьНазад1.Видимость   = ДоступностьНазад;

КонецПроцедуры // УстановитьДоступность()

// Процедура устанавливает текущую станицу формы в соответствии с этапом 
//  и шагом обработки.
//
Процедура УстановитьСтраницу()
	Если (Шаг = 0 ) И (Этап = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ЭлементыФормы.ПанельЭтапов.Страницы[Этап - 1];
	ЭлементыФормы.ПанельКартинки.ТекущаяСтраница = ЭлементыФормы.ПанельКартинки.Страницы[Этап - 1];
	ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].ТекущаяСтраница = ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].Страницы[Шаг - 1];
	ЭлементыФормы.НадписьНазад.Доступность = НЕ (Этап = 1 И Шаг = 1);
	
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
	Иначе
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 10, Истина, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	
	
КонецПроцедуры // УстановитьСтраницу()

// Процедура устанавливает количество шагов этапа.
//
Процедура ОпределитьКоличествоШагов()
	
	КоличествоШагов = ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].Страницы.Количество();	
	
КонецПроцедуры // ОпределитьКоличествоШагов()

// Процедура устанавливает количество этапов.
//
Процедура ОпределитьКоличествоЭтапов()
	
	КоличествоЭтапов = ЭлементыФормы.ПанельЭтапов.Страницы.Количество();
	
КонецПроцедуры // ОпределитьКоличествоЭтапов()

// Процедура заполняет дерево этапов и шагов в табличном поле ПолеТабличногоДокумента1.
//
Процедура ЗаполнитьДеревоШагов()
	
	НомерСтроки = 2;
	Отступ      = "	";
	
	Для Каждого СтраницаЭтапа из ЭлементыФормы.ПанельЭтапов.Страницы Цикл
		НомерЭтапа = ЭлементыФормы.ПанельЭтапов.Страницы.Индекс(СтраницаЭтапа)+1;
		
		Область = ЭлементыФормы.ПолеТабличногоДокумента1.Область(НомерСтроки,2,НомерСтроки,4);
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
		Область.Объединить();
		Область.Имя = Строка(НомерЭтапа) + "_";
		Область.Текст = СтраницаЭтапа.Заголовок;
		НомерСтроки = НомерСтроки + 1;
		
		Для Каждого Страница ИЗ ЭлементыФормы["ШагиЭтапа" + Строка(НомерЭтапа)].Страницы Цикл
			
			НомерШага = ЭлементыФормы["ШагиЭтапа" + Строка(НомерЭтапа)].Страницы.Индекс(Страница)+1;
			Если НомерШага > 1 Тогда
				Область = ЭлементыФормы.ПолеТабличногоДокумента1.Область(НомерСтроки,3,НомерСтроки,4);
				Область.Объединить();
				Область.Имя = Строка(НомерЭтапа) + "_" + Строка(НомерШага);
				Область.Шрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
				Область.Текст = Страница.Заголовок;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьДеревоШагов()

Процедура ПриОткрытии()
	
	Этап = 1;
	Шаг  = 1;
		
	ОпределитьКоличествоЭтапов();
	ОпределитьКоличествоШагов();
	
	ВывестиОтчет = Истина;
	ЗапуститьБО = Истина;
	
	//Дерево
	ЗаполнитьДеревоШагов();
	
	УстановитьСтраницу();

КонецПроцедуры

// Процедура печати настроек учета предприятия и сведений об организациях.
//
Процедура Печать()
	СхемаКомпоновкиДанныхСведенияОбОрганизациях = ПолучитьМакет("СведенияОбОрганизациях");
	НастройкиСведенияОбОрганизациях             = СхемаКомпоновкиДанныхСведенияОбОрганизациях.НастройкиПоУмолчанию;
	
	КомпоновщикМакетаСведенияОбОрганизациях = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиСведенияОбОрганизациях   = КомпоновщикМакетаСведенияОбОрганизациях.Выполнить(СхемаКомпоновкиДанныхСведенияОбОрганизациях, НастройкиСведенияОбОрганизациях);
	
	ПроцессорКомпоновкиСведенияОбОрганизациях = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиСведенияОбОрганизациях.Инициализировать(МакетКомпоновкиСведенияОбОрганизациях);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	
	// Основной цикл вывода отчета
	Пока Истина Цикл
		
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновкиСведенияОбОрганизациях.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СхемаКомпоновкиДанныхНастройкиУчета = ПолучитьМакет("НастройкиУчета");
	НастройкиНастройкиУчета             = СхемаКомпоновкиДанныхНастройкиУчета.НастройкиПоУмолчанию;
	
	КомпоновщикМакетаНастройкиУчета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиНастройкиУчета   = КомпоновщикМакетаНастройкиУчета.Выполнить(СхемаКомпоновкиДанныхНастройкиУчета, НастройкиНастройкиУчета);
	
	ПроцессорКомпоновкиНастройкиУчета = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиНастройкиУчета.Инициализировать(МакетКомпоновкиНастройкиУчета);
	
	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	
	// Основной цикл вывода отчета
	Пока Истина Цикл
		
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновкиНастройкиУчета.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;

	
	СхемаКомпоновкиДанныхУчетнаяПолитика = ПолучитьМакет("УчетнаяПолитика");
	НастройкиУчетнаяПолитика             = СхемаКомпоновкиДанныхУчетнаяПолитика.НастройкиПоУмолчанию;
	
	КомпоновщикМакетаУчетнаяПолитика = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиУчетнаяПолитика   = КомпоновщикМакетаУчетнаяПолитика.Выполнить(СхемаКомпоновкиДанныхУчетнаяПолитика, НастройкиУчетнаяПолитика);
	
	ПроцессорКомпоновкиУчетнаяПолитика = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиУчетнаяПолитика.Инициализировать(МакетКомпоновкиУчетнаяПолитика);
	
	// Обозначим начало вывода
	ПроцессорВывода.НачатьВывод();
	
	// Основной цикл вывода отчета
	Пока Истина Цикл
		
		// Получим следующий элемент результата компоновки
		ЭлементРезультата = ПроцессорКомпоновкиУчетнаяПолитика.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			// Следующий элемент не получен - заканчиваем цикл вывода
			Прервать;
			
		Иначе
			// Элемент получен - выведем его при помощи процессора вывода
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
			
		КонецЕсли;
		
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();

	ДокументРезультат.ОтображатьСетку     = Ложь;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	
	ДокументРезультат.Показать();
	
КонецПроцедуры //Печать()

Процедура ОбновлениеОтображения()
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	УстановитьДоступность();

КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов управления формы 
// в зависимости от значений реквизитов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеВидимостьюИДоступностьюЭлементовФормы()

	ЭтоФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
	ЭлементыФормы.КПП.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьКПП.Видимость = НЕ ЭтоФизЛицо;

	ЭлементыФормы.НадписьОГРН.Заголовок = ?(ЭтоФизЛицо, "ОГРНИП:", "ОГРН:");
	ЭлементыФормы.ОГРН.Маска = ?(ЭтоФизЛицо, "999999999999999", "9999999999999");
	ЭлементыФормы.РамкаГруппыСвидетельствоОПостановке.Заголовок = ?(ЭтоФизЛицо, "Свидетельство о государственной регистрации", "Свидетельство о постановке на учет в налоговом органе");

	ЭлементыФормы.ЗаписьСведенийОрганизации.Видимость   = ВнесеныИзменения_Этап2;
	ЭлементыФормы.ЗаписьСведенийОрганизации.Доступность = ВнесеныИзменения_Этап2;
	
	ЭтоНЕНоваяОрганизация = НЕ (СозданиеОрг1 = 2);
	
	ЭлементыФормы.НоваяЗаписьНалоговогоУчета.Видимость   = ЭтоНЕНоваяОрганизация;
	ЭлементыФормы.НоваяЗаписьНалоговогоУчета.Доступность = ЭтоНЕНоваяОрганизация;
	
	ЭлементыФормы.НовыйОсновнойСчет.Видимость   = ЭтоНЕНоваяОрганизация;
	ЭлементыФормы.НовыйОсновнойСчет.Доступность = ЭтоНЕНоваяОрганизация;
	
	ЭлементыФормы.ЗаписьСведенийОрганизации.Видимость   = ВнесеныИзменения_Этап2;
	ЭлементыФормы.ЗаписьСведенийОрганизации.Доступность = НЕ ИзмененияЗаписаны_Этап2;
	ЭлементыФормы.ЗаписьСведенийОрганизации.Заголовок = ?(ИзмененияЗаписаны_Этап2, "Проверка сведений организации",
	                                                     "Запись сведений об организации");
	
	ЭлементыФормы.НадписьПроверкаОрганизации.Видимость      = ИзмененияЗаписаны_Этап2;
	ЭлементыФормы.НадписьПроверкаНУ.Видимость               = ИзмененияЗаписаны_Этап2;
	ЭлементыФормы.НадписьПроверкаОтветственныхЛиц.Видимость = ИзмененияЗаписаны_Этап2;
	ЭлементыФормы.РамкаПовторитьЭтап.Видимость              = ИзмененияЗаписаны_Этап2;
	ЭлементыФормы.ПовторитьЭтап.Видимость                   = ИзмененияЗаписаны_Этап2;
	ЭлементыФормы.ПовторитьЭтап1.Видимость                  = ИзмененияЗаписаны_Этап2;
	
	ЭлементыФормы.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам.Видимость = УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте;

	ВидимостьНакопительныхСкидок = (УчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте И УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам);

	ЭлементыФормы.СпособИспользованияНакопительныхСкидок.Видимость = ВидимостьНакопительныхСкидок;
	ЭлементыФормы.НадписьСпособИспользованияНакопительныхСкидок.Видимость = ВидимостьНакопительныхСкидок;

	ЭлементыФормы.ПериодичностьРасчетаНакопленияСкидок.Видимость = ВидимостьНакопительныхСкидок;
	ЭлементыФормы.НадписьПериодичностьРасчетаНакопленияСкидок.Видимость = ВидимостьНакопительныхСкидок;

	ЭлементыФормы.АнализироватьПрошлыйПериодНакопленияСкидок.Видимость = ВидимостьНакопительныхСкидок
	   И УчетнаяПолитика.ПериодичностьРасчетаНакопленияСкидок <> Перечисления.ПериодичностьНакопленияСкидок.ВТечениеВсегоПериода;
	   
	ЭлементыФормы.ЗаписьУчетнойПолитики.Доступность = НЕ ИзмененияЗаписаны_Этап3;
	ЭлементыФормы.ЗаписьУчетнойПолитики.Видимость   = ВнесеныИзменения_Этап3;
	ЭлементыФормы.ЗаписьУчетнойПолитики.Заголовок = ?(ИзмененияЗаписаны_Этап3, "Проверка учетной политики предприятия",
	                                                     "Запись сведений об учетной политики предприятия");
	
	ЭлементыФормы.НадписьПроверкаПараметровУчета.Видимость = ИзмененияЗаписаны_Этап3;
	ЭлементыФормы.НадписьПроверкаУчетнаяПолитика.Видимость = ИзмененияЗаписаны_Этап3;
	
	ЭлементыФормы.РамкаПовторитьЭтап1.Видимость = ИзмененияЗаписаны_Этап3;
	ЭлементыФормы.ПереходГотово.Видимость       = ИзмененияЗаписаны_Этап3;
	ЭлементыФормы.ПереходГотово1.Видимость      = ИзмененияЗаписаны_Этап3;
	ЭлементыФормы.ПереходГотово2.Видимость      = ИзмененияЗаписаны_Этап3;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
//ОСНОВНАЯ ОБРАБОТКА ВВЕДЕННЫХ ДАННЫХ

// Процедура обрабатывает действие "Нажатие" элемента НадписьВперед.
//
Процедура ОбработатьНажатиеВперед()
	
	Если Этап = 2 Тогда
		ОпределитьКоличествоШагов();

		// Выбор действия: ввести новую организацию или редактировать сведения старой организации
		Если (Шаг = 1) Тогда
			
			Организация                  = Неопределено;
			ОсновнойБанковскийСчет       = Неопределено;
			ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			КонтактнаяИнформация         = Неопределено;
			НалоговыйУчетЗапись          = Неопределено;
			НаборКонтактнойИнформации    = Неопределено;
			ОтветственныеЛицаОрганизации = Неопределено;
			
			СозданиеОрг1 			= 0;
			ПовторитьЭтап 			= 0;
			Орг 					= Справочники.Организации.ПустаяСсылка();
			
			ВнесеныИзменения_Этап2     = Ложь;
			ВнесеныИзменения_Этап2Шаг2 = Ложь;
			ВнесеныИзменения_Этап2Шаг3 = Ложь;
			ВнесеныИзменения_Этап2Шаг4 = Ложь;
			ВнесеныИзменения_Этап2Шаг5 = Ложь;
			ВнесеныИзменения_Этап2Шаг6 = Ложь;
			ВнесеныИзменения_Этап2Шаг7 = Ложь;
			ВнесеныИзменения_Этап2Шаг8 = Ложь;
			ИзмененияЗаписаны_Этап2    = Ложь;
			
			ОтветсвенныеЛицаОрганизации_ГлавныйБухгалтер           = Неопределено;
			ОтветсвенныеЛицаОрганизации_Кассир                     = Неопределено;
			ОтветсвенныеЛицаОрганизации_Руководитель               = Неопределено;
			ОтветственныеЛицаОрганизации_ДолжностьГлавныйБухгалтер = Неопределено;
			ОтветственныеЛицаОрганизации_ДолжностьКассир           = Неопределено;
			ОтветственныеЛицаОрганизации_ДолжностьРуководитель     = Неопределено;
			
			
			Для каждого Рисунок Из Рисунки Цикл
				Рисунок.Картинка = Новый Картинка();
			КонецЦикла;
			
			Для каждого Рисунок Из Рисунки1 Цикл
				Рисунок.Картинка = Новый Картинка();
			КонецЦикла;
			
			Если Базовая Тогда
				Выборка = Справочники.Организации.Выбрать();
				Если Выборка.Следующий() Тогда
					СозданиеОрг1 = 3;
					Орг = Выборка.Ссылка;
					Организация = Орг.ПолучитьОбъект();
				Иначе
					Организация = Справочники.Организации.СоздатьЭлемент();
					Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
					СозданиеОрг1 = 2;
				КонецЕсли;
				Шаг = 2;
			КонецЕсли;

			// Заполнение основных сведений об организации
		ИначеЕсли (Шаг = 2) Тогда
			
			Если СозданиеОрг1 = 2 Тогда
				Организация           = Справочники.Организации.СоздатьЭлемент();
				Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			ИначеЕсли СозданиеОрг1 = 3 Тогда
				Организация = Орг.ПолучитьОбъект();
			ИначеЕсли СозданиеОрг1 = 4 Тогда
				Этап = 3;
				Шаг  = 1;
				УправлениеПереходом = 2;
				ОбработатьНажатиеВперед();

				
			КонецЕсли;
			
			
			// Заполнение дополнительных сведений об организации
		ИначеЕсли (Шаг = 3) Тогда
			
			// Заполнение реквизитов организации
		ИначеЕсли (Шаг = 4) Тогда 
			
			// Заполнение основного банковского счета
		ИначеЕсли (Шаг = 5) Тогда
			мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			Если СозданиеОрг1 = 2 Тогда // Создаем новый банковский счет
				ЗаписатьОрганизацию();
				ОсновнойБанковскийСчет.Владелец = Организация;
				ЗаполнитьОсновнойБанковскийСчет();
			ИначеЕсли СозданиеОрг1 = 3 Тогда
				Если НЕ Орг.ОсновнойБанковскийСчет.Пустая() Тогда
					ОсновнойБанковскийСчет = Орг.ОсновнойБанковскийСчет.ПолучитьОбъект();
				Иначе
					ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
					ОсновнойБанковскийСчет.Владелец = Организация;
					ЗаполнитьОсновнойБанковскийСчет();
				КонецЕсли;
			КонецЕсли;			
			ОбновитьПредставлениеОсновногоБанковскогоСчета();
			НовыйОсновнойСчет = Ложь;
			
			// Заполнение контактной информации
		ИначеЕсли (Шаг = 6) Тогда
			ВнесеныИзменения_Этап2Шаг6 = НаборКонтактнойИнформации.Модифицированность();
			мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
			мКнопкаРедактироватьКИВДиалоге.Пометка = Истина;
			мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
			мТекстПоискаПоСтрокеВидаКИ                     = "";
			мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;
			Если Не ВнесеныИзменения_Этап2Шаг6 Тогда
				ОбновитьКИ();
			КонецЕсли;
			// Ответственные лица организации
		ИначеЕсли (Шаг = 7) Тогда
			ВнесеныИзменения_Этап2Шаг6 = НаборКонтактнойИнформации.Модифицированность();			
			Если Не ВнесеныИзменения_Этап2Шаг7 Тогда
		     	ПрочитатьОтветственноеЛицо("Руководитель");
			 	ПрочитатьОтветственноеЛицо("ГлавныйБухгалтер");
			 	ПрочитатьОтветственноеЛицо("Кассир");
			КонецЕсли;
			// Налоговый учет
		ИначеЕсли (Шаг =8) Тогда
			ПериодЗаписи = ПолучитьДатуПоследнейЗаписиНалоговогоУчета(Организация.Ссылка);
			Если ПериодЗаписи <> Неопределено Тогда
				НалоговыйУчетЗапись.Период = ПериодЗаписи;
				ЗаполнитьНалоговыйУчет();
			Иначе
				НалоговыйУчетЗапись.Период = ТекущаяДата();
				НалоговыйУчетЗапись.НДСНалоговыйПериод = ?(НалоговыйУчетЗапись.Период < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал);
				НалоговыйУчетЗапись.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
				НалоговыйУчетЗапись.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
				НалоговыйУчетЗапись.НДСРежимУчетаРаспределенныхОплат = Перечисления.НДСРежимУчетаРаспределенныхОплат.Приоритет_НДСМожетБытьПринятКВычету;
				ВнесеныИзменения_Этап2Шаг8 = НалоговыйУчетЗапись.Модифицированность();
			КонецЕсли;
			
			// Запись проверка
		ИначеЕсли (Шаг = 9) Тогда
			ВнесеныИзменения_Этап2 = ВнесеныИзменения_Этап2Шаг2 ИЛИ ВнесеныИзменения_Этап2Шаг3 ИЛИ 
			                     ВнесеныИзменения_Этап2Шаг4 ИЛИ ВнесеныИзменения_Этап2Шаг5 ИЛИ
			                     ВнесеныИзменения_Этап2Шаг6 ИЛИ ВнесеныИзменения_Этап2Шаг7 ИЛИ
			                     ВнесеныИзменения_Этап2Шаг8;
			ЗаполнениеТаблицыЗаписи();
			УправлениеПереходом = 2;			
		КонецЕсли;
	ИначеЕсли Этап = 3 Тогда
		ОпределитьКоличествоШагов();
		Если (Шаг = 1) Тогда
			
			Если ВнесеныИзменения_Этап2 И Не ИзмененияЗаписаны_Этап2 Тогда
				Ответ = Вопрос("Записать сведения об организации?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда	
					ЗаписьСведенийОрганизацииНажатие(Неопределено);
				КонецЕсли;	
			КонецЕсли;
				   
			КонстантыНабор  = Неопределено;
			УчетнаяПолитика = Неопределено;
			
			ВнесеныИзменения_Этап3     = Ложь;
			ВнесеныИзменения_Этап3Шаг2 = Ложь;
			ВнесеныИзменения_Этап3Шаг3 = Ложь;
			ВнесеныИзменения_Этап3Шаг4 = Ложь;
			ВнесеныИзменения_Этап3Шаг5 = Ложь;
			ВнесеныИзменения_Этап3Шаг6 = Ложь;
			ВнесеныИзменения_Этап3Шаг7 = Ложь;
			ИзмененияЗаписаны_Этап3    = Ложь;
			
			НоваяЗаписьУчетнойПолитики = Ложь;
			
			Для каждого Рисунок Из Рисунки1 Цикл
				Рисунок.Картинка = Новый Картинка();
			КонецЦикла;
			Если ПовторитьЭтап = 1 Тогда
				Этап = 2;
				Шаг = 1;
				ОпределитьКоличествоШагов();
				ОбработатьНажатиеВперед();
				
			КонецЕсли;
			
			КонстантыНабор.Прочитать();
			ПериодЗаписи = ПолучитьДатуПоследнейЗаписиУчетнойПолитики();
			Если ПериодЗаписи <> Неопределено Тогда
				УчетнаяПолитика.Период = ПериодЗаписи;
				УчетнаяПолитика.Прочитать();
			Иначе
				УчетнаяПолитика.Период = Текущаядата();
				НоваяЗаписьУчетнойПолитики = Истина;
			КонецЕсли;
			
			ПереходГотово = 0;
			УстановитьДоступность();
						

		ИначеЕсли (Шаг = 2) Тогда
			Если УправлениеПереходом = 3 Тогда
				Этап = 4;
				Шаг = 1;
				
				ОпределитьКоличествоШагов();
				ОбработатьНажатиеВперед();
			ИначеЕсли УправлениеПереходом = 4 Тогда
				Этап = 2;
				Шаг  = 1;
				
				ОпределитьКоличествоШагов();
				ОбработатьНажатиеВперед();
			Иначе
				ПроверкаДоступностиВалютыУчета();

			КонецЕсли;
			
		ИначеЕсли (Шаг = 7) Тогда
			ЗаполнениеТаблицыЗаписиЭтапа3();
			УправлениеВидимостьюИДоступностьюЭлементовФормы();
			УстановитьДоступность();

		КонецЕсли;
	ИначеЕсли (Этап = 4) Тогда
			Если ВнесеныИзменения_Этап3 И Не ИзмененияЗаписаны_Этап3 Тогда
				Ответ = Вопрос("Записать учетную политику предприятия и параметры учета?",РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда	
					ЗаписьУчетнойПолитикиНажатие(Неопределено);
				КонецЕсли;	
			КонецЕсли;

		ОпределитьКоличествоШагов();
		Если (Шаг = 1)Тогда
			Если ПереходГотово = 1 Тогда
				Этап = 3;
				Шаг  = 1;
				ОбработатьНажатиеВперед();
			ИначеЕсли ПереходГотово = 2 Тогда
				Этап = 2;
				Шаг  = 1;
				ОбработатьНажатиеВперед();
			Иначе
				УстановитьДоступность();

			КонецЕсли;
		Конецесли;
	ИначеЕсли (Шаг = 0) И (Этап = 0) Тогда //КНОПКА "ГОТОВО"
		Если ВывестиОтчет Тогда
			Печать();
		КонецЕсли;

		Если ЗапуститьБО Тогда
			Если ПервыйЗапуск Тогда

				//Запишем флаг показа быстрого освоения.
				Запись = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
				Запись.Пользователь = глЗначениеПеременной("глТекущийПользователь");
				Запись.Настройка 	= ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы;
				Запись.Значение 	= Истина;
				Запись.Записать(); 
			КонецЕсли;
			Обработки.БыстроеОсвоение.ПолучитьФорму().Открыть();
		КонецЕсли;

		Закрыть();
	КонецЕсли;
КонецПроцедуры // ОбработатьНажатиеВперед()

//ЭТАП 2, ШАГ 1

// Процедура обработчик события ПриИзменении переключателя СозданиеОрг1.
//
Процедура СозданиеОрг3ПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // СозданиеОрг3ПриИзменении()

// Процедура обработчик события ПриИзменении переключателя Орг.
//
Процедура ОргПриИзменении(Элемент)
	
	УстановитьДоступность();
	
	Если ЗначениеЗаполнено(Орг) Тогда
		СозданиеОрг1 = 3;
	КонецЕсли;
	
КонецПроцедуры // ОргПриИзменении()

// ЭТАП 2, ШАГ 2

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Организация.НаименованиеПолное) Тогда
		Организация.НаименованиеПолное = Организация.Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		Организация.НаименованиеПлательщикаПриПеречисленииНалогов = Организация.Наименование;
	КонецЕсли;
	ПриИзмененииРеквизитов(Элемент);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НаименованиеПолное.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)
	ПриИзмененииРеквизитов(Элемент);

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	ПриИзмененииРеквизитов(Элемент);


КонецПроцедуры

// Процедура устанавливает реквизит, фиксирующий события внесения изменений в настройки 
//  учета и соответствущий шагу этапа.
//
Процедура ПриИзмененииРеквизитов(Элемент)
	ЭтаФорма ["ВнесеныИзменения_Этап" + Строка(Этап)+"Шаг" + Строка(Шаг)] = Истина;
КонецПроцедуры // ПриИзмененииРеквизитов()

// ЭТАП2, ШАГ5

// Обработчик события Нажатие элемента формы НадписьБанкДляРасчетов 
//
Процедура НадписьБанкДляРасчетовНажатие(Элемент)
	
	ФормаБанка = ОсновнойБанковскийСчет.БанкДляРасчетов.ПолучитьФорму( , ЭлементыФормы.БИКБанкаДляРасчетов);
	ФормаБанка.Открыть();
	
КонецПроцедуры // НадписьБанкДляРасчетовНажатие()

// Обработчик события ПриИзменении элемента формы РедактироватьТекстПлательщика  
//
Процедура РедактироватьТекстПлательщикаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если РедактироватьТекстКорреспондента Тогда
		ОсновнойБанковскийСчет.ТекстКорреспондента = СформироватьТекстКорреспондента();
	Иначе
		ОсновнойБанковскийСчет.ТекстКорреспондента = "";
	КонецЕсли;
	
	ОбновитьНадписи();

КонецПроцедуры // РедактироватьТекстПлательщикаПриИзменении()

// Обработчик события ПриИзменении элемента формы НовыйОсновнойСчет
//
Процедура НовыйОсновнойСчетПриИзменении(Элемент)
	
	Если НЕ (СозданиеОрг1 = 2) Тогда
		Если НовыйОсновнойСчет Тогда
			ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			ОсновнойБанковскийСчет.Владелец = Организация.Ссылка;
			ЗаполнитьОсновнойБанковскийСчет();
		Иначе
			Если ЗначениеЗаполнено(Орг.ОсновнойБанковскийСчет) Тогда
				ОсновнойБанковскийСчет = Орг.ОсновнойБанковскийСчет.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	ОбновитьПредставлениеОсновногоБанковскогоСчета();
	
КонецПроцедуры // НовыйОсновнойСчетПриИзменении()

// Обработчик события ПриИзменении элемента формы ВидСчета
//
Процедура ВидСчетаПриИзменении(Элемент)
	
	Если ОсновнойБанковскийСчет.Наименование = АвтоНаименование Тогда
		ОсновнойБанковскийСчет.Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
    ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // ВидСчетаПриИзменении()

 // Обработчик события ПриИзменении реквизита ВалютаДенежныхСредств
 //
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)

	Если ОсновнойБанковскийСчет.ВалютаДенежныхСредств.Пустая() Тогда
		ОсновнойБанковскийСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ЭтоВалютныйСчет = ОсновнойБанковскийСчет.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета;
	
	Если ОсновнойБанковскийСчет.Наименование = АвтоНаименование Тогда
		ОсновнойБанковскийСчет.Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	
	ПриИзмененииРеквизитов(Элемент);
	УстановитьВидимость();
	ОбновитьНадписи();

КонецПроцедуры // ВалютаДенежныхСредствПриИзменении() 

 // Обработчик события ПриИзменении реквизита НомерСчета
 //
Процедура НомерСчетаПриИзменении(Элемент)
	
	НомерСчета = СокрЛП(НомерСчета);
	
	ТекстОшибки = "";
    ОсновнойБанковскийСчет.ЭтоВалютныйСчет = ЭтоВалютныйСчет;	
	Если НЕ ОсновнойБанковскийСчет.ПроверитьКорректностьНомераСчета(ОсновнойБанковскийСчет.НомерСчета, ТекстОшибки) Тогда
		Предупреждение(ТекстОшибки);
	КонецЕсли;
	
	Если ОсновнойБанковскийСчет.Наименование = АвтоНаименование Тогда
		ОсновнойБанковскийСчет.Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	ОбновитьНадписи();
    ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // НомерСчетаПриИзменении()

// Обработчик события ПриИзменении реквизита БИКБанка
//
Процедура БИКБанкаПриИзменении(Элемент)
	
	БИКБанка = СокрЛП(БИКБанка);
	
	НовыйБанк = НайтиБанкВКлассификаторе(БИКБанка, "Код",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		ОсновнойБанковскийСчет.Банк = НовыйБанк;
	КонецЕсли;
	
	БИКБанка      = СокрЛП(ОсновнойБанковскийСчет.Банк.Код);
	КоррСчетБанка = СокрП(ОсновнойБанковскийСчет.Банк.КоррСчет);
		
	УстановитьНаименованиеСчета();
	ПриИзмененииРеквизитов(Элемент);
	УстановитьВидимость();

КонецПроцедуры // БИКБанкаПриИзменении() 

// Обработчик события НачалоВыбора реквизита БИКБанка
//
Процедура БИКБанкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = ОсновнойБанковскийСчет.Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // БИКБанкаНачалоВыбора() 

// Обработчик события ОбработкаВыбора реквизита БИКБанка
//
Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОсновнойБанковскийСчет.Банк = ВыбранноеЗначение;
	
	БИКБанка      = СокрП(ОсновнойБанковскийСчет.Банк.Код);
	КоррсчетБанка = СокрП(ОсновнойБанковскийСчет.Банк.КоррСчет);
	
	УстановитьНаименованиеСчета();	
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);

КонецПроцедуры // БИКБанкаОбработкаВыбора()

// Обработчик события НачалоВыбора реквизита КоррСчетБанка
//
Процедура КоррСчетБанкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = ОсновнойБанковскийСчет.Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // КоррСчетБанкаНачалоВыбора()

// Обработчик события ОбработкаВыбора реквизита КоррСчетБанка
//
Процедура КоррСчетБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОсновнойБанковскийСчет.Банк = ВыбранноеЗначение;
	
	БИКБанка      = СокрП(ОсновнойБанковскийСчет.Банк.Код);
	КоррсчетБанка = СокрП(ОсновнойБанковскийСчет.Банк.КоррСчет);
	
	УстановитьНаименованиеСчета();	
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // КоррСчетБанкаОбработкаВыбора()

// Обработчик события ПриИзменении реквизита КоррСчетБанка
//
Процедура КоррСчетБанкаПриИзменении(Элемент)
	
	КоррСчетБанка = СокрЛП(КоррСчетБанка);
	
	НовыйБанк = НайтиБанкВКлассификаторе(КоррСчетБанка, "КоррСчет",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		ОсновнойБанковскийСчет.Банк = НовыйБанк;
	КонецЕсли;
	
	БИКБанка      = СокрП(ОсновнойБанковскийСчет.Банк.Код);
	КоррсчетБанка = СокрП(ОсновнойБанковскийСчет.Банк.КоррСчет);
		
	УстановитьНаименованиеСчета();	
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // КоррСчетБанкаПриИзменении()

// Обработчик события НачалоВыбора реквизита БИКБанкаДляРасчетов
//
Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = ОсновнойБанковскийСчет.БанкДляРасчетов;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // БИКБанкаДляРасчетовНачалоВыбора() 

// Обработчик события ОбработкаВыбора реквизита БИКБанкаДляРасчетов
//
Процедура БИКБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОсновнойБанковскийСчет.БанкДляРасчетов = ВыбранноеЗначение;
	
	БИКБанкаДляРасчетов      = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет);
	
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // БИКБанкаДляРасчетовОбработкаВыбора()

// Обработчик события ПриИзменении реквизита БИКБанкаДляРасчетов
//
Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	
	БИКБанкаДляРасчетов = СокрЛП(БИКБанкаДляРасчетов);
	
	НовыйБанк = НайтиБанкВКлассификаторе(БИКБанкаДляРасчетов, "Код",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		ОсновнойБанковскийСчет.БанкДляРасчетов = НовыйБанк;
	КонецЕсли;
	
	БИКБанкаДляРасчетов      = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет);
		
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // БИКБанкаДляРасчетовПриИзменении()

// Обработчик события НачалоВыбора реквизита КоррСчетБанкаДляРасчетов
//
Процедура КоррСчетБанкаДляРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = ОсновнойБанковскийСчет.БанкДляРасчетов;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // КоррСчетБанкаДляРасчетовНачалоВыбора()

// Обработчик события ОбработкаВыбора реквизита КоррСчетБанкаДляРасчетов
//
Процедура КоррСчетБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОсновнойБанковскийСчет.БанкДляРасчетов = ВыбранноеЗначение;
	
	БИКБанкаДляРасчетов      = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет);
	
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // КоррСчетБанкаДляРасчетовОбработкаВыбора()

// Обработчик события ПриИзменении реквизита КоррСчетБанкаДляРасчетов
//
Процедура КоррСчетБанкаДляРасчетовПриИзменении(Элемент)
	
	КоррсчетБанкаДляРасчетов = СокрЛП(КоррсчетБанкаДляРасчетов);
	
	НовыйБанк = НайтиБанкВКлассификаторе(КоррсчетБанкаДляРасчетов, "КоррСчет",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		ОсновнойБанковскийСчет.БанкДляРасчетов = НовыйБанк;
	КонецЕсли;
	
	БИКБанкаДляРасчетов      = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет);
		
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // КоррСчетБанкаДляРасчетовПриИзменении()

// Обработчик события ПриИзменении реквизита ПрямыеРасчеты
//
Процедура ПрямыеРасчетыПриИзменении(Элемент)
	
	Если ПрямыеРасчеты Тогда
		ОсновнойБанковскийСчет.БанкДляРасчетов = Справочники.Банки.ПустаяСсылка();
		БИКБанкаДляРасчетов      = "";
		КоррсчетБанкаДляРасчетов = "";
	КонецЕсли;
	
	УстановитьВидимость();
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // ПрямыеРасчетыПриИзменении()

// ЭТАП2, ШАГ6

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПриИзмененииРеквизитов(Элемент);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);

КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге);
	

КонецПроцедуры

// Обработчик нажатия на кнопку УстановитьОсновным командной панели КоманднаяПанельКонтактнаяИнформация.
//
Процедура КоманднаяПанельКонтактнаяИнформацияУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Процедура определяет текущий объект для отображения контактной информации
// и выводит контактную информацию для объекта в табличное поле КонтактнаяИнформация.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьКИ()
	
	Если НЕ Организация.ЭтоНовый()Тогда
		ОбъектКИ = Организация.Ссылка;
	конецЕсли;
	
	мОбъектКИ = ОбъектКИ;
	
	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
КонецПроцедуры

// ЭТАП2, ШАГ7
 
 // Процедура читает данные об ответственном лице.
//
// Параметры:
//  ОтветственноеЛицо - строка, наименование ответственного лица, 
//                      информацию о котором нужно прочитать.
//
Процедура ПрочитатьОтветственноеЛицо(ОтветственноеЛицо)

	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Организация.Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы[ОтветственноеЛицо].Значение = Неопределено;
		
		ЭлементыФормы["ОтветственныеЛицаОрганизации_Должность"+ОтветственноеЛицо].Значение = Неопределено;
	Иначе
		ЭлементыФормы[ОтветственноеЛицо].Значение       = СрезПоследних[0].ФизическоеЛицо;
		
		ЭлементыФормы["ОтветственныеЛицаОрганизации_Должность"+ОтветственноеЛицо].Значение = СрезПоследних[0].Должность;
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// ЭТАП2, ШАГ8

// Процедура заполняет элемент формы СписокВыбораНалоговогоПериодаНДС.
//
Процедура ЗаполнитьСписокВыбораНалоговогоПериодаНДС()
	
	СписокПеречисления = Новый СписокЗначений;

	СписокПеречисления.Добавить(Перечисления.Периодичность.Месяц);
	СписокПеречисления.Добавить(Перечисления.Периодичность.Квартал);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.НДСНалоговыйПериод, СписокПеречисления);

КонецПроцедуры // ЗаполнитьСписокВыбораНалоговогоПериодаНДС()

// Процедура - обработчик события "ПриИзменении" поля ввода "НДСНалоговыйПериод".
// 
Процедура НДСНалоговыйПериодПриИзменении(Элемент)
	
	Если НалоговыйУчетЗапись.НДСНалоговыйПериод.Пустая() Тогда
		НДСНалоговыйПериод = Перечисления.Периодичность.Месяц;
	КонецЕсли;
	ПриИзмененииРеквизитов(Элемент);
КонецПроцедуры // НДСНалоговыйПериодПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "НДСНалоговыйПериод".
// 
Процедура НДСНалоговыйПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораНалоговогоПериодаНДС();
	
КонецПроцедуры // НДСНалоговыйПериодНачалоВыбораИзСписка()

// Процедура устанавливает доступность элементов формы ПартионныйУчетНДСвРазрезеСерийИХарактеристик
//  ПартионныйУчетНДСвРазрезеСкладов
//
Процедура УправлениеДоступностьюФлага_ПартионныйУчетНДСвРазрезеСерийИХарактеристик_Складов()
	
	ЭлементыФормы.ПартионныйУчетНДСвРазрезеСерийИХарактеристик.Доступность = НалоговыйУчетЗапись.СложныйУчетНДС;
	ЭлементыФормы.ПартионныйУчетНДСвРазрезеСкладов.Доступность = НалоговыйУчетЗапись.СложныйУчетНДС;
	
	Если не НалоговыйУчетЗапись.СложныйУчетНДС и НалоговыйУчетЗапись.ПартионныйУчетНДСвРазрезеСерийИХарактеристик Тогда
		НалоговыйУчетЗапись.ПартионныйУчетНДСвРазрезеСерийИХарактеристик = Ложь;
	КонецЕсли; 
	
	Если не НалоговыйУчетЗапись.СложныйУчетНДС и НалоговыйУчетЗапись.ПартионныйУчетНДСвРазрезеСкладов Тогда
		НалоговыйУчетЗапись.ПартионныйУчетНДСвРазрезеСкладов = Ложь;
	КонецЕсли; 
	
КонецПроцедуры // УправлениеДоступностьюФлага_ПартионныйУчетНДСвРазрезеСерийИХарактеристик_Складов()

// Процедура обработчик события ПриИзменении элемента формы Период
//
Процедура ПериодПриИзменении(Элемент)
	
	Если НалоговыйУчетЗапись.Период >= '20080101' И НалоговыйУчетЗапись.НДСНалоговыйПериод = Перечисления.Периодичность.Месяц Тогда
		НалоговыйУчетЗапись.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал;
	КонецЕсли;
	
	ПриИзмененииРеквизитов(Элемент);
	
КонецПроцедуры // ПериодПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы СложныйУчетНДС
//
Процедура СложныйУчетНДСПриИзменении(Элемент)
	УправлениеДоступностьюФлага_ПартионныйУчетНДСвРазрезеСерийИХарактеристик_Складов();
	ПриИзмененииРеквизитов(Элемент);
КонецПроцедуры // СложныйУчетНДСПриИзменении()

// Процедура заполняет реквизит обработки НалоговыйУчетЗапись
//
Процедура ЗаполнитьНалоговыйУчет()
	НалоговыйУчетЗапись.Организация = Организация.Ссылка;
	НалоговыйУчетЗапись.Прочитать();
	
КонецПроцедуры // ЗаполнитьНалоговыйУчет()

// Функция получает дату последней записи регистра сведений УчетнаяПолитикаНалоговыйУчет
//
// Параметры:
//  ОрганизацияСсылка - организация, на которую определяется последняя запись регистра
//		Тип - Справочник ссылка Организация
//
// Возращаемое значение - период записи.
//
Функция ПолучитьДатуПоследнейЗаписиНалоговогоУчета(ОрганизацияСсылка)
	Результат = Неопределено;
	Отбор     = Новый Структура("Организация",ОрганизацияСсылка);
	
	СрезПоследних = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(ТекущаяДата(),Отбор);
	Если СрезПоследних.Количество()=1 Тогда
		Результат = СрезПоследних [0].Период;
	Конецесли;
	Возврат Результат;
	
КонецФункции // ПолучитьДатуПоследнейЗаписиНалоговогоУчета()

// Процедура обработчик события ПриИзменении элемента формы НоваяЗаписьНалоговогоУчета
//
Процедура НоваяЗаписьНалоговогоУчетаПриИзменении(Элемент)
	НалоговыйУчетЗапись = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьМенеджерЗаписи();
	
	НалоговыйУчетЗапись.МоментОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке;
	НалоговыйУчетЗапись.НДСНалоговыйПериод = ?(ТекущаяДата() < '20080101', Перечисления.Периодичность.Месяц, Перечисления.Периодичность.Квартал);
	НалоговыйУчетЗапись.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	НалоговыйУчетЗапись.НДСРежимУчетаРаспределенныхОплат = Перечисления.НДСРежимУчетаРаспределенныхОплат.Приоритет_НДСМожетБытьПринятКВычету;
	НалоговыйУчетЗапись.Период = ТекущаяДата();
	
КонецПроцедуры // НоваяЗаписьНалоговогоУчетаПриИзменении

// ЭТАП2, ШАГ9

// Процедура заполняет элемент формы ПолеТабличногоДокумента2
//
Процедура ЗаполнениеТаблицыЗаписи()
	Область = ЭлементыФормы.ПолеТабличногоДокумента2.Область(1,4,1,7);
	Область.Объединить();
	
	Область.Имя   = "Раздел";
	Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Область.Текст = "Раздел";

	Область = ЭлементыФормы.ПолеТабличногоДокумента2.Область(1,1,1,3);
	Область.Объединить();
	
	Область.Имя   = "ВнесеныИзменения";
	Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Область.Текст = ?(ВнесеныИзменения_Этап2,"Есть изменения","");

	Область = ЭлементыФормы.ПолеТабличногоДокумента2.Область(1,8,1,10);
	Область.Объединить();
	
	Область.Имя   = "ПроцентЗаполнения";
	Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Область.Текст = "Процент заполнения";

	НомерСтроки = 3;
	Отступ      = "	";
	
	
	Для Каждого Страница ИЗ ЭлементыФормы["ШагиЭтапа2"].Страницы Цикл
			
			НомерШага = ЭлементыФормы["ШагиЭтапа" + Строка(2)].Страницы.Индекс(Страница)+1;
			Если НомерШага > 1 И НомерШага < 9 Тогда
				Область = ЭлементыФормы.ПолеТабличногоДокумента2.Область(НомерСтроки,5,НомерСтроки,7);
				Область.Объединить();
				
				Область.Имя   = Строка(2) + "_" + Строка(НомерШага);
				Область.Шрифт = Новый Шрифт(, 10, ЭтаФорма ["ВнесеныИзменения_Этап2Шаг"+Строка(НомерШага)], Истина, Ложь, Ложь);
				Область.Текст = Страница.Заголовок;
				
				Область     = ЭлементыФормы.ПолеТабличногоДокумента2.Область(НомерСтроки,2,НомерСтроки,2);
				Область.Имя = Строка(НомерСтроки-1);
				
				Если ЭтаФорма ["ВнесеныИзменения_Этап2Шаг"+Строка(НомерШага)] Тогда
					Рисунок          = Рисунки ["Рис"+Строка(НомерШага)];
					Рисунок.Картинка = БиблиотекаКартинок.Важно;
					Рисунок.Расположить(Область);
				Конецесли;
				
				Область = ЭлементыФормы.ПолеТабличногоДокумента2.Область(НомерСтроки,8,НомерСтроки,9);
				Область.Объединить();
				
				Область.Имя   = "ПроцентЗаполнения"+Строка(НомерСтроки-1);
				Область.Шрифт = Новый Шрифт(, 10, Ложь, Истина, Ложь, Ложь);
				
				ПроцентЗаполнения = Окр(УстановитьПроцентЗаполненияШага(2,НомерШага));
				Область.Текст     = Строка(ПроцентЗаполнения)+ "%";
				
				Если ПроцентЗаполнения = 0 Тогда
					Область.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				ИначеЕсли ПроцентЗаполнения = 100 Тогда
					Область.ЦветТекста = ЦветПолногоЗаполнения;
				КонецЕсли;

				
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
	КонецЦикла;
	

КонецПроцедуры // ЗаполнениеТаблицыЗаписи()

// Функция возвращает процент заполнения реквизитов, значения которых переданы в массиве.
//
// Параметры:
//  МассивРеквизитов - Массив, содержащий проверяемые значения.
//
// Возвращаемое значение:
//  Число - процент заполнения реквизитов.
//
Функция ПолучитьПроцентЗаполненияРеквизитов(МассивРеквизитов)

	КоличествоЗаполненныхРеквизитов = 0;

	Для Каждого Реквизит Из МассивРеквизитов Цикл
		КоличествоЗаполненныхРеквизитов = КоличествоЗаполненныхРеквизитов + ?(ЗначениеЗаполнено(Реквизит), 1, 0);
	КонецЦикла;

	КоличествоРеквизитов = МассивРеквизитов.Количество();

	Возврат 100 * ?(КоличествоРеквизитов = 0, 1, КоличествоЗаполненныхРеквизитов / КоличествоРеквизитов);

КонецФункции // ПолучитьПроцентЗаполненияРеквизитов()

// Функция устанавливает процент заполнения элементов формы шага этапа
//
// Параметры:
//  ЭтапЧисло - этап обработки.
//		Тип - число.
//  ШагЧисло - шаг этапа.
//		Тип - Число.
//
// Возращаемое значение - процент заполнение шага этапа.
//
Функция УстановитьПроцентЗаполненияШага(ЭтапЧисло,ШагЧисло)

	МассивРеквизитов = Новый Массив;

	Если Этапчисло = 2 Тогда
		Если ШагЧисло = 2 Тогда
			МассивРеквизитов.Добавить(Организация.Наименование);
			МассивРеквизитов.Добавить(Организация.НаименованиеПолное);
			МассивРеквизитов.Добавить(Организация.ЮрФизЛицо);
			МассивРеквизитов.Добавить(Организация.Префикс);
		ИначеЕсли ШагЧисло = 3 Тогда
			МассивРеквизитов.Добавить(Организация.НаименованиеПлательщикаПриПеречисленииНалогов);
			МассивРеквизитов.Добавить(Организация.СвидетельствоДатаВыдачи);
			МассивРеквизитов.Добавить(Организация.СвидетельствоСерияНомер);
		ИначеЕсли ШагЧисло = 4 Тогда
			МассивРеквизитов.Добавить(Организация.ИНН);
			МассивРеквизитов.Добавить(Организация.ОГРН);
			МассивРеквизитов.Добавить(Организация.КодПоОКПО);
			МассивРеквизитов.Добавить(Организация.КодИМНС);
			МассивРеквизитов.Добавить(Организация.КодПоОКАТО);
			МассивРеквизитов.Добавить(Организация.КодПоОКТМО);

			Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
				МассивРеквизитов.Добавить(Организация.КПП);
			КонецЕсли;
		ИначеЕсли ШагЧисло = 5 Тогда
			МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.Наименование);
			МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.НомерСчета);
			МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.ВидСчета);
     		МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.ВалютаДенежныхСредств);
 			МассивРеквизитов.Добавить(КоррсчетБанка);
			МассивРеквизитов.Добавить(БИКБанка);
			МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.ДатаОткрытия);
			Если ОсновнойБанковскийСчет.ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета Тогда
				МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.НомерИДатаРазрешения);
			КонецЕсли;
			Если РедактироватьТекстКорреспондента Тогда
				МассивРеквизитов.Добавить(ОсновнойБанковскийСчет.ТекстКорреспондента);
			КонецЕсли;
			Если Не ПрямыеРасчеты Тогда
				МассивРеквизитов.Добавить(КоррсчетБанкаДляРасчетов);
				МассивРеквизитов.Добавить(БИКБанкаДляРасчетов);			
			КонецЕсли;
		ИначеЕсли ШагЧисло = 6 Тогда
			Для каждого Запись Из НаборКонтактнойИнформации Цикл
				МассивРеквизитов.Добавить(Запись.Представление);
			КонецЦикла;
		ИначеЕсли ШагЧисло = 7 Тогда
			МассивРеквизитов.Добавить(ОтветсвенныеЛицаОрганизации_Руководитель);
			МассивРеквизитов.Добавить(ОтветсвенныеЛицаОрганизации_ГлавныйБухгалтер);
			МассивРеквизитов.Добавить(ОтветсвенныеЛицаОрганизации_Кассир);
			МассивРеквизитов.Добавить(ОтветственныеЛицаОрганизации_ДолжностьГлавныйБухгалтер);
			МассивРеквизитов.Добавить(ОтветственныеЛицаОрганизации_ДолжностьКассир);
			МассивРеквизитов.Добавить(ОтветственныеЛицаОрганизации_ДолжностьРуководитель);
		ИначеЕсли ШагЧисло = 8 Тогда
			МассивРеквизитов.Добавить(НалоговыйУчетЗапись.Период);
			МассивРеквизитов.Добавить(НалоговыйУчетЗапись.НДСНалоговыйПериод);
			МассивРеквизитов.Добавить(НалоговыйУчетЗапись.МоментОпределенияНалоговойБазыНДС);
			МассивРеквизитов.Добавить(НалоговыйУчетЗапись.НДСРежимУчетаРаспределенныхОплат);
		КонецЕсли;
	ИначеЕсли ЭтапЧисло = 3 Тогда
		Если ШагЧисло = 2 Тогда
			МассивРеквизитов.Добавить(КонстантыНабор.ВалютаРегламентированногоУчета);
			МассивРеквизитов.Добавить(КонстантыНабор.ВалютаУправленческогоУчета);
		ИначеЕсли ШагЧисло = 3 Тогда
			МассивРеквизитов.Добавить(КонстантыНабор.ТипЦенПлановойСебестоимостиНоменклатуры);
			МассивРеквизитов.Добавить(КонстантыНабор.УказаниеСкладовВТабличнойЧастиДокументов);
			МассивРеквизитов.Добавить(КонстантыНабор.УказаниеЗаказовВТабличнойЧастиДокументов);
			МассивРеквизитов.Добавить(КонстантыНабор.СтратегияАвторезервированияНоменклатурыПоЗаказам);
			МассивРеквизитов.Добавить(КонстантыНабор.СпособКонтроляДнейЗадолженности);
			МассивРеквизитов.Добавить(КонстантыНабор.ДополнительнаяКолонкаПечатныхФормДокументов);
			МассивРеквизитов.Добавить(КонстантыНабор.ЕдиницаИзмеренияВеса);
			МассивРеквизитов.Добавить(КонстантыНабор.ЕдиницаИзмеренияОбъема);
			МассивРеквизитов.Добавить(КонстантыНабор.НачалоРабочегоДня);
			МассивРеквизитов.Добавить(КонстантыНабор.ОкончаниеРабочегоДня);
			МассивРеквизитов.Добавить(КонстантыНабор.ИнтервалПроверкиНапоминанийВСекундах);
		ИначеЕсли ШагЧисло = 5 Тогда
			МассивРеквизитов.Добавить(УчетнаяПолитика.СпособОценкиМПЗ);
			МассивРеквизитов.Добавить(УчетнаяПолитика.СтратегияСписанияПартийТоваровПоСтатусам);
			МассивРеквизитов.Добавить(УчетнаяПолитика.ПараметрABCКлассификацииПокупателей);
			МассивРеквизитов.Добавить(УчетнаяПолитика.ПараметрРаспределенияПокупателейПоСтадиямВзаимоотношений);
		ИначеЕсли ШагЧисло = 6 Тогда
			Если УчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам Тогда
				МассивРеквизитов.Добавить(УчетнаяПолитика.СпособИспользованияНакопительныхСкидок);
				МассивРеквизитов.Добавить(УчетнаяПолитика.ПериодичностьРасчетаНакопленияСкидок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ПолучитьПроцентЗаполненияРеквизитов(МассивРеквизитов);

КонецФункции // УстановитьПроцентЗаполненияШага()

// Процедура записывает реквизит Организация.
//
Процедура ЗаписатьОрганизацию()

	Попытка
		Организация.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры // ЗаписатьОрганизацию()

// Процедура записывает реквизит БанковскийСчет.
//
Процедура ЗаписатьБанковскийСчет()
	Попытка
		ОсновнойБанковскийСчет.Владелец = Организация.Ссылка;
		ОсновнойБанковскийСчет.Записать();
		Организация.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет.Ссылка;
		Организация.Записать();
   	Исключение
	КонецПопытки;

КонецПроцедуры // ЗаписатьБанковскийСчет

// Процедура записывает реквизит контактную информацию Организации.
//
Процедура ЗаписатьСведенияКонтактнойИнформации()
	Отказ = Организация.ЭтоНовый();
	Если Отказ И НЕ ЗначениеЗаполнено(мОбъектКИ) И ТипЗнч(мОбъектКИ) = Тип("СправочникСсылка.Организации") Тогда
		мОбъектКИ = Организация.Ссылка;
	КонецЕсли;
	
	Если мОбъектКИ <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);
	КонецЕсли;

КонецПроцедуры // ЗаписатьСведенияКонтактнойИнформации()

// Процедура записывает Ответственных лиц Организации.
//
Процедура ЗаписатьОтветственныхЛиц()
	ОтветственныеЛица = Новый Массив;
	ОтветственныеЛица.Добавить("Руководитель");
	ОтветственныеЛица.Добавить("ГлавныйБухгалтер");
	ОтветственныеЛица.Добавить("Кассир");
	ОтветственныеЛицаОрганизации.Отбор.СтруктурнаяЕдиница.Значение      = Организация.Ссылка;
	ОтветственныеЛицаОрганизации.Отбор.СтруктурнаяЕдиница.Использование = Истина;
	ОтветственныеЛицаОрганизации.Прочитать();
	
	
	
	Для каждого ОтветственноеЛицо Из ОтветственныеЛица Цикл
		Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
		Отбор.СтруктурнаяЕдиница  = Организация.Ссылка;
		Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
		СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);
		
		Если СрезПоследних.Количество() < 1 Тогда
			Если ЗначениеЗаполнено(ЭлементыФормы[ОтветственноеЛицо].Значение) Тогда
				ЗаписьРегистра = ОтветственныеЛицаОрганизации.Добавить();
				ЗаписьРегистра.Период             = ТекущаяДата();
				ЗаписьРегистра.СтруктурнаяЕдиница = Организация.Ссылка;
				ЗаписьРегистра.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
				ЗаписьРегистра.ФизическоеЛицо     = ЭлементыФормы[ОтветственноеЛицо].Значение;
				ЗаписьРегистра.Должность          = ЭлементыФормы["ОтветственныеЛицаОрганизации_Должность"+ОтветственноеЛицо].Значение;
			КонецЕсли;
		Иначе
			Если ЭлементыФормы[ОтветственноеЛицо].Значение       <> СрезПоследних[0].ФизическоеЛицо ИЛИ
			   ЭлементыФормы["ОтветственныеЛицаОрганизации_Должность"+ОтветственноеЛицо].Значение <> СрезПоследних[0].Должность Тогда
				ЗаписьРегистра = ОтветственныеЛицаОрганизации.Добавить();
				ЗаписьРегистра.Период             = ТекущаяДата();
				ЗаписьРегистра.СтруктурнаяЕдиница = Организация.Ссылка;
				ЗаписьРегистра.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
				ЗаписьРегистра.ФизическоеЛицо     = ЭлементыФормы[ОтветственноеЛицо].Значение;
				ЗаписьРегистра.Должность          = ЭлементыФормы["ОтветственныеЛицаОрганизации_Должность"+ОтветственноеЛицо].Значение;
			
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
	ОтветственныеЛицаОрганизации.Записать();

КонецПроцедуры // ЗаписатьОтветственныхЛиц

// Процедура записывает учетную политику (налоговый учет) Организации.
//
Процедура ЗаписатьНалоговыйУчет()
	
	НалоговыйУчетЗапись.Организация = Организация.Ссылка;
	НалоговыйУчетЗапись.Записать(Истина);

КонецПроцедуры  // ЗаписатьНалоговыйУчет()

// Процедура обработчик события Нажатие элемента формы  ЗаписьСведенийОрганизации
//
Процедура ЗаписьСведенийОрганизацииНажатие(Элемент)
	ЭлементыФормы.ПолеТабличногоДокумента2.Области ["ВнесеныИзменения"].Текст = "Запись проведена";
	Если ВнесеныИзменения_Этап2Шаг2 ИЛИ ВнесеныИзменения_Этап2Шаг3 ИЛИ ВнесеныИзменения_Этап2Шаг4 Тогда
		ЗаписатьОрганизацию();
		Если ВнесеныИзменения_Этап2Шаг2 Тогда
			
			Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис2"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
		КонецЕсли;
			
		Если ВнесеныИзменения_Этап2Шаг3 Тогда
			Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис3"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
		КонецЕсли;
		Если ВнесеныИзменения_Этап2Шаг4 Тогда
			Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис4"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
			
		КонецЕсли;
	КонецЕсли;
	Если ВнесеныИзменения_Этап2Шаг5 Тогда
		ЗаписатьБанковскийСчет();
		Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис5"];
		Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
	КонецЕсли;
	Если ВнесеныИзменения_Этап2Шаг6 Тогда
		ЗаписатьСведенияКонтактнойИнформации();
		Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис6"];
		Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
	КонецЕсли;

	Если ВнесеныИзменения_Этап2Шаг7 Тогда
		ЗаписатьОтветственныхЛиц();
		Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис7"];
		Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
	КонецЕсли;
	Если ВнесеныИзменения_Этап2Шаг8 Тогда
		ЗаписатьНалоговыйУчет();
		Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки ["Рис8"];
		Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;

	КонецЕсли;
	ИзмененияЗаписаны_Этап2 = Истина;
КонецПроцедуры // ЗаписьСведенийОрганизацииНажатие()

// Процедура обработчик события Нажатие элемента формы  ПроверкаОрганизации
//
Процедура ПроверкаОрганизацииНажатие(Элемент)
	Организация.ПолучитьФорму().Открыть();

КонецПроцедуры // ПроверкаОрганизацииНажатие()

// Процедура обработчик события Нажатие элемента формы  НадписьПроверкаНУ
//
Процедура НадписьПроверкаНУНажатие(Элемент)
	НалоговыйУчетЗапись.ПолучитьФорму().Открыть();
КонецПроцедуры // НадписьПроверкаНУНажатие

// Процедура обработчик события Нажатие элемента формы  НадписьПроверкаОтветственныхЛиц
//
Процедура НадписьПроверкаОтветственныхЛицНажатие(Элемент)
	
	Форма = ОтветственныеЛицаОрганизации.ПолучитьФорму("ФормаСписка");
	Форма.Отбор.СтруктурнаяЕдиница.Значение      = Организация.Ссылка;
	Форма.Отбор.СтруктурнаяЕдиница.Использование = Истина;
	Форма.Открыть();
КонецПроцедуры // НадписьПроверкаОтветственныхЛицНажатие()

// ЭТАП3, ШАГ2

// Процедура проверяет возможность редактирования валюты
// регламентированного учета
//
Процедура ПроверкаДоступностиВалютыУчета()

	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаРегламентированногоУчета)
		 ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаУправленческогоУчета)
		 Тогда
		// Если нет прав на изменение хотя бы одной константы - закрываем доступ на все
		ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = Истина;
		ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = Истина;
		ЭлементыФормы.ВалютаМеждународногоУчета.ТолькоПросмотр      = Истина;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	Для каждого Док из Метаданные.Документы Цикл
		Если Док.Имя = "УстановкаСоответствияСчетовБУиНУ" или Док.Имя = "УстановкаСоответствияСчетовБУиМСФО" Тогда
			Продолжить;
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "","", "ОБЪЕДИНИТЬ ВСЕ") + "
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ" + Док.Имя + ".Ссылка
		|ИЗ
		|	Документ." + Док.Имя + " КАК " + "Документ" + Док.Имя + "
		|";

	КонецЦикла;

	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДокументы = НЕ РезультатЗапроса.Пустой();
	Исключение
		ЕстьДокументы = Истина;
	КонецПопытки;

	ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;
	ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = ЕстьДокументы;


	Если ЕстьДокументы Тогда
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = "После ввода документов валюты учета изменять нельзя.";
	Иначе
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = "Валюты учета можно изменять пока не введены документы.";
	КонецЕсли;

КонецПроцедуры // ПроверкаДоступностиВалютыУчета()

// Функция определяет дату последней записи регистра сведений "Учетная политика".
//
// Параметры:
//  Нет
//
// Возращаемое значение - дата последней записи регистра.
//
Функция ПолучитьДатуПоследнейЗаписиУчетнойПолитики()
	Результат = Неопределено;
	СрезПоследних = РегистрыСведений.УчетнаяПолитика.СрезПоследних(ТекущаяДата());
	Если СрезПоследних.Количество()=1 Тогда
		Результат = СрезПоследних [0].Период;
	Конецесли;
	Возврат Результат;
	
КонецФункции // ПолучитьДатуПоследнейЗаписиУчетнойПолитики()

// ЭТАП3, ШАГ5

// Процедура обработчик события ПриИзменении элемента формы  НоваяЗаписьУчетнойПолитики
//
Процедура НоваяЗаписьУчетнойПолитикиПриИзменении(Элемент)
	УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
	УчетнаяПолитика.Период = ТекущаяДата();
КонецПроцедуры // НоваяЗаписьУчетнойПолитикиПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы  Период1
//
Процедура Период1ПриИзменении(Элемент)
	ПериодЗаписи = ЭлементыФормы.Период1.Значение;
	УчетнаяПолитика.Прочитать();
	Если НЕ УчетнаяПолитика.Выбран() Тогда
		НоваяЗаписьУчетнойПолитики = Истина;
		УчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
		УчетнаяПолитика.Период = ПериодЗаписи;

	КонецЕсли;
	ПриИзмененииРеквизитов(Элемент);

КонецПроцедуры // Период1ПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы  ИспользоватьСкидкиПоДисконтнойКарте
//
Процедура ИспользоватьСкидкиПоДисконтнойКартеПриИзменении(Элемент)
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	ПриИзмененииРеквизитов(Элемент);
КонецПроцедуры // ИспользоватьСкидкиПоДисконтнойКартеПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы  ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
//
Процедура ИспользоватьНакопительныеСкидкиПоДисконтнымКартамПриИзменении(Элемент)
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	ПриИзмененииРеквизитов(Элемент);

КонецПроцедуры // ИспользоватьНакопительныеСкидкиПоДисконтнымКартамПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы  ПериодичностьРасчетаНакопленияСкидок
//
Процедура ПериодичностьРасчетаНакопленияСкидокПриИзменении(Элемент)
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	ПриИзмененииРеквизитов(Элемент);
КонецПроцедуры // ПериодичностьРасчетаНакопленияСкидокПриИзменении()

// ЭТАП3, ШАГ7

// Процедура заполняет элемент формы ПолеТабличногоДокумента3
//
Процедура ЗаполнениеТаблицыЗаписиЭтапа3()
	ВнесеныИзменения_Этап3 = ВнесеныИзменения_Этап3Шаг2 ИЛИ ВнесеныИзменения_Этап3Шаг3 ИЛИ
			                     ВнесеныИзменения_Этап3Шаг4 ИЛИ ВнесеныИзменения_Этап3Шаг5 ИЛИ
			                     ВнесеныИзменения_Этап3Шаг6;

	Область = ЭлементыФормы.ПолеТабличногоДокумента3.Область(1,4,1,7);
	Область.Объединить();
	
	Область.Имя   = "Раздел";
	Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Область.Текст = "Раздел";

	Область = ЭлементыФормы.ПолеТабличногоДокумента3.Область(1,1,1,3);
	Область.Объединить();
	
	Область.Имя   = "ВнесеныИзменения";
	Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Область.Текст = ?(ВнесеныИзменения_Этап2,"Есть изменения","");

	Область = ЭлементыФормы.ПолеТабличногоДокумента3.Область(1,8,1,10);
	Область.Объединить();
	
	Область.Имя   = "ПроцентЗаполнения";
	Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Область.Текст = "Процент заполнения";

	НомерСтроки = 3;
	Отступ      = "	";
	
	Для Каждого Страница ИЗ ЭлементыФормы["ШагиЭтапа3"].Страницы Цикл
			
			НомерШага = ЭлементыФормы["ШагиЭтапа" + Строка(3)].Страницы.Индекс(Страница)+1;
			Если НомерШага > 1 И НомерШага < 7 Тогда
				Область = ЭлементыФормы.ПолеТабличногоДокумента3.Область(НомерСтроки,5,НомерСтроки,7);
				Область.Объединить();
				
				Область.Имя   = Строка(2) + "_" + Строка(НомерШага);
				Область.Шрифт = Новый Шрифт(, 10, ЭтаФорма ["ВнесеныИзменения_Этап3Шаг"+Строка(НомерШага)], Истина, Ложь, Ложь);
				Область.Текст = Страница.Заголовок;
				
				Область     = ЭлементыФормы.ПолеТабличногоДокумента3.Область(НомерСтроки,2,НомерСтроки,2);
				Область.Имя = Строка(НомерСтроки-1);
				Если ЭтаФорма ["ВнесеныИзменения_Этап3Шаг"+Строка(НомерШага)] Тогда
					Рисунок          = Рисунки1 ["Рис"+Строка(НомерШага)];
					Рисунок.Картинка = БиблиотекаКартинок.Важно;
					Рисунок.Расположить(Область);
				Конецесли;
				
				Область = ЭлементыФормы.ПолеТабличногоДокумента3.Область(НомерСтроки,8,НомерСтроки,9);
				Область.Объединить();
				
				Область.Имя       = "ПроцентЗаполнения"+Строка(НомерСтроки-1);
				Область.Шрифт     = Новый Шрифт(, 10, Ложь, Истина, Ложь, Ложь);
				ПроцентЗаполнения = Окр(УстановитьПроцентЗаполненияШага(3,НомерШага));
				Область.Текст     = Строка(ПроцентЗаполнения)+ "%";
				Если ПроцентЗаполнения = 0 Тогда
					Область.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				ИначеЕсли ПроцентЗаполнения = 100 Тогда
					Область.ЦветТекста = ЦветПолногоЗаполнения;
				КонецЕсли;

				
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры // ЗаполнениеТаблицыЗаписиЭтапа3()

// Процедура обработчик события Нажатие элемента формы ЗаписьУчетнойПолитики
//
Процедура ЗаписьУчетнойПолитикиНажатие(Элемент)
	
	ЭлементыФормы.ПолеТабличногоДокумента3.Области ["ВнесеныИзменения"].Текст = "Запись проведена";
	Если ВнесеныИзменения_Этап3Шаг2 ИЛИ ВнесеныИзменения_Этап3Шаг3 ИЛИ ВнесеныИзменения_Этап3Шаг4 Тогда
		КонстантыНабор.Записать();
		Если ВнесеныИзменения_Этап3Шаг2 Тогда
			
			Рисунок          = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки ["Рис2"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
		КонецЕсли;
			
		Если ВнесеныИзменения_Этап3Шаг3 Тогда
			Рисунок          = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки ["Рис3"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
		КонецЕсли;
		Если ВнесеныИзменения_Этап3Шаг4 Тогда
			Рисунок          = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки ["Рис4"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
			
		КонецЕсли;
	КонецЕсли;
	Если ВнесеныИзменения_Этап3Шаг5 ИЛИ ВнесеныИзменения_Этап3Шаг6 Тогда
		УчетнаяПолитика.Записать();

		Если ВнесеныИзменения_Этап3Шаг5 Тогда
			
			Рисунок          = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки ["Рис5"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
		КонецЕсли;
		
		Если ВнесеныИзменения_Этап3Шаг6 Тогда
			
			Рисунок          = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки ["Рис6"];
			Рисунок.Картинка = БиблиотекаКартинок.СохранитьФайл;
		КонецЕсли;


	КонецЕсли;
	ИзмененияЗаписаны_Этап3 = Истина;

КонецПроцедуры // ЗаписьУчетнойПолитикиНажатие()

// Процедура обработчик события Нажатие элемента формы НадписьПроверкаПараметровУчета
//
Процедура НадписьПроверкаПараметровУчетаНажатие(Элемент)
	КонстантыНабор.ПолучитьФорму().Открыть();
КонецПроцедуры // НадписьПроверкаПараметровУчетаНажатие()

// Процедура обработчик события Нажатие элемента формы НадписьПроверкаУчетнаяПолитика
//
Процедура НадписьПроверкаУчетнаяПолитикаНажатие(Элемент)
	УчетнаяПолитика.ПолучитьФорму().Открыть();
КонецПроцедуры // НадписьПроверкаУчетнаяПолитикаНажатие()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Базовая = (Метаданные.Имя = "УправлениеТорговлейБазовая");

СписокВидСчета = ЭлементыФормы.ВидСчета.СписокВыбора;
СписокВидСчета.Добавить("Расчетный");
СписокВидСчета.Добавить("Депозитный");
СписокВидСчета.Добавить("Ссудный");
СписокВидСчета.Добавить("Иной");

ЦветПолногоЗаполнения = Новый Цвет(33,255,33); 

Рисунки = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки;
Для НомерРисунка = 2 По 8 Цикл
	Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок = ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки [ЭлементыФормы.ПолеТабличногоДокумента2.Рисунки.Количество()-1];
	Рисунок.Имя = "Рис"+Строка(НомерРисунка);
	Рисунок.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСлева = Ложь;
	Рисунок.ГраницаСнизу = Ложь;
	Рисунок.ГраницаСправа= Ложь;
	
	
КонецЦикла;

Рисунки1 = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки;
Для НомерРисунка = 2 По 7 Цикл
	Рисунки1.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок = ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки [ЭлементыФормы.ПолеТабличногоДокумента3.Рисунки.Количество()-1];
	Рисунок.Имя = "Рис"+Строка(НомерРисунка);
	Рисунок.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСлева = Ложь;
	Рисунок.ГраницаСнизу = Ложь;
	Рисунок.ГраницаСправа= Ложь;
КонецЦикла;
