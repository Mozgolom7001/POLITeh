
Перем мВидДокументов;

// Процедура выполняет необходимые действия при изменении вида документов.
//
Процедура ПриИзмененииВидаДокументов()

	Если ВидДокументов <> мВидДокументов Тогда
		Если ЗначениеЗаполнено(Документ) Тогда
			Ответ = Вопрос("Поле выбора документа будет очищено." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ВидДокументов = мВидДокументов;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Документ = Документы[СокрЛП(ВидДокументов)].ПустаяСсылка();
		мВидДокументов = ВидДокументов;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииВидаДокументов()

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	МетаданныеДокументы = Метаданные.Документы;

	СписокВидов = ЭлементыФормы.ВидДокументов.СписокВыбора;

	СписокВидов.Добавить("ЗаказПокупателя"              , МетаданныеДокументы.ЗаказПокупателя.Синоним);
	СписокВидов.Добавить("РеализацияТоваровУслуг"       , МетаданныеДокументы.РеализацияТоваровУслуг.Синоним);
	СписокВидов.Добавить("ПоступлениеТоваровУслуг"      , МетаданныеДокументы.ПоступлениеТоваровУслуг.Синоним);
	СписокВидов.Добавить("ПеремещениеТоваров"           , МетаданныеДокументы.ПеремещениеТоваров.Синоним);
	СписокВидов.Добавить("ПриходныйОрдерНаТовары"       , МетаданныеДокументы.ПриходныйОрдерНаТовары.Синоним);
	СписокВидов.Добавить("РасходныйОрдерНаТовары"       , МетаданныеДокументы.РасходныйОрдерНаТовары.Синоним);
	СписокВидов.Добавить("ВозвратТоваровОтПокупателя"   , МетаданныеДокументы.ВозвратТоваровОтПокупателя.Синоним);
	СписокВидов.Добавить("ИнвентаризацияТоваровНаСкладе", МетаданныеДокументы.ИнвентаризацияТоваровНаСкладе.Синоним);

	Если мИнициализироватьНастройкиПриОткрытии Тогда
		ВидДокументов = СписокВидов[0].Значение;
		ПриИзмененииВидаДокументов();

		ВосстановитьНастройкиПриОткрытии();
	Иначе
		ЭлементВидДокументов = СписокВидов.НайтиПоЗначению(ВидДокументов);
		Если ЭлементВидДокументов <> Неопределено Тогда
			ВидДокументов = ЭлементВидДокументов.Значение;
		КонецЕсли;
	КонецЕсли;

	мВидДокументов = ВидДокументов;

КонецПроцедуры // ПриОткрытии()

// Обработчик события "Очистка" реквизита "ВидДокументов".
//
Процедура ВидДокументовОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ВидДокументовОчистка()

// Обработчик события "ПриИзменении" реквизита "ВидДокументов".
//
Процедура ВидДокументовПриИзменении(Элемент)

	ПриИзмененииВидаДокументов();
	ОбновитьПостроительОтчета();

КонецПроцедуры // ВидДокументовПриИзменении()

// Обработчик события "Нажатие" кнопки "Печать".
//
Процедура ОсновныеДействияФормыПечать(Кнопка)

	Печать();

КонецПроцедуры // ОсновныеДействияФормыПечать()

// Обработчик события "НачалоВыбора" реквизита "Положение" в ТЧ Печать.
//
Процедура ТаблицаНастройкиПолейПечатьПоложениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.ТаблицаНастройкиПолейПечать.ТекущиеДанные;

	СписокДляВыбора = Новый СписокЗначений;

	Для Каждого ЭлементСписка Из мСписокПоложенийДляПечати Цикл
		СписокДляВыбора.Добавить(ЭлементСписка.Значение);
	КонецЦикла;

	Результат = ВыбратьИзСписка(СписокДляВыбора, Элемент, СписокДляВыбора.НайтиПоЗначению(ТекущаяСтрока.Положение));

	Если Результат <> Неопределено Тогда
		ТекущаяСтрока.Положение = Результат.Значение;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ТаблицаНастройкиПолейПечатьПоложениеНачалоВыбора()

// Обработчик события "Очистка" реквизита "Положение" в ТЧ Печать.
//
Процедура ТаблицаНастройкиПолейПечатьПоложениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ТаблицаНастройкиПолейПечатьПоложениеОчистка()

// Обработчик события "Нажатие" кнопки "ОбновитьНастройкиПечати" в командной панели ТЧ Печать.
//
Процедура КоманднаяПанельПечатьОбновитьНастройкиПечати(Кнопка)

	ОбновитьНастройкиПечати();

КонецПроцедуры // КоманднаяПанельПечатьОбновитьНастройкиПечати()

// Обработчик события "ПослеУдаления" строки в ТЧ Поля.
//
Процедура ПоляПослеУдаления(Элемент)

	ОбновитьНастройкиПечати();

КонецПроцедуры // ПоляПослеУдаления()

// Обработчик события "ПриОкончанииРедактирования" строки в ТЧ Поля.
//
Процедура ПоляПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		ОбновитьНастройкиПечати();
	КонецЕсли;

КонецПроцедуры // ПоляПриОкончанииРедактирования()

// Обработчик события "Нажатие" кнопки "ВосстановитьНастройки".
//
Процедура ДействияФормыВосстановитьНастройки(Кнопка)

	ВосстановитьНастройки();

КонецПроцедуры // ДействияФормыВосстановитьНастройки()

// Обработчик события "Нажатие" кнопки "СохранитьНастройки".
//
Процедура ДействияФормыСохранитьНастройки(Кнопка)

	СохранитьНастройки();

КонецПроцедуры // ДействияФормыСохранитьНастройки()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Перем СохраненнаяНастройка;

	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено И мТекущаяНастройка.Свойство("СохранятьАвтоматически") И мТекущаяНастройка.СохранятьАвтоматически Тогда
		СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);

		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь"           , глЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта"             , Строка(ЭтотОбъект));
		СтруктураНастройки.Вставить("НаименованиеНастройки"  , мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка"   , СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически" , мТекущаяНастройка.СохранятьАвтоматически);

		УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);
	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()

// Обработчик события "ПриИзменении" флажка "ИспользоватьСвойства".
//
Процедура ИспользоватьСвойстваПриИзменении(Элемент)

	ОбновитьПостроительОтчета();
	ОбновитьНастройкиПечати();

КонецПроцедуры // ИспользоватьСвойстваПриИзменении()

// Обработчик события "Очистка" реквизита "Документ".
//
Процедура ДокументОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Документ = Документы[СокрЛП(ВидДокументов)].ПустаяСсылка();

КонецПроцедуры // ДокументОчистка()
