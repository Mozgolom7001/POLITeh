
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ТекстВопроса = 
	"Выполнение данной обработки может занять продолжительное время
	|и является необратимой операцией. Настоятельно рекомендуется предварительно ознакомиться
	|cо справочной информацией. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьОбработку();

КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт
	
    СообщитьОСостоянииОбновления("Учет НДС", "Заполнение реквизита «Документ-основание (поступление и др.)» в документах «Ввод начальных остатков НДС».");

	ЗаполнениеДокументовОснований();
	
	СообщитьОСостоянииОбновления("Учет НДС", "Заполнение реквизита «Документ-основание (поступление и др.)» в документах «Ввод начальных остатков НДС» завершено");
	
 КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Не ПолучитьРазрешениеНаОткрытиеФормы();
	
КонецПроцедуры

Процедура ЗаполнениеДокументовОснований()
	
	СоответствиеДокументов = Новый Соответствие;
	СписокИсходныхОбъектов = Новый СписокЗначений;
	СписокНовыхОбъектов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка
	               |ИЗ
	               |	Документ.ВводНачальныхОстатковНДС.ДанныеПоСФ КАК ВводНачальныхОстатковНДСДанныеПоСФ
	               |ГДЕ
	               |	ВводНачальныхОстатковНДСДанныеПоСФ.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным)
	               |	И ВводНачальныхОстатковНДСДанныеПоСФ.СчетФактура ССЫЛКА Документ.СчетФактураВыданный";
				   
	Результат = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("ДокументОплаты");
	
	Для Каждого ДокументВНО Из Результат Цикл
		
		Сообщить("Обновление документов расчетов в «" + ДокументВНО.Ссылка + "»");
		
		ДокументВНООбъект = ДокументВНО.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаДокумента Из ДокументВНООбъект.ДанныеПоСФ Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокумента.СчетФактура) И ТипЗнч(СтрокаДокумента.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				ДокументРасчетов = СоответствиеДокументов[СтрокаДокумента.СчетФактура];
				Если ДокументРасчетов = Неопределено Тогда
					
					СтрокаПараметров = Новый Структура("Контрагент, ДоговорКонтрагента, ДатаВходящего, НомерВходящего, ДатаСф", 
													СтрокаДокумента.Контрагент, СтрокаДокумента.ДоговорКонтрагента, СтрокаДокумента.ДатаПлатежноРасчетногоДокумента, СтрокаДокумента.НомерПлатежноРасчетногоДокумента, СтрокаДокумента.ДатаСФ);
					ДокументРасчетов = ДокументВНООбъект.СоздатьДокументРасчетов(СтрокаПараметров, ДокументВНО.Ссылка);
					ДокументРасчетов.Комментарий = "Создан автоматически документом <"+СокрЛП("Ввод начальных остатков НДС " + ДокументВНООбъект.Номер+" от "+Формат(ДокументВНООбъект.Дата,"ДЛФ =Д"))+">";
					ДокументРасчетов.Записать(РежимЗаписиДокумента.Запись);
					
					Если ДокументВНО.Ссылка.ПометкаУдаления Тогда
						ДокументРасчетов.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
					
					СоответствиеДокументов.Вставить(СтрокаДокумента.СчетФактура, ДокументРасчетов);
					
				КонецЕсли;
				
				СписокИсходныхОбъектов.Добавить(СтрокаДокумента.СчетФактура);
				СписокНовыхОбъектов.Добавить(ДокументРасчетов.Ссылка);
				
				СчетФактураДокумент = СтрокаДокумента.СчетФактура.ПолучитьОбъект();
				СтрокаВНО = СчетФактураДокумент.ДокументыОснования.Найти(ДокументВНО.Ссылка);
				Если СтрокаВНО = Неопределено Тогда
					СчетФактураДокумент.ДокументыОснования.Добавить().ДокументОснование = ДокументРасчетов.Ссылка;
				Иначе
					СтрокаВНО.ДокументОснование = ДокументРасчетов.Ссылка;
				КонецЕсли;
				СчетФактураДокумент.ДокументОснование = СчетФактураДокумент.ДокументыОснования[0].ДокументОснование;
				СчетФактураДокумент.Записать(РежимЗаписиДокумента.Запись);
				Если ДокументВНО.Ссылка.ПометкаУдаления Тогда
					СчетФактураДокумент.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				
				СтруктураПоиска.ДокументОплаты = СтрокаДокумента.СчетФактура;
				СтрокаДокумента.СчетФактура = ДокументРасчетов.Ссылка;
				СтрокиРасчетов = ДокументВНООбъект.РасчетыСКонтрагентами.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаРасчетов Из СтрокиРасчетов Цикл
					СтрокаРасчетов.ДокументОплаты = ДокументРасчетов.Ссылка;
				КонецЦикла;
				
			КонецЕсли;			
			
		КонецЦикла;
		
		ДокументВНООбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	ЗаменаСсылокНаОбъекты(СписокИсходныхОбъектов, СписокНовыхОбъектов);
	
КонецПроцедуры

// Выполняет проверку соответствия свойства объекта заменяемой ссылке.
// Если свойство объекта совпадает с заменяемой ссылкой, то выполняется
// замена на новую ссылку
//
Процедура ЗаменаСсылкиНаОбъект(Объект, ИмяСвойства, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
	
	Если ТипЗнч(Объект[ИмяСвойства]) = ТипСсылки Тогда
		Если Объект[ИмяСвойства] = ЗаменяемаяСсылка Тогда
			Объект[ИмяСвойства] = НоваяСсылка;
			ОбъектИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

// Выполняет проверку соответствия свойства объекта заменяемой ссылке.
// Если свойство объекта совпадает с заменяемой ссылкой, то выполняется
// замена на новую ссылку
//
Процедура ЗаменаСсылкиНаСубконто(Субконто, ТипСсылки, ЗаменяемаяСсылка, НоваяСсылка, ОбъектИзменен)
	
	ОсмотрелиВсеЗначения = Ложь;
	
	Пока Не ОсмотрелиВсеЗначения Цикл
		Для каждого КлючЗначение из Субконто Цикл
		
			Если ТипЗнч(КлючЗначение.Значение) = ТипСсылки Тогда
				Если КлючЗначение.Значение = ЗаменяемаяСсылка Тогда
					Субконто.Вставить(КлючЗначение.Ключ, НоваяСсылка);
					ОбъектИзменен = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(КлючЗначение.Ключ) = ТипСсылки Тогда
				Если КлючЗначение.Ключ = ЗаменяемаяСсылка Тогда
					Субконто.Вставить(НоваяСсылка, КлючЗначение.Значение);
					Субконто.Удалить(КлючЗначение.Ключ);
					ОбъектИзменен = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ОсмотрелиВсеЗначения = Истина;
	КонецЦикла;
		
КонецПроцедуры // ЗаменаСсылкиНаОбъект()

// Выполняет поиск ссылок на каждый объект из переданного списка исходных объектов.
// Все найденные ссылки заменяются ссылкой на новый объект, соответствующий исходному.
//
// Поиск и замена ссылок производится по коллекциям метаданных:
// - Реквизиты;
// - Табличные части;
// - Измерения;
// - Ресурсы;
// - Родители;
// - Владельца.
//
Процедура ЗаменаСсылокНаОбъекты(СписокИсходныхОбъектов, СписокНовыхОбъектов)
	
	Состояние("Выполняется поиск и замена ссылок на счета учета с измененной аналитикой...");
	
	Если СписокИсходныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборыЗаписей = Новый Структура;
	
	МассивИсходныхОбъектов = СписокИсходныхОбъектов.ВыгрузитьЗначения();
	Ссылки = НайтиПоСсылкам(МассивИсходныхОбъектов);

	Для каждого Ссылка из Ссылки Цикл
		
		// Получение ссылки на новый объект
		ТипСсылки = ТипЗнч(Ссылка.Ссылка);
		ИсходныйОбъект = СписокИсходныхОбъектов.НайтиПоЗначению(Ссылка.Ссылка);
		ИндексОбъектаВСписке = СписокИсходныхОбъектов.Индекс(ИсходныйОбъект);
		НоваяСсылка = СписокНовыхОбъектов[ИндексОбъектаВСписке].Значение;
		
		// Получение имени коллекции объектов метаданных
		ПолноеИмяОбъектаМД = Ссылка.Метаданные.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмяОбъектаМД, ".");
		ИмяКоллекцииОбъектовМД = Лев(ПолноеИмяОбъектаМД, ПозицияТочки - 1);
		
		// Обработка констант
		Если ИмяКоллекцииОбъектовМД = "Константа" Тогда
			Попытка
				Константы[Ссылка.Метаданные.Имя].Установить(НоваяСсылка);
				Состояние("Обработан объект <" + Ссылка.Данные + ">");
				
			Исключение
				Сообщить(
				"Объект не обработан автоматически: " + ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + ">.
				|	Необходимо вручную заменить значение на " + НоваяСсылка, СтатусСообщения.ОченьВажное);
			КонецПопытки;
			
			Продолжить;
		КонецЕсли;
			
		// Обработка последовательностей
		Если ИмяКоллекцииОбъектовМД = "Последовательность" Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработка независимых регистров сведений
		Если ИмяКоллекцииОбъектовМД = "РегистрСведений" Тогда
			Объект = РегистрыСведений[Ссылка.Метаданные.Имя].СоздатьМенеджерЗаписи();
			ОбъектИзменен = Ложь;
			
			Измерения = Ссылка.Метаданные["Измерения"];
			Для каждого Измерение из Измерения Цикл
				Объект[Измерение.Имя] = Ссылка.Данные[Измерение.Имя];
			КонецЦикла;
			
			Объект.Период = Ссылка.Данные.Период;
			Объект.Прочитать();
			
			Если Объект.Выбран() Тогда
				Измерения = Ссылка.Метаданные["Измерения"];
				Для каждого Измерение из Измерения Цикл
					ЗаменаСсылкиНаОбъект(Объект, Измерение.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
				
				Реквизиты = Ссылка.Метаданные["Реквизиты"];
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
				
			    Ресурсы = Ссылка.Метаданные["Ресурсы"];
				Для каждого Ресурс из Ресурсы Цикл
					ЗаменаСсылкиНаОбъект(Объект, Ресурс.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
				
				Попытка
					Объект.Записать();
					Состояние("Обработан объект <" + Ссылка.Данные + ">");
				
				Исключение
					Сообщить(
					"Объект не обработан автоматически: " + ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + ">. 
					|	Необходимо вручную заменить значение " + Ссылка.Ссылка + " на " + НоваяСсылка, СтатусСообщения.ОченьВажное);
				КонецПопытки;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Обработка всех прочих объектов, не являющихся константами и независимыми регистрами сведений
		Объект = Ссылка.Данные.ПолучитьОбъект();
		ОбъектИзменен = Ложь;
		
		// Обработка реквизитов
		Реквизиты = Ссылка.Метаданные["Реквизиты"];
		Для каждого Реквизит из Реквизиты Цикл
			ЗаменаСсылкиНаОбъект(Объект, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
		КонецЦикла;
		
		// Обработка табличных частей
		ТабличныеЧасти = Ссылка.Метаданные["ТабличныеЧасти"];
		Для каждого ТабличнаяЧасть из ТабличныеЧасти Цикл
			Реквизиты = ТабличнаяЧасть["Реквизиты"];
			ТЧ = Объект[ТабличнаяЧасть.Имя];
			Для каждого СтрокаТЧ из ТЧ Цикл
				Для каждого Реквизит из Реквизиты Цикл
					ЗаменаСсылкиНаОбъект(СтрокаТЧ, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// Обработка движений документов
		Если ИмяКоллекцииОбъектовМД = "Документ" Тогда
			Для Каждого Регистр из Ссылка.Метаданные.Движения Цикл
				// Получение имени коллекции объектов метаданных
				ПолноеИмяРегистра = Регистр.ПолноеИмя();
				ПозицияТочки = Найти(ПолноеИмяРегистра, ".");
				ИмяКоллекцииРегистров = Лев(ПолноеИмяРегистра, ПозицияТочки - 1);
				
				Если ИмяКоллекцииРегистров = "РегистрНакопления" Тогда
					Менеджер = РегистрыНакопления[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрСведений" Тогда
					Менеджер = РегистрыСведений[Регистр.Имя];
					
				ИначеЕсли ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
					Менеджер = РегистрыБухгалтерии[Регистр.Имя];
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				НаборЗаписей = Неопределено;
				Если Не НаборыЗаписей.Свойство(ИмяКоллекцииРегистров+Регистр.Имя, НаборЗаписей) Тогда
					НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
					
				Иначе
					НаборЗаписей.Очистить();
				КонецЕсли;
				
				НаборЗаписей.Отбор.Регистратор.Установить(Ссылка.Данные);
				НаборЗаписей.Прочитать();
				
				НаборЗаписейИзменен = Ложь;
				
				Для каждого Запись из НаборЗаписей Цикл
					Измерения = Регистр["Измерения"];
					Для каждого Измерение из Измерения Цикл
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Балансовый = Измерение.Балансовый;
							
						Иначе
							Балансовый = Истина;
						КонецЕсли;
						
						Если Балансовый Тогда
							ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							
						Иначе
							ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Дт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаОбъект(Запись, Измерение.Имя+"Кт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЕсли;
					КонецЦикла;
					
					Реквизиты = Регистр["Реквизиты"];
					Для каждого Реквизит из Реквизиты Цикл
						ЗаменаСсылкиНаОбъект(Запись, Реквизит.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
					КонецЦикла;
					
				    Ресурсы = Регистр["Ресурсы"];
					Для каждого Ресурс из Ресурсы Цикл
						Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
							Балансовый = Ресурс.Балансовый;
								
						Иначе
							Балансовый = Истина;
						КонецЕсли;
							
						Если Балансовый Тогда
							ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
						Иначе
							ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Дт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаОбъект(Запись, Ресурс.Имя+"Кт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЕсли;
					КонецЦикла;
				
					Если ИмяКоллекцииРегистров = "РегистрБухгалтерии" Тогда
						Если Регистр.Корреспонденция Тогда
							
							ЗаменаСсылкиНаОбъект(Запись, "СчетДт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаОбъект(Запись, "СчетКт", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаСубконто(Запись.СубконтоДт, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаСубконто(Запись.СубконтоКт, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
								
						Иначе
							ЗаменаСсылкиНаОбъект(Запись, "Счет", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
							ЗаменаСсылкиНаСубконто(Запись.Субконто, ТипСсылки, Ссылка.Ссылка, НоваяСсылка, НаборЗаписейИзменен);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если НаборЗаписейИзменен Тогда
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Владельцы
		Если ИмяКоллекцииОбъектовМД = "Справочник" Тогда
			ЗаменаСсылкиНаОбъект(Объект, "Владелец", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен);
		КонецЕсли;
		
		// Родители
		Если (ИмяКоллекцииОбъектовМД = "Справочник") или
			 (ИмяКоллекцииОбъектовМД = "ПланВидовХарактеристик") или
			 (ИмяКоллекцииОбъектовМД = "ПланСчетов") Тогда
			 
			ЗаменаСсылкиНаОбъект(Объект, "Родитель", ТипСсылки, Ссылка.Ссылка, НоваяСсылка, ОбъектИзменен); 
		КонецЕсли;
		 
		Если ОбъектИзменен Тогда
			Попытка
				Объект.Записать();
				Состояние("Обработан объект <" + Ссылка.Данные + ">");
				
			Исключение
				Сообщить(
				"Объект не обработан автоматически: " + ИмяКоллекцииОбъектовМД + " <" + Ссылка.Метаданные.Синоним + "> <" + Ссылка.Данные + ">. 
				|	Необходимо вручную заменить значение " + Ссылка.Ссылка + " на " + НоваяСсылка, СтатусСообщения.ОченьВажное);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	Состояние("");
	
КонецПроцедуры // ЗаменаСсылокНаОбъект()
