
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ВыполнитьОбработку();
КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт
	
	КонвертироватьНастройкиОграниченияПравДоступа();

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = не ПолучитьРазрешениеНаОткрытиеФормы();
	
КонецПроцедуры

// Процедура переноса настроек прав доступа пользователей
//
Процедура КонвертироватьНастройкиОграниченияПравДоступа()
	
	ОбновитьКодыСправочникаГруппыПользователей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Код, Ссылка КАК Пользователь ИЗ Справочник.Пользователи ГДЕ НЕ ЭтоГруппа И Не ПометкаУдаления";
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();	
	ТаблицаПользователей.Колонки.Добавить("ПользовательИБ");
	ТаблицаПользователей.Колонки.Добавить("ГруппаПользователя");
	ТаблицаПользователей.Индексы.Добавить("Пользователь");	
	
	ПометитьНаУдалениеСуществующиеГруппыПользователей();
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого СтрокаПользователя ИЗ ТаблицаПользователей Цикл
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(СтрокаПользователя.Код));
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПользователя.ПользовательИБ = ПользовательИБ;		
		ОбработатьРолиПользователя(СтрокаПользователя);
		
	КонецЦикла;
	
	СоздатьГруппыДоступаКонтрагентов();
	
	ПереносЗначенийПравДоступаПользователей(ТаблицаПользователей);
	
	ОбновитьСоставРолейПользователей();	
	
	УстановитьКонстантуИспользоватьОграниченияПравДоступаНаУровнеЗаписей();
		
КонецПроцедуры // КонвертироватьНастройкиОграниченияПравДоступа()

// Процедура обновляет коды справочника ГруппыПользователей,
// если в нем присутствуют элементы со старым форматом кода
//
Процедура ОбновитьКодыСправочникаГруппыПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ МАКСИМУМ(Код) КАК МаксимумКод ИЗ Справочник.ГруппыПользователей";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаКодаСправочникаГруппыПользователей = Метаданные.Справочники.ГруппыПользователей.ДлинаКода;
	
	Если СтрДлина(СокрЛП(Выборка.МаксимумКод)) = ДлинаКодаСправочникаГруппыПользователей Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ ЕСТЬNULL(МАКСИМУМ(ГруппыПользователей.Код), """") КАК МаксимумКод ИЗ Справочник.ГруппыПользователей КАК ГруппыПользователей ГДЕ Код ПОДОБНО ""0%""";
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКод = Число(Выборка.МаксимумКод) + 1;
	
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПользователей";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Код = Формат(ТекущийКод, "ЧЦ=" + ДлинаКодаСправочникаГруппыПользователей + "; ЧВН=; ЧГ=");
		Попытка
			Объект.Записать();		
		Исключение
			ВызватьИсключение "Обновление кодов справочника ""Группы пользователей"" завершилось неудачно. Выполните перенумерацю вручную.";
		КонецПопытки;
		ТекущийКод = ТекущийКод + 1;			
	КонецЦикла;
	
	
КонецПроцедуры // ОбновитьКодыСправочникаГруппыПользователей()


// Процедура выполняет установку пометки удаления для всех старых групп пользователей
//
Процедура ПометитьНаУдалениеСуществующиеГруппыПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПользователей ГДЕ НЕ Предопределенный";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Группа = Выборка.Ссылка.ПолучитьОбъект();
		Группа.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
КонецПроцедуры // ПометитьНаУдалениеСуществующиеГруппыПользователей()

// Для каждой пары "Пользователь-Роль" создается группа пользователей, переносятся старые настройки механизма
// дополнительнных прав пользователей.
// Параметры:
//  СтрокаПользователя - обрабатываемая строка "таблицы пользователей"
//
Процедура ОбработатьРолиПользователя(СтрокаПользователя)
	
	РолиПользователя = СтрокаПользователя.ПользовательИБ.Роли;
	
	Если РолиПользователя.Содержит(Метаданные.Роли.ПолныеПрава) Тогда		
		ПереносСтарыхНастроекДополнительныхПрав(СтрокаПользователя.Пользователь, Метаданные.Роли.ПолныеПрава);
		Возврат;		
	КонецЕсли;
		
КонецПроцедуры // ОбработатьРолиПользователя()

// Для созданной группы пользователей переносятся настройки механихма дополнительных прав
// Параметры:
//  ГруппаПользователя - группа пользователей
//  Роль - роль, соответствующая группе пользователей
//
Процедура ПереносСтарыхНастроекДополнительныхПрав(ГруппаПользователя, Роль)
	
	Если Роль = Метаданные.Роли.ПолныеПрава Тогда
		ЗначениеНабораПрав  = Перечисления.УдалитьНаборПравПользователей.ПолныеПрава;
	Иначе
		ИмяРоли = Роль.Имя;
		Если Лев(ИмяРоли, 7) = "Удалить" Тогда
			ИмяРоли = Сред(ИмяРоли, 8);
		КонецЕсли;
		ЗначениеНабораПрав = Перечисления.УдалитьНаборПравПользователей[СтрЗаменить(ИмяРоли, "СОграничениемПравДоступа", "")];
	КонецЕсли;
	
	СтарыйНабор = РегистрыСведений.УдалитьЗначенияПравПользователя.СоздатьНаборЗаписей();
	СтарыйНабор.Отбор.НаборПрав.Установить(ЗначениеНабораПрав);
	СтарыйНабор.Прочитать();
	
	НовыйНабор = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьНаборЗаписей();
	НовыйНабор.Отбор.Пользователь.Установить(ГруппаПользователя);
	ТаблицаСтарогоНабора = СтарыйНабор.Выгрузить();
	ТаблицаСтарогоНабора.Колонки.Добавить("Пользователь");
	ТаблицаСтарогоНабора.ЗаполнитьЗначения(ГруппаПользователя, "Пользователь");
	НовыйНабор.Загрузить(ТаблицаСтарогоНабора);
	НовыйНабор.Записать();	

	
КонецПроцедуры // ПереносСтарыхНастроекДополнительныхПрав()

// Процедура переноса настроек ограничения прав доступа 
// Параметры:
//  ГруппаПользователя - группа пользователей
//  Роль - роль, соответствующая группе пользователей
//
Процедура ПереносЗначенийПравДоступаПользователей(ТаблицаПользователей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.ГруппаДоступаККонтрагенту КАК ОбъектДоступа,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.Контрагенты) КАК ВидОбъектаДоступа,
	|	ЕСТЬNULL(ПользователиГруппы.Пользователь, УдалитьПраваДоступаПользователей.Пользователь) КАК Пользователь,
	|	Контрагенты.ГруппаДоступаККонтрагенту КАК ВладелецПравДоступа,
	|	МАКСИМУМ(УдалитьПраваДоступаПользователей.Запись) КАК Запись,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава) КАК ВидНаследованияПравДоступаИерархическихСправочников
	|ИЗ
	|	РегистрСведений.УдалитьПраваДоступаПользователей КАК УдалитьПраваДоступаПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.ПользователиГруппы КАК ПользователиГруппы
	|		ПО ПользователиГруппы.Ссылка = УдалитьПраваДоступаПользователей.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = УдалитьПраваДоступаПользователей.ОбъектДоступа
	|ГДЕ
	|	УдалитьПраваДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.Контрагенты
	|
	|СГРУППИРОВАТЬ ПО
	|	Контрагенты.ГруппаДоступаККонтрагенту,
	|	ЕСТЬNULL(ПользователиГруппы.Пользователь, УдалитьПраваДоступаПользователей.Пользователь),
	|	Контрагенты.ГруппаДоступаККонтрагенту
	|ИТОГИ ПО
	|	ОбъектДоступа";
	
	ВыборкаПоОбъектамДоступа = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОбъектамДоступа.Следующий() Цикл
		Набор = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();
		Набор.Отбор.ОбъектДоступа.Установить(ВыборкаПоОбъектамДоступа.ОбъектДоступа);
		Выборка = ВыборкаПоОбъектамДоступа.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивСтрокПользователя = ТаблицаПользователей.НайтиСтроки(Новый Структура("Пользователь", Выборка.Пользователь));
			Для Каждого СтрокаГруппыПользователя ИЗ МассивСтрокПользователя Цикл
				Если ЗначениеЗаполнено(СтрокаГруппыПользователя.ГруппаПользователя) Тогда
					НоваяЗапись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, , "Пользователь");
					НоваяЗапись.Пользователь = СтрокаГруппыПользователя.ГруппаПользователя;
				КонецЕсли;
			КонецЦикла;			
		КонецЦикла;	
		Если Набор.Количество() > 0 Тогда
			Набор.Записать(Истина);
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

// Процедура создания для групп доступа для всех физ. лица, для которых
// было настроено ограничения прав доступа
//
Процедура СоздатьГруппыДоступаКонтрагентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	УдалитьПраваДоступаПользователей.ОбъектДоступа
	               |ИЗ
	               |	РегистрСведений.УдалитьПраваДоступаПользователей КАК УдалитьПраваДоступаПользователей
	               |ГДЕ
	               |	УдалитьПраваДоступаПользователей.ОбъектДоступа ССЫЛКА Справочник.Контрагенты
	               |	И (НЕ ВЫРАЗИТЬ(УдалитьПраваДоступаПользователей.ОбъектДоступа КАК Справочник.Контрагенты).ЭтоГруппа)
	               |	И ВЫРАЗИТЬ(УдалитьПраваДоступаПользователей.ОбъектДоступа КАК Справочник.Контрагенты).ГруппаДоступаККонтрагенту <> ЗНАЧЕНИЕ(Справочник.ГруппыДоступаККонтрагентам.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Контрагент = Выборка.ОбъектДоступа.ПолучитьОбъект();
		
		ГруппаКонтрагента = Справочники.ГруппыДоступаККонтрагентам.СоздатьЭлемент();
		ГруппаКонтрагента.Наименование = Контрагент.Наименование;
		ГруппаКонтрагента.Записать();
		
		Контрагент.ГруппаДоступаККонтрагенту = ГруппаКонтрагента.Ссылка;
		Контрагент.ОбменДанными.Загрузка = Истина;
		Контрагент.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьГруппыДоступаКонтрагентов();

// Процедура снятия у пользователей устаревших ролей
Процедура ОбновитьСоставРолейПользователей()
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ ИЗ ПользователиИБ Цикл
		
		Роли = ПользовательИБ.Роли;
		ДобавляемыеРоли = Новый Массив;
		Для Каждого Роль ИЗ Роли Цикл
			Если Лев(Роль.Имя, 7) = "Удалить" Тогда
				НоваяРоль = Метаданные.Роли.Найти(СтрЗаменить(Сред(Роль.Имя, 8), "СОграничениемПравДоступа", ""));
				Если НоваяРоль <> Неопределено Тогда					
					ДобавляемыеРоли.Добавить(НоваяРоль);
				КонецЕсли;				
			КонецЕсли;			
		КонецЦикла;		
		
		ЗаписыватьПользователя = Ложь;
		Для Каждого НоваяРоль ИЗ ДобавляемыеРоли Цикл
			Если НЕ Роли.Содержит(НоваяРоль) Тогда
				Роли.Добавить(НоваяРоль);
			КонецЕсли;
			Роли.Удалить(Метаданные.Роли["Удалить" + НоваяРоль.Имя + "СОграничениемПравДоступа"]);
			ЗаписыватьПользователя = Истина;
		КонецЦикла;		
		
		Если Не Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Роли.Добавить(Метаданные.Роли.Пользователь);
			ЗаписыватьПользователя = Истина;
		КонецЕсли;	
		
		Если ЗаписыватьПользователя Тогда
			ПользовательИБ.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьСоставРолейПользователей()

// Процедура устанавливает значение константы ИспользоватьОграниченияПравДоступаНаУровнеЗаписей
// в зависимости от заполненности регистра сведений НазначениеВидовОбъектовДоступа.
// Если данный регистр пуст, можно считать что ограничение доступа на уровне записей не используется.
//
Процедура УстановитьКонстантуИспользоватьОграниченияПравДоступаНаУровнеЗаписей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрСведений.НазначениеВидовОбъектовДоступа";
	Результат = Запрос.Выполнить();
	Константы.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей.Установить(НЕ Результат.Пустой());
	
КонецПроцедуры

