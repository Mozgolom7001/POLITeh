
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ТекстВопроса = 
	"ВНИМАНИЕ!!!
	|Перед выполнением процедуры обновления настроек обмена данными рекомендуется ознакомиться со справочной информацией о действиях выполняемых обработкой. 
	|Продолжить?";
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработку();

КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт
	
    СообщитьОСостоянииОбновления("","Обновление настроек обмена данными");

	ОбновитьНастройкиОбменаДанными();
	
	СообщитьОСостоянииОбновления("","Обновление настроек обмена данными завершено");	
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Не ПолучитьРазрешениеНаОткрытиеФормы();	
		
КонецПроцедуры

Процедура ПроизвестиПопыткуУдаленияРегЗаданияНоИдентификатору(ИдентификаторРегЗадания, СсылкаНаНастройкуОбмена)
	
	Если Не ЗначениеЗаполнено(ИдентификаторРегЗадания) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегЗадания));
		
		Если РегЗадание = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РегЗадание.Удалить();
		
	Исключение
		
		Сообщить("Ошибка при удалении регламентного задания для настройки обмена данными: " + Строка(СсылкаНаНастройкуОбмена) + "
		|Описание ошибки: " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

Функция ОпределитьПоданнымВыборкиНужноСоздаватьНастройкуАвтообмена(Выборка, НаличиеРегЗадания, НаличиеРегОтложДвижения)
	
	Если Выборка.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.УдалитьРегламентноеЗаданиеОтложенныеДвижения) Тогда
		НаличиеРегОтложДвижения = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Выборка.УдалитьРегламентноеЗаданиеОтложенныеДвижения)) <> Неопределено;
	Иначе
		НаличиеРегОтложДвижения = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Выборка.УдалитьРегламентноеЗадание) Тогда
		НаличиеРегЗадания = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Выборка.УдалитьРегламентноеЗадание)) <> Неопределено;
	Иначе
		НаличиеРегЗадания = Ложь;
	КонецЕсли;
	
	Если НЕ Выборка.ПроизводитьПриемСообщений
		И НЕ Выборка.ПроизводитьОтправкуСообщений
		И НЕ НаличиеРегОтложДвижения Тогда
		
		Возврат Ложь;	
		
	КонецЕсли;
	
	Если ПустаяСтрока(Выборка.УдалитьВыполнятьОбменПриПоявленииФайла)
		И НЕ Выборка.УдалитьВыполнятьАвтоматически
		И НЕ Выборка.УдалитьКаждыйЗапускПрограммы
		И НЕ Выборка.УдалитьКаждоеЗавершениеРаботыСПрограммой
		И ПустаяСтрока(Выборка.УдалитьКаталогПроверкиДоступности)
		И НЕ НаличиеРегзадания
		И НЕ НаличиеРегОтложДвижения Тогда
		
		Возврат Ложь;
		
	КонецЕсли;		
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьБазовуюНастройкуАвтоОбмена(ОбъектОсновнойНастройки, Выборка)
	
	НастройкаАвтоматическогоОбмена = Справочники.НастройкиВыполненияОбмена.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НастройкаАвтоматическогоОбмена, ОбъектОсновнойНастройки,,"Родитель,Владелец,Код");
	НастройкаАвтоматическогоОбмена.СообщенияНеЯвляющиесяОшибками.Загрузить(ОбъектОсновнойНастройки.СообщенияНеЯвляющиесяОшибками.Выгрузить());
	
	НастройкаАвтоматическогоОбмена.ДинамическиИзменятьИнтервалМеждуОбменами = ОбъектОсновнойНастройки.УдалитьДинамическиИзменятьИнтервалМеждуОбменами;
	НастройкаАвтоматическогоОбмена.ВыполнятьОбменПриПоявленииФайла = ОбъектОсновнойНастройки.УдалитьВыполнятьОбменПриПоявленииФайла;
	НастройкаАвтоматическогоОбмена.Ответственный = ОбъектОсновнойНастройки.УдалитьОтветственный;
	НастройкаАвтоматическогоОбмена.КаталогПроверкиДоступности = ОбъектОсновнойНастройки.УдалитьКаталогПроверкиДоступности;
	НастройкаАвтоматическогоОбмена.КаждыйЗапускПрограммы = ОбъектОсновнойНастройки.УдалитьКаждыйЗапускПрограммы;
	НастройкаАвтоматическогоОбмена.КаждоеЗавершениеРаботыСПрограммой = ОбъектОсновнойНастройки.УдалитьКаждоеЗавершениеРаботыСПрограммой;
	
	Возврат НастройкаАвтоматическогоОбмена;
	
КонецФункции

Процедура УстановитьРегЗаданиеПоНастройке(НастройкаАвтоматическогоОбмена, УникальныйИдентификаторСтаройНастройки)
	
	СтароеРегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(УникальныйИдентификаторСтаройНастройки));
	
	Если СтароеРегЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеРегЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("ВыполнениеОбмена");
	ЗаполнитьЗначенияСвойств(НовоеРегЗадание, СтароеРегЗадание);			
	
	НовоеРегЗадание.Наименование = СтароеРегЗадание.Наименование;
	НовоеРегЗадание.Использование = СтароеРегЗадание.Использование;	
	НовоеРегЗадание.Ключ = СтароеРегЗадание.Ключ;
	
	Массив = Новый Массив();
	Если Не ЗначениеЗаполнено(НастройкаАвтоматическогоОбмена.Код) Тогда
		НастройкаАвтоматическогоОбмена.УстановитьНовыйКод();
	КонецЕсли;
	Массив.Добавить(НастройкаАвтоматическогоОбмена.Код);
	
	НовоеРегЗадание.Параметры = Массив;
	НовоеРегЗадание.Записать();
	
	НастройкаАвтоматическогоОбмена.РегламентноеЗадание = Строка(НовоеРегЗадание.УникальныйИдентификатор);
	НастройкаАвтоматическогоОбмена.ИспользоватьРегламентныеЗадания = НовоеРегЗадание.Использование;
	
КонецПроцедуры

// Процедура выполняет обновление правила обмена
// Запускается при обновлении на 10.3.4
Процедура ОбновитьНастройкиОбменаДанными() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаДанными.Ссылка,
	|	НастройкиОбменаДанными.ПроизводитьПриемСообщений,
	|	НастройкиОбменаДанными.ПроизводитьОтправкуСообщений,
	|	НастройкиОбменаДанными.УдалитьДинамическиИзменятьИнтервалМеждуОбменами,
	|	НастройкиОбменаДанными.УдалитьВыполнятьОбменПриПоявленииФайла,
	|	НастройкиОбменаДанными.УдалитьИспользоватьРегламентныеЗадания,
	|	НастройкиОбменаДанными.УдалитьОтветственный,
	|	НастройкиОбменаДанными.УдалитьВыполнятьАвтоматически,
	|	НастройкиОбменаДанными.УдалитьКаталогПроверкиДоступности,
	|	НастройкиОбменаДанными.УдалитьКаждыйЗапускПрограммы,
	|	НастройкиОбменаДанными.УдалитьКаждоеЗавершениеРаботыСПрограммой,
	|	НастройкиОбменаДанными.УдалитьРегламентноеЗадание,
	|	НастройкиОбменаДанными.УдалитьРегламентноеЗаданиеФоновыйОбмен,
	|	НастройкиОбменаДанными.УдалитьРегламентноеЗаданиеОтложенныеДвижения,
	|	НастройкиОбменаДанными.ПометкаУдаления
	|ИЗ
	|	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаличиеРегламентногоЗадания = Ложь;
		НаличиеРегламентногоЗаданияОтложенногоПроведения = Ложь;
		НужноСоздаватьНастройкуАвтоматическогоОбмена = ОпределитьПоданнымВыборкиНужноСоздаватьНастройкуАвтообмена(Выборка, НаличиеРегламентногоЗадания, НаличиеРегламентногоЗаданияОтложенногоПроведения);
		
		Если НужноСоздаватьНастройкуАвтоматическогоОбмена Тогда
			
			ОбъектОсновнойНастройки = Выборка.Ссылка.ПолучитьОбъект();
			
			Если НаличиеРегламентногоЗаданияОтложенногоПроведения Тогда
				
				// отдельная настройка для отложенных движений
				НастройкаАвтоматическогоОбмена = СоздатьБазовуюНастройкуАвтоОбмена(ОбъектОсновнойНастройки, Выборка);
				НастройкаАвтоматическогоОбмена.ИспользоватьРегламентныеЗадания = Истина;
				НастройкаАвтоматическогоОбмена.Комментарий = "Настройка для выполнения движений по настройке обмена: " + Строка(Выборка.Ссылка);
				
				СтрокаТЧ = НастройкаАвтоматическогоОбмена.НастройкиОбмена.Добавить();
				СтрокаТЧ.НастройкаОбмена = Выборка.Ссылка;
				СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ОтложенныеДвижения;
				
				УстановитьРегЗаданиеПоНастройке(НастройкаАвтоматическогоОбмена, Выборка.УдалитьРегламентноеЗаданиеОтложенныеДвижения);
				
				НастройкаАвтоматическогоОбмена.Записать();
								
			КонецЕсли;
			
			// настройка автообмена			
			Если Выборка.ПроизводитьПриемСообщений
				ИЛИ Выборка.ПроизводитьОтправкуСообщений Тогда
				
				НастройкаАвтоматическогоОбмена = СоздатьБазовуюНастройкуАвтоОбмена(ОбъектОсновнойНастройки, Выборка);
				НастройкаАвтоматическогоОбмена.ИспользоватьРегламентныеЗадания = Истина;
				НастройкаАвтоматическогоОбмена.Комментарий = "Настройка для выполнения обмена по настройке обмена: " + Строка(Выборка.Ссылка);
				
				Если Выборка.ПроизводитьПриемСообщений Тогда
					СтрокаТЧ = НастройкаАвтоматическогоОбмена.НастройкиОбмена.Добавить();
					СтрокаТЧ.НастройкаОбмена = Выборка.Ссылка;
					СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ЗагрузкаДанных;
				КонецЕсли;
				
				Если Выборка.ПроизводитьОтправкуСообщений Тогда
					СтрокаТЧ = НастройкаАвтоматическогоОбмена.НастройкиОбмена.Добавить();
					СтрокаТЧ.НастройкаОбмена = Выборка.Ссылка;
					СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ВыгрузкаДанных;
				КонецЕсли;
				
				УстановитьРегЗаданиеПоНастройке(НастройкаАвтоматическогоОбмена, Выборка.УдалитьРегламентноеЗадание);
				
				НастройкаАвтоматическогоОбмена.Записать();	
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроизвестиПопыткуУдаленияРегЗаданияНоИдентификатору(Выборка.УдалитьРегламентноеЗадание, Выборка.Ссылка);
		ПроизвестиПопыткуУдаленияРегЗаданияНоИдентификатору(Выборка.УдалитьРегламентноеЗаданиеФоновыйОбмен, Выборка.Ссылка);
		ПроизвестиПопыткуУдаленияРегЗаданияНоИдентификатору(Выборка.УдалитьРегламентноеЗаданиеОтложенныеДвижения, Выборка.Ссылка);
		
	КонецЦикла;	
	
	// удаление оставшихся регламентных заданий
	МассивИменМетаданныхУдаления = Новый Массив();
	МассивИменМетаданныхУдаления.Добавить("ЗаданиеАвтономноеРешение");
	МассивИменМетаданныхУдаления.Добавить("ЗаданиеОтложенныеДвижения");
	
	Для Каждого ИмяМетаданныхРегЗадания Из МассивИменМетаданныхУдаления Цикл
	
		ОтборЗаданий = Новый Структура("Метаданные", ИмяМетаданныхРегЗадания);
		МассивЗаданий = РегламентныеЗадания.ПолучитьРегламентныеЗадания(ОтборЗаданий);
		Если МассивЗаданий <> Неопределено
			И МассивЗаданий.Количество() > 0 Тогда
			
			Для Каждого ЭлементЗадания Из МассивЗаданий Цикл
				
				ЭлементЗадания.Удалить();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры
