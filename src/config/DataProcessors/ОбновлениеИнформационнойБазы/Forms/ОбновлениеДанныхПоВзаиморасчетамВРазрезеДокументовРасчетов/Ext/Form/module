
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ТекстВопроса = 
	"Выполнение данной обработки может занять продолжительное время
	|и является необратимой операцией. Настоятельно рекомендуется предварительно ознакомиться
	|cо справочной информацией. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработку(истина);
КонецПроцедуры

Процедура ВыполнитьОбработку(флЗапускИзФормы=ложь) Экспорт
	Если не флЗапускИзФормы Тогда
		СписокОбработок = новый СписокЗначений;
		ЗаполнитьСписокОбработок(СписокОбработок);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Запущена обработка " + ЭтаФорма.Заголовок);
    Если СписокОбработок.НайтиПоЗначению("ОбновитьРеквизитыДоговоровКонтрагентов").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Обновить реквизиты договоров контрагентов', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс обновления реквизитов договоров с контрагентами");
		ДоговорыКонтрагентов_УстановитьПризнакВеденияПоДокументамРасчетов();
		СообщитьОСостоянииОбновления("","Завершен процесс обновления реквизитов договоров с контрагентами");
	    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Обновить реквизиты договоров контрагентов', обработка " + ЭтаФорма.Заголовок);

	КонецЕсли;
	Если СписокОбработок.НайтиПоЗначению("ЗаполнитьРеквизитыТорговыхДокументов").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Заполнить реквизит 'Документ расчетов' в торговых документах', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс заполнения реквизитов 'Документ расчетов' для торговых документов");
		ТорговыеДокументы_ЗаполнитьРеквизитыПоДокументамРасчетов();
		СообщитьОСостоянииОбновления("","Завершен процесс заполнения реквизитов 'Документ расчетов' для торговых документов");
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Заполнить реквизит 'Документ расчетов' в торговых документах', обработка " + ЭтаФорма.Заголовок);

	КонецЕсли;
	Если СписокОбработок.НайтиПоЗначению("ЗаполнитьРеквизитыДенежныхДокументов").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Заполнить реквизит 'Документ расчетов' в денежных документах', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс заполнения реквизитов 'Документ расчетов' для денежных документов");

		ПлатежныеДокументы_ЗаполнитьРеквизитыПоДокументамРасчетов();
		СообщитьОСостоянииОбновления("","Завершен процесс заполнения реквизитов 'Документ расчетов' для денежных документов");
        ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Заполнить реквизит 'Документ расчетов' в денежных документах', обработка " + ЭтаФорма.Заголовок);

	КонецЕсли;
	Если СписокОбработок.НайтиПоЗначению("ОбновитьДвиженияТорговыхДокументов").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Обновить движения по взаиморасчетам для торговых документов', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс обновления движений по взаиморасчетам торговых документов");

		ТорговыеДокументы_ДобавитьДвиженияПоДокументамРасчетов();
		СообщитьОСостоянииОбновления("","Завершен процесс обновления движений по взаиморасчетам торговых документов");

        ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Обновить движения по взаиморасчетам для торговых документов', обработка " + ЭтаФорма.Заголовок);

	КонецЕсли;
	Если СписокОбработок.НайтиПоЗначению("ОбновитьДвиженияДенежныхДокументов").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Обновить движения по взаиморасчетам для денежных документов', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс обновления движений по взаиморасчетам денежных документов");

		ПлатежныеДокументы_ДобавитьДвиженияПоДокументамРасчетов();
		СообщитьОСостоянииОбновления("","Завершен процесс обновления движений по взаиморасчетам для денежных документов");
        ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Обновить движения по взаиморасчетам для денежных документов', обработка " + ЭтаФорма.Заголовок);

	КонецЕсли;
    Если СписокОбработок.НайтиПоЗначению("ОбновитьДвиженияРегистраДвижениеДенежныхСредств").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Обновить движения регистра 'Движения денежных средств'', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс обновления движений 'Движения денежных средств'");

		ОбновитьДвиженияРегистраДвижениеДенежныхСредств();
		СообщитьОСостоянииОбновления("","Завершен процесс обновления движений 'Движения денежных средств'");
        ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Обновить движения регистра 'Движения денежных средств'', обработка " + ЭтаФорма.Заголовок);

	КонецЕсли;
	Если СписокОбработок.НайтиПоЗначению("ОбновитьДвиженияРегистраЗаявкиНаРасходованиеСредств").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Обновить движения регистра 'Заявки на расходование средств'', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс обновления движений 'Заявки на расходование средств'");

		ОбновитьДвиженияРегистраЗаявкиНаРасходованиеСредств();
		СообщитьОСостоянииОбновления("","Завершен процесс обновления движений 'Заявки на расходование средств'");
        ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Обновить движения регистра 'Заявки на расходование средств'', обработка " + ЭтаФорма.Заголовок);

 	КонецЕсли;
    Если СписокОбработок.НайтиПоЗначению("ОбновитьДвиженияРегистраПланируемыеПоступленияДенежныхСредств").Пометка Тогда
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Запущен этап 'Обновить движения регистра 'Планируемые поступления денежных средств'', обработка " + ЭтаФорма.Заголовок);

		СообщитьОСостоянииОбновления("","Запущен процесс обновления движений 'Планируемые поступления денежных средств'");

		ОбновитьДвиженияРегистраПланируемыеПоступленияДенежныхСредств();
		СообщитьОСостоянииОбновления("","Завершен процесс обновления движений 'Планируемые поступления денежных средств'");
        ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
		"Выполнен этап 'Обновить движения регистра 'Планируемые поступления денежных средств'', обработка " + ЭтаФорма.Заголовок);

 	КонецЕсли;

	
    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Выполнена обработка " + ЭтаФорма.Заголовок);

Конецпроцедуры

Процедура ОбновитьДвиженияРегистраПланируемыеПоступленияДенежныхСредств()
	ИмяРегистра = "ПланируемыеПоступленияДенежныхСредств";
	ОбновитьДвиженияРегистра_РасчетыПоПриобретениюРеализации("РегистрНакопления",ИмяРегистра,"ДокументРасчетовСКонтрагентом");
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = не ПолучитьРазрешениеНаОткрытиеФормы();
	
КонецПроцедуры

Процедура ПриОткрытии()
	ЗаполнитьСписокОбработок(СписокОбработок);
КонецПроцедуры
	
Процедура ЗаполнитьСписокОбработок(Спис)
	Спис.Очистить();
	Спис.Добавить("ОбновитьРеквизитыДоговоровКонтрагентов","Обновить реквизиты договоров контрагентов",истина);
    Спис.Добавить("ЗаполнитьРеквизитыТорговыхДокументов","Заполнить реквизит 'Документ расчетов' в торговых документах",истина);
	Спис.Добавить("ЗаполнитьРеквизитыДенежныхДокументов","Заполнить реквизит 'Документ расчетов' в денежных документах",истина);
	Спис.Добавить("ОбновитьДвиженияТорговыхДокументов","Обновить движения по взаиморасчетам для торговых документов",истина);
	Спис.Добавить("ОбновитьДвиженияДенежныхДокументов","Обновить движения по взаиморасчетам для денежных документов",истина);
	Спис.Добавить("ОбновитьДвиженияРегистраДвижениеДенежныхСредств","Обновить движения регистра 'Движения денежных средств'",истина);
	Спис.Добавить("ОбновитьДвиженияРегистраЗаявкиНаРасходованиеСредств","Обновить движения регистра 'Заявки на расходование средств'",истина);
	Спис.Добавить("ОбновитьДвиженияРегистраПланируемыеПоступленияДенежныхСредств","Обновить движения регистра 'Планируемые поступления денежных средств'",истина);
КонецПроцедуры

Процедура ОбновитьДвиженияРегистра_РасчетыПоПриобретениюРеализации(ТипРегистра, ИмяРегистра, ИмяРесурсаДокументРасчетов)
	ОписаниеТиповДокументыКомиссия = новый ОписаниеТипов("ДокументСсылка.ОтчетКомиссионераОПродажах, ДокументСсылка.ОтчетКомитентуОПродажах");
	ОписаниеТиповДокументыПоступлениеРеализация = новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг, ДокументСсылка.РеализацияТоваровУслуг");
	
	ЕстьДокументы = Истина;
	ДокументСсылка = Неопределено;
	Если ТипРегистра = "РегистрСведений" Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();

	Иначе
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
    КонецЕсли;
		
	Пока ЕстьДокументы Цикл
		ВыборкаДокументов = ПолучитьВыборкуДокументовРасчетыПоПриобретениюРеализации(ДокументСсылка, ТипРегистра, ИмяРегистра, ИмяРесурсаДокументРасчетов);
				
		ЕстьДокументы = ВыборкаДокументов.Количество() > 0;
				
		Пока ВыборкаДокументов.Следующий() Цикл
					
			ДокументСсылка = ВыборкаДокументов.Регистратор;
			ЭтоКомиссия = ложь;
			Если ОписаниеТиповДокументыКомиссия.СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
				ЭтоКомиссия = истина;
			КонецЕсли;
			
							
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
            НаборЗаписей.Прочитать();

			Для каждого Запись из НаборЗаписей цикл
				Если не Запись.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
					Продолжить;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Запись.Сделка) Тогда
					Запись[ИмяРесурсаДокументРасчетов]=ДокументСсылка;
					Продолжить;
				КонецЕсли;
					
				Если ЭтоКомиссия Тогда
					Если ОписаниеТиповДокументыПоступлениеРеализация.СодержитТип(ТипЗнч(Запись.Сделка)) Тогда
						Запись[ИмяРесурсаДокументРасчетов]=ДокументСсылка;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Запись[ИмяРесурсаДокументРасчетов] = Запись.Сделка;
			КонецЦикла;

			НаборЗаписей.Записать();
		КонецЦикла;
	 КонецЦикла;
КонецПроцедуры

Функция ПолучитьВыборкуДокументовРасчетыПоПриобретениюРеализации(СсылкаНач, ТипРегистра, ИмяРегистра, ИмяРесурсаДокументРасчетов) 

	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500 Регистратор
	|ИЗ "+ТипРегистра+"."+ИмяРегистра+"
	|ГДЕ ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = истина
	|И "+ИмяРесурсаДокументРасчетов+"=неопределено"+
		?(СсылкаНач = Неопределено,"","
	|	И Регистратор > &СсылкаНач")+"
 	|Упорядочить по Регистратор";
	
	Запрос.УстановитьПараметр("СсылкаНач", 				СсылкаНач);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ОбновитьДвиженияРегистраЗаявкиНаРасходованиеСредств()
	ИмяРегистра = "ЗаявкиНаРасходованиеСредств";
	ОбновитьДвиженияРегистра_РасчетыПоПриобретениюРеализации("РегистрНакопления",ИмяРегистра,"ДокументРасчетовСКонтрагентом");

КонецПроцедуры

Процедура ОбновитьДвиженияРегистраДвижениеДенежныхСредств()	ИмяРегистра = "ДвиженияДенежныхСредств";
	ОбновитьДвиженияРегистра_РасчетыПоПриобретениюРеализации("РегистрНакопления",ИмяРегистра,"ДокументРасчетовСКонтрагентом");

КонецПроцедуры

//Процедура записывает движения регистра ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов для платежных документов,
// 	в которых используются договоры с ведением взаиморасчетов по расчетным документам
Процедура ПлатежныеДокументы_ДобавитьДвиженияПоДокументамРасчетов() 
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("АвансовыйОтчет");   //имя ТЧ = ОплатаПоставщикам, нет реквизита ВидОперации
	СписокДокументов.Добавить("АккредитивПереданный");
	СписокДокументов.Добавить("АккредитивПолученный");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПереданное");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПолученное");
	СписокДокументов.Добавить("ПлатежноеПоручениеВходящее");
	СписокДокументов.Добавить("ПлатежноеПоручениеИсходящее");
    СписокДокументов.Добавить("ПлатежноеТребованиеВыставленное");
    СписокДокументов.Добавить("ПлатежноеТребованиеПолученное");
	СписокДокументов.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств");
	СписокДокументов.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств");
	СписокДокументов.Добавить("ПриходныйКассовыйОрдер");
    СписокДокументов.Добавить("РасходныйКассовыйОрдер");
	СписокДокументов.Добавить("КорректировкаДолга");
	
	//список операций, по которым вид расчетов с контрагентом = по приобретению
	СписокОперацийПоПриобретению = новый СписокЗначений;
	СписокОперацийПоПриобретению.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику);
	СписокОперацийПоПриобретению.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком);
	СписокОперацийПоПриобретению.Добавить(Перечисления.ВидыОперацийППИсходящее.ОплатаПоставщику);
	СписокОперацийПоПриобретению.Добавить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком);
	СписокОперацийПоПриобретению.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);

	//список операций, по которым вид расчетов с контрагентом = по реализации
	СписокОперацийПоРеализации = новый СписокЗначений;
	СписокОперацийПоРеализации.Добавить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю);
	СписокОперацийПоРеализации.Добавить(Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя);
	СписокОперацийПоРеализации.Добавить(Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю);
	СписокОперацийПоРеализации.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	СписокОперацийПоРеализации.Добавить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю);
	
	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.СоздатьНаборЗаписей();
    НаборЗаписейВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.СоздатьНаборЗаписей();

	
	Для каждого ВидДокумента Из СписокДокументов цикл
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		
		Если ВидДокумента.Значение = "АвансовыйОтчет" Тогда
			ИмяТЧ = "ОплатаПоставщикам";
		Иначе
			ИмяТЧ = "РасшифровкаПлатежа";
		КонецЕсли;

		Пока ЕстьДокументы Цикл
			Если ВидДокумента.Значение = "КорректировкаДолга" Тогда
            	РезультатЗапроса = КорректировкаДолга_ПолучитьТаблицуДокументовПоДокументамРасчетовДляДвиженийРегистров(ДокументСсылка);
			Иначе
            	РезультатЗапроса = ПлатежныеДокументы_ПолучитьТаблицуДокументовПоДокументамРасчетовДляДвиженийРегистров(ДокументСсылка, ВидДокумента.Значение, ИмяТЧ);
			КонецЕсли;
			
			ЕстьДокументы = НЕ РезультатЗапроса.Пустой();
			
			//обход по документам
			ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДокументам.Следующий() Цикл
			
				ДокументСсылка = ВыборкаПоДокументам.Регистратор;
				ВидОперации = неопределено;
				Если не ВидДокумента.Значение = "АвансовыйОтчет" Тогда
					ВидОперации = ДокументСсылка.ВидОперации;
				КонецЕсли;
				
				//определим вид расчетов с  контрагентом по виду операции
				ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.Прочее;
				Если ВидДокумента.Значение = "АвансовыйОтчет" Тогда
					ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
				ИначеЕсли ВидДокумента.Значение = "КорректировкаДолга" Тогда 
					//для корректировки долга вид расчетов определится по договору из строки документа
				ИначеЕсли  СписокОперацийПоПриобретению.НайтиПоЗначению(ВидОперации)<>неопределено Тогда
					ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению;
				ИначеЕсли СписокОперацийПоРеализации.НайтиПоЗначению(ВидОперации)<>неопределено Тогда
                   ВидРасчетовСКонтрагентом = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
				КонецЕсли;
			
			    //создание набора записей в регистр
				
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
                НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				НаборЗаписейВзаиморасчеты.Отбор.Регистратор.Установить(ДокументСсылка);
                НаборЗаписейВзаиморасчеты.Прочитать();
				Если НаборЗаписейВзаиморасчеты.Количество()=0 Тогда 
					НаборЗаписей.Записать();
					Продолжить; 
				КонецЕсли;
				
				//определим вид движений - приход или расход
				Если ВидДокумента.Значение = "КорректировкаДолга" Тогда 
					//для корректировки долга вид движения определится по строке документа
				Иначе
					ВидДвижения = НаборЗаписейВзаиморасчеты[0].ВидДвижения;
				КонецЕсли;
				
				Период = НаборЗаписейВзаиморасчеты[0].Период;
				
				ВыборкаПоСтрокам = ВыборкаПоДокументам.Выбрать();
				Пока ВыборкаПоСтрокам.Следующий() Цикл
					Если ВидДокумента.Значение = "КорректировкаДолга" Тогда
						ВидРасчетовСКонтрагентом = ВыборкаПоСтрокам.ВидРасчетовСКонтрагентом;
						ВидДвижения              = ?(ВыборкаПоСтрокам.ВидДвиженияРасход, ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход);
					КонецЕсли;
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.ВидДвижения = ВидДвижения;
					НоваяЗапись.Период      = Период;
					НоваяЗапись.Активность  = Истина;
					
					НоваяЗапись.ДоговорКонтрагента            = ВыборкаПоСтрокам.ДоговорКонтрагента;
					НоваяЗапись.Сделка                        = Неопределено;
					НоваяЗапись.ДокументРасчетовСКонтрагентом = ВыборкаПоСтрокам.ДокументРасчетовСКонтрагентом;
					НоваяЗапись.ВидРасчетовСКонтрагентом      = ВидРасчетовСКонтрагентом;
					НоваяЗапись.УпрУчет                       = Истина;
					НоваяЗапись.Организация                   = ВыборкаПоСтрокам.Организация;
					НоваяЗАпись.Контрагент                    = ВыборкаПоСтрокам.Контрагент;
					
					НоваяЗапись.СуммаВзаиморасчетов = ВыборкаПоСтрокам.СуммаВзаиморасчетов;
					Если ВыборкаПоСтрокам.РасчетыВУсловныхЕдиницах И ДокументСсылка.ОтражатьВБухгалтерскомУчете Тогда
						НоваяЗапись.СуммаРегл = ВыборкаПоСтрокам.СуммаРегл;
					КонецЕсли;
				КонецЦикла;	
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры   //ПлатежныеДокументы_ДобавитьДвиженияПоДокументамРасчетов

//получить таблицу с данными по платежным документам, в которых используется договор с ведением учета по документам расчетов
Функция ПлатежныеДокументы_ПолучитьТаблицуДокументовПоДокументамРасчетовДляДвиженийРегистров(СсылкаНач, ИмяДокумента, ИмяТЧ)
	
	//текст запроса отличается от запроса процедуры ПлатежныеДокументы_ПолучитьТаблицуДокументовПоДокументамРасчетов тем, что в него попадают также
	//		документы в которых сделка не заполнена
	ТекстЗапроса = " ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ДокументРег.Ссылка КАК Регистратор
	|ИЗ 
	|	Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ДокументРег
	|ГДЕ
	|	ДокументРег.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам "+
	?(СсылкаНач = Неопределено,"","
	|	И ДокументРег.Ссылка > &СсылкаНач")+"
	|Упорядочить по ДокументРег.Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам);
	Запрос.УстановитьПараметр("СсылкаНач", 				СсылкаНач);

	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	СписокДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Регистратор");
	
	ИмяСуммаВзаиморасчетов = "СуммаВзаиморасчетов";
	Если ИмяДокумента = "АвансовыйОтчет" Тогда
		ИмяСуммаПлатежа = "Сумма";
	ИначеЕсли ИмяДокумента = "КорректировкаДолга" Тогда
		ИмяСуммаПлатежа = "СуммаРегл";
		ИмяСуммаВзаиморасчетов = "Сумма";
	Иначе
		ИмяСуммаПлатежа = "СуммаПлатежа";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДокументРег.Ссылка КАК Регистратор,
	|	ДокументРег.ДоговорКонтрагента,
	|	ДокументРег.ДоговорКонтрагента.Организация КАК Организация,
	|	ДокументРег.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ДокументРег.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ДокументРег.ДокументРасчетовСКонтрагентом.Дата ЕСТЬ NULL 
	|			ТОГДА ДокументРег.Ссылка
	|		ИНАЧЕ ДокументРег.ДокументРасчетовСКонтрагентом
	|	КОНЕЦ КАК ДокументРасчетовСКонтрагентом,
	|	ДокументРег.ДокСуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.СуммаРег ЕСТЬ NULL 
	|			ТОГДА ДокументРег.ДокСуммаПлатежа
	|		ИНАЧЕ ВложенныйЗапрос.СуммаРег
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокТЧ.Ссылка КАК Ссылка,
	|		ДокТЧ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ДокТЧ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
	|		ДокТЧ.Сделка КАК Сделка,
	|		СУММА("+ИмяСуммаВзаиморасчетов+") КАК ДокСуммаВзаиморасчетов,
	|		СУММА("+ИмяСуммаПлатежа+") КАК ДокСуммаПлатежа
	|	ИЗ
	|		Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ДокТЧ
	|	ГДЕ
	|		ДокТЧ.Ссылка В(&СписокДокументов) И ДокТЧ.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокТЧ.Ссылка,
	|		ДокТЧ.ДоговорКонтрагента,
	|		ДокТЧ.ДокументРасчетовСКонтрагентом,
	|		ДокТЧ.Сделка) КАК ДокументРег
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Регистратор КАК Регистратор,
	|			ВложенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|			ВложенныйЗапрос.Сделка КАК Сделка,
	|			СУММА(ВложенныйЗапрос.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|			СУММА(ВложенныйЗапрос.СуммаРег) КАК СуммаРег
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор,
	|				ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|				ВзаиморасчетыСКонтрагентами.Сделка КАК Сделка,
	|				ВзаиморасчетыСКонтрагентами.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|				NULL КАК СуммаРег
	|			ИЗ
	|				РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|			
	|) КАК ВложенныйЗапрос
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВложенныйЗапрос.Регистратор,
	|			ВложенныйЗапрос.ДоговорКонтрагента,
	|			ВложенныйЗапрос.Сделка) КАК ВложенныйЗапрос
	|		ПО ДокументРег.Ссылка = ВложенныйЗапрос.Регистратор
	|			И ДокументРег.ДоговорКонтрагента = ВложенныйЗапрос.ДоговорКонтрагента
	|			И ДокументРег.Сделка = ВложенныйЗапрос.Сделка
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам);
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Возврат Запрос.Выполнить();

КонецФункции //ПлатежныеДокументы_ПолучитьВыборкуДокументовПоДокументамРасчетовДляДвиженийРегистров

//получить таблицу с данными по платежным документам, в которых используется договор с ведением учета по документам расчетов
Функция КорректировкаДолга_ПолучитьТаблицуДокументовПоДокументамРасчетовДляДвиженийРегистров(СсылкаНач)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ДокументРег.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК ДокументРег
	|ГДЕ
	|	(ДокументРег.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам)
	|				И &СсылкаНач = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДокументРег.Ссылка > &СсылкаНач)
	|	И ДокументРег.Ссылка.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("СсылкаНач", 				СсылкаНач);

	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	СписокДокументов = ТаблицаДокументов.ВыгрузитьКолонку("Регистратор");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КорректировкаДолгаСуммыДолга.Ссылка КАК Регистратор,
	|	КорректировкаДолгаСуммыДолга.Ссылка.Организация,
	|	КорректировкаДолгаСуммыДолга.Ссылка.КонтрагентДебитор КАК Контрагент,
	|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА КорректировкаДолгаСуммыДолга.ДокументРасчетовСКонтрагентом.Дата ЕСТЬ NULL 
	|			ТОГДА КорректировкаДолгаСуммыДолга.Ссылка
	|		ИНАЧЕ КорректировкаДолгаСуммыДолга.ДокументРасчетовСКонтрагентом
	|	КОНЕЦ КАК ДокументРасчетовСКонтрагентом,
	|	КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	КорректировкаДолгаСуммыДолга.ВидЗадолженности,
	|	КорректировкаДолгаСуммыДолга.СуммаРегл,
	|	КорректировкаДолгаСуммыДолга.Сумма КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|				ИЛИ КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасчетовСКонтрагентами.ПоРеализации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасчетовСКонтрагентами.ПоПриобретению)
	|	КОНЕЦ КАК ВидРасчетовСКонтрагентом,
	|	ВЫБОР
	|		КОГДА КорректировкаДолгаСуммыДолга.ВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Дебиторская)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВидДвиженияРасход
	|ИЗ
	|	Документ.КорректировкаДолга.СуммыДолга КАК КорректировкаДолгаСуммыДолга
	|ГДЕ
	|	КорректировкаДолгаСуммыДолга.Ссылка В(&СписокДокументов)
	|	И КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом = ИСТИНА
	|	И КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам)
	|	И (НЕ КорректировкаДолгаСуммыДолга.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	
	Возврат Запрос.Выполнить();

КонецФункции //ПлатежныеДокументы_ПолучитьВыборкуДокументовПоДокументамРасчетовДляДвиженийРегистров

//Процедура записывает движения регистра ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов для торговых документов,
// 	у которых взаиморасчеты ведутся в разрезе документов расчетов
Процедура ТорговыеДокументы_ДобавитьДвиженияПоДокументамРасчетов()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("ВозвратТоваровОтПокупателя");
	СписокДокументов.Добавить("ВозвратТоваровПоставщику");
	СписокДокументов.Добавить("ВозвратТоваровПоставщикуИзНТТ");
	СписокДокументов.Добавить("ОтчетКомиссионераОПродажах");
	СписокДокументов.Добавить("ОтчетКомитентуОПродажах");
	СписокДокументов.Добавить("ПоступлениеДопРасходов");
	СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
	СписокДокументов.Добавить("ПоступлениеТоваровУслугВНТТ");
	СписокДокументов.Добавить("РеализацияТоваровУслуг");
	
	//список документов, для которых ВидРасчетовСКонтрагентом = ПоРеализации. 
	//		Для всех остальных - ПоПриобретению
	ДокументыПоРеализации = Новый СписокЗначений;
    ДокументыПоРеализации.Добавить("РеализацияТоваровУслуг");
	ДокументыПоРеализации.Добавить("ВозвратТоваровОтПокупателя");

    НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.СоздатьНаборЗаписей();
	НаборЗаписейВзаиморасчеты = РегистрыНакопления.ВзаиморасчетыСКонтрагентами.СоздатьНаборЗаписей();


	Для каждого ВидДокумента Из СписокДокументов цикл
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		
		Пока ЕстьДокументы Цикл
            ВыборкаДокументов = ТорговыеДокументы_ПолучитьВыборкуДокументовДокументамРасчетов(ДокументСсылка, ВидДокумента.Значение,  Истина);
			
			ЕстьДокументы = ВыборкаДокументов.Количество() > 0;
			
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ДокументСсылка = ВыборкаДокументов.Регистратор;
				
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
                НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				
				//определим вид движений - приход или расход
				НаборЗаписейВзаиморасчеты.Отбор.Регистратор.Установить(ДокументСсылка);
                НаборЗаписейВзаиморасчеты.Прочитать();
				Если НаборЗаписейВзаиморасчеты.Количество()=0 Тогда Продолжить; КонецЕсли;
				
				СуммаВзаиморасчетов = ВыборкаДокументов.СуммаВзаиморасчетов;
				СуммаРегл = ВыборкаДокументов.СуммаРегл;

				Если (ВидДокумента.Значение = "ОтчетКомиссионераОПродажах") или (ВидДокумента.Значение="ОтчетКомитентуОПродажах") Тогда
					//для этого вида особый порядок, т.к. может быть несколько записей в регистре Взаиморасчетов
					Для каждого Запись из НаборЗаписейВзаиморасчеты цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.ВидДвижения = Запись.ВидДвижения;
						НоваяЗапись.ДоговорКонтрагента = ВыборкаДокументов.ДоговорКонтрагента;
						НоваяЗапись.Сделка = Неопределено;
						Если Запись.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
							НоваяЗапись.ДокументРасчетовСКонтрагентом = ВыборкаДокументов.ДокументРасчетовСКонтрагентом;
						Иначе
							НоваяЗапись.ДокументРасчетовСКонтрагентом = ДокументСсылка;
						КонецЕсли;
						
						НоваяЗапись.ВидРасчетовСКонтрагентом = ?(Запись.ВидДвижения = ВидДвиженияНакопления.Приход,Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации,Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению);
						
						НоваяЗапись.УпрУчет = ДокументСсылка.ОтражатьВУправленческомУчете;
						НоваяЗапись.Организация = ВыборкаДокументов.Организация;
						НоваяЗАпись.Контрагент = ВыборкаДокументов.Контрагент;
						НоваяЗапись.СуммаВзаиморасчетов = Запись.СуммаВзаиморасчетов;
						Если ВыборкаДокументов.РасчетыВУсловныхЕдиницах И ДокументСсылка.ОтражатьВБухгалтерскомУчете И СуммаВзаиморасчетов<>0 Тогда
							НоваяЗапись.СуммаРегл = Запись.СуммаВзаиморасчетов * СуммаРегл / СуммаВзаиморасчетов;
						КонецЕсли;
						НоваяЗапись.Период = Запись.Период;
						НоваяЗапись.Регистратор = ДокументСсылка;
					КонецЦикла;
					НаборЗаписей.Записать();
				Иначе
					ВидДвижения = НаборЗаписейВзаиморасчеты[0].ВидДвижения;
					//в ТЧ документа не хранятся отрицательные суммы
					Если НаборЗаписейВзаиморасчеты[0].СуммаВзаиморасчетов<0 Тогда
						СуммаВзаиморасчетов = -1 * СуммаВзаиморасчетов;
						СуммаРегл = -1 * СуммаРегл;
					КонецЕсли;
					Период = НаборЗаписейВзаиморасчеты[0].Период;
				
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.ВидДвижения = ВидДвижения;
					НоваяЗапись.ДоговорКонтрагента = ВыборкаДокументов.ДоговорКонтрагента;
					НоваяЗапись.Сделка = Неопределено;
					НоваяЗапись.ДокументРасчетовСКонтрагентом = ВыборкаДокументов.ДокументРасчетовСКонтрагентом;
					НоваяЗапись.ВидРасчетовСКонтрагентом = ?(ДокументыПоРеализации.НайтиПоЗначению(ВидДокумента.Значение)=неопределено,Перечисления.ВидыРасчетовСКонтрагентами.ПоПриобретению,Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации);
					НоваяЗапись.УпрУчет = ДокументСсылка.ОтражатьВУправленческомУчете;
					НоваяЗапись.Организация = ВыборкаДокументов.Организация;
					НоваяЗАпись.Контрагент = ВыборкаДокументов.Контрагент;
					НоваяЗапись.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
					Если ВыборкаДокументов.РасчетыВУсловныхЕдиницах И ДокументСсылка.ОтражатьВБухгалтерскомУчете Тогда
						НоваяЗапись.СуммаРегл = СуммаРегл;
					КонецЕсли;
					НоваяЗапись.Период = Период;
					НоваяЗапись.Регистратор = ДокументСсылка;
					НаборЗаписей.Записать();
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры //ТорговыеДокументы_ДобавитьДвиженияПоДокументамРасчетов

//получить таблицу с данными по документам, в которых используется договор с ведением учета по документам расчетов
//	Фл_ДляФормированияДвижений - признак, для чего составляется данная таблица:
//		1) для формирования движений - истина
//		2) для заполнения документов - ложь
Функция ТорговыеДокументы_ПолучитьВыборкуДокументовДокументамРасчетов(СсылкаНач, ИмяДокумента, Фл_ДляФормированияДвижений)

	ИмяРеквизитаСделка = "Сделка";

	УсловиеПустаяСделка = "ДокументРег."+ИмяРеквизитаСделка+" = неопределено";
	
	//документы которые сами по себе являются документами расчетов, но у них может быть заполнен реквизит Сделка
	//	по причине ошибки в 10.2 - это Отчет комиссионера и Отчет комитента
	Если ИмяДокумента = "ОтчетКомиссионераОПродажах" Тогда
		УсловиеПустаяСделка = "(ДокументРег."+ИмяРеквизитаСделка+" = неопределено
		|ИЛИ ДокументРег."+ИмяРеквизитаСделка+" Ссылка Документ.РеализацияТоваровУслуг)";
	ИначеЕсли ИмяДокумента = "ОтчетКомитентуОПродажах" Тогда
		УсловиеПустаяСделка = "(ДокументРег."+ИмяРеквизитаСделка+" = неопределено
		|ИЛИ ДокументРег."+ИмяРеквизитаСделка+" Ссылка Документ.ПоступлениеТоваровУслуг)";
	КонецЕсли;
	
	
	Если Фл_ДляФормированияДвижений Тогда
		
		ТекстЗапроса = " ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ДокументРег.Ссылка КАК Регистратор,
		|	ДокументРег.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ДокументРег.Ссылка.ДоговорКонтрагента.Организация КАК Организация,
		|	ДокументРег.Ссылка.ДоговорКонтрагента.Владелец КАК Контрагент,
		|	ДокументРег.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом,
		|	ДокументРег.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
        |	ДокументРег.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ДокументРег.СуммаРегл КАК СуммаРегл
		|ИЗ (
		|	ВЫБРАТЬ ДокументРег.Ссылка, 
		|	ДокументРег.ДокументРасчетовСКонтрагентом,
		|	ЕстьNull(ДокументРег.СуммаВзаиморасчетов,0) КАК СуммаВзаиморасчетов,
		|	ЕстьNull(ДокументРег.СуммаРегл,0) КАК СуммаРегл
		|	ИЗ
		|		Документ."+ИмяДокумента+".ДокументыРасчетовСКонтрагентом КАК ДокументРег
        |	ГДЕ
		|		ДокументРег.Ссылка.Проведен = истина"+
		?(СсылкаНач = Неопределено,"","
		|	И ДокументРег.Ссылка > &СсылкаНач")+"
		|	ОБЪЕДИНИТЬ ВСЕ
		//документы которые сами по себе являются документами расчетов
		|	ВЫБРАТЬ ДокументРег.Ссылка,
		|	ДокументРег.Ссылка КАК ДокументРасчетовСКонтрагентом,
		|	ВЫБОР КОГДА ЕстьNull(Взаиморасчеты.СуммаВзаиморасчетов, 0) < 0 Тогда
		|		(-1) * Взаиморасчеты.СуммаВзаиморасчетов
		|	ИНАЧЕ ЕстьNull(Взаиморасчеты.СуммаВзаиморасчетов,0) КОНЕЦ КАК СуммаВзаиморасчетов,
		|	0 КАК СуммаРегл
		|	ИЗ
		|		Документ."+ИмяДокумента+" КАК ДокументРег
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК Взаиморасчеты
		|ПО Взаиморасчеты.Регистратор = ДокументРег.Ссылка
		|	ГДЕ 
		|		ДокументРег.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам"+
		?(СсылкаНач = Неопределено,"","
		|		И ДокументРег.Ссылка > &СсылкаНач")+"
		|		И "+УсловиеПустаяСделка+"
		|		И ДокументРег.Проведен = истина) КАК ДокументРег
		|Упорядочить по ДокументРег.Ссылка";

	Иначе	
		ТекстЗапроса = " ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ДокументРег.Ссылка КАК Регистратор,
		|	Минимум(ДокументРег.ВалютаДокумента) КАК ВалютаДокумента,
		|	Минимум(ДокументРег.ДоговорКонтрагента.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетов,
		|	Минимум(ДокументРег.КурсВзаиморасчетов) КАК КурсВзаиморасчетов,
		|	Минимум(ДокументРег.КратностьВзаиморасчетов) КАК КратностьВзаиморасчетов,
		|	Минимум(ДокументРег."+ИмяРеквизитаСделка+") КАК Сделка,
		|	Минимум(ДокументРег.Ссылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) КАК РасчетыВУсловныхЕдиницах,
		|	Минимум(ДокументРег.СуммаДокумента) КАК СуммаДокумента,
		|	ВЫБОР КОГДА Сумма(ЕстьNull(Взаиморасчеты.СуммаВзаиморасчетов,0))<0 Тогда
		|		(-1)*Сумма(Взаиморасчеты.СуммаВзаиморасчетов)
		|	ИНАЧЕ Сумма(Взаиморасчеты.СуммаВзаиморасчетов) КОНЕЦ КАК СуммаВзаиморасчетов,
		|	0 КАК СуммаРегл
		|ИЗ 
		|	Документ."+ИмяДокумента+" КАК ДокументРег
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК Взаиморасчеты
		|ПО Взаиморасчеты.Регистратор = ДокументРег.Ссылка
		|ГДЕ
		|	ДокументРег.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
		|	И (ДокументРег."+ИмяРеквизитаСделка+".Дата <> &ПустаяДата или ДокументРег."+ИмяРеквизитаСделка+".Дата is not null)"+
		?(СсылкаНач = Неопределено,"","
		|		И ДокументРег.Ссылка > &СсылкаНач")+"
	    |Сгруппировать по ДокументРег.Ссылка
		|Упорядочить по ДокументРег.Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("СсылкаНач", 				СсылкаНач);
	Запрос.УстановитьПараметр("ПустаяДата", 			Дата('00010101'));
	Запрос.УстановитьПараметр("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам);

	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции  //ТорговыеДокументы_ПолучитьТаблицуДокументовДокументамРасчетов

//Процедура заполняет список документов расчетов (ТЧ ДокументыРасчетовСКонтрагентом) для торговых документов
//	в которых указан договор с ведением взаиморасчетов в разрезе документов расчетов
Процедура ТорговыеДокументы_ЗаполнитьРеквизитыПоДокументамРасчетов()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("ВозвратТоваровОтПокупателя");
	СписокДокументов.Добавить("ВозвратТоваровПоставщику");
	СписокДокументов.Добавить("ВозвратТоваровПоставщикуИзНТТ");
	СписокДокументов.Добавить("ОтчетКомиссионераОПродажах");
	СписокДокументов.Добавить("ОтчетКомитентуОПродажах");
	СписокДокументов.Добавить("ПоступлениеДопРасходов");
	СписокДокументов.Добавить("ПоступлениеТоваровУслуг");
	СписокДокументов.Добавить("ПоступлениеТоваровУслугВНТТ");
	СписокДокументов.Добавить("РеализацияТоваровУслуг");
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Для каждого ВидДокумента Из СписокДокументов цикл
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		
		Пока ЕстьДокументы Цикл

			ВыборкаДокументов = ТорговыеДокументы_ПолучитьВыборкуДокументовДокументамРасчетов(ДокументСсылка, ВидДокумента.Значение, Ложь);
			
			ЕстьДокументы = ВыборкаДокументов.Количество() > 0;
			
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ДокументСсылка = ВыборкаДокументов.Регистратор;
				
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.ДокументыРасчетовСКонтрагентом.Очистить();
				
				//Суммы для ТЧ ДокументыРасчетовСКонтрагентом определяются в два приема:
				//1) При формировании запроса по документам:
				//	- сумма взаиморасчетов определяется по данным регистра ВзаиморасчетыСКонтрагентами
				//2) Если не удалось определить суммы в п.1, то суммы определяются по сумме документа
				//		с пересчетом в соответствующую валюту

				Если ВидДокумента.Значение = "ОтчетКомиссионераОПродажах" Тогда
					//проверка связана с наличием ошибки в 10.2 - в сделке можно было указать документ Реализации,
					//	который в данном случае документом расчетов не является
					Если ТипЗнч(ВыборкаДокументов.Сделка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

						Продолжить;
					КонецЕсли;
				
				КонецЕсли;
				
				Если ВидДокумента.Значение = "ОтчетКомитентуОПродажах" Тогда
					//проверка связана с наличием ошибки в 10.2 - в сделке можно было указать документ Поступления,
					//	который в данном случае документом расчетов не является
					Если ТипЗнч(ВыборкаДокументов.Сделка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаПредоплата = ДокументОбъект.ДокументыРасчетовСКонтрагентом.Добавить();
				СтрокаПредоплата.ДокументРасчетовСКонтрагентом = ВыборкаДокументов.Сделка;
				Если ВыборкаДокументов.СуммаВзаиморасчетов<>0 Тогда
					СтрокаПредоплата.СуммаВзаиморасчетов = ВыборкаДокументов.СуммаВзаиморасчетов;
				Иначе
					//сумму взаиморасчетов не удалось определить по движениям документа
					//	это возможно когда документ не проведен
					//Получим сумму расчетом из суммы документа с пересчетом в валюту взаиморасчетов
					Если ВыборкаДокументов.ВалютаДокумента = ВыборкаДокументов.ВалютаВзаиморасчетов Тогда
						 СтрокаПредоплата.СуммаВзаиморасчетов = ВыборкаДокументов.СуммаДокумента;
					 Иначе
						 мКурсДокумента = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
						 мКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);

						 СтрокаПредоплата.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ВыборкаДокументов.СуммаДокумента, ВыборкаДокументов.ВалютаДокумента,
														ВыборкаДокументов.ВалютаВзаиморасчетов,
														мКурсДокумента, ВыборкаДокументов.КурсВзаиморасчетов,
														мКратностьДокумента, ВыборкаДокументов.КратностьВзаиморасчетов);

					КонецЕсли;
					
				КонецЕсли;
				
				//Реквизит СуммаРегл заполняется только если документ отражается в БУ
				Если ДокументСсылка.ОтражатьВБухгалтерскомУчете И (ВыборкаДокументов.РасчетыВУсловныхЕдиницах
					ИЛИ ВыборкаДокументов.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета)Тогда
					Если ВыборкаДокументов.СуммаРегл<>0 Тогда
						СтрокаПредоплата.СуммаРегл = ВыборкаДокументов.СуммаРегл;
					Иначе
						//сумму регл учета не удалось определить по движениям документа
						//	это возможно, когда
						//	1) документ не проведен ИЛИ
						//	2) авансы не зачитываются при проведении документа И
						//		взаиморасчеты не ведутся на регистрах И
						//		взаиморасчеты по договору не ведутся в у.е.
						//Получим сумму расчетом из суммы взаиморасчетов в валюту регл учета
						мКурсДокумента = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
						мКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);

						Если ВыборкаДокументов.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
							СтрокаПредоплата.СуммаРегл = СтрокаПредоплата.СуммаВзаиморасчетов;
						Иначе
							СтрокаПредоплата.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПредоплата.СуммаВзаиморасчетов, ВыборкаДокументов.ВалютаВзаиморасчетов,
														мВалютаРегламентированногоУчета,
														ВыборкаДокументов.КурсВзаиморасчетов, 1,
														ВыборкаДокументов.КратностьВзаиморасчетов, 1);

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(СтрокаПредоплата); 
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры  //ТорговыеДокументы_ЗаполнитьРеквизитыПоДокументамРасчетов

//Процедура заполняет реквизит ДокументРасчетов (ТЧ РасшифровкаПлатежа) для платежных документов
//	в которых указан договор с ведением взаиморасчетов в разрезе документов расчетов
Процедура ПлатежныеДокументы_ЗаполнитьРеквизитыПоДокументамРасчетов()
	СписокДокументов = Новый СписокЗначений;
	СписокДокументов.Добавить("АвансовыйОтчет");   //имя ТЧ = ОплатаПоставщикам
	СписокДокументов.Добавить("АккредитивПереданный");
	СписокДокументов.Добавить("АккредитивПолученный");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПереданное");
	СписокДокументов.Добавить("ИнкассовоеПоручениеПолученное");
	СписокДокументов.Добавить("ПлатежноеПоручениеВходящее");
	СписокДокументов.Добавить("ПлатежноеПоручениеИсходящее");
    СписокДокументов.Добавить("ПлатежноеТребованиеВыставленное");
    СписокДокументов.Добавить("ПлатежноеТребованиеПолученное");
	СписокДокументов.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств");
	СписокДокументов.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств");
	СписокДокументов.Добавить("ПриходныйКассовыйОрдер");
    СписокДокументов.Добавить("РасходныйКассовыйОрдер");
	СписокДокументов.Добавить("ПланируемоеПоступлениеДенежныхСредств");
    СписокДокументов.Добавить("ЗаявкаНаРасходованиеСредств");
	СписокДокументов.Добавить("КорректировкаДолга"); //имя ТЧ - СуммыДолга

	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Для каждого ВидДокумента Из СписокДокументов цикл
		//Сообщить(ВидДокумента.Значение);
		ЕстьДокументы = Истина;
		ДокументСсылка = Неопределено;
		
		Если ВидДокумента.Значение = "АвансовыйОтчет" Тогда
			ИмяТЧ = "ОплатаПоставщикам";
		ИначеЕсли ВидДокумента.Значение = "КорректировкаДолга" Тогда
           ИмяТЧ = "СуммыДолга";
		ИНаче
			ИмяТЧ = "РасшифровкаПлатежа";
		КонецЕсли;
	

		
		Пока ЕстьДокументы Цикл

			ВыборкаДокументов = ПлатежныеДокументы_ПолучитьВыборкуДокументовПоДокументамРасчетов(ДокументСсылка, ВидДокумента.Значение, ИмяТЧ);
			
			ЕстьДокументы = ВыборкаДокументов.Количество() > 0;
			
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ДокументСсылка = ВыборкаДокументов.Регистратор;
				
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				
				Для каждого СтрокаДокумента из ДокументОбъект[ИмяТЧ] цикл
					Если СтрокаДокумента.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам Тогда
						СтрокаДокумента.ДокументРасчетовСКонтрагентом = СтрокаДокумента.Сделка;
					КонецЕсли;
				КонецЦикла;
								
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры //ПлатежныеДокументы_ЗаполнитьРеквизитыПоДокументамРасчетов

//получить таблицу с данными по платежным документам, в которых используется договор с ведением учета по документам расчетов
Функция ПлатежныеДокументы_ПолучитьВыборкуДокументовПоДокументамРасчетов(СсылкаНач, ИмяДокумента, ИмяТЧ)
	
	ТекстЗапроса = " ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	ДокументРег.Ссылка КАК Регистратор
	|ИЗ 
	|	Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ДокументРег
	|ГДЕ
	|	ДокументРег.ДоговорКонтрагента.ВедениеВзаиморасчетов = &ПоРасчетнымДокументам
	|	И (ДокументРег.Сделка.Дата <> &ПустаяДата или ДокументРег.Сделка.Дата is not null ) "+
		?(СсылкаНач = Неопределено,"","
	|	И ДокументРег.Ссылка > &СсылкаНач")+"
	|Упорядочить по Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам);
	Запрос.УстановитьПараметр("СсылкаНач", 				СсылкаНач);
	Запрос.УстановитьПараметр("ПустаяДата", 			Дата('00010101'));
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции  //ПлатежныеДокументы_ПолучитьТаблицуДокументовПоДокументамРасчетов

//анализ реквизита ВедениеВзаиморасчетов: если он УдалитьПоРасчетнымДокументам - устанавливается признак ВестиПоДокументамРасчетовСКонтрагентом
Процедура ДоговорыКонтрагентов_УстановитьПризнакВеденияПоДокументамРасчетов()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ДоговорыКонтрагентов 
	|ГДЕ ВедениеВзаиморасчетов=&ПоРасчетнымДокументам И ЭтоГруппа = ложь И ВестиПоДокументамРасчетовСКонтрагентом = ложь";
	Запрос.УстановитьПараметр("ПоРасчетнымДокументам", Перечисления.ВедениеВзаиморасчетовПоДоговорам.УдалитьПоРасчетнымДокументам);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.ссылка.ПолучитьОбъект();
		//отключение контроля наличия документов по данному договору
		СправочникОбъект.ОбменДанными.Загрузка = истина;
		//СправочникОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		СправочникОбъект.ВестиПоДокументамРасчетовСКонтрагентом = истина;
		СправочникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры //ДоговорыКонтрагентов_УстановитьПризнакВеденияПоДокументамРасчетов

Процедура КоманднаяПанель2УстановитьФлажки(Кнопка)

	СписокОбработок.ЗаполнитьПометки(истина);

КонецПроцедуры

Процедура КоманднаяПанель2СнятьФлажки(Кнопка)

	СписокОбработок.ЗаполнитьПометки(ложь);

КонецПроцедуры


