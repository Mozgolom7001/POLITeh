
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ТекстВопроса = 
	"Выполнение данной обработки может занять продолжительное время
	|и является необратимой операцией. Настоятельно рекомендуется предварительно ознакомиться
	|cо справочной информацией. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
    ВыполнитьОбработку(истина);

КонецПроцедуры

Процедура ВыполнитьОбработку(флЗапускИзФормы=ложь) Экспорт
	
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Запущена обработка " + ЭтаФорма.Заголовок);

	СообщитьОСостоянииОбновления("","Заполнение измерения Организация регистра Взаиморасчеты с подотчетными лицами");
	ЗаполнитьИзмерениеОрганизацияРегистраВзаиморасчетыСПодотчетнымиЛицами();
	СообщитьОСостоянииОбновления("","Заполнение измерения Организация регистра Взаиморасчеты с подотчетными лицами завершено");
	
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Выполнена обработка " + ЭтаФорма.Заголовок);

КонецПроцедуры

//заполнение новых измерений Организация, Контрагент в регистрах взаиморасчетов
Процедура ЗаполнитьИзмерениеОрганизацияРегистраВзаиморасчетыСПодотчетнымиЛицами() Экспорт
	
	ЕстьДокументы = Истина;
	ДокументСсылка = Неопределено;

	НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСПодотчетнымиЛицами.СоздатьНаборЗаписей();
	СписокОтработанныхДокументов = новый СписокЗначений;
		
	Пока ЕстьДокументы Цикл
			
		ВыборкаДокументов = ПолучитьТаблицуДокументовПоРегиструВзаиморасчетыСПодотчетнымиЛицами(ДокументСсылка, СписокОтработанныхДокументов);
			
		ЕстьДокументы = ВыборкаДокументов.Количество() > 0;
			
		Пока ВыборкаДокументов.Следующий() Цикл
				
			ДокументСсылка = ВыборкаДокументов.Регистратор;
			СписокОтработанныхДокументов.Добавить(ДокументСсылка);
				
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			НаборЗаписей.Прочитать();

			Для Каждого Движение Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Движение.РасчетныйДокумент) Тогда
					Движение.Организация = Движение.РасчетныйДокумент.Организация;
				ИначеЕсли ДокументСсылка.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
					Движение.Организация = ДокументСсылка.Организация;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список документов, для которых нужно обновлять движения.
//
Функция ПолучитьТаблицуДокументовПоРегиструВзаиморасчетыСПодотчетнымиЛицами(СсылкаНач, СписокОтработанныхДокументов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
	|	РегистрУчета.Регистратор КАК Регистратор,
	|	РегистрУчета.Регистратор.Дата КАК Дата
	|ИЗ 	
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами КАК РегистрУчета
	|ГДЕ
	|	РегистрУчета.Организация = &ПустаяОрганизация "+
	?(СсылкаНач = Неопределено,"","
	|	И РегистрУчета.Регистратор > &СсылкаНач ")+
	?(СписокОтработанныхДокументов.Количество()>0,"	И Регистратор не в (&СписокОтработанныхДокументов)","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрУчета.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО Регистратор
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("СсылкаНач", 				СсылкаНач);
	Запрос.УстановитьПараметр("ПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокОтработанныхДокументов", СписокОтработанныхДокументов);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьТаблицуДокументовПоРегиструВзаиморасчетыСПодотчетнымиЛицами()


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = не ПолучитьРазрешениеНаОткрытиеФормы();
	
КонецПроцедуры
