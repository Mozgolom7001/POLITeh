
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ТекстВопроса = 
	"Выполнение данной обработки может занять продолжительное время
	|и является необратимой операцией. Настоятельно рекомендуется предварительно ознакомиться
	|cо справочной информацией. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработку();
	
КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт

	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Запущена обработка " + ЭтаФорма.Заголовок);

	СообщитьОСостоянииОбновления("","Заполнение типа адресного элемента в адресном классификаторе");

	// Исправляются типы адресных элементов
	ОбновитьКодыИТипАдресногоЭлементаВАдресномКЛС();
		
	СообщитьОСостоянииОбновления("","Заполнение типа адресного элемента в адресном классификаторе завершено");
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Выполнена обработка " + ЭтаФорма.Заголовок);

КонецПроцедуры

// Процедура устанавливает тип адресного элемента у тех записей у которых он 0
Процедура ОбновитьКодыИТипАдресногоЭлементаВАдресномКЛС() 
	

	МножительРегиона = УправлениеКонтактнойИнформацией.МаскаРегиона();
	Для НомерРегиона = 1 По 100 Цикл
		
		Состояние("Обновление элементов с кодом региона: " + Строка(НомерРегиона - 1));

		ТексЗапроса = "ВЫБРАТЬ
					  |	АдресныйКлассификатор.Код,
					  |	АдресныйКлассификатор.КодРегионаВКоде,
					  |	АдресныйКлассификатор.Наименование,
					  |	АдресныйКлассификатор.Сокращение,
					  |	АдресныйКлассификатор.Индекс,
					  |	АдресныйКлассификатор.ТипАдресногоЭлемента,
					  |	АдресныйКлассификатор.КодРайонаВКоде,
					  |	АдресныйКлассификатор.КодГородаВКоде,
					  |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
					  |	АдресныйКлассификатор.КодУлицыВКоде,
					  |	АдресныйКлассификатор.АльтернативныеНазвания
					  |ИЗ
					  |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
					  |
					  |ГДЕ
					  |	АдресныйКлассификатор.Код >= &НачальныйКод И
					  |	АдресныйКлассификатор.Код <= &КонечныйКод И
					  |	АдресныйКлассификатор.ТипАдресногоЭлемента = 0";
				
		Запрос = Новый Запрос(ТексЗапроса);
		Запрос.УстановитьПараметр("НачальныйКод", (НомерРегиона - 1) * МножительРегиона);
		Запрос.УстановитьПараметр("КонечныйКод", НомерРегиона * МножительРегиона - 1);
				
		ВыборкаСведений = Запрос.Выполнить().Выбрать();
		Если ВыборкаСведений.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НаборРезультирующихЗаписейАдресногоКЛС = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
		НаборРезультирующихЗаписейАдресногоКЛС.Отбор.КодРегионаВКоде.Значение = НомерРегиона - 1;
		НаборРезультирующихЗаписейАдресногоКЛС.Отбор.КодРегионаВКоде.Использование = Истина;
		НаборРезультирующихЗаписейАдресногоКЛС.Отбор.КодРегионаВКоде.ВидСравнения = ВидСравнения.Равно;
   		НаборРезультирующихЗаписейАдресногоКЛС.Очистить();
		НаборРезультирующихЗаписейАдресногоКЛС.Записать();
						
		Пока ВыборкаСведений.Следующий() Цикл

		 	СтрокаРегистра = НаборРезультирующихЗаписейАдресногоКЛС.Добавить();
			Код = ВыборкаСведений.Код;
			
			ТипЭлемента = УправлениеКонтактнойИнформацией.ПолучитьТипАдресногоЭлемента(Код);
			НовыйКодРегионаВКоде           = Цел(Код / УправлениеКонтактнойИнформацией.МаскаРегиона());
			НовыйКодРайонаВКоде            = Цел(Код / УправлениеКонтактнойИнформацией.МаскаРайона()) % 1000;
			НовыйКодГородаВКоде            = Цел(Код / УправлениеКонтактнойИнформацией.МаскаГорода()) % 1000;
			НовыйКодНаселенногоПунктаВКоде = Цел(Код / УправлениеКонтактнойИнформацией.МаскаНасПункта()) % 1000;
			НовыйКодУлицыВКоде             = Цел(Код / УправлениеКонтактнойИнформацией.МаскаУлицы())% 10000;
			 
			СтрокаРегистра.ТипАдресногоЭлемента = ТипЭлемента;
			СтрокаРегистра.Код = Код;
			СтрокаРегистра.КодРайонаВКоде = НовыйКодРайонаВКоде;
			СтрокаРегистра.КодРегионаВКоде = НовыйКодРегионаВКоде;
			СтрокаРегистра.КодГородаВКоде = НовыйКодГородаВКоде;
			СтрокаРегистра.КодНаселенногоПунктаВКоде = НовыйКодНаселенногоПунктаВКоде;
			СтрокаРегистра.КодУлицыВКоде = НовыйКодУлицыВКоде;
			
			СтрокаРегистра.Наименование = ВыборкаСведений.Наименование;
	        СтрокаРегистра.Сокращение = ВыборкаСведений.Сокращение;
			СтрокаРегистра.Индекс = ВыборкаСведений.Индекс;
			СтрокаРегистра.АльтернативныеНазвания = ВыборкаСведений.АльтернативныеНазвания;

			Если НаборРезультирующихЗаписейАдресногоКЛС.Количество() = 170 Тогда
				НаборРезультирующихЗаписейАдресногоКЛС.Записать(Ложь);
				НаборРезультирующихЗаписейАдресногоКЛС.Очистить();
			КонецЕсли;
			 
		КонецЦикла;
		
		Если НаборРезультирующихЗаписейАдресногоКЛС.Количество() <> 0 Тогда
			НаборРезультирующихЗаписейАдресногоКЛС.Записать(Ложь);
			НаборРезультирующихЗаписейАдресногоКЛС.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	// очищаем все элементы с типом = 0
    НаборУдаляемыхЗаписейАдресногоКЛС = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	НаборУдаляемыхЗаписейАдресногоКЛС.Отбор.ТипАдресногоЭлемента.Значение = 0;
	НаборУдаляемыхЗаписейАдресногоКЛС.Отбор.ТипАдресногоЭлемента.Использование = Истина;
	НаборУдаляемыхЗаписейАдресногоКЛС.Отбор.ТипАдресногоЭлемента.ВидСравнения = ВидСравнения.Равно;
    НаборУдаляемыхЗаписейАдресногоКЛС.Очистить();
	НаборУдаляемыхЗаписейАдресногоКЛС.Записать();

КонецПроцедуры

