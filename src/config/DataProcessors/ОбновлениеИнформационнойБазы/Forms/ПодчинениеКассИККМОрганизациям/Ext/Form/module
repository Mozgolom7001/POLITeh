
Перем мФормаИндикатора;
Перем ИсходнаяСтруктураКассы;
Перем ИсходнаяСтруктураКассыККМ;
Перем НоваяСтруктураКассы;
Перем НоваяСтруктураКассыККМ;

// Счетчик элементов для замены
Перем НовыхЭлементов;
Перем ВыполненоЗамен;

// Таблицы оборотов по кассам и организациям
Перем ТабКассы;
Перем ТабКассыККМ;
Перем ЗапускИзФормы;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	ЗапускИзФормы = истина;
	//ПроверятьПравильностьЗаполненияКассВДокументах = Истина;
	ТекстВопроса = 
	"Выполнение данной обработки может занять продолжительное время
	|и является необратимой операцией. Настоятельно рекомендуется предварительно ознакомиться
	|cо справочной информацией. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработку();	
КонецПроцедуры

Процедура ВыполнитьОбработку() экспорт
	Если не ЗапускИзФормы Тогда
		ПроверятьПравильностьЗаполненияКассВДокументах = Истина;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Запущена обработка " + ЭтаФорма.Заголовок);
	
    ВыполнитьПодчинениеКассИККМОрганизациям(ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
	
	Если ПроверятьПравильностьЗаполненияКассВДокументах Тогда
		ПоискНекорректногоСочетанияКассИОрганизаций();
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, ЭтотОбъект.Метаданные(), ,
	"Выполнена обработка " + ЭтаФорма.Заголовок);

КонецПроцедуры

Процедура ЗаменитьКассуВДокументах(Организация,ИсходнаяКасса,НоваяКасса, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи)
	
	МассивСсылок=Новый Массив;
	МассивСсылок.Добавить(ИсходнаяКасса);
	
	СсылкиДляЗамены=ВыполнитьПоискСсылок(Организация,МассивСсылок);
	ВыполнитьЗаменуЭлементов(НоваяКасса, СсылкиДляЗамены, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
	
КонецПроцедуры // ЗаменитьКассуВДокументах()

Функция ВыполнитьПоискСсылок(СсылкаОрганизация, СсылкаКасса)
	
	НайденныеСсылки = НайтиПоСсылкам(СсылкаКасса);	
	НайденныеСсылки.Колонки.Добавить("ВыполнитьЗамену",Новый ОписаниеТипов("Булево"));
	
	// Определим виды метаданных, в которых есть ссылка на организацию для проверки
	
	ТабМетаданных=НайденныеСсылки.Скопировать();
	ТабМетаданных.Свернуть("Метаданные");
	
	СписокПоОрганизациям=Новый СписокЗначений;
	
	Для Каждого Строка ИЗ ТабМетаданных Цикл
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация",Строка.Метаданные) Тогда
			СписокПоОрганизациям.Добавить(Строка.Метаданные);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаСсылка ИЗ НайденныеСсылки Цикл
		
		Если НЕ (СписокПоОрганизациям.НайтиПоЗначению(СтрокаСсылка.Метаданные))=Неопределено
			И СтрокаСсылка.Данные.Организация=СсылкаОрганизация Тогда
			
			СтрокаСсылка.ВыполнитьЗамену=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеСсылки;
	
КонецФункции

Функция ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи)
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Объект", Неопределено);	
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		Если НЕ СтрокаТаблицы.ВыполнитьЗамену Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					Если ВыполнятьВТранзакции Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					Возврат Ложь;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
		
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "ДТ");
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя + "ДТ"] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "ДТ");
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "КТ");
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя + "КТ"] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "КТ");
							КонецЦикла;
						Иначе
							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли; 
				КонецЦикла;
				
				ЕСли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Если ВыполнятьВТранзакции Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
						Возврат Ложь;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
							НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
						КонецЕсли;
					КонецЦикла;					
					Если НадоЗаписывать Тогда
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписи.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							НаборЗаписи.Записать();
						Исключение
							Если ВыполнятьВТранзакции Тогда
								ОтменитьТранзакцию();
							КонецЕсли;
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
			ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
			ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
			ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
			ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				Возврат Ложь;
				
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			Если ВыполнятьВТранзакции Тогда
					ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьПодчинениеКассИККМОрганизациям(ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи)
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);

	НоваяСтруктураКассы=Новый ДеревоЗначений;
	НоваяСтруктураКассы.Колонки.Добавить("Организация");
	НоваяСтруктураКассы.Колонки.Добавить("НовыйЭлемент",ОписаниеТиповБулево);
	НоваяСтруктураКассы.Колонки.Добавить("Касса");
	НоваяСтруктураКассы.Колонки.Добавить("ИсходнаяКасса");
	НоваяСтруктураКассы.Колонки.Добавить("ТекущийОстаток");

	НоваяСтруктураКассыККМ=Новый ДеревоЗначений;
	НоваяСтруктураКассыККМ.Колонки.Добавить("Организация");
	НоваяСтруктураКассыККМ.Колонки.Добавить("НовыйЭлемент",ОписаниеТиповБулево);
	НоваяСтруктураКассыККМ.Колонки.Добавить("Касса");
	НоваяСтруктураКассыККМ.Колонки.Добавить("ИсходнаяКасса");
	НоваяСтруктураКассыККМ.Колонки.Добавить("ТекущийОстаток");

	ИсходнаяСтруктураКассы=Новый ДеревоЗначений;
	ИсходнаяСтруктураКассыККМ=Новый ДеревоЗначений;

	//предварительное заполнение дерева касс
	ТабКассы = ПолучитьТаблицуДляКасс();
	ИсходнаяСтруктураКассы = ЗаполнитьИсходнуюСтруктуруКассы();
	ЗаполнитьСтруктуру(ИсходнаяСтруктураКассы,НоваяСтруктураКассы,ТабКассы);
	
	ТабКассыККМ = ПолучитьТаблицуДляКассККМ();
	ИсходнаяСтруктураКассыККМ = ЗаполнитьИсходнуюСтруктуруКассыККМ();
	ЗаполнитьСтруктуру(ИсходнаяСтруктураКассыККМ,НоваяСтруктураКассыККМ,ТабКассыККМ);

	ВыполнитьОбработкуСправочника(НоваяСтруктураКассы,"Кассы", ТабКассы, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
	ВыполнитьОбработкуСправочника(НоваяСтруктураКассыККМ,"КассыККМ", ТабКассыККМ, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);

КонецПроцедуры

Функция ПолучитьТаблицуДляКассККМ()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ДвиженияПоОрганизациям.Организация КАК Организация,
	             |	ДвиженияПоОрганизациям.Касса КАК Касса,
	             |	СУММА(ДвиженияПоОрганизациям.СуммаПриход) КАК СуммаПриход,
	             |	СУММА(ДвиженияПоОрганизациям.СуммаРасход) КАК СуммаРасход
	             |ИЗ
	             |	(ВЫБРАТЬ
	             |		РозничнаяВыручка.Регистратор.Организация КАК Организация,
	             |		РозничнаяВыручка.РозничнаяТочка КАК Касса,
	             |		СУММА(РозничнаяВыручка.Сумма) КАК СуммаПриход,
	             |		0 КАК СуммаРасход
	             |	ИЗ
	             |		РегистрНакопления.РозничнаяВыручка КАК РозничнаяВыручка
	             |	ГДЕ
	             |		РозничнаяВыручка.ВидДвижения = &Приход
	             |		И РозничнаяВыручка.РозничнаяТочка ССЫЛКА Справочник.КассыККМ
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		РозничнаяВыручка.Регистратор.Организация,
	             |		РозничнаяВыручка.РозничнаяТочка
	             |	
	             |	ОБЪЕДИНИТЬ ВСЕ
	             |	
	             |	ВЫБРАТЬ
	             |		РозничнаяВыручка.Регистратор.Организация,
	             |		РозничнаяВыручка.РозничнаяТочка,
	             |		0,
	             |		СУММА(РозничнаяВыручка.Сумма)
	             |	ИЗ
	             |		РегистрНакопления.РозничнаяВыручка КАК РозничнаяВыручка
	             |	ГДЕ
	             |		РозничнаяВыручка.ВидДвижения = &Расход
	             |		И РозничнаяВыручка.РозничнаяТочка ССЫЛКА Справочник.КассыККМ
	             |	
	             |	СГРУППИРОВАТЬ ПО
	             |		РозничнаяВыручка.Регистратор.Организация,
	             |		РозничнаяВыручка.РозничнаяТочка
	             |	) КАК ДвиженияПоОрганизациям
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДвиженияПоОрганизациям.Организация,
	             |	ДвиженияПоОрганизациям.Касса";
	
	Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуДляКассККМ()

Функция ПолучитьТаблицуДляКасс()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЕстьNull(ДвиженияПоОрганизациям.Организация, &ПустаяОрганизация) КАК Организация,
	|	ДвиженияПоОрганизациям.Касса КАК Касса,
	|	СУММА(ДвиженияПоОрганизациям.СуммаПриход) КАК СуммаПриход,
	|	СУММА(ДвиженияПоОрганизациям.СуммаРасход) КАК СуммаРасход
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДенежныеСредства.Регистратор.Организация КАК Организация,
	|		ДенежныеСредства.БанковскийСчетКасса КАК Касса,
	|		СУММА(ДенежныеСредства.Сумма) КАК СуммаПриход,
	|		0 КАК СуммаРасход
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.ВидДвижения = &Приход
	|		И ДенежныеСредства.ВидДенежныхСредств = &Наличные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДенежныеСредства.Регистратор.Организация,
	|		ДенежныеСредства.БанковскийСчетКасса
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДенежныеСредства.Регистратор.Организация,
	|		ДенежныеСредства.БанковскийСчетКасса,
	|		0,
	|		СУММА(ДенежныеСредства.Сумма)
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредства КАК ДенежныеСредства
	|	ГДЕ
	|		ДенежныеСредства.ВидДвижения = &Расход
	|		И ДенежныеСредства.ВидДенежныхСредств = &Наличные
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДенежныеСредства.Регистратор.Организация,
	|		ДенежныеСредства.БанковскийСчетКасса) КАК ДвиженияПоОрганизациям
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияПоОрганизациям.Организация,
	|	ДвиженияПоОрганизациям.Касса";
	
	Запрос.УстановитьПараметр("Наличные",Перечисления.ВидыДенежныхСредств.Наличные);
	Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Расход",ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());

	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьТаблицуДляКасс()

Функция ЗаполнитьИсходнуюСтруктуруКассы()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Кассы.Ссылка КАК Касса,
	|	ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредства.Остатки КАК ДенежныеСредстваОстатки
	|		ПО Кассы.Ссылка = ДенежныеСредстваОстатки.БанковскийСчетКасса
	|ГДЕ
	|	Кассы.Владелец = &ПустаяОрганизация
	|Упорядочить ПО
	|	Касса ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
КонецФункции // ЗаполнитьИсходнуюСтруктуруКассы()

Функция ЗаполнитьИсходнуюСтруктуруКассыККМ()
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	КассыККМ.Ссылка КАК Касса,
	             |	ЕСТЬNULL(РозничнаяВыручкаОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	             |ИЗ
	             |	Справочник.КассыККМ КАК КассыККМ
	             |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РозничнаяВыручка.Остатки КАК РозничнаяВыручкаОстатки
	             |		ПО КассыККМ.Ссылка = РозничнаяВыручкаОстатки.РозничнаяТочка
	             |ГДЕ
	             |	КассыККМ.Ссылка ССЫЛКА Справочник.КассыККМ
	             |	И КассыККМ.Владелец = &ПустаяОрганизация
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Касса";
	
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
КонецФункции // ЗаполнитьИсходнуюСтруктуруКассыККМ()

Процедура ЗаполнитьСтруктуру(ИсходнаяСтруктура,НоваяСтруктура,ТабКассы)
	
	ТабОрганизации=ТабКассы.Скопировать();
	ТабОрганизации.Свернуть("Организация","СуммаПриход,СуммаРасход");

	
	ТабКассыПроверка=ТабКассы.Скопировать();
	ТабКассыПроверка.Свернуть("Касса","СуммаПриход,СуммаРасход");
	
	НоваяСтруктура.Строки.Очистить();
	
	Для каждого СтрОрганизация Из ТабОрганизации Цикл
		
		Если Не ЗначениеЗаполнено(СтрОрганизация.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСтруктура=НоваяСтруктура.Строки.Добавить();
		СтрокаСтруктура.Организация=СтрОрганизация.Организация;
		
		Для Каждого СтрокаКасса ИЗ ИсходнаяСтруктура.Строки Цикл
			
			Если СтрокаКасса.Касса.ЭтоГруппа Тогда
				
				СтрокаСтруктураКасса=СтрокаСтруктура.Строки.Добавить();
				СтрокаСтруктураКасса.Организация=СтрОрганизация.Организация;
				СтрокаСтруктураКасса.ИсходнаяКасса=СтрокаКасса.Касса;
				СтрокаСтруктураКасса.Касса=СтрокаКасса.Касса.Наименование;
				СтрокаСтруктураКасса.НовыйЭлемент=Истина;
				
				ДобавитьСтрокиВНовуюСтруктуру(СтрокаКасса,СтрокаСтруктураКасса,ТабКассы, СтрОрганизация);
				
				Если СтрокаСтруктураКасса.Строки.Количество()=0 Тогда
					СтрокаСтруктура.Строки.Удалить(СтрокаСтруктураКасса);
				КонецЕсли;
				
			Иначе
				
				СтруктураПоиска=Новый Структура;
				СтруктураПоиска.Вставить("Касса",СтрокаКасса.Касса);
				СтрокиДвижение=ТабКассы.НайтиСтроки(СтруктураПоиска);
				
				Если СтрокиДвижение.Количество()=1 Тогда
					
					Если СтрокиДвижение[0].Организация=СтрОрганизация.Организация Тогда
						СтрокаСтруктураКасса=СтрокаСтруктура.Строки.Добавить();
						СтрокаСтруктураКасса.Касса=СтрокаКасса.Касса.Наименование;
						СтрокаСтруктураКасса.Организация=СтрОрганизация.Организация;
						СтрокаСтруктураКасса.ИсходнаяКасса=СтрокаКасса.Касса;
						СтрокаСтруктураКасса.ТекущийОстаток=СтрокиДвижение[0].СуммаПриход-СтрокиДвижение[0].СуммаРасход;
					КонецЕсли;
					
				ИначеЕсли СтрокиДвижение.Количество()>1 Тогда
					
					// Кассу с максимальными оборотами не заменяем, а только меняем родителя и владельца
					МаксОборот=0;
					НайденныйОборот=0;	
					
					Для Каждого СтрокаОстаток ИЗ СтрокиДвижение Цикл
						
						МаксОборот=?((СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход)>МаксОборот,(СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход),МаксОборот);
						
						Если СтрокаОстаток.Организация=СтрОрганизация.Организация И (СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход)<>0 Тогда	
							СтрокаСтруктураКасса=СтрокаСтруктура.Строки.Добавить();
							СтрокаСтруктураКасса.Касса=СтрокаКасса.Касса.Наименование;
							СтрокаСтруктураКасса.Организация=СтрОрганизация.Организация;
							СтрокаСтруктураКасса.ИсходнаяКасса=СтрокаКасса.Касса;
							СтрокаСтруктураКасса.ТекущийОстаток=СтрокаОстаток.СуммаПриход-СтрокаОстаток.СуммаРасход;
							НайденныйОборот=СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход;
						КонецЕсли;
						
					КонецЦикла;
					
					Если НайденныйОборот<>0 Тогда
						
						Если НЕ НайденныйОборот=МаксОборот Тогда
							
							СтрокаСтруктураКасса.НовыйЭлемент=Истина;
							
						Иначе
							
							СтрокаСтруктураКасса.НовыйЭлемент=Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если СтрокаСтруктура.Строки.Количество()=0 Тогда
			НоваяСтруктура.Строки.Удалить(СтрокаСтруктура);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗаполнитьНовуюСтруктуру()

Процедура ВыполнитьОбработкуСправочника(НоваяСтруктура,ИмяСправочника, ТабКассы, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи)
	
	Для каждого СтрокаОрганизация Из НоваяСтруктура.Строки Цикл
		
		Для Каждого Строка ИЗ СтрокаОрганизация.Строки Цикл
			
			Если Строка.ИсходнаяКасса.ЭтоГруппа Тогда
				
				ТекГруппа=Справочники.Кассы.НайтиПоНаименованию(Строка.Касса);
				
				Если (НЕ ТекГруппа.Пустая()) И ТекГруппа.Владелец=Справочники.Организации.ПустаяСсылка() Тогда
					
					ТекГруппаОбъект=ТекГруппа.ПолучитьОбъект();
					ТекГруппаОбъект.Владелец=Строка.Организация;
					ТекГруппаОбъект.Записать();
					
				Иначе
					
					ТекГруппаОбъект=Справочники[ИмяСправочника].СоздатьГруппу();
					ТекГруппаОбъект.Владелец=Строка.Организация;
					ТекГруппаОбъект.Наименование=Строка.Касса;
					ТекГруппаОбъект.Записать();
					Строка.НовыйЭлемент=Ложь;
					
				КонецЕсли;
				
				СоздатьСтруктуруГруппы(Строка,ТекГруппаОбъект.Ссылка,ИмяСправочника, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
				
			Иначе
				
				Если Строка.НовыйЭлемент Тогда
					
					Элемент=Справочники[ИмяСправочника].СоздатьЭлемент();
					
					Если ИмяСправочника="Кассы" Тогда
						Элемент.ВалютаДенежныхСредств=Строка.ИсходнаяКасса.ВалютаДенежныхСредств;
					КонецЕсли;
					
					Элемент.Наименование=Строка.Касса;
					Элемент.Владелец=Строка.Организация;
					Элемент.Записать();
					
					ЗаменитьКассуВДокументах(Строка.Организация,Строка.ИсходнаяКасса,Элемент.Ссылка, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
					Строка.НовыйЭлемент=Ложь;
					
				Иначе
					
					Элемент=Строка.ИсходнаяКасса.ПолучитьОбъект();
					Элемент.Владелец=Строка.Организация;
					Элемент.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Для элементов и групп, по которым не было движений вообще, владельцем устанавливается организация, по которой были наибольшие обороты.
	ТабОбработки=ТабКассы.Скопировать();
	ТабОбработки.Свернуть("Организация","СуммаПриход,СуммаРасход");
	ОрганизацияПоУмолчанию=Справочники.Организации.ПустаяСсылка();
	МаксОборот=0;
	
	Для Каждого СтрОборот ИЗ ТабОбработки Цикл
		Если стрОборот.Организация.Пустая() Тогда
			Продолжить;
		КонецЕсли;

		Если (СтрОборот.СуммаПриход+СтрОборот.СуммаРасход)>МаксОборот Тогда
			
			МаксОборот=СтрОборот.СуммаПриход+СтрОборот.СуммаРасход;
			ОрганизацияПоУмолчанию=СтрОборот.Организация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОрганизацияПоУмолчанию.Пустая() Тогда // Не было оборотов по регистру "Кассы" или "КассыККМ". Выбираем первую организацию из списка.
		
		 ВыборкаОрганизации=Справочники.Организации.Выбрать();
		 
		 Если ВыборкаОрганизации.Следующий() Тогда
			 
			 ОрганизацияПоУмолчанию=ВыборкаОрганизации.Ссылка;
			 
		 КонецЕсли;
		 
	 КонецЕсли;
	 
	 Если ИмяСправочника="Кассы" Тогда
		 ВыборкаПустые=Справочники[ИмяСправочника].ВыбратьИерархически(,Справочники.Организации.ПустаяСсылка());
	 Иначе
		 ВыборкаПустые=Справочники[ИмяСправочника].Выбрать(,Справочники.Организации.ПустаяСсылка());
	 КонецЕсли;
	 
	 Пока ВыборкаПустые.Следующий() Цикл 
		 
		 ВыборкаОбъект=ВыборкаПустые.ПолучитьОбъект();
		 
		 Если ВыборкаОбъект.Родитель=Справочники.Кассы.ПустаяСсылка() ИЛИ ВыборкаОбъект.Родитель.Владелец=Справочники.Организации.ПустаяСсылка() Тогда	 
			 ВыборкаОбъект.Владелец=ОрганизацияПоУмолчанию;
		 Иначе
			 ВыборкаОбъект.Владелец=ВыборкаОбъект.Родитель.Владелец;
		 КонецЕсли;
		 
		 ВыборкаОбъект.Записать();
		 
	КонецЦикла;
		 	
КонецПроцедуры // 

Процедура ДобавитьСтрокиВНовуюСтруктуру(СтрокаКасса,СтрокаСтруктура,ТабКассы,СтрОрганизация)
	
	Для Каждого СтрокаКасса ИЗ СтрокаКасса.Строки Цикл
		
		Если СтрокаКасса.Касса.ЭтоГруппа Тогда
			
			СтрокаСтруктураКасса=СтрокаСтруктура.Строки.Добавить();
			СтрокаСтруктураКасса.Организация=СтрОрганизация.Организация;
			СтрокаСтруктураКасса.ИсходнаяКасса=СтрокаКасса.Касса;
			СтрокаСтруктураКасса.НовыйЭлемент=Истина;
			
			ДобавитьСтрокиВНовуюСтруктуру(СтрокаКасса,СтрокаСтруктураКасса,ТабКассы,СтрОрганизация);
			
			Если СтрокаСтруктураКасса.Строки.Количество()=0 Тогда
				СтрокаСтруктура.Строки.Удалить(СтрокаСтруктураКасса);
			КонецЕсли;
			
		Иначе
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("Касса",СтрокаКасса.Касса);
			СтрокиДвижение=ТабКассы.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиДвижение.Количество()=1 Тогда
				
				Если СтрокиДвижение[0].Организация=СтрОрганизация.Организация Тогда
					СтрокаСтруктураКасса=СтрокаСтруктура.Строки.Добавить();
					СтрокаСтруктураКасса.Касса=СтрокаКасса.Касса.Наименование;
					СтрокаСтруктураКасса.Организация=СтрОрганизация.Организация;
					СтрокаСтруктураКасса.ИсходнаяКасса=СтрокаКасса.Касса;
					СтрокаСтруктураКасса.ТекущийОстаток=СтрокиДвижение[0].СуммаПриход-СтрокиДвижение[0].СуммаРасход;
				КонецЕсли;
				
			ИначеЕсли СтрокиДвижение.Количество()>1 Тогда
				
				// Кассу с максимальными оборотами не заменяем, а только меняем родителя и владельца
				МаксОборот=0;
				НайденныйОборот=0;	
				
				Для Каждого СтрокаОстаток ИЗ СтрокиДвижение Цикл
					
					МаксОборот=?((СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход)>МаксОборот,(СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход),МаксОборот);
					
					Если СтрокаОстаток.Организация=СтрОрганизация.Организация И (СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход)<>0 Тогда	
						СтрокаСтруктураКасса=СтрокаСтруктура.Строки.Добавить();
						СтрокаСтруктураКасса.Касса=СтрокаКасса.Касса.Наименование;
						СтрокаСтруктураКасса.Организация=СтрОрганизация.Организация;
						СтрокаСтруктураКасса.ИсходнаяКасса=СтрокаКасса.Касса;
						СтрокаСтруктураКасса.ТекущийОстаток=СтрокаОстаток.СуммаПриход-СтрокаОстаток.СуммаРасход;
						НайденныйОборот=СтрокаОстаток.СуммаПриход+СтрокаОстаток.СуммаРасход;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НайденныйОборот<>0 Тогда
					
					Если НЕ НайденныйОборот=МаксОборот Тогда
						
						СтрокаСтруктураКасса.НовыйЭлемент=Истина;
						
					Иначе
						
						СтрокаСтруктураКасса.НовыйЭлемент=Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры // ДобавитьСтрокиВНовуюСтруктуру

Процедура СоздатьСтруктуруГруппы(Строка,ТекущаяГруппа,ИмяСправочника, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи)
	
	Для каждого Строка Из Строка.Строки Цикл
		
		Если Строка.ИсходнаяКасса.ЭтоГруппа Тогда
			
			ТекГруппа=Справочники.Кассы.НайтиПоНаименованию(Строка.Касса,Истина);
			
			Если (НЕ ТекГруппа.Пустая()) И ТекГруппа.Владелец=Справочники.Организации.ПустаяСсылка() Тогда
				
				ТекГруппаОбъект=ТекГруппа.ПолучитьОбъект();
				ТекГруппаОбъект.Владелец=Строка.Организация;
				ТекГруппаОбъект.Родитель=ТекущаяГруппа;
				ТекГруппаОбъект.Записать();
				
			Иначе
					
				ТекГруппаОбъект=Справочники[ИмяСправочника].СоздатьГруппу();
				ТекГруппаОбъект.Владелец=Строка.Организация;
				ТекГруппаОбъект.Родитель=ТекущаяГруппа;
				ТекГруппаОбъект.Наименование=Строка.Касса;
				ТекГруппаОбъект.Записать();
				ТекГруппаОбъект.НовыйЭлемент=Ложь;
				
			КонецЕсли;
			
			СоздатьСтруктуруГруппы(Строка,ТекГруппаОбъект.Ссылка,ИмяСправочника, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
			
		Иначе
			
			Если Строка.НовыйЭлемент Тогда
				
				Элемент=Справочники[ИмяСправочника].СоздатьЭлемент();
				
				Если ИмяСправочника="Кассы" Тогда
					Элемент.ВалютаДенежныхСредств=Строка.ИсходнаяКасса.ВалютаДенежныхСредств;
				КонецЕсли;
				
				Элемент.Родитель=ТекущаяГруппа;
				Элемент.Наименование=Строка.Касса;
				Элемент.Владелец=Строка.Организация;
				Элемент.Записать();
				ЗаменитьКассуВДокументах(Строка.Организация,Строка.ИсходнаяКасса,Элемент.Ссылка, ВыполнятьВТранзакции, ОтключатьКонтрольЗаписи);
				Строка.НовыйЭлемент=Ложь;
				
				
			Иначе
				
				Элемент=Строка.ИсходнаяКасса.ПолучитьОбъект();
				Элемент.Владелец=Строка.Организация;
				Элемент.Родитель=ТекущаяГруппа;
				Элемент.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат;
	
КонецПроцедуры // СоздатьСтруктуруГруппы()

Функция ПоискНекорректногоСочетанияКассИОрганизаций_ПолучитьТекстЗапроса(ТаблицаВидовДокументов)
	
	ТекстЗапроса = "";
	Для Каждого Строка Из ТаблицаВидовДокументов Цикл
		ТекстОграниченияТипа = "";
		Если Строка.ЕстьТипКасса Тогда
			ТекстОграниченияТипа = ТекстОграниченияТипа 
				+ "ТекущийДокумент."+ Строка.РеквизитКасса + " ССЫЛКА Справочник.Кассы";
		КонецЕсли;
		Если Строка.ЕстьТипКассаККМ Тогда
			ТекстОграниченияТипа = ТекстОграниченияТипа + ?(Строка.ЕстьТипКасса, "
				|	ИЛИ ", "")
				+ "ТекущийДокумент."+ Строка.РеквизитКасса + " ССЫЛКА Справочник.КассыККМ";
		КонецЕсли;
		Если ПустаяСтрока(ТекстОграниченияТипа) Тогда
			Продолжить;
		КонецЕсли;	
		ТекстОграниченияТипа = ТекстОграниченияТипа ;
		
	    ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "","", "
			|	ОБЪЕДИНИТЬ ВСЕ ") + "
			|ВЫБРАТЬ 
	        |	ТекущийДокумент.Ссылка  КАК Документ,
	        |	ТекущийДокумент."+ Строка.РеквизитКасса + " КАК Касса,
	        |	ТекущийДокумент."+?(Строка.ТабличнаяЧастьКассы = "","","Ссылка.") + Строка.РеквизитОрганизация +" КАК Организация
	        |ИЗ
	        |	Документ." + Строка.Документ + ?(Строка.ТабличнаяЧастьКассы = "","","."+Строка.ТабличнаяЧастьКассы) + " КАК ТекущийДокумент
			|ГДЕ
			|	(" + ТекстОграниченияТипа + ")
			|	И (НЕ ТекущийДокумент."+ Строка.РеквизитКасса + ".Владелец = ТекущийДокумент."+?(Строка.ТабличнаяЧастьКассы = "","","Ссылка.") + Строка.РеквизитОрганизация + ")";
	КонецЦикла;
	Возврат ТекстЗапроса;
КонецФункции

Функция ПоискНекорректногоСочетанияКассИОрганизаций_ПолучитьТаблицуВидовДокументов()
	ТипКасса = Тип("СправочникСсылка.Кассы");
	ТипКассаККМ = Тип("СправочникСсылка.КассыККМ");
	ТипОрганизация = Тип("СправочникСсылка.Организации");
	ТаблицаВидовДокументов = Новый ТаблицаЗначений();
	ТаблицаВидовДокументов.Колонки.Добавить("Документ");
	ТаблицаВидовДокументов.Колонки.Добавить("ТабличнаяЧастьКассы");
	ТаблицаВидовДокументов.Колонки.Добавить("РеквизитОрганизация");
	ТаблицаВидовДокументов.Колонки.Добавить("РеквизитКасса");
	ТаблицаВидовДокументов.Колонки.Добавить("ЕстьТипКасса");
	ТаблицаВидовДокументов.Колонки.Добавить("ЕстьТипКассаККМ");
	
	Для Каждого ТекДок Из Метаданные.Документы Цикл
		
		Если ВРЕГ(ТекДок.Имя) = ВРЕГ("ВнутреннееПеремещениеНаличныхДенежныхСредств") Тогда
			//Пропустим этот документ, т.к. у него в шапке 2 организации и 2 кассы
			Продолжить;
		КонецЕсли;	
		
		ИмяРеквизитаОрганизация = Неопределено;
		
		Для Каждого ТекРеквизит Из ТекДок.Реквизиты Цикл
			
			Если ТекРеквизит.Тип.СодержитТип(ТипОрганизация) Тогда
				ИмяРеквизитаОрганизация = ТекРеквизит.Имя;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИмяРеквизитаОрганизация = Неопределено тогда
			Продолжить;
		КонецЕсли;	
		
		Для Каждого ТекРеквизит Из ТекДок.Реквизиты Цикл
			
			ЕстьТипКасса    = ТекРеквизит.Тип.СодержитТип(ТипКасса);
			ЕстьТипКассаККМ = ТекРеквизит.Тип.СодержитТип(ТипКассаККМ);
			
			Если ЕстьТипКасса ИЛИ ЕстьТипКассаККМ Тогда
				НовСтр = ТаблицаВидовДокументов.Добавить();
				НовСтр.Документ            = ТекДок.Имя;
				НовСтр.ТабличнаяЧастьКассы = "";
				НовСтр.РеквизитКасса       = ТекРеквизит.Имя;
				НовСтр.ЕстьТипКасса        = ЕстьТипКасса;
				НовСтр.ЕстьТипКассаККМ     = ЕстьТипКассаККМ;
				НовСтр.РеквизитОрганизация = ИмяРеквизитаОрганизация;
			КонецЕсли;	
			
		КонецЦикла;
		
		//Проверим табличные части
		Для Каждого ТекТЧ Из ТекДок.ТабличныеЧасти Цикл
			
			Для Каждого ТекРеквизит Из ТекТЧ.Реквизиты Цикл
				
				ЕстьТипКасса    = ТекРеквизит.Тип.СодержитТип(ТипКасса);
				ЕстьТипКассаККМ = ТекРеквизит.Тип.СодержитТип(ТипКассаККМ);
			
				Если ЕстьТипКасса ИЛИ ЕстьТипКассаККМ Тогда
					НовСтр = ТаблицаВидовДокументов.Добавить();
					НовСтр.Документ            = ТекДок.Имя;
					НовСтр.ТабличнаяЧастьКассы = ТекТЧ.Имя;
					НовСтр.РеквизитКасса       = ТекРеквизит.Имя;
					НовСтр.ЕстьТипКасса        = ЕстьТипКасса;
					НовСтр.ЕстьТипКассаККМ     = ЕстьТипКассаККМ;
					НовСтр.РеквизитОрганизация = ИмяРеквизитаОрганизация;
				КонецЕсли;	
				
			КонецЦикла;		
			
		КонецЦикла;		
		
	КонецЦикла;
	
	Возврат ТаблицаВидовДокументов;
	
КонецФункции	

//Поиск некорректного сочетания касс и организаций в документах после выполнения обработки переподчинения касс
//
Процедура ПоискНекорректногоСочетанияКассИОрганизаций()
	ТаблицаВидовДокументов = ПоискНекорректногоСочетанияКассИОрганизаций_ПолучитьТаблицуВидовДокументов();
	
	Запрос = Новый Запрос();
	Запрос.Текст = ПоискНекорректногоСочетанияКассИОрганизаций_ПолучитьТекстЗапроса(ТаблицаВидовДокументов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Сообщить("Обнаружены кассовые документы, в которых организация в документе не совпадает с организацией, которой принадлежит касса", СтатусСообщения.Важное);
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщить("" + Символы.Таб + "Документ: """ + Выборка.Документ + """, организация: """ + Выборка.Организация + """, касса """ + Выборка.Касса + """ принадлежит другой организации!");
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = не ПолучитьРазрешениеНаОткрытиеФормы();
	
КонецПроцедуры

Процедура ПриОткрытии()
	ЗапускИзФормы = истина;
КонецПроцедуры


ЗапускИзФормы = ложь;