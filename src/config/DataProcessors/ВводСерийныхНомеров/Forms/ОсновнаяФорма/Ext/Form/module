Перем мПараметрыСвязиСтрокТЧ;
Перем мНовыйКлючСвязи;
Перем мИмяТабличнойЧастиСерийныеНомера;
Перем мСтрокаТабличнойЧасти;
Перем мСоставНабораСтрокаТабличнойЧасти;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет строки табличной части "Начальные значения порядка присвоения".
//
Процедура ЗаполнитьНачальныеЗначенияПорядкаПрисвоения(ПорядокПрисвоения = Неопределено)
	
	Если ПорядокПрисвоения = Неопределено Тогда
		ПорядокПрисвоения = ПорядокПрисвоенияСерийногоНомера;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПорядокПрисвоения) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаВремя", 			Документ.Дата);
	СтруктураПараметров.Вставить("Номенклатура", 		Номенклатура);
	СтруктураПараметров.Вставить("Организация", 		Организация);
	СтруктураПараметров.Вставить("Подразделение", 		Подразделение);
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Для Каждого Строка Из ПорядокПрисвоения.РазрядыСерийногоНомера Цикл
		
		Если Строка.РазмерРазряда = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = НачальныеЗначенияПорядкаПрисвоения.Добавить();
		НоваяСтрока.РазмерРазряда 	= Строка.РазмерРазряда;
		НоваяСтрока.ТипРазряда 		= Строка.ТипРазряда;
		НоваяСтрока.Источник 		= Строка.Источник;
		НоваяСтрока.Значение 		= Строка.Значение;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеЗначенияПорядкаПрисвоения()

// Процедура сохраняет в документе серийные номера.
//
Процедура ЗаписатьСерийныеНомераВДокумент()
	
	Если Документ[ИмяТабличнойЧасти].Индекс(мСтрокаТабличнойЧасти) = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Документ[мИмяТабличнойЧастиСерийныеНомера].Загрузить(СерийныеНомера.Выгрузить());
	Документ.мПараметрыСвязиСтрокТЧ = мПараметрыСвязиСтрокТЧ;
	
	Если мНовыйКлючСвязи Тогда
		мСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		Если ОбработкаСоставНабора.Документ <> Неопределено
		   И мСоставНабораСтрокаТабличнойЧасти <> Неопределено
		   И ОбработкаСоставНабора[ИмяТабличнойЧасти].Индекс(мСоставНабораСтрокаТабличнойЧасти) <> -1
		Тогда
			мСоставНабораСтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьСерийныеНомераВДокумент()

// Процедура осуществляет добавление количества номенклатуры в документ
//
// Параметры
//  Количество       - <Число>, <Неопределено>
//                   - Количество, соответствующее номенклатуре
//
Процедура ДобавитьКоличествоВДокумент(Количество)

	Перем СтруктураОтбора;
	Перем СтруктураПоиска;
	Перем РезультатПоиска;
	Перем Товар;

	СтруктураОтбора                            = Новый Структура("Команда,
	                                                             |Номенклатура,
	                                                             |ЕдиницаИзмерения,
	                                                             |Характеристика,
	                                                             |Серия,
	                                                             |Качество,
	                                                             |Количество");
	СтруктураОтбора.Команда                    = "ПодборВТабличнуюЧасть" + ИмяТабличнойЧасти;
	СтруктураОтбора.Номенклатура               = Номенклатура;
	СтруктураОтбора.ЕдиницаИзмерения           = ?(НЕ ЗначениеЗаполнено(ЕдиницаИзмерения),
	                                               Номенклатура.ЕдиницаДляОтчетов,
	                                               ЕдиницаИзмерения);
	СтруктураОтбора.Характеристика 			   = ?(НЕ ЗначениеЗаполнено(ХарактеристикаНоменклатуры),
	                                               Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
	                                               ХарактеристикаНоменклатуры);
	СтруктураОтбора.Серия          			   = ?(НЕ ЗначениеЗаполнено(СерияНоменклатуры),
	                                               Справочники.СерииНоменклатуры.ПустаяСсылка(),
	                                               СерияНоменклатуры);
	СтруктураОтбора.Качество                   = Справочники.Качество.Новый;
	                                               
	СтруктураОтбора.Количество                 = ?(НЕ ЗначениеЗаполнено(Количество),
	                                               1,
	                                               Количество);

	ЭтаФорма.РежимВыбора = Истина;											   
	ОповеститьОВыборе(СтруктураОтбора);
	Активизировать();

КонецПроцедуры // ДобавитьКоличествоВДокумент()

// Функция проверяет правильность указания количестава серийных номеров.
// Возвращает:
// 	Истина - проверка прошла успешно
// 	Ложь - обнаружены ошибки.
//
Функция ПроверитьКоличествоСерийныхНомеров()
	
	Отбор = Новый Структура("КлючСвязи", КлючСвязи);
	МассивСтрок = СерийныеНомера.НайтиСтроки(Отбор);
	
	КоличествоСерийныхНомеров = МассивСтрок.Количество();
	
	Если КоличествоСерийныхНомеров < Количество Тогда
		
		Ответ = Вопрос("Количество серийных номеров меньше количества номенклатуры. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли КоличествоСерийныхНомеров > Количество Тогда
		
		Ответ = Вопрос("Количество серийных номеров больше количества номенклатуры. Изменить количество в документе?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДобавитьКоличествоВДокумент(КоличествоСерийныхНомеров - Количество);
		ИначеЕсли  Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПроверитьКоличествоСерийныхНомеров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура формирует текст в информационной надписи о примере серийного номера.
//
Процедура ОбновитьПодвал()
	
	СерийныйНомер = "";
	КоличествоЗнаков = 0;
	
	Для Каждого Строка Из НачальныеЗначенияПорядкаПрисвоения Цикл
		
		СерийныйНомер = СерийныйНомер + Строка.НачальноеЗначениеРазряда;
		КоличествоЗнаков = КоличествоЗнаков + Строка.РазмерРазряда;
		
	КонецЦикла;
	
	ЭлементыФормы.ПримерСерийногоНомера.Значение = СерийныйНомер;
	ЭлементыФормы.КоличествоЗнаков.Значение = КоличествоЗнаков;
	
	Отбор = Новый Структура("КлючСвязи", КлючСвязи);
	МассивСтрок = СерийныеНомера.НайтиСтроки(Отбор);
	
	КоличествоСерийныхНомеров = МассивСтрок.Количество();
	ЭлементыФормы.КоличествоСерийныхНомеров.Значение = КоличествоСерийныхНомеров;
	ЭлементыФормы.КоличествоСерийныхНомеровВвод.Значение = КоличествоСерийныхНомеров;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Перем ИсходнаяЕдиницаИзмерения;
	
	// Проверим тип реквизита формы СтруктураПараметровФормы. Должен быть "Структура".
	// При неверном типе не будем запускать подбор.
	Если ТипЗнч(СтруктураИсходныхПараметров) <> Тип("Структура") Тогда
		
		Отказ = Истина;
		Предупреждение("Не верный тип параметра ""СтруктураИсходныхПараметров""!
		               |Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;

	КонецЕсли;
	
	СозданиеНовыхСерийныхНомеров = Ложь;
	мИмяТабличнойЧастиСерийныеНомера = Неопределено;
	
	СтруктураИсходныхПараметров.Свойство("Номенклатура", 				Номенклатура);
	СтруктураИсходныхПараметров.Свойство("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("СерияНоменклатуры", 			СерияНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("ЕдиницаИзмерения", 			ИсходнаяЕдиницаИзмерения);
	СтруктураИсходныхПараметров.Свойство("Количество", 					Количество);
	СтруктураИсходныхПараметров.Свойство("ДокументОбъект", 				Документ);
	СтруктураИсходныхПараметров.Свойство("ОбработкаСоставНабора", 		ОбработкаСоставНабора);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧасти", 			ИмяТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧастиСерийныеНомера", мИмяТабличнойЧастиСерийныеНомера);
	СтруктураИсходныхПараметров.Свойство("НомерСтрокиТабличнойЧасти", 	НомерСтрокиТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("СозданиеНовыхСерийныхНомеров",СозданиеНовыхСерийныхНомеров);
	СтруктураИсходныхПараметров.Свойство("ПараметрыСвязиСтрокТЧ",		мПараметрыСвязиСтрокТЧ);
	СтруктураИсходныхПараметров.Свойство("НоменклатурнаяГруппа",		НоменклатурнаяГруппа);
	СтруктураИсходныхПараметров.Свойство("СтрокаТабличнойЧасти",		мСтрокаТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("СоставНабораСтрокаТабличнойЧасти", мСоставНабораСтрокаТабличнойЧасти);
	
	Если мИмяТабличнойЧастиСерийныеНомера = Неопределено Тогда
		мИмяТабличнойЧастиСерийныеНомера = "СерийныеНомера";
	КонецЕсли;
	
	Если НомерСтрокиТабличнойЧасти = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если мСтрокаТабличнойЧасти = Неопределено Тогда
		мСтрокаТабличнойЧасти = Документ[ИмяТабличнойЧасти].Получить(НомерСтрокиТабличнойЧасти - 1);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Предупреждение("Не выбрана номенклатура!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Номенклатура.ВестиСерийныеНомера Тогда
		Предупреждение("Для номенклатуры """ + Номенклатура + """ не ведутся серийные номера!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Документ.Метаданные();
	Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Организация = Документ.Организация;
	КонецЕсли;
	Если МетаданныеДокумента.Реквизиты.Найти("Подразделение") <> Неопределено Тогда
		Подразделение = Документ.Подразделение;
	КонецЕсли;
	
	ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	Количество = ?(ЕдиницаИзмерения.Коэффициент <> 0, Количество * ИсходнаяЕдиницаИзмерения.Коэффициент / ЕдиницаИзмерения.Коэффициент, Количество);
	
	КлючСвязи = мСтрокаТабличнойЧасти.КлючСвязи;
	Если КлючСвязи = 0 Тогда
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, Документ, ИмяТабличнойЧасти, Истина);
		мНовыйКлючСвязи = Истина;
	КонецЕсли;
	
	СерийныеНомера.Загрузить(Документ[мИмяТабличнойЧастиСерийныеНомера].Выгрузить());
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	ЗаполнитьНачальныеЗначенияПорядкаПрисвоения();
	
	Если СозданиеНовыхСерийныхНомеров Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ФормированиеСерийныхНомеров;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ВводСерийныхНомеров;
	КонецЕсли;
	
	ЭлементыФормы.СерийныеНомера.ОтборСтрок.КлючСвязи.Установить(КлючСвязи);
	ЭлементыФормы.СерийныеНомера.НастройкаОтбораСтрок.КлючСвязи.Доступность = Ложь;
	
	ЭлементыФормы.СерийныеНомераВвод.ОтборСтрок.КлючСвязи.Установить(КлючСвязи);
	ЭлементыФормы.СерийныеНомераВвод.НастройкаОтбораСтрок.КлючСвязи.Доступность = Ложь;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	Перем ИсходнаяЕдиницаИзмерения;
	
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьСерийныеНомераВДокумент();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Ложь;
	СозданиеНовыхСерийныхНомеров = Ложь;
	
	СтруктураИсходныхПараметров.Свойство("Номенклатура", 				Номенклатура);
	СтруктураИсходныхПараметров.Свойство("ХарактеристикаНоменклатуры", 	ХарактеристикаНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("СерияНоменклатуры", 			СерияНоменклатуры);
	СтруктураИсходныхПараметров.Свойство("ЕдиницаИзмерения", 			ИсходнаяЕдиницаИзмерения);
	СтруктураИсходныхПараметров.Свойство("Количество", 					Количество);
	СтруктураИсходныхПараметров.Свойство("ДокументОбъект", 				Документ);
	СтруктураИсходныхПараметров.Свойство("ИмяТабличнойЧасти", 			ИмяТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("НомерСтрокиТабличнойЧасти", 	НомерСтрокиТабличнойЧасти);
	СтруктураИсходныхПараметров.Свойство("СозданиеНовыхСерийныхНомеров",СозданиеНовыхСерийныхНомеров);
	СтруктураИсходныхПараметров.Свойство("ПараметрыСвязиСтрокТЧ",		мПараметрыСвязиСтрокТЧ);
	
	Если НомерСтрокиТабличнойЧасти = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Предупреждение("Не выбрана номенклатура!");
		Возврат;
	КонецЕсли;
	
	Если Не Номенклатура.ВестиСерийныеНомера Тогда
		Предупреждение("Для номенклатуры """ + Номенклатура + """ не ведутся серийные номера!");
		Возврат;
	КонецЕсли;
	
	ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	Количество = ?(ЕдиницаИзмерения.Коэффициент <> 0, Количество * ИсходнаяЕдиницаИзмерения.Коэффициент / ЕдиницаИзмерения.Коэффициент, Количество);
	
	КлючСвязи = Документ[ИмяТабличнойЧасти].Получить(НомерСтрокиТабличнойЧасти - 1).КлючСвязи;
	Если КлючСвязи = 0 Тогда
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, Документ, ИмяТабличнойЧасти, Истина);
		мНовыйКлючСвязи = Истина;
	КонецЕсли;
	
	ЭлементыФормы.СерийныеНомера.ОтборСтрок.КлючСвязи.Установить(КлючСвязи);
	
КонецПроцедуры // ПриПовторномОткрытии()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьСерийныеНомераВДокумент();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	ОбновитьПодвал();
	
КонецПроцедуры // ОбновлениеОтображения()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Предупреждение("Подбор номенклатуры в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат = Истина;

	Если СерийныеНомера.Найти(Номер, "СерийныйНомер") = Неопределено Тогда
		СтрокаТЧ               = СерийныеНомера.Добавить();
		СтрокаТЧ.КлючСвязи     = КлючСвязи;
		СтрокаТЧ.СерийныйНомер = Номер;
	Иначе
		Предупреждение("Серийный номер """
		               + СокрЛП(Номер)
		               + """ уже присутствует в списке.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Результат      = Истина;
	Номер          = Справочники.СерийныеНомера.СоздатьЭлемент();
	Номер.Владелец = Номенклатура;
	Номер.Код      = Штрихкод;
	Попытка
		Номер.Записать();
	Исключение
		Предупреждение("Ошибка при попытке записи серийного номера:
		               |" + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	СтрокаТЧ               = СерийныеНомера.Добавить();
	СтрокаТЧ.КлючСвязи     = КлючСвязи;
	СтрокаТЧ.СерийныйНомер = Номер.Ссылка;

	Возврат Результат;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ОК" командной панели формы.
//
Процедура КнопкаОКНажатие(Кнопка)
	
	ЗаписатьСерийныеНомераВДокумент();
	ЭтаФорма.Модифицированность = Ложь;
	
	Если Не ПроверитьКоличествоСерийныхНомеров() И ЭтаФорма.Открыта() Тогда
	
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаОКНажатие()

// Процедура вызывается при нажатии кнопки "Заполнить по порядку присвоения" командной панели
// "Начальные значения порядка присвоения".
//
Процедура КоманднаяПанельНачальныеЗначенияПорядкаПрисвоенияЗаполнитьПоПорядкуПрисвоения(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ПорядокПрисвоенияСерийногоНомера) Тогда
		Предупреждение("Не задан порядок присвоения серийного номера!");
		Возврат;
	КонецЕсли;
	
	Если НачальныеЗначенияПорядкаПрисвоения.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть ""Разряды серийного номера"" уже содержит строки."
					   + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НачальныеЗначенияПорядкаПрисвоения.Очистить();
	
	ЗаполнитьНачальныеЗначенияПорядкаПрисвоения();
		
КонецПроцедуры // КоманднаяПанельНачальныеЗначенияПорядкаПрисвоенияЗаполнитьПоПорядкуПрисвоения()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ОбработкаВыбора" поля "ПорядокПрисвоенияСерийногоНомера".
//
Процедура ПорядокПрисвоенияСерийногоНомераОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НачальныеЗначенияПорядкаПрисвоения.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть ""Разряды серийного номера"" уже содержит строки."
					  + Символы.ПС + "При смене порядка присвоения они будут перезаполнены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НачальныеЗначенияПорядкаПрисвоения.Очистить();
	
	ЗаполнитьНачальныеЗначенияПорядкаПрисвоения(ВыбранноеЗначение);
	
КонецПроцедуры // ПорядокПрисвоенияСерийногоНомераОбработкаВыбора()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "СерийныеНомера".
//
Процедура СерийныеНомераПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = КлючСвязи;
		Элемент.ТекущиеДанные.СерийныйНомер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СерийныеНомераПриНачалеРедактирования()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "СерийныеНомераВвод".
//
Процедура СерийныеНомераВводПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = КлючСвязи;
		Элемент.ТекущиеДанные.СерийныйНомер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СерийныеНомераВводПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля "СерийныйНомер" табличного поля "СерийныеНомера".
//
Процедура СерийныеНомераСерийныйНомерПриИзменении(Элемент)
	
	Строка = СерийныеНомера.Найти(Элемент.Значение, "СерийныйНомер");
	Если Строка <> Неопределено И Строка <> ЭлементыФормы.СерийныеНомера.ТекущиеДанные Тогда
		Предупреждение("Серийный номер " + СокрЛП(Элемент.Значение) + " уже был указан в документе!");
		Элемент.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СерийныеНомераСерийныйНомерПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "СерийныйНомер" табличного поля "СерийныеНомераВвод".
//
Процедура СерийныеНомераВводСерийныйНомерПриИзменении(Элемент)
	
	Строка = СерийныеНомера.Найти(Элемент.Значение, "СерийныйНомер");
	Если Строка <> Неопределено И Строка <> ЭлементыФормы.СерийныеНомераВвод.ТекущиеДанные Тогда
		Предупреждение("Серийный номер " + СокрЛП(Элемент.Значение) + " уже был указан в документе!");
		Элемент.Значение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СерийныеНомераВводСерийныйНомерПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "СерийныйНомер" табличного поля "СерийныеНомера".
//
Процедура СерийныеНомераСерийныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Строка = СерийныеНомера.Найти(ВыбранноеЗначение, "СерийныйНомер");
	Если Строка <> Неопределено И Строка <> ЭлементыФормы.СерийныеНомера.ТекущиеДанные Тогда
		Предупреждение("Серийный номер " + СокрЛП(ВыбранноеЗначение) + " уже был указан в документе!");
		СтандартнаяОбработка = Ложь;
		ВыбранноеЗначение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СерийныеНомераСерийныйНомерОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля "СерийныйНомер" табличного поля "СерийныеНомераВвод".
//
Процедура СерийныеНомераВводСерийныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Строка = СерийныеНомера.Найти(ВыбранноеЗначение, "СерийныйНомер");
	Если Строка <> Неопределено И Строка <> ЭлементыФормы.СерийныеНомера.ТекущиеДанные Тогда
		Предупреждение("Серийный номер " + СокрЛП(ВыбранноеЗначение) + " уже был указан в документе!");
		СтандартнаяОбработка = Ложь;
		ВыбранноеЗначение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // СерийныеНомераВводСерийныйНомерОбработкаВыбора()

мНовыйКлючСвязи = Ложь;