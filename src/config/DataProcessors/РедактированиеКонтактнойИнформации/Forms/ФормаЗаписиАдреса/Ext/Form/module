
Перем мСтруктураИзмерений Экспорт;
Перем мДоступностьРедактированияДома Экспорт;

Перем мАвтоотметкаНезаполненногоВида Экспорт;

// Обработка поиска по строке для ВИДА
Перем мОбработкаПоискаПоСтроке;
Перем мТекстПоискаПоСтроке;
Перем мПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Региона
Перем мРегионОбработкаПоискаПоСтроке;
Перем мРегионТекстПоискаПоСтроке;
Перем мРегионПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Района
Перем мРайонОбработкаПоискаПоСтроке;
Перем мРайонТекстПоискаПоСтроке;
Перем мРайонПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Города
Перем мГородОбработкаПоискаПоСтроке;
Перем мГородТекстПоискаПоСтроке;
Перем мГородПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Населенного Пункта
Перем мНаселенныйПунктОбработкаПоискаПоСтроке;
Перем мНаселенныйПунктТекстПоискаПоСтроке;
Перем мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Улицы
Перем мУлицаОбработкаПоискаПоСтроке;
Перем мУлицаТекстПоискаПоСтроке;
Перем мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке;

Перем мПромежуточныйАдресЗаПределамиРФ;
Перем мПромежуточнаяСтранаЗаПределамиРФ;
Перем мПромежуточныйИндекс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура по коду устанавливает атрибуты адресного элемента
Процедура ЗаполнитьПоКодуАдресныеЭлементы(КодАдресногоЭлемента) Экспорт

	УправлениеКонтактнойИнформацией.ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7);
		
КонецПроцедуры

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставление(Запись = Неопределено)

	Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(?(Запись = Неопределено, ЭтотОбъект, Запись));

КонецПроцедуры

// Процедура обслуживает событие изменения типа адреса
// Российский адрес и Адрес за пределами РФ
// 
// Параметры
//  НЕТ
//
Процедура ПриИзмененииТипаАдреса()

	Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
		
		ЭлементыФормы.РоссийскийАдрес.Доступность    = Ложь;
		ЭлементыФормы.АдресЗаПределамиРФ.Доступность = Ложь;
		
		ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.ПроизвольныйАдрес;
		
	Иначе
	
		ЭлементыФормы.РоссийскийАдрес.Доступность    = Истина;
		ЭлементыФормы.АдресЗаПределамиРФ.Доступность = Истина;
		
		Если ПроизвольныйАдрес Тогда
			ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.ПроизвольныйАдрес;
		Иначе
			ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.РегламентированныйАдрес;
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

// Процедура формирует структуру для формирования представления контактной информации
//
Процедура СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст)

	Запись = Новый Структура;
	Запись.Вставить("Поле1",       ?(Элемент = ЭлементыФормы.Индекс,          Текст, ЭлементыФормы.Индекс.Значение));
	Запись.Вставить("Поле2",       ?(Элемент = ЭлементыФормы.Регион,          Текст, ЭлементыФормы.Регион.Значение));
	Запись.Вставить("Поле3",       ?(Элемент = ЭлементыФормы.Район,           Текст, ЭлементыФормы.Район.Значение));
	Запись.Вставить("Поле4",       ?(Элемент = ЭлементыФормы.Город,           Текст, ЭлементыФормы.Город.Значение));
	Запись.Вставить("Поле5",       ?(Элемент = ЭлементыФормы.НаселенныйПункт, Текст, ЭлементыФормы.НаселенныйПункт.Значение));
	Запись.Вставить("Поле6",       ?(Элемент = ЭлементыФормы.Улица,           Текст, ЭлементыФормы.Улица.Значение));
	Запись.Вставить("Поле7",       ?(Элемент = ЭлементыФормы.Дом,             Текст, ЭлементыФормы.Дом.Значение));
	Запись.Вставить("Поле8",       ?(Элемент = ЭлементыФормы.Корпус,          Текст, ЭлементыФормы.Корпус.Значение));
	Запись.Вставить("Поле9",       ?(Элемент = ЭлементыФормы.Квартира,        Текст, ЭлементыФормы.Квартира.Значение));
	Запись.Вставить("ТипДома",     ?(Элемент = ЭлементыФормы.ПолеТипДома,     Текст, ЭлементыФормы.ПолеТипДома.Значение));
	Запись.Вставить("ТипКорпуса",  ?(Элемент = ЭлементыФормы.ПолеТипКорпуса,  Текст, ЭлементыФормы.ПолеТипКорпуса.Значение));
	Запись.Вставить("ТипКвартиры", ?(Элемент = ЭлементыФормы.ПолеТипКвартиры, Текст, ЭлементыФормы.ПолеТипКвартиры.Значение));
	
	СформироватьПредставление(Запись);

КонецПроцедуры // СформироватьПредставлениеВОбработчикеАвтоПодбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// процедура устанавливает доступность для редактирования дома, корпуса квартиры
Процедура УстановитьДоступностьРедактированияДома()

	ЭлементыФормы.ПолеТипДома.Доступность = мДоступностьРедактированияДома;
	ЭлементыФормы.Дом.Доступность = мДоступностьРедактированияДома;

	ЭлементыФормы.ПолеТипКорпуса.Доступность = мДоступностьРедактированияДома;
	ЭлементыФормы.Корпус.Доступность = мДоступностьРедактированияДома;

	ЭлементыФормы.ПолеТипКвартиры.Доступность = мДоступностьРедактированияДома;
	ЭлементыФормы.Квартира.Доступность = мДоступностьРедактированияДома;

КонецПроцедуры

// Процедура вызывается при открытии формы.
//
Процедура ПриОткрытии()

	УстановитьДоступностьРедактированияДома();
	
	ЭлементыФормы.Объект.ТолькоПросмотр     = НЕ ДоступностьОбъекта;
	
	ЭлементыФормы.Вид.АвтоОтметкаНезаполненного = мАвтоотметкаНезаполненногоВида;
	Если ЭлементыФормы.Вид.АвтоОтметкаНезаполненного Тогда
		ЭлементыФормы.Вид.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Вид);
	Иначе		
		ЭлементыФормы.Вид.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если Вид = Неопределено Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект) И ДоступностьОбъекта Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Объект;
	ИначеЕсли НЕ ЗначениеЗаполнено(Вид) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Вид;
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Регион;
	КонецЕсли; 
	
	Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
		ПроизвольныйАдрес = Истина;
	Иначе
		ПроизвольныйАдрес = НЕ УправлениеКонтактнойИнформацией.ОпределитьДляОбъектаРоссийскийАдрес(ЭтотОбъект);
	КонецЕсли;
	
	ПриИзмененииТипаАдреса();
	
	мПоследнееЗначениеЭлементаПоискаПоСтроке		 		= Вид;
	мРегионПоследнееЗначениеЭлементаПоискаПоСтроке			= Поле2;
	мРайонПоследнееЗначениеЭлементаПоискаПоСтроке 			= Поле3;
	мГородПоследнееЗначениеЭлементаПоискаПоСтроке			= Поле4;
	мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке	= Поле5;
	мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке			= Поле6;
	
	Если мВозвратСтруктуры = Истина Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьПредставлениеДляСложногоАдреса();

	ЭлементыФормы.ПолеТипДома.СписокВыбора     = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ТипыДомов");
	ЭлементыФормы.ПолеТипКорпуса.СписокВыбора  = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ТипыКорпусов");
	ЭлементыФормы.ПолеТипКвартиры.СписокВыбора = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ТипыКвартир");

	ПроверитьЗаполненностьПолейТипов(Ложь);

КонецПроцедуры

// Процедура вызывается при ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	ЭтаФорма.ЭлементыФормы.Вид.ТолькоПросмотр = (Объект = Неопределено);

	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Вид, мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Регион, мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Район, мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Город, мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.НаселенныйПункт, мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Улица, мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке);
	
КонецПроцедуры

// Процедура обработчик события формы ПередЗакрытием
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность И мВозвратСтруктуры <> Истина Тогда
		Отказ = ЗакрыватьФормуРедактирования();
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

// Процедура обработчик события АвтоПодборТекста элемента формы Дом
//
Процедура ДомАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	

	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
	
КонецПроцедуры // ДомАвтоПодборТекста()

// Процедура обработчик события АвтоПодборТекста элемента формы Корпус
//
Процедура КорпусАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
	
КонецПроцедуры // КорпусАвтоПодборТекста()

// Процедура обработчик события АвтоПодборТекста элемента формы Квартира
//
Процедура КвартираАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
	
КонецПроцедуры // КвартираАвтоПодборТекста()

// Процедура обработчик события ПриИзменении элемента формы ПолеТипДома
//
Процедура ПолеТипДомаПриИзменении(Элемент)
	
	ПроверитьЗаполненностьПолейТипов(Истина);
	
КонецПроцедуры // ПолеТипДомаПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы ПолеТипКорпуса
//
Процедура ПолеТипКорпусаПриИзменении(Элемент)
	
	ПроверитьЗаполненностьПолейТипов(Истина);
	
КонецПроцедуры // ПолеТипКорпусаПриИзменении()

// Процедура обработчик события ПриИзменении элемента формы ПолеТипКвартиры
//
Процедура ПолеТипКвартирыПриИзменении(Элемент)
	
	ПроверитьЗаполненностьПолейТипов(Истина);
	
КонецПроцедуры // ПолеТипКвартирыПриИзменении()

// Процедура проверяет и заполняет пустые значения для реквизитов ТипДома, ТипКорпуса, ТипКвартиры
//
Процедура ПроверитьЗаполненностьПолейТипов(ОбновлятьПредставление)

	Если ТипДома.Пустая() Тогда
		ТипДома = Перечисления.ТипыДомов.Дом;
	КонецЕсли;

	Если ТипКорпуса.Пустая() Тогда
		ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
	КонецЕсли;

	Если ТипКвартиры.Пустая() Тогда
		ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
	КонецЕсли;
	
	Если ОбновлятьПредставление Тогда
		СформироватьПредставление();
	КонецЕсли;

КонецПроцедуры // ПроверитьЗаполненностьПолейТипов()

Процедура Поле1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора(, Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент.Значение);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "РоссийскийАдрес".
//
Процедура РоссийскийАдресПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		ПриИзмененииТипаАдреса();
		мПромежуточныйИндекс = Поле1;
		УстановитьПредставлениеДляСложногоАдреса();
		Поле1 = мПромежуточнаяСтранаЗаПределамиРФ;
		мПромежуточныйАдресЗаПределамиРФ  = "";
		мПромежуточнаяСтранаЗаПределамиРФ = "";
		
	Иначе
		мПромежуточныйАдресЗаПределамиРФ  = ПредставлениеАдреса;
		мПромежуточнаяСтранаЗаПределамиРФ = Поле1;
		Поле1 = мПромежуточныйИндекс;
		мПромежуточныйИндекс = "";
		СформироватьПредставление();
		ПриИзмененииТипаАдреса();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при очистке значения элемента формы Объект.
//
Процедура ОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Регион".
//
Процедура РегионПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Район".
//
Процедура РайонПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Город".
//
Процедура ГородПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Улица".
//
Процедура УлицаПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дом".
//
Процедура ДомПриИзменении(Элемент)

	Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Корпус".
//
Процедура КорпусПриИзменении(Элемент)

	Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Квартира".
//
Процедура КвартираПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Индекс".
//
Процедура ИндексПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры

// Универсальная процедура - обработчик для выпадающего списка сокращений территориальных единиц
Процедура ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Регион".
//
Процедура РегионНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле2, 1);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Район".
//
Процедура РайонНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле3, 2);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Город".
//
Процедура ГородНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле4, 3);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле5, 4);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Улица".
//
Процедура УлицаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Поле6, 5);
	
КонецПроцедуры

// Процедура перехватывает момент начала выбора вида контактной информации.
//
// Параметры
//  Элемент - элемент формы, выбор значения которого должен произойти
//  СтандартнаяОбработка - булево, флаг стандартной обработки выбора.
Процедура ВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект = Неопределено ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Сообщить("Выберите объект.");
		Возврат;
		
	КонецЕсли;

	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект));
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Регион".
//
Процедура РегионНачалоВыбора(Элемент, СтандартнаяОбработка)
	
    ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле2);
	ФормаВыбора.ОтобратьТолькоРегионы(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле2));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Район".
//
Процедура РайонНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле3);
	ФормаВыбора.УстановитьРодителя(Поле2, "", "", "");
	ФормаВыбора.ОтобратьТолькоРайоны(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле3));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Город".
//
Процедура ГородНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле4);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, "", "");
	ФормаВыбора.ОтобратьТолькоГорода(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле4));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле5);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, "");
	ФормаВыбора.ОтобратьТолькоНаселенныеПункты(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле5));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Улица".
//
Процедура УлицаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле6);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, Поле5);
	ФормаВыбора.ОтобратьТолькоУлицы(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Поле6));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура заполняет поля родителя и проверяет потомков при кстановке адреса
Процедура ОбновитьАдресныеЭлементы(АдреснаяЗапись)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, АдреснаяЗапись);
	// Для всех элементов ниже по иерархии надо определить подходят ли он под ограничения
	УправлениеКонтактнойИнформацией.АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Поле2, Поле3, Поле4, Поле5, Поле6, АдреснаяЗапись);
	// последние значения поисков по строке запоминаем
	УправлениеКонтактнойИнформацией.УстановитьПоследниеЗначенияПоисковПоСтрокеДляАдресныхЭлементов(Поле2, Поле3, Поле4, Поле5, Поле6,
	 	мРегионПоследнееЗначениеЭлементаПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке,
	 	мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);
		
	// получаем индекс
	Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

//Процедура - универсальный обработчик для события обработка выбора адресных элементов
Процедура УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдреснаяЗапись = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись);
	ОбновитьАдресныеЭлементы(АдреснаяЗапись);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Регион".
//
Процедура РегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Район".
//
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Город".
//
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Улица".
//
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура перехватывает момент начала выбора Объекта.
//
// Параметры
//  Элемент - элемент формы, выбор значения которого должен произойти
//  СтандартнаяОбработка - булево, флаг стандартной обработки выбора.
Процедура ОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = УправлениеКонтактнойИнформацией.НачалоВыбораОбъектаКИ(ЭтаФорма, Элемент, глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Вид.
//
Процедура ВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Вид.
//
Процедура ВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке, мПоследнееЗначениеЭлементаПоискаПоСтроке);
	
КонецПроцедуры

// Процедура обработчик события ПриИзменении элемента формы Вид.
//
Процедура ВидПриИзменении(Элемент)
	
	мПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	ПриИзмененииТипаАдреса();
	
КонецПроцедуры

// Процедура автоподбора текста для различных территориальных делений
Процедура УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
												 
	СтруктураЭлемента = Неопределено;											 
	УправлениеКонтактнойИнформацией.АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
												 СтруктураЭлемента);

	Если ЗначениеЗаполнено(ТекстАвтоПодбора) Тогда											  
													  
		ТекстАвтоПодбора = ТекстАвтоПодбора + " " + СокрЛП(СтруктураЭлемента.Сокращение); 
		// не надо предков и потомков обновлять - пользователь может еще не определился
		//ОбновитьАдресныеЭлементы(СтруктураЭлемента);

	КонецЕсли;
		
КонецПроцедуры

//Универсальня процедура обработки окончания ввода текста для территориального подразделения
Процедура УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке)
	СтруктураЭлемента = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке,
													СтруктураЭлемента);

	Если СтруктураЭлемента.Количество() > 0 Тогда											  
		Значение = Значение + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		ОбновитьАдресныеЭлементы(СтруктураЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Регион
Процедура РегионАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 "", "", "", "", 1);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Регион
Процедура РегионОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											"", "", "", "", 1,
											мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
		
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Район
Процедура РайонАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, "", "", "", 2);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Район
Процедура РайонОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, "", "", "", 2,
											мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
	
КонецПроцедуры
	
// Процедура обработчик события АвтоПодборТекста элемента формы Город
Процедура ГородАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, Поле3, "", "", 3);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Город
Процедура ГородОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, "", "", 3,
											мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);

КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, "", 4);									  
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, "", 4,
											мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
											
КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура УлицаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, Поле3, Поле4, Поле5, 5);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, Поле5, 5,
											мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);
											
КонецПроцедуры


//Процедура устанавливает представление для сложного адреса
Процедура УстановитьПредставлениеДляСложногоАдреса()
	
	Если НЕ ПустаяСтрока(мПромежуточныйАдресЗаПределамиРФ) Тогда
		ТекущееПредставлениеАдреса = мПромежуточныйАдресЗаПределамиРФ;
	Иначе
		ТекущееПредставлениеАдреса = СокрЛП(ЭтотОбъект.Представление);
	КонецЕсли;
	
	
	Если ПроизвольныйАдрес Тогда
		
		ТекущееПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(ЭтотОбъект.Поле1, ТекущееПредставлениеАдреса);
		
	КонецЕсли;
	
	ПредставлениеАдреса = ТекущееПредставлениеАдреса;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура - обработчик события "ЗагрузитьАК" командной панели "ДействияФормы".
//
Процедура ДействияФормыЗагрузитьАК(Кнопка)

	РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗагрузкиАдресногоКлассификатора").Открыть();

КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	Если Записать() = Истина Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	// Если Адрес за пределами РФ, то надо к представлению страну добавить
	Если ПроизвольныйАдрес Тогда
		
		ЭтотОбъект.Представление = УправлениеКонтактнойИнформацией.СформироватьПредставлениеАдресаЗаПределамиРФ(ЭтотОбъект.Поле1, ЭтаФорма.ПредставлениеАдреса);
		// Для произвольного адреса поля со втрого по 10 - незначимые
		Для а = 2 По 10 Цикл
			ЭтотОбъект["Поле" + Строка(а)] = "";			
		КонецЦикла;
				
	КонецЕсли;
	
	
	Если мВозвратСтруктуры = Истина Тогда
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Представление",  Представление);		
		Для а = 1 По 10 Цикл
			СтруктураАдреса.Вставить("Поле" + Строка(а), ЭтотОбъект["Поле" + Строка(а)]);
		КонецЦикла;		
		ОповеститьОВыборе(СтруктураАдреса);
	Иначе	
		Если Записать() = Истина Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке, мПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);


мСтруктураИзмерений = Неопределено;
мДоступностьРедактированияДома = Истина;
мАвтоотметкаНезаполненногоВида = Истина;

мПромежуточныйАдресЗаПределамиРФ  = "";
мПромежуточнаяСтранаЗаПределамиРФ = "";
мПромежуточныйИндекс              = "";
