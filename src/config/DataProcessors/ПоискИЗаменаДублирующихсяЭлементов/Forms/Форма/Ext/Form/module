
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мРезультатыПоиска Экспорт;

Перем мВидОбрабатываемогоСправочника Экспорт;
Перем мРеквизитПоиска Экспорт;

Перем мСписокРеквизитовПоиска Экспорт;

Перем мФормаИндикатора, мЗависимыеМетаданные;

Перем мОсновнаяПанельФормы;

Перем КартинкиСтрокНайденныхОбъектов;

Перем мСписокВсехСправочников;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ТекущаяГруппа()
	
	Если ЭлементыФормы.ТаблицаГрупп.ТекущиеДанные = Неопределено
		ИЛИ ЭлементыФормы.ТаблицаГрупп.ТекущиеДанные.НомерГруппы = 0 Тогда
		
		Возврат 0;		
		
	Иначе
		
		Возврат ЭлементыФормы.ТаблицаГрупп.ТекущиеДанные.НомерГруппы;
		
	КонецЕсли;	
		
КонецФункции // () 

Функция СоздатьТаблицуРезультатовПоиска()
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Ссылка");
	ТаблицаПоиска.Колонки.Добавить("НомерГруппы");
	ТаблицаПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	ТаблицаПоиска.Колонки.Добавить("КоличествоСсылок");
	ТаблицаПоиска.Колонки.Добавить("ЗначениеРеквизита");	
	
	Возврат ТаблицаПоиска;
	
КонецФункции

Процедура ОбновитьТекущуюГруппуРезультатовПоиска()
	
	Если мРезультатыПоиска = Неопределено Тогда
		мРезультатыПоиска = СоздатьТаблицуРезультатовПоиска();
	КонецЕсли;
	
	ТекущаяГруппа = ТекущаяГруппа();
		
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НомерГруппы", ТекущаяГруппа);
	МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		мРезультатыПоиска.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаНайденныхОбъектов Из НайденныеОбъекты Цикл
		НоваяСтрока = мРезультатыПоиска.Добавить();
		НоваяСтрока.Ссылка            = СтрокаНайденныхОбъектов.Ссылка;
		НоваяСтрока.Правильный        = СтрокаНайденныхОбъектов.Правильный;
		НоваяСтрока.КоличествоСсылок  = СтрокаНайденныхОбъектов.КоличествоСсылок;
		НоваяСтрока.НомерГруппы       = ТекущаяГруппа;
	КонецЦикла;
	
КонецПроцедуры // () 

Функция ПолучитьТаблицуРезультатовПоиска(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	_Таблица.Ссылка";
	Для каждого Реквизит Из мСписокРеквизитовПоиска Цикл
		
		Запрос.Текст = Запрос.Текст + ",
		|ПРЕДСТАВЛЕНИЕ(_Таблица." + Реквизит.Значение + ") КАК Р_" + Реквизит.Значение;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Справочник." + мВидОбрабатываемогоСправочника + " КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // () 

Процедура ВывестиГруппу(НомерГруппы, ПроверятьСуществованиеОбъектов = Ложь)
	
	Структура = Новый Структура("НомерГруппы", НомерГруппы);
	
	МассивСтрок = мРезультатыПоиска.НайтиСтроки(Структура);
	
	НайденныеОбъекты.Очистить();
	
	Для Каждого Строка Из МассивСтрок Цикл
		ЗаполнитьЗначенияСвойств(НайденныеОбъекты.Добавить(), Строка);
	КонецЦикла;
	
	ТаблицаРезультатов = ПолучитьТаблицуРезультатовПоиска(НайденныеОбъекты.ВыгрузитьКолонку("Ссылка"));
	
	Для каждого Строка Из НайденныеОбъекты Цикл
		
		СтрокаРезультатов = ТаблицаРезультатов.Найти(Строка.Ссылка, "Ссылка");
		Если СтрокаРезультатов <> Неопределено Тогда
			
			Если ПроверятьСуществованиеОбъектов Тогда
				
				ОбъектДанных = Строка.Ссылка.ПолучитьОбъект();
				Если ОбъектДанных = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Строка, СтрокаРезультатов, , "Ссылка");
			
		КонецЕсли;
		
	КонецЦикла; 
	
	СброситьДоступность();
	
	ОпределитьДоступностьКнопкиВыполненияЗаменыДанных();
	
КонецПроцедуры

Процедура ДобавитьНовуюГруппу(ТаблицаГрупп, ТекущаяГруппа, ЭлементовВГруппе, ЗначениеРеквизита)
	
	Если ТекущаяГруппа <> 0 Тогда
				
		СтрокаГрупп = ТаблицаГрупп.Добавить();
		СтрокаГрупп.НомерГруппы = ТекущаяГруппа;
		СтрокаГрупп.Количество = ЭлементовВГруппе;
		
		Если ЗначениеРеквизита <> Неопределено Тогда
			СтрокаГрупп.Группа = ЗначениеРеквизита;
		КонецЕсли;	
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура НайтиПоРавенствуРеквизитов()
	
	ПостроительОтчета.Выполнить();
		
	мРезультатыПоиска = ПостроительОтчета.Результат.Выгрузить();
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	мРезультатыПоиска.Сортировать("ЗначениеРеквизита");
	
	ТаблицаГрупп.Очистить();
	
	ЗначениеРеквизита = Неопределено;
	ТекущаяГруппа = 0;
	ЭлементовВГруппе = 0;
	Для Каждого СтрокаПоиска ИЗ мРезультатыПоиска Цикл
		
		Если СтрокаПоиска.ЗначениеРеквизита <> ЗначениеРеквизита Тогда
			
			ДобавитьНовуюГруппу(ТаблицаГрупп, ТекущаяГруппа, ЭлементовВГруппе, ЗначениеРеквизита);
							
			ЗначениеРеквизита = СтрокаПоиска.ЗначениеРеквизита;
			ТекущаяГруппа = ТекущаяГруппа + 1;
			ЭлементовВГруппе = 0;
			
		КонецЕсли;
		
		СтрокаПоиска.НомерГруппы = - ТекущаяГруппа;
		ЭлементовВГруппе = ЭлементовВГруппе + 1;
		
	КонецЦикла;
	
	ДобавитьНовуюГруппу(ТаблицаГрупп, ТекущаяГруппа, ЭлементовВГруппе, ЗначениеРеквизита);
			
	ТаблицаГрупп.Сортировать("Количество");
	
	ТекущаяГруппа = 1;
	КолвоЭлементовКоллекции = ТаблицаГрупп.Количество();
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = ТаблицаГрупп[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		МассивСтрок = мРезультатыПоиска.НайтиСтроки(Новый Структура("НомерГруппы", -ЭлементКоллекции.НомерГруппы));
		
		Если ЭлементКоллекции.Количество = 1 Тогда
			
			Для каждого СтрокаГруппы ИЗ МассивСтрок Цикл
				мРезультатыПоиска.Удалить(СтрокаГруппы);
			КонецЦикла;			
			ТаблицаГрупп.Удалить(ЭлементКоллекции);
			
		Иначе
			
			Для каждого СтрокаГруппы ИЗ МассивСтрок Цикл
				СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
			КонецЦикла;
			ЭлементКоллекции.НомерГруппы = ТекущаяГруппа;
			ТекущаяГруппа = ТекущаяГруппа + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаГрупп.Сортировать("Группа");
		
	Если мРезультатыПоиска.Количество() > 0 Тогда
		ВывестиГруппу(1);
	КонецЕсли;	
	
КонецПроцедуры

Процедура НайтиПоСовпадающимСловам()
	
	ОтобразитьФормуИндикатора("Поиск элементов", "Получение элементов справочника");
			
	ПостроительОтчета.Выполнить();
	
	ТаблицаГрупп.Очистить();
		
	ТаблицаСправочника = ПостроительОтчета.Результат.Выгрузить();
    
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("ЗначениеРеквизита");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	СписокСлов = Новый СписокЗначений;
	
	Если мФормаИндикатора <> Неопределено Тогда
		
		мФормаИндикатора.КомментарийОбработкиДанных = "Разбивка значения на отдельные слова";
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСправочника.Количество();
		
	КонецЕсли;
	
	Для Каждого СтрокаСсылки ИЗ ТаблицаСправочника Цикл
		
		Если мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.Значение = ТаблицаСправочника.Индекс(СтрокаСсылки)+1;
		КонецЕсли;
		
		ЗначениеРеквизита = СтрокаСсылки.ЗначениеРеквизита;
		СписокСлов = ПолучитьСписокСлов(ЗначениеРеквизита);
		
		НовСтр = ТаблицаСлов.Добавить();
		НовСтр.Ссылка =  СтрокаСсылки.Ссылка;
		НовСтр.ЗначениеРеквизита = ЗначениеРеквизита;
		НовСтр.СписокСлов = СписокСлов.Скопировать();
		
	КонецЦикла;
	
	Если мФормаИндикатора <> Неопределено Тогда
		
		мФормаИндикатора.КомментарийОбработкиДанных = "Выполняется анализ значений реквизита";
		мФормаИндикатора.Значение = 0;
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСлов.Количество();
		
	КонецЕсли;
	
	ТаблицаСправочника = 0;
	
	мРезультатыПоиска = СоздатьТаблицуРезультатовПоиска();
		
	ТекущаяГруппа = 0;
		
	Пока ТаблицаСлов.Количество() > 0 Цикл
		
		Если мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.Значение = мФормаИндикатора.ЭлементыФормы.Индикатор.МаксимальноеЗначение - ТаблицаСлов.Количество();
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		ТекущаяГруппа = ТекущаяГруппа + 1;
		КоличествоСтрок = ТаблицаСлов.Количество();
		СписокСтрок = Новый СписокЗначений;
		
		ОбрабатываемаяСтрока = ТаблицаСлов[0];
		СписокСтрок.Добавить(ОбрабатываемаяСтрока);
		ТекущийСписокСлов = ОбрабатываемаяСтрока.СписокСлов.Скопировать();
		
		Для индекс = 1 по КоличествоСтрок-1 Цикл			
			СтрокаСравнения = ТаблицаСлов[индекс];
			СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
			СписокНеНайденных = Новый СписокЗначений;
			
			ОдинаковыхСлов = 0;
			Для Каждого Слово Из ТекущийСписокСлов Цикл
				ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
				Если ЭлементСпискаСравнения = Неопределено Тогда
					СписокНеНайденных.Добавить(Слово.Значение);
				Иначе
					СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
					ОдинаковыхСлов = ОдинаковыхСлов + 1;
				КонецЕсли;
			КонецЦикла;
			
			
			Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
				ЕстьОтличия = Ложь;
			Иначе
				Если ОдинаковыхСлов>0 Тогда
					ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, ДопустимоеРазличиеСлов);
				Иначе
					ЕстьОтличия = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьОтличия Тогда
				СписокСтрок.Добавить(СтрокаСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
		
		Для Каждого СтрокаИзСписка ИЗ СписокСтрок Цикл
			Если СписокСтрок.Количество() > 1 Тогда
				СтрокаРезультата = мРезультатыПоиска.Добавить();
				СтрокаРезультата.ЗначениеРеквизита = СтрокаИзСписка.Значение.ЗначениеРеквизита;
				СтрокаРезультата.Ссылка = СтрокаИзСписка.Значение.Ссылка;
				СтрокаРезультата.НомерГруппы =  - ТекущаяГруппа;
			Иначе
				ТекущаяГруппа = ТекущаяГруппа - 1;
			КонецЕсли;
			ТаблицаСлов.Удалить(СтрокаИзСписка.Значение);
		КонецЦикла;		
		
	КонецЦикла;
	
	Если мФормаИндикатора <> Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Обработка результатов";
	КонецЕсли;
		
	Если мРезультатыПоиска.Количество() > 0 Тогда
		
		мРезультатыПоиска.Сортировать("НомерГруппы УБЫВ");
		
		
		СтруктураПоиска = Новый Структура;
		ВсегоГрупп =  - мРезультатыПоиска[мРезультатыПоиска.Количество()-1].НомерГруппы;
		Для индекс = 1 по ВсегоГрупп Цикл
			
			СтруктураПоиска.Вставить("НомерГруппы",  - индекс);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			
			ДобавитьНовуюГруппу(ТаблицаГрупп, индекс, МассивСтрок.Количество(), МассивСтрок[0].ЗначениеРеквизита);
									
		КонецЦикла;
		
		ТекущаяГруппа = 1;
		ТаблицаГрупп.Сортировать("Количество УБЫВ");
		
		Для Каждого СтрокаГруппы ИЗ ТаблицаГрупп Цикл
			СтруктураПоиска.Вставить("НомерГруппы",  - СтрокаГруппы.НомерГруппы);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаРезультата ИЗ МассивСтрок Цикл
				СтрокаРезультата.НомерГруппы = ТекущаяГруппа;
			КонецЦикла;
			СтрокаГруппы.НомерГруппы = ТекущаяГруппа;
			ТекущаяГруппа = ТекущаяГруппа + 1;
		КонецЦикла;
		
		ТаблицаГрупп.Сортировать("Группа");
		
		Если мРезультатыПоиска.Количество() > 0 Тогда
			ВывестиГруппу(1);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗакрытьФормуИндикатора();	
			
КонецПроцедуры

Функция ОпределитьДоступностьКнопкиВыполненияЗаменыДанных()
	
	Перем МассивСсылок;
	
	ДоступностьКнопкиЗамены = ОпределитьВозможностьВыполненияЗаменыЭлементовДляТекущейГруппы(МассивСсылок, Ложь);
	
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = ДоступностьКнопкиЗамены;
	
	Возврат ДоступностьКнопкиЗамены;
	
КонецФункции

Функция ОпределитьВозможностьВыполненияЗаменыЭлементовДляТекущейГруппы(МассивСсылок, ВыдаватьПредупреждение = Ложь)
	
	Если НайденныеОбъекты.Количество() = 0 Тогда
		
		Если ВыдаватьПредупреждение Тогда
			Предупреждение("Нет ни одного элемента для замены.");				
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НайденВерныйЭлемент = Ложь;
	МассивСсылок = Новый Массив();
	
	Для Каждого Строка Из НайденныеОбъекты Цикл
		
		Если Строка.Правильный Тогда
			НайденВерныйЭлемент = Истина;
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Строка.ссылка);
		
	КонецЦикла;
	
	Если НЕ НайденВерныйЭлемент Тогда
		
		Если ВыдаватьПредупреждение Тогда
			Предупреждение("Не указан правильный элемент.");		
		КонецЕсли;
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МассивСсылок.Количество() = 0 Тогда
		
		Если ВыдаватьПредупреждение Тогда
			Предупреждение("Нет ни одного элемента для замены.");		
		КонецЕсли;
	
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПоискСсылок()
	
	Перем МассивСсылок;
	
	ВозможностьВыполнитьЗамену = ОпределитьВозможностьВыполненияЗаменыЭлементовДляТекущейГруппы(МассивСсылок, Истина);
	
	Если Не ВозможностьВыполнитьЗамену Тогда
		Возврат Ложь;
	КонецЕсли;
				
	НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);
	
	ЭлементыФормы.НайденныеСсылки.СоздатьКолонки();
	
	Колонка= ЭлементыФормы.НайденныеСсылки.Колонки.Ссылка;
	Колонка.ЭлементУправления.КнопкаОткрытия  = Истина;
	Колонка.КартинкиСтрок  = КартинкиСтрокНайденныхОбъектов;
	
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ЗаголовокИндикации = "")
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
	
	Если мФормаИндикатора <> Неопределено Тогда
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСсылок.Количество();
		мФормаИндикатора.КомментарийЗначения = "Выполняется замена элементов." + ЗаголовокИндикации;
		мФормаИндикатора.Значение = 0;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		Если мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.Значение = мФормаИндикатора.Значение + 1;
		КонецЕсли;
		Ссылка = СтрокаТаблицы.Ссылка;
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Возврат ВыполнитьОткат();
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "ДТ");
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя + "ДТ"] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "ДТ");
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "КТ");
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя + "КТ"] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя + "КТ");
							КонецЦикла;
						Иначе
							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Измерение.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Измерение.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли; 
				КонецЦикла;
				
				Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти[Ресурс.Имя] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Ресурс.Имя);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;					
				КонецЕсли;
								
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если ОтключатьКонтрольЗаписи Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						БылиИсключения = Истина;
						Если ВыполнятьВТранзакции Тогда
							Возврат ВыполнитьОткат();
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					
					Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
						Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
							НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
						КонецЕсли;
					КонецЦикла;					
					Если НадоЗаписывать Тогда
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписи.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							НаборЗаписи.Записать();
						Исключение
							БылиИсключения = Истина;
							Если ВыполнятьВТранзакции Тогда
								Возврат ВыполнитьОткат();
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
				НаборЗаписей.Отбор[Измерение.Имя].Установить(СтрокаТаблицы.Данные[Измерение.Имя]);
				СтруктураИзмерений.Вставить(Измерение.Имя);
			КонецЦикла;
			Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				НаборЗаписей.Отбор["Период"].Установить(СтрокаТаблицы.Данные.Период);
			КонецЕсли;
			НаборЗаписей.Прочитать();
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если ОтключатьКонтрольЗаписи Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВыполнятьВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				
				Если Не ВыполнятьВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				Если ВыполнятьВТранзакции Тогда
					БылиИсключения = Истина;
					Возврат ВыполнитьОткат();
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
		Исключение
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Возврат ВыполнитьОткат();
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции

Функция ВыполнитьОткат()
	
	ОтменитьТранзакцию();
	Возврат Ложь;
	
КонецФункции


Процедура СброситьДоступность()
	
	ЗависимыеОбъекты.Строки.Очистить();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Ложь;
	
КонецПроцедуры // () 

Процедура АвтозаменаЭлементов(НепосредственноУдалятьОбъекты) Экспорт
	
	Если мРезультатыПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьФормуИндикатора("Поиск и замена значений");
	
	СтруктураПоискаПравильных = Новый Структура("Правильный",Истина);
	ПравильныеСтроки = мРезультатыПоиска.НайтиСтроки(СтруктураПоискаПравильных);
	
	НомерГруппы = 0;
	Для Каждого СтрокаПравильного Из ПравильныеСтроки Цикл
		НомерГруппы = НомерГруппы + 1;
		ЗаголовокИндикации = " Группа " + НомерГруппы + " из " + ПравильныеСтроки.Количество();
		СтруктураПоиска = Новый Структура("НомерГруппы, Правильный",СтрокаПравильного.НомерГруппы, Ложь);
		МассивСсылок = Новый Массив;
		МассивНеправильныхСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
			МассивСсылок.Добавить(СтрокаНеправильного.Ссылка);
		КонецЦикла;
		
		Если мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.КомментарийЗначения = "Выполняется поиск ссылок." + ЗаголовокИндикации;
			мФормаИндикатора.Значение = 0;
		КонецЕсли;
		
		ЗаменаВыполнена = ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайтиПоСсылкам(МассивСсылок), ЗаголовокИндикации);
		
		Если НепосредственноУдалятьОбъекты и (ЗаменаВыполнена или Не ВыполнятьВТранзакции) Тогда
			ТаблицаОставшихсяСсылок = НайтиПоСсылкам(МассивСсылок);
			ТаблицаОставшихсяСсылок.Свернуть("Ссылка");
			Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
				Если ТаблицаОставшихсяСсылок.Найти(СтрокаНеправильного.Ссылка, "Ссылка") = Неопределено Тогда
					
					Объект = СтрокаНеправильного.Ссылка.ПолучитьОбъект();
					Если Не Объект = Неопределено Тогда
						Попытка
							Объект.Удалить();
							мРезультатыПоиска.Удалить(СтрокаНеправильного);
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗакрытьФормуИндикатора();
	
КонецПроцедуры

Процедура ПоискЗависимыхСсылок()
	МассивСсылок = Новый Массив;
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					МассивСсылок.Добавить(Строка2.НеПравильный);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	НайденныеЗависимыеСсылки.Колонки.Очистить();
	НайденныеЗависимыеСсылки.Колонки.Добавить("Ссылка");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Данные");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Метаданные");
	
	ВсеНайденныеЗависимыеСсылки = НайтиПоСсылкам(МассивСсылок);
	Для каждого СтрокаВсеСсылки Из ВсеНайденныеЗависимыеСсылки Цикл
		Если СтрокаВсеСсылки.ссылка.Владелец <> СтрокаВсеСсылки.Данные Тогда
			СтрокаСсылки = НайденныеЗависимыеСсылки.Добавить();
			Для каждого Колонка Из НайденныеЗависимыеСсылки.Колонки Цикл
				СтрокаСсылки[Колонка.Имя]=СтрокаВсеСсылки[Колонка.Имя];
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.НайденныеЗависимыеСсылки.СоздатьКолонки();
КонецПроцедуры // ПоисЗависимыхссылок()

Процедура ОчиститьРезультатыПоиска()
	
	мРезультатыПоиска = Неопределено;
		
	НайденныеОбъекты.Очистить();
	НайденныеОбъекты.Колонки.Очистить();
	ЭлементыФормы.НайденныеОбъекты.Колонки.Очистить();
	
	НайденныеОбъекты.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка." + мВидОбрабатываемогоСправочника), "Объект");
	НайденныеОбъекты.Колонки.Добавить("КоличествоСсылок", , "Количество ссылок");
	
	ЭлементыФормы.НайденныеОбъекты.СоздатьКолонки();
	
	Колонка= ЭлементыФормы.НайденныеОбъекты.Колонки.Ссылка;
	Колонка.ЭлементУправления.АвтоВыборНезаполненного = Истина;
	Колонка.ЭлементУправления.КнопкаОткрытия  = Истина;
	Колонка.КартинкиСтрок  = КартинкиСтрокНайденныхОбъектов;
	
	Колонка = ЭлементыФормы.НайденныеОбъекты.Колонки.КоличествоСсылок;
	Колонка.ТолькоПросмотр = Истина;
	Колонка.Видимость = Ложь;
	Колонка.Ширина = 5;
	
	НайденныеОбъекты.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Реквизит Из мСписокРеквизитовПоиска Цикл
		
		НайденныеОбъекты.Колонки.Добавить("Р_" + Реквизит.Значение, Новый ОписаниеТипов("Строка"), Реквизит.Представление);
		Колонка = ЭлементыФормы.НайденныеОбъекты.Колонки.Добавить("Р_" + Реквизит.Значение,Реквизит.Представление);
		Колонка.Данные = "Р_" + Реквизит.Значение;
		Колонка.ТолькоПросмотр = Истина;
		Колонка.Видимость = Ложь;
		
	КонецЦикла;
	
	УстановитьВидимостьКолонокДляОтображения();
	
КонецПроцедуры

Функция ПолучитьСписокРеквизитов(МетаданныеСправочника)
	
	СписокРеквизитов = Новый СписокЗначений;
	Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
		СписокРеквизитов.Добавить("Владелец", "Владелец");
	КонецЕсли;
			
	Если МетаданныеСправочника.ДлинаКода > 0 Тогда
		СписокРеквизитов.Добавить("Код", "Код");
	КонецЕсли;
			
	Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
		СписокРеквизитов.Добавить("Наименование", "Наименование");
	КонецЕсли;

	Для Каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Представление());
	КонецЦикла;
	
	Возврат СписокРеквизитов;
	
КонецФункции

Процедура ДобавитьВидимостьКолонкиДляНайденныхОбъектовДляЗамены(ИмяКолонкиОтображения, ВидимостьКолонки = Истина)
	
	Колонки = ЭлементыФормы.НайденныеОбъекты.Колонки;
	КолонкаРеквизита = Колонки.Найти("Р_" + ИмяКолонкиОтображения);
	Если КолонкаРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Колонки.Сдвинуть(Колонки.КоличествоСсылок, -1000);
	Колонки.Сдвинуть(Колонки.Ссылка, -1000);
	КолонкаПрошлогоРеквизита = Колонки[2];
	Колонки.Сдвинуть(КолонкаРеквизита, 2 - Колонки.Индекс(КолонкаРеквизита));
	
	//КолонкаПрошлогоРеквизита.Видимость = КолонкаРеквизита.Видимость;
	КолонкаРеквизита.Видимость = ВидимостьКолонки;	
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонокДляОтображения()
	
	Если мРеквизитПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВидимостьКолонкиДляНайденныхОбъектовДляЗамены(мРеквизитПоиска, Ложь);
	
	Если Врег(мРеквизитПоиска) <> "КОД" Тогда
		ДобавитьВидимостьКолонкиДляНайденныхОбъектовДляЗамены("КОД");
	КонецЕсли;
	
	Если Врег(мРеквизитПоиска) <> "НАИМЕНОВАНИЕ" Тогда
		ДобавитьВидимостьКолонкиДляНайденныхОбъектовДляЗамены("НАИМЕНОВАНИЕ");
	КонецЕсли;		
	
КонецПроцедуры // () 

Процедура ОбновитьСтрокуРезультатовПоиска(СтрокаРезультатовПоиска)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СтрокаРезультатовПоиска.Ссылка);
	РезультатПоиска = ПолучитьТаблицуРезультатовПоиска(МассивСсылок);
	Если РезультатПоиска.Количество() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРезультатовПоиска,РезультатПоиска[0],,"Ссылка");
	Иначе
		Для каждого Колонка Из НайденныеОбъекты.Колонки Цикл
			Если Не Колонка.Имя = "Ссылка" и Не Колонка.Имя = "Правильный" Тогда
				СтрокаРезультатовПоиска[Колонка.Имя] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ()

Функция ОпределитьКоличествоЭлементовДляПоискаВСправочнике()
	
	Если ПустаяСтрока(мВидОбрабатываемогоСправочника) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "Выбрать Количество(*) КАК Количество
	|ИЗ
	|	Справочник." + мВидОбрабатываемогоСправочника + " КАК _Таблица
	|";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат Таблица[0].Количество;
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ПЕРЕХОДА МЕЖДУ СТРАНИЦАМИ

Функция ВыполнитьПереходСоСтраницыНастройка()
	
	Если ПустаяСтрока(мВидОбрабатываемогоСправочника) Тогда
		Предупреждение("Не указан справочник для поиска.");
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(мРеквизитПоиска) Тогда
		Предупреждение("Не указан реквизит поиска.");
		Возврат Ложь;
	КонецЕсли;
	
	Если РежимПоиска = 2 тогда
		
		// нужно заранее узнать количество элементов для поиска
		КоличествоЭлементовДляПоиска = ОпределитьКоличествоЭлементовДляПоискаВСправочнике();
		
		Если КоличествоЭлементовДляПоиска > 1000 Тогда
		
			РезультатВопроса = Вопрос("Поиск по похожим словам может занять значительное время.
			|Начать поиск?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеОбъекты.Очистить();
			
	Если РежимПоиска = 1 Тогда
		НайтиПоРавенствуРеквизитов();
	ИначеЕсли РежимПоиска = 2 Тогда
		НайтиПоСовпадающимСловам();
	Иначе
		Предупреждение("Не указан режим поиска.");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьПереходСоСтраницыРезультаты()
	
	РезультатПоиска = ВыполнитьПоискСсылок();
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция ВыполнитьПереходСоСтраницыНайденныеСсылки()
	
	СтрокаПравильного = НайденныеОбъекты.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не указан правильный элемент.");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УдалятьЭлементыПослеЗамены
		И НайденныеСсылки.Количество() = 0 Тогда
		
		Предупреждение("Нет ссылок на объекты, пожлежащие замене!");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗадаватьВопросПередНачаломЗамены Тогда
		
		Если УдалятьЭлементыПослеЗамены Тогда
			ТекстСообщенияПользователю = "Замена и удаление элементов - операция необратимая!";
			ТекстИтоговогоВопроса = "Выполнить замену и удаление объектов?";
		Иначе
			ТекстСообщенияПользователю = "Замена элементов - операция необратимая!";
			ТекстИтоговогоВопроса = "Выполнить замену?";
		КонецЕсли;
		
		РезультатВопроса = Вопрос(ТекстСообщенияПользователю + " 
			|" + ТекстИтоговогоВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;

	Состояние("Выполняется замена элементов");
	
	ОтобразитьФормуИндикатора("Замена значений");
			
	ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайденныеСсылки);
	
	ВыполнитьПоискСсылок();
	
	Если УдалятьЭлементыПослеЗамены Тогда
		
		Состояние("Выполняется удаление элементов");
		УдалитьЭлементыПослеЗамены();	
		
	КонецЕсли;
	
	Если ПослеЗаменыВозвратитсяНаЗакладкуРезультатовПоиска Тогда
		
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результаты;
		
	КонецЕсли;
	
	ЗакрытьФормуИндикатора();
	
	Если УведомлятьПользователяОбОкончанииЗамены Тогда
		
		Если УдалятьЭлементыПослеЗамены Тогда
			СтрокаСообщенияПользователю = "Замена и удаление элементов успешно завершена.";
		Иначе
			СтрокаСообщенияПользователю = "Замена элементов успешно завершена.";
		КонецЕсли;
		
		Предупреждение(СтрокаСообщенияПользователю, 10);
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Предупреждение("Для выполнения поиска и замены дублирующихся элементов необходимо наличие роли ""Полные права"" !");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДопустимоеРазличиеСлов = 30;
	
	Попытка
		мФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
	Исключение
		мФормаИндикатора = Неопределено;
	КонецПопытки;
	
	УстановитьЗаголовокПанели();
	
	УстановитьДоступностьДопОтбора();
	
	УстановитьДоступностьЭлементаСходстваСлов();
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	НайденСправочник = Ложь;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		
		Если СправочникДляПоиска = Справочник.Синоним Тогда
			
			мВидОбрабатываемогоСправочника = Справочник.Имя;
			НайденСправочник = Истина;
			Прервать;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если Не НайденСправочник Тогда
		
		СправочникДляПоискаОчистка(Неопределено, Истина);
		
	Иначе	
		
		мСписокРеквизитовПоиска = ПолучитьСписокРеквизитов(Метаданные.Справочники[мВидОбрабатываемогоСправочника]);
		
		ОчиститьРезультатыПоиска();
		
		ЭлементНайден = Ложь;
		Для Каждого ЭлементСписка Из мСписокРеквизитовПоиска Цикл
			
			Если ЭлементСписка.Представление = РеквизитДляПоиска Тогда
				
				мРеквизитПоиска = ЭлементСписка.Значение;
				ЭлементНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭлементНайден Тогда
		
			ВыбранноеЗначение = Новый Структура();
			ВыбранноеЗначение.Вставить("Значение", мРеквизитПоиска);
			ВыбранноеЗначение.Вставить("Представление", РеквизитДляПоиска);
			
			РеквизитДляПоискаОбработкаВыбора(ЭлементыФормы.РеквизитДляПоиска, ВыбранноеЗначение, Истина);
		
		Иначе
			
			РеквизитДляПоискаОчистка(ЭлементыФормы.РеквизитДляПоиска, Истина);
			
	    КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементаСходстваСлов();
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеОбъекты"

Процедура КоманднаяПанельНайденныеОбъектыВыборПравильного(Кнопка)
	
	Если ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеОбъекты.Найти(Истина, "Правильный");
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СтрокаТаблицы.Правильный = Ложь;
		
		СтрокаОсновнойТаблицы = мРезультатыПоиска.Найти(СтрокаТаблицы.Ссылка, "Ссылка");
		Если СтрокаОсновнойТаблицы <> Неопределено Тогда
			СтрокаОсновнойТаблицы.Правильный = Ложь;		
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока.Правильный = Истина;
	ЭлементыФормы.КоманднаяПанельРезультатыПоискаГруппы.Кнопки.ПоискЗависимых.Доступность = Истина;
	
	СтрокаОсновнойТаблицы = мРезультатыПоиска.Найти(ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока.Ссылка, "Ссылка");
	Если СтрокаОсновнойТаблицы <> Неопределено Тогда
		СтрокаОсновнойТаблицы.Правильный = Истина;		
	КонецЕсли;
	
	СброситьДоступность();
	
	ДоступностьВыполненияЗамены = ОпределитьДоступностьКнопкиВыполненияЗаменыДанных();
	
	Если ДоступностьВыполненияЗамены
		И ПредлагатьЗаменятьЭлементыПриВыбореПравильного Тогда
		
		РезультатВопроса = Вопрос("Выполнить замену ссылок для оставшихся элементов?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			
			КоманднаяПанельНайденныеОбъектыВыполнитьЗамену(ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ВыполнитьЗамену);	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПоискЗависимых(Кнопка) Экспорт
	
	ВремТаблица = НайденныеОбъекты.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не указан правильный элемент.");
		Возврат;
	КонецЕсли;
	
	НайденныеЗависимыеСсылки.Очистить();
	мЗависимыеМетаданные = Новый массив;
	ИмяСправочника = мВидОбрабатываемогоСправочника;
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	Для каждого МетаданныеЗависимого Из Метаданные.Справочники Цикл
		СтрокаМетаданные = Неопределено;
		Если МетаданныеЗависимого.Владельцы.Содержит(МетаданныеСправочника) Тогда
			мЗависимыеМетаданные.Добавить(МетаданныеЗависимого);
		КонецЕсли; 
	КонецЦикла; 
	
	Правильный = СтрокаПравильного.Ссылка;
	ВремТаблица.Удалить(СтрокаПравильного);	
	ЗависимыеОбъекты.Строки.Очистить();
	
	Для каждого МетаданныеЗависимого Из мЗависимыеМетаданные Цикл
		СтрокаМетаданные = Неопределено;
		Для каждого СтрокаНеПравильного Из ВремТаблица Цикл
			СтрокаОбъекта = Неопределено;
			НеПравильный = СтрокаНеПравильного.ссылка;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	ЗависимыйСправочник.Ссылка,
			               |	ЗависимыйСправочник.Наименование
			               |ИЗ
			               |	Справочник." + МетаданныеЗависимого.Имя + " КАК ЗависимыйСправочник
			               |ГДЕ
			               |	ЗависимыйСправочник.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", НеПравильный);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если СтрокаМетаданные = Неопределено Тогда
					СтрокаМетаданные = ЗависимыеОбъекты.Строки.Добавить();
					СтрокаМетаданные.НеПравильный = МетаданныеЗависимого.Имя;
					СтрокаМетаданные.Правильный = МетаданныеЗависимого.Имя;
				КонецЕсли; 
				
				Если СтрокаОбъекта = Неопределено Тогда
					СтрокаОбъекта = СтрокаМетаданные.Строки.Добавить();
					СтрокаОбъекта.НеПравильный = НеПравильный;
					СтрокаОбъекта.Правильный = Правильный;
				КонецЕсли; 
				СтрокаЗависимого = СтрокаОбъекта.Строки.Добавить();
				СтрокаЗависимого.НеПравильный = Выборка.Ссылка;
				Пустой = Справочники[МетаданныеЗависимого.Имя].ПустаяСсылка();
				Похожий = Справочники[МетаданныеЗависимого.Имя].НайтиПоНаименованию(Выборка.Наименование,Ложь,,Правильный);
				Если Похожий <> Пустой Тогда
					СтрокаЗависимого.ВключатьВПоиск = Истина;
				КонецЕсли; 
				СтрокаЗависимого.Правильный = Похожий;
				
			КонецЦикла;
		КонецЦикла; 
		Если СтрокаМетаданные <> Неопределено Тогда
			ЭлементыФормы.ЗависимыеОбъекты.Развернуть(СтрокаМетаданные,Истина);
		КонецЕсли; 
	КонецЦикла;
	
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Истина;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеОбъекты"

Процедура НайденныеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	Если мВидОбрабатываемогоСправочника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаВыбора = Справочники[мВидОбрабатываемогоСправочника].ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура НайденныеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.КоличествоСсылок = Неопределено Тогда
		ОформлениеСтроки.Ячейки.КоличествоСсылок.Текст = "?";
	КонецЕсли;
	
	Если ДанныеСтроки.Правильный <> Неопределено 
		И ДанныеСтроки.Правильный Тогда
		
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Ссылка.Шрифт = Новый Шрифт(,,Истина);
		
		Если Не мРеквизитПоиска <> Неопределено Тогда
			ЯчейкаРеквизита = ОформлениеСтроки.Ячейки.Найти("Р_" + мРеквизитПоиска);
			Если ЯчейкаРеквизита <> Неопределено Тогда
				ЯчейкаРеквизита.Шрифт = Новый Шрифт(,,Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Ссылка.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.Ссылка.ИндексКартинки = 1;
	КонецЕсли;
			
	ОформлениеСтроки.Ячейки.Ссылка.ОтображатьКартинку = Истина;
	
КонецПроцедуры

Процедура НайденныеОбъектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСсылка = Элемент.ТекущиеДанные.Ссылка;
	
	Если НайденныеОбъекты.НайтиСтроки(Новый Структура("Ссылка",ТекущаяСсылка)).Количество() > 1 Тогда
		Предупреждение("Элемент """ + ТекущаяСсылка + """ уже присутствует в списке.");
		НайденныеОбъекты.Удалить(Элемент.ТекущиеДанные);
		ОбновитьТекущуюГруппуРезультатовПоиска();
	Иначе
		ОбновитьСтрокуРезультатовПоиска(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры


Процедура НайденныеОбъектыПослеУдаления(Элемент)
	ОбновитьТекущуюГруппуРезультатовПоиска();
КонецПроцедуры

Процедура НайденныеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка."+ мВидОбрабатываемогоСправочника) Тогда
		
		НоваяСтрокаНайденных = НайденныеОбъекты.Найти(ВыбранноеЗначение, "Ссылка");
		Если НоваяСтрокаНайденных = Неопределено Тогда
			НоваяСтрокаНайденных = НайденныеОбъекты.Добавить();
			НоваяСтрокаНайденных.Ссылка = ВыбранноеЗначение;
			НоваяСтрокаНайденных.Правильный = Ложь;
			ОбновитьСтрокуРезультатовПоиска(НоваяСтрокаНайденных);
			ОбновитьТекущуюГруппуРезультатовПоиска();
		КонецЕсли; 
		ЭлементыФормы.НайденныеОбъекты.ТекущаяСтрока = НоваяСтрокаНайденных;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьФормуИндикатора(КомментарийОбработкиДанных, КомментарийЗначения = Неопределено)
	
	Если мФормаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	мФормаИндикатора.КомментарийОбработкиДанных = КомментарийОбработкиДанных;
	Если КомментарийЗначения <> Неопределено Тогда
		мФормаИндикатора.КомментарийЗначения = КомментарийЗначения;
	КонецЕсли;
	
	Если мФормаИндикатора.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	мФормаИндикатора.Открыть();		
		
КонецПроцедуры

Процедура ЗакрытьФормуИндикатора()
	
	Если мФормаИндикатора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мФормаИндикатора.Закрыть();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеСсылки"

Процедура УдалитьЭлементыПослеЗамены()
	
	Если НайденныеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки.");
		Возврат;
	КонецЕсли;
	
	ТекущаяГруппа = ТекущаяГруппа();
	
	СтруктураПоиска = Новый Структура("НомерГруппы", ТекущаяГруппа);
	
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	МассивСтрок  = НайденныеОбъекты.НайтиСтроки(Новый Структура("Правильный", Ложь));
	Для Каждого Строка ИЗ МассивСтрок Цикл
		          		
		СтруктураПоиска.Вставить("Ссылка", Строка.Ссылка);
		МассивРезультатов = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		
		Объект = Строка.Ссылка.ПолучитьОбъект();		
		Попытка
			Объект.Удалить();
		Исключение
			Если ВыполнятьВТранзакции Тогда
				БылиИсключения = Истина;
				Прервать;
			КонецЕсли;
		КонецПопытки;
		
		
		Если МассивРезультатов.Количество()>0 Тогда
			НовСтр = СтрокиКУдалению.Добавить();
			НовСтр.СтрокаТаблицы = МассивРезультатов[0];
			НовСтр.ТаблицаЗначений = мРезультатыПоиска;				
		КонецЕсли;
		
		НовСтр = СтрокиКУдалению.Добавить();
		НовСтр.СтрокаТаблицы = Строка;
		НовСтр.ТаблицаЗначений = НайденныеОбъекты;			
		
	КонецЦикла;
	Если Не БылиИсключения Тогда
		Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
			Для каждого Строка1 Из Строка0.Строки Цикл
				Для каждого Строка2 Из Строка1.Строки Цикл
					Если Строка2.ВключатьВПоиск Тогда
						Объект = Строка2.НеПравильный.ПолучитьОбъект();		
						Попытка
							Объект.Удалить();
						Исключение
							Если ВыполнятьВТранзакции Тогда
								БылиИсключения = Истина;
								Прервать;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли; 
				КонецЦикла; 
				Если БылиИсключения Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если БылиИсключения Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();			
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.ТаблицаЗначений.Удалить(СтрокаКУдалению.СтрокаТаблицы);
		КонецЦикла;			
		ЗависимыеОбъекты.Строки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеСсылки"

Процедура УстановитьОтборВФормеРегистра(Форма, КлючУникальности)
	
	ОтборФормы = Форма.Отбор;
	
	Для Каждого Элемент Из ОтборФормы Цикл
		
		Попытка
			
			ДанныеКлюча = КлючУникальности[Элемент.Имя];
			ОтборФормы[Элемент.Имя].Значение = ДанныеКлюча;
			ОтборФормы[Элемент.Имя].Использование = Истина;
									
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайденныеСсылкиПередНачаломИзменения(Элемент, Отказ)
	
	Попытка
		
		Форма = Элемент.ТекущиеДанные.Данные.ПолучитьФорму();
		Форма.Открыть();
		
	Исключение
		
		Попытка
			
			Форма = Неопределено;
			
			СтрокаДанных = Строка(Элемент.ТекущиеДанные.Данные);
			ПозицияКлючаРегистраСведений = Найти(СтрокаДанных, "РегистрСведенийКлючЗаписи.");
			ПозицияКлючаРегистраНакоплений = Найти(СтрокаДанных, "РегистрНакопленияКлючЗаписи.");
			ПозицияКлючаРегистраБухгалтерии = Найти(СтрокаДанных, "РегистрБухгалтерииКлючЗаписи.");
			ПозицияКлючаРегистраРасчета = Найти(СтрокаДанных, "РегистрРасчетаКлючЗаписи.");
						
			Если ПозицияКлючаРегистраСведений > 0 Тогда
				
				ИмяРегистра = Сред(СтрокаДанных, ПозицияКлючаРегистраСведений + СтрДлина("РегистрСведенийКлючЗаписи."));
				Форма = РегистрыСведений[ИмяРегистра].ПолучитьФорму("ФормаСписка");
				
			ИначеЕсли ПозицияКлючаРегистраНакоплений > 0 Тогда	
				
				ИмяРегистра = Сред(СтрокаДанных, ПозицияКлючаРегистраСведений + СтрДлина("РегистрНакопленияКлючЗаписи."));
				Форма = РегистрыНакопления[ИмяРегистра].ПолучитьФорму("ФормаСписка");
				
			ИначеЕсли ПозицияКлючаРегистраБухгалтерии > 0 Тогда	
				
				ИмяРегистра = Сред(СтрокаДанных, ПозицияКлючаРегистраСведений + СтрДлина("РегистрБухгалтерииКлючЗаписи."));
				Форма = РегистрыБухгалтерии[ИмяРегистра].ПолучитьФорму("ФормаСписка");	
				
			ИначеЕсли ПозицияКлючаРегистраРасчета > 0 Тогда	
				
				ИмяРегистра = Сред(СтрокаДанных, ПозицияКлючаРегистраСведений + СтрДлина("РегистрРасчетаКлючЗаписи."));
				Форма = РегистрыРасчета[ИмяРегистра].ПолучитьФорму("ФормаСписка");	
				
			КонецЕсли;
			
			Если Форма <> Неопределено Тогда
				
				УстановитьОтборВФормеРегистра(Форма, Элемент.ТекущиеДанные.Данные);
				Форма.Открыть();
				
			КонецЕсли;
			
		Исключение
			
		КонецПопытки;
		
	КонецПопытки;
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "ЗависимыеОбъекты"

Процедура КоманднаяПанельЗависимыеОбъектыПоискСсылок(Кнопка)
	ПоискЗависимыхСсылок();
	
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = ?(НайденныеЗависимыеСсылки.Количество() > 0, Истина, Ложь);
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыВыполнитьЗамену(Кнопка)
	
	ОтобразитьФормуИндикатора("Замена значений");
		
	СтруктураОтбора = Новый Структура;
	МассивСтрокВключенныхВПоиск = ЗависимыеОбъекты.Строки.НайтиСтроки(Новый Структура("ВключатьВПоиск", Истина), Истина);
	
	НомерСтроки = 0;
	Для каждого Строка Из МассивСтрокВключенныхВПоиск Цикл
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураОтбора.Вставить("Ссылка",Строка.НеПравильный);
		МассивСтрок = НайденныеЗависимыеСсылки.НайтиСтроки(СтруктураОтбора);
		ВыполнитьЗаменуЭлементов(Строка.Правильный, МассивСтрок, " Элемент " + НомерСтроки + " из " + МассивСтрокВключенныхВПоиск.Количество());
	КонецЦикла;
	
	ПоискЗависимыхСсылок();
	
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = ?(НайденныеЗависимыеСсылки.Количество() > 0, Истина, Ложь);
	
	ЗакрытьФормуИндикатора();
	
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыУдалитьЭлементы(Кнопка)
	
	Если НайденныеЗависимыеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки.");
		Возврат;
	КонецЕсли;
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					Объект = Строка2.НеПравильный.ПолучитьОбъект();		
					Попытка
						Объект.Удалить();
					Исключение
						Если ВыполнятьВТранзакции Тогда
							БылиИсключения = Истина;
							Прервать;
						КонецЕсли;
					КонецПопытки;
					НовСтр = СтрокиКУдалению.Добавить();
					НовСтр.СтрокаТаблицы = Строка2;
					НовСтр.ТаблицаЗначений = ЗависимыеОбъекты;			
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();			
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.ТаблицаЗначений.Строки.Удалить(СтрокаКУдалению.СтрокаТаблицы);
		КонецЦикла;			
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ЗависимыеОбъекты"

Процедура ЗависимыеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьТекст = Ложь;
	Если ДанныеСтроки.Уровень() = 1  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Правильный.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	ИначеЕсли ДанныеСтроки.Уровень() = 0  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Правильный.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	Иначе
//		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗависимыеОбъектыПравильныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Уровень() = 2 Тогда
			Элемент.ВыборПоВладельцу = ТекущиеДанные.Родитель.Правильный;
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ОпределитьПравильныеЭлементы() Экспорт
	
	Если мРезультатыПоиска.Колонки.Найти("КоличествоСсылок") = Неопределено Тогда
		мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	КонецЕсли;
	
	мРезультатыПоиска.ЗаполнитьЗначения(Ложь,"Правильный");
	
	ТаблицаСсылок = НайтиПоСсылкам(мРезультатыПоиска.ВыгрузитьКолонку("Ссылка"));
	ТаблицаСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаСсылок.ЗаполнитьЗначения(1,"Количество");
	ТаблицаСсылок.Свернуть("Ссылка", "Количество");
	СоответствиеСсылок = Новый Соответствие;
	Для каждого Строка Из ТаблицаСсылок Цикл
		СоответствиеСсылок.Вставить(Строка.Ссылка, Строка.Количество);
	КонецЦикла;
	СтрокиПравильных = Новый Соответствие;
	Для каждого Строка Из мРезультатыПоиска Цикл
		КоличествоСсылок = СоответствиеСсылок[Строка.Ссылка];
		КоличествоСсылок = ?(КоличествоСсылок = Неопределено, 0, КоличествоСсылок);
		Строка.КоличествоСсылок = ?(КоличествоСсылок = Неопределено, 0, КоличествоСсылок);
		
		НомерГруппы = Строка.НомерГруппы;
		
		СтрокаПравильного = СтрокиПравильных[НомерГруппы];
		Если СтрокаПравильного = Неопределено или СтрокаПравильного.КоличествоСсылок < КоличествоСсылок Тогда
			СтрокиПравильных.Вставить(НомерГруппы, Строка);
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаПравильного Из СтрокиПравильных Цикл
		СтрокаПравильного.Значение.Правильный = Истина;
	КонецЦикла;
	
КонецПроцедуры // () 


Процедура СправочникДляПоискаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму("ФормаОтбора", Элемент);
	
	Форма.Заголовок = "Выбор справочника";
	
	ЗначенияОтбора = Форма.ЗначенияОтбора;
	Для Каждого Справочник Из мСписокВсехСправочников Цикл
		СтрокаОтбора = ЗначенияОтбора.Добавить();
		СтрокаОтбора.Представление = Справочник.Представление;
		СтрокаОтбора.Значение = Справочник.Значение;
		СтрокаОтбора.ИндексКартинки = 2;
	КонецЦикла;	
	
	Если мВидОбрабатываемогоСправочника <> Неопределено Тогда
		Форма.НачальноеЗначение = мВидОбрабатываемогоСправочника;
	КонецЕсли;

	Форма.Открыть();
	
КонецПроцедуры

Процедура СправочникДляПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	мВидОбрабатываемогоСправочника = Неопределено;
	
	РеквизитДляПоиска = "";
	мРеквизитПоиска = Неопределено;
	
	Для Номер = 0 по ПостроительОтчета.Отбор.Количество() - 1 Цикл
		
		ПостроительОтчета.Отбор.Удалить(0);	
		
	КонецЦикла;
	
	УстановитьДоступностьДопОтбора();
	
КонецПроцедуры

Процедура СправочникДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Представление;
		
		НужноОбновлятьПараметрыПоиска = (мВидОбрабатываемогоСправочника <> ВыбранноеЗначение.Значение);
				
		мВидОбрабатываемогоСправочника = ВыбранноеЗначение.Значение;
		
		Если НужноОбновлятьПараметрыПоиска Тогда
			
			мСписокРеквизитовПоиска = ПолучитьСписокРеквизитов(Метаданные.Справочники[мВидОбрабатываемогоСправочника]);
			
			Если мСписокРеквизитовПоиска.Количество() > 0 Тогда
				
				ЭлементСписка = мСписокРеквизитовПоиска.НайтиПоЗначению(мРеквизитПоиска);
				
				Если ЭлементСписка <> Неопределено Тогда 
				
					РеквизитДляПоиска = ЭлементСписка.Представление;
					мРеквизитПоиска = ЭлементСписка.Значение;
				
				Иначе
					
					РеквизитДляПоиска = мСписокРеквизитовПоиска[1].Представление;
					мРеквизитПоиска = мСписокРеквизитовПоиска[1].Значение;
					
				КонецЕсли;
				
			Иначе
				
				РеквизитДляПоиска = "";
				мРеквизитПоиска = Неопределено;
				
		    КонецЕсли;
			
			ОчиститьРезультатыПоиска();
			РежимПоискаПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьДопОтбора();
	
КонецПроцедуры

Процедура РеквизитДляПоискаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если мВидОбрабатываемогоСправочника = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	Форма = ПолучитьФорму("ФормаОтбора", Элемент);
	
	Форма.Заголовок = "Выбор реквизита для поиска";
	
	ЗначенияОтбора = Форма.ЗначенияОтбора;
			
	Для Каждого Реквизит Из мСписокРеквизитовПоиска Цикл
		
		СтрокаОтбора = ЗначенияОтбора.Добавить();
		СтрокаОтбора.Представление = Реквизит.Представление;
		СтрокаОтбора.Значение = Реквизит.Значение;
		СтрокаОтбора.ИндексКартинки = 1;
		
	КонецЦикла;
	
	Форма.НачальноеЗначение = Элемент.Значение;
	Форма.Открыть();
	
КонецПроцедуры

Процедура РеквизитДляПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	мРеквизитПоиска = Неопределено;
	
	УстановитьДоступностьДопОтбора();
	
КонецПроцедуры

Процедура РеквизитДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		мРеквизитПоиска = ВыбранноеЗначение.Значение;
		Элемент.Значение = ВыбранноеЗначение.Представление;
		
	КонецЕсли;
	
	ВозможностьИзменятьРежимПоиска = ОбновитьЗапросПостроителю();	
	
	ЭлементыФормы.РежимПоиска.Доступность = ВозможностьИзменятьРежимПоиска;
	
	УстановитьВидимостьКолонокДляОтображения();
	
	УстановитьДоступностьДопОтбора();
	
	УстановитьДоступностьЭлементаСходстваСлов();
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаДляПостроителя(Режим)
	
	Если Режим = 1 Тогда
		
		Текст = "
			|ВЫБРАТЬ Спр1.Ссылка КАК Ссылка,
			|Спр1." + мРеквизитПоиска + " КАК ЗначениеРеквизита
			|Из Справочник." + мВидОбрабатываемогоСправочника  + " КАК Спр1, Справочник." + мВидОбрабатываемогоСправочника  + " КАК Спр2
			|ГДЕ Спр1." + мРеквизитПоиска +  " = Спр2." + мРеквизитПоиска +  " И Спр1.Ссылка <> Спр2.Ссылка
			|	{ГДЕ Спр1.Ссылка.* КАК Элемент}
			|СГРУППИРОВАТЬ ПО Спр1.Ссылка";
		
	Иначе
			
		МетаданныеСправочника = Метаданные.Справочники[мВидОбрабатываемогоСправочника];	
		
		СтрокаУпорядочивания = МетаданныеСправочника.ВводПоСтроке;
		
		Если Не ПустаяСтрока(СтрокаУпорядочивания) Тогда
			
			СтрокаУпорядочивания = "УПОРЯДОЧИТЬ ПО " + СтрокаУпорядочивания;	
			
		КонецЕсли;
		
		Текст = "
			|ВЫБРАТЬ Ссылка,
			|" + мРеквизитПоиска + " КАК ЗначениеРеквизита 
			|Из Справочник." + мВидОбрабатываемогоСправочника + " КАК Спр1
			|" + СтрокаУпорядочивания + "
			|	{ГДЕ Спр1.Ссылка.* КАК Элемент}";
			
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ОпределитьВозможностьУстановкиРежимаПоискаДляТекущийхДанных(Режим)
	
	Если Режим = 1 Тогда
		
		Попытка
			
			ВременныейПостроитель = Новый ПостроительОтчета;
			ВременныейПостроитель.Текст = ПолучитьТекстЗапросаДляПостроителя(Режим);
							
			Возврат Истина;
				
		Исключение
				
			Возврат Ложь;
				
		КонецПопытки;
		
	Иначе
		
		// режим поиска по похожим словам
		Если мРеквизитПоиска="Владелец"
			ИЛИ мРеквизитПоиска="Родитель" Тогда
				
			 Возврат Ложь;
							 
		ИначеЕсли мРеквизитПоиска="Код" Тогда
				 
			 Если Метаданные.Справочники[мВидОбрабатываемогоСправочника].ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				 Возврат Ложь;
			 КонецЕсли;
			 
		ИначеЕсли мРеквизитПоиска="Наименование" Тогда	 
			
			Возврат Истина;
					 
		Иначе
			ТипРеквизита = Метаданные.Справочники[мВидОбрабатываемогоСправочника].Реквизиты[мРеквизитПоиска].Тип;
			Если Не ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
				Возврат Ложь;					
			КонецЕсли;			
		КонецЕсли;
			    		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьЗапросПостроителю()
	
	Если мРеквизитПоиска = Неопределено
		Или ПустаяСтрока(мРеквизитПоиска) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
		
	Если РежимПоиска = 1 Тогда
			
		Попытка
				
			ПостроительОтчета.Текст = ПолучитьТекстЗапросаДляПостроителя(РежимПоиска);
				
			ВозможностьУстановкиРежима = ОпределитьВозможностьУстановкиРежимаПоискаДляТекущийхДанных(2);
			Возврат ВозможностьУстановкиРежима;
				
		Исключение
				
			РежимПоиска = 2;
			ОбновитьЗапросПостроителю();
			Возврат Ложь;
				
		КонецПопытки;
		
	Иначе
			
		ВозможностьУстановкиРежима = ОпределитьВозможностьУстановкиРежимаПоискаДляТекущийхДанных(2);
								
		Если НЕ ВозможностьУстановкиРежима Тогда
			РежимПоиска = 1;
			ОбновитьЗапросПостроителю();
			Возврат Ложь;
		КонецЕсли;
			
		ПостроительОтчета.Текст = ПолучитьТекстЗапросаДляПостроителя(РежимПоиска);
						
		ВозможностьУстановкиРежима = ОпределитьВозможностьУстановкиРежимаПоискаДляТекущийхДанных(1);
		Возврат ВозможностьУстановкиРежима;
				
	КонецЕсли;
	
	УстановитьДоступностьЭлементаСходстваСлов();
	
	Возврат Истина;
		
КонецФункции

Процедура УстановитьДоступностьЭлементаСходстваСлов()
	
	ЭлементыФормы.ПолосаРегулирования.Доступность = (РежимПоиска = 2);
	
КонецПроцедуры

Процедура РежимПоискаПриИзменении(Элемент)
	
	ВозможностьИзменятьРежимПоиска = ОбновитьЗапросПостроителю();	
	
	ЭлементыФормы.РежимПоиска.Доступность = ВозможностьИзменятьРежимПоиска;
	
	УстановитьДоступностьЭлементаСходстваСлов();
	
КонецПроцедуры

Процедура ТаблицаГруппПриАктивизацииСтроки(Элемент)
	
	НомерТекГруппы = ТекущаяГруппа();
	
	Если НомерТекГруппы > 0 Тогда
	
		ВывестиГруппу(НомерТекГруппы);
	
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьДоступностьДопОтбора()
	
	ЭлементыФормы.ДополнительныйОтбор.Доступность = (мВидОбрабатываемогоСправочника <> Неопределено)
													И (мРеквизитПоиска <> Неопределено);
	
КонецПроцедуры

Процедура УстановитьЗаголовокПанели()
	
	ЗаголовокЗакладки = "";
	
	Если мОсновнаяПанельФормы.ТекущаяСтраница = мОсновнаяПанельФормы.Страницы.Настройка Тогда
		
		ЗаголовокЗакладки = "Настройки поиска дублирующихся элементов";
				
	ИначеЕсли мОсновнаяПанельФормы.ТекущаяСтраница = мОсновнаяПанельФормы.Страницы.Результаты Тогда	
		
		ЗаголовокЗакладки = "Результаты поиска дублирующихся элементов";
				
	ИначеЕсли мОсновнаяПанельФормы.ТекущаяСтраница = мОсновнаяПанельФормы.Страницы.НайденныеСсылки Тогда	
		
		ЗаголовокЗакладки = "Найденные ссылки на заменяемые элементы";
		
	ИначеЕсли мОсновнаяПанельФормы.ТекущаяСтраница = мОсновнаяПанельФормы.Страницы.ЗависимыеЭлементы Тогда
		
		ЗаголовокЗакладки = "Результаты поиска зависимых элементов";
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьЗаголовокЗакладки.Заголовок = ЗаголовокЗакладки;	
	
КонецПроцедуры

Процедура ВыполнитьПоискДублейИОтобразитьРезультат()
	
	РезультатПерехода = ВыполнитьПереходСоСтраницыНастройка();
	
	Если РезультатПерехода Тогда
		
		Если НайденныеОбъекты.Количество() = 0 Тогда
		
			Предупреждение("Не выявлено дублей элементов.");
			Возврат;
			
		КонецЕсли;
		
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результаты;
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура КоманднаяПанель1АвтоопределениеПривильныхОбъектовВоВсехГруппах(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	ОпределитьПравильныеЭлементы();
	
	ВывестиГруппу(ТекущаяГруппа());
	ЭлементыФормы.НайденныеОбъекты.Колонки.КоличествоСсылок.Видимость = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанель1АвтозаменаВоВсехГруппах(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	Если мРезультатыПоиска = Неопределено или Не мРезультатыПоиска.НайтиСтроки(Новый Структура("Правильный",Истина)).Количество() Тогда
		Предупреждение("Не указан правильный элемент ни в одной из групп.");
		Возврат;
	КонецЕсли;
	
	РезультатВопроса = Вопрос("Внимание!!! Во всех группах, где определен правильный элемент,
	|программа выполнит автоматическую замену ссылок!
	|
	|Выполнить непосредственное удаление объектов после замены элементов?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	АвтозаменаЭлементов(РезультатВопроса = КодВозвратаДиалога.Да);
	ВывестиГруппу(ТекущаяГруппа(), Истина);
			
	Предупреждение("Замена элементов успешно завершена.", 10);
	
КонецПроцедуры

Процедура НайденныеСсылкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Ссылка.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.Ссылка.ИндексКартинки = 1;
	КонецЕсли;
			
	ОформлениеСтроки.Ячейки.Ссылка.ОтображатьКартинку = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанель1Обновить(Кнопка)
	
	// обновить результаты поиска
	ВыполнитьПоискДублейИОтобразитьРезультат();	
	
КонецПроцедуры

Функция ПолучитьМассивСтрокСпискаПоНаименованию(СписокПоиска, НаименованиеЭлемента)
	
	ПриведенноеНаименованиеПоиска = Врег(НаименованиеЭлемента);
	
	МассивСтрок = Новый Массив();
	
	Для Каждого Элемент Из СписокПоиска Цикл
		
		ПозицияПоиска = Найти(Врег(Элемент.Представление), ПриведенноеНаименованиеПоиска);
		
		Если ПозицияПоиска = 1 Тогда
			
			МассивСтрок.Добавить(Элемент);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

Процедура ВыбратьЕдинственноеЗначениеИзСпискаДляСправочника(Элемент, МассивСтрок)
	
	ВыбранноеЗначение = Новый Структура();
	ВыбранноеЗначение.Вставить("Представление", МассивСтрок[0].Представление);
	ВыбранноеЗначение.Вставить("Значение", МассивСтрок[0].Значение);
	СтандОбработка = Истина;
		
	СправочникДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандОбработка);	
	
КонецПроцедуры

Процедура ВыбратьЕдинственноеЗначениеИзСпискаДляРеквизита(Элемент, МассивСтрок)
	
	ВыбранноеЗначение = Новый Структура();
	ВыбранноеЗначение.Вставить("Представление", МассивСтрок[0].Представление);
	ВыбранноеЗначение.Вставить("Значение", МассивСтрок[0].Значение);
	СтандОбработка = Истина;
		
	РеквизитДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандОбработка);	
	
КонецПроцедуры

Процедура СправочникДляПоискаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	// автоподбор элеменета
	МассивСтрок = ПолучитьМассивСтрокСпискаПоНаименованию(мСписокВсехСправочников, Текст);
	
	КоличествоЭлементовВмассивеПоиска =  МассивСтрок.Количество();
	
	Если КоличествоЭлементовВмассивеПоиска = 1 Тогда
		
		ВыбратьЕдинственноеЗначениеИзСпискаДляСправочника(Элемент, МассивСтрок);
				
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникДляПоискаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	МассивСтрок = ПолучитьМассивСтрокСпискаПоНаименованию(мСписокВсехСправочников, Текст);
	
	КоличествоЭлементовВмассивеПоиска =  МассивСтрок.Количество();
	
	Если КоличествоЭлементовВмассивеПоиска = 1 Тогда
		
		ВыбратьЕдинственноеЗначениеИзСпискаДляСправочника(Элемент, МассивСтрок);
		
	ИначеЕсли КоличествоЭлементовВмассивеПоиска > 10 Тогда
		
		Предупреждение("Найдено более 10-ти справочников, удовлетворяющих условиям выбора.
					   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
		
	Иначе
					   
		Если КоличествоЭлементовВмассивеПоиска = 0 Тогда
			
			ВыбранныйЭлемент = Неопределено;
			
		Иначе
			
			СписокВыбора = Новый СписокЗначений;
			Для Каждого Эл Из МассивСтрок Цикл
				
				СписокВыбора.Добавить(Эл.Значение, Эл.Представление);	
				
			КонецЦикла;
			
			ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
			
		КонецЕсли; 
		
		СтандОбработка = Истина;
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			
			Предупреждение("В элемент управления введены некорректные данные.");
			
			Если мВидОбрабатываемогоСправочника = Неопределено Тогда
				
				СправочникДляПоискаОчистка(Элемент, СтандОбработка);
				
			Иначе
				
				ВыбранноеЗначение = Новый Структура();
				ВыбранноеЗначение.Вставить("Представление", мСписокВсехСправочников.НайтиПоЗначению(мВидОбрабатываемогоСправочника).Представление);
				ВыбранноеЗначение.Вставить("Значение", мВидОбрабатываемогоСправочника);
				
				СправочникДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандОбработка);
				
			КонецЕсли;
			
		Иначе
			
			ВыбранноеЗначение = Новый Структура();
			ВыбранноеЗначение.Вставить("Представление", ВыбранныйЭлемент.Представление);
			ВыбранноеЗначение.Вставить("Значение", ВыбранныйЭлемент.Значение);
			СтандОбработка = Истина;
				
			СправочникДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандОбработка);					
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РеквизитДляПоискаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	// автоподбор элеменета
	МассивСтрок = ПолучитьМассивСтрокСпискаПоНаименованию(мСписокРеквизитовПоиска, Текст);
	
	КоличествоЭлементовВмассивеПоиска =  МассивСтрок.Количество();
	
	Если КоличествоЭлементовВмассивеПоиска = 1 Тогда
		
		ВыбратьЕдинственноеЗначениеИзСпискаДляРеквизита(Элемент, МассивСтрок);
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура РеквизитДляПоискаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	МассивСтрок = ПолучитьМассивСтрокСпискаПоНаименованию(мСписокРеквизитовПоиска, Текст);
	
	КоличествоЭлементовВмассивеПоиска =  МассивСтрок.Количество();
	
	Если КоличествоЭлементовВмассивеПоиска = 1 Тогда
		
		ВыбратьЕдинственноеЗначениеИзСпискаДляРеквизита(Элемент, МассивСтрок);
		
	ИначеЕсли КоличествоЭлементовВмассивеПоиска > 10 Тогда
		
		Предупреждение("Найдено более 10-ти реквизитов, удовлетворяющих условиям выбора.
					   |Задайте более длинную строку или воспользуйтесь командой выбора (F4).");
		
	Иначе
					   
		Если КоличествоЭлементовВмассивеПоиска = 0 Тогда
			
			ВыбранныйЭлемент = Неопределено;
			
		Иначе
			
			СписокВыбора = Новый СписокЗначений;
			Для Каждого Эл Из МассивСтрок Цикл
				
				СписокВыбора.Добавить(Эл.Значение, Эл.Представление);	
				
			КонецЦикла;
			
			ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
			
		КонецЕсли; 
		
		СтандОбработка = Истина;
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			
			Предупреждение("В элемент управления введены некорректные данные.");
			
			Если мРеквизитПоиска = Неопределено Тогда
				
				РеквизитДляПоискаОчистка(Элемент, СтандОбработка);
				
			Иначе
				
				ВыбранноеЗначение = Новый Структура();
				ВыбранноеЗначение.Вставить("Представление", мСписокРеквизитовПоиска.НайтиПоЗначению(мРеквизитПоиска).Представление);
				ВыбранноеЗначение.Вставить("Значение", мРеквизитПоиска);
				
				РеквизитДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандОбработка);
				
			КонецЕсли;
			
		Иначе
			
			ВыбранноеЗначение = Новый Структура();
			ВыбранноеЗначение.Вставить("Представление", ВыбранныйЭлемент.Представление);
			ВыбранноеЗначение.Вставить("Значение", ВыбранныйЭлемент.Значение);
			СтандОбработка = Истина;
				
			РеквизитДляПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандОбработка);					
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура НайтиДублиНажатие(Элемент)
	
	ВыполнитьПоискДублейИОтобразитьРезультат();
	
	ЭлементыФормы.КоманднаяПанельРезультатыПоискаГруппы.Кнопки.ПоискЗависимых.Доступность = Ложь;

КонецПроцедуры

Процедура КоманднаяПанель1ВернутьсяКНастройкамПоиска(Кнопка)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Настройка;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыВыполнитьЗамену(Кнопка)
	
	РезультатПерехода = ВыполнитьПереходСоСтраницыРезультаты();
		
	Если РезультатПерехода Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьНажатие(Элемент)
	
	РезультатПерехода = ВыполнитьПереходСоСтраницыНайденныеСсылки();
	
КонецПроцедуры

Процедура ВернутьсяНазадНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результаты;
	
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьЗаголовокПанели();
	
КонецПроцедуры



мСписокРеквизитовПоиска = Новый СписокЗначений;
мОсновнаяПанельФормы = ЭлементыФормы.Панель;

КартинкиСтрокНайденныхОбъектов = Новый Картинка(ЭлементыФормы.НайденныеОбъекты.Колонки.Ссылка.КартинкиСтрок.ПолучитьДвоичныеданные(), Истина);

мСписокВсехСправочников = Новый СписокЗначений;
Для Каждого Справочник Из Метаданные.Справочники Цикл
	СтрокаОтбора = мСписокВсехСправочников.Добавить(Справочник.Имя, Справочник.Синоним);	
КонецЦикла;
