
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем текФамилия;
Перем текИмя;
Перем текОтчество;
Перем мФормироватьНаименованиеПолноеАвтоматически;

// Обработка поиска по строке для Города
Перем мГородОбработкаПоискаПоСтроке;
Перем мГородТекстПоискаПоСтроке;
Перем мГородПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Улицы
Перем мУлицаОбработкаПоискаПоСтроке;
Перем мУлицаТекстПоискаПоСтроке;
Перем мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет номера позиций пробелов в строке реквизита ФИОКонтактногоЛица
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Массив, числа - позиции пробелов в строке
//
Функция ОпределитьПозицииПробелов()

	Пробелы = Новый Массив;

	Для а = 1 По 2 Цикл
	
		Пробелы.Добавить(0);
	
	КонецЦикла; 
	
	КолПробелов = 0;
	
	Для а = 1 По СтрДлина(Запись.ФИОКонтактногоЛица) Цикл
	
		Если Сред(Запись.ФИОКонтактногоЛица, а, 1) = " " Тогда

			Пробелы[КолПробелов] = а;
			КолПробелов = КолПробелов + 1;
		
		КонецЕсли; 

		Если КолПробелов = 2 Тогда
		
			Прервать;
		
		КонецЕсли; 
		
	КонецЦикла; 

	Возврат Пробелы;
	
КонецФункции

// Функция выполняет все действия по регистрации данных и возвращает форму созданного контрагента
// 
//
Функция Зарегистрировать(Кнопка)
	
	Если ПустаяСтрока(Запись.ФИОКонтактногоЛица) Тогда
		ТекстВопроса = "Зарегистрировать контрагента?";
		РегистрироватьКонтЛицо = Ложь;
	Иначе
		ТекстВопроса = "Зарегистрировать контрагента и контактное лицо?";
		РегистрироватьКонтЛицо = Истина;
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Родитель = Справочники.Контрагенты.ПустаяСсылка() И (НЕ СписокСправочника) Тогда
		ФормаВыбораГруппы = Справочники.Контрагенты.ПолучитьФормуВыбораГруппы(, ЭтаФорма);
		ФормаВыбораГруппы.Заголовок = "Выберите группу для контрагента";
		ВыбГруппаКонтрагентов = ФормаВыбораГруппы.ОткрытьМодально();
		Если ВыбГруппаКонтрагентов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		ВыбГруппаКонтрагентов = Родитель;
	КонецЕсли; 
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Родитель                   = ВыбГруппаКонтрагентов;
	НовыйКонтрагент.Наименование               = Запись.НаименованиеКонтрагента;
	НовыйКонтрагент.НаименованиеПолное         = Запись.НаименованиеКонтрагентаПолное;
	НовыйКонтрагент.ДополнительноеОписание     = Запись.ДополнительноеОписание;
	НовыйКонтрагент.ЮрФизЛицо                  = Запись.ЮрФизЛицо;
	НовыйКонтрагент.Покупатель                 = Запись.Покупатель;
	НовыйКонтрагент.Поставщик                  = Запись.Поставщик;
	НовыйКонтрагент.ИНН                        = Запись.ИНН;
	НовыйКонтрагент.КПП                        = Запись.КПП;
	НовыйКонтрагент.ОКОПФ                      = Запись.ОКОПФ;
	НовыйКонтрагент.ОбособленноеПодразделение  = Запись.ОбособленноеПодразделение;
   	НовыйКонтрагент.ГоловнойКонтрагент         = Запись.ГоловнойКонтрагент;
	
	Если ЗначениеЗаполнено(Запись.ОсновнойВидДеятельностиКонтрагента) Тогда
		НовыйКонтрагент.ОсновнойВидДеятельности = Запись.ОсновнойВидДеятельностиКонтрагента;
		НоваяСтрокаТЧ = НовыйКонтрагент.ВидыДеятельности.Добавить();
		НоваяСтрокаТЧ.ВидДеятельности = Запись.ОсновнойВидДеятельностиКонтрагента;
	КонецЕсли; 
	
	НовыйКонтрагент.ОсновнойМенеджерПокупателя = глЗначениеПеременной("глТекущийПользователь");
	НоваяСтрокаТЧ = НовыйКонтрагент.МенеджерыПокупателя.Добавить();
	НоваяСтрокаТЧ.МенеджерПокупателя = глЗначениеПеременной("глТекущийПользователь");
	
	НачатьТранзакцию();
	
	ФиксироватьТранзакцию = Истина;
	
	НовыйКонтрагент.УстановитьНовыйКод();
	ФормаКонтрагента = НовыйКонтрагент.ПолучитьФорму(, ВладелецФормы);
	ФормаКонтрагента.НаборКонтактнойИнформации.Отбор.Объект.Установить(НовыйКонтрагент.Ссылка);
	
	// Контактная инфомация контрагента
	// Телефон контрагента
	Если ЗначениеЗаполнено(Запись.ВидТелефонаКонтрагента) И НЕ ПустаяСтрока(Запись.НомерТелефонаКонтрагента) Тогда
		
		НоваяЗапись = ФормаКонтрагента.НаборКонтактнойИнформации.Добавить();
		
		НоваяЗапись.Вид    = Запись.ВидТелефонаКонтрагента;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		
		НоваяЗапись.Поле3  = Запись.НомерТелефонаКонтрагента;
		НоваяЗапись.Поле4  = Запись.ДобавочныйНомерТелефонаКонтрагента;
		НоваяЗапись.Поле2  = Запись.КодГородаТелефонаКонтрагента;
		
		УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(НоваяЗапись);
		
	КонецЕсли; 
	
	// Адрес контрагента
	Если ЗначениеЗаполнено(Запись.ВидАдресаКонтрагента) И НЕ ПустаяСтрока(Запись.ГородКонтрагента + Запись.УлицаКонтрагента + Запись.ДомКонтрагента + Запись.КорпусКонтрагента) Тогда
		
		НоваяЗапись = ФормаКонтрагента.НаборКонтактнойИнформации.Добавить();
		
		НоваяЗапись.Вид    = Запись.ВидАдресаКонтрагента;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		
		Если ВРег(Запись.ГородКонтрагента) = "МОСКВА" ИЛИ ВРег(Запись.ГородКонтрагента) = "САНКТ-ПЕТЕРБУРГ" Тогда
			НоваяЗапись.Поле2 = Запись.ГородКонтрагента;
		Иначе
			НоваяЗапись.Поле4 = Запись.ГородКонтрагента;
		КонецЕсли; 
		
		НоваяЗапись.Поле6 = Запись.УлицаКонтрагента;
		НоваяЗапись.Поле7 = Запись.ДомКонтрагента;
		НоваяЗапись.Поле8 = Запись.КорпусКонтрагента;
		
		НоваяЗапись.Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(НоваяЗапись);
	
	КонецЕсли; 
	
	// Адрес электронной почты контрагента
	Если ЗначениеЗаполнено(Запись.ВидЭлектроннойПочтыКонтрагента) И НЕ ПустаяСтрока(Запись.АдресЭлектроннойПочтыКонтрагента) Тогда
		
		НоваяЗапись = ФормаКонтрагента.НаборКонтактнойИнформации.Добавить();
		
		НоваяЗапись.Вид    = Запись.ВидЭлектроннойПочтыКонтрагента;
		НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НоваяЗапись.Объект = НовыйКонтрагент.Ссылка;
		
		НоваяЗапись.Представление = Запись.АдресЭлектроннойПочтыКонтрагента;
	
	КонецЕсли;
	
	Попытка
		ФормаКонтрагента.ЗаписатьВФорме();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать контрагента: " + ОписаниеОшибки());
		ФиксироватьТранзакцию = Ложь;
	КонецПопытки;
	
	// если не записали ничего - значит проблемы аозникли
	Если ФормаКонтрагента.Модифицированность Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать контрагента.");
		ФиксироватьТранзакцию = Ложь;	
	КонецЕсли;
	
	Если ФиксироватьТранзакцию И РегистрироватьКонтЛицо Тогда
		
		// контактное лицо
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Наименование        = Запись.ФИОКонтактногоЛица;
		НовоеКонтактноеЛицо.Фамилия             = Запись.ФамилияКонтактногоЛица;
		НовоеКонтактноеЛицо.Имя                 = Запись.ИмяКонтактногоЛица;
		НовоеКонтактноеЛицо.Отчество            = Запись.ОтчествоКонтактногоЛица;
		
		Попытка
			НовоеКонтактноеЛицо.УстановитьНовыйКод();
			НовоеКонтактноеЛицо.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
		
		// контактное лицо контрагента 
		КонтатноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		КонтатноеЛицоКонтрагента.Владелец = НовыйКонтрагент.Ссылка;
		КонтатноеЛицоКонтрагента.Наименование = НовоеКонтактноеЛицо.Ссылка;
		КонтатноеЛицоКонтрагента.КонтактноеЛицо = НовоеКонтактноеЛицо.Ссылка;
		КонтатноеЛицоКонтрагента.Должность = Запись.ДолжностьКонтактногоЛица;
		
		Попытка
			КонтатноеЛицоКонтрагента.УстановитьНовыйКод();
			КонтатноеЛицоКонтрагента.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Если ФиксироватьТранзакцию И РегистрироватьКонтЛицо Тогда
	
		НаборКонтактнойИнформации = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		
		// Телефон контактного лица
		Если ЗначениеЗаполнено(Запись.ВидТелефонаКонтактногоЛица) И НЕ ПустаяСтрока(Запись.НомерТелефонаКонтактногоЛица) Тогда
			
			НоваяЗапись = НаборКонтактнойИнформации.Добавить();
			
			НоваяЗапись.Вид    = Запись.ВидТелефонаКонтактногоЛица;
			НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяЗапись.Объект = КонтатноеЛицоКонтрагента.Ссылка;
			
			НоваяЗапись.Поле3  = Запись.НомерТелефонаКонтактногоЛица;
			НоваяЗапись.Поле4  = Запись.ДобавочныйНомерТелефонаКонтактногоЛица;
			НоваяЗапись.Поле2  = Запись.КодГородаТелефонаКонтактногоЛица;
			
			УправлениеКонтактнойИнформацией.СформироватьПредставлениеТелефона(НоваяЗапись);
			
		КонецЕсли; 
		
		// Адрес электронной почты контактного лица
		Если ЗначениеЗаполнено(Запись.ВидЭлектроннойПочтыКонтактногоЛица) И НЕ ПустаяСтрока(Запись.АдресЭлектроннойПочтыКонтактногоЛица) Тогда
			
			НоваяЗапись = НаборКонтактнойИнформации.Добавить();
			
			НоваяЗапись.Вид    = Запись.ВидЭлектроннойПочтыКонтактногоЛица;
			НоваяЗапись.Тип    = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяЗапись.Объект = КонтатноеЛицоКонтрагента.Ссылка;
			
			НоваяЗапись.Представление = Запись.АдресЭлектроннойПочтыКонтактногоЛица;
		
		КонецЕсли;
		
		Попытка
			НаборКонтактнойИнформации.Записать(Ложь);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
			ФиксироватьТранзакцию = Ложь;
		КонецПопытки;
		
	КонецЕсли; 
	
	Если ФиксироватьТранзакцию И (ЭтаФорма.ВладелецФормы <> Неопределено) И (НЕ СписокСправочника) Тогда
		ЭтаФорма.ВладелецФормы.Контрагент = НовыйКонтрагент.Ссылка;
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы.ЭтотОбъект) = Тип("ДокументОбъект.Событие") Тогда
			Если РегистрироватьКонтЛицо Тогда
				ЭтаФорма.ВладелецФормы.КонтактноеЛицо = КонтатноеЛицоКонтрагента.Ссылка;
			Иначе
				ЭтаФорма.ВладелецФормы.КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли ТипЗнч(ЭтаФорма.ВладелецФормы.ЭтотОбъект) <> Тип("ОбработкаОбъект.РабочееМестоМенеджераПоПродажам") Тогда
			Если РегистрироватьКонтЛицо Тогда
				ЭтаФорма.ВладелецФормы.КонтактноеЛицоКонтрагента = КонтатноеЛицоКонтрагента.Ссылка;
			Иначе
				ЭтаФорма.ВладелецФормы.КонтактноеЛицоКонтрагента = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		// у документа может еще и договор существовать
		ДокументОбъект = ЭтаФорма.ВладелецФормы.ЭтотОбъект;
		Если НовыйКонтрагент <> Неопределено Тогда
			ДоговорКонтрагента = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(НовыйКонтрагент.Ссылка);
		Иначе
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
		МетаданныеДокумента = ДокументОбъект.Метаданные();
		
		// договор контрагента подтягиваем
		Если МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		
			Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
					ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
					ДокументОбъект.Организация           = ДоговорКонтрагента.Организация;
				Иначе
					ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
				КонецЕсли;
			Иначе
				ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
			КонецЕсли;
			
			Попытка
				// договор контрагента делаем доступным
				ЭтаФорма.ВладелецФормы.ЭлементыФормы.ДоговорКонтрагента.Доступность = Истина;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы.ЭтотОбъект) = Тип("ДокументОбъект.Событие") Тогда
			ЭтаФорма.ВладелецФормы.СтруктураОбъектКонтрагент = Новый Структура("Объект, ЗаписыватьОбъект", НовыйКонтрагент, Истина);
		КонецЕсли; 
		
		Если ТипЗнч(ЭтаФорма.ВладелецФормы.ЭтотОбъект) <> Тип("ОбработкаОбъект.РабочееМестоМенеджераПоПродажам") Тогда
			
			Попытка
				ЭтаФорма.ВладелецФормы.ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать текущий документ """ + Строка(ЭтаФорма.ВладелецФормы.ЭтотОбъект) + """");
				ФиксироватьТранзакцию = Ложь;
			КонецПопытки;
		
			// если не записали ничего - значит проблемы возникли
			Если ФиксироватьТранзакцию И ЭтаФорма.ВладелецФормы.Модифицированность Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать текущий документ """ + Строка(ЭтаФорма.ВладелецФормы.ЭтотОбъект) + """");
				ФиксироватьТранзакцию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФиксироватьТранзакцию Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецЕсли;
	
	// надо что бы форма очень тихо закрылась без лишних вопросов
	ЭтаФорма.Модифицированность = Ложь;
	ЭтаФорма.Закрыть(Ложь);
	
	Если СписокСправочника
		И ВладелецФормы <> Неопределено Тогда
		ОповеститьОЗаписиНовогоОбъекта(ВладелецФормы);
	КонецЕсли;
	
	Если ФиксироватьТранзакцию Тогда
		ФормаКонтрагента.Обновить();
		Возврат ФормаКонтрагента;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает полное наименование контрагента как ОКОПФ и Наименование
//
Функция ПолучитьПолноеНаименованиеСОКОПФ()
	
	Если Лев(Запись.НаименованиеКонтрагента, 1) = """" Тогда
		КавычкаОткрывающая = "";
	Иначе
		КавычкаОткрывающая = """";
	КонецЕсли;
	
	Если Прав(Запись.НаименованиеКонтрагента, 1) = """" Тогда
		КавычкаЗакрывающая = "";
	Иначе
		КавычкаЗакрывающая = """";
	КонецЕсли;
	
	Возврат СокрЛП(Запись.ОКОПФ) + " " + КавычкаОткрывающая + Запись.НаименованиеКонтрагента + КавычкаЗакрывающая;
	
КонецФункции

// Процедура заполняет поля данными из сохраненного в настройках шаблона
//
Процедура ЗаполнитьНачальныеДанные(НаборКонстант = Неопределено) Экспорт
	
	СписокИменКонстант = "ВидАдресаКонтрагента, ВидТелефонаКонтактногоЛица, ВидТелефонаКонтрагента,
		|ВидЭлектроннойПочтыКонтактногоЛица, ВидЭлектроннойПочтыКонтрагента, ОсновнойВидДеятельностиКонтрагента,  
			|ЮрФизЛицо, ЗначенияПоУмолчаниюДляНовогоКонтрагента";
	
	Если НаборКонстант = Неопределено Тогда
		Набор = Константы.СоздатьНабор(СписокИменКонстант);
		Набор.Прочитать();
	Иначе
		Набор = НаборКонстант;
	КонецЕсли;
	
	Запись.ВидАдресаКонтрагента               = Набор.ВидАдресаКонтрагента;
	Запись.ВидТелефонаКонтактногоЛица         = Набор.ВидТелефонаКонтактногоЛица;
	Запись.ВидТелефонаКонтрагента             = Набор.ВидТелефонаКонтрагента;
	Запись.ВидЭлектроннойПочтыКонтактногоЛица = Набор.ВидЭлектроннойПочтыКонтактногоЛица;
	Запись.ВидЭлектроннойПочтыКонтрагента     = Набор.ВидЭлектроннойПочтыКонтрагента;
	Запись.ОсновнойВидДеятельностиКонтрагента = Набор.ОсновнойВидДеятельностиКонтрагента;
	Запись.ЮрФизЛицо                          = Набор.ЮрФизЛицо;
	Если Не ЗначениеЗаполнено(Запись.ЮрФизЛицо) Тогда
		Запись.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	КонецЕсли;

	ХранилищеПрочихЗначений = Набор.ЗначенияПоУмолчаниюДляНовогоКонтрагента;
	Если ТипЗнч(ХранилищеПрочихЗначений) = Тип("ХранилищеЗначения") Тогда
		СтруктураПрочихЗначений = ХранилищеПрочихЗначений.Получить();
		Если ТипЗнч(СтруктураПрочихЗначений) = Тип("Структура") Тогда
			Для каждого ЭлементСтруктуры Из СтруктураПрочихЗначений Цикл
				Запись[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // ЗаполнитьНачальныеДанные()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()
	
	Если НЕ ЗначениеЗаполнено(Запись.НаименованиеКонтрагентаПолное) 
		ИЛИ Запись.НаименованиеКонтрагентаПолное = Запись.НаименованиеКонтрагента
		ИЛИ Запись.НаименованиеКонтрагентаПолное <> ПолучитьПолноеНаименованиеСОКОПФ() Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура формирует полное наименование автоматически
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()
	
	Если НЕ ЗначениеЗаполнено(Запись.ОКОПФ) Тогда
		Запись.НаименованиеКонтрагентаПолное = Запись.НаименованиеКонтрагента;
	Иначе
		Запись.НаименованиеКонтрагентаПолное = ПолучитьПолноеНаименованиеСОКОПФ();
	КонецЕсли;
	
КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Процедура устанавливает видимость элементов формы
//
Процедура УстановитьВидимость()

	ЭлементыФормы.КПП.Видимость = НЕ Запись.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	ЭлементыФормы.НадписьКПП.Видимость = НЕ Запись.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	ЭлементыФормы.КнопкаГенарацииКПП.Видимость = НЕ Запись.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ Запись.ОбособленноеПодразделение;
	ЭлементыФормы.ИНН.ТолькоПросмотр = Запись.ОбособленноеПодразделение;
	
	Если Запись.ОбособленноеПодразделение Тогда
		ЭлементыФормы.ПанельГоловнойКонтрагент.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельГоловнойКонтрагент.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	// Копируем запись
	КопияЗаписи.ОбъектРегистратор = Запись.ОбъектРегистратор;
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
		КопияЗаписи[Реквизит.Имя] = Запись[Реквизит.Имя];
	КонецЦикла; 
	
	Если Запись.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидКонтрагента	= "ФизическоеЛицо";
	ИначеЕсли Запись.ОбособленноеПодразделение Тогда
		ВидКонтрагента	= "ОбособленноеПодразделение";
	Иначе
		ВидКонтрагента	= "ЮридическоеЛицо";
	КонецЕсли;
	
	Если ВозможностьРегистрации Тогда
		
		ПоказРазвернутойПанели = (НЕ СписокСправочника) И (ВладелецФормы <> Неопределено);
		
		ЭлементыФормы.ОсновныеДействияФормы.Видимость = ПоказРазвернутойПанели;
		ЭлементыФормы.ОсновныеДействияФормы2.Видимость = НЕ ПоказРазвернутойПанели;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Зарегистрировать.КнопкаПоУмолчанию = ПоказРазвернутойПанели;
		ЭлементыФормы.ОсновныеДействияФормы2.Кнопки.Зарегистрировать.КнопкаПоУмолчанию = НЕ ПоказРазвернутойПанели;
		
		ПравоДоступа = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Зарегистрировать.Доступность = ПравоДоступа;
		ЭлементыФормы.ОсновныеДействияФормы2.Кнопки.Зарегистрировать.Доступность = ПравоДоступа;
		
	Иначе
		
		ЭлементыФормы.НаименованиеКонтрагента.Доступность       = Ложь;
		ЭлементыФормы.НаименованиеКонтрагентаПолное.Доступность = Ложь;
		ЭлементыФормы.ФИОКонтактногоЛица.Доступность            = Ложь;
		
		ЭлементыФормы.ОсновныеДействияФормы.Видимость = Истина;
		ЭлементыФормы.ОсновныеДействияФормы2.Видимость = Ложь;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действие.КнопкаПоУмолчанию = Истина;
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Зарегистрировать);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РазделительЗарегистрировать);
		
	КонецЕсли;
	
	Если Запись.НаименованиеКонтрагентаПолное = Запись.НаименованиеКонтрагента Тогда
		СформироватьНаименованиеПолноеАвтоматически();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Обработчик события формы ПередЗакрытием.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		Если Модифицированность Тогда
			ОтветНаВопрос = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				// Восстанавливаем из копии
				Запись.ОбъектРегистратор = КопияЗаписи.ОбъектРегистратор;
				Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
					Запись[Реквизит.Имя] = КопияЗаписи[Реквизит.Имя];
				КонецЦикла; 
			ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии на кнопку ОК командной панели ОсновныеДействияФормы.
// 
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку Зарегистрировать командной панели ОсновныеДействияФормы.
// 
//
Процедура ОсновныеДействияФормыЗарегистрировать(Кнопка)
	
	Зарегистрировать(Кнопка);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку Зарегистрировать командной панели ОсновныеДействияФормы.
// 
//
Процедура ОсновныеДействияФормы2Зарегистрировать(Кнопка)
	
	Зарегистрировать(Кнопка);
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку Зарегистрировать командной панели ОсновныеДействияФормы2.
// 
//
Процедура ОсновныеДействияФормы2ЗарегистрироватьИОткрыть(Кнопка)
	
	ФормаКонтрагента = Зарегистрировать(Кнопка);
	Если ТипЗнч(ФормаКонтрагента) = Тип("Форма") Тогда
		ФормаКонтрагента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоВыбора элемента формы ВидТелефонаКонтрагента.
//
Процедура ВидТелефонаКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидАдресаКонтрагента.
//
Процедура ВидАдресаКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидЭлектроннойПочтыКонтрагента.
//
Процедура ВидЭлектроннойПочтыКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидТелефонаКонтактногоЛица.
//
Процедура ВидТелефонаКонтактногоЛицаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.Телефон, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ВидЭлектроннойПочтыКонтактногоЛица.
//
Процедура ВидЭлектроннойПочтыКонтактногоЛицаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛицаКонтрагентов);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НомерТелефонаКонтрагента.
//
Процедура НомерТелефонаКонтрагентаПриИзменении(Элемент)
	
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НомерТелефонаКонтактногоЛица.
//
Процедура НомерТелефонаКонтактногоЛицаПриИзменении(Элемент)
	
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ДобавочныйНомерТелефонаКонтрагента.
//
Процедура ДобавочныйНомерТелефонаКонтрагентаПриИзменении(Элемент)
	
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ДобавочныйНомерТелефонаКонтактногоЛица.
//
Процедура ДобавочныйНомерТелефонаКонтактногоЛицаПриИзменении(Элемент)
	
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПривестиНомерТелефонаКШаблону(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ФамилияКонтактногоЛица.
//
Процедура ФамилияКонтактногоЛицаПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 Тогда
	
		ФамилияИзНаименования = Сред(Запись.ФИОКонтактногоЛица, 1, (ПозицииПробелов[0] - 1));
		
		Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда
		
			текФамилия = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли;

		Запись.ФИОКонтактногоЛица = СокрЛП(Элемент.Значение) + Сред(Запись.ФИОКонтактногоЛица, ПозицииПробелов[0]);

	Иначе

		Если ПустаяСтрока(Запись.ФИОКонтактногоЛица) Тогда
			
			Запись.ФИОКонтактногоЛица = СокрЛП(Элемент.Значение);

		Иначе

			Если СокрЛП(Запись.ФИОКонтактногоЛица) = текФамилия Тогда
			
				Запись.ФИОКонтактногоЛица = СокрЛП(Элемент.Значение);
			
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	текФамилия = СокрЛП(Элемент.Значение);

КонецПроцедуры

// Обработчик события ПриИзменении элемента ИмяКонтактногоЛица.
//
Процедура ИмяКонтактногоЛицаПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 И ПозицииПробелов[1] > 0 Тогда
	
		ИмяИзНаименования = Сред(Запись.ФИОКонтактногоЛица, (ПозицииПробелов[0] + 1), (ПозицииПробелов[1] - ПозицииПробелов[0] - 1));
		
		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда
		
			текИмя = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли;

		Запись.ФИОКонтактногоЛица = Сред(Запись.ФИОКонтактногоЛица, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение) + Сред(Запись.ФИОКонтактногоЛица, ПозицииПробелов[1]);

	ИначеЕсли ПозицииПробелов[0] > 0 Тогда

		ИмяИзНаименования = Сред(Запись.ФИОКонтактногоЛица, (ПозицииПробелов[0] + 1));

		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда
		
			текИмя = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли; 

		Запись.ФИОКонтактногоЛица = Сред(Запись.ФИОКонтактногоЛица, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение);

	Иначе

		Если НЕ ПустаяСтрока(Запись.ФИОКонтактногоЛица) Тогда
		
			Запись.ФИОКонтактногоЛица = Запись.ФИОКонтактногоЛица + " " + СокрЛП(Элемент.Значение);

		Иначе

			Запись.ФИОКонтактногоЛица = " " + СокрЛП(Элемент.Значение);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	текИмя = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ОтчествоКонтактногоЛица.
//
Процедура ОтчествоКонтактногоЛицаПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[1] > 0 Тогда
	
		ОтчествоИзНаименования = Сред(Запись.ФИОКонтактногоЛица, (ПозицииПробелов[1] + 1));
		
		Если ОтчествоИзНаименования <> текОтчество И НЕ ПустаяСтрока(ОтчествоИзНаименования) Тогда
		
			текОтчество = СокрЛП(Элемент.Значение);
			Возврат;
		
		КонецЕсли;

		Запись.ФИОКонтактногоЛица = Сред(Запись.ФИОКонтактногоЛица, 1, ПозицииПробелов[1]) + СокрЛП(Элемент.Значение);

	Иначе

		Если НЕ ПустаяСтрока(Запись.ФИОКонтактногоЛица) Тогда
		
			Запись.ФИОКонтактногоЛица = Запись.ФИОКонтактногоЛица + " " + СокрЛП(Элемент.Значение);

		Иначе

			Запись.ФИОКонтактногоЛица = "  " + СокрЛП(Элемент.Значение);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	текОтчество = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НаименованиеКонтрагента.
//
Процедура НаименованиеКонтрагентаПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		СформироватьНаименованиеПолноеАвтоматически();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОКОПФ.
//
Процедура ОКОПФПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		СформироватьНаименованиеПолноеАвтоматически();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ОКОПФ.
//
Процедура ОКОПФНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораОКОПФ = Новый СписокЗначений();
	
	ЗапросОКОПФ = Новый Запрос;
	
	ЗапросОКОПФ.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторОКОПФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОКОПФ КАК КлассификаторОКОПФ
	|
	|ГДЕ
	|	КлассификаторОКОПФ.ПометкаУдаления = ЛОЖЬ И
	|	КлассификаторОКОПФ.БыстрыйВыбор = ИСТИНА";
	
	Результат = ЗапросОКОПФ.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		СписокВыбораОКОПФ.Добавить(СтрокаРезультата.Ссылка);
	КонецЦикла;
	
	// Выбор из списка и обработка выбора.
	
	РезультатВыбора = ВыбратьИзСписка(СписокВыбораОКОПФ, Элемент);
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Запись.ОКОПФ = РезультатВыбора.Значение;
		СформироватьНаименованиеПолноеАвтоматически();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НаименованиеКонтрагентаПолное.
//
Процедура НаименованиеКонтрагентаПолноеПриИзменении(Элемент)
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры

// Обработчик нажатия кнопки "Записать" командной панели ОсновныеДействияФормы.
//
Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	Модифицированность = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода ЮрФизЛицо.
//
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если ВидКонтрагента = "ФизическоеЛицо" Тогда
		Запись.ЮрФизЛицо 						= Перечисления.ЮрФизЛицо.ФизЛицо;
		Запись.КПП								= "";
		Запись.ОбособленноеПодразделение		= Ложь;
		Запись.ГоловнойКонтрагент				= Неопределено;
	ИначеЕсли ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		Запись.ЮрФизЛицо						= Перечисления.ЮрФизЛицо.ЮрЛицо;
		Если ЗначениеЗаполнено(Запись.ГоловнойКонтрагент) Тогда
			Запись.ИНН							= Запись.ГоловнойКонтрагент.ИНН;
		КонецЕсли;
		Запись.ОбособленноеПодразделение		= Истина;
	Иначе
		Запись.ЮрФизЛицо						= Перечисления.ЮрФизЛицо.ЮрЛицо;
		Запись.ОбособленноеПодразделение		= Ложь;
		Запись.ГоловнойКонтрагент				= Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ГоловнойКонтрагент
// панели ПанельЮрФизЛицо
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.ГоловнойКонтрагент) И (Запись.ГоловнойКонтрагент.ОбособленноеПодразделение 
		ИЛИ Запись.ГоловнойКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Головной контрагент не может быть обособленным подразделением или физическим лицом");
		Запись.ГоловнойКонтрагент = Неопределено;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(Запись.ГоловнойКонтрагент) Тогда
		Запись.ИНН = Запись.ГоловнойКонтрагент.ИНН;
	Иначе
		Запись.ИНН = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура Обработчик события НачалоВыбора элемента формы ГоловнойКонтрагент
//
Процедура ГоловнойКонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.ЮрФизЛицо.Установить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	ФормаВыбора.Отбор.ОбособленноеПодразделение.Установить(Ложь);
	Если ЗначениеЗаполнено(Запись.ГоловнойКонтрагент) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Запись.ГоловнойКонтрагент;
	КонецЕсли; 
	ФормаВыбора.Открыть();
	
КонецПроцедуры  

// Процедура Обработчик нажатия на кнопку КнопкаГенарацииКПП
Процедура КнопкаГенарацииКППНажатие(Элемент)
	
	ОбщегоНазначения.ЗаполнитьКППпоИНН(Запись.ИНН, Запись.КПП);
	
КонецПроцедуры

// Процедура контолирует длину ИНН и выводит сообщение.
//
Процедура ПроверитьИНН()

	Если НЕ ЗначениеЗаполнено(Запись.ИНН) Тогда
		Возврат;
	КонецЕсли;

	ДлинаИНН       = СтрДлина(Запись.ИНН);
	ТекстСообщения = "";

	Если Запись.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ДлинаИНН = 12 Тогда
			ТекстСообщения = """ИНН"" физического лица 12 символов!";
		КонецЕсли;
	Иначе
		Если НЕ ДлинаИНН = 10 Тогда
			ТекстСообщения = """ИНН"" юридического лица 10 символов!";
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Длина ""ИНН"" не соответствует требованиям: " + ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Процедура Обработчик события "ПриИзменении" поля ввода ИНН
Процедура ИННПриИзменении(Элемент)
	
	ПроверитьИНН();
	Если Запись.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ОбщегоНазначения.ЗаполнитьКППпоИНН(Запись.ИНН, Запись.КПП, Ложь);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// АВТОПОДБОР ГОРОДА И УЛИЦЫ

Процедура ОбновитьАдресныеЭлементы(СтруктураЭлемента)
	
	// проверка заполнения города
	Если (СтруктураЭлемента.ТипАдресногоЭлемента > 3) И НЕ ЗначениеЗаполнено(Запись.ГородКонтрагента) Тогда
		
		Если СтруктураЭлемента.КодРегионаВКоде = 77 или СтруктураЭлемента.КодРегионаВКоде = 78 Тогда
			Запись.ГородКонтрагента = УправлениеКонтактнойИнформацией.ПолучитьИмяАдресногоЭлементаПоКоду(СтруктураЭлемента.Код - СтруктураЭлемента.Код%УправлениеКонтактнойИнформацией.МаскаРегиона(), 1);	
		Иначе
			Запись.ГородКонтрагента = УправлениеКонтактнойИнформацией.ПолучитьИмяАдресногоЭлементаПоКоду(СтруктураЭлемента.Код - СтруктураЭлемента.Код%УправлениеКонтактнойИнформацией.МаскаГорода(), 3);
		КонецЕсли;
		
	КонецЕсли;
	
	// проверка улицы по городу
	Если ((СтруктураЭлемента.ТипАдресногоЭлемента = 1) ИЛИ (СтруктураЭлемента.ТипАдресногоЭлемента = 3)) И ЗначениеЗаполнено(Запись.УлицаКонтрагента) Тогда
		
		ИмяГорода = СтруктураЭлемента.Наименование;
        Если СтруктураЭлемента.ТипАдресногоЭлемента = 1 Тогда
			СтруктураОграничений = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруОграниченийПоАдресу(ИмяГорода, "", "", "", Запись.УлицаКонтрагента, 5);	
		Иначе
			СтруктураОграничений = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруОграниченийПоАдресу("", "", ИмяГорода, "", Запись.УлицаКонтрагента, 5);	
		КонецЕсли;
		
		КодЭлемента = Неопределено;
		СтруктураОграничений.Свойство("КодУлицыВКоде", КодЭлемента);
		Если (КодЭлемента = Неопределено) ИЛИ (КодЭлемента = -1)	Тогда
			Запись.УлицаКонтрагента = "";	
		КонецЕсли;
	КонецЕсли;

	мГородПоследнееЗначениеЭлементаПоискаПоСтроке = Запись.ГородКонтрагента;
	мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке = Запись.УлицаКонтрагента;
	
КонецПроцедуры

Процедура ГородКонтрагентаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	
	СтруктураЭлемента = Неопределено;
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементОкончаниеВводаТекстаГорода(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, 
													мГородПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента);
													
	Если СтруктураЭлемента.Количество() > 0 Тогда											  
		Значение = Значение + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		ОбновитьАдресныеЭлементы(СтруктураЭлемента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГородКонтрагентаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтруктураЭлемента = Неопределено;
	СтруктураЭлемента = УправлениеКонтактнойИнформацией.АвтоПодборТекстаВЭлементеУправленияПоГороду(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	Если ЗначениеЗаполнено(ТекстАвтоПодбора) Тогда											  
		ТекстАвтоПодбора = ТекстАвтоПодбора + " " + СокрЛП(СтруктураЭлемента.Сокращение); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ГородКонтрагентаПриИзменении(Элемент)
	
	мГородПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение; 
	
КонецПроцедуры

Процедура УлицаКонтрагентаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)     
	
	
	СтруктураЭлемента = Неопределено;
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементОкончаниеВводаТекстаУлицы(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка, Запись.ГородКонтрагента,
													мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке, 
													мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке, СтруктураЭлемента);
													
	Если СтруктураЭлемента.Количество() > 0 Тогда											  
		Значение = Значение + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		ОбновитьАдресныеЭлементы(СтруктураЭлемента);
	КонецЕсли;
													
КонецПроцедуры

Процедура УлицаКонтрагентаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтруктураЭлемента = Неопределено;
	СтруктураЭлемента = УправлениеКонтактнойИнформацией.АвтоПодборТекстаВЭлементеУправленияПоУлице(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Запись.ГородКонтрагента);
	Если ЗначениеЗаполнено(ТекстАвтоПодбора) Тогда											  
		ТекстАвтоПодбора = ТекстАвтоПодбора + " " + СокрЛП(СтруктураЭлемента.Сокращение); 
	КонецЕсли;
	
КонецПроцедуры

Процедура УлицаКонтрагентаПриИзменении(Элемент)
	
	мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение; 
	
КонецПроцедуры

Процедура УлицаКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Запись.ГородКонтрагента) Тогда
		// в адресном классификаторе столько улиц, что только их загрузка занимает 10 минут
		Предупреждение("Не выбран город!");
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	
	ФормаВыбора.УстановитьРодителя(СокрЛП(Запись.ГородКонтрагента), СокрЛП(Запись.ГородКонтрагента), СокрЛП(Запись.ГородКонтрагента), СокрЛП(Запись.ГородКонтрагента));
	ФормаВыбора.ОтобратьТолькоУлицы(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Запись.УлицаКонтрагента));
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура УлицаКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	
КонецПроцедуры

ВозможностьРегистрации = Истина;
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мУлицаОбработкаПоискаПоСтроке, мУлицаТекстПоискаПоСтроке, мУлицаПоследнееЗначениеЭлементаПоискаПоСтроке);

СписокВыбораВида = Новый СписокЗначений;
СписокВыбораВида.Добавить("ЮридическоеЛицо", 			Строка(Перечисления.ЮрФизЛицо.ЮрЛицо));
СписокВыбораВида.Добавить("ФизическоеЛицо", 			Строка(Перечисления.ЮрФизЛицо.ФизЛицо));
СписокВыбораВида.Добавить("ОбособленноеПодразделение", 	"Обособленное подразделение");
ЭлементыФормы.ВидКонтрагента.СписокВыбора = СписокВыбораВида;
