////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПЕРЕМЕННЫЕ

Перем мПараметрыСвязиСтрокТЧ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мИмяТЧ;
Перем мТовары;
Перем мСоставНабора;
Перем мСерийныеНомера;
Перем мСерийныеНомераСоставНабора;
Перем мДокументОбъект;
Перем мИспользоватьСерии;
Перем мИспользоватьХарактеристики;
Перем мЦветОсталосьПлюс;
Перем мЦветОсталосьМинус;
Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура осуществляет заполнение ТП "Товары"
//
// Параметры
//  ДокументОбъект – <ДокументОбъект.РеализацияТоваровУслуг>
//                 - проверяемый документ
//
//  ИмяТЧ          - <Строка>
//                 - Имя проверяемой табличной части
//
Процедура ЗаполнитьТаблицу(ДокументОбъект, ИмяТЧ = "Товары") Экспорт

	Перем Товар;
	Перем ТоварыНабора;
	Перем ТоварНабора;
	Перем Позиция;
	Перем Количество;
	Перем СтруктураПоиска;
	Перем ВестиСерийныеНомера;

	МетаданныеДокумента        = ДокументОбъект.Метаданные();
	мИмяТЧ                      = ИмяТЧ;
	мТовары                     = ДокументОбъект[мИмяТЧ];
	мСоставНабора               = ?(МетаданныеДокумента.ТабличныеЧасти.Найти("СоставНабора") = Неопределено,
	                                Неопределено,
	                                ДокументОбъект.СоставНабора);
	мСерийныеНомера             = ?(МетаданныеДокумента.ТабличныеЧасти.Найти("СерийныеНомера") = Неопределено,
	                                Неопределено,
	                                ДокументОбъект.СерийныеНомера);
	мСерийныеНомераСоставНабора = ?(МетаданныеДокумента.ТабличныеЧасти.Найти("СерийныеНомераСоставНабора") = Неопределено,
	                                Неопределено,
	                                ДокументОбъект.СерийныеНомераСоставНабора);
	мДокументОбъект             = ДокументОбъект;

	Для Каждого Товар Из мТовары Цикл
		Количество = Товар.Количество;
		Если Количество > 0 Тогда
			Если Товар.Номенклатура.Комплект Тогда
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("КлючСтроки", Товар.КлючСтроки);
				СтрокиКомплекта = мСоставНабора.НайтиСтроки(СтруктураПоиска);
				Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
					Количество                        = СтрокаКомплекта.Количество * Товар.Количество;
					СтруктураПоиска                   = Новый Структура();
					СтруктураПоиска.Вставить("КлючСвязи", СтрокаКомплекта.КлючСвязи);
					Позиция                           = Товары.Добавить();
					Позиция.Номенклатура              = СтрокаКомплекта.Номенклатура;
					Позиция.ЕдиницаИзмерения          = СтрокаКомплекта.ЕдиницаИзмерения;
					Позиция.Артикул                   = Позиция.Номенклатура.Артикул;
					Позиция.Код                       = Позиция.Номенклатура.Код;
					Позиция.СерияНоменклатуры                     = СтрокаКомплекта.СерияНоменклатуры;
					Позиция.Качество                  = ?(НЕ ЗначениеЗаполнено(СтрокаКомплекта.Качество),
					                                      Справочники.Качество.Новый,
					                                      СтрокаКомплекта.Качество);
					Позиция.ХарактеристикаНоменклатуры            = СтрокаКомплекта.ХарактеристикаНоменклатуры;
					Позиция.Считано                   = 0;
					Позиция.Осталось                  = Количество;
					Позиция.ЭлементНабора             = Истина;
					Позиция.КлючСвязи                 = СтрокаКомплекта.КлючСвязи;
					Позиция.НомерСтрокиИсточника      = СтрокаКомплекта.НомерСтроки;
				КонецЦикла;
			Иначе
				СтруктураПоиска                   = Новый Структура();
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КлючСвязи", МетаданныеДокумента, мИмяТЧ) Тогда
					СтруктураПоиска.Вставить("КлючСвязи", Товар.КлючСвязи);
				КонецЕсли;
				Позиция                           = Товары.Добавить();
				Позиция.Номенклатура              = Товар.Номенклатура;
				Позиция.ЕдиницаИзмерения          = Товар.ЕдиницаИзмерения;
				Позиция.Артикул                   = Позиция.Номенклатура.Артикул;
				Позиция.Код                       = Позиция.Номенклатура.Код;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", МетаданныеДокумента, мИмяТЧ) Тогда
					Позиция.СерияНоменклатуры                 = Товар.СерияНоменклатуры;
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", МетаданныеДокумента, мИмяТЧ) Тогда
					Позиция.Качество              = ?(НЕ ЗначениеЗаполнено(Товар.Качество),
					                                  Справочники.Качество.Новый,
					                                  Товар.Качество);
				Иначе
					Позиция.Качество              = Справочники.Качество.Новый;
				КонецЕсли;
				Позиция.ХарактеристикаНоменклатуры            = Товар.ХарактеристикаНоменклатуры;
				Позиция.Считано                   = 0;
				Позиция.Осталось                  = Количество;
				Позиция.ЭлементНабора             = Ложь;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КлючСвязи", МетаданныеДокумента, мИмяТЧ) Тогда
					Позиция.КлючСвязи = Товар.КлючСвязи;
				КонецЕсли;
				Позиция.НомерСтрокиИсточника      = Товар.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура осуществляет добавление новой позиции в документ
//
// Параметры
//  Номенклатура     - <СправочникСсылка.Номенклатура>
//                   - Номенклатура, соответствующая добавляемой позиции
//
//  ЕдиницаИзмерения - <СправочникСсылка.ЕдиницыИзмерения>, <Неопределено>
//                   - Единица измерения номенклатуры
//
//  ХарактеристикаНоменклатуры   - <СправочникСсылка.ХарактеристикиНоменклатуры>, <Неопределено>
//                   - ХарактеристикаНоменклатуры, соответствующая заданной номенклатуре
//
//  СерияНоменклатуры            - <СправочникСсылка.СерииНоменклатуры>, <Неопределено>
//                   - СерияНоменклатуры, соответствующая заданной номенклатуре
//
//  Качество         - <СправочникСсылка.Качество>, <Неопределено>
//                   - Качество, соответствующее заданной номенклатуре
//
//  Количество       - <Число>, <Неопределено>
//                   - Количество, соответствующее заданной номенклатуре
//
Процедура ДобавитьПозицию(Номенклатура, ЕдиницаИзмерения, ХарактеристикаНоменклатуры, СерияНоменклатуры, Качество, Количество)

	Перем СтруктураОтбора;
	Перем СтруктураПоиска;
	Перем РезультатПоиска;
	Перем Товар;

	СтруктураОтбора                            = Новый Структура("Команда,
	                                                             |Номенклатура,
	                                                             |ЕдиницаИзмерения,
	                                                             |ХарактеристикаНоменклатуры,
	                                                             |СерияНоменклатуры,
	                                                             |Качество,
	                                                             |Количество");
	СтруктураОтбора.Команда                    = "ПодборВТабличнуюЧастьТовары";
	СтруктураОтбора.Номенклатура               = Номенклатура;
	СтруктураОтбора.ЕдиницаИзмерения           = ?(НЕ ЗначениеЗаполнено(ЕдиницаИзмерения),
	                                               Номенклатура.ЕдиницаДляОтчетов,
	                                               ЕдиницаИзмерения);
	СтруктураОтбора.ХарактеристикаНоменклатуры = ?(НЕ ЗначениеЗаполнено(ХарактеристикаНоменклатуры),
	                                               Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
	                                               ХарактеристикаНоменклатуры);
	СтруктураОтбора.СерияНоменклатуры          = ?(НЕ ЗначениеЗаполнено(СерияНоменклатуры),
	                                               Справочники.СерииНоменклатуры.ПустаяСсылка(),
	                                               СерияНоменклатуры);
	СтруктураОтбора.Качество                   = ?(НЕ ЗначениеЗаполнено(Качество),
	                                               Справочники.Качество.Новый,
	                                               Качество);
	СтруктураОтбора.Количество                 = ?(НЕ ЗначениеЗаполнено(Количество),
	                                               1,
	                                               Количество);

	ОповеститьОВыборе(СтруктураОтбора);
	Активизировать();

КонецПроцедуры // ДобавитьПозицию()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриНажатии" кнопки "ЗагрузитьИзТерминала"
// командной панели "КоманднаяПанельФормы"
//
// Параметры
//  Кнопка  – <КнопкаКоманднойПанели> 
//          – кнопка "ЗагрузитьИзТерминала"
//
Процедура КоманднаяПанельФормыЗагрузитьИзТерминала(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры // КоманднаяПанельФормыЗагрузитьИзТерминала()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	Перем Кнопка;
	Перем КолонкаСерии;
	Перем КолонкаХарактеристики;

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	КолонкаСерии                            = ЭлементыФормы.Товары.Колонки.СерияНоменклатуры;
	КолонкаХарактеристики                   = ЭлементыФормы.Товары.Колонки.ХарактеристикаНоменклатуры;
	КолонкаСерии.Доступность                = мИспользоватьСерии;
	КолонкаСерии.Видимость                  = мИспользоватьСерии;
	КолонкаСерии.ИзменятьВидимость          = мИспользоватьСерии;
	КолонкаСерии.ИзменятьНастройку          = мИспользоватьСерии;
	КолонкаСерии.ИзменятьПозицию            = мИспользоватьСерии;
	КолонкаХарактеристики.Доступность       = мИспользоватьХарактеристики;
	КолонкаХарактеристики.Видимость         = мИспользоватьХарактеристики;
	КолонкаХарактеристики.ИзменятьВидимость = мИспользоватьХарактеристики;
	КолонкаХарактеристики.ИзменятьНастройку = мИспользоватьХарактеристики;
	КолонкаХарактеристики.ИзменятьПозицию   = мИспользоватьХарактеристики;

	Если мТерминалы.Количество() = 0 Тогда
		Кнопка             = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ЗагрузитьИзТерминала;
		Кнопка.Доступность = Ложь;
		Кнопка.Подсказка   = "Терминал сбора данных не подключен";
	КонецЕсли;

	Врем = ВосстановитьЗначение("Обработка.ПроверкаШтрихкодов.НеУдалятьОтсканированныеПозиции");
	НеУдалятьОтсканированныеПозиции = ?(Врем = Неопределено, Истина, Врем);

	ЭлементыФормы.НадписьПроверяемыйДокументОбъект.Заголовок = СокрЛП(мДокументОбъект);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПриВыводеСтроки" ТП "Товары"
//
// Параметры
//  Элемент          – <ТабличноеПоле>
//                   – ТП "Товары"
//
//  ОформлениеСтроки – <ОформлениеСтроки> 
//                   – содержит оформление строки (шрифт, цвет) 
//                     и коллекцию оформлений ячеек
//
//  ДанныеСтроки     - <СтрокаТаблицыЗначений>
//                   - данные выводимой строки. Параметр соответствует свойству 
//                     "ТекущиеДанные" для выводимой строки
//
Процедура ТоварыПриВыводеСтроки(Элемент,
                                ОформлениеСтроки,
                                ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Осталось.ЦветТекста = 
	    ?(ДанныеСтроки.Осталось < 0, мЦветОсталосьМинус, мЦветОсталосьПлюс);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПередЗакрытием" формы
//
// Параметры
//  Отказ                - <Булево>
//                       - Признак отказа от закрытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение Истина, закрытие формы выполнено не будет.
//                         Значение по умолчанию: Ложь
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет закрытие формы.
//                         Для форм, связанных с типами ДокументОбъект и
//                         СправочникОбъект, стандартной обработкой является
//                         проверка модифицированности, задание вопроса о
//                         сохранении и сохранение объекта.
//                         Значение по умолчанию: Истина 
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Перем Врем;

	СохранитьЗначение("Обработка.ПроверкаШтрихкодов.НеУдалятьОтсканированныеПозиции", НеУдалятьОтсканированныеПозиции);

	Если ВладелецФормы.Открыта() Тогда
		Для Каждого Врем Из Товары Цикл
			Если Врем.Осталось <> 0 Тогда
				Врем = Вопрос("В таблице есть неотсканированные позиции.
				              |В случае закрытия формы данные о сканировании будут
				              |утеряны. Продолжить?",
				              РежимДиалогаВопрос.ДаНет);
				Отказ = (Врем = КодВозвратаДиалога.Нет);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

// Процедура - обработчик события "Перед открытием" формы.
//
// Параметры:
//  Отказ                - <Булево>
//                       - Признак отказа от открытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение Истина, открытие формы выполнено не будет.
//                         Значение по умолчанию: Ложь 
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет открытие формы.
//                         Значение по умолчанию: Истина 
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ВладелецФормы = Неопределено Тогда
		Предупреждение("Обработка должна вызываться из форм документов");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат = Истина;

	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("Качество",                   Качество);
	СтруктураПоиска.Вставить("Номенклатура",               Номенклатура);
	СтруктураПоиска.Вставить("СерияНоменклатуры",          Серия);
	СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",           Единица);

	Владельцы = Товары.НайтиСтроки(СтруктураПоиска);
	Если Владельцы.Количество() = 0 Тогда
		Ответ = Вопрос("Номенклатура """
		               + СокрЛП(Номенклатура)
		               + """ отсутствует в списке проверки.
		                 |Добавить позицию в документ?",
		               РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ДобавитьПозицию(Номенклатура,
			                Единица,
			                Характеристика,
			                Серия,
			                Качество,
			                Количество);
		КонецЕсли;
	Иначе
		Владельцы          = Владельцы[0];
		Владельцы.Считано  = Владельцы.Считано  + Количество;
		Владельцы.Осталось = Владельцы.Осталось - Количество;
		Если Владельцы.Осталось < 0 Тогда
			Ответ = Вопрос("Считанное значение количества номенклатуры """ 
			                + СокрЛП(Номенклатура) + """
			                  |превосходит значение количества в проверяемом документе.
			                  |Увеличить количество в документе?",
			               РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ТаблицаТоваров                                                = ?(Владельцы.ЭлементНабора, мСоставНабора, мТовары);
				ТаблицаТоваров[Владельцы.НомерСтрокиИсточника - 1].Количество = Владельцы.Считано;
				Владельцы.Осталось                                            = 0;
			Иначе
				Владельцы.Считано  = Владельцы.Считано  - Количество;
				Владельцы.Осталось = Владельцы.Осталось + Количество;
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		Если (Владельцы.Осталось = 0) И (Не НеУдалятьОтсканированныеПозиции) Тогда
			Товары.Удалить(Владельцы);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	СтруктураПоиска  = Новый Структура("СерийныйНомер", Номер);
	Строки           = СчитанныеСерийныеНомера.НайтиСтроки(СтруктураПоиска);

	Если Строки.Количество() = 0 Тогда
		СтруктураПоиска = Новый Структура("Номенклатура", Номер.Владелец);
		Владельцы       = Товары.НайтиСтроки(СтруктураПоиска);
		Если Владельцы.Количество() = 0 Тогда
			Ответ = Вопрос("Серийный номер """
			               + СокрЛП(Номер)
			               + """ соответствует номенклатуре """
			               + СокрЛП(Номер.Владелец)
			               + """, отсутствующей в списке проверки.
			                 |Добавить позицию в документ?",
			               РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ДобавитьПозицию(Номер.Владелец,
				                Неопределено,
				                Неопределено,
				                Неопределено,
				                Неопределено,
				                1);
			КонецЕсли;
		Иначе
			Владельцы          = Владельцы[0];
			Владельцы.Считано  = Владельцы.Считано + 1;
			Владельцы.Осталось = Владельцы.Осталось - 1;
			ТаблицаСН               = ?(Владельцы.ЭлементНабора,
			                            мСерийныеНомераСоставНабора,
			                            мСерийныеНомера);
			мИмяТЧ                  = ?(Владельцы.ЭлементНабора,
			                            "СоставНабора",
			                            мИмяТЧ);
			Если мПараметрыСвязиСтрокТЧ <> Неопределено И ТаблицаСН <> Неопределено Тогда
				Если Владельцы.КлючСвязи = 0 Тогда
					Владельцы.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ,
					                                             мДокументОбъект,
					                                             мИмяТЧ,
					                                             Истина);
					ТаблицаТоваров = ?(Владельцы.ЭлементНабора, мСоставНабора, мТовары);
					ТаблицаТоваров[Владельцы.НомерСтрокиИсточника - 1].КлючСвязи = Владельцы.КлючСвязи;
				КонецЕсли;
				НовыйСерийныйНомер               = ТаблицаСН.Добавить();
				НовыйСерийныйНомер.КлючСвязи     = Владельцы.КлючСвязи;
				НовыйСерийныйНомер.СерийныйНомер = Номер;
			КонецЕсли;

			СчитанныеСерийныеНомера.Добавить().СерийныйНомер = Номер;

			Если (Владельцы.Осталось = 0) И (Не НеУдалятьОтсканированныеПозиции) Тогда
				Товары.Удалить(Владельцы);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Предупреждение("Серийный номер """ + СокрЛП(Номер) + """ уже был считан.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

//////////////////////////////////////////////////////////////////////////////// 
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИспользоватьСерии          = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
мИспользоватьХарактеристики = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");
мЦветОсталосьПлюс           = ЦветаСтиля.ЦветТекстаПоля;
мЦветОсталосьМинус          = ЦветаСтиля.ЦветОсобогоТекста;
мТерминалы                  = ПолучитьСерверТО().ПолучитьСписокУстройств(
                                  Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);