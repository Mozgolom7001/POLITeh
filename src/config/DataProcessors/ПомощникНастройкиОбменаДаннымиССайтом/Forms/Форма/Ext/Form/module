
Перем мОсновнаяПанель;
Перем мСтраницыОсновнойПанели;
Перем мМассивПереходовПоСтраницам;
Перем мДействиеНазад; 

Перем мДоступностьВыбораУзлаОбменаТоваров;

Функция ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка = Неопределено)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	НастройкиОбменаССайтом.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиОбменаССайтом КАК НастройкиОбменаССайтом
		|ГДЕ
		|	НастройкиОбменаССайтом.ПометкаУдаления = ЛОЖЬ";

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 1 Тогда
		ЕдинственнаяНастройка = ТаблицаРезультата[0].Ссылка;
	КонецЕсли;
	
	Возврат ТаблицаРезультата.Количество();
	
КонецФункции

Процедура ОткрытьНастройкуОбменаИЗакрытьФорму(НастройкаОбменаДанными)
	
	ФормаНастройки = НастройкаОбменаДанными.ПолучитьФорму();
	ФормаНастройки.Открыть();
	Закрыть(Истина);
	
Конецпроцедуры

Процедура ПроверитьНеобходимыНастройкиДляРаботыОбменаДанными(ОткрыватьФорму = Ложь)
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяИБ Тогда
		
		СтароеЗначениеПользовательДляФайловогоОбмена = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		СтароеЗначениеИнтервалОпросаДляФайловогоОбмена = Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Получить();		
		
		Если НЕ ЗначениеЗаполнено(СтароеЗначениеПользовательДляФайловогоОбмена) Тогда
			Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Установить(ПараметрыСеанса.ТекущийПользователь);				
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтароеЗначениеИнтервалОпросаДляФайловогоОбмена) Тогда
			Константы.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте.Установить(60);	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьПереходДалее()
	
	ТекущаяСтраница = мОсновнаяПанель.ТекущаяСтраница;
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ТекущаяСтраница = мСтраницыОсновнойПанели.Главная Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если ДействиеВыбранноеПользователем = 0 Тогда
			
			ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаWEBЗначениямиПоУмолчанию(ЭтотОбъект);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкаОбменаСWEBСайтом;
			ПроцедурыОбменаССайтом.ЗаполнитьТаблицуКаталогов(СохраненнаяТаблицаКаталогов, ТаблицаКаталогов);
			
			ПроцедурыОбменаССайтом.НастроитьПостроитель(ПостроительОтчета, КлассифицироватьПоЦеновымГруппам, ВыгружатьВсеХарактеристики);
			ПроцедурыОбменаССайтом.ЗаполнитьОтборПостроителя(ПостроительОтчета);
			ПроцедурыОбменаССайтом.ЗаполнитьПорядокПостроителя(ПостроительОтчета);
			
		ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
			
			ЕдинственнаяНастройка = Неопределено;
			КоличествоНастроек = ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка);
			
			Если КоличествоНастроек = 0 Тогда
				
				ДействиеВыбранноеПользователем = 0;
				Предупреждение("Нет ни одной созданной настройки для обмена данными");
				Возврат;
				
			ИначеЕсли КоличествоНастроек = 1 Тогда
				
				ОткрытьНастройкуОбменаИЗакрытьФорму(ЕдинственнаяНастройка);
				Возврат;
				
			Иначе
				
				// настроек несколько - предложим выбрать
				ФормаВыбораНастройки = Справочники.НастройкиОбменаССайтом.ПолучитьФормуВыбора();
				ФормаВыбораНастройки.Заголовок = "Выберите настройку для редактирования";
				ВыбраннаяНастройка = ФормаВыбораНастройки.ОткрытьМодально();
				Если ЗначениеЗаполнено(ВыбраннаяНастройка) Тогда
					
					ОткрытьНастройкуОбменаИЗакрытьФорму(ВыбраннаяНастройка);
					
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СоздатьКнопкуНазадПриНеобходимости();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкаОбменаСWEBСайтом Тогда
		
		Отказ = Ложь;
		
		Если НЕ ОбменТоварами 
		И НЕ ОбменЗаказами Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Должен быть выбран хотя бы один из режимов выгрузки: ""Выгрузка товаров"" или ""Обмен заказами""!", Отказ);
			
		КонецЕсли;
		
		Если ВыгружатьНаСайт Тогда
		
			Если Не ЗначениеЗаполнено(HTTPОбменАдресСайта) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан WEB - сайт для обмена данными!", Отказ);
			КонецЕсли;
			
			// пробуем подключиться, если не удается - сообщаем об ошибке
			ДополнительнаяИнформация = "";
			Соединение = Неопределено;
			ТекстСообщенияПользователю = ПроцедурыОбменаССайтом.ВыполнитьТестовоеПодключениеКСерверуHTTP(ЭтотОбъект, ДополнительнаяИнформация, Соединение);
			
			Если Соединение <> Истина Тогда
				
				Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда 
		        
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось подключиться к WEB - сайту: " + ДополнительнаяИнформация, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(КаталогВыгрузки) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не указан каталог для обмена данными!", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если ОбменТоварами Тогда
		
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТоварыКаталоги;
			
		Иначе
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗаказы;
			
		КонецЕсли;
		
		СоздатьКнопкуНазадПриНеобходимости();
		ПроверитьНеобходимыНастройкиДляРаботыОбменаДанными();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТоварыКаталоги Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТовары;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТовары Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если ОбменЗаказами Тогда
		
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗаказы;
			
		Иначе
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТипаВыполненияОбменаДанными;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиЗаказы Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ДействияСЗаказами;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ДействияСЗаказами Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТипаВыполненияОбменаДанными;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТипаВыполненияОбменаДанными Тогда
		
		Если мДоступностьВыбораУзлаОбменаТоваров
			И Не ЗначениеЗаполнено(УзелОбменаТоварами) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран узел для обмена товарами.", Отказ);
			
		Конецесли;
		
		Если ЭлементыФормы.УзелОбменаЗаказами.Видимость
			И Не ЗначениеЗаполнено(УзелОбменаЗаказами) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран узел для обмена заказами.", Отказ);
			
		Конецесли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиАвтоматическогоОбменаДанными;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиАвтоматическогоОбменаДанными Тогда
		
		// все настройки сделаны
		ПользовательЗаполнилВсеНеобходимыеДанные();
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьНастройкуОбменаИПредложитьВыпорлнитьОбмен()
	
	ВопросПользователю = "Настройка для обмена с WEB-сайтом успешно сохранена. 
	|
	|Выполнить обмен данными (это может потребовать некоторого времени)?";
	
	ОтветПользователя = Вопрос(ВопросПользователю, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьОбменДаннымиПоНастройкеПользователя();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПользовательЗаполнилВсеНеобходимыеДанные()
	
	Настройка = Неопределено;
	РезультатПрименения = ВсеНастройкиЗаданыХотиимИхПрименить(Настройка);
		
	Если НЕ РезультатПрименения Тогда
		Возврат;
	КонецЕсли;
	
	СозданнаяНастройкаОбмена = Настройка.Ссылка;
		
	мМассивПереходовПоСтраницам.Очистить();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель.Доступность = Ложь;
		
	УстановитьТекстыКнопокИКартинки("Готово");
	
	мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбмена;
		
	Если ВладелецФормы <> Неопределено Тогда
		
		Попытка
			
			// оповещаем форму списка настроек о том, что создан новый элемент
			ВладелецФормы.ОповеститьОЗаписиНовогоОбъекта(СозданнаяНастройкаОбмена);
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ЗавершитьНастройкуОбменаИПредложитьВыпорлнитьОбмен();

КонецПроцедуры

Процедура ВыполнитьПереходНазад()
	
	КоличествоСтраницИстории = мМассивПереходовПоСтраницам.Количество();
	
	Если КоличествоСтраницИстории = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мОсновнаяПанель.ТекущаяСтраница = мМассивПереходовПоСтраницам[КоличествоСтраницИстории - 1];
	
	мМассивПереходовПоСтраницам.Удалить(КоличествоСтраницИстории - 1);
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = мМассивПереходовПоСтраницам.Количество() > 0;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	// назад
	ВыполнитьПереходНазад();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	// далее
	ВыполнитьПереходДалее();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	мДействиеНазад = Новый Действие("ОсновныеДействияФормыНазад");
	
	мОсновнаяПанель = ЭлементыФормы.ПанельОсновная;
	мСтраницыОсновнойПанели =  мОсновнаяПанель.Страницы;
	
	// проверим, есть ли настройки для обмена с WEB, если нет - то первый шаг автоматически пропускаем
	ЕдинственнаяНастройка = Неопределено;
	КоличествоНастроек = ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка);
	
	КоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом = Константы.КоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом.Получить();
	Если НЕ ЗначениеЗаполнено(КоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом) Тогда
		КоэффициентПересчетаВесаТоваровВГраммыДляОбменаССайтом = 1;
	КонецЕсли;
	
	Если КоличествоНастроек = 0 Тогда
		
		ДействиеВыбранноеПользователем = 0;
		ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаWEBЗначениямиПоУмолчанию(ЭтотОбъект);
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкаОбменаСWEBСайтом;
		ПроцедурыОбменаССайтом.ЗаполнитьТаблицуКаталогов(СохраненнаяТаблицаКаталогов, ТаблицаКаталогов);
		
		ПроцедурыОбменаССайтом.НастроитьПостроитель(ПостроительОтчета, КлассифицироватьПоЦеновымГруппам, ВыгружатьВсеХарактеристики);
		ПроцедурыОбменаССайтом.ЗаполнитьОтборПостроителя(ПостроительОтчета);
		ПроцедурыОбменаССайтом.ЗаполнитьПорядокПостроителя(ПостроительОтчета);
		
	Иначе
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Главная;
		
	КонецЕсли;
	
	ВидимостьПричиныЗакрытияЗаказов();
	
	Заголовок = Заголовок + " (" + Обработки.ОбменССайтом.Создать().Версия() + ")";
	
КонецПроцедуры

Процедура СоздатьКнопкуНазадПриНеобходимости()
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель.Доступность = Истина;
	
КонецПроцедуры

Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НужнаКопкаГотово = Ложь;
	НужнаКнопкаЗакрыть = Ложь;
	
	Если мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкаОбменаСWEBСайтом Тогда
		
		УстановитьДоступностьИВидимостьЭлементовФормыОсновныхНастроек();
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ДействияСЗаказами Тогда
		
		УстановитьДоступностьИВидимостьЭлементовФормыДопНастроекЗаказов();
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиТипаВыполненияОбменаДанными Тогда
		
		УстановитьДоступностьИВидимостьЭлементовФормыРежимОбмена();
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.НастройкиАвтоматическогоОбменаДанными Тогда
		
		ОбноситьСтраницуРассписания();
		НужнаКопкаГотово = Истина;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ИтоговаяСтраницаЗавершенияОбмена Тогда
		
		НужнаКнопкаЗакрыть = Истина;
		
	КонецЕсли;
	
	УстановитьТекстыКнопокИКартинки(?(НужнаКопкаГотово, "Готово", ?(НужнаКнопкаЗакрыть, "Закрыть", "Далее")));
		
КонецПроцедуры

Процедура УстановитьТекстыКнопокИКартинки(ТекстКнопки)
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = ТекстКнопки;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Подсказка = ?(ТекстКнопки = "Готово", "Применить настройки", ?(ТекстКнопки = "Закрыть", "Закрыть", "Перейти к следующему пункту настройки"))	;
	
КонецПроцедуры

Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.ВариантНастройкиПериодическогоОбмена.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.КаждыйЧас.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.КаждыйЧас2.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.КаждыйЧас8.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.ОдинРазВДень.Доступность = ИспользоватьРегламентныеЗадания;	
	ЭлементыФормы.КаждыйЧас9.Доступность = ИспользоватьРегламентныеЗадания;	
	
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Видимость = ИспользоватьРегламентныеЗадания И (ВариантНастройкиПериодическогоОбмена = 5);
	
КонецПроцедуры

Процедура ОбноситьСтраницуРассписания()
	
	ОбновитьДоступностьАвтообмена();
	
	Если ИспользоватьРегламентныеЗадания Тогда
		
		Если ВариантНастройкиПериодическогоОбмена = 5 Тогда
			НадписьРасписаниеРегламентногоЗаданияНажатие(ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки);
		Иначе
			СформироватьПредопределенноеРасписаниеДляРегЗадания();
		КонецЕсли;
		
	Конецесли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ОбноситьСтраницуРассписания();
	
КонецПроцедуры

Процедура СформироватьПредопределенноеРасписаниеДляРегЗадания()
	
	ОбъктЗадания = ПолучитьТекущееРегламентноеЗаданиеДляНастройки(мРегламентноеЗадание);
	РасписаниеЗадания = ОбъктЗадания.Расписание;
	
	Если ВариантНастройкиПериодическогоОбмена = 0 Тогда
		РасписаниеЗадания.ПериодПовтораВТечениеДня = 60 * 30;
	ИначеЕсли ВариантНастройкиПериодическогоОбмена = 1 Тогда
		РасписаниеЗадания.ПериодПовтораВТечениеДня = 60 * 60;
	ИначеЕсли ВариантНастройкиПериодическогоОбмена = 2 Тогда
		РасписаниеЗадания.ПериодПовтораВТечениеДня = 60 * 60 * 2;
	ИначеЕсли ВариантНастройкиПериодическогоОбмена = 3 Тогда
		РасписаниеЗадания.ПериодПовтораВТечениеДня = 60 * 60 * 8;
	 ИначеЕсли ВариантНастройкиПериодическогоОбмена = 4 Тогда
		РасписаниеЗадания.ПериодПовтораВТечениеДня = 60 * 60 * 24;
	КонецЕсли;
	
	РасписаниеЗадания.ПаузаПовтора = 300;
	
	РасписаниеЗадания.ПериодПовтораДней = 1;
	
КонецПроцедуры

Функция ПолучитьТекущееРегламентноеЗаданиеДляНастройки(ОбъектЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	КонецЕсли;
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗаданиеОбменССайтом");
		ОбъектЗадания.Использование = Истина;
	
	КонецЕсли;
	
	Возврат ОбъектЗадания;
	
КонецФункции

Процедура НадписьРасписаниеРегламентногоЗаданияНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание);
	
КонецПроцедуры

Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	Перем ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно;
	
	ПроцедурыОбменаДаннымиКлиент.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(мРегламентноеЗадание, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно);
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	
КонецПроцедуры

Процедура РедактированиеРасписанияРегламентногоЗадания(ОбъектЗадания)
	
	ОбъектЗадания = ПолучитьТекущеерегламентноеЗаданиеДляНастройки(ОбъектЗадания);
	
	// редактирование самого расписания непосредственно
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОбъектЗадания.Расписание);
		
	Если Диалог.ОткрытьМодально() Тогда
		
		ОбъектЗадания.Расписание = Диалог.Расписание;
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

Функция ОпределитьНаличиеНастройки()
	
	Если НЕ ЗначениеЗаполнено(СозданнаяНастройкаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ОбъектНастройки = СозданнаяНастройкаОбмена.ПолучитьОбъект();
		
	Если ОбъектНастройки = Неопределено Тогда
		Возврат Ложь;
	Конецесли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиПоНастройкеПользователя()
	
	Если НЕ ОпределитьНаличиеНастройки() Тогда
		Предупреждение("Не выбрана настройка для проведения обмена данными");
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(СозданнаяНастройкаОбмена);
		
Конецпроцедуры

Процедура ВыполнитьНажатие(Элемент)
	
	ВыполнитьОбменДаннымиПоНастройкеПользователя();
	
КонецПроцедуры

Процедура ВариантНастройкиПериодическогоОбменаПриИзменении(Элемент)
	
	ОбноситьСтраницуРассписания();
	
КонецПроцедуры

Процедура КаталогВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбора.Заголовок 				 	 = "Выберите каталог для обмена данными";
	ДиалогВыбора.ПредварительныйПросмотр 	 = Ложь;
	ДиалогВыбора.Каталог 				 	 = Элемент.Значение;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЗапуститьПриложение("explorer " + Элемент.Значение);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура УстановитьДоступностьИВидимостьЭлементовФормыОсновныхНастроек()
	
	Если ВыгружатьНаСайт Тогда
		
		ЭлементыФормы.ПанельНазначение.ТекущаяСтраница = ЭлементыФормы.ПанельНазначение.Страницы.СтраницаСайт;	
		
	Иначе
		
		ЭлементыФормы.ПанельНазначение.ТекущаяСтраница = ЭлементыФормы.ПанельНазначение.Страницы.СтраницаКаталог;	
		
	КонецЕсли;
	
	// параметры соединения
	ЭлементыФормы.НадписьСерверПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиСервер.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьПортПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиПорт.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьИмяПользователяПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиИмяПользователя.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьПарольПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиПароль.Доступность = HTTPОбменПроксиИспользование;
	
КонецПроцедуры

Процедура ФлажокИспользоватьПроксиСерверПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормыОсновныхНастроек();
	
КонецПроцедуры

Процедура ПереключательНазначениеСайтПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормыОсновныхНастроек();
	
КонецПроцедуры

Процедура ПроверитьНажатие(Элемент)
	
	ДополнительнаяИнформация = "";
	ТекстСообщенияПользователю = ПроцедурыОбменаССайтом.ВыполнитьТестовоеПодключениеКСерверуHTTP(ЭтотОбъект, ДополнительнаяИнформация);
	
	Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда 
		
		Сообщить(ДополнительнаяИнформация);
		
	КонецЕсли;
	
	Предупреждение(ТекстСообщенияПользователю);
	
КонецПроцедуры

Процедура УстановитьДоступностьИВидимостьЭлементовФормыДопНастроекЗаказов()
	
	ЭлементыФормы.ПереключательПроводитьОперативно.Видимость = ПроводитьДокументы;
	ЭлементыФормы.ПереключательПРоводитьНеОперативно.Видимость = ПроводитьДокументы;
	
КонецПроцедуры

Функция ОпределитьКоличествоУзловПланаОбмена(ИмяПланаОбмена, ПервыйИзУзлов)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 2
	               |	Обмен.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена." + ИмяПланаОбмена + " КАК Обмен
				   |ГДЕ
				   |	Обмен.пометкаУдаления = Ложь
				   |	И Обмен.Ссылка <> &СобственныйУзел";

	Запрос.УстановитьПараметр("СобственныйУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	
	Количество = ТаблицаЗначений.Количество();
	
	Если Количество >= 1 Тогда
		ПервыйИзУзлов = ТаблицаЗначений[0].Ссылка;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Процедура УстановитьДоступностьИВидимостьЭлементовФормыРежимОбмена()
	
	Перем ПервыйУзел;
	
	Если ОбменЗаказами И ВыгружатьТолькоИзменения Тогда
		
		КоличествоУзлов = ОпределитьКоличествоУзловПланаОбмена("ОбменССайтомЗаказами", ПервыйУзел);
		
		Если КоличествоУзлов = 0 Тогда
			
			ЭлементыФормы.НадписьУзелОбменаЗаказами.Видимость = Ложь;
			ЭлементыФормы.УзелОбменаЗаказами.Видимость = Ложь;
			УзелОбменаЗаказами = Неопределено;
			
		Иначе
			
			УзелОбменаЗаказами = ПервыйУзел;
			ЭлементыФормы.НадписьУзелОбменаЗаказами.Видимость = Истина;
			ЭлементыФормы.УзелОбменаЗаказами.Видимость = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.НадписьУзелОбменаЗаказами.Видимость = Ложь;
		ЭлементыФормы.УзелОбменаЗаказами.Видимость = Ложь;
		УзелОбменаЗаказами = Неопределено;
		
	КонецЕсли;
	
	Если ОбменТоварами И ВыгружатьТолькоИзменения Тогда
		
		КоличествоУзлов = ОпределитьКоличествоУзловПланаОбмена("ОбменССайтомТоварами", ПервыйУзел);
		
		Если КоличествоУзлов = 0 Тогда
			
			ЭлементыФормы.ПанельУзелОбменаТоварами.Свертка = РежимСверткиЭлементаУправления.Верх;
			мДоступностьВыбораУзлаОбменаТоваров = Ложь;
			УзелОбменаТоварами = Неопределено;
			
		Иначе
			
			УзелОбменаТоварами = ПервыйУзел;
			мДоступностьВыбораУзлаОбменаТоваров = Истина;
			ЭлементыФормы.ПанельУзелОбменаТоварами.Свертка = РежимСверткиЭлементаУправления.Нет;
			
		КонецЕсли;
		
	Иначе
		
		мДоступностьВыбораУзлаОбменаТоваров = Ложь;
		ЭлементыФормы.ПанельУзелОбменаТоварами.Свертка = РежимСверткиЭлементаУправления.Верх;
		УзелОбменаТоварами = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереключательЗаписыватьПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормыДопНастроекЗаказов();
	
КонецПроцедуры

Процедура ПереключательПолнаяВыгрузкаПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормыРежимОбмена();
	
КонецПроцедуры

Процедура УзелОбменаТоварамиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаТоварами) Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаТоварами = ПланыОбмена.ОбменССайтомТоварами.ЭтотУзел() Тогда
		
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выберите другой узел или создайте новый.");
		УзелОбменаТоварами = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УзелОбменаЗаказамиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаЗаказами) Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаЗаказами = ПланыОбмена.ОбменССайтомЗаказами.ЭтотУзел() Тогда
		
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выберите другой узел или создайте новый.");
		УзелОбменаЗаказами = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьНадписьПодробнееОТехнологииОбменаНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.v8.1c.ru/edi/edi_app/130");
	
КонецПроцедуры

Процедура НадписьНадписьПодробнееОСтандартеCML2Нажатие(Элемент)
	
	ЗапуститьПриложение("http://v8.1c.ru/edi/edi_stnd/90/");
	
КонецПроцедуры

Процедура НадписьСсылкаНаСайт1СБитриксПодробнееНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.1c-bitrix.ru/1c/");
	
КонецПроцедуры

Процедура ПолеКартинкиЛоготип1СБитриксНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.1c-bitrix.ru");
	
КонецПроцедуры

Процедура ТаблицаКаталоговПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПроцедурыОбменаССайтом.ОбработатьСтрокуТаблицыКаталогов(ДанныеСтроки, ОформлениеСтроки.Ячейки["Группы"]);	
	
КонецПроцедуры

Процедура ТаблицаКаталоговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Отказ = (НЕ ОтменаРедактирования) И (НЕ ЗначениеЗаполнено(СокрЛП(Элемент.ТекущиеДанные.Каталог)));
КонецПроцедуры

Процедура ТаблицаКаталоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если КлассифицироватьПоЦеновымГруппам Тогда 
		Элемент.Колонки.Группы.ЭлементУправления.ТипЗначенияСписка = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
	Иначе
		Элемент.Колонки.Группы.ЭлементУправления.ТипЗначенияСписка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	КонецЕсли;
	
	Если Копирование Тогда
		ДанныеСтроки.ИдКаталога = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура КлассифицироватьПоЦеновымГруппамПриИзменении(Элемент)
	
	Если ПроцедурыОбменаССайтом.ГруппыВыбраны(ТаблицаКаталогов) Тогда
		Ответ = Вопрос("Таблица соответствия групп классификатора каталогам на сайте будет очищена!"
			+ Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			КлассифицироватьПоЦеновымГруппам = НЕ КлассифицироватьПоЦеновымГруппам;
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТК Из ТаблицаКаталогов Цикл
			СтрокаТК.Группы.Очистить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидимостьПричиныЗакрытияЗаказов()
	ЭлементыФормы.НадписьПричинаЗакрытияЗаказов.Видимость = ДействияСОтмененнымиЗаказами = 2;
	ЭлементыФормы.ПричинаЗакрытияЗаказов.Видимость = ДействияСОтмененнымиЗаказами = 2;
КонецПроцедуры

Процедура ДействияСОтмененнымиЗаказамиПриИзменении(Элемент)
	ВидимостьПричиныЗакрытияЗаказов();
КонецПроцедуры

мМассивПереходовПоСтраницам = Новый Массив();

