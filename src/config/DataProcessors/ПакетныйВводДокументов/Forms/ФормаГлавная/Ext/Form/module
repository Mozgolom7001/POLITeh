Перем мФормаВыбораНоменклатуры;
Перем мФормаВыбораХарактеристики;
Перем мФормаВыбораКонтрагента;
Перем мФормаВыбораДоговора;
Перем мФормаСменыДоговора;
Перем мФормаВыбораЗаказа;
Перем мФормаВыбораСклада;
Перем мФормаПодбора;
Перем мОписаниеТиповКолво;
Перем мОписаниеТиповЦена;
Перем мОписаниеТиповВалюта;
Перем мСтруктГрупп;
Перем мТекущееЗначениеДоговора;
Перем мТаблицаЗначенийДоступностиФлаговУчета;
Перем мКонтролироватьОстаткиПоОрганизациям;
Перем мКолонкиДанных;
Перем мДополнительныеПоля;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

//Процедура устанавливает отборы в форме выбора договора в зависимости от режима работы 
Процедура УстановитьОтборВФормеВыбораДоговора(мФормаВыбораДоговора)
	//отберем договоры, заключенные с организацией на закладке Параметры
	мФормаВыбораДоговора.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
	мФормаВыбораДоговора.Отбор.Организация.Значение = ПолеВводаОрганизация;
	мФормаВыбораДоговора.Отбор.Организация.Использование = истина;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда
		ВидСравненияОтбора = ВидСравнения.ВСписке;
		ЗначениеОтбора     = Новый СписокЗначений;
		ЗначениеОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ЗначениеОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
	      ИЛИ ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв" Тогда
		ВидСравненияОтбора = ВидСравнения.Равно;
		ЗначениеОтбора     = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка"
	      ИЛИ ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда
		ВидСравненияОтбора = ВидСравнения.Равно;
		ЗначениеОтбора     = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
		ВидСравненияОтбора = ВидСравнения.ВСписке;
		ЗначениеОтбора     = Новый СписокЗначений;
		ЗначениеОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		ЗначениеОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		
		мФормаВыбораДоговора.Отбор.ВедениеВзаиморасчетов.ВидСравнения  = ВидСравнения.Равно;
		мФормаВыбораДоговора.Отбор.ВедениеВзаиморасчетов.Значение      = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		мФормаВыбораДоговора.Отбор.ВедениеВзаиморасчетов.Использование = Истина;

	Иначе
		ЗначениеОтбора = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		мФормаВыбораДоговора.Отбор.ВидДоговора.ВидСравнения  = ВидСравненияОтбора;
		мФормаВыбораДоговора.Отбор.ВидДоговора.Значение      = ЗначениеОтбора;
		мФормаВыбораДоговора.Отбор.ВидДоговора.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура ДобавитьКолонкиДополнительныхПолей добавляет дополнительные поля в таблицу
//
// Параметры
//  ТаблицаНазначение  – <ТаблицаЗначений> – <таблица значений в которой необходимо добавить дополнительные колонки>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьКолонкиДополнительныхПолей(ТаблицаНазначение, Строка2, ДанныеЗапроса)
	КолонкаСДополнительнымиПараметрами = ТаблицаНазначение.Колонки.Найти("ТаблицаДополнительныеПоля");
	Если (КолонкаСДополнительнымиПараметрами = Неопределено) 
		ИЛИ (КолонкаСДополнительнымиПараметрами <> Неопределено И Строка2.ТаблицаДополнительныеПоля = Неопределено) Тогда
		
		ТаблицаДополнительныхПолей = Новый ТаблицаЗначений;
		ТаблицаДополнительныхПолей.Колонки.Добавить("Номенклатура");
		ТаблицаДополнительныхПолей.Колонки.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаДополнительныхПолей.Колонки.Добавить("Заказ");

		ТаблицаДополнительныхПолей.Индексы.Добавить("Номенклатура");
		ТаблицаДополнительныхПолей.Индексы.Добавить("ХарактеристикаНоменклатуры");
		ТаблицаДополнительныхПолей.Индексы.Добавить("Заказ");
		
		Если КолонкаСДополнительнымиПараметрами = Неопределено Тогда
			ТаблицаНазначение.Колонки.Добавить("ТаблицаДополнительныеПоля");
		КонецЕсли;
	Иначе
		ТаблицаДополнительныхПолей = Строка2.ТаблицаДополнительныеПоля;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗапроса) = Тип("Структура") Тогда
		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ХарактеристикаНоменклатуры", ДанныеЗапроса.Хар);
		СтруктПарам.Вставить("Номенклатура",               ДанныеЗапроса.Товар);
		СтруктПарам.Вставить("ЗаказПокупателя",            ДанныеЗапроса.Заказ);
		ДанныеЗапроса = 
		РегистрыНакопления.ЗаказыПокупателей.Остатки(
								  КонецДня(ПолеВводаДатаАктуальности),
								  СтруктПарам,
								  "ЗаказПокупателя, ХарактеристикаНоменклатуры, Номенклатура, ПроцентАвтоматическихСкидок",);
		//
		Если ДанныеЗапроса.Количество() > 0 Тогда
			ДанныеЗапроса.Колонки.Найти("ЗаказПокупателя").Имя = "Заказ";
			строкаДанных = ТаблицаДополнительныхПолей.Добавить();
			строкаДанных.Номенклатура = ДанныеЗапроса[0].Номенклатура;
			строкаДанных.ХарактеристикаНоменклатуры = ДанныеЗапроса[0].ХарактеристикаНоменклатуры;
			строкаДанных.Заказ = ДанныеЗапроса[0].Заказ;
			Для Каждого НовоеПоле Из мДополнительныеПоля Цикл
				Если ТаблицаДополнительныхПолей.Колонки.Найти(НовоеПоле.Ключ) = Неопределено Тогда
					ТаблицаДополнительныхПолей.Колонки.Добавить(НовоеПоле.Ключ);
				КонецЕсли;
				строкаДанных[НовоеПоле.Ключ] = ДанныеЗапроса[0][НовоеПоле.Ключ];
			КонецЦикла;
		КонецЕсли;
	Иначе
		строкаДанных = ТаблицаДополнительныхПолей.Добавить();
		строкаДанных.Номенклатура = ДанныеЗапроса.Товар;
		строкаДанных.ХарактеристикаНоменклатуры = ДанныеЗапроса.Хар;
		строкаДанных.Заказ = ДанныеЗапроса.Заказ;
		Для Каждого НовоеПоле Из мДополнительныеПоля Цикл
			Если ТаблицаДополнительныхПолей.Колонки.Найти(НовоеПоле.Ключ) = Неопределено Тогда
				ТаблицаДополнительныхПолей.Колонки.Добавить(НовоеПоле.Ключ);
			КонецЕсли;
			строкаДанных[НовоеПоле.Ключ] = ДанныеЗапроса[НовоеПоле.Ключ];
		КонецЦикла;
	КонецЕсли;
	Строка2.ТаблицаДополнительныеПоля = ТаблицаДополнительныхПолей;
КонецПроцедуры // ДобавитьКолонкиДополнительныхПолей()

// Открывает форму выбора договора
//
// Параметры:
//  Контрагент - контрагент, договор которого надо выбрать
//
Процедура ВыбратьДоговор(Контрагент)

	мФормаВыбораДоговора                              = Справочники["ДоговорыКонтрагентов"].ПолучитьФормуВыбора(, ЭтаФорма,);
	мФормаВыбораДоговора.РежимВыбора                  = Истина;
	мФормаВыбораДоговора.ЗакрыватьПриВыборе           = Ложь;
	мФормаВыбораДоговора.ПараметрВыборПоВладельцу     = Контрагент;
	мФормаВыбораДоговора.ПараметрОтборПоВладельцу     = Контрагент;
	мФормаВыбораДоговора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
    УстановитьОтборВФормеВыбораДоговора(мФормаВыбораДоговора);

	мФормаВыбораДоговора.Открыть();

КонецПроцедуры // ВыбратьДоговор()

// Добавляет строку в таблицу мТаблицаЗначенийДоступностиФлаговУчета
//
// Параметры:
//  РежимРаботы                      - Строка, описывает для какого именно режима работы устанавливаются значения.
//  ДоступностьФлагУпрУчет           - Булево, признак доступности флага. упр. учета.
//  ЗначениеПоУмолчаниюФлагУпрУчет   - Булево, значение по умолчанию флага. упр. учета.
//  ДоступностьФлагБухУчет           - Булево, признак доступности флага. бух. учета.
//  ЗначениеПоУмолчаниюФлагБухУчет   - Булево, значение по умолчанию флага. буг. учета.
//  ДоступностьФлагНалогУчет         - Булево, признак доступности флага. налог. учета.
//  ЗначениеПоУмолчаниюФлагНалогУчет - Булево, значение по умолчанию флага. налог. учета.
//
Процедура ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета(РежимРаботы,
	                                                           ДоступностьФлагУпрУчет,   ЗначениеПоУмолчаниюФлагУпрУчет,
	                                                           ДоступностьФлагБухУчет,   ЗначениеПоУмолчаниюФлагБухУчет,
	                                                           ДоступностьФлагНалогУчет, ЗначениеПоУмолчаниюФлагНалогУчет)

	НоваяСтрока = мТаблицаЗначенийДоступностиФлаговУчета.Добавить();
	НоваяСтрока.РежимРаботы                      = РежимРаботы;
	НоваяСтрока.ДоступностьФлагУпрУчет           = ДоступностьФлагУпрУчет;
	НоваяСтрока.ЗначениеПоУмолчаниюФлагУпрУчет   = ЗначениеПоУмолчаниюФлагУпрУчет;
	НоваяСтрока.ДоступностьФлагБухУчет           = ДоступностьФлагБухУчет;
	НоваяСтрока.ЗначениеПоУмолчаниюФлагБухУчет   = ЗначениеПоУмолчаниюФлагБухУчет;
	НоваяСтрока.ДоступностьФлагНалогУчет         = ДоступностьФлагНалогУчет;
	НоваяСтрока.ЗначениеПоУмолчаниюФлагНалогУчет = ЗначениеПоУмолчаниюФлагНалогУчет;

КонецПроцедуры // ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета()

// Устанавливает доступность и значения флагов регл. и упр. учета
//
// Параметры:
//  Нет
//
Процедура УстановитьЗначенияДоступностьФлаговУчета()

	СтрокаЗначенийДоступности = мТаблицаЗначенийДоступностиФлаговУчета.Найти(ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение, "РежимРаботы");
	Если СтрокаЗначенийДоступности <> Неопределено Тогда
		ФлагУпрУчет                             = СтрокаЗначенийДоступности.ЗначениеПоУмолчаниюФлагУпрУчет;
		ЭлементыФормы.ФлагУпрУчет.Доступность   = СтрокаЗначенийДоступности.ДоступностьФлагУпрУчет;
		ФлагБухУчет                             = СтрокаЗначенийДоступности.ЗначениеПоУмолчаниюФлагБухУчет;
		ЭлементыФормы.ФлагБухУчет.Доступность   = СтрокаЗначенийДоступности.ДоступностьФлагБухУчет;

		Если ФлагБухУчет Тогда
			ФлагНалогУчет                           = СтрокаЗначенийДоступности.ЗначениеПоУмолчаниюФлагналогУчет;
			ЭлементыФормы.ФлагНалогУчет.Доступность = СтрокаЗначенийДоступности.ДоступностьФлагНалогУчет;
		Иначе
			ФлагНалогУчет = Ложь;
			ЭлементыФормы.ФлагНалогУчет.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьЗначенияДоступностьФлаговУчета()

// Проверяет можно ли использовать выбранный договор в текущем режиме работы
//
// Параметры: 
//  Договор - выбранный договор
//
// Возвращаемое значение:
//  Истина - договор является допустимым в данном режиме работы
//  Ложь   - договор нельзя выбирать в данном режиме работы
//
Функция ДопустимыйДоговор(Договор, Сообщать = Истина)
	Перем Текст;
	Перем Флаг;

	Флаг = Истина;
	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда

		Флаг  = Договор.ВедениеВзаиморасчетов     = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		Текст = "При отгрузке товаров из свободного остатка можно выбирать только договора,
		        |взаиморасчеты по которым ведутся по договору в целом.";
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		Флаг  = Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
		Текст = "При отгрузке товаров из резерва можно выбирать только договора,
		        |взаиморасчеты по которым ведутся по заказам (счетам)";
	КонецЕсли;

	Если Не Флаг И Сообщать Тогда
		Предупреждение( Текст, 60, "Неверно выбран договор");
	КонецЕсли;

	Возврат Флаг;

КонецФункции // ДопустимыйДоговор()

// Создает текст запроса
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Сформированный текст запроса
//
Функция СоздатьТекстЗапроса()
	Перем ИмяДопИтоги;
	Перем ИмяДопПоля;
	Перем Текст;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда

		Текст = "
		|ВЫБРАТЬ
		|	РегЗаказы.Номенклатура               КАК Товар,
		|	РегЗаказы.ХарактеристикаНоменклатуры КАК Хар,
		|	РегЗаказы.ВнутреннийЗаказ            КАК Заказ,
		|	РегЗаказы.ВнутреннийЗаказ.Заказчик   КАК Склад,
		|	СУММА(РегЗаказы.КоличествоОстаток)   КАК Заказано
		|
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(&ДатаАктуальности) КАК РегЗаказы
		|
		|ГДЕ
		|	РегЗаказы.ВнутреннийЗаказ.ДатаОтгрузки <= &ДатаАктуальности
		|	И РегЗаказы.ВнутреннийЗаказ.ВидЗаказа = &ВидЗаказаСклад
		|	И РегЗаказы.КоличествоОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	РегЗаказы.Номенклатура,
		|	РегЗаказы.ХарактеристикаНоменклатуры,
		|	РегЗаказы.ВнутреннийЗаказ.Заказчик,
		|	РегЗаказы.ВнутреннийЗаказ
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегЗаказы.Номенклатура.Наименование,
		|	РегЗаказы.ХарактеристикаНоменклатуры.Наименование
		|
		|ИТОГИ 
		|	СУММА(Заказано)
		|
		|ПО
		|	РегЗаказы.Номенклатура,
		|	РегЗаказы.ХарактеристикаНоменклатуры,
		|	РегЗаказы.ВнутреннийЗаказ.Заказчик,
		|	РегЗаказы.ВнутреннийЗаказ
		|";

		Возврат Текст;

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		ИмяДопИтоги   = "РегЗаказы.ЗаказПокупателя.ДоговорКонтрагента,";
		ИмяДопПоля    = "РегЗаказы.ЗаказПокупателя.ДоговорКонтрагента КАК Договор,
						|МИНИМУМ(РегЗаказы.ПроцентАвтоматическихСкидок) КАК ПроцентАвтоматическихСкидок,";

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв" Тогда
			ИмяДопУсловия = "ГДЕ РегЗаказы.ЗаказПокупателя.ДатаОтгрузки <= &ДатаАктуальности И РегЗаказы.ЗаказПокупателя.Контрагент В (&СписокСобственныхКонтрагентов)";
		Иначе
			ИмяДопУсловия = "ГДЕ РегЗаказы.ЗаказПокупателя.ДатаОтгрузки <= &ДатаАктуальности И РегЗаказы.ЗаказПокупателя.Контрагент НЕ В (&СписокСобственныхКонтрагентов)";
		КонецЕсли;

	Иначе

		ИмяДопИтоги   = "";
		ИмяДопПоля    = "";
		ИмяДопУсловия = ?(НЕ ЗначениеЗаполнено(ДатаПоступления),
		                "ГДЕ РегЗаказы.Номенклатура.Услуга = Ложь",
		                "ГДЕ РегЗаказы.ЗаказПокупателя.ДатаОтгрузки >= &ДатаПоступления И РегЗаказы.Номенклатура.Услуга = Ложь");

	КонецЕсли;

	Текст = "
	|ВЫБРАТЬ
	|	РегЗаказы.Номенклатура                     КАК Товар,
	|	РегЗаказы.ХарактеристикаНоменклатуры       КАК Хар,
	|	РегЗаказы.ЗаказПокупателя                  КАК Заказ,
	|	" + ИмяДопПоля + "
	|	СУММА(РегЗаказы.КоличествоОстаток)         КАК Заказано,
	|	СУММА(РегСвободно.КоличествоОстаток)       КАК Свободно,";
	
	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "ПеремещениеРезерв"
	   И ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "Заказы"
	   И мКонтролироватьОстаткиПоОрганизациям Тогда
		Текст = Текст + "
		|	СУММА(РегОрганизации.КоличествоОстаток)    КАК ОстатокПоОрганизации,";
	КонецЕсли;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "Заказы" Тогда
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА РегРезервНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 
		|	РегРезервНаСкладе.КоличествоОстаток КОНЕЦ) КАК РезервНаСкладе,
		|
		|	СУММА(ВЫБОР КОГДА РегРезервВсего.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ
		|	РегРезервВсего.КоличествоОстаток КОНЕЦ) - 
		|	СУММА(ВЫБОР КОГДА РегРезервНаСкладе.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 
		|	РегРезервНаСкладе.КоличествоОстаток КОНЕЦ) КАК РезервНаДругихСкладах,";
	КонецЕсли;

	Текст = Текст + "
	|	СУММА(ВЫБОР КОГДА РегОжидаем.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ
	|	РегОжидаем.КоличествоОстаток КОНЕЦ)           КАК Ожидаем,
	|	СУММА(ВЫБОР КОГДА РегРезервВсего.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ
	|	РегРезервВсего.КоличествоОстаток КОНЕЦ)       КАК РезервВсего,
	|	СУММА(ВЫБОР КОГДА РегОжидаемПоЗаказу.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ
	|	РегОжидаемПоЗаказу.КоличествоОстаток КОНЕЦ)   КАК ОжидаемПоЗаказу,
	|	СУММА(ВЫБОР КОГДА РегРезервПоЗаказу.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ
	|	РегРезервПоЗаказу.КоличествоОстаток КОНЕЦ)    КАК РезервПоЗаказу
	|
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаАктуальности) КАК РегЗаказы";

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "ПеремещениеРезерв"
	   И ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "Заказы"
	   И мКонтролироватьОстаткиПоОрганизациям Тогда
		Текст = Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаАктуальности, Организация = &Организация) КАК РегОрганизации
		|	ПО РегОрганизации.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
		|	   И РегОрганизации.Номенклатура             = РегЗаказы.Номенклатура";
	КонецЕсли;

	Текст = Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАктуальности, Склад = &Склад) КАК РегСвободно
	|	ПО РегСвободно.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
	|	   И РегСвободно.Номенклатура             = РегЗаказы.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАктуальности, Склад = &Склад) КАК РегРезервНаСкладе
	|	ПО РегРезервНаСкладе.ХарактеристикаНоменклатуры   = РегЗаказы.ХарактеристикаНоменклатуры
	|	   И РегРезервНаСкладе.Номенклатура               = РегЗаказы.Номенклатура
	|	   И РегРезервНаСкладе.ДокументРезерва            = РегЗаказы.ЗаказПокупателя
	|                                                  
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАктуальности) КАК РегРезервВсего
	|	ПО РегРезервВсего.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
	|	   И РегРезервВсего.Номенклатура             = РегЗаказы.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАктуальности) КАК РегРезервПоЗаказу
	|	ПО РегРезервПоЗаказу.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
	|	   И РегРезервПоЗаказу.Номенклатура             = РегЗаказы.Номенклатура
	|	   И РегРезервПоЗаказу.ДокументРезерва          = РегЗаказы.ЗаказПокупателя
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаАктуальности) КАК РегОжидаем
	|	ПО РегОжидаем.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
	|	   И РегОжидаем.Номенклатура             = РегЗаказы.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаАктуальности) КАК РегОжидаемПоЗаказу
	|	ПО РегОжидаемПоЗаказу.ХарактеристикаНоменклатуры = РегЗаказы.ХарактеристикаНоменклатуры
	|	   И РегОжидаемПоЗаказу.Номенклатура             = РегЗаказы.Номенклатура
	|	   И РегОжидаемПоЗаказу.ЗаказПокупателя          = РегЗаказы.ЗаказПокупателя
	|
	|	" + ИмяДопУсловия + "
	|
	|СГРУППИРОВАТЬ ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры,
	|	" + ИмяДопИтоги + "
	|	РегЗаказы.ЗаказПокупателя";

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		// Резерв на нашем складе
		Текст = Текст + "
		|ИМЕЮЩИЕ
		|	СУММА(
		|	ВЫБОР КОГДА РегРезервНаСкладе.Склад = &Склад ТОГДА
		|		РегРезервНаСкладе.КоличествоОстаток
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ) > 0";
	КонецЕсли;

	Текст = Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегЗаказы.Номенклатура.Наименование,
	|	РегЗаказы.ХарактеристикаНоменклатуры.Наименование
	|
	|ИТОГИ 
	|	СУММА(Заказано),
	|	СУММА(Свободно),";

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "ПеремещениеРезерв"
	   И ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "Заказы" 
	   И мКонтролироватьОстаткиПоОрганизациям Тогда
		Текст = Текст + "
		|	СУММА(ОстатокПоОрганизации),";
	КонецЕсли;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение <> "Заказы" Тогда
		Текст = Текст + "
		|	СУММА(РезервНаСкладе),
		|	СУММА(РезервНаДругихСкладах),";
	КонецЕсли;

	Текст = Текст + "
	|	СУММА(Ожидаем),
	|	СУММА(РезервВсего)
	|ПО
	|	РегЗаказы.Номенклатура,
	|	РегЗаказы.ХарактеристикаНоменклатуры,
	|	" + ИмяДопИтоги + "
	|	РегЗаказы.ЗаказПокупателя
	|";

	Возврат Текст;

КонецФункции // СоздатьТекстЗапроса()

// Функция возвращает список собственных контрагентов
//
// Возвращаемое значение:
//  Список контрагентов - список значений.
//
Функция СписокСобственныхКонтрагентов()

	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СобственныеКонтрагенты.Контрагент
	|
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	//в список собственных не должен попасть контрагент, который соответствует организации,
	//	выбранной на закладке Параметры
	|ГДЕ СобственныеКонтрагенты.Объект<>&текОрганизация
	|УПОРЯДОЧИТЬ ПО
	|	СобственныеКонтрагенты.Контрагент.Представление
	|";

	Запрос.УстановитьПараметр("текОрганизация",ПолеВводаОрганизация);
	СобственныеКонтрагенты       = Запрос.Выполнить().Выгрузить();
	СписокСобственныеКонтрагенты = Новый СписокЗначений;

	Для Каждого Обход Из СобственныеКонтрагенты Цикл
		СписокСобственныеКонтрагенты.Добавить(Обход.Контрагент);
	КонецЦикла;

	Возврат СписокСобственныеКонтрагенты;

КонецФункции // СписокСобственныхКонтрагентов()

// Функция возвращает собственного контрагента продавца
//
// Возвращаемое значение:
//  Контрагент - ссылка на справочник "Контрагенты".
//
Функция СобственныйКонтрагентПродавец(Организация)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Организация", Организация);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобственныеКонтрагенты.Контрагент
	|ИЗ
	|
	|РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|
	|ГДЕ
	|	СобственныеКонтрагенты.Объект.Ссылка = &Организация
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Продавец = Выборка.Контрагент;
	Иначе
		Продавец = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

	Возврат Продавец;

КонецФункции // СобственныйКонтрагентПродавец()

// Функция возвращает собственного контрагента продавца
//
// Возвращаемое значение:
//  Организация - ссылка на справочник "Организации".
//
Функция СобственныйОрганизацияПокупатель(Контрагент)

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Контрагент", Контрагент);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобственныеКонтрагенты.Объект.Ссылка КАК Организация
	|ИЗ
	|	РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
	|
	|ГДЕ
	|	СобственныеКонтрагенты.Контрагент.Ссылка = &Контрагент
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Покупатель = Выборка.Организация;
	Иначе
		Покупатель = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	Возврат Покупатель;

КонецФункции // СобственныйОрганизацияПокупатель()

// Обновляет данные в колонках по остаткам в регистрах
//
// Параметры:
//  Нет.
//
Процедура ОбновитьДанныеВКолонках()

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда
		Для Каждого ТекСтрока Из ТаблицаДанных Цикл
			Для Каждого Узел Из мСтруктГрупп["Таблица"] Цикл
				Для Каждого Лист Из Узел.Узел Цикл
					СтруктПарам = Новый Структура;
					СтруктПарам.Вставить("ХарактеристикаНоменклатуры", ТекСтрока.Характеристика);
					СтруктПарам.Вставить("Номенклатура",               ТекСтрока.Номенклатура);
					СтруктПарам.Вставить("Склад",                      ПолеВводаСклад);
					СтруктПарам.Вставить("ДокументРезерва",            Лист.Ключ);
					
					ТекСтрока[Лист.ИмяПоля] = РегистрыНакопления.ТоварыВРезервеНаСкладах.Остатки(
					                          КонецДня(ПолеВводаДатаАктуальности),
					                          СтруктПарам,
					                          "ДокументРезерва",
					                          "Количество").Итог("Количество");
					Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв" Тогда
						СтруктПарам = Новый Структура;
						СтруктПарам.Вставить("Хар",   ТекСтрока.Характеристика);
						СтруктПарам.Вставить("Товар", ТекСтрока.Номенклатура);
						СтруктПарам.Вставить("Заказ", Лист.Ключ);
						ДобавитьКолонкиДополнительныхПолей(Узел.Узел, Лист, СтруктПарам);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОбновитьДанныеВКолонках()

// Заполняет таблицу данных сведениями о свободных остатках номенклатуры
//
// Параметры:
//  Нет.
//

Процедура ЗаполнитьОстатками()
	Перем Запрос;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности",  КонецДня(ПолеВводаДатаАктуальности));
	Запрос.УстановитьПараметр("Склад",             ПолеВводаСклад);
	Запрос.УстановитьПараметр("Организация",       ПолеВводаОрганизация);
	Запрос.УстановитьПараметр("ПревышениеОстатка", мКонтролироватьОстаткиПоОрганизациям);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОстаткиСклад.Номенклатура                                  КАК Товар,
	|	ОстаткиСклад.ХарактеристикаНоменклатуры                    КАК Характеристика,
	|	СУММА(	ЕСТЬNULL(ОстаткиСклад.КоличествоОстаток, 0.00)
	|			- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0.00)
	|			- ЕСТЬNULL(ТоварыКПередачеСоСкладов.КоличествоОстаток, 0.00)
	|		)                                                       КАК КоличествоПоСкладу,
	|	СУММА(ЕСТЬNULL(ОстаткиОрганизации.КоличествоОстаток, 0.00)) КАК КоличествоПоОрганизации
	|
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаАктуальности) КАК ОстаткиСклад
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаАктуальности, Организация = &Организация) КАК ОстаткиОрганизации
	|ПО
	|	ОстаткиОрганизации.ХарактеристикаНоменклатуры = ОстаткиСклад.ХарактеристикаНоменклатуры
	|	И ОстаткиОрганизации.Номенклатура             = ОстаткиСклад.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаАктуальности, Склад = &Склад) КАК ТоварыВРезервеНаСкладах
	|ПО
	|	ТоварыВРезервеНаСкладах.Номенклатура = ОстаткиСклад.Номенклатура
	|	И ТоварыВРезервеНаСкладах.ХарактеристикаНоменклатуры = ОстаткиСклад.ХарактеристикаНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаАктуальности, Склад = &Склад) КАК ТоварыКПередачеСоСкладов
	|ПО
	|	ТоварыКПередачеСоСкладов.Номенклатура = ОстаткиСклад.Номенклатура
	|	И ТоварыКПередачеСоСкладов.ХарактеристикаНоменклатуры = ОстаткиСклад.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ОстаткиСклад.Склад = &Склад
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСклад.Номенклатура,
	|	ОстаткиСклад.ХарактеристикаНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	СУММА(	ЕСТЬNULL(ОстаткиСклад.КоличествоОстаток, 0.00)
	|			- ЕСТЬNULL(ТоварыВРезервеНаСкладах.КоличествоОстаток, 0.00)
	|			- ЕСТЬNULL(ТоварыКПередачеСоСкладов.КоличествоОстаток, 0.00)
	|		) > 0
	|	И (СУММА(ОстаткиОрганизации.КоличествоОстаток) > 0 ИЛИ &ПревышениеОстатка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиСклад.Номенклатура.Наименование,
	|	ОстаткиСклад.ХарактеристикаНоменклатуры.Наименование";

	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Обход Из РезультатЗапроса Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();

		НоваяСтрока.Номенклатура   = Обход.Товар;
		НоваяСтрока.Характеристика = Обход.Характеристика;
		НоваяСтрока.Единица        = Обход.Товар.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент    = НоваяСтрока.Единица.Коэффициент;
		НоваяСтрока.ТоварТара      = Перечисления.ТоварТара.Товар;
		НоваяСтрока.Остаток        = ?(мКонтролироватьОстаткиПоОрганизациям,
		                             Обход.КоличествоПоСкладу,
		                             Мин(Обход.КоличествоПоСкладу, Обход.КоличествоПоОрганизации));
		НоваяСтрока.Нераспределено = НоваяСтрока.Остаток;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьОстатками()

// Заполняет колонки с ценами
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьКолонкиЦена(ТекСтрока)

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда
		Для Каждого Узел Из мСтруктГрупп["Таблица"] Цикл
			Валюта = Неопределено;
			Цена   = ЦенаТовара(ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Узел.Ключ.ТипЦенРозничнойТорговли, Валюта);
			ТекСтрока["Цена_"   + Узел.Индекс] = Цена;
			ТекСтрока["Валюта_" + Узел.Индекс] = Валюта;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьКолонкиЦена()

// Формирует таблицу значений с данными об остатках
//
// Параметры: 
//  Товар - товар, остатки которого надо вернуть
//  Хар   - характеристика номенклатуры, остатки по которой надо вернуть
//  СУчетомРезерва - флаг, надо выдавать остатки с все (с учетом резерва) или только свободные.
//          Истина - все остатки (в том числе и резерв)
//          Ложь   - только свободные остатки
//
// Возвращаемое значение:
//  Таблица значений с остатками
//
Функция ПолучитьТабОстатков(Товар, Хар, СУчетомРезерва)
	Перем СтруктПарам;

	Дата = КонецДня(ПолеВводаДатаАктуальности);

	СтруктПарам = Новый Структура;
	СтруктПарам.Вставить("ХарактеристикаНоменклатуры", Хар);
	СтруктПарам.Вставить("Номенклатура",               Товар);
	СтруктПарам.Вставить("Склад",                      ПолеВводаСклад);

	Остаток = РегистрыНакопления.ТоварыНаСкладах.Остатки(Дата, СтруктПарам,, "Количество").Итог("Количество");

	Если СУчетомРезерва Тогда
		Резерв = РегистрыНакопления.ТоварыВРезервеНаСкладах.Остатки(Дата, СтруктПарам,, "Количество").Итог("Количество");
	Иначе
		Резерв  = 0;
	КонецЕсли;

	Возврат Остаток + Резерв;

КонецФункции // ПолучитьТабОстатков()

// Заполняет текущую строку таблицы данных сведениями об остатках и ценах
//
// Параметры:
//  ТекСтрока                        - строка таблицы данных
//  ПриОкончанииРедактированияЯчейки - булево, признак вызова функции из процедуры при окончании редактирования ячейки
//
Процедура ЗаполнитьСтрокуДанными(ТекСтрока, ПриОкончанииРедактированияЯчейки = Ложь)

	Дата = КонецДня(ПолеВводаДатаАктуальности);

	Если ТекСтрока.ТоварТара = Неопределено
		Или ТекСтрока.ТоварТара.Пустая() Тогда

		ТекСтрока.ТоварТара = Перечисления.ТоварТара.Товар;
	КонецЕсли;

	Если Не ПриОкончанииРедактированияЯчейки Тогда
		ЗаполнитьКолонкиЦена(ТекСтрока);
	КонецЕсли;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда

		// Получить свободный остаток на складе
		ТекСтрока.Остаток = ПолучитьТабОстатков(ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Ложь);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		// Получить резерв на складе
		ТабОстатков = ПолучитьТабОстатков(ТекСтрока.Номенклатура, ТекСтрока.Характеристика, Истина);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда

		Если ТекСтрока.Заказ = Неопределено
		 Или ТекСтрока.Номенклатура.Пустая() Тогда

			ТекСтрока.Остаток = 0;
			Возврат;
		КонецЕсли;

		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ХарактеристикаНоменклатуры", ТекСтрока.Характеристика);
		СтруктПарам.Вставить("Номенклатура",               ТекСтрока.Номенклатура);
		СтруктПарам.Вставить("ЗаказПокупателя",            ТекСтрока.Заказ);

		Заказано = РегистрыНакопления.ЗаказыПокупателей.Остатки(
		           Дата, СтруктПарам, "ЗаказПокупателя", "Количество").Итог("Количество");

		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ХарактеристикаНоменклатуры", ТекСтрока.Характеристика);
		СтруктПарам.Вставить("Номенклатура",               ТекСтрока.Номенклатура);
		СтруктПарам.Вставить("ДокументРезерва",            ТекСтрока.Заказ);

		Резерв = РегистрыНакопления.ТоварыВРезервеНаСкладах.Остатки(
		         Дата, СтруктПарам,, "Количество").Итог("Количество");

		СтруктПарам = Новый Структура;
		СтруктПарам.Вставить("ХарактеристикаНоменклатуры", ТекСтрока.Характеристика);
		СтруктПарам.Вставить("Номенклатура",               ТекСтрока.Номенклатура);
		СтруктПарам.Вставить("ЗаказПокупателя",            ТекСтрока.Заказ);

		Ожидаем = РегистрыНакопления.РазмещениеЗаказовПокупателей.Остатки(
		          Дата, СтруктПарам,, "Количество").Итог("Количество");

		ТекСтрока.Остаток = Заказано - Резерв - Ожидаем;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтрокуДанными()

// Отработка действий связанных с интерактивным вводом новой строки в таблицу данных
//
// Параметры:
//  Товар - добавленный товар
//  Характ - добавленная характеристика товара (необязательный параметр)
//  Заказ  - Заказ (необязательный параметр)
//
Процедура ДобавитьСтрокуВТаблицуДанных(Товар, Характ = Неопределено, Заказ = Неопределено)
	Перем НоваяСтрока;

	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.Номенклатура   = Товар;
	НоваяСтрока.Характеристика = Характ;
	НоваяСтрока.Единица        = Товар.ЕдиницаХраненияОстатков;
	НоваяСтрока.Коэффициент    = НоваяСтрока.Единица.Коэффициент;
	НоваяСтрока.Заказ          = Заказ;

	ЗаполнитьСтрокуДанными(НоваяСтрока);

	ЭлементыФормы.ТабличноеПолеДанных.ТекущаяСтрока = НоваяСтрока;

КонецПроцедуры // ДобавитьСтрокуВТаблицуДанных()

// Обновляет надписи на кнопках командной панели в зависимости от режима работы
//
// Параметры:
//  Нет.
//
Процедура ОбновитьНадписьВМеню()

	Пункт = ЭлементыФормы.КоманднаяПанельДействияТаблицаДанных.Кнопки["ДобавитьКолонку"];

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда

		Пункт.Текст = "Склады";

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		Пункт.Текст = "Заказы";
		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв" Тогда
			Пункт.Текст = "Заказы (cобственные контрагенты)";
		Иначе
			Пункт.Текст = "Заказы";
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда

		 Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка" 
			 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
			Пункт.Текст = "Собственные контрагенты (договоры)";
		Иначе
			Пункт.Текст = "Покупатели (договоры)";
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда

		Пункт.Текст = "Поставщики (договоры)";

	КонецЕсли;

	Пункт.Пояснение = "";
	Пункт.Подсказка = Пункт.Пояснение;

КонецПроцедуры // ОбновитьНадписьВМеню()

// Возвращает владельца группировки в зависимости от режима работы
//
// Параметры: 
//  Элемент подчиненной группировки
//
// Возвращаемое значение:
//  Владелец группировки верхнего уровня
//
Функция ВладелецГруппы(Элемент)

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда

		Возврат Элемент.Заказчик;

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		Возврат Элемент.ДоговорКонтрагента;

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
		 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда

		Возврат Элемент.Владелец;

	КонецЕсли;

	Возврат NULL;

КонецФункции // ВладелецГруппы()

// Модифицирует меню "Заполнить" в зависимости от режима работы
//
// Параметры:
//  Нет.
//
Процедура СоздатьМенюЗаполнить()
	Перем Меню;
	Перем Пункт;
	Перем Текст;
	Перем Подсказка;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда

		Текст     = "Заполнить по внутренним заказам";
		Подсказка = "Заполнить таблицу данными по внутренним заказам";

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв" Тогда
			Текст     = "Заполнить по заказам собственных контрагентов";
			Подсказка = "Заполнить таблицу данными по заказам собственных контрагентов";
		Иначе
			Текст     = "Заполнить по заказам покупателей";
			Подсказка = "Заполнить таблицу данными по заказам покупателей";
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда

		Текст     = "Заполнить по остаткам";
		Подсказка = "Заполнить таблицу данными об остатках на складе";

	КонецЕсли;

	Меню  = ЭлементыФормы.КоманднаяПанельДействияТаблицаДанных.Кнопки["КнопкаЗаполнить"];
	Пункт = Меню.Кнопки["АвтоЗаполнение"];
	Пункт.Текст     = Текст;
	Пункт.Подсказка = Подсказка;
	Пункт.Пояснение = Пункт.Подсказка;

	// Для продажи собственной фирмы надо добавить новый пункт меню
	Пункт = Меню.Кнопки.Найти("РаспределитьПоОтрицательнымОстаткам");

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка" Тогда

		Если Пункт = Неопределено Тогда
			Пункт = Меню.Кнопки.Добавить();
			Пункт.Имя         = "РаспределитьПоОтрицательнымОстаткам";
			Пункт.ТипКнопки   = ТипКнопкиКоманднойПанели.Действие;
			Пункт.Доступность = Истина;
			Пункт.Отображение = ОтображениеКнопкиКоманднойПанели.Авто;
		КонецЕсли;
		
		Пункт.Текст       = "Распределить по отрицательным остаткам";
		Пункт.Подсказка   = "Распределить положительные остатки организации по отрицательным остаткам организаций собственных контрагентов";
		Пункт.Пояснение   = "Распределить положительные остатки организации по отрицательным остаткам организаций собственных контрагентов";
		Пункт.Действие    = Новый Действие("РаспределитьПоОтрицательнымОстаткам");
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
        Если Пункт = Неопределено Тогда
			Пункт = Меню.Кнопки.Добавить();
			Пункт.Имя         = "РаспределитьПоОтрицательнымОстаткам";
			Пункт.ТипКнопки   = ТипКнопкиКоманднойПанели.Действие;
			Пункт.Доступность = Истина;
			Пункт.Отображение = ОтображениеКнопкиКоманднойПанели.Авто;
		КонецЕсли;
		
		Пункт.Текст       = "Распределить по собственным контрагентам";
		Пункт.Подсказка   = "Распределить положительные остатки организации по отрицательным остаткам организаций собственных контрагентов";
		Пункт.Пояснение   = "Распределить положительные остатки организации по отрицательным остаткам организаций собственных контрагентов";
        Пункт.Действие    = Новый Действие("РаспределитьОтрицательныеОстатки");
	Иначе

		// Если это не продажа собственной фирме, то второй пункт меню не нужен
		Если Пункт <> Неопределено Тогда
			Меню.Кнопки.Удалить(1);
		КонецЕсли;

	КонецЕсли;
	
	// Изменим надпись на кнопках добавить/удалить колонку табличного поля
	ОбновитьНадписьВМеню();

	Флаг = ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" ;

	КнопкаПанели = ЭлементыФормы.КоманднаяПанельДействияТаблицаДанных.Кнопки.Найти("ИзменитьДоговор");

	Если Флаг Тогда
		Если КнопкаПанели = Неопределено Тогда // Надо добавить
			КнопкаПанели = ЭлементыФормы.КоманднаяПанельДействияТаблицаДанных.Кнопки.Вставить(
			               6,
			               "ИзменитьДоговор",
			               ТипКнопкиКоманднойПанели.Действие,
			               "Изменить договор",
			               Новый Действие("КоманднаяПанельДействияТаблицаДанныхИзменитьДоговор"));
		КонецЕсли;
	Иначе // Надо удалить
		Если Не КнопкаПанели = Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельДействияТаблицаДанных.Кнопки.Удалить(
				ЭлементыФормы.КоманднаяПанельДействияТаблицаДанных.Кнопки.Индекс( КнопкаПанели));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СоздатьМенюЗаполнить()

// Выполняет необходимые действия над сформированными документами
//
// Параметры:
//  СписДок - список сформированных документов
//
Процедура ОбработатьСписокДокументов(СписДок)
	Перем Обработка;
	Перем Флаг;

	Если СписДок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Проведение документов
	Флаг = ЭлементыФормы.ФлагФормироватьСчетФактуру.Доступность И ФлагФормироватьСчетФактуру;
	Если ФлагПровести Тогда
		Для Каждого Док Из СписДок Цикл
			ОбъектДок = Док.Значение.ПолучитьОбъект();
	
			Попытка
				Если НачалоДня( ПолеВводаДатаАктуальности) = НачалоДня( ТекущаяДата()) Тогда
					ОбъектДок.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
				Иначе
					ОбъектДок.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				КонецЕсли;
			Исключение
				Сообщить(" - Документ не проведен " + ОбъектДок.Номер + " " + ОбъектДок.Дата + " " + ОбъектДок.Метаданные().Синоним, СтатусСообщения.Внимание);
			КонецПопытки;

			Если Флаг И ОбъектДок.Проведен Тогда

				Если ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
					ОбъектСчетаФактуры = Документы["СчетФактураВыданный"].СоздатьДокумент();
				ИначеЕсли ТипЗнч(ОбъектДок) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
					ОбъектСчетаФактуры = Документы["СчетФактураПолученный"].СоздатьДокумент();
				Иначе
					Продолжить;
				КонецЕсли;

				ОбъектСчетаФактуры.Дата = ПолеВводаДатаАктуальности;
				ОбъектСчетаФактуры.УстановитьВремя();
				ОбъектСчетаФактуры.Заполнить(ОбъектДок.Ссылка);
				Если ТипЗнч(ОбъектСчетаФактуры) = Тип("ДокументОбъект.СчетФактураВыданный") И ОбъектСчетаФактуры.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
					ОбъектСчетаФактуры.ДатаНомерДокументовОплаты.Добавить();
					ОбъектСчетаФактуры.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = ОбъектСчетаФактуры.ДатаПлатежноРасчетногоДокумента;
					ОбъектСчетаФактуры.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = ОбъектСчетаФактуры.НомерПлатежноРасчетногоДокумента;
				КонецЕсли;

				Попытка
					ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					Сообщить(" - Документ не проведен " + ОбъектСчетаФактуры.Номер + " " + ОбъектСчетаФактуры.Дата + " " + ОбъектСчетаФактуры.Метаданные().Синоним, СтатусСообщения.Внимание);
				КонецПопытки;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Формирование печатных форм документов
	Если ФлагПечатьФорм Тогда
		СпособПечати = ?(ПереключательСпособПечатиБезПросмотра = 0, 1, 0);

		Для Каждого Док Из СписДок Цикл
			УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(Док.Значение.ПолучитьОбъект());
		КонецЦикла;
	КонецЕсли;

	// Печать реестра документов
	Если ФлагПечатьРеестра Тогда
		Обработка = Обработки.ГрупповаяОбработкаСправочниковИДокументов.Создать();
		Обработка.ПечатьРеестра(СписДок.ВыгрузитьЗначения());
	КонецЕсли;

КонецПроцедуры // ОбработатьСписокДокументов()

// Удаляет колонку из таблицы значений или табличного поля по имени
// В случае если такой колонки нет, то ничего не делается.
//
// Параметры:
//  Таб - таблица из которой надо удалить колонку
//  ИмяКол - имя удаляемой колонки
//  ИзменитьПоложение - флаг необходимости изменения положения колонки
//                      следующей за удаляемой
//
Процедура УдалитьКолонку(Таб, ИмяКол, Знач ИзменитьПоложение = Ложь)
	Перем Колонка;
	Перем Индекс;

	Колонка = Таб.Колонки.Найти( ИмяКол);
	Если Не Колонка = Неопределено Тогда
		Индекс = Таб.Колонки.Индекс( Колонка);
		Если ИзменитьПоложение И Колонка.Положение = ПоложениеКолонки.НаСледующейСтроке Тогда
			Если Таб.Колонки.Количество() > Индекс + 1
			   И Таб.Колонки[Индекс + 1].Положение = ПоложениеКолонки.ВТойЖеКолонке Тогда

				Таб.Колонки[Индекс + 1].Положение = ПоложениеКолонки.НаСледующейСтроке;
			КонецЕсли;
		КонецЕсли;

		Таб.Колонки.Удалить( Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьКолонку()

// Удаляет колонки и строки из таблицы данных
//
// Параметры:
//  Нет.
//
Процедура ОчиститьТабДанных()

	Если мСтруктГрупп = Неопределено Тогда
		СоздатьСтруктГрупп();
	КонецЕсли;

	ТаблицаДанных.Очистить();

	Для Каждого Узел Из мСтруктГрупп["Таблица"] Цикл
		Для Каждого Лист Из Узел.Узел Цикл
			УдалитьКолонку(ТаблицаДанных, Лист.ИмяПоля);
			УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Лист.ИмяПоля);
		КонецЦикла;
		УдалитьКолонку(ТаблицаДанных, Узел.ИмяПоля);
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Узел.ИмяПоля);

		// Удалим также колонку "Цена" если она есть
		УдалитьКолонку(ТаблицаДанных, "Цена_" + Узел.Индекс);
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, "Цена_" + Узел.Индекс);

		// Удалим также колонку "Валюта цены" если она есть
		УдалитьКолонку(ТаблицаДанных, "Валюта_" + Узел.Индекс);
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, "Валюта_" + Узел.Индекс);
		УдалитьКолонку(ТаблицаДанных, "ПроцентАвтоматическихСкидок_" + Узел.Индекс);
	КонецЦикла;

	СоздатьСтруктГрупп();

КонецПроцедуры // ОчиститьТабДанных()

// Формирует документы "ПеремещениеТоваров"
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыПеремещения()
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Перемещение товаров"".....", СтатусСообщения.Обычное);
	Сообщить("==============================================",   СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ФлагУжеСообщали = Ложь;
	Для Каждого ГруппаСклад Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляСклад = ГруппаСклад.ИмяПоля;

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда

			Если ТаблицаДанных.Итог(ИмяПоляСклад) = 0 Тогда
				Продолжить;
			КонецЕсли;

			НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();
			НовыйДок.Дата = ПолеВводаДатаАктуальности;
			НовыйДок.УстановитьВремя();

			НовыйДок.ВидОперации                  = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
			НовыйДок.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			НовыйДок.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			
			НовыйДок.Подразделение        = ПолеВводаПодразделение;
			НовыйДок.Ответственный        = ПолеВводаОтветственный;
			НовыйДок.Организация          = ПолеВводаОрганизация;
			НовыйДок.СкладОтправитель     = ПолеВводаСклад;
			НовыйДок.СкладПолучатель      = ГруппаСклад.Ключ;
			НовыйДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			ЕстьЦена = (НовыйДок.СкладОтправитель.ВидСклада   = Перечисления.ВидыСкладов.НТТ
			           ИЛИ НовыйДок.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ);

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали
					  И СтрокаДанных.Нераспределено < 0 Тогда
					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);
					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;
				КонецЕсли;

				Если СтрокаДанных[ИмяПоляСклад] > 0 Тогда
					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						НоваяСтрока = НовыйДок.Товары.Добавить();
						НоваяСтрока.Номенклатура                 = СтрокаДанных.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаДанных.Характеристика;
						НоваяСтрока.Количество                   = СтрокаДанных[ИмяПоляСклад];
						НоваяСтрока.ЕдиницаИзмерения             = СтрокаДанных.Единица;
						НоваяСтрока.Коэффициент                  = СтрокаДанных.Коэффициент;
						НоваяСтрока.Качество                     = Справочники.Качество.Новый;

						Если ЕстьЦена Тогда
							Валюта = СтрокаДанных["Валюта_" + ГруппаСклад.Индекс];
							Цена   = СтрокаДанных["Цена_"   + ГруппаСклад.Индекс];
							Цена   = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(
							         Цена, Валюта, мВалютаРегламентированногоУчета, 1, 1, ПолеВводаДатаАктуальности);

							НоваяСтрока.Цена = Цена;
						Конецесли;
					Иначе

						НоваяСтрока = НовыйДок.ВозвратнаяТара.Добавить();
						НоваяСтрока.Номенклатура                 = СтрокаДанных.Номенклатура;
						НоваяСтрока.Количество                   = СтрокаДанных[ИмяПоляСклад];

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НовыйДок.ЗаполнитьПоСериям();
			НовыйДок.Записать();
			СписокДокументов.Добавить(НовыйДок.Ссылка);
			Сообщить(" - " + НовыйДок.Номер + " " + НовыйДок.Дата + " " + НовыйДок.Метаданные().Синоним, СтатусСообщения.Обычное);
			ФлагУжеСообщали = Истина;

		Иначе

			Для Каждого ГруппаЗаказ Из ГруппаСклад.Узел Цикл
				ИмяПоляЗаказ = ГруппаЗаказ.ИмяПоля;

				Если ТаблицаДанных.Итог(ИмяПоляЗаказ) = 0 Тогда
					Продолжить;
				КонецЕсли;

				НовыйДок = Документы.ПеремещениеТоваров.СоздатьДокумент();
				НовыйДок.Дата = ПолеВводаДатаАктуальности;
				НовыйДок.УстановитьВремя();

				НовыйДок.ОтражатьВУправленческомУчете = ФлагУпрУчет;
				НовыйДок.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;

				НовыйДок.Подразделение        = ПолеВводаПодразделение;
				НовыйДок.Ответственный        = ПолеВводаОтветственный;
				НовыйДок.Организация          = ПолеВводаОрганизация;
				НовыйДок.СкладОтправитель     = ПолеВводаСклад;
				НовыйДок.СкладПолучатель      = ГруппаСклад.Ключ;
				НовыйДок.ВнутреннийЗаказ      = ГруппаЗаказ.Ключ;
				НовыйДок.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;

				ЕстьЦена = (НовыйДок.СкладОтправитель.ВидСклада   = Перечисления.ВидыСкладов.НТТ
				           ИЛИ НовыйДок.СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ);

				Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
					Если Не ФлагУжеСообщали
						  И СтрокаДанных.Нераспределено < 0 Тогда
						Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
								 ?(СтрокаДанных.Характеристика.Пустая(), "",
								 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
								 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
								 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);
						Сообщить("Строка пропущена!", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;

					Если СтрокаДанных[ИмяПоляЗаказ] > 0 Тогда
						Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

							НоваяСтрока = НовыйДок.Товары.Добавить();
							НоваяСтрока.Номенклатура                 = СтрокаДанных.Номенклатура;
							НоваяСтрока.ХарактеристикаНоменклатуры   = СтрокаДанных.Характеристика;
							НоваяСтрока.Количество                   = СтрокаДанных[ИмяПоляЗаказ];
							НоваяСтрока.ЕдиницаИзмерения             = СтрокаДанных.Единица;
							НоваяСтрока.Коэффициент                  = СтрокаДанных.Коэффициент;
							НоваяСтрока.ДокументРезерва              = ГруппаЗаказ.Ключ;
							НоваяСтрока.Качество                     = Справочники.Качество.Новый;

							Если ЕстьЦена Тогда
								Валюта = СтрокаДанных["Валюта_" + ГруппаСклад.Индекс];
								Цена   = СтрокаДанных["Цена_"   + ГруппаСклад.Индекс];
								Цена   = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(
								         Цена, Валюта, мВалютаРегламентированногоУчета, 1, 1, ПолеВводаДатаАктуальности);

								НоваяСтрока.Цена = Цена;
							Конецесли;
						Иначе

							НоваяСтрока = НовыйДок.ВозвратнаяТара.Добавить();
							НоваяСтрока.Номенклатура                 = СтрокаДанных.Номенклатура;
							НоваяСтрока.Количество                   = СтрокаДанных[ИмяПоляЗаказ];
							НоваяСтрока.ДокументРезерва              = ГруппаЗаказ.Ключ;

						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				НовыйДок.ЗаполнитьПоСериям();
				НовыйДок.Записать();
				СписокДокументов.Добавить(НовыйДок.Ссылка);
				Сообщить(" - " + НовыйДок.Номер + " " + НовыйДок.Дата + " " + НовыйДок.Метаданные().Синоним, СтатусСообщения.Обычное);
				ФлагУжеСообщали = Истина;

			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("==============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.",             СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыПеремещения()

// Возвращает тип цен в зависимости от режима работы
// и выбранных настроек
//
// Параметры: 
//  Заказ - заказ покупателя
//  Тип цен - тип цен (по умолчанию - из договора)
//
// Возвращаемое значение:
//  Тип цен
//
Функция ПолучитьТипЦен(Заказ, ТипЦен)

	Если  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
	 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
	 Или  ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв"
	 И Не Заказ = Неопределено Тогда

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", Заказ.Метаданные()) Тогда
			Возврат Заказ.ТипЦен;
		Иначе
			// Рекурсия. Значит не смогли получить тип цен из заказа.
			Возврат ПолучитьТипЦен(Неопределено, ТипЦен);
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.ФлагЦеныИзДоговора.Доступность И Не ФлагЦеныИзДоговора Тогда
			Возврат ПолеВводаТипЦен;
		Иначе
			Возврат ТипЦен;
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьТипЦен()

// Возвращает валюту документа в зависимости от валюты
// регламентированного учета и валюты договора
//
// Параметры: 
//  ВалютаДоговора - валюта договора
//
// Возвращаемое значение:
//  Валюта документа
//
Функция ПолучитьВалютуДокумента(ВалютаДоговора)

	Если ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение Тогда
		Возврат ВалютаДоговора;
	Иначе
		Возврат мВалютаРегламентированногоУчета;
	КонецЕсли;

КонецФункции // ПолучитьВалютуДокумента()

// Формирует документы "РеализацияТоваров" в режиме отгрузки из резерва
//
// Параметры: 
//  ВидОперации - вид операции (комиссия/продажа)
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыРеализацияТоваров(ВидОперации)
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Реализация товаров"".....", СтатусСообщения.Обычное);
	Сообщить("=============================================",       СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ФлагУжеСообщали = Ложь;

	Для Каждого ГруппаДоговор Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляДоговор = ГруппаДоговор.ИмяПоля;

		Для Каждого ГруппаЗаказ Из ГруппаДоговор.Узел Цикл
			ИмяПоляЗаказ = ГруппаЗаказ.ИмяПоля;

			Если ТаблицаДанных.Итог(ИмяПоляЗаказ) = 0 Тогда
				Продолжить;
			КонецЕсли;

			НовыйДок      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НовыйДок.Дата = ПолеВводаДатаАктуальности;
			НовыйДок.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДок.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");

			НовыйДок.ДоговорКонтрагента = ГруппаДоговор.Ключ;
			НовыйДок.Подразделение      = ПолеВводаПодразделение;
			НовыйДок.Ответственный      = ПолеВводаОтветственный;
			НовыйДок.Организация        = ПолеВводаОрганизация;
			НовыйДок.ВидПередачи        = Перечисления.ВидыПередачиТоваров.СоСклада;
			НовыйДок.Склад              = ПолеВводаСклад;
			НовыйДок.Контрагент         = ГруппаДоговор.Ключ.Владелец;
			НовыйДок.ВидОперации        = ВидОперации;
			НовыйДок.Сделка             = ГруппаЗаказ.Ключ;

			НовыйДок.ТипЦен           = ПолучитьТипЦен(НовыйДок.Сделка, ГруппаДоговор.Ключ.ТипЦен);
			НовыйДок.УчитыватьНДС     = ФлагУчитыватьНДС;
			Если ЭлементыФормы.ФлагУчитыватьНДС.Доступность Тогда
				НовыйДок.СуммаВключаетНДС = ФлагЦенаВключаетНДС;
			Иначе
				НовыйДок.СуммаВключаетНДС = НовыйДок.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;

			НовыйДок.ВалютаДокумента         = ПолучитьВалютуДокумента(ГруппаДоговор.Ключ.ВалютаВзаиморасчетов);
			Курс                             = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДок.ВалютаДокумента, ПолеВводаДатаАктуальности);
			НовыйДок.КурсВзаиморасчетов      = Курс.Курс;
			НовыйДок.КратностьВзаиморасчетов = Курс.Кратность;

			НовыйДок.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			НовыйДок.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			НовыйДок.ОтражатьВНалоговомУчете      = ФлагНалогУчет;

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали И СтрокаДанных.Нераспределено < 0 Тогда

					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);
					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;

				КонецЕсли;

				Если СтрокаДанных[ИмяПоляЗаказ] > 0 Тогда

					Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
					 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
					 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

						СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

					КонецЕсли;

					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						НоваяСтрока = НовыйДок.Товары.Добавить();
						НоваяСтрока.Номенклатура               = СтрокаДанных.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДанных.Характеристика;
						НоваяСтрока.Количество                 = СтрокаДанных[ИмяПоляЗаказ];
						НоваяСтрока.ЕдиницаИзмерения           = СтрокаДанных.Единица;
						НоваяСтрока.Коэффициент                = СтрокаДанных.Коэффициент;
						Если ГруппаДоговор.Узел.Колонки.Найти("ТаблицаДополнительныеПоля") <> Неопределено Тогда
							СтруктураПоиска = Новый Структура("Заказ, Номенклатура, ХарактеристикаНоменклатуры", ГруппаЗаказ.Ключ, СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
							НайденныеСтроки = ГруппаЗаказ.ТаблицаДополнительныеПоля.НайтиСтроки(СтруктураПоиска);
							Если НайденныеСтроки.Количество() > 0 Тогда
								строка = НайденныеСтроки[0];
								Для Каждого ДополнительныеПоляДанных Из мДополнительныеПоля Цикл
									НоваяСтрока[ДополнительныеПоляДанных.Значение] = строка[ДополнительныеПоляДанных.Ключ];
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;

						Если ФлагУчитыватьНДС Тогда
							НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
						КонецЕсли;

						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрока, НовыйДок.ЭтотОбъект, мВалютаРегламентированногоУчета);
						НоваяСтрока.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;
						НоваяСтрока.ПроцентСкидкиНаценки         = ПолеВводаПроцентСкидкиНаценки;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйДок);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйДок);

					Иначе

						НоваяСтрока = НовыйДок.ВозвратнаяТара.Добавить();
						НоваяСтрока.Номенклатура          = СтрокаДанных.Номенклатура;
						НоваяСтрока.Количество            = СтрокаДанных[ИмяПоляЗаказ];
						ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(НоваяСтрока, НовыйДок.ЭтотОбъект, , мВалютаРегламентированногоУчета);
						НоваяСтрока.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;

						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйДок);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДок);
			НовыйДок.ЗаполнитьТабличныеЧастиПередПроведением();
			НовыйДок.Записать();
			СписокДокументов.Добавить(НовыйДок.Ссылка);

			Сообщить(" - " + НовыйДок.Номер + " " + НовыйДок.Дата + " " + НовыйДок.Метаданные().Синоним, СтатусСообщения.Обычное);
			ФлагУжеСообщали = Истина;

		КонецЦикла;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("=============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.", СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыРеализацияТоваров()

// Формирует документы "РеализацияТоваров" в режиме из свободного остатка на складе
//
// Параметры: 
//  ВидОперации - вид операции (комиссия/продажа)
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыРеализацияТоваровИзОстатка(ВидОперации)
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Реализация товаров"".....", СтатусСообщения.Обычное);
	Сообщить("=============================================",       СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ФлагУжеСообщали = Ложь;
	Для Каждого ГруппаКлиент Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляКлиент = ГруппаКлиент.ИмяПоля;

		Для Каждого ГруппаДоговор Из ГруппаКлиент.Узел Цикл
			ИмяПоляДоговор = ГруппаДоговор.ИмяПоля;

			Если ТаблицаДанных.Итог(ИмяПоляДоговор) = 0 Тогда
				Продолжить;
			КонецЕсли;

			НовыйДок      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НовыйДок.Дата = ПолеВводаДатаАктуальности;
			НовыйДок.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДок.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");

			НовыйДок.ДоговорКонтрагента = ГруппаДоговор.Ключ;
			НовыйДок.Подразделение      = ПолеВводаПодразделение;
			НовыйДок.Ответственный      = ПолеВводаОтветственный;
			НовыйДок.Организация        = ПолеВводаОрганизация;
			НовыйДок.ВидПередачи        = Перечисления.ВидыПередачиТоваров.СоСклада;
			НовыйДок.Склад              = ПолеВводаСклад;
			НовыйДок.ВидОперации        = ВидОперации;
			НовыйДок.Контрагент         = ГруппаКлиент.Ключ;

			НовыйДок.ТипЦен           = ПолучитьТипЦен(НовыйДок.Сделка, ГруппаДоговор.Ключ.ТипЦен);
			НовыйДок.УчитыватьНДС     = ФлагУчитыватьНДС;
			Если ЭлементыФормы.ФлагУчитыватьНДС.Доступность Тогда
				НовыйДок.СуммаВключаетНДС = ФлагЦенаВключаетНДС;
			Иначе
				НовыйДок.СуммаВключаетНДС = НовыйДок.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;

			НовыйДок.ВалютаДокумента         = ПолучитьВалютуДокумента(ГруппаДоговор.Ключ.ВалютаВзаиморасчетов);
			Курс                             = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДок.ВалютаДокумента, ПолеВводаДатаАктуальности);
			НовыйДок.КурсВзаиморасчетов      = Курс.Курс;
			НовыйДок.КратностьВзаиморасчетов = Курс.Кратность;

			НовыйДок.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			НовыйДок.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			НовыйДок.ОтражатьВНалоговомУчете      = ФлагНалогУчет;

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали И СтрокаДанных.Нераспределено < 0 Тогда

					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);

					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;

				КонецЕсли;

				Если СтрокаДанных[ИмяПоляДоговор] > 0 Тогда
					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						НоваяСтрока = НовыйДок.Товары.Добавить();
						НоваяСтрока.Номенклатура               = СтрокаДанных.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДанных.Характеристика;
						НоваяСтрока.Количество                 = СтрокаДанных[ИмяПоляДоговор];
						НоваяСтрока.ЕдиницаИзмерения           = СтрокаДанных.Единица;
						НоваяСтрока.Коэффициент                = СтрокаДанных.Коэффициент;

						Если ФлагУчитыватьНДС Тогда
							НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
						КонецЕсли;

						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрока, НовыйДок.ЭтотОбъект, мВалютаРегламентированногоУчета);
						НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
						НоваяСтрока.ПроцентСкидкиНаценки         = ПолеВводаПроцентСкидкиНаценки;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйДок);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, НовыйДок);

					Иначе

						НоваяСтрока = НовыйДок.ВозвратнаяТара.Добавить();
						НоваяСтрока.Номенклатура          = СтрокаДанных.Номенклатура;
						НоваяСтрока.Количество            = СтрокаДанных[ИмяПоляДоговор];
						ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(НоваяСтрока, НовыйДок.ЭтотОбъект, , мВалютаРегламентированногоУчета);
						НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, НовыйДок);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДок);
			НовыйДок.ЗаполнитьТабличныеЧастиПередПроведением();
			НовыйДок.Записать();
			СписокДокументов.Добавить(НовыйДок.Ссылка);
			Сообщить(" - " + НовыйДок.Номер + " " + НовыйДок.Дата + " " + НовыйДок.Метаданные().Синоним, СтатусСообщения.Обычное);
			ФлагУжеСообщали = Истина;

		КонецЦикла;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("=============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.", СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыРеализацияТоваровИзОстатка()

// Формирует документы "РеализацияТоваров" и "ПоступлениеТоваров" в режиме отгрузки из резерва
//
// Параметры: 
//  ВидОперации - вид операции (комиссия/продажа)
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыРеализацияПоступлениеТоваров(ВидОперации)
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Реализация товаров"" и ""Поступление товаров"".....", СтатусСообщения.Обычное);
	Сообщить("=============================================================================", СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ФлагУжеСообщали = Ложь;

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные.Документы.ПоступлениеТоваровУслуг, "Товары");
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные.Документы.ПоступлениеТоваровУслуг, "Товары");	
	
	Для Каждого ГруппаДоговор Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляДоговор = ГруппаДоговор.ИмяПоля;

		Для Каждого ГруппаЗаказ Из ГруппаДоговор.Узел Цикл
			ИмяПоляЗаказ = ГруппаЗаказ.ИмяПоля;

			Если ТаблицаДанных.Итог(ИмяПоляЗаказ) = 0 Тогда
				Продолжить;
			КонецЕсли;

			// Реализация товаров
			НовыйДокПро      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НовыйДокПро.Дата = ПолеВводаДатаАктуальности;
			НовыйДокПро.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокПро.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");

			НовыйДокПро.ДоговорКонтрагента = ГруппаДоговор.Ключ;
			НовыйДокПро.Подразделение      = ПолеВводаПодразделение;
			НовыйДокПро.Ответственный      = ПолеВводаОтветственный;
			НовыйДокПро.Организация        = ПолеВводаОрганизация;
			НовыйДокПро.ВидПередачи        = Перечисления.ВидыПередачиТоваров.СоСклада;
			НовыйДокПро.Склад              = ПолеВводаСклад;
			НовыйДокПро.Контрагент         = ГруппаДоговор.Ключ.Владелец;
			НовыйДокПро.ВидОперации        = ВидОперации;
			НовыйДокПро.Сделка             = ГруппаЗаказ.Ключ;

			НовыйДокПро.ТипЦен           = ПолучитьТипЦен(НовыйДокПро.Сделка, ГруппаДоговор.Ключ.ТипЦен);
			НовыйДокПро.УчитыватьНДС     = ФлагУчитыватьНДС;
			Если ЭлементыФормы.ФлагУчитыватьНДС.Доступность Тогда
				НовыйДокПро.СуммаВключаетНДС = ФлагЦенаВключаетНДС;
			Иначе
				НовыйДокПро.СуммаВключаетНДС = НовыйДокПро.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;

			НовыйДокПро.ВалютаДокумента         = ПолучитьВалютуДокумента(ГруппаДоговор.Ключ.ВалютаВзаиморасчетов);
			Курс                                = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДокПро.ВалютаДокумента, ПолеВводаДатаАктуальности);
			НовыйДокПро.КурсВзаиморасчетов      = Курс.Курс;
			НовыйДокПро.КратностьВзаиморасчетов = Курс.Кратность;

			НовыйДокПро.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			НовыйДокПро.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			НовыйДокПро.ОтражатьВНалоговомУчете      = ФлагНалогУчет;

			// Поступление товаров
			НовыйДокПос      = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовыйДокПос.Дата = ПолеВводаДатаАктуальности;
			НовыйДокПос.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НовыйДокПос, НовыйДокПро);

			Организация                    = СобственныйОрганизацияПокупатель(ГруппаДоговор.Ключ.Владелец);
			НовыйДокПос.Организация        = Организация;

			Продавец                       = СобственныйКонтрагентПродавец(ПолеВводаОрганизация);
			НовыйДокПос.Контрагент         = Продавец;
			НовыйДокПос.ДоговорКонтрагента = Продавец.ОсновнойДоговорКонтрагента;

			НовыйДокПос.ВидПоступления     = Перечисления.ВидыПоступленияТоваров.НаСклад;
			НовыйДокПос.СкладОрдер         = ПолеВводаСклад;

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали И СтрокаДанных.Нераспределено < 0 Тогда

					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);
					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;

				КонецЕсли;

				Если СтрокаДанных[ИмяПоляЗаказ] > 0 Тогда

					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						// Реализация товаров
						НоваяСтрокаПро = НовыйДокПро.Товары.Добавить();
						НоваяСтрокаПро.Номенклатура               = СтрокаДанных.Номенклатура;
						НоваяСтрокаПро.ХарактеристикаНоменклатуры = СтрокаДанных.Характеристика;
						НоваяСтрокаПро.Количество                 = СтрокаДанных[ИмяПоляЗаказ];
						НоваяСтрокаПро.ЕдиницаИзмерения           = СтрокаДанных.Единица;
						НоваяСтрокаПро.Коэффициент                = СтрокаДанных.Коэффициент;

						Если ФлагУчитыватьНДС Тогда
							НоваяСтрокаПро.СтавкаНДС = НоваяСтрокаПро.Номенклатура.СтавкаНДС;
						КонецЕсли;

						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрокаПро, НовыйДокПро.ЭтотОбъект, мВалютаРегламентированногоУчета);
						НоваяСтрокаПро.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
						НоваяСтрокаПро.ПроцентСкидкиНаценки         = ПолеВводаПроцентСкидкиНаценки;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаПро, НовыйДокПро);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаПро, НовыйДокПро);

						// Поступление товаров
						НоваяСтрокаПос = НовыйДокПос.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПос, НоваяСтрокаПро);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаПос, НовыйДокПос, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаПос, НовыйДокПос);

					Иначе

						// Реализация товаров
						НоваяСтрокаПро = НовыйДокПро.ВозвратнаяТара.Добавить();
						НоваяСтрокаПро.Номенклатура                 = СтрокаДанных.Номенклатура;
						НоваяСтрокаПро.Количество                   = СтрокаДанных[ИмяПоляЗаказ];
						НоваяСтрокаПро.ЕдиницаИзмерения             = СтрокаДанных.Единица;
						НоваяСтрокаПро.Коэффициент                  = СтрокаДанных.Коэффициент;
						ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(НоваяСтрокаПро, НовыйДокПро.ЭтотОбъект, , мВалютаРегламентированногоУчета);
						НоваяСтрокаПро.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаПро, НовыйДокПро);

						// Поступление товаров
						НоваяСтрокаПос = НовыйДокПос.ВозвратнаяТара.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПос, НоваяСтрокаПро);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(НоваяСтрокаПос, НовыйДокПос);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			// Реализация товаров
			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДокПро);
			НовыйДокПро.ЗаполнитьТабличныеЧастиПередПроведением();
			НовыйДокПро.Записать();
			СписокДокументов.Добавить(НовыйДокПро.Ссылка);
			Сообщить(" - " + НовыйДокПро.Номер + " " + НовыйДокПро.Дата + " " + НовыйДокПро.Метаданные().Синоним, СтатусСообщения.Обычное);

			// Поступление товаров
			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДокПос, Ложь);
			НовыйДокПос.ЗаполнитьТабличныеЧастиПередПроведениемУпр();
			НовыйДокПос.Записать();
			СписокДокументов.Добавить(НовыйДокПос.Ссылка);
			Сообщить(" - " + НовыйДокПос.Номер + " " + НовыйДокПос.Дата + " " + НовыйДокПос.Метаданные().Синоним, СтатусСообщения.Обычное);

			ФлагУжеСообщали = Истина;

		КонецЦикла;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("=============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.", СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыРеализацияПоступлениеТоваров()

// Формирует документы "РеализацияТоваров" и "ПоступлениеТоваров" в режиме из свободного остатка на складе
//
// Параметры: 
//  ВидОперации - вид операции (комиссия/продажа)
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыРеализацияПоступлениеТоваровИзОстатка(ВидОперации)
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Реализация товаров"" и ""Поступление товаров"".....", СтатусСообщения.Обычное);
	Сообщить("=============================================================================", СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные.Документы.ПоступлениеТоваровУслуг, "Товары");
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные.Документы.ПоступлениеТоваровУслуг, "Товары");	
	
	ФлагУжеСообщали = Ложь;
	Для Каждого ГруппаКлиент Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляКлиент = ГруппаКлиент.ИмяПоля;

		Для Каждого ГруппаДоговор Из ГруппаКлиент.Узел Цикл
			ИмяПоляДоговор = ГруппаДоговор.ИмяПоля;

			Если ТаблицаДанных.Итог(ИмяПоляДоговор) = 0 Тогда
				Продолжить;
			КонецЕсли;

			// Реализация товаров
			НовыйДокПро      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НовыйДокПро.Дата = ПолеВводаДатаАктуальности;
			НовыйДокПро.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокПро.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");

			НовыйДокПро.ДоговорКонтрагента = ГруппаДоговор.Ключ;
			НовыйДокПро.Подразделение      = ПолеВводаПодразделение;
			НовыйДокПро.Ответственный      = ПолеВводаОтветственный;
			НовыйДокПро.Организация        = ПолеВводаОрганизация;
			НовыйДокПро.ВидПередачи        = Перечисления.ВидыПередачиТоваров.СоСклада;
			НовыйДокПро.Склад              = ПолеВводаСклад;
			НовыйДокПро.ВидОперации        = ВидОперации;
			НовыйДокПро.Контрагент         = ГруппаКлиент.Ключ;

			НовыйДокПро.ТипЦен           = ПолучитьТипЦен(НовыйДокПро.Сделка, ГруппаДоговор.Ключ.ТипЦен);
			НовыйДокПро.УчитыватьНДС     = ФлагУчитыватьНДС;
			Если ЭлементыФормы.ФлагУчитыватьНДС.Доступность Тогда
				НовыйДокПро.СуммаВключаетНДС = ФлагЦенаВключаетНДС;
			Иначе
				НовыйДокПро.СуммаВключаетНДС = НовыйДокПро.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;

			НовыйДокПро.ВалютаДокумента         = ПолучитьВалютуДокумента(ГруппаДоговор.Ключ.ВалютаВзаиморасчетов);
			Курс                                = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДокПро.ВалютаДокумента, ПолеВводаДатаАктуальности);
			НовыйДокПро.КурсВзаиморасчетов      = Курс.Курс;
			НовыйДокПро.КратностьВзаиморасчетов = Курс.Кратность;

			НовыйДокПро.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			НовыйДокПро.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			НовыйДокПро.ОтражатьВНалоговомУчете      = ФлагНалогУчет;

			// Поступление товаров
			НовыйДокПос      = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовыйДокПос.Дата = ПолеВводаДатаАктуальности;
			НовыйДокПос.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НовыйДокПос, НовыйДокПро);

			Организация                    = СобственныйОрганизацияПокупатель(ГруппаКлиент.Ключ);
			НовыйДокПос.Организация        = Организация;

			Продавец                       = СобственныйКонтрагентПродавец(ПолеВводаОрганизация);
			НовыйДокПос.Контрагент         = Продавец;
			НовыйДокПос.ДоговорКонтрагента = Продавец.ОсновнойДоговорКонтрагента;
			
			Если НовыйДокПос.ДоговорКонтрагента.Организация <> Организация Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Продавец",    Продавец);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				
				Запрос.Текст = "
				|ВЫБРАТЬ 
				|	Ссылка 
				|ИЗ Справочник.ДоговорыКонтрагентов
				|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Продавец
				|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация
				|	 И Справочник.ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НовыйДокПос.ДоговорКонтрагента = Выборка.Ссылка;
				Иначе 
					Сообщить("У контрагента " + Продавец + " отсутствует договор на поставку с организацией " + Организация + ".");
				КонецЕсли;
				
			КонецЕсли;

			НовыйДокПос.ВидПоступления     = Перечисления.ВидыПоступленияТоваров.НаСклад;
			НовыйДокПос.СкладОрдер         = ПолеВводаСклад;

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали И СтрокаДанных.Нераспределено < 0 Тогда

					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);

					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;

				КонецЕсли;

				Если СтрокаДанных[ИмяПоляДоговор] > 0 Тогда
					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						// Реализация товаров
						НоваяСтрокаПро = НовыйДокПро.Товары.Добавить();
						НоваяСтрокаПро.Номенклатура               = СтрокаДанных.Номенклатура;
						НоваяСтрокаПро.ХарактеристикаНоменклатуры = СтрокаДанных.Характеристика;
						НоваяСтрокаПро.Количество                 = СтрокаДанных[ИмяПоляДоговор];
						НоваяСтрокаПро.ЕдиницаИзмерения           = СтрокаДанных.Единица;
						НоваяСтрокаПро.Коэффициент                = СтрокаДанных.Коэффициент;
						НоваяСтрокаПро.СерияНоменклатуры          = СтрокаДанных.СерияНоменклатуры;

						Если ФлагУчитыватьНДС Тогда
							НоваяСтрокаПро.СтавкаНДС = НоваяСтрокаПро.Номенклатура.СтавкаНДС;
						КонецЕсли;

						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрокаПро, НовыйДокПро.ЭтотОбъект, мВалютаРегламентированногоУчета);
						НоваяСтрокаПро.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
						НоваяСтрокаПро.ПроцентСкидкиНаценки         = ПолеВводаПроцентСкидкиНаценки;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаПро,    НовыйДокПро);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаПро, НовыйДокПро);

						// Поступление товаров
						НоваяСтрокаПос = НовыйДокПос.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПос, НоваяСтрокаПро);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаПос, НовыйДокПос, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаПос, НовыйДокПос);

					Иначе

						// Реализация товаров
						НоваяСтрокаПро = НовыйДокПро.ВозвратнаяТара.Добавить();
						НоваяСтрокаПро.Номенклатура          = СтрокаДанных.Номенклатура;
						НоваяСтрокаПро.Количество            = СтрокаДанных[ИмяПоляДоговор];
						ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(НоваяСтрокаПро, НовыйДокПро.ЭтотОбъект, , мВалютаРегламентированногоУчета);
						НоваяСтрокаПро.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаПро, НовыйДокПро);

						// Поступление товаров
						НоваяСтрокаПос = НовыйДокПос.ВозвратнаяТара.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПос, НоваяСтрокаПро);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(НоваяСтрокаПос, НовыйДокПос);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			// Реализация товаров
			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДокПро);
			
			// Процедуру заполнения по сериям будет запускать только, если серии не участвовали в заполнении ранее
			Если НЕ мКолонкиДанных.СерияНоменклатуры.Видимость Тогда
				НовыйДокПро.ЗаполнитьТабличныеЧастиПередПроведением();
			КонецЕсли;
			
			НовыйДокПро.Записать();
			СписокДокументов.Добавить(НовыйДокПро.Ссылка);
			Сообщить(" - " + НовыйДокПро.Номер + " " + НовыйДокПро.Дата + " " + НовыйДокПро.Метаданные().Синоним, СтатусСообщения.Обычное);

			// Поступление товаров
			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДокПос, Ложь);
			НовыйДокПос.ЗаполнитьТабличныеЧастиПередПроведениемУпр();
			
			НовыйДокПос.Записать();
			СписокДокументов.Добавить(НовыйДокПос.Ссылка);
			Сообщить(" - " + НовыйДокПос.Номер + " " + НовыйДокПос.Дата + " " + НовыйДокПос.Метаданные().Синоним, СтатусСообщения.Обычное);

			ФлагУжеСообщали = Истина;

		КонецЦикла;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("=============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.",            СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыРеализацияПоступлениеТоваровИзОстатка()

// Формирует документы "РеализацияТоваров" и "ПоступлениеТоваров" в режиме из свободного остатка на складе
//
// Параметры: 
//  ВидОперации - вид операции (комиссия/продажа)
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыРеализацияПоступлениеТоваровПокупкиУСобственных(ВидОперации)
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Реализация товаров"" и ""Поступление товаров"".....", СтатусСообщения.Обычное);
	Сообщить("=============================================================================", СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные.Документы.ПоступлениеТоваровУслуг, "Товары");
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные.Документы.ПоступлениеТоваровУслуг, "Товары");	
	
	ФлагУжеСообщали = Ложь;
	Для Каждого ГруппаКлиент Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляКлиент = ГруппаКлиент.ИмяПоля;

		Для Каждого ГруппаДоговор Из ГруппаКлиент.Узел Цикл
			ИмяПоляДоговор = ГруппаДоговор.ИмяПоля;

			Если ТаблицаДанных.Итог(ИмяПоляДоговор) = 0 Тогда
				Продолжить;
			КонецЕсли;

			// Реализация товаров
			НовыйДокПро      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			НовыйДокПро.Дата = НачалоДня(ПолеВводаДатаАктуальности);
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокПро.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");

			Организация                    = СобственныйОрганизацияПокупатель(ГруппаКлиент.Ключ);
			НовыйДокПро.Организация = Организация;
			
			НовыйДокПро.Контрагент         = СобственныйКонтрагентПродавец(ПолеВводаОрганизация);
			
			СписокДопустимыхВидовДоговоров = Новый СписокЗначений;
			СписокДопустимыхВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			ДогКонтр = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(НовыйДокПро.ЭтотОбъект.Организация, НовыйДокПро.Контрагент, Новый Структура("СписокДопустимыхВидовДоговоров",СписокДопустимыхВидовДоговоров));
			НовыйДокПро.ДоговорКонтрагента = ?(ДогКонтр = Неопределено, Справочники.ДоговорыКонтрагентов.ПустаяСсылка(),ДогКонтр);
			
			Если НовыйДокПро.ДоговорКонтрагента.Организация <> Организация Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Продавец",    НовыйДокПро.Контрагент);
				Запрос.УстановитьПараметр("Организация", Организация);
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				
				Запрос.Текст = "
				|ВЫБРАТЬ 
				|	Ссылка 
				|ИЗ Справочник.ДоговорыКонтрагентов
				|ГДЕ Справочник.ДоговорыКонтрагентов.Владелец = &Продавец
				|	 И Справочник.ДоговорыКонтрагентов.Организация = &Организация
				|	 И Справочник.ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НовыйДокПро.ДоговорКонтрагента = Выборка.Ссылка;
				Иначе 
					Сообщить("У контрагента " + НовыйДокПро.Контрагент + " отсутствует договор на поставку с организацией " + Организация + ".");
				КонецЕсли;
				
			КонецЕсли;
			
			НовыйДокПро.Подразделение      = ПолеВводаПодразделение;
			НовыйДокПро.Ответственный      = ПолеВводаОтветственный;
			НовыйДокПро.Организация        = Организация;
			НовыйДокПро.ВидПередачи        = Перечисления.ВидыПередачиТоваров.СоСклада;
			НовыйДокПро.Склад              = ПолеВводаСклад;
			НовыйДокПро.ВидОперации        = ВидОперации;

			НовыйДокПро.ТипЦен           = ПолучитьТипЦен(НовыйДокПро.Сделка, ГруппаДоговор.Ключ.ТипЦен);
			НовыйДокПро.УчитыватьНДС     = ФлагУчитыватьНДС;
			Если ЭлементыФормы.ФлагУчитыватьНДС.Доступность Тогда
				НовыйДокПро.СуммаВключаетНДС = ФлагЦенаВключаетНДС;
			Иначе
				НовыйДокПро.СуммаВключаетНДС = НовыйДокПро.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;

			НовыйДокПро.ВалютаДокумента         = ПолучитьВалютуДокумента(ГруппаДоговор.Ключ.ВалютаВзаиморасчетов);
			Курс                                = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДокПро.ВалютаДокумента, ПолеВводаДатаАктуальности);
			НовыйДокПро.КурсВзаиморасчетов      = Курс.Курс;
			НовыйДокПро.КратностьВзаиморасчетов = Курс.Кратность;

			НовыйДокПро.ОтражатьВУправленческомУчете = ФлагУпрУчет;
			НовыйДокПро.ОтражатьВБухгалтерскомУчете  = ФлагБухУчет;
			НовыйДокПро.ОтражатьВНалоговомУчете      = ФлагНалогУчет;

			// Поступление товаров
			НовыйДокПос      = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
			НовыйДокПос.Дата = (НачалоДня(ПолеВводаДатаАктуальности)+1);
			ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(НовыйДокПос, НовыйДокПро);

			НовыйДокПос.Организация        = ПолеВводаОрганизация;

			НовыйДокПос.Контрагент         = ГруппаКлиент.Ключ;
			НовыйДокПос.ДоговорКонтрагента = ГруппаДоговор.Ключ;
			
			НовыйДокПос.ВидПоступления     = Перечисления.ВидыПоступленияТоваров.НаСклад;
			НовыйДокПос.СкладОрдер         = ПолеВводаСклад;

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали И СтрокаДанных.Нераспределено < 0 Тогда

					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);

					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;

				КонецЕсли;

				Если СтрокаДанных[ИмяПоляДоговор] > 0 Тогда
					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						// Реализация товаров
						НоваяСтрокаПро = НовыйДокПро.Товары.Добавить();
						НоваяСтрокаПро.Номенклатура               = СтрокаДанных.Номенклатура;
						НоваяСтрокаПро.ХарактеристикаНоменклатуры = СтрокаДанных.Характеристика;
						НоваяСтрокаПро.Количество                 = СтрокаДанных[ИмяПоляДоговор];
						НоваяСтрокаПро.ЕдиницаИзмерения           = СтрокаДанных.Единица;
						НоваяСтрокаПро.Коэффициент                = СтрокаДанных.Коэффициент;
						НоваяСтрокаПро.СерияНоменклатуры          = СтрокаДанных.СерияНоменклатуры;

						Если ФлагУчитыватьНДС Тогда
							НоваяСтрокаПро.СтавкаНДС = НоваяСтрокаПро.Номенклатура.СтавкаНДС;
						КонецЕсли;

						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(НоваяСтрокаПро, НовыйДокПро.ЭтотОбъект, мВалютаРегламентированногоУчета);
						НоваяСтрокаПро.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
						НоваяСтрокаПро.ПроцентСкидкиНаценки         = ПолеВводаПроцентСкидкиНаценки;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаПро,    НовыйДокПро);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаПро, НовыйДокПро);

						// Поступление товаров
						НоваяСтрокаПос = НовыйДокПос.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПос, НоваяСтрокаПро);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрокаПос, НовыйДокПос, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаПос, НовыйДокПос);

					Иначе

						// Реализация товаров
						НоваяСтрокаПро = НовыйДокПро.ВозвратнаяТара.Добавить();
						НоваяСтрокаПро.Номенклатура          = СтрокаДанных.Номенклатура;
						НоваяСтрокаПро.Количество            = СтрокаДанных[ИмяПоляДоговор];
						ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(НоваяСтрокаПро, НовыйДокПро.ЭтотОбъект, , мВалютаРегламентированногоУчета);
						НоваяСтрокаПро.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаПро, НовыйДокПро);

						// Поступление товаров
						НоваяСтрокаПос = НовыйДокПос.ВозвратнаяТара.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПос, НоваяСтрокаПро);
						ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(НоваяСтрокаПос, НовыйДокПос);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			// Реализация товаров
			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДокПро);
			
			// Процедуру заполнения по сериям будет запускать только, если серии не участвовали в заполнении ранее
			Если НЕ мКолонкиДанных.СерияНоменклатуры.Видимость Тогда
				НовыйДокПро.ЗаполнитьТабличныеЧастиПередПроведением();
			КонецЕсли;
			
			НовыйДокПро.Записать();
			СписокДокументов.Добавить(НовыйДокПро.Ссылка);
			Сообщить(" - " + НовыйДокПро.Номер + " " + НовыйДокПро.Дата + " " + НовыйДокПро.Метаданные().Синоним, СтатусСообщения.Обычное);

			// Поступление товаров
			ЗаполнениеДокументов.УстановитьТипСделки(НовыйДокПос, Ложь);
			НовыйДокПос.ЗаполнитьТабличныеЧастиПередПроведениемУпр();
			
			НовыйДокПос.Записать();
			СписокДокументов.Добавить(НовыйДокПос.Ссылка);
			Сообщить(" - " + НовыйДокПос.Номер + " " + НовыйДокПос.Дата + " " + НовыйДокПос.Метаданные().Синоним, СтатусСообщения.Обычное);

			ФлагУжеСообщали = Истина;

		КонецЦикла;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("=============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.",            СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыРеализацияПоступлениеТоваровИзОстатка()

// Формирует документы "Заказ постащику"
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Список сформированных документов
//
Функция СоздатьДокументыЗаказы()
	Перем СписокДокументов;
	Перем ФлагУжеСообщали;

	СписокДокументов = Новый СписокЗначений;

	Сообщить("Формирование документов ""Заказ поставщику"".....", СтатусСообщения.Обычное);
	Сообщить("=============================================",     СтатусСообщения.БезСтатуса);
	Сообщить(" ", СтатусСообщения.БезСтатуса);

	ФлагУжеСообщали = Ложь;
	Для Каждого ГруппаКонтрагент Из мСтруктГрупп["Таблица"] Цикл
		ИмяПоляКонтрагент = ГруппаКонтрагент.ИмяПоля;
		Для Каждого ГруппаДоговор Из ГруппаКонтрагент.Узел Цикл
			ИмяПоляДоговор = ГруппаДоговор.ИмяПоля;

			Если ТаблицаДанных.Итог(ИмяПоляДоговор) = 0 Тогда
				Продолжить;
			КонецЕсли;

			НовыйДок      = Документы.ЗаказПоставщику.СоздатьДокумент();
			НовыйДок.Дата = ПолеВводаДатаАктуальности;
			НовыйДок.УстановитьВремя();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДок.ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка");

			НовыйДок.ДоговорКонтрагента = ГруппаДоговор.Ключ;
			НовыйДок.Подразделение      = ПолеВводаПодразделение;
			НовыйДок.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			НовыйДок.Организация        = ПолеВводаОрганизация;
			НовыйДок.Склад              = ПолеВводаСклад;
			НовыйДок.Контрагент         = ГруппаДоговор.Ключ.Владелец;
			НовыйДок.Ответственный      = ПолеВводаОтветственный;
			НовыйДок.ДатаПоступления    = ДатаПоступления;

			НовыйДок.ТипЦен       = ГруппаДоговор.Ключ.ТипЦен;
			НовыйДок.УчитыватьНДС = ФлагУчитыватьНДС;
			Если ЭлементыФормы.ФлагУчитыватьНДС.Доступность Тогда
				НовыйДок.СуммаВключаетНДС = ФлагЦенаВключаетНДС;
			Иначе
				НовыйДок.СуммаВключаетНДС = НовыйДок.ТипЦен.ЦенаВключаетНДС;
			КонецЕсли;

			НовыйДок.ВалютаДокумента         = ПолучитьВалютуДокумента(ГруппаДоговор.Ключ.ВалютаВзаиморасчетов);
			Курс                             = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйДок.ВалютаДокумента, ПолеВводаДатаАктуальности);
			НовыйДок.КурсВзаиморасчетов      = Курс.Курс;
			НовыйДок.КратностьВзаиморасчетов = Курс.Кратность;

			УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(НовыйДок);

			Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
				Если Не ФлагУжеСообщали И СтрокаДанных.Нераспределено < 0 Тогда

					Сообщить("Номенклатура: " + СтрокаДанных.Номенклатура + " " +
							 ?(СтрокаДанных.Характеристика.Пустая(), "",
							 "Характеристика: " + СтрокаДанных.Характеристика + " ") +
							 "нехватает " + -СтрокаДанных.Нераспределено + " " + 
							 СтрокаДанных.Номенклатура.ЕдиницаХраненияОстатков, СтатусСообщения.Важное);

					Сообщить("Строка пропущена!", СтатусСообщения.Важное);
					Продолжить;

				КонецЕсли;

				Если СтрокаДанных[ИмяПоляДоговор] > 0 Тогда
					Если СтрокаДанных.ТоварТара = Перечисления.ТоварТара.Товар Тогда

						НоваяСтрока = НовыйДок.Товары.Добавить();
						НоваяСтрока.Номенклатура               = СтрокаДанных.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаДанных.Характеристика;
						НоваяСтрока.Количество                 = СтрокаДанных[ИмяПоляДоговор];
						НоваяСтрока.ЕдиницаИзмерения           = СтрокаДанных.Единица;
						НоваяСтрока.Коэффициент                = СтрокаДанных.Коэффициент;
						НоваяСтрока.Заказ            = СтрокаДанных.Заказ;

					Иначе

						НоваяСтрока = НовыйДок.ВозвратнаяТара.Добавить();
						НоваяСтрока.Номенклатура    = СтрокаДанных.Номенклатура;
						НоваяСтрока.Количество      = СтрокаДанных[ИмяПоляДоговор];
						НоваяСтрока.Заказ = СтрокаДанных.Заказ;

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого КаждаяТабличнаяЧасть Из Метаданные.Документы.ЗаказПоставщику.ТабличныеЧасти Цикл
				ТабличнаяЧасть = НовыйДок[КаждаяТабличнаяЧасть.Имя];
				ЭтоТовары      = (КаждаяТабличнаяЧасть.Имя = "Товары");

				// Для табличной части товаров получим нужные цены запросом
				СтруктураЗначенийЦен = Новый Структура;
				СтруктураЗначенийЦен.Вставить("ПерезаполнитьПроцентСкидкиНаценки", Ложь);
				СтруктураЗначенийЦен.Вставить("НовыйТипЦен",                  НовыйДок.ТипЦен);
				СтруктураЗначенийЦен.Вставить("НовыйВалютаДокумента",         НовыйДок.ВалютаДокумента);
				СтруктураЗначенийЦен.Вставить("ТекущийВалютаДокумента",       НовыйДок.ВалютаДокумента);
				СтруктураЗначенийЦен.Вставить("НовыйКурсДокумента",           НовыйДок.КурсВзаиморасчетов);
				СтруктураЗначенийЦен.Вставить("НовыйКратностьДокумента",      НовыйДок.КратностьВзаиморасчетов);
				СтруктураЗначенийЦен.Вставить("НовыйУчитыватьНДС",            ?(ЭтоТовары, НовыйДок.УчитыватьНДС, Истина));
				СтруктураЗначенийЦен.Вставить("НовыйСуммаВключаетНДС",        ?(ЭтоТовары, НовыйДок.СуммаВключаетНДС, Истина));
				СтруктураЗначенийЦен.Вставить("ЕстьСтавкаНДСВТабличнойЧасти", ?(ЭтоТовары, Истина, Ложь));

				РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначенийЦен,
				                                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                                                ТабличнаяЧасть.ВыгрузитьКолонку("Номенклатура"),
				                                                НовыйДок.Дата, НовыйДок.Контрагент);

				ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выбрать();

				Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
					Если СтрокаТабличнойЧасти.Цена = 0 Тогда
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
						Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(НовыйДок.ЭтотОбъект,
						                                   СтрокаТабличнойЧасти,
						                                   СтруктураПоиска,
						                                   ВыборкаРезультатЗапросаЦен,
						                                   СтруктураЗначенийЦен,
						                                   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);

						Если ЭтоТовары Тогда
							ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, НовыйДок.ЭтотОбъект);
						КонецЕсли;

						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, НовыйДок.ЭтотОбъект);

						Если ЭтоТовары Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, НовыйДок.ЭтотОбъект);
						КонецЕсли;

					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

			НовыйДок.Записать();
			СписокДокументов.Добавить(НовыйДок.Ссылка);
			Сообщить(" - " + НовыйДок.Номер + " " + НовыйДок.Дата + " " + НовыйДок.Метаданные().Синоним, СтатусСообщения.Обычное);
			ФлагУжеСообщали = Истина;

		КонецЦикла;
	КонецЦикла;

	Сообщить(" ", СтатусСообщения.БезСтатуса);
	Сообщить("=============================================", СтатусСообщения.БезСтатуса);
	Сообщить("Формирование документов завершено.",            СтатусСообщения.Обычное);

	Возврат СписокДокументов;

КонецФункции // СоздатьДокументыЗаказы()

// Определяет цену товара в соответствии с типом цен и режимом работы
//
// Параметры: 
//  ПарамТовар  - товар
//  ПарамХар    - характеристика
//  ПарамТипЦен - тип цен
//
// Возвращаемое значение:
//  Цена товара
//
Функция ЦенаТовара(ПарамТовар, ПарамХар, Знач ПарамТипЦен, Валюта)
	Перем ТипЦен;

	Если ЭлементыФормы.ФлагЦеныИзДоговора.Доступность И Не ФлагЦеныИзДоговора Тогда
		ТипЦен = ПолеВводаТипЦен;
	Иначе
		ТипЦен = ПарамТипЦен;
	КонецЕсли;

	Дата            = КонецДня(ПолеВводаДатаАктуальности);
	ЕдиницаХранения = ПарамТовар.ЕдиницаХраненияОстатков;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда
		Цена = Ценообразование.ПолучитьЦенуКонтрагента(ПарамТовар, ПарамХар, Неопределено, ТипЦен, Дата, ЕдиницаХранения, Валюта);
	Иначе
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ПарамТовар, ПарамХар, ТипЦен, Дата, ЕдиницаХранения, Валюта);
	КонецЕсли;

	Возврат Цена;

КонецФункции // ЦенаТовара()

// Возвращает имя поля группы по значению ключа
// Если поля с таким ключом нет, то добавляется соответствующая колонка
//
// Параметры: 
//  Группа1 - группа верхнего уровня
//  Группа2 - группа нижнего уровня
//
// Возвращаемое значение:
//  Строка с именем поля таблицы данных
//
Функция ПолеГруппы(Группа1, Группа2 = Неопределено, ДанныеЗапроса = Неопределено)
	Перем ТабГрупп;
	Перем Строка1;
	Перем Строка2;

	Строка1 = мСтруктГрупп["Таблица"].Найти(Группа1, "Ключ");
	Если Строка1 = Неопределено Тогда // Добавить
		Строка1 = мСтруктГрупп["Таблица"].Добавить();
		Строка1.Ключ    = Группа1;
		мСтруктГрупп["МаксИндекс1"] = мСтруктГрупп["МаксИндекс1"] + 1;
		Строка1.Индекс  = мСтруктГрупп["МаксИндекс1"];
		Строка1.ИмяПоля = "Узел_" + мСтруктГрупп["МаксИндекс1"];

		Если мСтруктГрупп["Уровней"] = 1 Тогда
			НоваяКолонка = ТаблицаДанных.Колонки.Добавить(Строка1.ИмяПоля, мОписаниеТиповКолво);
		Иначе
			НоваяКолонка = ТаблицаДанных.Колонки.Добавить(Строка1.ИмяПоля, мОписаниеТиповСтрока);
		КонецЕсли;

		НоваяКолонка  = ЭлементыФормы.ТабличноеПолеДанных.Колонки.Добавить(Строка1.ИмяПоля, "" + Группа1);
		НоваяКолонка.Данные = НоваяКолонка.Имя; // Из одноименной колонки таблицы значений

		Если мСтруктГрупп["Уровней"] = 1 Тогда
			НоваяКолонка.Ширина = 25;
			НоваяКолонка.Доступность = Истина;
		Иначе
			НоваяКолонка.Доступность = Ложь;
		КонецЕсли;

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

			НоваяКолонка.ТекстШапки = "" + Группа1.Владелец;
		Иначе
			НоваяКолонка.ТекстШапки = "" + Группа1;
		КонецЕсли;

		// Добавить колонку "Цена" и "Валюта цены" при необходимости
		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
		 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда

			// Колонка "Цена"
			ТаблицаДанных.Колонки.Добавить("Цена_" + Строка1.Индекс, мОписаниеТиповЦена);
			НоваяКолонка = ЭлементыФормы.ТабличноеПолеДанных.Колонки.Добавить("Цена_" + Строка1.Индекс, "Цена");
			Если мСтруктГрупп["Уровней"] = 2 Тогда
				НоваяКолонка.Положение = ПоложениеКолонки.ВТойЖеКолонке;
			КонецЕсли;
			НоваяКолонка.Имя    = "Цена_" + Строка1.Индекс;
			НоваяКолонка.Данные = НоваяКолонка.Имя; // Из одноименной колонки таблицы значений
			НоваяКолонка.Ширина = 10;

			// Колонка "Валюта цены"
			ТаблицаДанных.Колонки.Добавить("Валюта_" + Строка1.Индекс, мОписаниеТиповВалюта);
			НоваяКолонка = ЭлементыФормы.ТабличноеПолеДанных.Колонки.Добавить("Валюта_" + Строка1.Индекс, "Валюта");
			Если мСтруктГрупп["Уровней"] = 2 Тогда
				НоваяКолонка.Положение = ПоложениеКолонки.ВТойЖеКолонке;
			КонецЕсли;
			НоваяКолонка.ТолькоПросмотр = Истина;
			НоваяКолонка.Имя            = "Валюта_" + Строка1.Индекс;
			НоваяКолонка.Данные         = НоваяКолонка.Имя; // Из одноименной колонки таблицы значений
			НоваяКолонка.Ширина         = 8;
		КонецЕсли;

		Строка1.Узел = Новый ТаблицаЗначений;
		Строка1.Узел.Колонки.Добавить("Ключ");
		Строка1.Узел.Индексы.Добавить("Ключ");

		МассивТип = Новый Массив;
		МассивТип.Добавить(Тип("Число"));
		Квалификатор = Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный);

		Строка1.Узел.Колонки.Добавить("Индекс", Новый ОписаниеТипов(МассивТип, Квалификатор));

		МассивТип.Очистить();
		МассивТип.Добавить(Тип("Строка"));
		Квалификатор = Новый КвалификаторыСтроки(20);
		Строка1.Узел.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов(МассивТип,, Квалификатор));
	КонецЕсли;

	Если Не Группа2 = Неопределено Тогда
		Строка2  = Строка1.Узел.Найти(Группа2, "Ключ");
		Если Строка2 = Неопределено Тогда // Добавить
			Строка2 = Строка1.Узел.Добавить();

			Строка2.Ключ                = Группа2;
			мСтруктГрупп["МаксИндекс2"] = мСтруктГрупп["МаксИндекс2"] + 1;
			Строка2.Индекс              = мСтруктГрупп["МаксИндекс2"];
			Строка2.ИмяПоля             = "Лист_" + мСтруктГрупп["МаксИндекс2"];

			Если ДанныеЗапроса <> Неопределено Тогда
				ДобавитьКолонкиДополнительныхПолей(Строка1.Узел, Строка2, ДанныеЗапроса);
			КонецЕсли;

			ТаблицаДанных.Колонки.Добавить(Строка2.ИмяПоля, мОписаниеТиповКолво);
			Если Строка1.Индекс = мСтруктГрупп["МаксИндекс1"] Тогда
				НоваяКолонка = ЭлементыФормы.ТабличноеПолеДанных.Колонки.Добавить(Строка2.ИмяПоля, "" + Группа2);
			Иначе

				// Найдем значение группы следующее за текущим и вставим перед ним
				ТабПоле          = ЭлементыФормы.ТабличноеПолеДанных;
				Колонка          = ТабПоле.Колонки.Найти("Узел_" + (Строка1.Индекс + 1));
				НоваяКолонка     = ТабПоле.Колонки.Вставить( ТабПоле.Колонки.Индекс( Колонка), "" + Группа2);
				НоваяКолонка.Имя = Строка2.ИмяПоля;
			КонецЕсли;

			НоваяКолонка.Положение = ?(Строка1.Узел.Количество() = 1, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.ВТойЖеКолонке);
			НоваяКолонка.Данные    = НоваяКолонка.Имя; // Из одноименной колонки таблицы значений
			НоваяКолонка.Ширина    = 40;
		Иначе
			Если ДанныеЗапроса <> Неопределено Тогда
				ДобавитьКолонкиДополнительныхПолей(Строка1.Узел, Строка2, ДанныеЗапроса);
			КонецЕсли;
		КонецЕсли;

		Возврат Строка2.ИмяПоля;
	Иначе
		Возврат Строка1.ИмяПоля;
	КонецЕсли;

КонецФункции // ПолеГруппы()

// Создает структуру хранящую значения ключей (групп)
// и соответствующих им полей таблицы данных
//
// Параметры:
//  Нет.
//
Процедура СоздатьСтруктГрупп()
	Перем Квалификатор;
	Перем МассивТип;
	Перем ТабГрупп;

	ТабГрупп = Новый ТаблицаЗначений;

	МассивТип = Новый Массив;
	МассивТип.Добавить(Тип("Число"));
	Квалификатор = Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный);

	ТабГрупп.Колонки.Добавить("Индекс", Новый ОписаниеТипов(МассивТип, Квалификатор));

	МассивТип.Очистить();
	МассивТип.Добавить(Тип("Строка"));
	Квалификатор = Новый КвалификаторыСтроки(20);
	ТабГрупп.Колонки.Добавить("ИмяПоля", Новый ОписаниеТипов(МассивТип,, Квалификатор));

	МассивТип.Очистить();
	МассивТип.Добавить(Тип("ТаблицаЗначений"));

	ТабГрупп.Колонки.Добавить("Узел", Новый ОписаниеТипов(МассивТип));
	ТабГрупп.Колонки.Добавить("Ключ");
	ТабГрупп.Индексы.Добавить("Ключ");

	мСтруктГрупп = Новый Структура;
	мСтруктГрупп.Вставить("Таблица", ТабГрупп);
	мСтруктГрупп.Вставить("МаксИндекс1", 0);
	мСтруктГрупп.Вставить("МаксИндекс2", 0);

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда
		мСтруктГрупп.Вставить("Уровней", 1);
	Иначе
		мСтруктГрупп.Вставить("Уровней", 2);
	КонецЕсли;

КонецПроцедуры // СоздатьТабГрупп()

// Процедура заполнение таблицы товаров на основании данных о внутренних заказов
// в режиме распределения по торговым точкам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьДляПеремещения()
	Перем РезультатЗапроса;
	Перем ОбходПоТоварам;
	Перем ОбходПоХар;
	Перем ОбходПоСкладам;
	Перем ОбходПоЗаказам;
	Перем Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(ПолеВводаДатаАктуальности));
	Запрос.УстановитьПараметр("Склад",            ПолеВводаСклад);
	Запрос.УстановитьПараметр("ВидЗаказаСклад",   Перечисления.ВидыВнутреннегоЗаказа.НаСклад);

	Запрос.Текст     = СоздатьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	ОбходПоТоварам   = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ОбходПоТоварам.Следующий() Цикл
		ОбходПоХар = ОбходПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ОбходПоХар.Следующий() Цикл
			Строка = ТаблицаДанных.Добавить();
			Строка.Номенклатура   = ОбходПоТоварам.Товар;
			Строка.Единица        = Строка.Номенклатура.ЕдиницаХраненияОстатков;
			Строка.Коэффициент    = Строка.Единица.Коэффициент;
			Строка.Характеристика = ОбходПоХар.Хар;
			ОбходПоСкладам        = ОбходПоХар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ОбходПоСкладам.Следующий() Цикл
				ОбходПоЗаказам = ОбходПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ОбходПоЗаказам.Следующий() Цикл
					ОбходПоТоваруТаре = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ОбходПоТоваруТаре.Следующий() Цикл
						Строка.ТоварТара  = Перечисления.ТоварТара.Товар;
						ПолеЗаказ         = ПолеГруппы(ОбходПоСкладам.Склад, ОбходПоЗаказам.Заказ);
						Строка[ПолеЗаказ] = ОбходПоТоваруТаре.Заказано;
					КонецЦикла;
				КонецЦикла;

				Строка.Остаток = ОбходПоХар.Заказано;
			КонецЦикла;

			ПересчитатьСуммуПоСтроке(Строка);
		КонецЦикла;
	КонецЦикла;

	// Добавить колонки с ценами
	ТабГрупп = мСтруктГрупп["Таблица"];
	Для Каждого Строка Из ТаблицаДанных Цикл
		Для Каждого Группа Из ТабГрупп Цикл
			Валюта = Неопределено;
			Цена   = ЦенаТовара(Строка.Номенклатура, Строка.Характеристика, Группа.Ключ.ТипЦенРозничнойТорговли, Валюта);
			Строка["Цена_"   + Группа.Индекс] = Цена;
			Строка["Валюта_" + Группа.Индекс] = Валюта;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьДляПеремещения()

// Процедура заполнения таблицы товаров на основании данных о заказах покупателей
// при работе в режиме реализации товаров
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьДляРеализации()
	Перем РезультатЗапроса;
	Перем ОбходПоТоварам;
	Перем ОбходПоХар;
	Перем ОбходПоДоговорам;
	Перем ОбходПоЗаказам;
	Перем Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаАктуальности",              КонецДня(ПолеВводаДатаАктуальности));
	Запрос.УстановитьПараметр("Организация",                   ПолеВводаОрганизация);
	Запрос.УстановитьПараметр("Склад",                         ПолеВводаСклад);
	Запрос.УстановитьПараметр("СписокСобственныхКонтрагентов", СписокСобственныхКонтрагентов());

	Запрос.Текст     = СоздатьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить();
	ОбходПоТоварам   = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ОбходПоТоварам.Следующий() Цикл
		Если мКонтролироватьОстаткиПоОрганизациям Тогда
			ОстатокПоОрганизации = ?(ОбходПоТоварам.ОстатокПоОрганизации = NULL, 0, ОбходПоТоварам.ОстатокПоОрганизации);
		Иначе
			ОстатокПоОрганизации = Неопределено;
		КонецЕсли;

		Если ОстатокПоОрганизации = 0 Тогда
			Продолжить;
		КонецЕсли;

		ОбходПоХар = ОбходПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ОбходПоХар.Следующий() Цикл
			Строка = ТаблицаДанных.Добавить();
			Строка.Номенклатура   = ОбходПоТоварам.Товар;
			Строка.Единица        = Строка.Номенклатура.ЕдиницаХраненияОстатков;
			Строка.Коэффициент    = Строка.Единица.Коэффициент;
			Строка.Характеристика = ОбходПоХар.Хар;
			ОбходПоДоговорам      = ОбходПоХар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ОбходПоДоговорам.Следующий() Цикл
				ОбходПоЗаказам = ОбходПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ОбходПоЗаказам.Следующий() Цикл
					ОбходПоТоваруТаре = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

					Пока ОбходПоТоваруТаре.Следующий() Цикл
						Строка.ТоварТара  = Перечисления.ТоварТара.Товар;
						ПолеЗаказ         = ПолеГруппы(ОбходПоДоговорам.Договор, ОбходПоЗаказам.Заказ, ОбходПоТоваруТаре);
						Строка[ПолеЗаказ] = ОбходПоТоваруТаре.РезервНаСкладе;
					КонецЦикла;
				КонецЦикла;

				Если мКонтролироватьОстаткиПоОрганизациям Тогда
					Строка.Остаток = Мин(ОбходПоХар.РезервНаСкладе, ОстатокПоОрганизации);
				Иначе
					Строка.Остаток = ОбходПоХар.РезервНаСкладе;
				КонецЕсли;

				Если мКонтролироватьОстаткиПоОрганизациям Тогда
					ОстатокПоОрганизации = ОстатокПоОрганизации - Строка.Остаток;
				КонецЕсли;
			КонецЦикла;

			ПересчитатьСуммуПоСтроке(Строка);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДляРеализации()

// Процедура заполнения таблицы товаров на основании данных о заказах
// при работе в режиме заказы поставщикам
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьДляЗаказов()
	Перем РезультатЗапроса;
	Перем ОбходПоТоварам;
	Перем ОбходПоХар;
	Перем ОбходПоДоговорам;
	Перем ОбходПоЗаказам;
	Перем Запрос;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДатаАктуальности", КонецДня(ПолеВводаДатаАктуальности));
	Запрос.УстановитьПараметр("Склад",            ПолеВводаСклад);
	Запрос.УстановитьПараметр("ДатаПоступления",  ДатаПоступления);

	Запрос.Текст     = СоздатьТекстЗапроса();
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	// Обход результатов запроса
	РезультатЗапроса = Запрос.Выполнить();
	ОбходПоТоварам   = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ОбходПоТоварам.Следующий() Цикл
		ОбходПоХар = ОбходПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ОбходПоХар.Следующий() Цикл
			ОбходПоЗаказам = ОбходПоХар.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

			Пока ОбходПоЗаказам.Следующий() Цикл
				ОбходПоТоваруТаре = ОбходПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

				Пока ОбходПоТоваруТаре.Следующий() Цикл

					// Если требуется отгрузка из свободного остатка
					Если (ОбходПоТоваруТаре.Заказано - ОбходПоТоваруТаре.ОжидаемПоЗаказу - ОбходПоТоваруТаре.РезервПоЗаказу) <= 0 Тогда
						Продолжить;
					КонецЕсли;

					СтрокаСоСклада = ТаблицаДанных.Добавить();
					СтрокаСоСклада.Номенклатура   = ОбходПоТоварам.Товар;
					СтрокаСоСклада.Единица        = ОбходПоТоварам.Товар.ЕдиницаХраненияОстатков;
					СтрокаСоСклада.Коэффициент    = СтрокаСоСклада.Единица.Коэффициент;
					СтрокаСоСклада.ТоварТара      = Перечисления.ТоварТара.Товар;
					СтрокаСоСклада.Характеристика = ОбходПоХар.Хар;
					СтрокаСоСклада.Заказ          = ОбходПоТоваруТаре.Заказ;
					СтрокаСоСклада.Остаток        = ОбходПоТоваруТаре.Заказано
					                              - ОбходПоТоваруТаре.ОжидаемПоЗаказу
					                              - ОбходПоТоваруТаре.РезервПоЗаказу;
					СтрокаСоСклада.Нераспределено = СтрокаСоСклада.Остаток;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДляЗаказов()

// Устанавливает доступность элементов формы диалога
//
// Параметры:
//  Нет.
//
Процедура Доступность()
	Перем Флаг;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда
		Флаг = Ложь;
	Иначе
		Флаг = Истина;
	КонецЕсли;

	ЭлементыФормы.ФлагЦеныИзДоговора.Доступность = Флаг;
	ЭлементыФормы.ПолеВводаТипЦен   .Доступность = Флаг И Не ФлагЦеныИзДоговора;
	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение          = "Заказы" Тогда
		ЭлементыФормы.ПолеВводаПроцентСкидкиНаценки.Доступность = Ложь;
		ЭлементыФормы.НадписьДатаПоступления.Доступность        = Истина;
		ЭлементыФормы.ДатаПоступления.Доступность               = Истина;
	Иначе
		ЭлементыФормы.ПолеВводаПроцентСкидкиНаценки.Доступность = Флаг И Не ФлагЦеныИзДоговора;
		ЭлементыФормы.НадписьДатаПоступления.Доступность        = Ложь;
		ЭлементыФормы.ДатаПоступления.Доступность               = Ложь;
	КонецЕсли;

	ЭлементыФормы.ФлагУчитыватьНДС.Доступность    = Флаг;
	ЭлементыФормы.ФлагЦенаВключаетНДС.Доступность = Флаг И ФлагУчитыватьНДС;

	Флаг = ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы";
	ЭлементыФормы.ТабличноеПолеДанных.Колонки["Заказ"].Видимость = Флаг;
	ЭлементыФормы.ПолеВводаСтруктурнаяЕдиница.Доступность        = Флаг;
	ЭлементыФормы.ПолеВводаТипЦен.Доступность                    = НЕ Флаг;
	ЭлементыФормы.ФлагЦеныИзДоговора.Доступность                 = НЕ Флаг;
	ЭлементыФормы.ПолеВыбораВидВалюты.Доступность                = НЕ Флаг;

	ЭлементыФормы.ПереключательСпособПечатиБезПросмотра.Доступность = ФлагПечатьФорм;
	ЭлементыФормы.ПереключательСпособПечатиСПросмотром.Доступность  = ФлагПечатьФорм;
	ЭлементыФормы.ПолеВводаКоличествоЭкземпляров.Доступность        = ФлагПечатьФорм;

	Флаг = (ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв"
	       Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка")
	       И ФлагПровести;
	ЭлементыФормы.ФлагФормироватьСчетФактуру.Доступность = Флаг;
	
	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
		ЭлементыФормы.НадписьДатаРасчетаОстатков.Доступность   = Истина;
		ЭлементыФормы.ПолеВводаДатаРасчетаОстатков.Доступность = Истина;
	Иначе
		ЭлементыФормы.НадписьДатаРасчетаОстатков.Доступность   = Ложь;
		ЭлементыФормы.ПолеВводаДатаРасчетаОстатков.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // Доступность()

// Проверяет корректность и полноту введенных параметров для работы в режиме заполнения
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Истина - данные корректны
//  Ложь   - данные некорректны
//
Функция ПараметрыЗаполнены()

	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение) Тогда
		Предупреждение("Укажите тип формируемых документов!");
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолеВводаОрганизация) Тогда
		Предупреждение("Укажите организацию от имени которой надо формировать документы!");
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолеВводаСклад) Тогда
		Предупреждение("Укажите склад!");
		Возврат Ложь;
	КонецЕсли;
	Если ЭлементыФормы.ПолеВводаТипЦен.Доступность И НЕ ЗначениеЗаполнено(ПолеВводаТипЦен) Тогда
		Предупреждение("Укажите тип цен!");
		Возврат Ложь;
	КонецЕсли;
	Если ЭлементыФормы.ФлагПечатьФорм.Доступность И ФлагПечатьФорм И КолвоЭкземпляров = 0 Тогда
		Предупреждение("Укажите количество экземпляров печатных форм!");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // ПараметрыЗаполнены()

// Пересчитывает остаток по строке таблицы данных
//
// Параметры:
//  СтрокаДанных - пересчитываемая строка таблицы данных
//
Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных)
	Перем Сумма1;
	Перем Сумма2;

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Сумма1 = 0;
	Если мСтруктГрупп["Уровней"] = 1 Тогда
		Для Каждого ГруппаУзел Из мСтруктГрупп["Таблица"] Цикл
			Сумма1 = Сумма1 + СтрокаДанных[ГруппаУзел.ИмяПоля];
		КонецЦикла;
	Иначе
		Для Каждого ГруппаУзел Из мСтруктГрупп["Таблица"] Цикл
			Сумма2 = 0;
			Для Каждого ГруппаЛист Из ГруппаУзел.Узел Цикл
				Сумма2 = Сумма2 + СтрокаДанных[ГруппаЛист.ИмяПоля];
			КонецЦикла;
			Сумма1 = Сумма1 + Сумма2;

			Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда
				СтрокаДанных[ГруппаУзел.ИмяПоля] = "Итого по """ + ГруппаУзел.Ключ + """: " + Формат(Сумма2, "ЧДЦ=3");
			Иначе
				СтрокаДанных[ГруппаУзел.ИмяПоля] = "";
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
		СтрокаДанных.Нераспределено = - СтрокаДанных.Остаток - Сумма1;
	Иначе
		СтрокаДанных.Нераспределено = СтрокаДанных.Остаток - Сумма1;
	КонецЕсли;

КонецПроцедуры // ПересчитатьСуммуПоСтроке()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" на кнопку выполнить
//
Процедура КнопкаВыполнитьНажатие(Элемент)
	Перем СписокДокументов;

	Если Не ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаДанных.Количество() = 0 Тогда
		Предупреждение("Табличная часть не заполнена!", 10);
		Возврат;
	КонецЕсли;

	Если мСтруктГрупп["Таблица"].Количество() = 0 Тогда
		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
		 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда
			Предупреждение("Не указаны склады!", 10);
		ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
			  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв"
			  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
			  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
			  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
			  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда
			Предупреждение("Не указаны покупатели!", 10);
		ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" 
			  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
			Предупреждение("Не указаны поставщики!", 10);
		КонецЕсли;
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда

		СписокДокументов = СоздатьДокументыПеремещения();

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв" Тогда

		СписокДокументов = СоздатьДокументыРеализацияТоваров(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка" Тогда

		СписокДокументов = СоздатьДокументыРеализацияТоваровИзОстатка(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв" Тогда

		СписокДокументов = СоздатьДокументыРеализацияПоступлениеТоваров(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка" Тогда

		СписокДокументов = СоздатьДокументыРеализацияПоступлениеТоваровИзОстатка(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда

		СписокДокументов = СоздатьДокументыРеализацияПоступлениеТоваровПокупкиУСобственных(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда

		СписокДокументов = СоздатьДокументыРеализацияТоваров(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда

		СписокДокументов = СоздатьДокументыРеализацияТоваровИзОстатка(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);

	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда

		СписокДокументов = СоздатьДокументыЗаказы();

	КонецЕсли;

	ЗафиксироватьТранзакцию();

	ОбработатьСписокДокументов(СписокДокументов);

КонецПроцедуры // КнопкаВыполнитьНажатие()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	мПоказыватьКод              = ВосстановитьЗначение("ПакетныйВводДокументов_ПоказыватьКод");
	мПоказыватьАртикул          = ВосстановитьЗначение("ПакетныйВводДокументов_ПоказыватьАртикул");
	мПоказыватьКод              = ?(мПоказыватьКод     = Неопределено, Ложь, мПоказыватьКод);
	мПоказыватьАртикул          = ?(мПоказыватьАртикул = Неопределено, Ложь, мПоказыватьАртикул);

	ПолеВводаДатаАктуальности   = РабочаяДата;
	ПолеВводаОрганизация        = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	ПолеВводаПодразделение      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	ПолеВводаОтветственный      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	ПолеВводаСклад              = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
	ПолеВводаТипЦен             = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
	ПолеВводаСтруктурнаяЕдиница = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКасса");
	ФлагУпрУчет                 = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
	ФлагБухУчет                 = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
	ФлагУчитыватьНДС            = Истина;
	ФлагПечатьРеестра           = Истина;
	МетодРасчетаЦен             = 1;
	КолвоЭкземпляров            = 1;
	ПереключательСпособПечатиБезПросмотра = 1; // С просмотром

	// Заполнить список выбора вида валюты цен
	ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора.Добавить("ВалютаРеглУчета",  "Документы в валюте регламентированного учета");
	ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора.Добавить("ВалютаПоДоговору", "Документы в валюте взаиморасчетов по договору");
	ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение;

	Если ФлагБухУчет Тогда
		ФлагНалогУчет = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	Иначе
		ФлагНалогУчет = ФлагБухУчет;
	КонецЕсли;

	Доступность();

	// Установим значения и доступность флагов учета
	УстановитьЗначенияДоступностьФлаговУчета();

	СоздатьМенюЗаполнить();

	// Предполагается, что при открытии видны все колонки
	Для Каждого КолонкаПоляДанных Из ЭлементыФормы.ТабличноеПолеДанных.Колонки Цикл
		Если КолонкаПоляДанных.Имя = "Код" Тогда
			КолонкаПоляДанных.Видимость = мПоказыватьКод;
		ИначеЕсли КолонкаПоляДанных.Имя = "Артикул" Тогда
			КолонкаПоляДанных.Видимость = мПоказыватьАртикул;
		ИначеЕсли КолонкаПоляДанных.Имя = "Заказ" Тогда
			КолонкаПоляДанных.Видимость = Ложь;
		ИначеЕсли КолонкаПоляДанных.Имя = "СерияНоменклатуры" Тогда
			КолонкаПоляДанных.Видимость = Ложь;
		Иначе
			КолонкаПоляДанных.Видимость = Истина;
		КонецЕсли
	КонецЦикла;

	ВыбранноеЗначение = ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение;
	Флаг              = ВыбранноеЗначение = "ПеремещениеРезерв"
	                  Или ВыбранноеЗначение = "ПродажаРезерв"
	                  Или ВыбранноеЗначение = "СобственныеРезерв"
	                  Или ВыбранноеЗначение = "КомиссияРезерв";
	Фиксация          = ?(Флаг, 2, ?(ВыбранноеЗначение = "Заказы", 5, 4))
	                  + ?(мКолонкиДанных.Код.Видимость,     1, 0)
	                  + ?(мКолонкиДанных.Артикул.Видимость, 1, 0);

	Если ВыбранноеЗначение = "ПокупкаУСобственных" Тогда
		Фиксация = Фиксация + 1;
	КонецЕсли;

	ЭлементыФормы.ТабличноеПолеДанных.ФиксацияСлева                 = Фиксация;
	ЭлементыФормы.ТабличноеПолеДанных.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	
	ТаблицаДанных.Индексы.Добавить("Номенклатура,Характеристика,СерияНоменклатуры");

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора = Новый СписокЗначений;

	Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
		ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("ПеремещениеИзОстатка", "Товары по розничным точкам/магазинам (из свободного остатка)");
		ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("ПеремещениеРезерв",    "Товары по розничным точкам/магазинам (из резерва)");
	КонецЕсли;

	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("СобственныеИзОстатка", "Товары по собственным контрагентам (из свободного остатка)");
	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("ПокупкаУСобственных",  "Отрицательные остатки организации (закупка у собственных контрагентов)");
	//ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("СобственныеРезерв",    "Товары по собственным контрагентам (из резерва)");
	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("ПродажаИзОстатка",     "Товары по покупателям (из свободного остатка)");
	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("ПродажаРезерв",        "Товары по покупателям (из резерва)");
	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("КомиссияИзОстатка",    "Товары по комиссионерам (из свободного остатка)");
	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("КомиссияРезерв",       "Товары по комиссионерам (из резерва)");
	ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора.Добавить("Заказы",               "Товары по поставщикам");

	ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = ЭлементыФормы.ПолеВыбораРежимаРаботы.СписокВыбора[0].Значение;

	мТаблицаЗначенийДоступностиФлаговУчета = Новый ТаблицаЗначений;
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("РежимРаботы");
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("ДоступностьФлагУпрУчет",           Новый ОписаниеТипов("Булево"));
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("ЗначениеПоУмолчаниюФлагУпрУчет",   Новый ОписаниеТипов("Булево"));
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("ДоступностьФлагБухУчет",           Новый ОписаниеТипов("Булево"));
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("ЗначениеПоУмолчаниюФлагБухУчет",   Новый ОписаниеТипов("Булево"));
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("ДоступностьФлагНалогУчет",         Новый ОписаниеТипов("Булево"));
	мТаблицаЗначенийДоступностиФлаговУчета.Колонки.Добавить("ЗначениеПоУмолчаниюФлагНалогУчет", Новый ОписаниеТипов("Булево"));
	мТаблицаЗначенийДоступностиФлаговУчета.Индексы.Добавить("РежимРаботы");

	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("ПеремещениеИзОстатка", Ложь  , Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("ПеремещениеРезерв"   , Ложь  , Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("СобственныеИзОстатка", Истина, Ложь,   Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("ПокупкаУСобственных",  Истина, Ложь,   Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("СобственныеРезерв"   , Истина, Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("ПродажаИзОстатка"    , Истина, Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("ПродажаРезерв"       , Истина, Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("КомиссияИзОстатка"   , Истина, Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("КомиссияРезерв"      , Истина, Истина, Истина, Истина, Истина, Ложь);
	ДобавитьСтрокуВТаблицуЗначенийДоступностиФлаговУчета("Заказы"              , Ложь  , Ложь,   Ложь  , Ложь,   Ложь,   Ложь);
	СоздатьСтруктГрупп();
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()

	СохранитьЗначение("ПакетныйВводДокументов_ПоказыватьКод",     мКолонкиДанных.Код.Видимость);
	СохранитьЗначение("ПакетныйВводДокументов_ПоказыватьАртикул", мКолонкиДанных.Артикул.Видимость);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" поля режима работы
//
Процедура ПолеВыбораРежимаРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ТабПоле;

	ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = ВыбранноеЗначение;
	ОчиститьТабДанных();

	Если ВыбранноеЗначение = "ПеремещениеИзОстатка" Тогда
		мСтруктГрупп["Уровней"] = 1;
	Иначе
		мСтруктГрупп["Уровней"] = 2;
	КонецЕсли;

	Если ВыбранноеЗначение = "Заказы" Тогда
		ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение;
		ЭлементыФормы.ТабличноеПолеДанных.Колонки.Заказ.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
	КонецЕсли;

	Доступность();
	СоздатьМенюЗаполнить();

	ТабПоле = ЭлементыФормы.ТабличноеПолеДанных;
	Если ВыбранноеЗначение = "Заказы" Тогда
		ТабПоле.Колонки["Остаток"]       .ТекстШапки = "Требуется";
		ТабПоле.Колонки["Нераспределено"].ТекстШапки = "Не заказано";
	Иначе
		ТабПоле.Колонки["Остаток"]       .ТекстШапки = "Остаток";
		ТабПоле.Колонки["Нераспределено"].ТекстШапки = "Нераспределено";
	КонецЕсли;

	Флаг = ВыбранноеЗначение = "ПеремещениеРезерв"
	       Или ВыбранноеЗначение = "ПродажаРезерв"
	       Или ВыбранноеЗначение = "СобственныеРезерв"
	       Или ВыбранноеЗначение = "КомиссияРезерв";
	ТабПоле.Колонки["Остаток"]       .Видимость = Не Флаг;
	ТабПоле.Колонки["Нераспределено"].Видимость = Не Флаг;

	Фиксация   = ?(Флаг, 2, ?(ВыбранноеЗначение = "Заказы", 5, 4))
	           + ?(мКолонкиДанных.Код.Видимость,     1, 0)
	           + ?(мКолонкиДанных.Артикул.Видимость, 1, 0);

	ТабПоле.ФиксацияСлева                 = Фиксация;
	ТабПоле.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;

	// Установим значения и доступность флагов учета
	УстановитьЗначенияДоступностьФлаговУчета();

КонецПроцедуры // ПолеВыбораРежимаРаботыОбработкаВыбора()

// Процедура - обработчик события "Очистка" поля режим работы
//
// Параметры:
//  Нет.
//
Процедура ПолеВыбораРежимаРаботыОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" на кнопку "Заполнить" командной панели
//
Процедура ВыполнитьАвтоЗаполнение(Кнопка)
	Перем Флаг;

	Если Не ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаДанных.Количество() > 0 Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!
					   |Продолжить?", РежимДиалогаВопрос.ОкОтмена,, КодВозвратаДиалога.Отмена);
		Если Ответ <> КодВозвратаДиалога.Ок Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОчиститьТабДанных();

	Флаг = ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы";
	ЭлементыФормы.ТабличноеПолеДанных.Колонки["Заказ"].Видимость = Флаг;
	мДополнительныеПоля.Очистить();

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда
		ЗаполнитьДляПеремещения();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда
		//
		мДополнительныеПоля.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
		мДополнительныеПоля.Вставить("Заказ", "ЗаказПокупателя");
		ЗаполнитьДляРеализации();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда
		ЗаполнитьДляЗаказов();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда
		ЗаполнитьОстатками();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
		ЗаполнитьОтрицательнымиОстаткамиОрганизации();
	КонецЕсли;

	ЭлементыФормы.ПанельОбработки.ТекущаяСтраница = ЭлементыФормы.ПанельОбработки.Страницы["СтраницаТаблица"];

КонецПроцедуры // ВыполнитьАвтоЗаполнение()

// Процедура - обработчик события выбора пункта меню "Распределить по отрицательным остаткам"
// по кнопке "Заполнить" командной панели табличного. Вызывается, если выбран вариант 
// распределения "Товары по собственным контрагентам (из свободного остатка)"
//
Процедура РаспределитьПоОтрицательнымОстаткам()

	Если мКолонкиДанных.СерияНоменклатуры.Видимость = Ложь Тогда
		мКолонкиДанных.СерияНоменклатуры.Видимость = Истина;
		ЭлементыФормы.ТабличноеПолеДанных.ФиксацияСлева = ЭлементыФормы.ТабличноеПолеДанных.ФиксацияСлева + 1;
	КонецЕсли;
	
	ЗапросОтрицательныеОстатки = Новый Запрос;
	ЗапросОтрицательныеОстатки.УстановитьПараметр("СписокКонтрагентов", СписокСобственныхКонтрагентов());
	ЗапросОтрицательныеОстатки.УстановитьПараметр("ТекОрганизация", ПолеВводаОрганизация);
	ЗапросОтрицательныеОстатки.УстановитьПараметр("ДатаДокументов", КонецДня(ПолеВводаДатаАктуальности));
	
	Если НЕ ЗначениеЗаполнено(ПолеВводаДатаРасчетаОстатков) Тогда
		СтрокаДата = "";
	Иначе
		СтрокаДата = "&ДатаРасчетаОстатков";
		ЗапросОтрицательныеОстатки.УстановитьПараметр("ДатаРасчетаОстатков", КонецДня(ПолеВводаДатаРасчетаОстатков));
	КонецЕсли;

	Если ТипЗнч(мСтруктГрупп) <> Тип("Структура") Тогда
		СоздатьСтруктГрупп();
	КонецЕсли;
	
	Если мСтруктГрупп.МаксИндекс1 <> 0 Тогда

		
		ЗапросОтрицательныеОстатки.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
		
		МассивСобственныхКонтрагентов = Новый Массив;
		Для Каждого СтрокаТабГрупп из мСтруктГрупп.Таблица Цикл
			МассивСобственныхКонтрагентов.Добавить(СтрокаТабГрупп.Ключ);
		КонецЦикла;
		
		ЗапросОтрицательныеОстатки.УстановитьПараметр("МассивСобственныхКонтрагентов", МассивСобственныхКонтрагентов);

		ТекстФильтраОрганизаций = "
		|ВЫБРАТЬ
		|   ВЫРАЗИТЬ(Объект КАК Справочник.Организации) КАК Объект
		|ИЗ
		|   РегистрСведений.СобственныеКонтрагенты 
		|ГДЕ Контрагент в (&МассивСобственныхКонтрагентов)
		|    И ВидСвязи = &ВидСвязи
		|    И Объект   <> &ТекОрганизация";
		
	Иначе
		ТекстФильтраОрганизаций = "ВЫБРАТЬ Ссылка ИЗ Справочник.Организации
		|						   ГДЕ Справочник.Организации.Ссылка <> &ТекОрганизация";
	КонецЕсли;
	
	ЗапросОтрицательныеОстатки.Текст = "
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Организация                                      КАК Организация,
	|	ТоварыОрганизацийОстатки.Номенклатура                                     КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК Единица,
	|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток                                КАК ОтрицательныйОстаток,
	|	ПоложительныеОстатки.КоличествоОстаток                                    КАК ПоложительныйОстаток
	|ИЗ 
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(" + СтрокаДата + ", Организация В (" + ТекстФильтраОрганизаций + ")) КАК ТоварыОрганизацийОстатки 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаДокументов, Организация = &ТекОрганизация) КАК ПоложительныеОстатки
	|ПО ТоварыОрганизацийОстатки.Номенклатура = ПоложительныеОстатки.Номенклатура
	|	И ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ПоложительныеОстатки.ХарактеристикаНоменклатуры
	|	И ТоварыОрганизацийОстатки.СерияНоменклатуры = ПоложительныеОстатки.СерияНоменклатуры
	|ГДЕ ТоварыОрганизацийОстатки.КоличествоОстаток < 0
	|	 И ПоложительныеОстатки.КоличествоОстаток > 0
	|
	|ИТОГИ ПО Организация";

	РезультатЗапроса = ЗапросОтрицательныеОстатки.Выполнить();
	
	Если мСтруктГрупп.МаксИндекс1 = 0 Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			Запрос =  Новый Запрос;
			Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
			Запрос.УстановитьПараметр("Основание" , Выборка.Организация);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|   СобственныеКонтрагенты.Контрагент КАК Контрагент,
			|   Договоры.Ссылка                   КАК Договор,
			|   ВЫБОР КОГДА Договоры.Ссылка = СобственныеКонтрагенты.Контрагент.ОсновнойДоговорКонтрагента ТОГДА
			|   	0
			|	ИНАЧЕ 
			|		1
			|	КОНЕЦ                             КАК ПризнакСортировки
			|ИЗ
			|   РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
			|ПО Договоры.Владелец = СобственныеКонтрагенты.Контрагент
			|
			|ГДЕ Объект     = &Основание
			|    И ВидСвязи = &ВидСвязи
			|УПОРЯДОЧИТЬ ПО ПризнакСортировки
			|";

			ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаДоговоров.Следующий() Тогда
				ПолеГруппы(ВыборкаДоговоров.Контрагент, ВыборкаДоговоров.Договор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",      Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",    Выборка.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
		
		МассивНайденныхСтрок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			Строка = ТаблицаДанных.Добавить();
			Строка.Номенклатура      = Выборка.Номенклатура;
			Строка.Единица           = Выборка.Единица;
			Строка.Коэффициент       = Выборка.Коэффициент;
			Строка.Характеристика    = Выборка.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			Строка.Остаток           = Выборка.ПоложительныйОстаток;
			Строка.ТоварТара         = Перечисления.ТоварТара.Товар;
			Строка.Нераспределено    = Выборка.ПоложительныйОстаток;
			ПоложительныйОстаток     = Выборка.ПоложительныйОстаток;
		Иначе
			Строка = МассивНайденныхСтрок[0];
			ПоложительныйОстаток  = Строка.Нераспределено;
		КонецЕсли;
		Контрагент = СобственныйКонтрагентПродавец(Выборка.Организация);
		СтрокаТаблицы = мСтруктГрупп.Таблица.Найти(Контрагент, "Ключ");
		Если СтрокаТаблицы <> Неопределено Тогда
			ИмяПоля = СтрокаТаблицы.ИмяПоля;
			Строка[ИмяПоля] = "Остаток по организации: " + Выборка.ОтрицательныйОстаток;
			ИмяПоля = СтрокаТаблицы.Узел[0].ИмяПоля;
			Строка[ИмяПоля] = Мин(ПоложительныйОстаток, - Выборка.ОтрицательныйОстаток);
			ПоложительныйОстаток  = ПоложительныйОстаток - Строка[ИмяПоля];
			Строка.Нераспределено = ПоложительныйОстаток;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события выбора пункта меню "Распределить отрицательные остатки"
// по кнопке "Заполнить" командной панели табличного. Вызывается, если выбран вариант 
// распределения "Отрицательные остатки организации (закупка у собственных контрагентов)"
//
Процедура РаспределитьОтрицательныеОстатки()

	Если НЕ ЗначениеЗаполнено(ПолеВводаОрганизация) Тогда
		Предупреждение("Укажите организацию от имени которой надо формировать документы!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПолеВводаСклад) Тогда
		Предупреждение("Укажите склад!");
		Возврат;
	КонецЕсли;

	Если ТаблицаДанных.Количество() > 0 Тогда
		Ответ = Вопрос("При распределении табличная часть будет перезаполнена!
					   |Продолжить?", РежимДиалогаВопрос.ОкОтмена,, КодВозвратаДиалога.Отмена);
		Если Ответ <> КодВозвратаДиалога.Ок Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если мКолонкиДанных.СерияНоменклатуры.Видимость = Ложь Тогда
		мКолонкиДанных.СерияНоменклатуры.Видимость = Истина;
		ЭлементыФормы.ТабличноеПолеДанных.ФиксацияСлева = ЭлементыФормы.ТабличноеПолеДанных.ФиксацияСлева + 1;
	КонецЕсли;

	ЗапросОтрицательныеОстатки = Новый Запрос;
	ЗапросОтрицательныеОстатки.УстановитьПараметр("СписокКонтрагентов", СписокСобственныхКонтрагентов());
	ЗапросОтрицательныеОстатки.УстановитьПараметр("ТекОрганизация"    , ПолеВводаОрганизация);
	ЗапросОтрицательныеОстатки.УстановитьПараметр("ДатаДокументов"    , КонецДня(ПолеВводаДатаАктуальности));
	ЗапросОтрицательныеОстатки.УстановитьПараметр("Склад"             , ПолеВводаСклад);

	Если НЕ ЗначениеЗаполнено(ПолеВводаДатаРасчетаОстатков) Тогда
		СтрокаДата = "";
	Иначе
		СтрокаДата = "&ДатаРасчетаОстатков";
		ЗапросОтрицательныеОстатки.УстановитьПараметр("ДатаРасчетаОстатков", КонецДня(ПолеВводаДатаРасчетаОстатков));
	КонецЕсли;

	Если ТипЗнч(мСтруктГрупп) <> Тип("Структура") Тогда
		СоздатьСтруктГрупп();
	КонецЕсли;

	Если мСтруктГрупп.МаксИндекс1 <> 0 Тогда

		
		ЗапросОтрицательныеОстатки.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
		
		МассивСобственныхКонтрагентов = Новый Массив;
		Для Каждого СтрокаТабГрупп из мСтруктГрупп.Таблица Цикл
			МассивСобственныхКонтрагентов.Добавить(СтрокаТабГрупп.Ключ);
		КонецЦикла;
		
		ЗапросОтрицательныеОстатки.УстановитьПараметр("МассивСобственныхКонтрагентов", МассивСобственныхКонтрагентов);

		ТекстФильтраОрганизаций = "
		|ВЫБРАТЬ
		|   ВЫРАЗИТЬ(Объект КАК Справочник.Организации) КАК Объект
		|ИЗ
		|   РегистрСведений.СобственныеКонтрагенты 
		|ГДЕ Контрагент в (&МассивСобственныхКонтрагентов)
		|    И ВидСвязи = &ВидСвязи
		|    И Объект   <> &ТекОрганизация";
		
	Иначе
		ТекстФильтраОрганизаций = "ВЫБРАТЬ Ссылка ИЗ Справочник.Организации
		|						   ГДЕ Справочник.Организации.Ссылка <> &ТекОрганизация";
	КонецЕсли;
	
	ЗапросОтрицательныеОстатки.Текст = "
	|ВЫБРАТЬ
	|	ПоложительныеОстатки.Организация                                          КАК Организация,
	|	ТоварыОрганизацийОстатки.Номенклатура                                     КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток                                КАК ОтрицательныйОстаток,
	|	ПоложительныеОстатки.КоличествоОстаток                                    КАК ПоложительныйОстаток,
	|	- ТоварыОрганизацийОстатки.КоличествоОстаток                              КАК ОстатокГлавнойОрганизации
	|ПОМЕСТИТЬ ВременнаяРаспределение
	|ИЗ 
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(" + СтрокаДата + ", Склад = &Склад И Организация = &ТекОрганизация) КАК ТоварыОрганизацийОстатки 
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаДокументов, Склад = &Склад И Организация В (" + ТекстФильтраОрганизаций + ")) КАК ПоложительныеОстатки
	|ПО ТоварыОрганизацийОстатки.Номенклатура = ПоложительныеОстатки.Номенклатура
	|	И ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры = ПоложительныеОстатки.ХарактеристикаНоменклатуры
	|	И ТоварыОрганизацийОстатки.СерияНоменклатуры = ПоложительныеОстатки.СерияНоменклатуры
	|ГДЕ ТоварыОрганизацийОстатки.КоличествоОстаток < 0
	|	 И ПоложительныеОстатки.КоличествоОстаток > 0
	|ИНДЕКСИРОВАТЬ ПО
	|	ПоложительныеОстатки.Организация,
	|	ТоварыОрганизацийОстатки.Номенклатура,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры
	|;
	|ВЫБРАТЬ
	|	ВременнаяРаспределение.Организация                                      КАК Организация,
	|	ВременнаяРаспределение.Номенклатура                                     КАК Номенклатура,
	|	ВременнаяРаспределение.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ВременнаяРаспределение.СерияНоменклатуры                                КАК СерияНоменклатуры,
	|	ВременнаяРаспределение.Номенклатура.ЕдиницаХраненияОстатков             КАК Единица,
	|	ВременнаяРаспределение.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	МИНИМУМ(ВременнаяРаспределение.ОстатокГлавнойОрганизации)               КАК ОстатокГлавнойОрганизации,
	|	МИНИМУМ(ВременнаяРаспределение.ОтрицательныйОстаток)                    КАК ОтрицательныйОстаток,
	|	МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток)                    КАК ОстатокОрганизации,
	|	ВЫБОР	КОГДА (СУММА(ВременнаяРаспределениеСоединения.ПоложительныйОстаток) - МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток))
	|				>= МИНИМУМ(ВременнаяРаспределение.ОстатокГлавнойОрганизации)
				// Все распределено на предыдущем шаге, для текущего шага 0.00.
	|			ТОГДА 0.00
	|			ИНАЧЕ	ВЫБОР	КОГДА МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток) = СУММА(ВременнаяРаспределениеСоединения.ПоложительныйОстаток)
								// Первая строка в группе, получаем минимальное значение между отрицательным остатком организации (покупатель) и положительным остатком организации (поставщик).
	|							ТОГДА	ВЫБОР	КОГДА МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток) >= СУММА(ВременнаяРаспределениеСоединения.ПоложительныйОстаток)
	|											ТОГДА СУММА(ВременнаяРаспределениеСоединения.ПоложительныйОстаток)
	|											ИНАЧЕ МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток)
	|									КОНЕЦ
								// Следующая строка в группе для распределения.
	|							ИНАЧЕ	ВЫБОР	КОГДА (МИНИМУМ(ВременнаяРаспределение.ОстатокГлавнойОрганизации) -
	|												(СУММА(ВременнаяРаспределениеСоединения.ПоложительныйОстаток) - МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток))) >= МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток)
												// Нераспределенное больше остатка поставщика, берется остаток поставщика.
	|											ТОГДА МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток)
												// Нераспределенное меньше остатка поставщика, берется нераспределенный остаток.
	|											ИНАЧЕ МИНИМУМ(ВременнаяРаспределение.ОстатокГлавнойОрганизации) -
	|												(СУММА(ВременнаяРаспределениеСоединения.ПоложительныйОстаток) - МИНИМУМ(ВременнаяРаспределение.ПоложительныйОстаток))
	|									КОНЕЦ
	|					КОНЕЦ
	|	КОНЕЦ КАК ПоложительныйОстаток
	|ИЗ
	|	ВременнаяРаспределение КАК ВременнаяРаспределение
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяРаспределение КАК ВременнаяРаспределениеСоединения
	|ПО
	|	ВременнаяРаспределение.Организация >= ВременнаяРаспределениеСоединения.Организация
	|	И ВременнаяРаспределение.Номенклатура = ВременнаяРаспределениеСоединения.Номенклатура
	|	И ВременнаяРаспределение.ХарактеристикаНоменклатуры = ВременнаяРаспределениеСоединения.ХарактеристикаНоменклатуры
	|	И ВременнаяРаспределение.СерияНоменклатуры = ВременнаяРаспределениеСоединения.СерияНоменклатуры
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяРаспределение.Организация,
	|	ВременнаяРаспределение.Номенклатура,
	|	ВременнаяРаспределение.ХарактеристикаНоменклатуры,
	|	ВременнаяРаспределение.СерияНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	ВременнаяРаспределение.Организация ВОЗР
	|ИТОГИ ПО Организация";

	РезультатЗапроса = ЗапросОтрицательныеОстатки.Выполнить();
	
	Если мСтруктГрупп.МаксИндекс1 = 0 Тогда
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			
			Запрос =  Новый Запрос;
			Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
			Запрос.УстановитьПараметр("Основание" , Выборка.Организация);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|   СобственныеКонтрагенты.Контрагент КАК Контрагент,
			|   Договоры.Ссылка                   КАК Договор,
			|   ВЫБОР КОГДА Договоры.Ссылка = СобственныеКонтрагенты.Контрагент.ОсновнойДоговорКонтрагента ТОГДА
			|   	0
			|	ИНАЧЕ 
			|		1
			|	КОНЕЦ                             КАК ПризнакСортировки
			|ИЗ
			|   РегистрСведений.СобственныеКонтрагенты КАК СобственныеКонтрагенты
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
			|ПО Договоры.Владелец = СобственныеКонтрагенты.Контрагент
			|
			|ГДЕ Объект     = &Основание
			|	И ВидСвязи = &ВидСвязи
			|	И Договоры.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
			|УПОРЯДОЧИТЬ ПО ПризнакСортировки
			|";

			ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаДоговоров.Следующий() Тогда
				ПолеГруппы(ВыборкаДоговоров.Контрагент, ВыборкаДоговоров.Договор);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",      Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",    Выборка.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
		МассивНайденныхСтрок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			Строка = ТаблицаДанных.Добавить();
			Строка.Номенклатура      = Выборка.Номенклатура;
			Строка.Единица           = Выборка.Единица;
			Строка.Коэффициент       = Выборка.Коэффициент;
			Строка.Характеристика    = Выборка.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			Строка.Остаток           = Выборка.ОтрицательныйОстаток;
			Строка.ТоварТара         = Перечисления.ТоварТара.Товар;
			Строка.Нераспределено    = Выборка.ОтрицательныйОстаток;
			ОтрицательныйОстаток     = - Выборка.ОтрицательныйОстаток;
		Иначе
			Строка = МассивНайденныхСтрок[0];
			ОтрицательныйОстаток  = - Выборка.ОтрицательныйОстаток;
		КонецЕсли;
		Контрагент = СобственныйКонтрагентПродавец(Выборка.Организация);
		СтрокаТаблицы = мСтруктГрупп.Таблица.Найти(Контрагент, "Ключ");
		Если СтрокаТаблицы <> Неопределено Тогда
			ИмяПоля = СтрокаТаблицы.ИмяПоля;
			Строка[ИмяПоля] = "Остаток по организации: " + Выборка.ОстатокОрганизации;
			ИмяПоля = СтрокаТаблицы.Узел[0].ИмяПоля;
			Строка[ИмяПоля] = Мин(ОтрицательныйОстаток, Выборка.ПоложительныйОстаток);
			ОтрицательныйОстаток  = ОтрицательныйОстаток - Строка[ИмяПоля];
			ВсегоРаспределено = 0.00;
			Для Каждого СтрокаТаблицыВсего Из мСтруктГрупп.Таблица Цикл
				ИмяПоляВсего = СтрокаТаблицыВсего.Узел[0].ИмяПоля;
				ВсегоРаспределено = ВсегоРаспределено + Строка[ИмяПоляВсего];
			КонецЦикла;
			Строка.Нераспределено = Выборка.ОстатокГлавнойОрганизации - ВсегоРаспределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события выбора пункта меню "Заполнить по остаткам"
// по кнопке "Заполнить" командной панели табличного. Вызывается, если выбран вариант 
// распределения "Отрицательные остатки организации (закупка у собственных контрагентов)"
//
Процедура ЗаполнитьОтрицательнымиОстаткамиОрганизации()
	
	ЗапросОтрицательныеОстатки = Новый Запрос;
	ЗапросОтрицательныеОстатки.УстановитьПараметр("СписокКонтрагентов", СписокСобственныхКонтрагентов());
	ЗапросОтрицательныеОстатки.УстановитьПараметр("ТекОрганизация", ПолеВводаОрганизация);
	ЗапросОтрицательныеОстатки.УстановитьПараметр("ДатаДокументов", КонецДня(ПолеВводаДатаАктуальности));
	
	Если НЕ ЗначениеЗаполнено(ПолеВводаДатаРасчетаОстатков) Тогда
		СтрокаДата = "";
	Иначе
		СтрокаДата = "&ДатаРасчетаОстатков";
		ЗапросОтрицательныеОстатки.УстановитьПараметр("ДатаРасчетаОстатков", КонецДня(ПолеВводаДатаРасчетаОстатков));
	КонецЕсли;
	
	СтрокаУсловияСклада = "";
	ВестиУчетТоваровОрганизацийВРазрезеСкладов = Ложь;
	ТаблицаСУчетнойПолитекой = РегистрыСведений.УчетнаяПолитика.СрезПоследних(ПолеВводаДатаРасчетаОстатков);
	ВестиУчетТоваровОрганизацийВРазрезеСкладов = ?(ТаблицаСУчетнойПолитекой.Количество() > 0, ТаблицаСУчетнойПолитекой[0]["ВестиУчетТоваровОрганизацийВРазрезеСкладов"],Ложь);
	Если НЕ ПолеВводаСклад.Пустая() И ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
		СтрокаУсловияСклада = " И Склад = &Склад";
		ЗапросОтрицательныеОстатки.УстановитьПараметр("Склад", ПолеВводаСклад);
	КонецЕсли;


	ЗапросОтрицательныеОстатки.Текст = "
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.Организация                                      КАК Организация,
	|	ТоварыОрганизацийОстатки.Номенклатура                                     КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаХраненияОстатков             КАК Единица,
	|	ТоварыОрганизацийОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры,
	|	ТоварыОрганизацийОстатки.СерияНоменклатуры,
	|	ТоварыОрганизацийОстатки.КоличествоОстаток                                КАК ОтрицательныйОстаток
	|ИЗ 
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(" + СтрокаДата + ", Организация = &ТекОрганизация " + СтрокаУсловияСклада + ") КАК ТоварыОрганизацийОстатки 
	|ГДЕ ТоварыОрганизацийОстатки.КоличествоОстаток < 0
	|";

	РезультатЗапроса = ЗапросОтрицательныеОстатки.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",      Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",    Выборка.ХарактеристикаНоменклатуры);
		СтруктураПоиска.Вставить("СерияНоменклатуры", Выборка.СерияНоменклатуры);
		
		МассивНайденныхСтрок = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
		Если МассивНайденныхСтрок.Количество() = 0 Тогда
			Строка = ТаблицаДанных.Добавить();
			Строка.Номенклатура      = Выборка.Номенклатура;
			Строка.Единица           = Выборка.Единица;
			Строка.Коэффициент       = Выборка.Коэффициент;
			Строка.Характеристика    = Выборка.ХарактеристикаНоменклатуры;
			Строка.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			Строка.Остаток           = Выборка.ОтрицательныйОстаток;
			Строка.ТоварТара         = Перечисления.ТоварТара.Товар;
			Строка.Нераспределено    = - Выборка.ОтрицательныйОстаток;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" на кнопку "Подбор" командной панели
// Вызывает форму подбора номенклатуры
//
Процедура ВыполнитьЗаполнениеПоОстаткам(Кнопка)
	Перем Ответ;

	Если Не ПараметрыЗаполнены() Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаДанных.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить табличную часть при заполнении?",
					РежимДиалогаВопрос.ДаНетОтмена,,
					КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьТабДанных();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если мСтруктГрупп = Неопределено Тогда
			СоздатьСтруктГрупп();
		КонецЕсли;
	КонецЕсли;

	мПоказыватьКод     = мКолонкиДанных.Код.Видимость;
	мПоказыватьАртикул = мКолонкиДанных.Артикул.Видимость;
	Форма              = ПолучитьФорму("ФормаПодбора", ЭтаФорма);

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Ответ = Вопрос("Предыдущая операция выбора вида документа не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;

	Форма.ДатаАктуальности        = КонецДня(ПолеВводаДатаАктуальности);
	Форма.НачальноеЗначениеВыбора = Новый Структура;
	Форма.НачальноеЗначениеВыбора.Вставить("Склад", ПолеВводаСклад);
	Форма.Открыть();

	мФормаПодбора = Форма;

КонецПроцедуры // ВыполнитьЗаполнениеПоОстаткам()

// Процедура - обработчик события "ПриОкончанииРедактирования" данных в таблице данных
//
Процедура ТабличноеПолеДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не мСтруктГрупп = Неопределено Тогда
		ЗаполнитьСтрокуДанными(Элемент.ТекущаяСтрока, Истина);
		ПересчитатьСуммуПоСтроке(Элемент.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры // ТабличноеПолеДанныхПриОкончанииРедактирования

// Процедура - обработчик события "нажатие" на кнопку удаление колонки из таблицы данных
//
Процедура УдалитьКолонкуИзТаблицыДанных(Кнопка)
	Перем Дерево;
	Перем Строка1;
	Перем Строка2;
	Перем УдалСтр;
	Перем ТабЗаг;

	//Если ТаблицаДанных.Количество() = 0 Тогда
	//	Предупреждение("Таблица не заполнена!", 10);
	//	Возврат ;
	//КонецЕсли;

	Дерево = Новый ДеревоЗначений;
	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв"
	 Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда
		ТабЗаг = "Розничный склад";
	Иначе
		ТабЗаг = "Контрагент / Договор";
	КонецЕсли;
	Дерево.Колонки.Добавить("Элемент",, ТабЗаг);

	Для Каждого Узел Из мСтруктГрупп["Таблица"] Цикл
		Строка1 = Дерево.Строки.Добавить();
		Строка1.Элемент = Узел.Ключ;
		Для Каждого Лист Из Узел.Узел Цикл
			Строка2 = Строка1.Строки.Добавить();
			Строка2.Элемент  = Лист.Ключ;
		КонецЦикла;
	КонецЦикла;

	УдалСтр = Дерево.ВыбратьСтроку("Выберите элемент который надо удалить из таблицы...");
	Если УдалСтр = Неопределено Тогда
		Возврат ;
	КонецЕсли;
	Если УдалСтр.Родитель = Неопределено Тогда // Это верхний уровень
		Узел = мСтруктГрупп["Таблица"].Найти(УдалСтр.Элемент, "Ключ");
		Для Каждого Лист Из Узел.Узел Цикл
			УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Лист.ИмяПоля);
			УдалитьКолонку(ТаблицаДанных, Лист.ИмяПоля);
		КонецЦикла;

		// Колонка "Цена"
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Узел.ИмяПоля);
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, "Цена_" + Узел.Индекс);
		УдалитьКолонку(ТаблицаДанных, Узел.ИмяПоля);
		УдалитьКолонку(ТаблицаДанных, "Цена_" + Узел.Индекс);

		// Колонка "Валюта цены"
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Узел.ИмяПоля);
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, "Валюта_" + Узел.Индекс);
		УдалитьКолонку(ТаблицаДанных, Узел.ИмяПоля);
		УдалитьКолонку(ТаблицаДанных, "Валюта_" + Узел.Индекс);

		мСтруктГрупп["Таблица"].Удалить(Узел);

	Иначе
		Узел = мСтруктГрупп["Таблица"].Найти( ВладелецГруппы( УдалСтр.Элемент), "Ключ");
		Лист = Узел.Узел.Найти(УдалСтр.Элемент, "Ключ");
		УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Лист.ИмяПоля, Истина);
		УдалитьКолонку(ТаблицаДанных, Лист.ИмяПоля);

		Узел.Узел.Удалить(Лист);
		Если Узел.Узел.Количество() = 0 Тогда
			// Колонка "Цена"
			УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Узел.ИмяПоля);
			УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, "Цена_" + Узел.Индекс);
			УдалитьКолонку(ТаблицаДанных, Узел.ИмяПоля);
			УдалитьКолонку(ТаблицаДанных, "Цена_" + Узел.Индекс);

			// Колонка "Валюта цены"
			УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, Узел.ИмяПоля);
			УдалитьКолонку(ЭлементыФормы.ТабличноеПолеДанных, "Валюта_" + Узел.Индекс);
			УдалитьКолонку(ТаблицаДанных, Узел.ИмяПоля);
			УдалитьКолонку(ТаблицаДанных, "Валюта_" + Узел.Индекс);

			мСтруктГрупп["Таблица"].Удалить(Узел);
		КонецЕсли;

	КонецЕсли;

	Для Каждого Строка Из ТаблицаДанных Цикл
		ПересчитатьСуммуПоСтроке(Строка);
	КонецЦикла;

КонецПроцедуры // УдалитьКолонкуДоговор()

// Процедура - обработчик события "нажатие" на кнопку добавления колонки в таблицу данных
//
Процедура ДобавитьКолонкуВТаблицуДанных(Кнопка)
	//Если ТаблицаДанных.Количество() = 0 Тогда
	//	Предупреждение("Таблица не заполнена!", 10);
	//	Возврат ;
	//КонецЕсли;

	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда
		мФормаВыбораЗаказа = Документы["ВнутреннийЗаказ"].ПолучитьФормуВыбора(, ЭтаФорма,);
		мФормаВыбораЗаказа.ЗакрыватьПриВыборе = Ложь;
		мФормаВыбораЗаказа.РежимВыбора        = Истина;

		мФормаВыбораЗаказа.Открыть();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда
		мФормаВыбораЗаказа = Документы["ЗаказПокупателя"].ПолучитьФормуВыбора(, ЭтаФорма,);
		СписокОтбора       = СписокСобственныхКонтрагентов();

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеРезерв" Тогда
			мФормаВыбораЗаказа.Отбор.Контрагент.ВидСравнения  = ВидСравнения.ВСписке;
			мФормаВыбораЗаказа.Отбор.Контрагент.Значение      = СписокОтбора;
			мФормаВыбораЗаказа.Отбор.Контрагент.Использование = Истина;
		Иначе
			мФормаВыбораЗаказа.Отбор.Контрагент.ВидСравнения  = ВидСравнения.НеВСписке;
			мФормаВыбораЗаказа.Отбор.Контрагент.Значение      = СписокОтбора;
			мФормаВыбораЗаказа.Отбор.Контрагент.Использование = Истина;
			мДополнительныеПоля.Вставить("ПроцентАвтоматическихСкидок", "ПроцентАвтоматическихСкидок");
			мДополнительныеПоля.Вставить("Заказ", "ЗаказПокупателя");
		КонецЕсли;
		
		мФормаВыбораЗаказа.ЗакрыватьПриВыборе = Ложь;
		мФормаВыбораЗаказа.РежимВыбора        = Истина;

		мФормаВыбораЗаказа.Открыть();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных"
		  Или ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка" Тогда
		мФормаВыбораКонтрагента = Справочники["Контрагенты"].ПолучитьФормуВыбора(, ЭтаФорма,);

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "СобственныеИзОстатка" 
		 ИЛИ ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
			СписокОтбора = СписокСобственныхКонтрагентов();

			мФормаВыбораКонтрагента.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
			мФормаВыбораКонтрагента.Отбор.Ссылка.Значение      = СписокОтбора;
			мФормаВыбораКонтрагента.Отбор.Ссылка.Использование = Истина;

			мФормаВыбораКонтрагента.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
		ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда
			мФормаВыбораКонтрагента.Отбор.Поставщик.Значение      = Истина;
			мФормаВыбораКонтрагента.Отбор.Поставщик.Использование = Истина;

			мФормаВыбораКонтрагента.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
		Иначе
			мФормаВыбораКонтрагента.Отбор.Покупатель.Значение      = Истина;
			мФормаВыбораКонтрагента.Отбор.Покупатель.Использование = Истина;

			мФормаВыбораКонтрагента.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
		КонецЕсли;

		мФормаВыбораКонтрагента.ЗакрыватьПриВыборе           = Ложь;
		мФормаВыбораКонтрагента.РежимВыбора                  = Истина;
		мФормаВыбораКонтрагента.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

		мФормаВыбораКонтрагента.Открыть();
	ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеИзОстатка" Тогда
		мФормаВыбораСклада = Справочники["Склады"].ПолучитьФормуВыбора(, ЭтаФорма,);

		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(Перечисления.ВидыСкладов.Розничный);
		СписокОтбора.Добавить(Перечисления.ВидыСкладов.НТТ);

		мФормаВыбораСклада.Отбор.ВидСклада.ВидСравнения  = ВидСравнения.ВСписке;
		мФормаВыбораСклада.Отбор.ВидСклада.Значение      = СписокОтбора;
		мФормаВыбораСклада.Отбор.ВидСклада.Использование = Истина;
		мФормаВыбораСклада.ЗакрыватьПриВыборе            = Ложь;
		мФормаВыбораСклада.РежимВыбора                   = Истина;
		мФормаВыбораСклада.ПараметрВыборГруппИЭлементов  = ИспользованиеГруппИЭлементов.Элементы;

		мФормаВыбораСклада.Открыть();
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры // ДобавитьКолонкуВТаблицуДанных()

// Процедура - обработчик события "ОбработкаВыбора"
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем ФлагОбновитьДанныеВКолонках;
	Перем НоваяСтрока;
	Перем ИмяКол;

	ФлагОбновитьДанныеВКолонках = Ложь;

	Если Источник = мФормаВыбораКонтрагента Тогда

		ОсновнойДоговор           = ЗначениеВыбора.ОсновнойДоговорКонтрагента;
		ФлагОткрытьВыборДоговоров = Истина;

		Если ЗначениеЗаполнено(ОсновнойДоговор) Тогда
			Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "Заказы" Тогда
				ФлагВидДоговора = (ОсновнойДоговор.ВидДоговора    = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
				                  ИЛИ ОсновнойДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
			ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаИзОстатка"
			      ИЛИ ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПродажаРезерв" Тогда
				ФлагВидДоговора = (ОсновнойДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			ИначеЕсли ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияИзОстатка"
			      ИЛИ ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "КомиссияРезерв" Тогда
				ФлагВидДоговора = (ОсновнойДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
			Иначе
				ФлагВидДоговора = Ложь;
			КонецЕсли;

			Если ЗначениеЗаполнено(ПолеВводаОрганизация) ТОгда
				ФлагВидДоговора = ФлагВидДоговора И (ПолеВводаОрганизация = ОсновнойДоговор.Организация);
			КонецЕсли;	
			
			Если ФлагВидДоговора И ДопустимыйДоговор(ОсновнойДоговор, Ложь) Тогда
				ПолеГруппы(ЗначениеВыбора, ОсновнойДоговор);
				ФлагОбновитьДанныеВКолонках = Истина;
				ФлагОткрытьВыборДоговоров   = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если ФлагОткрытьВыборДоговоров Тогда
			ВыбратьДоговор(ЗначениеВыбора);
		КонецЕсли;

	ИначеЕсли Источник = мФормаВыбораДоговора Тогда

		Если ДопустимыйДоговор(ЗначениеВыбора) Тогда
			ПолеГруппы(ЗначениеВыбора.Владелец, ЗначениеВыбора);
			ФлагОбновитьДанныеВКолонках = Истина;
			мФормаВыбораДоговора.Закрыть();
		КонецЕсли;

	ИначеЕсли Источник = мФормаСменыДоговора Тогда

		Если ДопустимыйДоговор(ЗначениеВыбора) Тогда
			Узел = мСтруктГрупп["Таблица"].Найти( мТекущееЗначениеДоговора.Владелец, "Ключ");
			Лист = Узел.Узел.Найти( мТекущееЗначениеДоговора, "Ключ");
			Лист.Ключ = ЗначениеВыбора;
			Колонка = ЭлементыФормы.ТабличноеПолеДанных.Колонки.Найти( Лист.ИмяПоля);
			Колонка.ТекстШапки = "" + ЗначениеВыбора;
			мФормаСменыДоговора.Закрыть();
		КонецЕсли;

	ИначеЕсли Источник = мФормаПодбора Тогда

		Для Каждого Выбор Из ЗначениеВыбора Цикл
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.Номенклатура   = Выбор.Номенклатура;
			НоваяСтрока.Характеристика = Выбор.Характеристика;
			НоваяСтрока.Остаток        = Выбор.Остаток;
			НоваяСтрока.Единица        = Выбор.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент    = НоваяСтрока.Единица.Коэффициент;
			НоваяСтрока.ТоварТара      = Перечисления.ТоварТара.Товар;

			ПересчитатьСуммуПоСтроке(НоваяСтрока);
		КонецЦикла;

		ФлагОбновитьДанныеВКолонках = Истина;

	ИначеЕсли Источник = мФормаВыбораЗаказа Тогда

		Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПеремещениеРезерв" Тогда
			МетаданныеДокумента = ЗначениеВыбора.Метаданные();

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВидЗаказа", МетаданныеДокумента) Тогда
				Если ЗначениеВыбора.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
					ИмяКол = ПолеГруппы(ЗначениеВыбора.Заказчик, ЗначениеВыбора);
				Иначе
					Возврат;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента) Тогда
				ИмяКол = ПолеГруппы(ЗначениеВыбора.Склад, ЗначениеВыбора);
			Иначе
				Возврат;
			КонецЕсли;

		Иначе
			ИмяКол = ПолеГруппы(ЗначениеВыбора.ДоговорКонтрагента, ЗначениеВыбора);
		КонецЕсли;

		ЭлементыФормы.ТабличноеПолеДанных.ТекущаяКолонка = ЭлементыФормы.ТабличноеПолеДанных.Колонки.Найти(ИмяКол);
		ФлагОбновитьДанныеВКолонках                      = Истина;

		ПересчитатьСуммуПоСтроке(ЭлементыФормы.ТабличноеПолеДанных.ТекущиеДанные);

	ИначеЕсли Источник = мФормаВыбораНоменклатуры Тогда

		Если ЗначениеВыбора.ВестиУчетПоХарактеристикам Тогда
			мФормаВыбораХарактеристики = Справочники["ХарактеристикиНоменклатуры"].ПолучитьФормуВыбора(, ЭтаФорма,);
			мФормаВыбораХарактеристики.РежимВыбора = Истина;
			мФормаВыбораХарактеристики.ПараметрВыборПоВладельцу     = ЗначениеВыбора;
			мФормаВыбораХарактеристики.ПараметрОтборПоВладельцу     = ЗначениеВыбора;
			мФормаВыбораХарактеристики.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
			мФормаВыбораХарактеристики.Открыть();
		Иначе
			ДобавитьСтрокуВТаблицуДанных(ЗначениеВыбора);
		КонецЕсли;

	ИначеЕсли Источник = мФормаВыбораХарактеристики Тогда

		ДобавитьСтрокуВТаблицуДанных(ЗначениеВыбора.Владелец, ЗначениеВыбора);

	ИначеЕсли Источник = мФормаВыбораСклада Тогда

		Если ЗначениеВыбора.ВидСклада = Перечисления.ВидыСкладов.Розничный
		 ИЛИ ЗначениеВыбора.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ПолеГруппы(ЗначениеВыбора);
			ФлагОбновитьДанныеВКолонках = Истина;
		Иначе
			Предупреждение("Можно выбирать только розничный склад или НТТ!", 60);
		КонецЕсли;

	КонецЕсли;

	Если ФлагОбновитьДанныеВКолонках Тогда
		ОбновитьДанныеВКолонках();

		Для Каждого ТекСтрока Из ТаблицаДанных Цикл
			ЗаполнитьКолонкиЦена(ТекСтрока);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" флага учитывать НДС
//
Процедура ФлагУчитыватьНДСПриИзменении(Элемент)

	Доступность();

КонецПроцедуры // ФлагУчитыватьНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага печать форм
//
Процедура ПечатьФормПриИзменении(Элемент)

	Доступность();

КонецПроцедуры // ПечатьФормПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага цены из договора
//
Процедура ФлагЦеныИзДоговораПриИзменении(Элемент)

	Доступность();

КонецПроцедуры // ФлагЦеныИзДоговораПриИзменении

// Процедура - обработчик события "ПередНачаломДобавления" строки в таблицу данных
//
Процедура ТабличноеПолеДанныхПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если мСтруктГрупп = Неопределено Тогда
		СоздатьСтруктГрупп();
	КонецЕсли;

	мФормаВыбораНоменклатуры                              = Справочники["Номенклатура"].ПолучитьФормуВыбора(, ЭтаФорма,);
	мФормаВыбораНоменклатуры.РежимВыбора                  = Истина;
	мФормаВыбораНоменклатуры.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

	мФормаВыбораНоменклатуры.Открыть();
	Отказ = Истина;

КонецПроцедуры // ТабличноеПолеДанныхПередНачаломДобавления

// Процедура - обработчик события "ОбработкаВыбора" номенклатуры таблицы данных
//
Процедура ТабличноеПолеДанныхНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ТекСтрока;
	Перем МожноРассчитать;

	ТекСтрока = ЭлементыФормы.ТабличноеПолеДанных.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МожноРассчитать = Истина;

	Если ВыбранноеЗначение.ВестиУчетПоХарактеристикам Тогда
		Если Не ТекСтрока.Характеристика = Неопределено
		 Или Не ТекСтрока.Характеристика.Владелец = ВыбранноеЗначение Тогда
			МожноРассчитать = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ЭлементыФормы.ТабличноеПолеДанных.Колонки.Заказ.Видимость Тогда
		Если ТекСтрока.Заказ = Неопределено Тогда
			МожноРассчитать = Ложь;
		КонецЕсли;
	КонецЕсли;

	ТекСтрока.Единица     = ВыбранноеЗначение.ЕдиницаХраненияОстатков;
	ТекСтрока.Коэффициент = ТекСтрока.Единица.Коэффициент;

	Если МожноРассчитать Тогда
		ЗаполнитьСтрокуДанными(ТекСтрока);
	Иначе
		ТекСтрока.Остаток = 0;
	КонецЕсли;

	ПересчитатьСуммуПоСтроке(ТекСтрока);

КонецПроцедуры // ТабличноеПолеДанныхНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" характеристики таблицы данных
//
Процедура ТабличноеПолеДанныхХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ТекСтрока;
	Перем МожноРассчитать;

	ТекСтрока = ЭлементыФормы.ТабличноеПолеДанных.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока.Номенклатура = ВыбранноеЗначение.Владелец;

	МожноРассчитать = Истина;

	Если ЭлементыФормы.ТабличноеПолеДанных.Колонки.Заказ.Видимость Тогда
		Если ТекСтрока.Заказ = Неопределено Тогда
			МожноРассчитать = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если МожноРассчитать Тогда
		ЗаполнитьСтрокуДанными(ТекСтрока);
	Иначе
		ТекСтрока.Остаток = 0;
	КонецЕсли;

	ПересчитатьСуммуПоСтроке(ТекСтрока);

КонецПроцедуры // ТабличноеПолеДанныхХарактеристикаОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" заказа таблицы данных
//
Процедура ТабличноеПолеДанныхЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ТекСтрока;
	Перем МожноРассчитать;

	ТекСтрока = ЭлементыФормы.ТабличноеПолеДанных.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МожноРассчитать = Истина;

	Если ТекСтрока.Номенклатура.ВестиУчетПоХарактеристикам Тогда
		Если Не ТекСтрока.Характеристика = Неопределено
		 Или Не ТекСтрока.Характеристика.Владелец = ВыбранноеЗначение Тогда
			МожноРассчитать = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если МожноРассчитать Тогда
		ЗаполнитьСтрокуДанными(ТекСтрока);
	Иначе
		ТекСтрока.Остаток = 0;
	КонецЕсли;

	ПересчитатьСуммуПоСтроке(ТекСтрока);

КонецПроцедуры // ТабличноеПолеДанныхЗаказОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "Структурная единица". Процедура предлагает выбор пользователю из
// соответствующих справочников и открывает форму списка для выбора 
// значения с отбором по текущему контрагенту. Выбранное значение обрабатывается 
// в процедуре-обработчике события формы "ОбработкаВыбора".
//
Процедура ПолеВводаСтруктурнаяЕдиницаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета.Синоним);
	СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы.Синоним);

	ВыбранныйЭлемент = ВыбратьИзСписка(СписокТипов,Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранныйЭлемент.Значение = Метаданные.Справочники.БанковскиеСчета.Имя Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияБанковскогоСчета(ПолеВводаОрганизация, Элемент, СтандартнаяОбработка, Неопределено); 
	Иначе
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ПолеВводаСтруктурнаяЕдиницаНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода даты актуальности
// Вызывает процедуру установки доступности т.к. некоторые параметры могут быть периодическими
//
Процедура ПолеВводаДатаАктуальностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Элемент.Значение = ВыбранноеЗначение;
	Доступность();

КонецПроцедуры // ПолеВводаДатаАктуальностиОбработкаВыбора()

// Процедура - обработчик события нажатие кнопки "ИзменитьДоговор" командной панели
//
Процедура КоманднаяПанельДействияТаблицаДанныхИзменитьДоговор(Кнопка)
	Перем Дерево;
	Перем Строка1;
	Перем Строка2;
	Перем УдалСтр;

	Если ТаблицаДанных.Количество() = 0 Тогда
		Предупреждение("Таблица не заполнена!", 10);
		Возврат ;
	КонецЕсли;

	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Элемент",, "Контрагент / Договор");

	мНачальнаяСтрока = неопределено;
	Для Каждого Узел Из мСтруктГрупп["Таблица"] Цикл
		Строка1 = Дерево.Строки.Добавить();
		Строка1.Элемент = Узел.Ключ;
		Для Каждого Лист Из Узел.Узел Цикл
			Строка2 = Строка1.Строки.Добавить();
			Строка2.Элемент  = Лист.Ключ;
			Если Лист.ИмяПоля = ЭлементыФормы.ТабличноеПолеДанных.ТекущаяКолонка.Данные Тогда
				мНачальнаяСтрока = Строка2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если мНачальнаяСтрока = Неопределено Тогда
		УдалСтр = Дерево.ВыбратьСтроку("Выберите договор...");
	Иначе
		УдалСтр = Дерево.ВыбратьСтроку("Выберите договор...", мНачальнаяСтрока);
	КонецЕсли;
	
	Если УдалСтр = Неопределено Тогда
		Возврат ;
	КонецЕсли;

	Если Не УдалСтр.Родитель = Неопределено Тогда // Верхний уровень менять нельзя
		// Используется в процедуре ОбработкаВыбора
		мТекущееЗначениеДоговора = УдалСтр.Элемент;

		мФормаСменыДоговора = Справочники["ДоговорыКонтрагентов"].ПолучитьФормуВыбора(, ЭтаФорма,);
		мФормаСменыДоговора.РежимВыбора                  = Истина;
		мФормаСменыДоговора.ЗакрыватьПриВыборе           = Ложь;
		мФормаСменыДоговора.ПараметрВыборПоВладельцу     = УдалСтр.Элемент.Владелец;
		мФормаСменыДоговора.ПараметрОтборПоВладельцу     = УдалСтр.Элемент.Владелец;
		мФормаСменыДоговора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		УстановитьОтборВФормеВыбораДоговора(мФормаСменыДоговора);
		мФормаСменыДоговора.Открыть();
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействияТаблицаДанныхИзменитьДоговор()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода даты актуальности
// Вызывает процедуру установки доступности
//
Процедура ФлагПровестиПриИзменении(Элемент)

	Доступность();

КонецПроцедуры // ФлагПровестиПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// в бухгалтерском учете.
//
Процедура ФлагБухУчетПриИзменении(Элемент)

	Если НЕ ФлагБухУчет Тогда
		ФлагНалогУчет = Ложь;
	Иначе
		ФлагНалогУчет = Элемент.Значение;
	КонецЕсли;

	ЭлементыФормы.ФлагНалогУчет.Доступность = ФлагБухУчет;

КонецПроцедуры // ФлагБухУчетПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "ТабличноеПолеДанных".
//
Процедура ТабличноеПолеДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиДанных, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении"
// поля выбора вида валюты.
//
Процедура ПолеВыбораВидВалютыПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ПолеВыбораВидВалюты.Значение) Тогда
		ЭлементыФормы.ПолеВыбораВидВалюты.Значение = ЭлементыФормы.ПолеВыбораВидВалюты.СписокВыбора[1].Значение;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеВводаОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	//если режим - по отрицательным остаткам организаций, 
	//	необходимо показывать только организации с установленным признаком ОтражатьВРеглУчете
	Если ЭлементыФормы.ПолеВыбораРежимаРаботы.Значение = "ПокупкаУСобственных" Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.Организации.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.СправочникСписок.Отбор.ОтражатьВРегламентированномУчете.Значение                            = истина;
		ФормаВыбора.СправочникСписок.Отбор.ОтражатьВРегламентированномУчете.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ОтражатьВРегламентированномУчете.Доступность = Ложь;
	    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ПолеВводаОрганизация;
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Массив = Новый Массив;
Массив.Добавить(Тип("Число"));

Квалификатор        = Новый КвалификаторыЧисла(12, 3, ДопустимыйЗнак.Неотрицательный);
мОписаниеТиповКолво = Новый ОписаниеТипов(Массив, Квалификатор);

Квалификатор       = Новый КвалификаторыЧисла(12, 2, ДопустимыйЗнак.Неотрицательный);
мОписаниеТиповЦена = Новый ОписаниеТипов(Массив, Квалификатор);

мОписаниеТиповВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");

Массив.Очистить();
Массив.Добавить(Тип("Строка"));
Квалификатор         = Новый КвалификаторыСтроки(100);
мОписаниеТиповСтрока = Новый ОписаниеТипов(Массив,, Квалификатор);

мКонтролироватьОстаткиПоОрганизациям = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации();
мКолонкиДанных                       = ЭлементыФормы.ТабличноеПолеДанных.Колонки;

Квалификатор = 0;
Массив       = 0;
мДополнительныеПоля = Новый Структура;