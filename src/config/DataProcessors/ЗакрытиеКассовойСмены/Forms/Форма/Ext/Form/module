///////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "При открытии" формы. Данное событие
// возникает при открытии формы, до показа окна пользователю.
//
// Параметры:
//  Нет.
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Дата     = РабочаяДата;
	КассаККМ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	                                       "ОсновнаяКассаККМ");
	Запрос   = Новый Запрос(
	"ВЫБРАТЬ
	|    СпрСклады.Ссылка  КАК Склад
	|ИЗ
	|    Справочник.Склады КАК СпрСклады
	|ГДЕ
	|    НЕ СпрСклады.ПометкаУдаления
	|    И  СпрСклады.ВидСклада <> &ВидСклада");
	Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.НТТ);

	МассивСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	ЭлементыФормы.Склад.СписокВыбора.ЗагрузитьЗначения(МассивСкладов);

	УстановитьДоступностьПоляСклад();

	мМассивЭС = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидЭквайринговаяСистема);

	КоличествоЭС = мМассивЭС.Количество();
	Для Тмп = 1 По КоличествоЭС Цикл
		ТекЭС = мМассивЭС[КоличествоЭС - Тмп];

		Если Не ПолучитьСерверТО().ПоддерживаетсяСверкаИтогов(ТекЭС) Тогда
			мМассивЭС.Удалить(КоличествоЭС - Тмп);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьСверкиИтогов();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "При изменении" поля ввода "КассаККМ".
//
// Параметры:
//  Элемент - <ПолеВвода>
//          - Поле ввода, с которым связано данное событие ("КассаККМ").
//
Процедура КассаККМПриИзменении(Элемент)

	УстановитьДоступностьПоляСклад();
	УстановитьВидимостьСверкиИтогов();
	
КонецПроцедуры // КассаККМПриИзменении()

// Процедура представляет обработчик события "Нажатие" кнопки
// "ЗакрытьСмену" командной панели "КоманднаяПанельДействий".
//
// Параметры:
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "ЗакрытьСмену").
//
Процедура КоманднаяПанельДействийЗакрытьСмену(Кнопка)

	МассивOnline  = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидOnline,  КассаККМ);
	МассивOffline = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидOffline, КассаККМ);
	МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидФР,      КассаККМ);
	МассивККТ     = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидККТ,     КассаККМ);

	Если ВыполнитьСверкуИтоговПоПлатежнымКартам Тогда
		Если мМассивЭС.Количество() = 1 Тогда
			ТекМассивЭС = мМассивЭС;
		Иначе
			ТекМассивЭС = Новый Массив;

			СписокЭС = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мМассивЭС);
			СписокЭС.ЗаполнитьПометки(Истина);

			Если СписокЭС.ОтметитьЭлементы("Укажите эквайринговые системы...") Тогда
				Для Каждого ТекЭС Из СписокЭС Цикл
					Если ТекЭС.Пометка Тогда
						ТекМассивЭС.Добавить(ТекЭС.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		МассивФУ = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивФР);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивККТ);
		
		Если МассивФУ.Количество() = 0 Тогда
			ФР = Неопределено;
		ИначеЕсли МассивФУ.Количество() = 1 Тогда
			ФР = МассивФУ[0];
		Иначе
			ФР = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(МассивФУ).ВыбратьЭлемент("Необходимо выбрать фискальное устройство");
			Если ФР <> Неопределено Тогда
				ФР = ФР.Значение;
			КонецЕсли;
		КонецЕсли;

		Если ФР <> Неопределено Тогда
			Для Каждого ЭС Из ТекМассивЭС Цикл
				ПолучитьСерверТО().ИтогиДняПоКартам(ЭС, ФР);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если МассивOnline.Количество() > 0
	     ИЛИ МассивФР.Количество() > 0 
		 ИЛИ МассивККТ.Количество() > 0 Тогда
		ОбработкаЧековККМ(Склад);
		
		Пароль    = ПолучитьСерверТО().ПолучитьПарольАдминистратораККМ();
		Результат = Неопределено;
		ФР        = Неопределено;
		Для Каждого ФР Из МассивФР Цикл
			Результат = ПолучитьСерверТО().ОтчетСГашением(ФР, Пароль);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
				Сообщить(ТекстОшибки, СтатусСообщения.Важное);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ККТ Из МассивККТ Цикл
			ОписаниеКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ККТ);
			КассовыеСменыКлиент.ЗакрытьКассовуюСмену(ККТ, ОписаниеКС.КассоваяСмена, Ложь);
		КонецЦикла;
		
	ИначеЕсли МассивOnline.Количество() = 0 И МассивOffline.Количество() = 0 И МассивФР.Количество() = 0 И МассивККТ.Количество() = 0 Тогда
		ОбработкаЧековККМ(Склад);
	КонецЕсли;

	Результат = Неопределено;
	ККМ       = Неопределено;
	Для Каждого ККМ Из МассивOffline Цикл
		ОбработкаЧековOffline(ККМ);
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельДействийЗакрытьСмену()

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает доступность поля выбора "Склад".
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступностьПоляСклад()

	МассивККМ                       = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                                      мВидOffline,
	                                      КассаККМ);
	ЭлементыФормы.Склад.Доступность = (МассивККМ.Количество() > 0);

КонецПроцедуры // УстановитьДоступностьПоляСклад()

Процедура УстановитьВидимостьСверкиИтогов()

	МассивФР  = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидФР,  КассаККМ);
	МассивККТ = ПолучитьСерверТО().ПолучитьСписокУстройств(мВидККТ, КассаККМ);
	
	МассивФУ = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивФР);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивККТ);

	МожноВыполнитьСверкуИтоговПоПлатежнымКартам = (мМассивЭС.Количество() <> 0 И МассивФУ.Количество() <> 0);

	ЭлементыФормы.ВыполнитьСверкуИтоговПоПлатежнымКартам.Видимость = МожноВыполнитьСверкуИтоговПоПлатежнымКартам;
	ВыполнитьСверкуИтоговПоПлатежнымКартам = МожноВыполнитьСверкуИтоговПоПлатежнымКартам;

КонецПроцедуры

// Процедура оссуществляет формирование документа "Отчёт о розничных продажах"
// по данным отчёта, загруженного из ККМ, подключенной в режиме Off-Line.
//
// Параметры:
//  ККМ - <Строка>
//      - Идентификатор ККМ, подключенной в режиме Off-Line.
//
Процедура ОбработкаЧековOffline(ККМ)

	Отчет     = Неопределено;
	Результат = ПолучитьСерверТО().ЗагрузитьОтчетОПродажах(ККМ, Отчет);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Если Отчет.Количество() = 0 Тогда
			Результат = ПолучитьСерверТО().ЗавершитьЗагрузкуОтчетаОПродажах(ККМ);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;
		Иначе
			ДокОтчет = СоздатьОтчетОРозничныхПродажах(Склад);
			Позиция  = Неопределено;
			Для каждого Позиция Из Отчет Цикл
				Товар = ДокОтчет.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(Товар, Позиция);

				Товар.Коэффициент = Товар.ЕдиницаИзмерения.Коэффициент;

				Если мСкладыВТабличнойЧасти Тогда
					Товар.Склад = Склад;
				КонецЕсли;

				СуммаБезСкидок = Товар.Цена * Товар.Количество;
				Если СуммаБезСкидок <> 0 Тогда
					Товар.ПроцентСкидкиНаценки = (1 - Товар.Сумма / СуммаБезСкидок) * 100.0;
				КонецЕсли;
			КонецЦикла;

			ЗаписатьОтчетОРозничныхПродажах(ДокОтчет);

			Результат = ПолучитьСерверТО().ЗавершитьЗагрузкуОтчетаОПродажах(ККМ);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;
			ДокОтчет.ПолучитьФорму().Открыть();
		КонецЕсли;
	Иначе
		ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры // ОбработкаЧековOffline()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = мВидOffline
	 Или Вид = мВидФР 
	 Или Вид = мВидККТ 
	 Или Вид = мВидЭквайринговаяСистема Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

