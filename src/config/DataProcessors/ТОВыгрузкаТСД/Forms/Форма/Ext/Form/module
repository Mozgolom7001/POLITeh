///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мИспользоватьХарактеристики;
Перем мИспользоватьСерии;
Перем мСписокТерминалов;
Перем мПустаяХарактеристика;
Перем мПустаяСерия;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Заполнить"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)

	Перем Товар;
	Перем Число;
	Перем ШК;
	Перем Префикс;
	Перем ДлинаКода;
	Перем Вес;
	Перем Индекс;
	Перем МаксЗнач;
	Перем Цена;
	Перем Дата;

	Если СписокТоваров.Количество() > 0 Тогда
		ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Проверка заполнения табличной части");
		Если ответ = КодВозвратаДиалога.Нет Тогда
			возврат;
		КонецЕсли;
	КонецЕсли;
	ПостроительОтчета.Выполнить();
	СписокТоваров = ПостроительОтчета.Результат.Выгрузить();
	
	Префикс       = "2" + Константы.ПрефиксВесовогоТовара.Получить();
	ДлинаКода     = Константы.ДлинаКодаВесовогоТовара.Получить();
	МаксЗнач      = 10 - ДлинаКода;
	Вес           = "";
	Для Индекс = 1 По МаксЗнач Цикл
		Вес = Вес + "0";
	КонецЦикла;
	ДлинаКода     = Формат(ДлинаКода, "ЧГ=0");
	Дата          = ТекущаяДата();
	Для Каждого Товар Из СписокТоваров Цикл
		Если ПереключательОптовыеЦены Тогда
			Товар.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Товар.НоменклатураСсылка,
			                                      Товар.ХарактеристикаНоменклатурыСсылка,
			                                      ТипЦен,
			                                      Дата,
			                                      Товар.ЕдиницаИзмеренияСсылка);
		Иначе
			Товар.Цена = УправлениеРозничнойТорговлей.ПолучитьПродажнуюЦену(РабочаяДата, Товар.НоменклатураСсылка, Товар.ХарактеристикаНоменклатурыСсылка, Товар.ЕдиницаИзмеренияСсылка, СкладАТТ);
		КонецЕсли;
		Если Товар.Весовой Тогда
			ШК = Префикс + Формат(Товар.Штрихкод, "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0") + Вес;
			Товар.Штрихкод = ШК + РаботаСТорговымОборудованием.КонтрольныйСимволEAN(ШК, 13);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ДействияФормыЗаполнить()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КомандыТоваров"

// Процедура - обработчик события "ПриНажатии" кнопки "ВыделитьВсе"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ВыделитьВсе"
//
Процедура КомандыТоваровВыделитьВсе(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Истина, "Выгружать");

КонецПроцедуры // КомандыТоваровВыделитьВсе()

// Процедура - обработчик события "ПриНажатии" кнопки "ОчиститьВыделение"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ОчиститьВыделение"
//
Процедура КомандыТоваровОчиститьВыделение(Кнопка)

	СписокТоваров.ЗаполнитьЗначения(Ложь, "Выгружать");

КонецПроцедуры // КомандыТоваровОчиститьВыделение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "ОсновныеДействияФормы"

// Процедура - обработчик события "ПриНажатии" кнопки "Выгрузить"
// командной панели "ОсновныеДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "Выгрузить"
//
Процедура ОсновныеДействияФормыВыгрузить(Кнопка)

	Результат = Неопределено;

	Если СписокТоваров.Количество() = 0 Тогда
		Предупреждение("Нет данных для выгрузки.");
		Возврат;
	КонецЕсли;

	Ошибка     = "";
	КолвоСтрок = 0;

	ТаблицаДляТСД = Новый ТаблицаЗначений;
	ТаблицаДляТСД.Колонки.Добавить("Штрихкод");
	ТаблицаДляТСД.Колонки.Добавить("Наименование");
	ТаблицаДляТСД.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаДляТСД.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДляТСД.Колонки.Добавить("СерияНоменклатуры");
	ТаблицаДляТСД.Колонки.Добавить("Качество");
	ТаблицаДляТСД.Колонки.Добавить("Цена");
	ТаблицаДляТСД.Колонки.Добавить("Количество");

	Для Каждого СтрокаТовара Из СписокТоваров Цикл
		Если СтрокаТовара.Выгружать Тогда
			СтрокаТаблицы = ТаблицаДляТСД.Добавить();
			СтрокаТаблицы.Штрихкод                   = СтрокаТовара.Штрихкод;
			СтрокаТаблицы.Наименование               = СтрокаТовара.Номенклатура;
			СтрокаТаблицы.ЕдиницаИзмерения           = СтрокаТовара.ЕдиницаИзмерения;
			СтрокаТаблицы.ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;
			СтрокаТаблицы.СерияНоменклатуры          = СтрокаТовара.СерияНоменклатуры;
			СтрокаТаблицы.Качество                   = СтрокаТовара.Качество;
			СтрокаТаблицы.Цена                       = СтрокаТовара.Цена;
			СтрокаТаблицы.Количество                 = СтрокаТовара.Количество;
		КонецЕсли;
	КонецЦикла;

	Результат = ПолучитьСерверТО().ВыгрузитьТаблицуТСД(ТерминалСбораДанных, ТаблицаДляТСД);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Предупреждение("Выгрузка успешно завершена.
		               |Выгружено строк: " + Формат(ТаблицаДляТСД.Количество(), "ЧГ=0") + ".");
	Иначе
		Предупреждение("ВНИМАНИЕ! Произошла ошибка.
		               |Возможно товар не выгружен, либо выгружен частично
		               |Ошибка: " + ПолучитьСерверТО().ПолучитьТекстОшибкиТСДТО(Результат));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
// Параметры
//  Отказ                – <Булево> 
//                       – признак отказа от открытия формы; если в теле 
//                         процедуры-обработчика установить данному параметру 
//                         значение Истина, открытие формы выполнено не будет.
//
//  СтандартнаяОбработка – <Булево> 
//                       –  в данный параметр передается признак выполнения 
//                          стандартной (системной) обработки события; если в 
//                          теле процедуры-обработчика установить данному 
//                          параметру значение Ложь, стандартная обработка 
//                          события производиться не будет. Отказ от 
//                          стандартной обработки не отменяет открытие формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Отказ = (мСписокТерминалов.Количество() = 0);
	Если Отказ Тогда
		Предупреждение("Терминал сбора данных не подключен.");
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	СписокТерминалов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мСписокТерминалов);

	ЭлементыФормы.ТерминалСбораДанных.СписокВыбора = СписокТерминалов;

	ТерминалСбораДанных                              = СписокТерминалов[0].Значение;
	ЭлементыФормы.ТерминалСбораДанных.ТолькоПросмотр = (СписокТерминалов.Количество() = 1);

	Если Не мИспользоватьСерии Тогда
		Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["СерияНоменклатуры"];
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли;
	
	Если Не мИспользоватьХарактеристики Тогда
		Колонка                   = ЭлементыФормы.ПолеТовары.Колонки["ХарактеристикаНоменклатуры"];
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли;

	ЗаполнитьНачальныеНастройки();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	СтруктураСохраняемыхНастроек = Новый Структура();
	СтруктураСохраняемыхНастроек.Вставить("ПереключательОптовыеЦены", ПереключательОптовыеЦены);
	СтруктураСохраняемыхНастроек.Вставить("ТипЦен", ТипЦен);
	СтруктураСохраняемыхНастроек.Вставить("СкладАТТ", СкладАТТ);
	СтруктураСохраняемыхНастроек.Вставить("ПостроительОтчетаНастройки", ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));
	СохранитьЗначение("ТорговоеОборудование.ТОВыгрузкаТСД.Настройки." + ИмяПользователя(), СтруктураСохраняемыхНастроек);

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура обработчик события элемента формы "ПереключательОптовыеЦены"
//
Процедура ПереключательОптовыеЦеныПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ПереключательОптовыеЦеныПриИзменении()

// Процедура обработчик события элемента формы "ПереключательЦеныАТТ"
//
Процедура ПереключательЦеныАТТПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ПереключательЦеныАТТПриИзменении()

// Процедура обработчик события "СкладАТТНачалоВыбора" элемента формы "СкладАТТ"
//
Процедура СкладАТТНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСклада(Элемент, Перечисления.ВидыСкладов.Розничный, СтандартнаяОбработка);

КонецПроцедуры // СкладАТТНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность для элементов формы
//
// Параметры
//  Нет
//
Процедура УстановитьДоступность()

	ЭлементыФормы.ТипЦен.Доступность   = ПереключательОптовыеЦены;
	ЭлементыФормы.СкладАТТ.Доступность = НЕ ПереключательОптовыеЦены;

КонецПроцедуры // УстановитьДоступность()

// Процедура получает основной запрос
//
// Параметры нет
Процедура ЗаполнитьНачальныеНастройки()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КодыТоваров.Весовой КАК Весовой,
	|	ИСТИНА КАК Выгружать,
	|	КодыТоваров.Штрихкод КАК Штрихкод,
	|	КодыТоваров.Номенклатура КАК НоменклатураСсылка,
	|	КодыТоваров.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыСсылка,
	|	КодыТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмеренияСсылка,
	|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.СерияНоменклатуры) КАК СерияНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.Качество) КАК Качество,
	|	ПРЕДСТАВЛЕНИЕ(КодыТоваров.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(РегОстатки.КоличествоОстаток / КодыТоваров.ЕдиницаИзмерения.Коэффициент КАК ЧИСЛО(15, 3)) КАК Количество,
	|	0 КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЛОЖЬ КАК Весовой,
	|		Штрихкоды.Штрихкод КАК Штрихкод,
	|		Штрихкоды.Владелец КАК Номенклатура,
	|		Штрихкоды.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		Штрихкоды.СерияНоменклатуры КАК СерияНоменклатуры,
	|		Штрихкоды.Качество КАК Качество,
	|		Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		РегистрСведений.Штрихкоды КАК Штрихкоды
	|	ГДЕ
	|		Штрихкоды.Владелец ССЫЛКА Справочник.Номенклатура
	|	{ГДЕ
	|		ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура).* КАК Номенклатура}
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ИСТИНА КАК Весовой,
	|		КодыВесовогоТовара.Код КАК Штрихкод,
	|		КодыВесовогоТовара.Номенклатура КАК Номенклатура,
	|		КодыВесовогоТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		КодыВесовогоТовара.СерияНоменклатуры КАК СерияНоменклатуры,
	|		КодыВесовогоТовара.Качество КАК Качество,
	|		КодыВесовогоТовара.Номенклатура.ЕдиницаХраненияОстатков
	|	ИЗ
	|		РегистрСведений.КодыВесовогоТовара КАК КодыВесовогоТовара
	|	{ГДЕ
	|		КодыВесовогоТовара.Номенклатура.* КАК Номенклатура}
	|	) КАК КодыТоваров
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегОстатки.Номенклатура КАК Номенклатура,
	|		РегОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РегОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		РегОстатки.Качество КАК Качество,
	|		СУММА(РегОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РегТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|			РегТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			РегТоварыНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|			РегТоварыНаСкладах.Качество КАК Качество,
	|			РегТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(, {Склад.* КАК Склад, Номенклатура.* КАК Номенклатура}) КАК РегТоварыНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			РегТоварыВРознице.Номенклатура КАК Номенклатура,
	|			РегТоварыВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			РегТоварыВРознице.СерияНоменклатуры КАК СерияНоменклатуры,
	|			РегТоварыВРознице.Качество КАК Качество,
	|			РегТоварыВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(, {Склад.* КАК Склад, Номенклатура.* КАК Номенклатура}) КАК РегТоварыВРознице
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			РегТоварыВНТТ.Номенклатура КАК Номенклатура,
	|			РегТоварыВНТТ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			РегТоварыВНТТ.СерияНоменклатуры КАК СерияНоменклатуры,
	|			ЗНАЧЕНИЕ(Справочник.Качество.Новый) КАК Качество,
	|			РегТоварыВНТТ.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВНТТ.Остатки(, {Склад.* КАК Склад, Номенклатура.* КАК Номенклатура}) КАК РегТоварыВНТТ
	|		) КАК РегОстатки
	|	СГРУППИРОВАТЬ ПО
	|		РегОстатки.Номенклатура,
	|		РегОстатки.ХарактеристикаНоменклатуры,
	|		РегОстатки.СерияНоменклатуры,
	|		РегОстатки.Качество
	|	) КАК РегОстатки
	|ПО
	|	РегОстатки.Номенклатура                 = КодыТоваров.Номенклатура
	|	И РегОстатки.ХарактеристикаНоменклатуры = КодыТоваров.ХарактеристикаНоменклатуры
	|	И РегОстатки.СерияНоменклатуры          = КодыТоваров.СерияНоменклатуры
	|	И РегОстатки.Качество                   = КодыТоваров.Качество
	|";

	ПостроительОтчета.Текст = ТекстЗапроса;

	СоответствиеИменОтбора = Новый Структура();

	СоответствиеИменОтбора.Вставить("Номенклатура", "Номенклатура");
	СоответствиеИменОтбора.Вставить("Склад"       , "Склад");

	НастройкиФормы = ВосстановитьЗначение("ТорговоеОборудование.ТОВыгрузкаТСД.Настройки." + ИмяПользователя());
	Если НастройкиФормы = Неопределено ИЛИ ТипЗнч(НастройкиФормы) <> Тип("Структура") Тогда
		ПолеОтбора = Неопределено;
		ПереключательОптовыеЦены = Истина;
		Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
			Если СоответствиеИменОтбора.Свойство(ДоступноеПоле.Имя, ПолеОтбора) Тогда
				ДоступноеПоле.Отбор = Истина;
				ДоступноеПоле.Представление = ПолеОтбора;
				ПостроительОтчета.Отбор.Добавить(ДоступноеПоле.Имя)
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПереключательОптовыеЦены = НастройкиФормы.ПереключательОптовыеЦены;
		ТипЦен                   = НастройкиФормы.ТипЦен;
		СкладАТТ                 = НастройкиФормы.СкладАТТ;
		ПостроительОтчета.УстановитьНастройки(НастройкиФормы.ПостроительОтчетаНастройки);
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры // ЗаполнитьНачальныеНастройки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИспользоватьХарактеристики = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");
мИспользоватьСерии          = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
мСписокТерминалов           = ПолучитьСерверТО().ПолучитьСписокУстройств(
                                  Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);
мПустаяХарактеристика       = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
мПустаяСерия                = Справочники.СерииНоменклатуры.ПустаяСсылка();