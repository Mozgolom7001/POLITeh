///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСписокККМ;
Перем мСписокСкладов;
Перем мНеобходимШтрихкод;
Перем мПоддерживаетсяВесовойТовар;
Перем мТипыШтрихкодов;
Перем мКассаККМ;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ККМOffLine Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием" формы
//
// Параметры
//  Отказ                - <Булево>
//                       - Признак отказа от открытия формы. Если в теле
//                         процедуры-обработчика установить данному параметру
//                         значение Истина, открытие формы выполнено не будет.
//                         Значение по умолчанию: Ложь.
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если в
//                         теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет. Отказ от стандартной
//                         обработки не отменяет открытие формы.
//                         Значение по умолчанию: Истина 
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	МассивККМ = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                Перечисления.ВидыТорговогоОборудования.ККМOffLine);
	Если МассивККМ.Количество() = 0 Тогда
		Предупреждение("ККМ в режиме Offline не подключены!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	мСписокККМ = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(МассивККМ);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    СпрСклады.Ссылка        КАК Склад,
	|    СпрСклады.Представление КАК ПредставлениеСклада
	|ИЗ
	|    Справочник.Склады КАК СпрСклады
	|ГДЕ
	|    СпрСклады.ВидСклада <> &ВидСклада");
	Запрос.УстановитьПараметр("ВидСклада", Перечисления.ВидыСкладов.НТТ);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("Нет складов, не соответствующих НТТ.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	мСписокСкладов   = Новый СписокЗначений();
	Выборка          = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		мСписокСкладов.Добавить(Выборка.Склад, Выборка.ПредставлениеСклада);
	КонецЦикла;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "При открытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	ЭлементыФормы.ККМOffline.СписокВыбора   = мСписокККМ;
	ЭлементыФормы.ТекущийСклад.СписокВыбора = мСписокСкладов;

	ВосстановитьНастройки();
	ОбновитьПараметрыККМ();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события нажатия на кнопку "Заполнить" командной панели
// "ДействияФормы".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка ("Заполнить") командной панели "ДействияФормы", с которой
//           связано данное событие.
//
Процедура ДействияФормыЗаполнить(Кнопка)

	Если НЕ ЗначениеЗаполнено(ТекущийСклад) Тогда
		Предупреждение("Не выбран склад.");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ККМOffline) Тогда
		Предупреждение("Не выбрана ККМ.");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Предупреждение("Не выбран тип цен.");
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ПзТовары.КодТовара                        КАК ПЛУ,
	|    ПзТовары.Номенклатура                     КАК Номенклатура,
	|    ПзТовары.ВесовойТовар                     КАК ВесовойТовар,
	|    ПзТовары.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
	|    ПзТовары.ХарактеристикаНоменклатуры       КАК ХарактеристикаНоменклатуры,
	|    ПзТовары.СерияНоменклатуры                КАК Серия,
	|    111111111111111.11                        КАК Цена,
	|    ЕСТЬNULL(ПзКодыТоваров.Штрихкод, """")    КАК КодТовара,
	|    ЕСТЬNULL(РегОстатки.КоличествоОстаток, 0) КАК Остаток
	|ИЗ
	|    (ВЫБРАТЬ
	|         РегТовары.Код                         КАК КодТовара,
	|         РегТовары.Номенклатура                КАК Номенклатура,
	|         РегТовары.Номенклатура.Весовой        КАК ВесовойТовар,
	|         РегТовары.ЕдиницаИзмерения            КАК ЕдиницаИзмерения,
	|         РегТовары.ХарактеристикаНоменклатуры  КАК ХарактеристикаНоменклатуры,
	|         РегТовары.СерияНоменклатуры           КАК СерияНоменклатуры
	|     ИЗ
	|         РегистрСведений.ТоварыНаККМ           КАК РегТовары
	|     ГДЕ
	|         РегТовары.КассаККМ = &КассаККМ
	|         " + ?(мПоддерживаетсяВесовойТовар, "", "И НЕ РегТовары.Номенклатура.Весовой") + "
	|    ) КАК ПзТовары
	|    " + ?(мНеобходимШтрихкод, "ВНУТРЕННЕЕ", "ЛЕВОЕ") + " СОЕДИНЕНИЕ
	|        (ВЫБРАТЬ
	|             РегШК.Штрихкод                   КАК Штрихкод,
	|             РегШК.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|             РегШК.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|             РегШК.СерияНоменклатуры          КАК СерияНоменклатуры
	|         ИЗ
	|             РегистрСведений.Штрихкоды КАК РегШК
	|         ГДЕ
	|             РегШК.Владелец ССЫЛКА Справочник.Номенклатура
	|             И РегШК.ТипШтрихкода В (&ТипыШтрихкодов)
	|" + ?(мПоддерживаетсяВесовойТовар, "
	|         ОБЪЕДИНИТЬ ВСЕ
	|         ВЫБРАТЬ
	|             РегКоды.Код                                  КАК Штрихкод,
	|             РегКоды.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|             РегКоды.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|             РегКоды.СерияНоменклатуры                    КАК СерияНоменклатуры
	|         ИЗ
	|             РегистрСведений.КодыВесовогоТовара КАК РегКоды
	|", "
	|") + "
	|        ) КАК ПзКодыТоваров
	|    ПО   ПзТовары.ЕдиницаИзмерения           = ПзКодыТоваров.ЕдиницаИзмерения
	|       И ПзТовары.ХарактеристикаНоменклатуры = ПзКодыТоваров.ХарактеристикаНоменклатуры
	|       И ПзТовары.СерияНоменклатуры          = ПзКодыТоваров.СерияНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		РегОстатки.Номенклатура КАК Номенклатура,
	|		РегОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		РегОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
	|		СУММА(РегОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РегТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|			РегТоварыНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			РегТоварыНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
	|			РегТоварыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад
	|			   И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК РегТоварыНаСкладах
	|		ОБЪЕДИНИТЬ ВСЕ
	|		ВЫБРАТЬ
	|			РегТоварыВРознице.Номенклатура КАК Номенклатура,
	|			РегТоварыВРознице.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			РегТоварыВРознице.СерияНоменклатуры КАК СерияНоменклатуры,
	|			РегТоварыВРознице.КоличествоОстаток КАК КоличествоОстаток
	|		ИЗ
	|			РегистрНакопления.ТоварыВРознице.Остатки(, Склад = &Склад
	|			   И Качество = ЗНАЧЕНИЕ(Справочник.Качество.Новый)) КАК РегТоварыВРознице
	|		) КАК РегОстатки
	|	СГРУППИРОВАТЬ ПО
	|		РегОстатки.Номенклатура,
	|		РегОстатки.ХарактеристикаНоменклатуры,
	|		РегОстатки.СерияНоменклатуры
	|	) КАК РегОстатки
	|ПО
	|	РегОстатки.Номенклатура                 = ПзТовары.Номенклатура
	|	И РегОстатки.ХарактеристикаНоменклатуры = ПзТовары.ХарактеристикаНоменклатуры
	|	И РегОстатки.СерияНоменклатуры          = ПзТовары.СерияНоменклатуры
	|" + ?(ИмеющиесяНаСкладе, "
	|ГДЕ
	|	ЕСТЬNULL(РегОстатки.КоличествоОстаток, 0) > 0 ИЛИ ПзТовары.Номенклатура.Услуга",
	""));
	Запрос.УстановитьПараметр("КассаККМ",       мКассаККМ);
	Запрос.УстановитьПараметр("ТипыШтрихкодов", мТипыШтрихкодов);
	Запрос.УстановитьПараметр("Склад",          ТекущийСклад);
	Товары = Запрос.Выполнить().Выгрузить();

	Товар = Неопределено;
	Для Каждого Товар Из Товары Цикл
		Товар.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Товар.Номенклатура,
		                                      Товар.ХарактеристикаНоменклатуры,
		                                      ТипЦен,
		                                      Неопределено,
		                                      Товар.ЕдиницаИзмерения);
	КонецЦикла;

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура - обработчик события нажатия на кнопку "Загрузить" командной панели
// "ДействияФормы".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка ("Загрузить") командной панели "ДействияФормы", с которой
//           связано данное событие.
//
Процедура ДействияФормыЗагрузить(Кнопка)

	Если Товары.Количество() = 0 Тогда
		Предупреждение("Список товаров пуст.");
		Возврат;
	КонецЕсли;

	Результат = ПолучитьСерверТО().ВыгрузитьТоварыККМ(ККМOffline, Товары);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ОписаниеРезультата = "Выгрузка завершена успешно.
		                     |Выгружено " + СокрЛП(Товары.Количество()) + " строк.";
	Иначе
		ОписаниеРезультата = ПолучитьСерверТО().ПолучитьТекстОшибкиККМOfflineТО(Результат);
	КонецЕсли;

	Предупреждение(ОписаниеРезультата);

КонецПроцедуры // ДействияФормыЗагрузить()

// Процедура - обработчик события "При изменении" поля ввоода "ТекущийСклад".
//
// Параметры
//  Элемент - <ПолеВвода>
//          - Поле ввода ("ТекущийСклад"), с которым связано данное событие.
//
Процедура ТекущийСкладПриИзменении(Элемент)

	Товары.Очистить();

КонецПроцедуры // ТекущийСкладПриИзменении()

// Процедура - обработчик события "При изменении" флажка "ИмеющиесяНаСкладе".
//
// Параметры
//  Элемент - <Флажок>
//          - Флажок ("ИмеющиесяНаСкладе"), с которым связано данное событие.
//
Процедура ИмеющиесяНаСкладеПриИзменении(Элемент)

	Товары.Очистить();

КонецПроцедуры // ИмеющиесяНаСкладеПриИзменении()

// Процедура - обработчик события "При изменении" поля ввоода "ТекущаяКасса".
//
// Параметры
//  Элемент - <ПолеВвода>
//          - Поле ввода ("ТекущаяКасса"), с которым связано данное событие.
//
Процедура ТекущаяКассаПриИзменении(Элемент)

	Товары.Очистить();
	ОбновитьПараметрыККМ();

КонецПроцедуры // ТекущаяКассаПриИзменении()

// Процедура - обработчик события "При нажатии" кнопки "РедактироватьСписокВыгрузки"
// командной панели "ДействияФормы".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка ("РедактироватьСписокВыгрузки"), с которой связано данное
//           событие.
//
Процедура ДействияФормыРедактироватьСписокВыгрузки()

	Форма = РегистрыСведений.ТоварыНаККМ.ПолучитьФормуСписка();
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
	Иначе
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ДействияФормыРедактироватьСписокВыгрузки()

// Процедура - обработчик события "Перед началом добавления" табличного
// поля "Товары"
//
// Параметры
//  Элемент     - <ТабличноеПоле>
//              - Табличное поле, с которым связано данное событие.
//
//  Отказ       - <Булево>
//              - Признак отказа от добавления строки. Если в теле
//                процедуры-обработчика установить данному параметру значение
//                Истина, строка не будет добавлена.
//                Значение по умолчанию: Ложь.
//
//  Копирование - <Булево>
//              - Определяет режим копирования. Если установлено Истина, то
//                происходит копирование строки.
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "При закрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриЗакрытии()

	СохранитьНастройки();
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура осуществляет сохранение текущих настроек пользователя
//
// Параметры
//  Нет
//
Процедура СохранитьНастройки()

	СохранитьЗначение("ЗагрузкаВККМOffline_ККМ",      ККМOffline);
	СохранитьЗначение("ЗагрузкаВККМOffline_Склад"   , ТекущийСклад);
	СохранитьЗначение("ЗагрузкаВККМOffline_НаСкладе", ИмеющиесяНаСкладе);
	СохранитьЗначение("ЗагрузкаВККМOffline_ТипЦен"  , ТипЦен);

КонецПроцедуры // СохранитьНастройки()

// Процедура осуществляет восстановление текущих настроек пользователя
//
// Параметры
//  Нет
//
Процедура ВосстановитьНастройки()

	ВремККМOffline = ВосстановитьЗначение("ЗагрузкаВККМOffline_ККМ");
	ВремСклад      = ВосстановитьЗначение("ЗагрузкаВККМOffline_Склад");
	ВремНаСкладе   = ВосстановитьЗначение("ЗагрузкаВККМOffline_НаСкладе");
	ВремТипЦен     = ВосстановитьЗначение("ЗагрузкаВККМOffline_ТипЦен");

	Если      мСписокККМ.Количество() = 1 Тогда
		ККМOffline                              = мСписокККМ[0].Значение;
		ЭлементыФормы.ККМOffline.ТолькоПросмотр = Истина;
	ИначеЕсли мСписокККМ.НайтиПоЗначению(ВремККМOffline) <> Неопределено Тогда
		ККМOffline = ВремККМOffline;
	КонецЕсли;

	Если      мСписокСкладов.Количество() = 1 Тогда
		ТекущийСклад                              = мСписокСкладов[0].Значение;
		ЭлементыФормы.ТекущийСклад.ТолькоПросмотр = Истина;
	ИначеЕсли мСписокСкладов.НайтиПоЗначению(ВремСклад) <> Неопределено Тогда
		ТекущийСклад = ВремСклад;
	КонецЕсли;

	ИмеющиесяНаСкладе = ?(ВремНаСкладе = Неопределено, Ложь, ВремНаСкладе);
	ТипЦен            = ВремТипЦен;

КонецПроцедуры // ВосстановитьНастройки()

// Процедура обновляет параметры текущей ККМ Offline.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПараметрыККМ()

	мНеобходимШтрихкод          = Истина;
	мПоддерживаетсяВесовойТовар = Ложь;
	мКассаККМ                   = Неопределено;
	мТипыШтрихкодов             = Неопределено;

	Если НЕ ЗначениеЗаполнено(ККМOffline) Тогда
		ИнформацияККМ               = "Не выбрана ККМ!";
	Иначе
		Результат = ПолучитьСерверТО().ПолучитьПараметрыВыгрузкиOffline(ККМOffline,
		                                                       мНеобходимШтрихкод,
		                                                       мПоддерживаетсяВесовойТовар,
		                                                       мТипыШтрихкодов,
		                                                       мКассаККМ);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ИнформацияККМ = "Данная модель ККМ поддерживает работу "
			                + ?(мНеобходимШтрихкод,
			                    "только с тем штучным товаром, для которого задан штрихкод.",
			                    "с любым штучным товаром.")
			                + "
			                  |ККМ "
			                + ?(мПоддерживаетсяВесовойТовар, "", "не ")
			                + "поддерживает работу с весовым товаром.";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыККМ()

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
