Перем БылиИзмененыКонстанты;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура управляет доступностью реквизитов ограничения интервала показа календаря
//
Процедура ДоступностьПараметровОграниченияВремени()
	
	ЭлементыФормы.ОграничитьВремяС.Доступность = ОграничитьВремя;
	ЭлементыФормы.ОграничитьВремяПо.Доступность = ОграничитьВремя;
	
КонецПроцедуры

// Процедура управляет доступностью переключателей режима вывода закладки "День"
// 
Процедура ДоступностьПереключателейНаЗакладкеДень()
	
	Если ОтображатьЗаказыПокупателей ИЛИ ОтображатьЗаказыПоставщикам Тогда
		КоличествоДнейНаЗакладкеДень = 1;
	КонецЕсли;
	
	ЭлементыФормы._1День.Доступность = НЕ(ОтображатьЗаказыПокупателей ИЛИ ОтображатьЗаказыПоставщикам);
	ЭлементыФормы._2Дня.Доступность = НЕ(ОтображатьЗаказыПокупателей ИЛИ ОтображатьЗаказыПоставщикам);
	
КонецПроцедуры

// Процедура заполняет данные построителя отчета
// для выбора списка пользователей календаря
Процедура ЗаполнитьПостроительОтчета();

	ПостроительОтчета.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ответственный
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|{ГДЕ
	|	Пользователи.Ссылка КАК Ответственный}";

	Если ПостроительОтчета.Отбор.Найти("Ответственный") = Неопределено Тогда
		ПостроительОтчета.Отбор.Добавить("Ответственный", "Ответственный", "Ответственный");
	КонецЕсли;

	ПостроительОтчета.Отбор["Ответственный"].Использование = Истина;
	ПостроительОтчета.Отбор["Ответственный"].ВидСравнения = ВидСравненияПостроитель;
	Если ТипЗнч(ПостроительОтчета.Отбор["Ответственный"].Значение) = Тип("СписокЗначений") Тогда
		ПостроительОтчета.Отбор["Ответственный"].Значение = ПользовательКалендаря.Скопировать();
	Иначе
		Если ПользовательКалендаря.Количество() = 1 Тогда
			ПостроительОтчета.Отбор.Ответственный.Значение = ПользовательКалендаря[0].Значение;
		Иначе
			ПостроительОтчета.Отбор.Ответственный.Значение = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает право изменять пользователя в календаре пользователя
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Истина - если можно изменять пользователя в календаря пользователя
//
Функция РазрешитьИзменениеПользователяВКалендареПользователя(Пользователь = Неопределено) //Экспорт

	Разрешено = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(ПланыВидовХарактеристик.ПраваПользователей.ИзменениеПользователяВКалендареПользователя, Ложь);
	Если Разрешено.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли Разрешено.Количество() > 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Разрешено[0].Значение;
	КонецЕсли;

КонецФункции // РазрешитьИзменениеПользователяВКалендареПользователя()

// Заполнить список выбора рабочего времени
//
// Параметры
//  ЭлементУправления  – элемент управления со списком выбора
//
Процедура ЗаполнитьСписокВыбораРабочегоВремени(ЭлементУправления)

	НД = Дата("00010101000000");
	Для СчЧасов = 0 По 23 Цикл
		Для СчПолучасов = 0 По 1 Цикл
			ВремяСписка = НД + 60*60*СчЧасов + 30*60*СчПолучасов;
			ЭлементУправления.СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка, "ДФ=ЧЧ:мм; ДП=00:00") );
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	СохраненныеЗначения = ВосстановитьЗначение("КалендарьПользователя");
	Если СохраненныеЗначения <> Неопределено И ТипЗнч(СохраненныеЗначения) = Тип("Структура") Тогда
		СохраненныеЗначения.Свойство("КоличествоДнейНаЗакладкеДень", КоличествоДнейНаЗакладкеДень);
		СохраненныеЗначения.Свойство("КоличествоДнейНедели", КоличествоДнейНедели);
		СохраненныеЗначения.Свойство("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
		СохраненныеЗначения.Свойство("ТипСобытияКалендаря", ТипСобытияКалендаря);
		СохраненныеЗначения.Свойство("ОтображатьЗаказыПокупателей", ОтображатьЗаказыПокупателей);
		СохраненныеЗначения.Свойство("ОтображатьЗаказыПоставщикам", ОтображатьЗаказыПоставщикам);
		СохраненныеЗначения.Свойство("ОграничитьВремя",  ОграничитьВремя); 
		СохраненныеЗначения.Свойство("ОграничитьВремяС",  ОграничитьВремяС); 
		СохраненныеЗначения.Свойство("ОграничитьВремяПо", ОграничитьВремяПо); 
		СохраненныеЗначения.Свойство("ОтображатьЗанятостьПомещений", ОтображатьЗанятостьПомещений);
		СохраненныеЗначения.Свойство("ВидСравненияПостроитель", ВидСравненияПостроитель);
	КонецЕсли;
	
	Если КоличествоДнейНаЗакладкеДень = 0 Тогда
		КоличествоДнейНаЗакладкеДень  = 2;
	КонецЕсли;

	Если КоличествоДнейНедели = 0 Тогда
		КоличествоДнейНедели = 7;
	КонецЕсли;

	ЗаполнитьПостроительОтчета();

КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ДоступностьПереключателейНаЗакладкеДень();
	ДоступностьПараметровОграниченияВремени();
	
	Если РазрешитьИзменениеПользователяВКалендареПользователя(глЗначениеПеременной("глТекущийПользователь")) <> Истина Тогда
		ЭлементыФормы.Ответственные.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОграничитьВремяС.ШиринаСпискаВыбора  = 7;
	ЭлементыФормы.ОграничитьВремяПо.ШиринаСпискаВыбора = 7;
	
	НачалоРабочегоДня = Константы.НачалоРабочегоДня.Получить();
	ОкончаниеРабочегоДня = Константы.ОкончаниеРабочегоДня.Получить();
	ЗаполнитьСписокВыбораРабочегоВремени(ЭлементыФормы.НачалоРабочегоДня);
	ЗаполнитьСписокВыбораРабочегоВремени(ЭлементыФормы.ОкончаниеРабочегоДня);
	БылиИзмененыКонстанты = Ложь;
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		ЭлементыФормы.НачалоРабочегоДня.Доступность = Ложь;
		ЭлементыФормы.ОкончаниеРабочегоДня.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.ОК.
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	СтароеЗначение = ПользовательКалендаря.Скопировать();
	ПользовательКалендаря.Очистить();
	
	Для каждого ЗначениеОтбора из ПостроительОтчета.Отбор Цикл
		Если ЗначениеОтбора.Использование Тогда
			Если ТипЗнч(ЗначениеОтбора.Значение) = Тип("СписокЗначений") Тогда
				МассивЗначений = ЗначениеОтбора.Значение.ВыгрузитьЗначения();
				Для каждого Значение из МассивЗначений Цикл
					Если ЗначениеЗаполнено(Значение) Тогда
						ПользовательКалендаря.Добавить(Значение);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ЗначениеЗаполнено(ЗначениеОтбора.Значение) Тогда
				ПользовательКалендаря.Добавить(ЗначениеОтбора.Значение);
			КонецЕсли;
		КонецЕсли;
		ВидСравненияПостроитель = ЗначениеОтбора.ВидСравнения;
	КонецЦикла;
	
	Если ПользовательКалендаря.Количество()=0 Тогда
		ПользовательКалендаря = СтароеЗначение;
		ЗаполнитьПостроительОтчета();
		Предупреждение("Обязательно выберите пользователей календаря");
		Возврат;
	КонецЕсли; 
	
	СтруктураСохраняемыхЗначений = Новый Структура;
	СтруктураСохраняемыхЗначений.Вставить("КоличествоДнейНаЗакладкеДень", КоличествоДнейНаЗакладкеДень);
	СтруктураСохраняемыхЗначений.Вставить("КоличествоДнейНедели", КоличествоДнейНедели);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗапланированныеСобытия", ОтображатьЗапланированныеСобытия);
	СтруктураСохраняемыхЗначений.Вставить("ТипСобытияКалендаря", ТипСобытияКалендаря);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗаказыПокупателей", ОтображатьЗаказыПокупателей);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗаказыПоставщикам", ОтображатьЗаказыПоставщикам);
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремя", ОграничитьВремя);
	СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремяС", ОграничитьВремяС);
    СтруктураСохраняемыхЗначений.Вставить("ОграничитьВремяПо", ОграничитьВремяПо);
	СтруктураСохраняемыхЗначений.Вставить("ОтображатьЗанятостьПомещений", ОтображатьЗанятостьПомещений);
	СтруктураСохраняемыхЗначений.Вставить("ПользовательКалендаря", ПользовательКалендаря);
	СтруктураСохраняемыхЗначений.Вставить("ВидСравненияПостроитель", ВидСравненияПостроитель);
	
	СохранитьЗначение("КалендарьПользователя", СтруктураСохраняемыхЗначений);

	Если БылиИзмененыКонстанты Тогда
		Если ЗначениеЗаполнено(НачалоРабочегоДня) И ЗначениеЗаполнено(ОкончаниеРабочегоДня) И (НачалоРабочегоДня>=ОкончаниеРабочегоДня) Тогда 
			Предупреждение("Время окончания рабочего дня должно быть больше времени начала!");
			Возврат;
		КонецЕсли;
		
		Константы.НачалоРабочегоДня.Установить(НачалоРабочегоДня);
		Константы.ОкончаниеРабочегоДня.Установить(ОкончаниеРабочегоДня);
		ОчиститьСоответствиеНачалоИОкончаниеРабочегоДняПользователя();
	КонецЕсли;
	
	ЭтаФорма.Закрыть(Истина);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОграничитьВремя.
//
Процедура ОграничитьВремяПриИзменении(Элемент)
	ДоступностьПараметровОграниченияВремени();
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ОграничитьВремяС.
//
Процедура ОграничитьВремяСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДлинаЧаса = 3600;
	
	СписокВремен = Новый СписокЗначений;
	
	а = 0;
	ВремяСписка = ОграничитьВремяС; 
	НачалоДня = НачалоДня(ОграничитьВремяС)+1;
	КонецДня  = ?(ЗначениеЗаполнено(ОграничитьВремяПо),НачалоЧаса(ОграничитьВремяПо),КонецДня(ОграничитьВремяС));
	Пока НачалоЧаса(ВремяСписка) < НачалоЧаса(КонецДня) Цикл
		ВремяСписка = НачалоДня + а * ДлинаЧаса;
		СписокВремен.Добавить(ВремяСписка, СокрЛП(Формат(ВремяСписка,"ДФ=ЧЧ")));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент,НачальноеЗначение);
	КонецЕсли; 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента формы ОграничитьВремяПо.
//
Процедура ОграничитьВремяПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДлинаЧаса = 3600;
	
	СписокВремен = Новый СписокЗначений;
	
	а = 0;
	ВремяСписка = ОграничитьВремяС; 
	НачалоДня = НачалоЧаса(ОграничитьВремяС)+1;
	ОкончаниеДня = КонецДня(ОграничитьВремяС);
	Пока НачалоЧаса(ВремяСписка) < НачалоЧаса(ОкончаниеДня) Цикл
		ВремяСписка = НачалоДня + а * ДлинаЧаса;
		СписокВремен.Добавить(ВремяСписка, СокрЛП(Формат(ВремяСписка,"ДФ=ЧЧ")));
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен,Элемент,НачальноеЗначение);
	КонецЕсли; 
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОтображатьЗаказыПокупателей.
//
Процедура ОтображатьЗаказыПокупателейПриИзменении(Элемент)
	
	ДоступностьПереключателейНаЗакладкеДень();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОтображатьЗаказыПоставщикам.
//
Процедура ОтображатьЗаказыПоставщикамПриИзменении(Элемент)
	
	ДоступностьПереключателейНаЗакладкеДень();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НачалоРабочегоДня.
//
Процедура НачалоРабочегоДняПриИзменении(Элемент)
	
	БылиИзмененыКонстанты = Истина;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОкончаниеРабочегоДня.
//
Процедура ОкончаниеРабочегоДняПриИзменении(Элемент)
	
	БылиИзмененыКонстанты = Истина;
	
КонецПроцедуры

Процедура НачалоРабочегоДняНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаВремени(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОкончаниеРабочегоДняНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаВремени(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработатьВыборИзСпискаВремени(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	НачальноеЗначение = Неопределено;
	
	ТекущееВремя = Элемент.Значение;
	Если ЗначениеЗаполнено(ТекущееВремя) Тогда
		Для Каждого ВыбираемоеВремя Из Элемент.СписокВыбора Цикл
			Если ВыбираемоеВремя.Значение > ТекущееВремя Тогда
				Прервать;
			КонецЕсли;
			
			НачальноеЗначение = ВыбираемоеВремя;
		КонецЦикла;
	КонецЕсли;
	
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, НачальноеЗначение);
	КонецЕсли;
	
	Если ВыбранноеВремя <> Неопределено Тогда
		Элемент.Значение = ВыбранноеВремя.Значение;
		БылиИзмененыКонстанты = Истина;
	КонецЕсли;

КонецПроцедуры



