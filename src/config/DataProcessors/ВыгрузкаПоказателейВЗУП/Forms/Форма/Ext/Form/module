Перем мУниверсальнаяВыгрузкаДанных;
Перем мТаблицаПравилВыгрузки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ЗначениеЗаполнено(Подстроки[0]) И ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
Функция СписокМесяцевПоСтроке(Текст)
    СписокМесяцев = Новый СписокЗначений;
    Месяцы = Новый Соответствие;
    МесяцыВозврата = Новый Массив;
    Для Счетчик = 1 По 12 Цикл
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
    КонецЦикла;
    Для Каждого ЭлементСписка Из СписокМесяцев Цикл
        Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
            Месяцы[ЭлементСписка.Значение] = 0;
        КонецЕсли;
    КонецЦикла;
    Для Каждого Элемент Из Месяцы Цикл
        МесяцыВозврата.Добавить(Элемент.Ключ);
    КонецЦикла;
    Возврат МесяцыВозврата;
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
// Процедура исполняется только на клиенте
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ДатаКакМесяцПредставление(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ДатаКакМесяцПредставление(ПериодРегистрации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Инициализирует универсальную обработку выгрузки данных, загружает правила
//
// Параметры:
//  Нет.
// 
Процедура ИнициализироватьУниверсальнуюОбработкуВыгрузкиДанных()

	// Инициализация обработки УниверсальныйОбменДаннымиXML
	
	мУниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
КонецПроцедуры // ЗагрузитьПравилаОбмена() 

// Выполняет загрузку правил обмена из макета
//
Процедура ЗагрузитьПравилаОбмена(Кнопка)

	// Производим загрузку правил обмена

	Состояние("Выполняется загрузка правил обмена...");
	

	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";

	МакетПравилОбмена = ПолучитьМакет("ПравилаОбмена");
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);

	мУниверсальнаяВыгрузкаДанных.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	мУниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена();

	Попытка
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);  // Удаляем временный файл правил
	Исключение КонецПопытки;

	мТаблицаПравилВыгрузки = мУниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки.Скопировать();
	
КонецПроцедуры

// Вызывает диалог выбора файла для выбора файла данных
//
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ПолеНастройкиМенеджер.
//
Процедура ПолеНастройкиМенеджерПриИзменении(Элемент)
	
	УправлениеОтчетами.ПолеНастройкиПриИзменении(Элемент, ОтборМенеджер);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеВидаСравненияМенеджер.
//
Процедура ПолеВидаСравненияМенеджерПриИзменении(Элемент)

	УправлениеОтчетами.ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода периода.
//
Процедура МесяцСтрокаПриИзменении(Элемент)
	
	ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, Период);
	Элемент.Значение = ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода.
//
Процедура МесяцСтрокаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода.
//
Процедура МесяцСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода.
//
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Период = ДобавитьМесяц(Период, Направление);
	Элемент.Значение = ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода.
//
Процедура МесяцСтрокаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода.
//
Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры


// Обработчик события ПередНачаломДобавления элемента формы Показатели.
//
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Показатели.
//
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "Открытие" для поля "Имя файла данных"
//
Процедура ИмяФайлаДанныхОткрытие(Элемент, СтандартнаяОбработка)

	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" для поля "Имя файла данных"
//
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Выполнить". 
Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если ПустаяСтрока(ФайлВыгрузки) Тогда
		Предупреждение("Не указано имя файла данных.");
		Возврат;
	КонецЕсли;
	
	ПоказателиРаботыМенеджеров = Отчеты.ПоказателиРаботыМенеджеров.Создать();
	
	ПоказателиРаботыМенеджеров.ДатаНачала     = НачалоМесяца(Период);
    ПоказателиРаботыМенеджеров.ДатаКонца	  = КонецМесяца(Период);
	
	ПоказателиРаботыМенеджеров.ОтборМенеджер  = ОтборМенеджер;

	ПоказателиРаботыМенеджеров.мПоказатели.Очистить();
	
	// Показатели
	ТаблицаСписокВсехПоказателей = ПоказателиОтчета.Выгрузить();
	Для каждого Строки Из ТаблицаСписокВсехПоказателей Цикл
		Если Строки.ИспользованиеПоказателя Тогда
			ПоказателиРаботыМенеджеров.мПоказатели.Добавить(Строки.ИмяПоказателя, Строки.ПредставлениеПоказателя);
		КонецЕсли; 
		СтрокаПоказателя = ПоказателиРаботыМенеджеров.ПоказателиОтчета.Добавить();
		СтрокаОтчета = ПоказателиРаботыМенеджеров.ПоказателиОтчета.Найти(Строки.ИмяПоказателя,"ИмяПоказателя");
		Если СтрокаОтчета <> Неопределено Тогда
			СтрокаОтчета.ИспользованиеПоказателя = Строки.ИспользованиеПоказателя;
		КонецЕсли;

	КонецЦикла;
	
	Запрос = Новый Запрос;
	Если НЕ ПоказателиРаботыМенеджеров.СобратьТекстЗапроса(Запрос) Тогда
		Предупреждение("Запрос не выполнен!"); 
		Возврат;
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();

	
    // Загрузка правил обмена
    ЗагрузитьПравилаОбмена("");
    
    // Установка параметров выгрузки
    
    мУниверсальнаяВыгрузкаДанных.ИмяФайлаОбмена = ФайлВыгрузки;
    
    мУниверсальнаяВыгрузкаДанных.ДатаНачала     = НачалоМесяца(Период);
    мУниверсальнаяВыгрузкаДанных.ДатаОкончания  = КонецМесяца(Период);
	мУниверсальнаяВыгрузкаДанных.ВыполнитьОбменДаннымиВОптимизированномФормате = Истина;
    мУниверсальнаяВыгрузкаДанных.РежимОбмена    = "Выгрузка";
	
    мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("Выборка",   Выборка);  
	мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("Организация", Организация);
    мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("НеЗамещатьДокументыПриЗагрузке",   Ложь);
    мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("НеЗамещатьСправочникиПриЗагрузке", Истина);        
    мУниверсальнаяВыгрузкаДанных.Параметры.Вставить("Показатели", ПоказателиРаботыМенеджеров.мПоказатели);
    	
    // Выгружаем данные
    
    мУниверсальнаяВыгрузкаДанных.ВыполнитьВыгрузку();

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработкчик события "ПриОткрытии"
//
Процедура ПриОткрытии()
	
	УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, ОтборМенеджер,, "ОбработкаОбъект.ОтборМенеджер");

КонецПроцедуры

// Процедура - обработкчик события "ПередОткрытием"
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = КонецМесяца(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	МесяцСтрока = ДатаКакМесяцПредставление(Период);	
	
	ИнициализироватьУниверсальнуюОбработкуВыгрузкиДанных();
		
КонецПроцедуры // ПередОткрытием()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Действие элемента командной панели 
// списка показателей УстановитьФлажки.
//
Процедура КоманднаяПанельУстановитьФлажки(Кнопка)

	Для каждого Показатель Из ПоказателиОтчета Цикл
	
		Показатель.ИспользованиеПоказателя = Истина;
	
	КонецЦикла; 
	
КонецПроцедуры

// Обработчик события Действие элемента командной панели 
// списка показателей СнятьФлажки.
//
Процедура КоманднаяПанельСнятьФлажки(Кнопка)

	Для каждого Показатель Из ПоказателиОтчета Цикл
	
		Показатель.ИспользованиеПоказателя = Ложь;
	
	КонецЦикла; 
	
КонецПроцедуры






