
Перем мТекущийИсходныйДокумент;
Перем мТекущийОтветДокумент;

Перем мЖирныйШрифт;
Перем мСтатистикаНеРассмотренности;

Перем СтруктураСвязиЭлементовСДанными;

Процедура ПроверитьНаличиеУчетныхЗаписейДляОбмена()
	
	// проверка на наличие учетных зписей для обмена данными
	МассивУчетныхЗаписей = ЭлектронныеДокументы.ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена();
	
	Если МассивУчетныхЗаписей.Количество() = 0 Тогда
		
		ПодключитьОбработчикОжидания("ПоказФормыСозданияУчетнойЗаписи", 1);		
						
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьДеревоСтроками(Дерево, ПостфиксДерева)
	
	СтрокаРодителя = Дерево.Строки.Добавить();
	СтрокаРодителя.ТипДокументов = ПостфиксДерева;
	СтрокаРодителя.СлужебноеИмя = ПостфиксДерева;
	
	СтрокаТаблицы = СтрокаРодителя.Строки.Добавить();
	СтрокаТаблицы.ТипДокументов = "Входящие";
	СтрокаТаблицы.СлужебноеИмя = СтрокаТаблицы.ТипДокументов + ПостфиксДерева;
	
	СтрокаТаблицы = СтрокаРодителя.Строки.Добавить();
	СтрокаТаблицы.ТипДокументов = "Исходящие";
	СтрокаТаблицы.СлужебноеИмя = СтрокаТаблицы.ТипДокументов + ПостфиксДерева;	
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбмен1ССеть") Тогда
		
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаС1ССеть");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецЕсли;
	
	ТаблицаФильтрации.Строки.Очистить();
	
	ДополнитьДеревоСтроками(ТаблицаФильтрации, "Заказы");
	ДополнитьДеревоСтроками(ТаблицаФильтрации, "Накладные");
	ДополнитьДеревоСтроками(ТаблицаФильтрации, "Счета-фактуры");
	ДополнитьДеревоСтроками(ТаблицаФильтрации, "Товары");
		
	ОбновитьСтатистикуНеРассмотренности();	
		
КонецПроцедуры

Процедура ПредложитьСоздатьНовуюУчетнуюЗаписьОбменаДанными()
	
	ОтветПользователя = Вопрос("Не найдена ни одна учетная запись для обмена данными! Создать учетную запись для обмена?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНовойУчетнойЗаписи = Справочники.УчетныеЗаписиЭлектронногоОбмена.ПолучитьФормуНовогоЭлемента();
	ФормаНовойУчетнойЗаписи.Открыть();	
	
КонецПроцедуры

Процедура ПоказФормыСозданияУчетнойЗаписи()
	
	ОтключитьОбработчикОжидания("ПоказФормыСозданияУчетнойЗаписи");
	
	ПредложитьСоздатьНовуюУчетнуюЗаписьОбменаДанными();	
				
КонецПроцедуры

Процедура СпозиционироватьсяНаНерассмотренныхДокументах()
	
	НаибольшееНеРассмотренное = 0;
	ТекущийКлючПозиционирования = "";
	
	Для Каждого СтрокаСтатистики Из мСтатистикаНеРассмотренности Цикл
		
		Если СтрокаСтатистики.Значение > НаибольшееНеРассмотренное Тогда
			
			ТекущийКлючПозиционирования = СтрокаСтатистики.Ключ;
			НаибольшееНеРассмотренное = СтрокаСтатистики.Значение;
			
		КонецЕсли;			
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекущийКлючПозиционирования) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ТаблицаФильтрации.ТекущаяСтрока = ТаблицаФильтрации.Строки.Найти(ТекущийКлючПозиционирования, "СлужебноеИмя", Истина);
	УстановитьНужнуюСтраницуЖурнала(ТекущийКлючПозиционирования);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ПроверитьНаличиеУчетныхЗаписейДляОбмена();
	
	СпозиционироватьсяНаНерассмотренныхДокументах();
	
	ОбработатьИзменениеИнтервалаОбновленияДанных();
	
КонецПроцедуры

Процедура УстановитьНужнуюСтраницуЖурнала(ИмяФильтрации)
	
	ИмяДляУстановки = СтрЗаменить(ИмяФильтрации, " ", "");
	ИмяДляУстановки = СтрЗаменить(ИмяДляУстановки, "-", "");
	
	ИмяТаблицыРедактирования = "ТаблицаДокументов" + ИмяДляУстановки;	
	
	ЭлементыФормы.ПанельДокументы.ТекущаяСтраница = ЭлементыФормы.ПанельДокументы.Страницы[ИмяДляУстановки];	
	
	Если мТекущаяТаблицаРедактирования <> Неопределено Тогда
		
		СтароеОрганичениеПоКонтрагенту = мТекущаяТаблицаРедактирования.Отбор.Контрагент;
		
	Иначе
		
		СтароеОрганичениеПоКонтрагенту = Неопределено;
		
	КонецЕсли;
	
	мТекущийЭлементРедактирования = ЭлементыФормы[ИмяТаблицыРедактирования];
	мТекущаяТаблицаРедактирования = ЭтотОбъект[ИмяТаблицыРедактирования];
	
	ПриАктивизацииСтрокиТаблицыДокументов(Неопределено);
	
	УправлениеОтчетами.УстановитьСвязьПолейБыстрогоОтбораНаФорме(ЭлементыФормы, мТекущаяТаблицаРедактирования.Отбор, 
		СтруктураСвязиЭлементовСДанными, "ОбработкаОбъект." + ИмяТаблицыРедактирования + ".Отбор");
		
	Если СтароеОрганичениеПоКонтрагенту <> Неопределено Тогда
		
		НовоеОграничение = мТекущаяТаблицаРедактирования.Отбор.Контрагент;
		НовоеОграничение.Использование = СтароеОрганичениеПоКонтрагенту.Использование;
		НовоеОграничение.ВидСравнения = СтароеОрганичениеПоКонтрагенту.ВидСравнения;
		Попытка
			НовоеОграничение.Значение = СтароеОрганичениеПоКонтрагенту.Значение;
		Исключение
		КонецПопытки;
		
	КонецЕсли;	
				
КонецПроцедуры

Процедура ТаблицаФильтрацииПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.ТаблицаФильтрации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФильтрации = ЭлементыФормы.ТаблицаФильтрации.ТекущиеДанные.СлужебноеИмя;
	
	Если Найти(ИмяФильтрации, "Входящие") = 0
		И Найти(ИмяФильтрации, "Исходящие") = 0 Тогда
		
		ИмяФильтрации = "Входящие" + ИмяФильтрации;
		ЭлементыФормы.ТаблицаФильтрации.ТекущаяСтрока = ТаблицаФильтрации.Строки.Найти(ИмяФильтрации, "СлужебноеИмя", Истина);
		
	КонецЕсли;
			
	УстановитьНужнуюСтраницуЖурнала(ИмяФильтрации);
	
КонецПроцедуры

Функция НайтиПоследееИзвещениеПоДате(ИмяДокументаПоиска, ИсходныйДокумент)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ первые 1
				   |	Документ.Ссылка
				   |ИЗ
				   |	Документ." + ИмяДокументаПоиска + " КАК Документ
				   |ГДЕ
				   |	Документ.ИсходныйДокумент = &Док
				   |Упорядочить по Документ.Дата Убыв";
				   
	Запрос.УстановитьПараметр("Док", ИсходныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Процедура СпозиционироватьсяПоследниеНаИзвещения()
	
	Если мТекущийЭлементРедактирования <> Неопределено
		И (мТекущийЭлементРедактирования.ТекущиеДанные <> Неопределено)
		И ЗначениеЗаполнено(мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка) Тогда
		
		Входящее = НайтиПоследееИзвещениеПоДате("ВходящееИзвещение", мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(Входящее) Тогда
			ЭлементыФормы.ТаблицаВходящихИзвещений.ТекущаяСтрока = Входящее;
		КонецЕсли;
		
		Исходящее = НайтиПоследееИзвещениеПоДате("ИсходящееИзвещение", мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка);
		Если ЗначениеЗаполнено(Исходящее) Тогда
			ЭлементыФормы.ТаблицаИсходящихИзвещений.ТекущаяСтрока = Исходящее;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяПолучить(Кнопка)
	
	МассивУчетныхЗаписей = ЭлектронныеДокументы.ПолучитьВсеДоступныеУчетныеЗаписиЭлектронногоОбмена();
	
	Если МассивУчетныхЗаписей.Количество() = 0 Тогда 
		
		ПредложитьСоздатьНовуюУчетнуюЗаписьОбменаДанными();
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ЭлементУчетнойЗаписи Из МассивУчетныхЗаписей Цикл
		
		ЭлектронныеДокументы.ПолучитьЭлектронныеДокументы(ЭлементУчетнойЗаписи);
		
	КонецЦикла;
	
	ОбновитьСтатистикуНеРассмотренности();
	
	СпозиционироватьсяНаНерассмотренныхДокументах();
	
	СпозиционироватьсяПоследниеНаИзвещения();
		
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Структура подчиненности документа" Командной панели "ДействияФормы"
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если мТекущийЭлементРедактирования = Неопределено
		ИЛИ мТекущийЭлементРедактирования.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(мТекущийЭлементРедактирования.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ОбработатьСозданиеНовогоДокумента(Элемент)
	
	Если мТекущийЭлементРедактирования = ЭлементыФормы.ТаблицаДокументовИсходящиеТовары Тогда
		
		СтруктураДоступныхДокументов = Новый Структура("ИсходящийЗапросКаталога, ИсходящийЗапросПрайсЛиста");
		
	ИначеЕсли мТекущийЭлементРедактирования = ЭлементыФормы.ТаблицаДокументовИсходящиеЗаказы Тогда
			
		СтруктураДоступныхДокументов = Новый Структура("ИсходящийЗаказ");
		
	ИначеЕсли мТекущийЭлементРедактирования = ЭлементыФормы.ТаблицаДокументовИсходящиеСчетаФактуры Тогда
			
		СтруктураДоступныхДокументов = Новый Структура("ИсходящийСчетФактура");
		
	ИначеЕсли мТекущийЭлементРедактирования = ЭлементыФормы.ТаблицаДокументовИсходящиеНакладные Тогда
			
		СтруктураДоступныхДокументов = Новый Структура("ИсходящаяЭлектроннаяНакладная");
		
	Иначе
		Возврат;
	КонецЕсли;	
	
	
	Список = Новый СписокЗначений;
	Для каждого КлючИЗначение Из СтруктураДоступныхДокументов Цикл
		
		МетаданныеОбъекта = Метаданные.Документы[КлючИЗначение.Ключ];
		Список.Добавить(МетаданныеОбъекта, МетаданныеОбъекта.Представление(), ,БиблиотекаКартинок.ДокументОбъект);
		
	КонецЦикла;
	
	МетаданныеОбъекта = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Ссылка.Метаданные());
	
	Если Список.Количество() <> 1 Тогда
	
		ЭлементСписка = Список.ВыбратьЭлемент("Выбор вида документа", Список.НайтиПоЗначению(МетаданныеОбъекта));
		
	Иначе
		
		ЭлементСписка = Список[0];
		
	КонецЕсли;
	
	Если ЭлементСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ИмяСоздаваемогоДокумента = ЭлементСписка.Значение.Имя;
	
	Документы[ИмяСоздаваемогоДокумента].ПолучитьФормуНовогоДокумента(,Элемент).Открыть();
	
	Если ИмяСоздаваемогоДокумента = "ИсходящийЗапросКаталога"
		ИЛИ ИмяСоздаваемогоДокумента = "ИсходящийЗапросПрайсЛиста" Тогда
		
		ИмяСтраницыДляУстановки = "ИсходящиеТовары";
		
	ИначеЕсли ИмяСоздаваемогоДокумента = "ИсходящийЗаказ" Тогда
		
		ИмяСтраницыДляУстановки = "ИсходящиеЗаказы";
		
	ИначеЕсли ИмяСоздаваемогоДокумента = "ИсходящаяЭлектроннаяНакладная" Тогда
		
		ИмяСтраницыДляУстановки = "ИсходящиеНакладные";
		
	ИначеЕсли ИмяСоздаваемогоДокумента = "ИсходящийСчетФактура" Тогда
		
		ИмяСтраницыДляУстановки = "ИсходящиеСчетаФактуры";
		
	КонецЕсли;
	
	УстановитьНужнуюСтраницуЖурнала(ИмяСтраницыДляУстановки);		
		
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
		
	Отказ = Истина;
	
	ОбработатьСозданиеНовогоДокумента(Элемент);		
		
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеОтправить(Кнопка)
	
	Если мТекущийЭлементРедактирования.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CсылкаНаДокумент = мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка;
	
	ДокументОбъект = CсылкаНаДокумент.ПолучитьОбъект();
	
	Отказ     = Ложь;
	Сообщение = "";
	ЭлектронныеДокументы.ОтправитьИсходящийЭлектронныйДокумент(ДокументОбъект, Отказ, Сообщение);
	
	Если Отказ Тогда
		
		Сообщить("Документ не отправлен: " + CсылкаНаДокумент + Сообщение);
		Предупреждение("Операция не выполнена!", ,"Отправка электронного документа");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяУчетныеЗаписиОбмена(Кнопка)
	
	// показать учетные записи обмена данными
	ФормаСпискаУчетныхЗаписей = Справочники.УчетныеЗаписиЭлектронногоОбмена.ПолучитьФормуСписка();
	ФормаСпискаУчетныхЗаписей.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяСвойстваНоменклатурыДляОбмена(Кнопка)
	
	// показать учетные записи обмена данными
	ФормаСпискаСвойств = Справочники.СвойстваНоменклатурыЭлектронногоОбмена.ПолучитьФормуСписка();
	ФормаСпискаСвойств.Открыть();	
	
КонецПроцедуры

Процедура ПриВыводеСтрокиЖурнала(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОтобразитьКартинкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
	Если ДанныеСтроки.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ДанныеСтроки.ОбработанОтправлен Тогда
		
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиЖурнала(Элемент, ОформлениеСтроки, ДанныеСтроки);		
		
КонецПроцедуры

Процедура ТаблицаФильтрацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат
	КонецЕсли;
		
	Если ДанныеСтроки.ТипДокументов = "Входящие" Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.ИндексКартинки = 1;
	ИначеЕсли ДанныеСтроки.ТипДокументов = "Исходящие" Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.ТипДокументов = "Заказы" Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.ИндексКартинки = 3;
	ИначеЕсли ДанныеСтроки.ТипДокументов = "Накладные" Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.ИндексКартинки = 4;
	ИначеЕсли ДанныеСтроки.ТипДокументов = "Товары" Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.ИндексКартинки = 2;
	ИначеЕсли ДанныеСтроки.ТипДокументов = "Счета-фактуры" Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.ИндексКартинки = 5;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.ТипДокументов.ОтображатьКартинку = Истина;

	
	СтатистикаГруппы = мСтатистикаНеРассмотренности.Получить(ДанныеСтроки.СлужебноеИмя);
	Если ТипЗнч(СтатистикаГруппы) = Тип("Число") И СтатистикаГруппы > 0 Тогда
		ОформлениеСтроки.Ячейки.ТипДокументов.Текст = Строка(ДанныеСтроки.ТипДокументов) + " (" + СтатистикаГруппы + ")";
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСтатистикуДанными(ИмяЖурнала, ИмяДляСтатистики)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Кол	
	               |ИЗ
	               |	ЖурналДокументов." + ИмяЖурнала + " КАК ЭлектронныеДокументы
				   |ГДЕ
				   |	ЭлектронныеДокументы.ПометкаУдаления = Ложь
				   |	И ЭлектронныеДокументы.ОбработанОтправлен = Ложь";
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() <> 0
		И ТаблицаРезультата[0].Кол <> NULL
		И ТаблицаРезультата[0].Кол > 0 Тогда
		
		мСтатистикаНеРассмотренности.Вставить(ИмяДляСтатистики, ТаблицаРезультата[0].Кол);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатистикуНеРассмотренности()
	
	мСтатистикаНеРассмотренности.Очистить();
	
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыТоварыВходящие", "ВходящиеТовары");
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыТоварыИсходящие", "ИсходящиеТовары");
	
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыЗаказыВходящие", "ВходящиеЗаказы");
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыЗаказыИсходящие", "ИсходящиеЗаказы");
	
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыНакладныеВходящие", "ВходящиеНакладные");
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыНакладныеИсходящие", "ИсходящиеНакладные");
	
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыСчетаФактурыВходящие", "ВходящиеСчета-фактуры");
	ДополнитьСтатистикуДанными("ЭлектронныеДокументыСчетаФактурыИсходящие", "ИсходящиеСчета-фактуры");
	
	Для Каждого СтрокаДерева Из ТаблицаФильтрации.Строки Цикл
		ЭлементыФормы.ТаблицаФильтрации.Развернуть(СтрокаДерева, Истина);
	КонецЦикла;
	
	ЭлементыФормы.ТаблицаФильтрации.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеОбновить(Кнопка)
	
	мТекущаяТаблицаРедактирования.Обновить();
	ОбновитьСтатистикуНеРассмотренности();
	СпозиционироватьсяПоследниеНаИзвещения();
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеОбновить(Кнопка)
	
	мТекущаяТаблицаРедактирования.Обновить();
	ОбновитьСтатистикуНеРассмотренности();
	СпозиционироватьсяПоследниеНаИзвещения();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеДокумента1ССеть" Тогда
		
		ОбновитьСтатистикуНеРассмотренности();	
		ПриАктивизацииСтрокиТаблицыДокументов(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеПослеУдаления(Элемент)
	
	ОбновитьСтатистикуНеРассмотренности();
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСтатистикуНеРассмотренности();
	
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеПослеУдаления(Элемент)
	
	ОбновитьСтатистикуНеРассмотренности();
	
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСтатистикуНеРассмотренности();
	
КонецПроцедуры

Процедура ОтобразитьКартинкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КартинкаДокумента.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.ПометкаУдаления Тогда
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 1;
		Возврат;	
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.НомерКартинки.Значение <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = ОформлениеСтроки.Ячейки.НомерКартинки.Значение;
	Иначе
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 0;
	КонецЕсли;
		
	ТипДокумента = ТипЗнч(ДанныеСтроки.Ссылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептЗаказа")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептНакладной")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептСчетаФактуры") Тогда
		
		Если ДанныеСтроки.ОбработанОтправлен Тогда
			
			Если ДанныеСтроки.Ссылка.Акцептовать Тогда
				ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 2;
			Иначе
				ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 3;
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяВидаДокумента = ЭлектронныеДокументы.ОпределитьПоДокументуТекстВида(ДанныеСтроки.Ссылка);
		
		Если ПустаяСтрока(ИмяВидаДокумента) Тогда
			
			ОформлениеСтроки.Ячейки.ВидДокумента.УстановитьТекст("Исходящий реджект/акцепт");
			
		Иначе
		
			ОформлениеСтроки.Ячейки.ВидДокумента.УстановитьТекст(ИмяВидаДокумента);
			
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептЗаказа")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептНакладной")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептСчетаФактуры") Тогда
		
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 2;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектЗаказа")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектНакладной")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектСчетаФактуры") Тогда
		
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 3;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиЖурнала(Элемент, ОформлениеСтроки, ДанныеСтроки);	
	
КонецПроцедуры

Функция ОпределитьПоДокументуПредставлениеВывода(СсылкаНаДокумент, КартинкаДляВывода = Неопределено)
	
	Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		Возврат "";
	КонецЕсли;
	
	ЭтоАкцепт = Ложь;
	ИмяВидаДокумента = ЭлектронныеДокументы.ОпределитьПоДокументуТекстВида(СсылкаНаДокумент, ЭтоАкцепт);
	
	Если ПустаяСтрока(ИмяВидаДокумента) Тогда
		
		ТипДокумента = ТипЗнч(СсылкаНаДокумент);
		
		Если ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептЗаказа")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептНакладной") Тогда
		
			КартинкаДляВывода = БиблиотекаКартинок.Утвердить;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектЗаказа")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектНакладной") Тогда
			
			КартинкаДляВывода = БиблиотекаКартинок.Отклонить;
			
		КонецЕсли;
		
		Возврат Строка(СсылкаНаДокумент);
		
	Иначе
		
		Если ЭтоАкцепт Тогда
			КартинкаДляВывода = БиблиотекаКартинок.Утвердить;
		Иначе
			КартинкаДляВывода = БиблиотекаКартинок.Отклонить;
		КонецЕсли;
		
		Возврат ИмяВидаДокумента + " " + СсылкаНаДокумент.Номер + " от " + СсылкаНаДокумент.Дата;  
		
	КонецЕсли;	
	
КонецФункции 

Процедура ОтобразитьСсылкиНаДокумент()
	
	ЭлементыФормы.НадписьГиперСсылкаИсходныйДокумент.ГиперСсылка = ЗначениеЗаполнено(мТекущийИсходныйДокумент);
	
	Картинка = Новый Картинка;
	Если ЗначениеЗаполнено(мТекущийИсходныйДокумент) Тогда
		ЭлементыФормы.НадписьГиперСсылкаИсходныйДокумент.Заголовок = ОпределитьПоДокументуПредставлениеВывода(мТекущийИсходныйДокумент, Картинка);		
	Иначе
		ЭлементыФормы.НадписьГиперСсылкаИсходныйДокумент.Заголовок = "Нет";
	КонецЕсли;
	ЭлементыФормы.НадписьГиперСсылкаИсходныйДокумент.Картинка = Картинка;
	
	
	ЭлементыФормы.НадписьГиперСсылкаОтветныйДокумент.ГиперСсылка = ЗначениеЗаполнено(мТекущийОтветДокумент);
	
	Картинка = Новый Картинка;
	Если ЗначениеЗаполнено(мТекущийОтветДокумент) Тогда
		ЭлементыФормы.НадписьГиперСсылкаОтветныйДокумент.Заголовок = ОпределитьПоДокументуПредставлениеВывода(мТекущийОтветДокумент, Картинка);				
	Иначе
		ЭлементыФормы.НадписьГиперСсылкаОтветныйДокумент.Заголовок = "Нет";
	КонецЕсли;	
	
	ЭлементыФормы.НадписьГиперСсылкаОтветныйДокумент.Картинка = Картинка;
	
КонецПроцедуры

Процедура ОбновитьГиперСсылкиДокументовОснований(Элемент)
	
	мТекущийИсходныйДокумент = Неопределено;
	мТекущийОтветДокумент = Неопределено;
	
	Если мТекущийЭлементРедактирования <> Неопределено
		И (мТекущийЭлементРедактирования.ТекущиеДанные <> Неопределено)
		И ЗначениеЗаполнено(мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка) Тогда
		
		СсылкаНаДокумент = мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка;
		
		ТипДокумента = ТипЗнч(СсылкаНаДокумент);
		
		Если ТипДокумента = Тип("ДокументСсылка.ИсходящийЗапросКаталога") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийКаталогТоваров");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийЗапросКаталога") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ИсходящийКаталогТоваров");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийКаталогТоваров") Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийКаталогТоваров") Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ИсходящийТоварКРаботе");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийТоварКРаботе")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийТоварКРаботе") Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийЗапросПрайсЛиста") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийПрайсЛист");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийЗапросПрайсЛиста") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ИсходящийПрайсЛист");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийПрайсЛист")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийПрайсЛист")Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийЗаказ") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийАкцептЗаказа");
			Если Не ЗначениеЗаполнено(мТекущийОтветДокумент) Тогда
				мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийРеджектЗаказа");
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийСчетФактура") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийАкцептСчетаФактуры");
			Если Не ЗначениеЗаполнено(мТекущийОтветДокумент) Тогда
				мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийРеджектСчетаФактуры");
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийЗаказ") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ИсходящийРеджектАкцептЗаказа");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящийСчетФактура") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ИсходящийРеджектАкцептСчетаФактуры");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептЗаказа")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептЗаказа")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектЗаказа") Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептСчетаФактуры")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептСчетаФактуры")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектСчетаФактуры") Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящаяЭлектроннаяНакладная") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийАкцептНакладной");
			Если Не ЗначениеЗаполнено(мТекущийОтветДокумент) Тогда
				мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ВходящийРеджектНакладной");
			КонецЕсли;
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящаяЭлектроннаяНакладная") Тогда
			
			мТекущийОтветДокумент = ЭлектронныеДокументы.НайтиПервыйОтветныйДокумент(СсылкаНаДокумент, "ИсходящийРеджектАкцептНакладной");
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИсходящийРеджектАкцептНакладной")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийАкцептНакладной")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.ВходящийРеджектНакладной") Тогда
			
			мТекущийИсходныйДокумент = СсылкаНаДокумент.ИсходныйДокумент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтобразитьСсылкиНаДокумент();	
	
КонецПроцедуры

Процедура ПриАктивизацииСтрокиТаблицыДокументов(Элемент)
	
	// при активизации строки таблицы документов
	ОбновитьГиперСсылкиДокументовОснований(Элемент);
	
	Если мТекущийЭлементРедактирования <> Неопределено
		И (мТекущийЭлементРедактирования.ТекущиеДанные <> Неопределено)
		И ЗначениеЗаполнено(мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка) Тогда
		
		ТаблицаВходящихИзвещений.Отбор.ИсходныйДокумент.Установить(мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка);
		ТаблицаИсходящихИзвещений.Отбор.ИсходныйДокумент.Установить(мТекущийЭлементРедактирования.ТекущиеДанные.Ссылка);
		
	Иначе
		
		ТаблицаВходящихИзвещений.Отбор.ИсходныйДокумент.Установить(Документы.ИсходящийЗапросКаталога.ПустаяСсылка());
		ТаблицаИсходящихИзвещений.Отбор.ИсходныйДокумент.Установить(Документы.ИсходящийЗапросКаталога.ПустаяСсылка());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьГиперСсылкаДокумент(Элемент)
	
	Если Элемент = ЭлементыФормы.НадписьГиперСсылкаИсходныйДокумент Тогда
		ДокументДляОткрытия = мТекущийИсходныйДокумент;
	Иначе
		ДокументДляОткрытия = мТекущийОтветДокумент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументДляОткрытия) Тогда
		ФормаДокумента = ДокументДляОткрытия.ПолучитьФорму(, ЭтаФорма);
		ФормаДокумента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельГлавнаяНастройка(Кнопка)
	
	// открыть настройки монитора обмена данными
	ФормаНастроек = ПолучитьФорму("Настройки", ЭтаФорма);	
	ФормаНастроек.АвтоматическиОбновлятьДанныеЧерезИнтервал = АвтоматическиОбновлятьДанныеЧерезИнтервал;
	
	РезультатОткрытия = ФормаНастроек.ОткрытьМодально();
	
	Если РезультатОткрытия = Истина Тогда
		
		АвтоматическиОбновлятьДанныеЧерезИнтервал = ФормаНастроек.АвтоматическиОбновлятьДанныеЧерезИнтервал;	
		
		ОбработатьИзменениеИнтервалаОбновленияДанных();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеИнтервалаОбновленияДанных()
	
	ОтключитьОбработчикОжидания("ОбработчикПриОбновленииДанныхПоВремени");
	
	Если АвтоматическиОбновлятьДанныеЧерезИнтервал > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикПриОбновленииДанныхПоВремени", АвтоматическиОбновлятьДанныеЧерезИнтервал);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ОтключитьОбработчикОжидания("АвтоматическиОбновлятьДанныеЧерезИнтервал");
	
	СохранитьЗначение("МониторОбменаДанными.АвтоматическиОбновлятьДанныеЧерезИнтервал", АвтоматическиОбновлятьДанныеЧерезИнтервал);
	
КонецПроцедуры

Процедура ОбработчикПриОбновленииДанныхПоВремени()
	
	ОтключитьОбработчикОжидания("ОбработчикПриОбновленииДанныхПоВремени");
	
	// процедура обновления всех данных монитора
	ТаблицаДокументовВходящиеНакладные.Обновить();
	ТаблицаДокументовИсходящиеНакладные.Обновить();
	
	ТаблицаДокументовВходящиеЗаказы.Обновить();
	ТаблицаДокументовИсходящиеЗаказы.Обновить();
	
	ТаблицаДокументовВходящиеТовары.Обновить();
	ТаблицаДокументовИсходящиеТовары.Обновить();	
	
	ТаблицаВходящихИзвещений.Обновить();
	ТаблицаИсходящихИзвещений.Обновить();
	
	ТаблицаДокументовВходящиеСчетаФактуры.Обновить();
	ТаблицаДокументовИсходящиеСчетаФактуры.Обновить();
	
	ОбновитьСтатистикуНеРассмотренности();
	СпозиционироватьсяПоследниеНаИзвещения();
	
	Если АвтоматическиОбновлятьДанныеЧерезИнтервал > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикПриОбновленииДанныхПоВремени", АвтоматическиОбновлятьДанныеЧерезИнтервал);	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик изменения данных в поле значения отбора
//
Процедура ПолеНастройки1ПриИзменении(Элемент)

	УправлениеОтчетами.ПолеНастройкиПриИзменении(Элемент, мТекущаяТаблицаРедактирования.Отбор);
	
КонецПроцедуры

// Процедура - обработчик изменения данных в поле выбора вида сравнения
//
Процедура ПолеВидаСравнения1ПриИзменении(Элемент)

	УправлениеОтчетами.ПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы);
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеЗаказыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивВходящих = Новый Массив();
	
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаДанных.ДанныеСтроки;
		
		ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ВходящийЗаказ") Тогда
			
			МассивВходящих.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВходящих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходящийРеджектАкцептЗаказа.ИсходныйДокумент КАК Ссылка,
	               |	Максимум(ИсходящийРеджектАкцептЗаказа.Акцептовать) КАК Акцептовать
	               |ИЗ
	               |	Документ.ИсходящийРеджектАкцептЗаказа КАК ИсходящийРеджектАкцептЗаказа
				   |ГДЕ
				   |	ИсходящийРеджектАкцептЗаказа.ИсходныйДокумент В (&МассивДок)
				   |	И ИсходящийРеджектАкцептЗаказа.ПометкаУдаления = Ложь
				   |	И ИсходящийРеджектАкцептЗаказа.Отправлен = Истина
				   |Сгруппировать по ИсходящийРеджектАкцептЗаказа.ИсходныйДокумент";
				   
	Запрос.УстановитьПараметр("МассивДок", МассивВходящих);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");		
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаДанных.ДанныеСтроки.Ссылка, "Ссылка");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если СтрокаТаблицы.Акцептовать Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 2;
			Иначе
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеСчетаФактурыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивВходящих = Новый Массив();
	
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаДанных.ДанныеСтроки;
		
		ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ВходящийСчетФактура") Тогда
			
			МассивВходящих.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВходящих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходящийРеджектАкцептСчетаФактуры.ИсходныйДокумент КАК Ссылка,
	               |	МАКСИМУМ(ИсходящийРеджектАкцептСчетаФактуры.Акцептовать) КАК Акцептовать
	               |ИЗ
	               |	Документ.ИсходящийРеджектАкцептСчетаФактуры КАК ИсходящийРеджектАкцептСчетаФактуры
	               |ГДЕ
	               |	ИсходящийРеджектАкцептСчетаФактуры.ИсходныйДокумент В(&МассивДок)
	               |	И ИсходящийРеджектАкцептСчетаФактуры.ПометкаУдаления = ЛОЖЬ
	               |	И ИсходящийРеджектАкцептСчетаФактуры.Отправлен = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ИсходящийРеджектАкцептСчетаФактуры.ИсходныйДокумент";
				   
	Запрос.УстановитьПараметр("МассивДок", МассивВходящих);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");		
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаДанных.ДанныеСтроки.Ссылка, "Ссылка");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если СтрокаТаблицы.Акцептовать Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 2;
			Иначе
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеЗаказыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивИсходящих = Новый Массив();
		
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаДанных.ДанныеСтроки;
		
		ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ИсходящийЗаказ") Тогда
			
			МассивИсходящих.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивИсходящих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "Выбрать
				   |    Максимум(Вложенная.ЕстьАкцепт) КАК ЕстьАкцепт,
				   |	Максимум(Вложенная.ЕстьРеджект) КАК ЕстьРеджект,
				   |	Вложенная.Исходный КАК Ссылка 
				   |
				   |ИЗ
				   |(ВЫБРАТЬ
				   |	
				   |	1 ЕстьАкцепт,
				   |	0 ЕстьРеджект,
				   |	ВходящийАкцепт.ИсходныйДокумент КАК Исходный
				   |ИЗ
				   |	Документ.ВходящийАкцептЗаказа КАК ВходящийАкцепт
				   |ГДЕ ВходящийАкцепт.ИсходныйДокумент В (&МассивДок)
				   |	И ВходящийАкцепт.ПометкаУдаления = Ложь
				   |
				   |Объединить ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	0 ЕстьАкцепт,
				   |	1 ЕстьРеджект,
				   |	ВходящийРеджект.ИсходныйДокумент КАК Исходный
				   |ИЗ
				   |	Документ.ВходящийРеджектЗаказа КАК ВходящийРеджект
				   |ГДЕ ВходящийРеджект.ИсходныйДокумент В (&МассивДок)
				   |	И ВходящийРеджект.ПометкаУдаления = Ложь) КАК Вложенная
				   |
				   |Сгруппировать По Вложенная.Исходный";
				   
	Запрос.УстановитьПараметр("МассивДок", МассивИсходящих);
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");
		
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаДанных.ДанныеСтроки.Ссылка, "Ссылка");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если СтрокаТаблицы.ЕстьАкцепт Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 2;
			ИначеЕсли СтрокаТаблицы.ЕстьРеджект Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеСчетаФактурыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивИсходящих = Новый Массив();
		
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаДанных.ДанныеСтроки;
		
		ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ИсходящийСчетФактура") Тогда
			
			МассивИсходящих.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивИсходящих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(Вложенная.ЕстьАкцепт) КАК ЕстьАкцепт,
	               |	МАКСИМУМ(Вложенная.ЕстьРеджект) КАК ЕстьРеджект,
	               |	Вложенная.Исходный КАК Ссылка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		1 КАК ЕстьАкцепт,
	               |		0 КАК ЕстьРеджект,
	               |		ВходящийАкцепт.ИсходныйДокумент КАК Исходный
	               |	ИЗ
	               |		Документ.ВходящийАкцептСчетаФактуры КАК ВходящийАкцепт
	               |	ГДЕ
	               |		ВходящийАкцепт.ИсходныйДокумент В(&МассивДок)
	               |		И ВходящийАкцепт.ПометкаУдаления = ЛОЖЬ
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		0,
	               |		1,
	               |		ВходящийРеджект.ИсходныйДокумент
	               |	ИЗ
	               |		Документ.ВходящийРеджектСчетаФактуры КАК ВходящийРеджект
	               |	ГДЕ
	               |		ВходящийРеджект.ИсходныйДокумент В(&МассивДок)
	               |		И ВходящийРеджект.ПометкаУдаления = ЛОЖЬ) КАК Вложенная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Вложенная.Исходный";
				   
	Запрос.УстановитьПараметр("МассивДок", МассивИсходящих);
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");
		
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаДанных.ДанныеСтроки.Ссылка, "Ссылка");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если СтрокаТаблицы.ЕстьАкцепт Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 2;
			ИначеЕсли СтрокаТаблицы.ЕстьРеджект Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УстановитНеобходимыеПараметрыУТаблицы(Таблица)
	
	Таблица.Колонки.Добавить("ОбработанОтправлен");
	Таблица.Порядок.Установить("Дата Убыв");
	
КонецПроцедуры

Процедура ТаблицаДокументовВходящиеНакладныеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивВходящих = Новый Массив();
	
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаДанных.ДанныеСтроки;
		
		ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ВходящаяЭлектроннаяНакладная") Тогда
			
			МассивВходящих.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВходящих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсходящийРеджектАкцепт.ИсходныйДокумент КАК Ссылка,
	               |	Максимум(ИсходящийРеджектАкцепт.Акцептовать) КАК Акцептовать
	               |ИЗ
	               |	Документ.ИсходящийРеджектАкцептНакладной КАК ИсходящийРеджектАкцепт
				   |ГДЕ
				   |	ИсходящийРеджектАкцепт.ИсходныйДокумент В (&МассивДок)
				   |	И ИсходящийРеджектАкцепт.ПометкаУдаления = Ложь
				   |	И ИсходящийРеджектАкцепт.Отправлен = Истина
				   |Сгруппировать по ИсходящийРеджектАкцепт.ИсходныйДокумент";
				   
	Запрос.УстановитьПараметр("МассивДок", МассивВходящих);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");		
	
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаДанных.ДанныеСтроки.Ссылка, "Ссылка");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если СтрокаТаблицы.Акцептовать Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 2;
			Иначе
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаДокументовИсходящиеНакладныеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	МассивИсходящих = Новый Массив();
		
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаДанных.ДанныеСтроки;
		
		ТипСсылки = ТипЗнч(ДанныеСтроки.Ссылка);
		Если ТипСсылки = Тип("ДокументСсылка.ИсходящаяЭлектроннаяНакладная") Тогда
			
			МассивИсходящих.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивИсходящих.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "Выбрать
				   |    Максимум(Вложенная.ЕстьАкцепт) КАК ЕстьАкцепт,
				   |	Максимум(Вложенная.ЕстьРеджект) КАК ЕстьРеджект,
				   |	Вложенная.Исходный КАК Ссылка 
				   |
				   |ИЗ
				   |(ВЫБРАТЬ
				   |	
				   |	1 ЕстьАкцепт,
				   |	0 ЕстьРеджект,
				   |	ВходящийАкцепт.ИсходныйДокумент КАК Исходный
				   |ИЗ
				   |	Документ.ВходящийАкцептНакладной КАК ВходящийАкцепт
				   |ГДЕ ВходящийАкцепт.ИсходныйДокумент В (&МассивДок)
				   |	И ВходящийАкцепт.ПометкаУдаления = Ложь
				   |
				   |Объединить ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	0 ЕстьАкцепт,
				   |	1 ЕстьРеджект,
				   |	ВходящийРеджект.ИсходныйДокумент КАК Исходный
				   |ИЗ
				   |	Документ.ВходящийРеджектНакладной КАК ВходящийРеджект
				   |ГДЕ ВходящийРеджект.ИсходныйДокумент В (&МассивДок)
				   |	И ВходящийРеджект.ПометкаУдаления = Ложь) КАК Вложенная
				   |
				   |Сгруппировать По Вложенная.Исходный";
				   
	Запрос.УстановитьПараметр("МассивДок", МассивИсходящих);
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("Ссылка");
		
	Если ТаблицаРезультата.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаДанных Из ОформленияСтрок Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаДанных.ДанныеСтроки.Ссылка, "Ссылка");
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если СтрокаТаблицы.ЕстьАкцепт Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 2;
			ИначеЕсли СтрокаТаблицы.ЕстьРеджект Тогда
				СтрокаДанных.Ячейки.НомерКартинки.Значение = 3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьСтатусОбработкиУспешен(СтатусОбработки)
	
	Возврат (СтатусОбработки = "E_success"
		ИЛИ СтатусОбработки = "E_successMediator");
	
КонецФункции

Процедура ТаблицаВходящихИзвещенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОпределитьСтатусОбработкиУспешен(ДанныеСтроки.СтатусОбработки) Тогда
		
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 2;
		
	Иначе
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 3;
				
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.КартинкаДокумента.ОтображатьКартинку = Истина;
	
КонецПроцедуры

Процедура ТаблицаВходящихИзвещенийПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТаблицаИсходящихИзвещенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОпределитьСтатусОбработкиУспешен(ДанныеСтроки.СтатусОбработки) Тогда
		
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 2;
		
	Иначе
		ОформлениеСтроки.Ячейки.КартинкаДокумента.ИндексКартинки = 3;
				
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.КартинкаДокумента.ОтображатьКартинку = Истина;		
	
КонецПроцедуры

Процедура ТаблицаИсходящихИзвещенийПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовВходящиеНакладные);
УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовИсходящиеНакладные);

УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовВходящиеЗаказы);
УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовИсходящиеЗаказы);

УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовВходящиеСчетаФактуры);
УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовИсходящиеСчетаФактуры);

УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовВходящиеТовары);
УстановитНеобходимыеПараметрыУТаблицы(ТаблицаДокументовИсходящиеТовары);

ТаблицаВходящихИзвещений.Колонки.Добавить("СтатусОбработки");
ТаблицаВходящихИзвещений.Порядок.Установить("Дата Убыв");

ТаблицаИсходящихИзвещений.Колонки.Добавить("СтатусОбработки");
ТаблицаИсходящихИзвещений.Порядок.Установить("Дата Убыв");

мЖирныйШрифт = Новый Шрифт(, , Истина);
мСтатистикаНеРассмотренности = Новый Соответствие;

мТекущийЭлементРедактирования = Неопределено;
мТекущаяТаблицаРедактирования = Неопределено;

мТекущийИсходныйДокумент = Неопределено;
мТекущийОтветДокумент = Неопределено;
