////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит исходное значение флага "Показывать при запуске".
Перем ПрежнееЗначение_ПоказыватьПриЗапуске;

// Соответствие URL макетам для определения текущей страницы.
Перем СоответствиеURLМакетам;

// Список доступных страниц.
Перем СписокСтраниц;

// Текущая отображаемая страница.
Перем ТекущийМакет;

// Признак отображения колонки "Содержание".
Перем ПоказыватьСодержание;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Преобразовывает web-строку в обычную.
//
Функция ПодготовитьСтроку(Строка)
	
	Стр = Строка;
	
	Стр = СтрЗаменить(Стр, "%20", " ");
	Стр = СтрЗаменить(Стр, """", """""");
	
	Возврат Стр;
	
КонецФункции // ПодготовитьСтроку()

// Генерирует код начала HTML страницы.
//
Функция ЗаголовокСтраницы()

	Возврат
	"<html>
	|<head>  
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<style type=text/css>
	|
	|body {
	|	margin: 8px;
	|	background-color: #FFFBF0;
	|}
	|
	|a:visited {color: #3366FF}
	|a:active {color: #3366FF}
	|a:link {color: #3366FF}
	|a:hover {color: #3366FF}
	|
	|.item {
	|	font-family: ""MS Shell Dlg"";
	|	font-size: 8pt;
	|	margin: 4px 0px 8px 0px;
	|	color: #000000;
	|}
	|
	|.group {
	|	font-weight: bold;
	|	margin: 12px 0px 12px 8px;
	|	color: #898477;
	|}
	|
	|.description {
	|	color: #000080;
	|}
	|
	|</style>
	|</head>
	|<body scroll=""auto""> 
	|";

КонецФункции // ЗаголовокСтраницы()

// Генерирует код завершения HTML страницы.
//
Функция ЗавершениеСтраницы()

	Возврат "</body></html>" + Символы.ПС;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Управление видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.КоманднаяПанель.Кнопки.Содержание.Пометка = ПоказыватьСодержание;
	
	Если ПоказыватьСодержание Тогда
	
		ЭлементыФормы.Разделитель.Свертка      = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельСодержания.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево,
		                                             ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
													 
		ЭлементыФормы.ПанельСодержания.УстановитьПривязку(ГраницаЭлементаУправления.Право,
		                                                  ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Лево);
		
	Иначе 
														  
		ЭлементыФормы.ПанельСодержания.УстановитьПривязку(ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево,
		                                             ЭлементыФормы.ПанельСодержания, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.ПанельСодержания.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.Разделитель.Свертка      = РежимСверткиЭлементаУправления.Лево;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	// Построение списка страниц и соответствия макетов HTML их URL.
	СоответствиеURLМакетам = Новый Соответствие;
	СписокСтраниц = Новый СписокЗначений;
	ТекстСодержания = "";
	Для Каждого Макет Из ОбработкаОбъект.Метаданные().Макеты Цикл
		
		СписокСтраниц.Добавить(Макет, Макет.Синоним);
		
		URLМакета = ЭлементыФормы.ПолеHTMLДокумента.ПолучитьURL(Макет);
		СоответствиеURLМакетам.Вставить(URLМакета, Макет);
		
		ТекстСодержания = ТекстСодержания + "<div id=""" + Макет.Имя + """ class=""item""><a href=""" + URLМакета+ """>" + Макет.Синоним + "</a></div>";
		
	КонецЦикла;
	ЭлементыФормы.ПолеСодержания.УстановитьТекст(ЗаголовокСтраницы() + ТекстСодержания + ЗавершениеСтраницы());
	
	// Восстановление сохраненных настроек.
	БыстроеОсвоение_ИмяТекущегоМакета = ВосстановитьЗначение("БыстроеОсвоение_ИмяТекущегоМакета");
	Если БыстроеОсвоение_ИмяТекущегоМакета = Неопределено Тогда
		ТекущийМакет = СписокСтраниц[0].Значение;
	Иначе
		Макет = ОбработкаОбъект.Метаданные().Макеты.Найти(БыстроеОсвоение_ИмяТекущегоМакета);
		Если Макет = Неопределено Тогда
			ТекущийМакет = СписокСтраниц[0].Значение;
		Иначе
			ТекущийМакет = Макет;
		КонецЕсли;
	КонецЕсли;
	
	БыстроеОсвоение_ПоказыватьСодержание = ВосстановитьЗначение("БыстроеОсвоение_ПоказыватьСодержание");
	Если БыстроеОсвоение_ПоказыватьСодержание = Неопределено Тогда
		ПоказыватьСодержание = Истина;
	Иначе
		ПоказыватьСодержание = БыстроеОсвоение_ПоказыватьСодержание;
	КонецЕсли;
	
	ПоказыватьПриЗапуске = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы");
	ПрежнееЗначение_ПоказыватьПриЗапуске = ПоказыватьПриЗапуске;
	
	// Установка видимости элементов формы.
	УстановитьВидимость();
	
	// Открытие текущей страницы в форме.
	ЭлементыФормы.ПолеHTMLДокумента.Перейти(ТекущийМакет);
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	// Сохранение настроек.
	СохранитьЗначение("БыстроеОсвоение_ИмяТекущегоМакета",    ТекущийМакет.Имя);
	СохранитьЗначение("БыстроеОсвоение_ПоказыватьСодержание", ПоказыватьСодержание);
	
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьБыстроеОсвоениеПриНачалеРаботыСистемы", ПоказыватьПриЗапуске);
	
	Если ПрежнееЗначение_ПоказыватьПриЗапуске И НЕ ПоказыватьПриЗапуске Тогда
		ФормаПолезнойИнформации = ОбработкаОбъект.ПолучитьФорму("ФормаПолезнойИнформации");
		ФормаПолезнойИнформации.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия на кнопку "Содержание" командной панели формы.
//
Процедура КоманднаяПанельСодержание(Кнопка)
	
	ПоказыватьСодержание = НЕ ПоказыватьСодержание;
	
	УстановитьВидимость();
	
КонецПроцедуры // КоманднаяПанельСодержание()

// Обработчик нажатия на кнопку "Следующий раздел" командной панели формы.
//
Процедура КоманднаяПанельСледующийРаздел(Кнопка)
	
	ИндексТекущегоРаздела = СписокСтраниц.Индекс(СписокСтраниц.НайтиПоЗначению(ТекущийМакет));
	
	Если НЕ (СписокСтраниц.Количество() = (ИндексТекущегоРаздела + 1)) Тогда
		ЭлементыФормы.ПолеHTMLДокумента.Перейти(СписокСтраниц[ИндексТекущегоРаздела + 1].Значение);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельСледующийРаздел()

// Обработчик нажатия на кнопку "Предыдущий раздел" командной панели формы.
//
Процедура КоманднаяПанельПредыдущийРаздел(Кнопка)
	
	ИндексТекущегоРаздела = СписокСтраниц.Индекс(СписокСтраниц.НайтиПоЗначению(ТекущийМакет));
	
	Если НЕ (ИндексТекущегоРаздела = 0) Тогда
		ЭлементыФормы.ПолеHTMLДокумента.Перейти(СписокСтраниц[ИндексТекущегоРаздела - 1].Значение);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельПредыдущийРаздел()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Обработчик события "ДокументСформирован" поля HTML документа.
//
Процедура ПолеHTMLДокументаДокументСформирован(Элемент)
	
	Если Элемент.Документ.url = "about:blank" Тогда
		Возврат;
	КонецЕсли;
	
	// Снимаем выделение в содержании.
	Если ЭлементыФормы.КоманднаяПанель.Кнопки.Содержание.Пометка Тогда
		Для Каждого ЭлементHTML Из ЭлементыФормы.ПолеСодержания.Документ.body.childNodes Цикл
			Если Нрег(ЭлементHTML.className) = "item" Тогда
				ЭлементHTML.style.fontWeight = "normal";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Определяем текущую страницу в списке и устанавливаем доступность кнопок.
	ТекущийМакет = СоответствиеURLМакетам.Получить(Элемент.Документ.url);
	Если НЕ (ТекущийМакет = Неопределено) Тогда
		
		ЭлементыФормы.ПолеСодержания.Документ.all[ТекущийМакет.Имя].style.fontWeight = "bold";
		
		ИндексТекущегоРаздела = СписокСтраниц.Индекс(СписокСтраниц.НайтиПоЗначению(ТекущийМакет));
		
		ЭлементыФормы.КоманднаяПанель.Кнопки.СледующийРаздел.Доступность  = НЕ (СписокСтраниц.Количество() = (ИндексТекущегоРаздела + 1));
		ЭлементыФормы.КоманднаяПанель.Кнопки.ПредыдущийРаздел.Доступность = НЕ (ИндексТекущегоРаздела = 0);
		
	Иначе
		
		ЭлементыФормы.КоманднаяПанель.Кнопки.СледующийРаздел.Доступность  = Ложь;
		ЭлементыФормы.КоманднаяПанель.Кнопки.ПредыдущийРаздел.Доступность = Ложь;
		
	КонецЕсли;

КонецПроцедуры // ПолеHTMLДокументаДокументСформирован()

// Обработчик события "onclick" поля HTML документа.
// Обрабатывает нажатие мышью на ссылки.
//
Процедура ПолеHTMLДокументаonclick(Элемент, pEvtObj)
	
		
	htmlElement = pEvtObj.srcElement;

	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;

	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Позиция = Найти(htmlElement.href, "Выполнить=");

	Если Позиция > 0 Тогда
		
		Попытка
			Выполнить(Сред(ПодготовитьСтроку(htmlElement.href), Позиция + 10));
		Исключение
			Предупреждение("При выполнении действия произошла ошибка!")
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		Возврат;

	КонецЕсли;	
	
	Если htmlElement.protocol = "http:" Тогда
		
		ЗапуститьПриложение(ПодготовитьСтроку(htmlElement.href));
		
		pEvtObj.returnValue = Ложь;
		Возврат;
		
	КонецЕсли;
	

	
КонецПроцедуры // ПолеHTMLДокументаonclick()

// Обработчик события "ondragstart" поля HTML документа.
// Обрабатывает начало перетаскивания.
//
Процедура ПолеHTMLДокументаondragstart(Элемент, pEvtObj)
	
	Если НЕ pEvtObj.srcElement = Неопределено И НРег(pEvtObj.srcElement.tagName) = "img" Тогда

		pEvtObj.returnValue = Ложь;

	КонецЕсли;
	
КонецПроцедуры // ПолеHTMLДокументаondragstart()

// Обработчик события "onclick" поля HTML документа.
// Обрабатывает нажатие мышью на ссылки.
//
Процедура ПолеСодержанияonclick(Элемент, pEvtObj)
	
	htmlElement = pEvtObj.srcElement;

	pEvtObj.returnValue = Ложь;
	
	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;

	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПолеHTMLДокумента.Перейти(htmlElement.href);
	
КонецПроцедуры // ПолеСодержанияonclick()

// Обработчик события "ondragstart" поля содержания.
// Обрабатывает начало перетаскивания.
//
Процедура ПолеСодержанияondragstart(Элемент, pEvtObj)
	
	Если НЕ pEvtObj.srcElement = Неопределено И НРег(pEvtObj.srcElement.tagName) = "img" Тогда

		pEvtObj.returnValue = Ложь;

	КонецЕсли;
	
КонецПроцедуры // ПолеСодержанияondragstart()
