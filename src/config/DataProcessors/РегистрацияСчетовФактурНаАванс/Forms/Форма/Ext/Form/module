Перем МетаданныеПоТипам;
Перем СуммаСтарая;

Процедура ПроверкаЗаполненияТабличнойЧасти(Отказ)
	
	//Ключ - название реквизита, значение - останавливать обработку, если значение не заполнено 
	СтруктураОбязательныхПолей = новый структура("Контрагент, ДоговорКонтрагента, ДокументОснование, Сумма, СтавкаНДС, ВалютаДокумента, ВалютнаяСумма");
	
	КолонкиСписка = Список.ВыгрузитьКолонки();
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из Список Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " : ";
		
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				ПредставлениеРеквизита = КолонкиСписка.Колонки[КлючЗначение.Ключ].Заголовок;
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				
				Если КлючЗначение.Ключ = "ВалютаДокумента" Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументОснование) Тогда
						Если ТипЗнч(СтрокаТаблицы.ДокументОснование)= Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
							ВалютаДокумента = мВалютаРегламентированногоУчета;
						Иначе
							ВалютаДокумента  = ОпределитьВалютуДокумента(СтрокаТаблицы.ДокументОснование);
						КонецЕсли;
						СтрокаСообщения = СтрокаСообщения+Символы.ПС+"Установлена валюта из документа основания ("+ВалютаДокумента+").";
						СтрокаТаблицы.ВалютаДокумента = ВалютаДокумента;
					КонецЕсли; 
				ИначеЕсли  КлючЗначение.Ключ = "ВалютнаяСумма" Тогда
					Если СтрокаТаблицы.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
						СтрокаТаблицы.ВалютнаяСумма = СтрокаТаблицы.Сумма;
						//Можно правильно установить валютную сумму, остатновка обработки не требуется.
						Продолжить;
					КонецЕсли; 
				ИначеЕсли КлючЗначение.Ключ = "ДоговорКонтрагента" 
					И ТипЗнч(СтрокаТаблицы.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					// Проверка договора для счетов-фактур на аванс по отчету комиссионера не осуществляется
					Продолжить;
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент)
	
	//Если табличная часть заполнена неправильно - высокая вероятность вызникновения ошибки при формировании вычета!
	Отказ = Ложь;
	ПроверкаЗаполненияТабличнойЧасти(Отказ);
	
	Если Отказ Тогда
		Предупреждение("Некорректно заполнен список авансов для формирования счетов-фактур. Обработка остановлена");
		Для Каждого Строка Из Список Цикл
			Строка.СФсформирован = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	НеиспользуемыеСчетаФактуры = ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод();
	
	Если НеиспользуемыеСчетаФактуры.Количество() > 0 Тогда
		Ответ = Вопрос("По организации обнаружены счета-фактуры на аванс за обрабатываемый период,
		|которые не используются в списке счетов-фактур к регистрации (значение поля ""Счет-фактура"" по строке).
		|Номера найденных документов могут быть использованы для тех строк, у которых не установлен соответствующий
		|строке счет-фактура. 
		|Использовать номера ранее зарегистрированных счетов-фактур?
		| 
		|Да - Использовать номера обнаруженных счетов-фактур, неиспользованные пометить на удаление
		|Нет - Оставить обнаруженные счета-фактуры без изменений, продолжить процедуру регистрации
		|Отмена - Отменить формирование счетов-фактур на аванс", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Сообщить("Регистрация счетов-фактур на аванс отменена пользователем.", СтатусСообщения.Информация);
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			// В текущем цикле помечаем документы на удаление. Использование документов 
			// будет выполняться далее, непосредственно в процессе регистрации счетов-фактур
			Для каждого Документ Из НеиспользуемыеСчетаФактуры Цикл
				Если не Документ.ПометкаУдаления тогда
					ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЦикла; 
		Иначе
			НеиспользуемыеСчетаФактуры.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОшибки = ложь;
	СформироватьСчетаФактуры(НеиспользуемыеСчетаФактуры, ЕстьОшибки);
	
КонецПроцедуры

// Определение валюты документа-основания
//
// Параметры
//  Ссылка  – 	<ДокументСсылка> – Ссылка на документ-основание
//
// Возвращаемое значение:
//   <СправочникСсылка.Валюта>   – валюта документа, если в документе валюта не указывается - валюта регл. учета
//
Функция ОпределитьВалютуДокумента(Ссылка)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат мВалютаРегламентированногоУчета;
	КонецЕсли; 
	
	МетаданныеОснования = МетаданныеПоТипам[ТипЗнч(Ссылка)];
	Если МетаданныеОснования = неопределено Тогда
		МетаданныеОснования = Ссылка.Метаданные();
		МетаданныеПоТипам.Вставить(ТипЗнч(Ссылка),МетаданныеОснования);
	КонецЕсли; 
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеОснования) тогда
		Если ЗначениеЗаполнено(Ссылка.ВалютаДокумента) Тогда
			ВалютаПоДокументу = Ссылка.ВалютаДокумента;
		Иначе
			//Незаполненное значение приравнивается к валюте регл. учета
			ВалютаПоДокументу = мВалютаРегламентированногоУчета;	
		КонецЕсли; 
		
	Иначе
		ВалютаПоДокументу = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Возврат ВалютаПоДокументу;
	
КонецФункции // ОпределитьВалютуДокумента()

Процедура ВыбПериодНажатие(Элемент)
	
	РаботаСДиалогами.ОбработчикНастройкаПериодаНажатие(НачалоПериода, КонецПериода);
	
КонецПроцедуры

Процедура КоманднаяПанельЗаполнить(Кнопка)
	
	Отказ = Ложь;
	СообщениеОбОшибке = "Регистрация не выполнена.";
	АктивизироватьЭлемент = неопределено;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана организация";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.Организация;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата начала заполнения";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.НачалоПериода;
		КонецЕсли; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - не указана дата окончания заполнения";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.КонецПериода;
		КонецЕсли; 
	КонецЕсли;
	
	Если НачалоПериода > КонецПериода Тогда
		СообщениеОбОшибке = СообщениеОбОшибке+Символы.ПС+" - дата начала заполнения больше даты окончания";
		Отказ = Истина;
		Если АктивизироватьЭлемент = неопределено Тогда
			АктивизироватьЭлемент = ЭлементыФормы.НачалоПериода;
		КонецЕсли; 
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(СообщениеОбОшибке);
		ТекущийЭлемент = АктивизироватьЭлемент; 
		Возврат;
	КонецЕсли; 
	
	Если Список.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ЗаполнитьДокумент();
	
КонецПроцедуры

//Пересчет суммы НДС и валютной суммы при изменении суммы регл.
Процедура СписокСуммаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.Список.ТекущиеДанные;
	Если не ТД = Неопределено  Тогда
		
		ПересчетНДСиВалютнойСуммыПоСтроке(ТД, Истина,СуммаСтарая);
		
		СуммаСтарая = ТД.Сумма;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель1СписокСчетовФактур(Кнопка)
	
	Форма = Документы.СчетФактураВыданный.ПолучитьФорму("ФормаСписка",,);
	Форма.ДокументСписок.Отбор.ВидСчетаФактуры.Установить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	Форма.ДокументСписок.Отбор.Организация.Установить(Организация);
	
	Если НачалоПериода = '00010101'и КонецПериода = '00010101' Тогда
		//Отбор не требуется
		Форма.ДокументСписок.Отбор.Дата.Использование = Ложь;
	Иначе
		Если НачалоПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = КонецДня(КонецПериода);
		ИначеЕсли КонецПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = НачалоПериода;
		Иначе
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеС = НачалоПериода;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеПо= КонецДня(КонецПериода);
		КонецЕсли; 
		Форма.ДокументСписок.Отбор.Дата.Использование = Истина;
	КонецЕсли; 
	Форма.Открыть();
	
КонецПроцедуры

// Зачистка табличной части при смене организации
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Список.Количество() > 0 Тогда
		Ответ = Вопрос("При смене организации необходимо очистить табличную часть. Очистить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Список.Очистить();
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриОткрытии()
	
	Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	
	УчетнаяПолитикаНУ = Неопределено;
	НачалоПериода = ?(ТекущаяДата() >= '20090101', ТекущаяДата(), УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, РабочаяДата, , УчетнаяПолитикаНУ));
	КонецПериода = ?(ТекущаяДата() >= '20090101', ТекущаяДата(), УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, РабочаяДата, , УчетнаяПолитикаНУ));
	
	мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода, УчетнаяПолитикаНУ);
	мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода, , УчетнаяПолитикаНУ);
	мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	мОтдельнаяНумерацияСчетовФактурНаАванс = УчетНДС.ПредставлениеНумерацииСчетовФактурНаАванс(Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить());
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.НадписьПорядокРегистрацииСчетовФактурНаАванс.Заголовок = мПорядокРегистрацииСчетовФактурНаАванс;
	ЭлементыФормы.ОтдельнаяНумерацияСчетовФактурНаАванс.Заголовок = мОтдельнаяНумерацияСчетовФактурНаАванс;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
		мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
		мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	ИначеЕсли ИмяСобытия = "НастройкаПараметровУчетаИзменена" Тогда
		мОтдельнаяНумерацияСчетовФактурНаАванс = УчетНДС.ПредставлениеНумерацииСчетовФактурНаАванс(Константы.ОтдельнаяНумерацияСчетовФактурНаАванс.Получить());
	КонецЕсли;
	
КонецПроцедуры

Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НачалоПериода > КонецПериода Тогда
		КонецПериода = НачалоПериода;
		мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
		мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
		мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонецПериодаПриИзменении(Элемент)
	
	Если КонецПериода < НачалоПериода Тогда
		НачалоПериода = КонецПериода;
	КонецЕсли;
	
	мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
	мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
	мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
	мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
	мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);

КонецПроцедуры

Процедура НадписьПорядокРегистрацииСчетовФактурНаАвансНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(КонецПериода) Тогда
		Выборка = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.Выбрать(, КонецПериода, Новый Структура("Организация", Организация), "Убыв");
		Если Выборка.Следующий() Тогда
			МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.Прочитать();
			ФормаУчетнойПолитики = МенеджерЗаписи.ПолучитьФорму();
			ФормаУчетнойПолитики.ТекущийЭлемент = ФормаУчетнойПолитики.ЭлементыФормы.ПорядокРегистрацииСчетовФактурНаАванс;
			ФормаУчетнойПолитики.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при изенении документа-основания
// Производит определение валюты докумнта, возможно изменение валютной суммы
Процедура СписокДокументОснованиеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Дата) и ЗначениеЗаполнено(Элемент.Значение) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты", Элемент.Значение.Метаданные()) Тогда
			ТекущиеДанные.Дата = УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(Элемент.Значение.Дата,Элемент.Значение.ДатаОплаты);
		Иначе
			ТекущиеДанные.Дата = Элемент.Значение.Дата;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение)= Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ВалютаДокумента = мВалютаРегламентированногоУчета;
	Иначе
		ВалютаДокумента  = ОпределитьВалютуДокумента(Элемент.Значение);
	КонецЕсли;
	
	Если не ВалютаДокумента = ТекущиеДанные.ВалютаДокумента Тогда
		Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ТекущиеДанные.ВалютнаяСумма = ТекущиеДанные.Сумма;
		Иначе	
			ТекущиеДанные.ВалютнаяСумма = 0;
		КонецЕсли; 
	КонецЕсли; 
	
	ТекущиеДанные.ВалютаДокумента = ВалютаДокумента;
	
КонецПроцедуры

// При начале редактирования строки запоминает сумму по строке для пересчета валютной суммы в случае изменения суммы регл.
Процедура СписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТД = Элемент.ТекущиеДанные;
	СуммаСтарая = ТД.Сумма;
	
	Если НоваяСтрока и Копирование Тогда
		ТД.СчетФактура = Неопределено;
		ТД.СФсформирован = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = Элементыформы.Список.ТекущиеДанные;
	
	СтандартнаяОбработка  = Ложь;
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, НачалоПериода, КонецПериода", Организация, ТД.Контрагент, ТД.ДоговорКонтрагента, НачалоПериода, КонецДня(Конецпериода));
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура СписокДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СписокДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = ТекущиеДанные.ДоговорКонтрагента;
	Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах или Не ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) тогда
		ТекущиеДанные.ВалютаДокумента = мВалютаРегламентированногоУчета;
	Иначе
		Если не ТекущиеДанные.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			СуммаСтарая = 0;
		КонецЕсли; 
		ТекущиеДанные.ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	ПересчетНДСиВалютнойСуммыПоСтроке(ТекущиеДанные,Истина,СуммаСтарая);
	
КонецПроцедуры

Процедура СписокСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	Форма = Документы.СчетФактураВыданный.ПолучитьФорму("ФормаВыбора",Элемент,);
	Форма.ДокументСписок.Отбор.ВидСчетаФактуры.Установить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	Форма.ДокументСписок.Отбор.Организация.Установить(Организация);
	
	Если НачалоПериода = '00010101'и КонецПериода = '00010101' Тогда
		//Отбор не требуется
		Форма.ДокументСписок.Отбор.Дата.Использование = Ложь;
	Иначе
		Если НачалоПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = КонецДня(КонецПериода);
		ИначеЕсли КонецПериода = '00010101' Тогда
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			Форма.ДокументСписок.Отбор.Дата.Значение = НачалоПериода;
		Иначе
			Форма.ДокументСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеС = НачалоПериода;
			Форма.ДокументСписок.Отбор.Дата.ЗначениеПо= КонецДня(КонецПериода);
		КонецЕсли; 
		Форма.ДокументСписок.Отбор.Дата.Использование = Истина;
	КонецЕсли; 
	Форма.РежимВыбора = Истина;
	Форма.МножественныйВыбор = Ложь;
	ТД = Элементыформы.Список.ТекущиеДанные;
	Если не ТД = неопределено и ЗначениеЗаполнено(ТД.СчетФактура) Тогда
		Форма.НачальноеЗначениеВыбора = ТД.СчетФактура;
	КонецЕсли; 
	Форма.Открыть();
КонецПроцедуры

Процедура СписокСтавкаНДСПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.Список.ТекущиеДанные;
	Если не ТД = Неопределено  Тогда
	
		ПересчетНДСиВалютнойСуммыПоСтроке(ТД, Ложь);

	КонецЕсли; 

КонецПроцедуры

Процедура СписокСчетНаОплатуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;

	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные;
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураПараметров, "Список");
	
КонецПроцедуры

Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	КонецНалоговогоПериода = ПолучитьКонецНалоговогоПериодаПоДате(ДанныеСтроки.ДатаДокументаОснования);
	
	Если ДанныеСтроки.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы 
		И (ДанныеСтроки.Дата > КонецНалоговогоПериода 
		Или ДанныеСтроки.Дата - ДанныеСтроки.ДатаДокументаОснования > 4 * 86400) Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ДанныеСтроки.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней 
		И (КонецМесяца(ДанныеСтроки.Дата) > КонецМесяца(КонецНалоговогоПериода)
		Или ДанныеСтроки.Дата - ДанныеСтроки.ДатаДокументаОснования > 4 * 86400) Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ДанныеСтроки.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца 
		И КонецМесяца(ДанныеСтроки.Дата) > КонецМесяца(ДанныеСтроки.ДатаДокументаОснования) Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	ИначеЕсли ДанныеСтроки.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода 
		И КонецМесяца(ДанныеСтроки.Дата) > КонецМесяца(КонецНалоговогоПериода) Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
	Иначе
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		ОформлениеСтроки.Ячейки.Договор.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.Договор.Текст = "<Комиссия>";
	КонецЕсли;

КонецПроцедуры

Процедура ОтдельнаяНумерацияСчетовФактурНаАвансНажатие(Элемент)
	ФормаНастройкаПараметровУчета = ПолучитьОбщуюФорму("НастройкаПараметровУчета", ЭтаФорма);
	ФормаНастройкаПараметровУчета.ЭлементыФормы.ПанельНастройкиУчета.ТекущаяСтраница = ФормаНастройкаПараметровУчета.ЭлементыФормы.ПанельНастройкиУчета.Страницы.НДС;
	ФормаНастройкаПараметровУчета.ТекущийЭлемент = ФормаНастройкаПараметровУчета.ЭлементыФормы.ЕдинаяНумерацияВсехВыданныхСчетовФактур;
	ФормаНастройкаПараметровУчета.Открыть();
КонецПроцедуры


// Хранит метаданные по типам документов для определения наличия реквизита "ВалютаДокумента" и проч. нужд.
МетаданныеПоТипам = Новый соответствие();

СуммаСтарая = 0;
