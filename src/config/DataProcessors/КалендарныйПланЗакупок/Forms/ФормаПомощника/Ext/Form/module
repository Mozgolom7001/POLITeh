// Дерево свойст и категорий контрагентов, которые используются для отборов
Перем мДеревоСвойстваКатегории;

// Запрос для заполнения данными конечной таблицы, в виде дерева
Перем мДеревоЗапросаРезультирующейТаблицы;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПолучитьНовуюСтруктуруДанных()

	НоваяСтруктура = Новый Соответствие;
	НоваяСтруктура.Вставить("ТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	НоваяСтруктура.Вставить("Цена", 0);
	НоваяСтруктура.Вставить("ЦенаУпр", 0);
	НоваяСтруктура.Вставить("МинимальнаяЦена", Ложь);
	НоваяСтруктура.Вставить("ОсновнойПоставщик", Ложь);
	НоваяСтруктура.Вставить("ЯчейкаНедоступна", Ложь);
	НоваяСтруктура.Вставить("ЯчейкаТолькоПросмотр", Ложь);
	НоваяСтруктура.Вставить("ОсобыеУсловияПоставки", Ложь);
	НоваяСтруктура.Вставить("ДоговорУсловийПоставки", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Возврат НоваяСтруктура;

КонецФункции // ПолучитьНовуюСтруктуруДанных()

// Функция определяет документ условий постави по договору взаиморасчетов
// для определенной ячейки грида и определенной цены
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   ДокументСсылка.УсловияПоДоговорамВзаиморасчетов
//
Функция ОпределитьДокументОсобыхУсловийПоставки()
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
	ИмяКолонки = ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя;
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки") Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ТекущаяДата"    , ТекущаяДата());
		Запрос.УстановитьПараметр("ВыбНоменклатура", ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.Номенклатура);
		Запрос.УстановитьПараметр("ВыбДоговор"     , ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки"));
		
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Регистратор
		|ИЗ
		|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре КАК УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре
		|ГДЕ
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Период <= &ТекущаяДата
		|	И
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Номенклатура = &ВыбНоменклатура
		|	И
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.ДоговорКонтрагента = &ВыбДоговор
		|
		|УПОРЯДОЧИТЬ ПО
		|	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.Период УБЫВ
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Регистратор;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецФункции // ОпределитьДокументОсобыхУсловийПоставки()

// Функция создает объекты ЗаказПоставщику изаполняет их данными, на основании
// настроек пользователя
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Функция ЗарегистрироватьЗаказы()
	
	мФормаПрогрессора.Открыть();
	
	МассивОбъектовЗаказов = Новый Массив;
	
	мФормаПрогрессора.КомментарийЗначения = "Создаются заказы ...";
	мФормаПрогрессора.МаксимальноеЗначение = КонечнаяТаблица.Количество() - 1;
	
	ТаблицаТоваровСвернутая = новый ТаблицаЗначений;
	ТаблицаТоваровСвернутая = ТаблицаТоваров.Скопировать();
	ТаблицаТоваровСвернутая.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Тара, ФлагИспользование","КоличествоЗаказать");
			

    //обход строк выполняем в два прохода
	//	первый - номенклатура с указанной характеристикой
	//	второй - номенклатура с пустой характеристикой
	Для НомерПрохода=1 по 2 цикл

	Для каждого Колонка из ЭлементыФормы.КонечнаяТаблица.Колонки Цикл
			
		Если Колонка.Имя = "НоменклатураПредставление" Тогда
			
			Продолжить;
			
		КонецЕсли; 
				
		ВременнаяТаблицаТоваров = Новый ТаблицаЗначений;
		ВременнаяТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ЦенаУпрУчета", Новый ОписаниеТипов("Число"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ЦенаКонтрагента", Новый ОписаниеТипов("Число"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("ВалютаКонтрагента", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ВременнаяТаблицаТоваров.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
			
		ИмяКолонки = Колонка.Имя;
		

		Для каждого Строка из КонечнаяТаблица Цикл
				
			мФормаПрогрессора.Значение = КонечнаяТаблица.Индекс(Строка);
	
			Если НЕ Строка["Флаг" + Колонка.Имя] Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			Если Строка["СтруктураДанных" + ИмяКолонки].Получить("ЯчейкаНедоступна") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НомерПрохода = 1 И НЕ ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			Если НомерПрохода = 2 И ЗначениеЗаполнено(Строка.ХарактеристикаНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
		
			НоваяСтрокаТовара = ВременнаяТаблицаТоваров.Добавить();
			НоваяСтрокаТовара.Номенклатура = Строка.Номенклатура;
			НоваяСтрокаТовара.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			//НоваяСтрокаТовара.Тара = Строка.Тара;
			НоваяСтрокаТовара.Тара = Ложь;
			
			Если Строка["СтруктураДанных"+ ИмяКолонки]["ОсобыеУсловияПоставки"] Тогда
				
				НоваяСтрокаТовара.Договор = Строка["СтруктураДанных" + ИмяКолонки]["ДоговорУсловийПоставки"];
				НоваяСтрокаТовара.ЦенаКонтрагента = Строка["СтруктураДанных" + ИмяКолонки]["Цена"];
				НоваяСтрокаТовара.ЦенаУпрУчета = Строка["СтруктураДанных" + ИмяКолонки]["ЦенаУпр"];
				
				СтрокиДерева = мДеревоЗапросаРезультирующейТаблицы.Строки.НайтиСтроки(Новый Структура("Номенклатура, Контрагент, Договор", Строка.Номенклатура, ПолучитьПоставщикаПоИмениКолонки(ИмяКолонки), (Строка["СтруктураДанных" + ИмяКолонки]["ДоговорУсловийПоставки"])), Истина);
				
				Если СтрокиДерева.Количество() > 0 Тогда
					
					НоваяСтрокаТовара.ВалютаКонтрагента = СтрокиДерева[0].Валюта;
					НоваяСтрокаТовара.ЕдиницаИзмерения = СтрокиДерева[0].ЕдиницаИзмерения;
					
				КонецЕсли;
				
			Иначе
				СтрокиДерева = мДеревоЗапросаРезультирующейТаблицы.Строки.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Контрагент", Строка.Номенклатура, Строка.ХарактеристикаНоменклатуры, ПолучитьПоставщикаПоИмениКолонки(ИмяКолонки)), Истина);
				НайденнаяСтрока = Неопределено;
				
				Для каждого СтрокаДерева из СтрокиДерева Цикл
					
					Если СтрокаДерева.ЦенаУпрУчета = Строка["СтруктураДанных" + ИмяКолонки]["ЦенаУпр"]
					   И НЕ СтрокаДерева.ОсобыеУсловияПоставки
					   И СтрокаДерева.ТипЦены = Строка["СтруктураДанных" + ИмяКолонки]["ТипЦен"] Тогда
					   
						НайденнаяСтрока = СтрокаДерева;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НайденнаяСтрока <> Неопределено Тогда
					
					НоваяСтрокаТовара.ЦенаУпрУчета = Строка["СтруктураДанных" + ИмяКолонки]["ЦенаУпр"];
					НоваяСтрокаТовара.ЦенаКонтрагента = Строка["СтруктураДанных" + ИмяКолонки]["Цена"];
					НоваяСтрокаТовара.Договор = НайденнаяСтрока.Договор;
					НоваяСтрокаТовара.ВалютаКонтрагента = НайденнаяСтрока.Валюта;
					НоваяСтрокаТовара.ЕдиницаИзмерения = НайденнаяСтрока.ЕдиницаИзмерения;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Если ВременнаяТаблицаТоваров.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТаблицаДоговоров = ВременнаяТаблицаТоваров.Скопировать();
		ТаблицаДоговоров.Свернуть("Договор");
		
		Для каждого СтрокаДоговоров из ТаблицаДоговоров Цикл
		
			МассивОбъектовЗаказов.Добавить(Документы.ЗаказПоставщику.СоздатьДокумент());
			
			ИндексОбъекта = МассивОбъектовЗаказов.Количество() - 1;
			
			МассивОбъектовЗаказов[ИндексОбъекта].Дата = ТекущаяДата();

			МассивОбъектовЗаказов[ИндексОбъекта].Контрагент = ПолучитьПоставщикаПоИмениКолонки(ИмяКолонки);
			МассивОбъектовЗаказов[ИндексОбъекта].УчитыватьНДС = Истина;
			МассивОбъектовЗаказов[ИндексОбъекта].СуммаВключаетНДС = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДоговоров.Договор) Тогда
				
				МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента    = СтрокаДоговоров.Договор.ВалютаВзаиморасчетов;
				МассивОбъектовЗаказов[ИндексОбъекта].ДоговорКонтрагента = СтрокаДоговоров.Договор;
				МассивОбъектовЗаказов[ИндексОбъекта].Организация        = СтрокаДоговоров.Договор.Организация;
				
			КонецЕсли;
			
			ТоварыПоДоговору = ВременнаяТаблицаТоваров.НайтиСтроки(Новый Структура("Договор", СтрокаДоговоров.Договор));
			
			НаименьшаяДатаПотребности = Неопределено;
			
			Для каждого СтрокаТовара из ТоварыПоДоговору Цикл
				//если для цены номенклатуры характеристика не указана, цена распространяется на номенклатуру 
				//	с любой характеристикой.
				//Приоритет имеет цена с явно указанной характеристикой - такие цены обрабатываем в первую 
				//	очередь за счет применения двух проходов
				Если НЕ ЗначениеЗаполнено(СтрокаТовара.ХарактеристикаНоменклатуры) Тогда
					СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, Тара", СтрокаТовара.Номенклатура, СтрокаТовара.Тара));
					СтрокиТаблицыТовары = ТаблицаТоваровСвернутая.НайтиСтроки(Новый Структура("Номенклатура, Тара, ФлагИспользование", СтрокаТовара.Номенклатура, СтрокаТовара.Тара,истина));
				Иначе
					СтрокиТаблицыПотребности = ТаблицаПотребности.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара", СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры, СтрокаТовара.Тара));
					СтрокиТаблицыТовары = ТаблицаТоваровСвернутая.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Тара, ФлагИспользование", СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры, СтрокаТовара.Тара, истина));
				КонецЕсли;
				
				Для каждого СтрокаТаблицыПотребности из СтрокиТаблицыПотребности Цикл
					Если СтрокаТаблицыПотребности.ДатаПотребности = '00010101000000' Тогда
						Продолжить;
					КонецЕсли; 
					Если НаименьшаяДатаПотребности = Неопределено Тогда
						НаименьшаяДатаПотребности = СтрокаТаблицыПотребности.ДатаПотребности;
						Продолжить;
					КонецЕсли;
					Если СтрокаТаблицыПотребности.ДатаПотребности < НаименьшаяДатаПотребности Тогда
						НаименьшаяДатаПотребности = СтрокаТаблицыПотребности.ДатаПотребности;
					КонецЕсли;
				КонецЦикла; 
				
				КоличествоТовара = 0;
				
				Для каждого СтрокаТаблицыТовары из СтрокиТаблицыТовары Цикл
					КоличествоТовара = СтрокаТаблицыТовары.КоличествоЗаказать;
					Если КоличествоТовара = 0 Тогда
						Продолжить;
					КонецЕсли;
					//отметим что этот товар уже заказали, чтобы не заказать повторно в случае задания цены с пустой характеристикой
					СтрокаТаблицыТовары.КоличествоЗаказать = 0;
                    Если СтрокаТовара.Тара = Истина Тогда
					
						НоваяСтрокаТовара = МассивОбъектовЗаказов[ИндексОбъекта].ВозвратнаяТара.Добавить();
						НоваяСтрокаТовара.Номенклатура               = СтрокаТовара.Номенклатура;
						НоваяСтрокаТовара.Количество                 = КоличествоТовара;
							
						ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
						Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета Тогда
							НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
						Иначе
							Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента.Пустая() Тогда
								МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета;
								НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
							Иначе
								СтруктураКурсаУпрУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
								КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
								КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;
									
								СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента, ТекущаяДата());
								КурсДокумента           = СтруктураКурсаУпрУчета.Курс;
								КратностьДокумента      = СтруктураКурсаУпрУчета.Кратность;
									
								НоваяСтрокаТовара.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТовара.ЦенаУпрУчета, ВалютаУпрУчета, МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента,
														 КурсУпрУчета, КурсДокумента, КратностьУпрУчета, КратностьДокумента);
							КонецЕсли; 
								
						КонецЕсли; 
							
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
							
					Иначе
							
						НоваяСтрокаТовара = МассивОбъектовЗаказов[ИндексОбъекта].Товары.Добавить();
						НоваяСтрокаТовара.Номенклатура               = СтрокаТовара.Номенклатура;
						НоваяСтрокаТовара.ХарактеристикаНоменклатуры = СтрокаТаблицыТовары.ХарактеристикаНоменклатуры;
						НоваяСтрокаТовара.ЕдиницаИзмерения           = СтрокаТовара.ЕдиницаИзмерения;
						НоваяСтрокаТовара.Количество                 = КоличествоТовара;
						НоваяСтрокаТовара.Коэффициент                = 1;
						НоваяСтрокаТовара.СтавкаНДС                  = НоваяСтрокаТовара.Номенклатура.СтавкаНДС;
							
						ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
						Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета Тогда
							НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
						ИначеЕсли МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = СтрокаТовара.ВалютаКонтрагента Тогда
							 НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаКонтрагента;
						Иначе
							Если МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента.Пустая() Тогда
								МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента = ВалютаУпрУчета;
								НоваяСтрокаТовара.Цена = СтрокаТовара.ЦенаУпрУчета;
							Иначе
								СтруктураКурсаУпрУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
								КурсУпрУчета           = СтруктураКурсаУпрУчета.Курс;
								КратностьУпрУчета      = СтруктураКурсаУпрУчета.Кратность;
									
								СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента, ТекущаяДата());
								КурсДокумента           = СтруктураКурсаДокумента.Курс;
								КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
									
								НоваяСтрокаТовара.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТовара.ЦенаУпрУчета, ВалютаУпрУчета, МассивОбъектовЗаказов[ИндексОбъекта].ВалютаДокумента,
														 КурсУпрУчета, КурсДокумента, КратностьУпрУчета, КратностьДокумента);
							КонецЕсли; 
								
						КонецЕсли; 
							
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовара, МассивОбъектовЗаказов[ИндексОбъекта]);
							
					КонецЕсли; 
						
				КонецЦикла; 

			КонецЦикла;  //Для каждого СтрокаДоговоров из ТаблицаДоговоров Цикл
				
								
			Если МассивОбъектовЗаказов[ИндексОбъекта].Товары.Количество()=0 Тогда
				//документ оказался пустым
				МассивОбъектовЗаказов.Удалить(ИндексОбъекта);
				Продолжить;
			КонецЕсли;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(МассивОбъектовЗаказов[ИндексОбъекта], глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка");
			
			Если НаименьшаяДатаПотребности <> Неопределено Тогда
				МассивОбъектовЗаказов[ИндексОбъекта].ДатаПоступления = НаименьшаяДатаПотребности;
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла; 
	КонецЦикла;
	
	Если мФормаПрогрессора.Открыта() Тогда
		
		мФормаПрогрессора.Закрыть();
		
	КонецЕсли; 
	
	Возврат МассивОбъектовЗаказов;
	
КонецФункции

// Процедура заполняет дерево свойств и категорий контрагентов
// для настройки отборов пользователем по свойствам и категориям контрагентов
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьТаблицуСвойствИКатегирий()

	мФормаПрогрессора.Открыть();
	
	мФормаПрогрессора.КомментарийЗначения = "Выполняется запрос по свойствам и категориям ...";
	мФормаПрогрессора.МаксимальноеЗначение = 100;
	мФормаПрогрессора.Значение = 50;
		
	Запрос = Новый Запрос;

	Запрос.Текст = "";

	Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов["Справочник_Контрагенты"];
	
	Запрос.УстановитьПараметр("Назначение", Назначение);

	Запрос.Текст = Запрос.Текст + "
	|
	|ВЫБРАТЬ 
	|	ПланВидовХарактеристик.СвойстваОбъектов.Представление КАК ПредставлениеСвойства,
	|	ПланВидовХарактеристик.СвойстваОбъектов.Ссылка        КАК Ссылка
	|
	|ИЗ
	|	ПланВидовХарактеристик.СвойстваОбъектов
	|
	|ГДЕ
	|	ПланВидовХарактеристик.СвойстваОбъектов.НазначениеСвойства = &Назначение";

	Строка = Запрос.Выполнить().Выбрать();
	
	СтрокаСвойства = мДеревоСвойстваКатегории.Строки.Добавить();
	СтрокаСвойства.ИмяФильтра           = "СвойстваКонтрагента";
	СтрокаСвойства.ПредставлениеФильтра = "Свойства контрагента";
	
	ИндексСтроки = 0;
	
	Пока Строка.Следующий() Цикл
	
		НоваяСтрока = СтрокаСвойства.Строки.Добавить();
		НоваяСтрока.ИмяФильтра            = "Свойство" + Строка(ИндексСтроки);
		НоваяСтрока.ПредставлениеФильтра  = Строка(Строка.Ссылка);
		НоваяСтрока.Свойство              = Строка.Ссылка;
		НоваяСтрока.ОписаниеТиповСвойство = Строка.Ссылка.ТипЗначения;
	
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла; 

	СтрокаКатегории = мДеревоСвойстваКатегории.Строки.Добавить();
	СтрокаКатегории.ИмяФильтра            = "КатегорииКонтрагента";
	СтрокаКатегории.ПредставлениеФильтра  = "Категории контрагента";
	СтрокаКатегории.ОписаниеТиповСвойство = Новый ОписаниеТипов("СправочникСсылка.КатегорииОбъектов");
	СтрокаКатегории.Свойство              = Назначение;
	
	Если мФормаПрогрессора.Открыта() Тогда
		мФормаПрогрессора.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает доступность кнопок нижней командной панели
// формы, в зависимости от текущего состояния выполнения помощника
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ДоступностьКнопокНижнейПанели()

	Если ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Номенклатура" Тогда
	
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Ложь;

	ИначеЕсли ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Настройки" Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Ложь;
		
	ИначеЕсли ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Результат" Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность  = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Доступность  = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Готово.Доступность = Истина;
		
	КонецЕсли; 

КонецПроцедуры

// Функция определяет по имени колонки конечной таблицы Поставщика
//  для которых была создана данная колонка
// 
// Параметры:
//  ИмяКолонки - Строка, имя колонки конечной таблицы
//
// Возвращаемое значение
//  СправочникСсылка.Контрагенты
//
Функция ПолучитьПоставщикаПоИмениКолонки(Знач ИмяКолонки)
	Для каждого Строка из ЭлементыФормы.КонечнаяТаблица.Значение цикл
		Если не Строка["СтруктураДанных" + ИмяКолонки].Получить("ЯчейкаНедоступна") Тогда
			Возврат Строка["СтруктураДанных" + ИмяКолонки].Получить("ТипЦен").Владелец;
		КонецЕсли;	
	КонецЦикла;
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции // ПолучитьПоставщикаПоИмениКолонки()

// Процедура заполняет конечную таблицу, по введенным пользователем критериям отбора
//  и выбранным номенклатурным позициям
// 
// Параметры:
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ЗаполнитьКонечнуюТаблицу()
	
	мФормаПрогрессора.Открыть();
	
	мФормаПрогрессора.КомментарийЗначения = "Выполняется поиск поставщиков ...";
	
	СписокОсновныхПоставщиков = Новый СписокЗначений;
	
	ВалютаУпрУчета = глЗначениеПеременной("ВалютаУправленческогоУчета");
	
	КонечнаяТаблица.Очистить();
	КонечнаяТаблица.Колонки.Очистить();
	КонечнаяТаблица.Колонки.Добавить("НоменклатураПредставление", Новый ОписаниеТипов("Строка"));
	КонечнаяТаблица.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонечнаяТаблица.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	мФормаПрогрессора.КомментарийЗначения = "Подготавливаются данные для запроса ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаТоваров.Количество() - 1;
	
	СписокОтбораНоменклатуры = Новый СписокЗначений;
	СписокОтбораХарактеристикНоменклатуры = Новый СписокЗначений;
	СписокОтбораХарактеристикНоменклатуры.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Для каждого СтрокаНоменклатуры из ТаблицаТоваров Цикл
		
		мФормаПрогрессора.Значение = ТаблицаТоваров.Индекс(СтрокаНоменклатуры);
		
		Если СтрокаНоменклатуры.ФлагИспользование = Истина Тогда
			
			ИдНоменклатуры = СокрЛП("_" + Строка(ТаблицаТоваров.Индекс(СтрокаНоменклатуры)));

			Если СписокОтбораНоменклатуры.НайтиПоЗначению(СтрокаНоменклатуры.Номенклатура) = Неопределено Тогда
				
				СписокОтбораНоменклатуры.Добавить(СтрокаНоменклатуры.Номенклатура);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНоменклатуры.ХарактеристикаНоменклатуры) Тогда
				
				Если СписокОтбораХарактеристикНоменклатуры.НайтиПоЗначению(СтрокаНоменклатуры.ХарактеристикаНоменклатуры) = Неопределено Тогда
					
					СписокОтбораХарактеристикНоменклатуры.Добавить(СтрокаНоменклатуры.ХарактеристикаНоменклатуры);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ СтрокаНоменклатуры.Номенклатура.ОсновнойПоставщик.Пустая() Тогда
				
				СписокОсновныхПоставщиков.Добавить(СтрокаНоменклатуры.Номенклатура.ОсновнойПоставщик);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мФормаПрогрессора.КомментарийЗначения = "Выполняется запрос ...";
	мФормаПрогрессора.МаксимальноеЗначение = 100;
	мФормаПрогрессора.Значение = 50;
	
	// Запрос, который выбирает все необходимые данные для заполнения результирующей таблицы,
	// цены номенклатуры поставщиков, типы цен и пр.
	Запрос = Новый Запрос;
	СтруктураКурсаУпрУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокОтбораНоменклатуры);
	Запрос.УстановитьПараметр("СписокХарактеристикНоменклатуры", СписокОтбораХарактеристикНоменклатуры);
	Запрос.УстановитьПараметр("СписокОсновныхПоставщиков", СписокОсновныхПоставщиков);
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	Запрос.УстановитьПараметр("ВыбВидДоговора", СписокВидовДоговоров);
	Запрос.УстановитьПараметр("ПустаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяНадежность", Перечисления.Важность.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", ВалютаУпрУчета);
	Запрос.УстановитьПараметр("КурсУпрУчета", СтруктураКурсаУпрУчета.Курс);
	Запрос.УстановитьПараметр("КратностьУпрУчета", СтруктураКурсаУпрУчета.Кратность);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВыбСрокВыполнения", ЗначениеСрокВыполненияЗаказа);
	Запрос.УстановитьПараметр("ВыбСрокВыполненияНач", ЗначениеСрокВыполненияЗаказаНач);
	Запрос.УстановитьПараметр("ВыбСрокВыполненияКон", ЗначениеСрокВыполненияЗаказаКон);
	Запрос.УстановитьПараметр("ВыбНадежность", ЗначениеНадежность);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонечнаяТаблица.Номенклатура КАК Номенклатура,
	|	КонечнаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КонечнаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	КонечнаяТаблица.Контрагент КАК Контрагент,
	|	КонечнаяТаблица.Договор КАК Договор,
	|	КонечнаяТаблица.НадежностьПоставщика КАК Надежность,
	|	КонечнаяТаблица.ОсобыеУсловияПоставки КАК ОсобыеУсловияПоставки,
	|	КонечнаяТаблица.ТипЦены КАК ТипЦены,
	|	КонечнаяТаблица.Цена КАК Цена,
	|	КонечнаяТаблица.Валюта КАК Валюта,
	|	КонечнаяТаблица.ЦенаУпрУчета КАК ЦенаУпрУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПочтиКонечнаяТаблица.Номенклатура КАК Номенклатура,
	|		ПочтиКонечнаяТаблица.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		ПочтиКонечнаяТаблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ПочтиКонечнаяТаблица.Контрагент КАК Контрагент,
	|		ПочтиКонечнаяТаблица.Договор КАК Договор,
	|		ЕСТЬNULL(НадежностьПоставщиковСрезПоследних.Надежность, &ПустаяНадежность) КАК НадежностьПоставщика,
	|		ПочтиКонечнаяТаблица.ОсобыеУсловияПоставки КАК ОсобыеУсловияПоставки,
	|		ПочтиКонечнаяТаблица.ТипЦен КАК ТипЦены,
	|		ЕСТЬNULL(ПочтиКонечнаяТаблица.Цена, 0) КАК Цена,
	|		ЕСТЬNULL(ПочтиКонечнаяТаблица.Валюта, &ПустаяВалюта) КАК Валюта,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ПочтиКонечнаяТаблица.Валюта ЕСТЬ NULL 
	|					ТОГДА 0
	|				КОГДА ПочтиКонечнаяТаблица.Валюта = &ВалютаУпрУчета
	|					ТОГДА ЕСТЬNULL(ПочтиКонечнаяТаблица.Цена, 0)
	|				КОГДА КурсыВалют.Кратность = 0
	|						ИЛИ &КурсУпрУчета = 0
	|					ТОГДА 0
	|				ИНАЧЕ ПочтиКонечнаяТаблица.Цена * КурсыВалют.Курс * &КратностьУпрУчета / (КурсыВалют.Кратность * &КурсУпрУчета)
	|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаУпрУчета,
	|		ПочтиКонечнаяТаблица.Контрагент.СрокВыполненияЗаказаПоставщиком КАК СрокВыполненияЗаказаПоставщиком
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатуры.ОсобыеУсловияПоставки = ИСТИНА
	|					ТОГДА ЦеныНоменклатуры.Договор.Владелец
	|				ИНАЧЕ ЦеныНоменклатуры.ТипЦен.Владелец
	|			КОНЕЦ КАК Контрагент,
	|			ЦеныНоменклатуры.Цена КАК Цена,
	|			ЦеныНоменклатуры.Валюта КАК Валюта,
	|			ЦеныНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатуры.ОсобыеУсловияПоставки = ИСТИНА
	|					ТОГДА ЦеныНоменклатуры.Договор.ТипЦен
	|				ИНАЧЕ ЦеныНоменклатуры.ТипЦен
	|			КОНЕЦ КАК ТипЦен,
	|			ВЫБОР
	|				КОГДА ЦеныНоменклатуры.ОсобыеУсловияПоставки = ИСТИНА
	|					ТОГДА ЦеныНоменклатуры.Договор
	|				ИНАЧЕ ДоговорыКонтрагентов.Ссылка
	|			КОНЕЦ КАК Договор,
	|			ЦеныНоменклатуры.ОсобыеУсловияПоставки КАК ОсобыеУсловияПоставки
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.Номенклатура КАК Номенклатура,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.Цена КАК Цена,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ВалютаЦены КАК Валюта,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ДоговорКонтрагента КАК Договор,
	|				NULL КАК ТипЦен,
	|				ИСТИНА КАК ОсобыеУсловияПоставки
	|			ИЗ
	|				РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
	|					&ТекущаяДата,
	|					Цена > 0
	|					    И Номенклатура В (&СписокНоменклатуры)
	|						И ХарактеристикаНоменклатуры в (&СписокХарактеристикНоменклатуры)) КАК ЦеныНоменклатурыКонтрагентовПоДоговорам
	|			ГДЕ
	|				ЦеныНоменклатурыКонтрагентовПоДоговорам.ДоговорКонтрагента.ВидДоговора В(&ВыбВидДоговора)
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ЦеныНоменклатурыКонтрагентов.Номенклатура,
	|				ЦеныНоменклатурыКонтрагентов.ХарактеристикаНоменклатуры,
	|				ЦеныНоменклатурыКонтрагентов.Цена,
	|				ЦеныНоменклатурыКонтрагентов.Валюта,
	|				ЦеныНоменклатурыКонтрагентов.ЕдиницаИзмерения,
	|				NULL,
	|				ЦеныНоменклатурыКонтрагентов.ТипЦен,
	|				ЛОЖЬ
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|					&ТекущаяДата,
	|					Цена > 0
	|					    И Номенклатура В (&СписокНоменклатуры)
	|						И ХарактеристикаНоменклатуры в (&СписокХарактеристикНоменклатуры)) КАК ЦеныНоменклатурыКонтрагентов) КАК ЦеныНоменклатуры
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|				ПО ЦеныНоменклатуры.ТипЦен = ДоговорыКонтрагентов.ТипЦен) КАК ПочтиКонечнаяТаблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ВЫБОР
	|					КОГДА КурсыВалютВнутр.Курс ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ КурсыВалютВнутр.Курс
	|				КОНЕЦ КАК Курс,
	|				ВЫБОР
	|					КОГДА КурсыВалютВнутр.Кратность ЕСТЬ NULL 
	|						ТОГДА 0
	|					ИНАЧЕ КурсыВалютВнутр.Кратность
	|				КОНЕЦ КАК Кратность,
	|				КурсыВалютВнутр.Валюта КАК Валюта
	|			ИЗ
	|				РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютВнутр) КАК КурсыВалют
	|			ПО КурсыВалют.Валюта = ПочтиКонечнаяТаблица.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НадежностьПоставщиков.СрезПоследних(&ТекущаяДата, ) КАК НадежностьПоставщиковСрезПоследних
	|			ПО ПочтиКонечнаяТаблица.Контрагент = НадежностьПоставщиковСрезПоследних.Контрагент) КАК КонечнаяТаблица";
	
	Для каждого СтрокаТаблицыСвойствИКатегорий из СвойстваИКатегорииКонтрагентов Цикл
		
		Если СтрокаТаблицыСвойствИКатегорий.Использование И СтрокаТаблицыСвойствИКатегорий.ИмяФильтра <> Неопределено Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|	СОЕДИНЕНИЕ
			|";
			
			Если СтрокаТаблицыСвойствИКатегорий.ИмяФильтра = "КатегорииКонтрагента" Тогда
				
				Запрос.Текст = Запрос.Текст + "
				|	
				|		(ВЫБРАТЬ
				|			КатегорииОбъектов.Объект КАК Объект
				|		ИЗ
				|			РегистрСведений.КатегорииОбъектов КАК КатегорииОбъектов
				|		ГДЕ
				|			" + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаТаблицыСвойствИКатегорий.ВидСравненияФильтра, "&ВыбКатегория", "КатегорииОбъектов.Категория") + "
				|		СГРУППИРОВАТЬ ПО
				|			Объект
				|		) КАК КатегорииОбъектов
				|	ПО КонечнаяТаблица.Контрагент = КатегорииОбъектов.Объект
				|";
				
				Запрос.УстановитьПараметр("ВыбКатегория", СтрокаТаблицыСвойствИКатегорий.ЗначениеФильтра);
				
			Иначе
				
				Запрос.Текст = Запрос.Текст + "
				|		(ВЫБРАТЬ
				|			ЗначенияСвойствОбъектов.Значение КАК ЗначениеСвойства_" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра) + ",
				|			ЗначенияСвойствОбъектов.Объект КАК ОбъектСвойства_" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра) + "
				|		ИЗ
				|			РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|		ГДЕ
				|			" + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаТаблицыСвойствИКатегорий.ВидСравненияФильтра, ("&ВыбСвойство_" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра)), "ЗначенияСвойствОбъектов.Значение") + "
				|			И
				|			ЗначенияСвойствОбъектов.Свойство = &Выб" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра) + "
				|		) КАК " + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра) + "
				|	ПО КонечнаяТаблица.Контрагент = " + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра) + ".ОбъектСвойства_" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра) + "
				|";
				
				Запрос.УстановитьПараметр("Выб" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра), СтрокаТаблицыСвойствИКатегорий.Свойство);
				Запрос.УстановитьПараметр("ВыбСвойство_" + СокрЛП(СтрокаТаблицыСвойствИКатегорий.ИмяФильтра), СтрокаТаблицыСвойствИКатегорий.ЗначениеФильтра);
				
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЦикла; 
	
	Запрос.Текст = Запрос.Текст + "
	|	ГДЕ
	|		ВЫБОР КОГДА КонечнаяТаблица.Договор ЕСТЬ NULL ТОГДА Истина ИНАЧЕ КонечнаяТаблица.Договор.ВидДоговора В(&ВыбВидДоговора) КОНЕЦ
	|";
	
	Если ИспользоватьТолькоОсновныхПоставщиков Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И КонечнаяТаблица.Контрагент В(&СписокОсновныхПоставщиков)
		|";
		
	КонецЕсли; 
	
	Если ФлагСрокВыполненияЗаказа Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(ВидСравненияСрокВыполненияЗаказа, "&ВыбСрокВыполнения", "КонечнаяТаблица.СрокВыполненияЗаказаПоставщиком", "&ВыбСрокВыполненияНач", "&ВыбСрокВыполненияКон") + "
		|";
		
	КонецЕсли;
	
	Если ФлагНадежность Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(ВидСравненияНадежность, "&ВыбНадежность", "КонечнаяТаблица.НадежностьПоставщика") + "
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИТОГИ ПО
	|	Номенклатура, ХарактеристикаНоменклатуры
	|";

	РезультатЗапроса = Запрос.Выполнить();
	ДеревоЗапроса  = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	мДеревоЗапросаРезультирующейТаблицы = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	// Выберем всех поставщиков с учетом различных типов цен и условий поставки
	ТаблицаПоставщиков = РезультатЗапроса.Выгрузить();
	ТаблицаПоставщиков.Свернуть("Контрагент, ТипЦены, ОсобыеУсловияПоставки, Надежность");
	ТаблицаПоставщиков.Колонки.Добавить("ИмяКолонки");
	Если ТаблицаПоставщиков.Количество() > 0 Тогда
		
		ТаблицаПоставщиков.Удалить(0);
		
	КонецЕсли;
	
	ТипЦенПлановойСебестоимостиНоменклатуры = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	
	// Теперь будем создавать колонки таблицы значений
	мФормаПрогрессора.КомментарийЗначения = "Создаются колонки таблицы подбора ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаПоставщиков.Количество();
	
	ИндексПоставщика = 0;
	ИндексКолонки = 0;
	ТекущийПоставщик = Неопределено;
	
	Для каждого СтрокаТаблицыПоставщиков из ТаблицаПоставщиков Цикл
		
		ИндексПоставщика = ?(СтрокаТаблицыПоставщиков.Контрагент = ТекущийПоставщик, ИндексПоставщика, ИндексПоставщика + 1);
		ИндексКолонки = ?(СтрокаТаблицыПоставщиков.Контрагент = ТекущийПоставщик, ИндексКолонки + 1, 1);
		
		ИмяКолонки = "_" + Строка(Формат(ИндексПоставщика, "ЧГ=0")) + "__" + Строка(Формат(ИндексКолонки, "ЧГ=0"));
		КонечнаяТаблица.Колонки.Добавить(("Флаг" + ИмяКолонки), Новый ОписаниеТипов("Булево"));
		КонечнаяТаблица.Колонки.Добавить(("Представление" + ИмяКолонки), Новый ОписаниеТипов("Строка"));
		КонечнаяТаблица.Колонки.Добавить(("СтруктураДанных" + ИмяКолонки), Новый ОписаниеТипов("Соответствие"));
		
		ТекущийПоставщик = СтрокаТаблицыПоставщиков.Контрагент;
		
		СтрокаТаблицыПоставщиков.ИмяКолонки = ИмяКолонки;
		
		мФормаПрогрессора.Значение = ТаблицаПоставщиков.Индекс(СтрокаТаблицыПоставщиков) + 1;
		
	КонецЦикла;
	
	мФормаПрогрессора.КомментарийЗначения = "Заполняется таблица подбора ...";
	мФормаПрогрессора.МаксимальноеЗначение = ДеревоЗапроса.Строки.Количество() - 1;
	
	Для каждого СтрокаНоменклатура из ДеревоЗапроса.Строки Цикл
		
		Для каждого СтрокаХарактеристикаНоменклатуры из СтрокаНоменклатура.Строки Цикл
			
			НоваяСтрокаТаблицы = КонечнаяТаблица.Добавить();
			НоваяСтрокаТаблицы.НоменклатураПредставление = СокрЛП(СтрокаХарактеристикаНоменклатуры.Номенклатура);
			Если СтрокаХарактеристикаНоменклатуры.Номенклатура.ВестиУчетПоХарактеристикам Тогда
				
				НоваяСтрокаТаблицы.НоменклатураПредставление = НоваяСтрокаТаблицы.НоменклатураПредставление + " (" + ?(НЕ ЗначениеЗаполнено(СтрокаХарактеристикаНоменклатуры.ХарактеристикаНоменклатуры), "характеристика не указана", СтрокаХарактеристикаНоменклатуры.ХарактеристикаНоменклатуры) + ")";
				
			КонецЕсли; 
			НоваяСтрокаТаблицы.Номенклатура = СтрокаХарактеристикаНоменклатуры.Номенклатура;
			НоваяСтрокаТаблицы.ХарактеристикаНоменклатуры = СтрокаХарактеристикаНоменклатуры.ХарактеристикаНоменклатуры;

			Для каждого ЭлементТаблицыПоставщиков из ТаблицаПоставщиков Цикл
				
				СтруктураПоиска = Новый Структура(
				"Контрагент,
				|ТипЦены,
				|ОсобыеУсловияПоставки,
				|Надежность",
				ЭлементТаблицыПоставщиков.Контрагент,
				ЭлементТаблицыПоставщиков.ТипЦены,
				ЭлементТаблицыПоставщиков.ОсобыеУсловияПоставки,
				ЭлементТаблицыПоставщиков.Надежность);
				
				МассивНайденныхСтрокПоставщика = СтрокаХарактеристикаНоменклатуры.Строки.НайтиСтроки(СтруктураПоиска);
				
				Если МассивНайденныхСтрокПоставщика.Количество() > 0 Тогда
					
					НайденнаяСтрокаПоставщика = МассивНайденныхСтрокПоставщика[0];
				
					ИмяКолонки = ЭлементТаблицыПоставщиков.ИмяКолонки;
					
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки] = ПолучитьНовуюСтруктуруДанных();
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ТипЦен", НайденнаяСтрокаПоставщика.ТипЦены);
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("Цена", НайденнаяСтрокаПоставщика.Цена);
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ЦенаУпр", НайденнаяСтрокаПоставщика.ЦенаУпрУчета);
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ОсобыеУсловияПоставки", НайденнаяСтрокаПоставщика.ОсобыеУсловияПоставки);
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ДоговорУсловийПоставки", НайденнаяСтрокаПоставщика.Договор);
					
					Если НайденнаяСтрокаПоставщика.ЦенаУпрУчета > 0 И НайденнаяСтрокаПоставщика.ЦенаУпрУчета < 0.01 Тогда
						
						НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = "< 0,01 " + СокрП(ВалютаУпрУчета);
						
					Иначе
						
						НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = "";
						
					КонецЕсли;
					
					Если НайденнаяСтрокаПоставщика.ОсобыеУсловияПоставки И НайденнаяСтрокаПоставщика.ЦенаУпрУчета > 0 Тогда
						
						НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = НоваяСтрокаТаблицы["Представление" + ИмяКолонки] + (?(НайденнаяСтрокаПоставщика.ЦенаУпрУчета = 0, "Не указана", ?(ПустаяСтрока(НоваяСтрокаТаблицы["Представление" + ИмяКолонки]), ОбщегоНазначения.ФорматСумм(НайденнаяСтрокаПоставщика.ЦенаУпрУчета, ВалютаУпрУчета), НоваяСтрокаТаблицы["Представление" + ИмяКолонки])) + " (Особые условия поставки)");
						
					Иначе
						
						НоваяСтрокаТаблицы["Представление" + ИмяКолонки] = НоваяСтрокаТаблицы["Представление" + ИмяКолонки] + (?(НайденнаяСтрокаПоставщика.ЦенаУпрУчета = 0, "Не указана", ?(ПустаяСтрока(НоваяСтрокаТаблицы["Представление" + ИмяКолонки]), ОбщегоНазначения.ФорматСумм(НайденнаяСтрокаПоставщика.ЦенаУпрУчета, ВалютаУпрУчета), НоваяСтрокаТаблицы["Представление" + ИмяКолонки])) + ?((ЗначениеЗаполнено(НайденнаяСтрокаПоставщика.ТипЦены)), (" (" + Строка(НайденнаяСтрокаПоставщика.ТипЦены) + ")"), ""));
						
					КонецЕсли;
					
					Если СтрокаХарактеристикаНоменклатуры.Номенклатура.ОсновнойПоставщик = НайденнаяСтрокаПоставщика.Контрагент Тогда
						
						НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ОсновнойПоставщик", Истина);
						
					КонецЕсли;
					
					Если НайденнаяСтрокаПоставщика.ЦенаУпрУчета = 0 Тогда
						
						НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ЯчейкаТолькоПросмотр", Истина);
						
					КонецЕсли; 
				
				Иначе
					
					ИмяКолонки = ЭлементТаблицыПоставщиков.ИмяКолонки;
					НоваяСтрокаТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("ЯчейкаНедоступна", Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
			
		мФормаПрогрессора.Значение = ДеревоЗапроса.Строки.Индекс(СтрокаНоменклатура);

	КонецЦикла;
	
	мФормаПрогрессора.КомментарийЗначения = "Производится поиск оптимальных поставщиков ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаПоставщиков.Количество();
	
	ТекущийПоставщик = Неопределено;
	
	Для каждого СтрокаКонечнойТаблицы из КонечнаяТаблица Цикл
		
		МинЦена = Неопределено;
		
		Для каждого СтрокаТаблицыПоставщиков из ТаблицаПоставщиков Цикл
			
			ИмяКолонки = СтрокаТаблицыПоставщиков.ИмяКолонки;
			ЦенаУпр = СтрокаКонечнойТаблицы["СтруктураДанных" + ИмяКолонки].Получить("ЦенаУпр");
	
			Если ЦенаУпр = Неопределено ИЛИ ЦенаУпр = 0 Тогда
				
				Продолжить;
				
			ИначеЕсли МинЦена = Неопределено Тогда
				
				МинЦена = Окр(ЦенаУпр, 2);
				Продолжить;
				
			КонецЕсли;
			
			Если ЦенаУпр < МинЦена Тогда
				
				МинЦена = Окр(ЦенаУпр, 2);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицыПоставщиков из ТаблицаПоставщиков Цикл
			
			ИмяКолонки = СтрокаТаблицыПоставщиков.ИмяКолонки;
		
			Если СтрокаКонечнойТаблицы["СтруктураДанных" + ИмяКолонки].Получить("ЦенаУпр") <> МинЦена Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаКонечнойТаблицы["Флаг" + ИмяКолонки] = Истина;
			СтрокаКонечнойТаблицы["СтруктураДанных" + ИмяКолонки].Вставить("МинимальнаяЦена", Истина);
		    Прервать;
		КонецЦикла;
		
		мФормаПрогрессора.Значение = ТаблицаПоставщиков.Индекс(СтрокаТаблицыПоставщиков) + 1;
		
	КонецЦикла;
	
	// Создадим колонки табличного поля
	ЭлементыФормы.КонечнаяТаблица.Колонки.Очистить();
	
	Колонка = ЭлементыФормы.КонечнаяТаблица.Колонки.Добавить("НоменклатураПредставление", "Номенклатура");
	Колонка.Данные = "НоменклатураПредставление";
	
	Колонка.ВысотаЯчейки = 10;
	Колонка.Ширина = 20;
	Колонка.АвтоВысотаЯчейки = Истина;
	Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	Колонка.ТекстШапки = "Номенклатура";
	Колонка.ШрифтШапки = Новый Шрифт(,, Истина);
	Колонка.ШрифтТекста = Новый Шрифт;
	Колонка.УстановитьЭлементУправления(Тип("ПолеВвода"));
	
	// Теперь создадим колонки поставщиков
	мФормаПрогрессора.КомментарийЗначения = "Создаются колонки табличного поля ...";
	мФормаПрогрессора.МаксимальноеЗначение = ТаблицаПоставщиков.Количество();
	
	ИндексПоставщика = 0;
	ИндексКолонки = 0;
	ТекущийПоставщик = Неопределено;
	
	Для каждого СтрокаТаблицыПоставщиков из ТаблицаПоставщиков Цикл
		
		ИндексПоставщика = ?(СтрокаТаблицыПоставщиков.Контрагент = ТекущийПоставщик, ИндексПоставщика, ИндексПоставщика + 1);
		ИндексКолонки = ?(СтрокаТаблицыПоставщиков.Контрагент = ТекущийПоставщик, ИндексКолонки + 1, 1);
		ИмяКолонки = "_" + Строка(Формат(ИндексПоставщика, "ЧГ=0")) + "__" + Строка(Формат(ИндексКолонки, "ЧГ=0"));
		
		Если ИндексКолонки = 1 Тогда
			
			ТекстШапки = СокрЛП(СтрокаТаблицыПоставщиков.Контрагент);
			
			Если СтрокаТаблицыПоставщиков.Надежность <> Неопределено И ТипЗнч(СтрокаТаблицыПоставщиков.Надежность) = Тип("ПеречислениеСсылка.Важность") И НЕ СтрокаТаблицыПоставщиков.Надежность.Пустая() Тогда
				
				ТекстШапки = ТекстШапки + Символы.ПС + "Надежность: " + СокрЛП(СтрокаТаблицыПоставщиков.Надежность);
				
			Иначе
				
				ТекстШапки = ТекстШапки + Символы.ПС + "Надежность: Не указана";
				
			КонецЕсли;
			
		Иначе
			
			ТекстШапки = "";
			
		КонецЕсли;
		
		КолонкаТаблицыЗначений = ЭлементыФормы.КонечнаяТаблица.Колонки.Добавить(ИмяКолонки, ТекстШапки);
		КолонкаТаблицыЗначений.Данные = "Представление" + ИмяКолонки;
		КолонкаТаблицыЗначений.ДанныеФлажка = "Флаг" + ИмяКолонки;
		КолонкаТаблицыЗначений.Положение = ?(ИндексКолонки = 1, ПоложениеКолонки.НоваяКолонка, ПоложениеКолонки.НаСледующейСтроке);
		КолонкаТаблицыЗначений.ОтображатьВШапке = ?(ИндексКолонки = 1, Истина, Ложь);
		КолонкаТаблицыЗначений.УстановитьЭлементУправления(Тип("Флажок"));
		КолонкаТаблицыЗначений.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
		КолонкаТаблицыЗначений.ВысотаЯчейки = 10;
		КолонкаТаблицыЗначений.Ширина = 15;
		КолонкаТаблицыЗначений.АвтоВысотаЯчейки = Истина;
		
		ТекущийПоставщик = СтрокаТаблицыПоставщиков.Контрагент;
		
		мФормаПрогрессора.Значение = ТаблицаПоставщиков.Индекс(СтрокаТаблицыПоставщиков) + 1;
		
	КонецЦикла;
	
	Если мФормаПрогрессора.Открыта() Тогда
		
		мФормаПрогрессора.Закрыть();
		
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьКонечнуюТаблицу()

// Функция определяет владельца для выбираемого значения отбора.
//
// Параметры 
//  НЕТ
//
// Возвращаемое значение
//  СправочникСсылка - владелец выбираемого значения отбора.
//
Функция ОпределитьВладельцаОтбора()

	Владелец = Неопределено;

	НайдСтрФильтры = мДеревоСвойстваКатегории.Строки.Найти(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущиеДанные.ИмяФильтра, "ИмяФильтра", Истина);
	
	Если НайдСтрФильтры <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайдСтрФильтры.Свойство) > 0 Тогда
			Владелец = НайдСтрФильтры.Свойство;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции

// Процедура вызывается при начале выбора любого реквизита формы ВидСравнения.
// 
// Параметры
//  Элемент - элемент формы
//
Процедура ЗаполнитьСписокВыбора(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ВидСравнения", "");
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ВидСравнения.Равно, "Равно");
	СписокВыбора.Добавить(ВидСравнения.НеРавно, "Не равно");
	СписокВыбора.Добавить(ВидСравнения.ВСписке, "В списке");
	СписокВыбора.Добавить(ВидСравнения.НеВСписке, "Не в списке");
	Если ИмяЭлемента = "СрокВыполненияЗаказа" Тогда
		СписокВыбора.Добавить(ВидСравнения.Меньше, "Меньше");
		СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно, "Меньше или равно");
		СписокВыбора.Добавить(ВидСравнения.Больше, "Больше");
		СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно, "Больше или равно");
		СписокВыбора.Добавить(ВидСравнения.Интервал, "Интервал (>, <)");
		СписокВыбора.Добавить(ВидСравнения.ИнтервалВключаяГраницы, "Интервал (>=, <=)");
		СписокВыбора.Добавить(ВидСравнения.ИнтервалВключаяНачало, "Интервал (>=, <)");
		СписокВыбора.Добавить(ВидСравнения.ИнтервалВключаяОкончание, "Интервал (>, <=)");
	КонецЕсли; 
	
	НайденныйЭлементНовогоСписка = СписокВыбора.НайтиПоЗначению(Элемент.Значение);
	Если НайденныйЭлементНовогоСписка = Неопределено Тогда
		ВыбЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора);
	Иначе
		ВыбЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора,,НайденныйЭлементНовогоСписка);
	КонецЕсли; 
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбЭлемент.Значение;
	
	ОбработатьИзменениеВидаСравнения(Элемент);

КонецПроцедуры

// Процедура вызывается при изменении значения любого реквизита формы ВидСравнения.
// 
// Параметры
//  Элемент - элемент формы
Процедура ОбработатьИзменениеВидаСравнения(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "ВидСравнения", "");
	
	Если Элемент.Значение = ВидСравнения.Равно
	 ИЛИ Элемент.Значение = ВидСравнения.НеРавно
	 ИЛИ Элемент.Значение = ВидСравнения.Больше
	 ИЛИ Элемент.Значение = ВидСравнения.БольшеИлиРавно
	 ИЛИ Элемент.Значение = ВидСравнения.Меньше
	 ИЛИ Элемент.Значение = ВидСравнения.МеньшеИлиРавно Тогда
	
		ЗначениеОтбора = ЭтаФорма["Значение"+ИмяЭлемента];
		Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
			Если ЗначениеОтбора.Количество() > 0 Тогда
				ЭтаФорма["Значение"+ИмяЭлемента] = ЗначениеОтбора[0].Значение;
			Иначе
				ТипЗначения = ЭлементыФормы["Значение"+ИмяЭлемента].ТипЗначенияСписка;
				Если ТипЗначения = Тип("Число") Тогда
					ЭтаФорма["Значение"+ИмяЭлемента] = 0;
				Иначе
					ЭтаФорма["Значение"+ИмяЭлемента] = Новый(ТипЗначения.Типы()[0]);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	ИначеЕсли Элемент.Значение = ВидСравнения.ВСписке
	      ИЛИ Элемент.Значение = ВидСравнения.НеВСписке Тогда
		
		ЗначениеОтбора = ЭтаФорма["Значение"+ИмяЭлемента];
		Если ТипЗнч(ЗначениеОтбора) <> Тип("СписокЗначений") Тогда
			НовыйСписокЗначений = Новый СписокЗначений;
			Если ИмяЭлемента = "СрокВыполненияЗаказа" Тогда
				Если ЗначениеОтбора <> 0 Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеОтбора.Пустая() Тогда
					НовыйСписокЗначений.Добавить(ЗначениеОтбора);
				КонецЕсли;
			КонецЕсли;
			ЭтаФорма["Значение"+ИмяЭлемента] = НовыйСписокЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьДвойныхЭлементов();
	
КонецПроцедуры

// Процедура устанавливает видимость элементов управления для значений отборов,
//  которые могут вводиться в интервале (т.е. двумя значениями) или одним значением отбора.
// 
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  НЕТ
//
Процедура ВидимостьДвойныхЭлементов()

	ИмяЭлемента = "СрокВыполненияЗаказа";
	
	ЗначениеСравнения = ЭлементыФормы.ВидСравненияСрокВыполненияЗаказа.Значение;
	Если ЗначениеСравнения = ВидСравнения.Интервал
	 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяГраницы
	 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяНачало
	 ИЛИ ЗначениеСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента)].Видимость       = Ложь;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Нач")].Видимость = Истина;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Кон")].Видимость = Истина;
		
	Иначе
		
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента)].Видимость       = Истина;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Нач")].Видимость = Ложь;
		ЭтаФорма.ЭлементыФормы[Строка("Значение"+ИмяЭлемента+"Кон")].Видимость = Ложь;
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при изменении любого реквизита формы ЗначениеОтбора.
// 
// Параметры
//  Элемент - элемент формы
// 
Процедура ЗначениеОтбораПриИзменении(Элемент)

	ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Значение", "");
	Если Сред(ИмяЭлемента, (СтрДлина(ИмяЭлемента) - 2), 3) = "Нач" ИЛИ Сред(ИмяЭлемента, (СтрДлина(ИмяЭлемента) - 2), 3) = "Кон" Тогда
		ИмяЭлемента = Сред(ИмяЭлемента, 1, (СтрДлина(ИмяЭлемента) - 3));
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") И Элемент.ТипЗначенияСписка.Типы().Количество() = 1 Тогда
		Для каждого ЭлементСписка из Элемент.Значение Цикл
			Если ЭлементСписка.Значение = Неопределено Тогда
				ЭлементСписка.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Элемент.ТипЗначенияСписка.Типы()[0]);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ЭтаФорма[Строка("Флаг"+ИмяЭлемента)] = Истина;

КонецПроцедуры

// Процедура вызывается при вызове мотода Очистить любого реквизита формы ЗначениеОтбора.
// 
// Параметры
//  Элемент - элемент формы
//
Процедура ОчиститьЭлемент(Элемент);
	
	Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		Элемент.Значение.Очистить();
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
		Элемент.Значение = 0;
	Иначе
		ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки();
		ОписаниеТиповДокументы    = Документы.ТипВсеСсылки();
		ОписаниеТиповПеречисления = Перечисления.ТипВсеСсылки();
		Если ОписаниеТиповДокументы.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("ДокументСсылка."+Элемент.Значение.Метаданные().Имя);
		ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("СправочникСсылка."+Элемент.Значение.Метаданные().Имя);
		ИначеЕсли ОписаниеТиповПеречисления.СодержитТип(ТипЗнч(Элемент.Значение)) Тогда
			Элемент.Значение = Новый("ПеречислениеСсылка."+Элемент.Значение.Метаданные().Имя);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при изменении флажков у строк в таблице товаров.
// 
// Параметры
//  ЗначениеФлага - Булево, значение флажков каторое необходимо установить
//
Процедура ИзменитьФлажкиТаблицаТоваров(ЗначениеФлага)

	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.ФлагИспользование = ЗначениеФлага;
		
	КонецЦикла; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события формы ПередОткрытием.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ВидСравненияНадежность = ВидСравнения.Равно;
	ВидСравненияСрокВыполненияЗаказа = ВидСравнения.Равно;
	
	ЗначениеНадежность = Перечисления.Важность.ПустаяСсылка();
	ЗначениеСрокВыполненияЗаказа = 0;
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события формы ПриОткрытии.
//
Процедура ПриОткрытии()
	
	ДоступностьКнопокНижнейПанели();
	ТаблицаТоваров.Колонки.Добавить("ФлагИспользование");
	
	Для каждого СтрокаТаблицы из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.ФлагИспользование = Истина;
		
	КонецЦикла; 
	
	ЗаполнитьТаблицуСвойствИКатегирий();
	
	ВидимостьДвойныхЭлементов();
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события формы ПередСохранениемЗначений.
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ИспользоватьТолькоОсновныхПоставщиков", ИспользоватьТолькоОсновныхПоставщиков);
	
	СтруктураЗначений.Вставить("ФлагНадежность", ФлагНадежность);
	СтруктураЗначений.Вставить("ВидСравненияНадежность", ВидСравненияНадежность);
	СтруктураЗначений.Вставить("ЗначениеНадежность", ЗначениеНадежность);
	
	СтруктураЗначений.Вставить("ФлагСрокВыполненияЗаказа", ФлагСрокВыполненияЗаказа);
	СтруктураЗначений.Вставить("ВидСравненияСрокВыполненияЗаказа", ВидСравненияСрокВыполненияЗаказа);
	СтруктураЗначений.Вставить("ЗначениеСрокВыполненияЗаказа", ЗначениеСрокВыполненияЗаказа);
	СтруктураЗначений.Вставить("ЗначениеСрокВыполненияЗаказаНач", ЗначениеСрокВыполненияЗаказаНач);
	СтруктураЗначений.Вставить("ЗначениеСрокВыполненияЗаказаКон", ЗначениеСрокВыполненияЗаказаКон);
	
	ВременнаяТаблица = СвойстваИКатегорииКонтрагентов.Скопировать();
	СтруктураЗначений.Вставить("СвойстваИКатегорииКонтрагентов", ВременнаяТаблица);
	
	СохраненныеНастройкиПомощника = СтруктураЗначений;
	
КонецПроцедуры // ПередСохранениемЗначений()

// Обработчик события формы ПослеВосстановленияЗначений.
//
Процедура ПослеВосстановленияЗначений()
	
	СтруктураЗначений = СохраненныеНастройкиПомощника;
	
	Если ТипЗнч(СтруктураЗначений) = Тип("Структура") Тогда
	
		СтруктураЗначений.Свойство("ИспользоватьТолькоОсновныхПоставщиков", ИспользоватьТолькоОсновныхПоставщиков);
		
		СтруктураЗначений.Свойство("ФлагНадежность", ФлагНадежность);
		СтруктураЗначений.Свойство("ВидСравненияНадежность", ВидСравненияНадежность);
		СтруктураЗначений.Свойство("ЗначениеНадежность", ЗначениеНадежность);
		
		СтруктураЗначений.Свойство("ФлагСрокВыполненияЗаказа", ФлагСрокВыполненияЗаказа);
		СтруктураЗначений.Свойство("ВидСравненияСрокВыполненияЗаказа", ВидСравненияСрокВыполненияЗаказа);
		СтруктураЗначений.Свойство("ЗначениеСрокВыполненияЗаказа", ЗначениеСрокВыполненияЗаказа);
		СтруктураЗначений.Свойство("ЗначениеСрокВыполненияЗаказаНач", ЗначениеСрокВыполненияЗаказаНач);
		СтруктураЗначений.Свойство("ЗначениеСрокВыполненияЗаказаКон", ЗначениеСрокВыполненияЗаказаКон);
		
		ВременнаяТаблица = Новый ТаблицаЗначений;
		СтруктураЗначений.Свойство("СвойстваИКатегорииКонтрагентов", ВременнаяТаблица);
		СвойстваИКатегорииКонтрагентов = ВременнаяТаблица.Скопировать();
	
	КонецЕсли; 
	
КонецПроцедуры // ПослеВосстановленияЗначений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Готово.
//
Процедура ОсновныеДействияФормыГотово(Элемент)
	
	Ответ = Вопрос("Сформировать заказы поставщикам?", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗаказов = ЗарегистрироватьЗаказы();
	
	ЭтаФорма.Закрыть(МассивЗаказов);
	
КонецПроцедуры // ОсновныеДействияФормыГотово()

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Далее.
//
Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	ПредыдущаяСтраница = ЭлементыФормы.ПанельПомощника.ТекущаяСтраница;
	ЭлементыФормы.ПанельПомощника.ТекущаяСтраница = ЭлементыФормы.ПанельПомощника.Страницы[Мин(ЭлементыФормы.ПанельПомощника.Страницы.Индекс(ПредыдущаяСтраница)+1, ЭлементыФормы.ПанельПомощника.Страницы.Количество()-1)];
	
	Если ЭлементыФормы.ПанельПомощника.ТекущаяСтраница.Имя = "Результат" Тогда
		
		ЗаполнитьКонечнуюТаблицу();
		
	КонецЕсли;
	
	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры // ОсновныеДействияФормыДалее()

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Назад.
//
Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	ПредыдущаяСтраница = ЭлементыФормы.ПанельПомощника.ТекущаяСтраница;
	ЭлементыФормы.ПанельПомощника.ТекущаяСтраница = ЭлементыФормы.ПанельПомощника.Страницы[Макс(ЭлементыФормы.ПанельПомощника.Страницы.Индекс(ПредыдущаяСтраница)-1, 0)];
	ДоступностьКнопокНижнейПанели();
	
КонецПроцедуры // ОсновныеДействияФормыНазад()

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Отмена.
//
Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	ЭтаФорма.Закрыть(Ложь);
	
КонецПроцедуры // ОсновныеДействияФормыОтмена()

// Обработчик события ПередНачаломДобавления элемента формы ТаблицаТоваров.
//
Процедура ТаблицаТоваровПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаТоваровПередНачаломДобавления()

// Обработчик события ПередУдалением элемента формы ТаблицаТоваров.
//
Процедура ТаблицаТоваровПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаТоваровПередУдалением()

// Обработчик события НачалоВыбора элемента формы СвойстваИКатегорииКонтрагентов.ПредставлениеФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовПредставлениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Форма = ПолучитьФорму("ФормаВыбора", Элемент, "дляФормаФильтра");

	Если Форма.Открыта() Тогда
		
		Форма.Активизировать();
		
		Ответ = Вопрос("Предыдущая операция выбора фильтра не завершена." + Символы.ПС + "Завершить?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Форма.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;

	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка из СвойстваИКатегорииКонтрагентов Цикл
		
		Если ПустаяСтрока(Строка.ИмяФильтра) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Кроме этой строки
		Если СвойстваИКатегорииКонтрагентов.Индекс(Строка) <> СвойстваИКатегорииКонтрагентов.Индекс(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока) Тогда
			
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяФильтра);
			
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущиеДанные.ИмяФильтра) Тогда
		
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущиеДанные.ИмяФильтра);
		
	КонецЕсли;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИсходноеДерево", мДеревоСвойстваКатегории.Скопировать());
	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораФильтров = Форма;
	
КонецПроцедуры // СвойстваИКатегорииКонтрагентовПредставлениеФильтраНачалоВыбора()

// Обработчик события ОбработкаВыбора элемента формы СвойстваИКатегорииКонтрагентов.ПредставлениеФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовПредставлениеФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТабличноеПоле = ЭлементыФормы.СвойстваИКатегорииКонтрагентов;

	Если ТабличноеПоле.ТекущаяСтрока = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;

	РедактируемаяСтрока = ТабличноеПоле.Значение[ТабличноеПоле.Значение.Индекс(ТабличноеПоле.ТекущаяСтрока)];

	Для Каждого Строка из ВыбранноеЗначение Цикл 

		РедактируемаяСтрока.ИмяФильтра = Строка.ИмяФильтра;
		РедактируемаяСтрока.ПредставлениеФильтра = Строка.ПредставлениеФильтра;
		РедактируемаяСтрока.ОписаниеТиповЗначенийОтбора = Строка.ОписаниеТипов;
		РедактируемаяСтрока.Свойство = Строка.Свойство;
	
		МассивТипов = Строка.ОписаниеТипов.Типы();

		// Если тип единичный, то присвоим пустое значение этого типа
		Если МассивТипов.Количество() = 1 Тогда
			
			РедактируемаяСтрока.ЗначениеФильтра = ОбщегоНазначения.ПустоеЗначениеТипа(МассивТипов[0]);
			
		Иначе
			
			РедактируемаяСтрока.ЗначениеФильтра = Неопределено;
			
		КонецЕсли;

		РедактируемаяСтрока.Использование = Истина;
		РедактируемаяСтрока.ВидСравненияФильтра = ВидСравнения.Равно;

	КонецЦикла;

КонецПроцедуры // СвойстваИКатегорииКонтрагентовПредставлениеФильтраОбработкаВыбора()

// Обработчик события НачалоВыбораИзСписка элемента формы СвойстваИКатегорииКонтрагентов.ВидСравненияФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовВидСравненияФильтраНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВидовСравнения = Новый СписокЗначений;
	
	Если СтрЧислоВхождений(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ИмяФильтра, "Категории") Тогда
		
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
		
	Иначе
		
		СписокВидовСравнения.Добавить(ВидСравнения.Равно);
		СписокВидовСравнения.Добавить(ВидСравнения.НеРавно);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСписке);
		СписокВидовСравнения.Добавить(ВидСравнения.НеВСпискеПоИерархии);
		
	КонецЕсли; 

	Элемент.СписокВыбора = СписокВидовСравнения;

КонецПроцедуры // СвойстваИКатегорииКонтрагентовВидСравненияФильтраНачалоВыбораИзСписка()

// Обработчик события ОбработкаВыбора элемента формы СвойстваИКатегорииКонтрагентов.ВидСравненияФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовВидСравненияФильтраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗначениеОтбораТекущейСтроки = ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра;

	Если ВыбранноеЗначение = ВидСравнения.Равно ИЛИ ВыбранноеЗначение = ВидСравнения.НеРавно Тогда

		Элемент.АвтопереносСтрок = Ложь;
		
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) = Тип("СписокЗначений") И ЗначениеОтбораТекущейСтроки.Количество() > 0 Тогда

			ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра = ЗначениеОтбораТекущейСтроки[0].Значение;

		КонецЕсли;

	Иначе

		Элемент.АвтопереносСтрок= Истина;
		
		Если ТипЗнч(ЗначениеОтбораТекущейСтроки) <> Тип("СписокЗначений") Тогда

			СтароеЗначение = ЗначениеОтбораТекущейСтроки;
			ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра = Новый СписокЗначений;
			
			Если СтароеЗначение <> Неопределено Тогда
				
				ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ЗначениеФильтра.Добавить(СтароеЗначение);
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // СвойстваИКатегорииКонтрагентовВидСравненияФильтраОбработкаВыбора()

// Обработчик события НачалоВыбора элемента формы СвойстваИКатегорииКонтрагентов.ЗначениеФильтра.
//
Процедура СвойстваИКатегорииКонтрагентовЗначениеФильтраНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ПустаяСтрока(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ПредставлениеФильтра) Тогда
		
		Предупреждение("Выберите фильтр!");
		СтандартнаяОбработка=Ложь;
		Возврат;
		
	КонецЕсли;

	Фильтр = ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока;

	Если Фильтр.ОписаниеТиповЗначенийОтбора = Неопределено Тогда
	
		СтрокаФильтров = мДеревоСвойстваКатегории.Строки.Найти(Фильтр.ИмяФильтра, "ИмяФильтра", Истина);
		
		Если СтрокаФильтров <> Неопределено Тогда
			
			Фильтр.ОписаниеТиповЗначенийОтбора = СтрокаФильтров.ОписаниеТиповСвойство;
			
		КонецЕсли; 
		
	
	КонецЕсли; 
	
	Владелец = ОпределитьВладельцаОтбора();
	ТипыФильтра = Фильтр.ОписаниеТиповЗначенийОтбора;
	МассивТипов = ТипыФильтра.Типы();

	Если ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ВидСравненияФильтра = ВидСравнения.Равно
		ИЛИ ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ВидСравненияФильтра = ВидСравнения.НеРавно Тогда

		МассивТипов = ТипыФильтра.Типы();

		Если МассивТипов.Количество() = 1 Тогда

			Если МассивТипов[0] = Тип("Число") Тогда
				
				Элемент.Значение = 0;
				
			ИначеЕсли МассивТипов[0] = Тип("Строка") Тогда
				
				Элемент.Значение = "";
				
			ИначеЕсли МассивТипов[0] = Тип("Дата") Тогда
				
				Элемент.Значение = ТекущаяДата();
				
			ИначеЕсли МассивТипов[0] = Тип("Булево") Тогда
				
				Элемент.Значение = Ложь;
				
			Иначе
				
				Элемент.Значение = Новый(МассивТипов[0]);
				
			КонецЕсли;

			Элемент.ВыбиратьТип = Ложь;

		Иначе

			Элемент.ОграничениеТипа = Фильтр.ОписаниеТиповЗначенийОтбора;
			Элемент.ВыбиратьТип = Истина;

		КонецЕсли;

	Иначе

		МассивТипов = Новый Массив;
		МассивТипов.Добавить("СписокЗначений");
		ОписаниеТиповСписокЗначений = Новый ОписаниеТипов(МассивТипов);
		Элемент.ОграничениеТипа = ОписаниеТиповСписокЗначений;
		Элемент.Значение.ТипЗначения = Фильтр.ОписаниеТиповЗначенийОтбора;
		Элемент.ВыбиратьТип = Ложь;

	КонецЕсли;

	Если Владелец <> Неопределено Тогда
		
		Элемент.ВыборПоВладельцу = Владелец;
		
	КонецЕсли;
	
	Если МассивТипов[0] = Тип("СправочникСсылка.КатегорииОбъектов") Тогда

		СтандартнаяОбработка = Ложь;
		СтрокаФильтры = мДеревоСвойстваКатегории.Строки.Найти(ЭлементыФормы.СвойстваИКатегорииКонтрагентов.ТекущаяСтрока.ИмяФильтра, "ИмяФильтра", Истина);
							
		ФормаВыбораКатегории= Справочники["КатегорииОбъектов"].ПолучитьФормуВыбора(, Элемент);
		ФормаВыбораКатегории.РежимВыбора = Истина;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Значение = СтрокаФильтры.Свойство;
		ФормаВыбораКатегории.Отбор.НазначениеКатегории.Использование = Истина;

		ФормаВыбораКатегории.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаВыбораКатегории.Открыть();

	КонецЕсли;
	
КонецПроцедуры // СвойстваИКатегорииКонтрагентовЗначениеФильтраНачалоВыбора()

// Обработчик события НачалоВыбораИзСписка элемента формы ВидСравненияНадежность.
//
Процедура ВидСравненияНадежностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидСравненияНадежностьНачалоВыбораИзСписка()

// Обработчик события НачалоВыбораИзСписка элемента формы ВидСравненияСрокВыполненияЗаказа.
//
Процедура ВидСравненияСрокВыполненияЗаказаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидСравненияСрокВыполненияЗаказаНачалоВыбораИзСписка()

// Обработчик события ПриИзменении элемента формы ЗначениеНадежность.
//
Процедура ЗначениеНадежностьПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры // ЗначениеНадежностьПриИзменении()

// Обработчик события ПриИзменении элемента формы ЗначениеСрокВыполненияЗаказа.
//
Процедура ЗначениеСрокВыполненияЗаказаПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры // ЗначениеСрокВыполненияЗаказаПриИзменении()

// Обработчик события ПриИзменении элемента формы ЗначениеСрокВыполненияЗаказаНач.
//
Процедура ЗначениеСрокВыполненияЗаказаНачПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры // ЗначениеСрокВыполненияЗаказаПриИзменении()

// Обработчик события ПриИзменении элемента формы ЗначениеСрокВыполненияЗаказаКон.
//
Процедура ЗначениеСрокВыполненияЗаказаКонПриИзменении(Элемент)
	
	ЗначениеОтбораПриИзменении(Элемент);
	
КонецПроцедуры // ЗначениеСрокВыполненияЗаказаКонПриИзменении()

// Обработчик события Очистка элемента формы ЗначениеНадежность.
//
Процедура ЗначениеНадежностьОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьЭлемент(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗначениеНадежностьОчистка()

// Обработчик события Очистка элемента формы ЗначениеСрокВыполненияЗаказа.
//
Процедура ЗначениеСрокВыполненияЗаказаОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьЭлемент(Элемент);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ЗначениеСрокВыполненияЗаказаОчистка()

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаТоваров.УстановитьФлажки.
//
Процедура КоманднаяПанельТаблицаТоваровУстановитьФлажки(Кнопка)
	
	ИзменитьФлажкиТаблицаТоваров(Истина);
	
КонецПроцедуры // КоманднаяПанельТаблицаТоваровУстановитьФлажки()

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаТоваров.СнятьФлажки.
//
Процедура КоманднаяПанельТаблицаТоваровСнятьФлажки(Кнопка)
	
	ИзменитьФлажкиТаблицаТоваров(Ложь);
	
КонецПроцедуры // КоманднаяПанельТаблицаТоваровСнятьФлажки()

// Обработчик события ПриВыводеСтроки элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Для каждого Колонка из Элемент.Колонки Цикл
		
		Если Колонка.Имя = "НоменклатураПредставление" Тогда
			
			Продолжить;
			
		Иначе
			
			Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ЯчейкаНедоступна") Тогда
				
				ОформлениеСтроки.Ячейки[Колонка.Имя].ОтображатьФлажок = Ложь;
				ОформлениеСтроки.Ячейки[Колонка.Имя].Видимость = Ложь;
				Продолжить;
				
			КонецЕсли;
			
			Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ЯчейкаТолькоПросмотр") Тогда
				
				ОформлениеСтроки.Ячейки[Колонка.Имя].ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.СветлоСерый;
				Продолжить;
				
			КонецЕсли;
			
			Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("МинимальнаяЦена") И ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ОсновнойПоставщик") Тогда
				
				ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.ТемноКрасный;
				
			Иначе
				
				Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("МинимальнаяЦена") Тогда
					
					ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.Зеленый;
					
				КонецЕсли;
				
				Если ДанныеСтроки["СтруктураДанных" + Колонка.Имя].Получить("ОсновнойПоставщик") Тогда
					
					ОформлениеСтроки.Ячейки[Колонка.Имя].ЦветТекста = WebЦвета.Синий;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла; 
	
КонецПроцедуры // КонечнаяТаблицаПриВыводеСтроки()

// Обработчик события ПередНачаломИзменения элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "НоменклатураПредставление" Тогда
		
		Элемент.ТекущиеДанные.Номенклатура.ПолучитьФорму().Открыть();
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры // КонечнаяТаблицаПередНачаломИзменения()

// Обработчик события ПередУдалением элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // КонечнаяТаблицаПередУдалением()

// Обработчик события ПередНачаломДобавления элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры // КонечнаяТаблицаПередНачаломДобавления()

// Обработчик события ПриИзмененииФлажка элемента формы КонечнаяТаблица.
//
Процедура КонечнаяТаблицаПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущиеДанные["Флаг" + Колонка.Имя] Тогда
		
		Для каждого КолонкаКонечнойТаблицы из КонечнаяТаблица.Колонки Цикл
			
			Если Лев(КолонкаКонечнойТаблицы.Имя, 4) = "Флаг" И КолонкаКонечнойТаблицы.Имя <> "Флаг" + Колонка.Имя Тогда
				
				Элемент.ТекущиеДанные[КолонкаКонечнойТаблицы.Имя] = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // КонечнаяТаблицаПриИзмененииФлажка()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ОткрытьУсловияПоставки.
//
Процедура КоманднаяПанельКонечнаяТаблицаОткрытьУсловияПоставки(Кнопка)
	
	УсловияПоставки = ОпределитьДокументОсобыхУсловийПоставки();
	
	Если ТипЗнч(УсловияПоставки) <> Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
		
		Предупреждение("Условия поставки не найдены.");
		
	Иначе
		
		УсловияПоставки.ПолучитьФорму(, ЭтаФорма).Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры // КоманднаяПанельКонечнаяТаблицаОткрытьУсловияПоставки()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ОткрытьУсловияПоставки.
//
Процедура КонечнаяТаблицаПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяКолонка = Неопределено Тогда
		
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность = Ложь;
		Возврат;
		
	КонецЕсли; 
	
	ИмяКолонки = Элемент.ТекущаяКолонка.Имя;
	
	Если ИмяКолонки = "НоменклатураПредставление" Тогда
		
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность = Ложь;
		Возврат;
		
	КонецЕсли; 
	
	Если Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ЯчейкаНедоступна") ИЛИ Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ЯчейкаТолькоПросмотр") Тогда
		
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность = Ложь;
		Возврат;
		
	КонецЕсли; 
	
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьДоговор.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ИсторияПокупок.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.ОткрытьУсловияПоставки.Доступность = Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки");
	ЭлементыФормы.КоманднаяПанельКонечнаяТаблица.Кнопки.АнализУсловийПоставки.Доступность = Элемент.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки");
	
КонецПроцедуры // КонечнаяТаблицаПриАктивизацииЯчейки()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ОткрытьДоговор.
//
Процедура КоманднаяПанельКонечнаяТаблицаОткрытьДоговор(Кнопка)
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонки = ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя;
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ОсобыеУсловияПоставки") Тогда
		
		Если ТипЗнч(ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки")) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки").ПолучитьФорму(, ЭтаФорма).Открыть();
			
		КонецЕсли; 
		
	Иначе
		
		Если ТипЗнч(ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки")) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ДоговорУсловийПоставки").ПолучитьФорму(, ЭтаФорма).Открыть();
			
		Иначе
			
			ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные["СтруктураДанных" + ИмяКолонки].Получить("ТипЦен").Владелец.ОсновнойДоговорКонтрагента.ПолучитьФорму(, ЭтаФорма).Открыть();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // КоманднаяПанельКонечнаяТаблицаОткрытьДоговор()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.АнализУсловийПоставки.
//
Процедура КоманднаяПанельКонечнаяТаблицаАнализУсловийПоставки(Кнопка)

	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИмяКолонки = ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя;
	
	УсловияПоставки = ОпределитьДокументОсобыхУсловийПоставки();
	
	Если ТипЗнч(УсловияПоставки) <> Тип("ДокументСсылка.УсловияПоставокПоДоговорамКонтрагентов") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отчет = Отчеты.ВыполнениеУсловийПоДоговорамКонтрагентов.Создать();
	Отчет.ДатаОкончания = ТекущаяДата();
	Отчет.ГруппировкаКонтрагент = Истина;
	Отчет.ГруппировкаДоговорКонтрагента = Истина;
	Отчет.ГруппировкаДокументУсловий = Истина;
	Отчет.ГруппировкаДокументВыполненияУсловий = Истина;
	Отчет.ГруппировкаНоменклатураУсловий = Истина;
	Отчет.РаскрашиватьГруппировки = Истина;
	
	ЭлементОтбора = Отчет.Отбор.Добавить("ДокументУсловий",, "Документ условий");
	ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	ЭлементОтбора.Значение = УсловияПоставки;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = Отчет.Отбор.Добавить("Номенклатура",, "Номенклатура условий");
	ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	ЭлементОтбора.Значение = ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.Номенклатура;
	ЭлементОтбора.Использование = Истина;
	
	ФормаОтчета = Отчет.ПолучитьФорму("Форма");
	
	ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
	Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ТабличныйДокумент);
	ФормаОтчета.Открыть();

КонецПроцедуры // КоманднаяПанельКонечнаяТаблицаАнализУсловийПоставки()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонечнаяТаблица.ИсторияПокупок.
//
Процедура КоманднаяПанельКонечнаяТаблицаИсторияПокупок(Кнопка)
	
	Если ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные = Неопределено ИЛИ ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Отчет = Отчеты.ОтчетСписокКроссТаблица.Создать();
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяРегистра", "Закупки");
	СтруктураНастроек.Вставить("ДатаНач", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяДатаНачалаОтчетов"));
	СтруктураНастроек.Вставить("ДатаКон", ТекущаяДата());
	
	СоответствиеОтбора = Новый Соответствие;
	СоответствиеОтбора.Вставить("ДоговорКонтрагента.Владелец", ПолучитьПоставщикаПоИмениКолонки(ЭлементыФормы.КонечнаяТаблица.ТекущаяКолонка.Имя));
	СоответствиеОтбора.Вставить("Номенклатура", ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.Номенклатура);
	СоответствиеОтбора.Вставить("ХарактеристикаНоменклатуры", ЭлементыФормы.КонечнаяТаблица.ТекущиеДанные.ХарактеристикаНоменклатуры);
	СтруктураНастроек.Вставить("Отбор",СоответствиеОтбора);
	
	СтруктураНастроек.Вставить("ГруппировкиСтрок", Новый Структура("ЗаказПоставщику", "ЗаказПоставщику"));
	СтруктураНастроек.Вставить("ВыбранныеПоля",  Новый Структура("ДокументЗакупки", "ДокументЗакупки"));
	СтруктураНастроек.Вставить("РаскрашиватьИзмерения", Истина);
	
	Отчет.Настроить(СтруктураНастроек);
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры // КоманднаяПанельКонечнаяТаблицаИсторияПокупок()

// Заполним состав колонок дерева значений мДеревоСвойстваКатегории
мДеревоСвойстваКатегории = Новый ДеревоЗначений;

мДеревоСвойстваКатегории.Колонки.Добавить("ИмяФильтра");
мДеревоСвойстваКатегории.Колонки.Добавить("ПредставлениеФильтра");
мДеревоСвойстваКатегории.Колонки.Добавить("Свойство");
мДеревоСвойстваКатегории.Колонки.Добавить("ОписаниеТиповСвойство");

// Заполним состав колонок таблицы значений СвойстваИКатегорииКонтрагентов
СвойстваИКатегорииКонтрагентов.Колонки.Добавить("ИмяФильтра");
СвойстваИКатегорииКонтрагентов.Колонки.Добавить("ОписаниеТиповЗначенийОтбора");
СвойстваИКатегорииКонтрагентов.Колонки.Добавить("Свойство");

мДеревоЗапросаРезультирующейТаблицы = Новый ДеревоЗначений;

ТаблицаТоваров.Колонки.Добавить("Номенклатура");
ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНоменклатуры");
