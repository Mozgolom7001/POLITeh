Процедура ЗаполнитьДанныеПечатиТТНПриложение4()
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеДокумента = ПечатьТТН(Истина);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		ДанныеДокумента = ПечатьТТН_РасходныйОрдерНаТовары(Истина);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДанныеДокумента = ПечатьТТН_ПеремещениеТоваров(Истина);
	Иначе
		возврат;
	КонецЕсли;
	
	Для Каждого ЗначениеЗаполненияБланкаТТН Из ДанныеДокумента Цикл
		Если ЭлементыФормы.Найти(ЗначениеЗаполненияБланкаТТН.Ключ) <> Неопределено Тогда
			ЭтаФорма[ЗначениеЗаполненияБланкаТТН.Ключ] = ЗначениеЗаполненияБланкаТТН.Значение;
		КонецЕсли;
	КонецЦикла;
	Пункт0_1 = 1;
	Пункт0_0 = 1;
КонецПроцедуры // ЗаполнитьДанныеПечатиТТНПриложение4()

Функция ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка)
	
	ДанныеДокумента = Новый Структура();
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	
	СведенияОГрузополучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	ДанныеДокумента = Новый Структура();
	//ВЦ+
	//Если Шапка.ГрузополучательЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
	//	ДанныеДокумента.Вставить("Пункт2_1", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	//ИначеЕсли Шапка.ГрузополучательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
	//	ДанныеДокумента.Вставить("Пункт2_2", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	//КонецЕсли;
	
	ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "Представление,ФактическийАдрес,Телефоны");
	ДанныеДокумента.Вставить("Пункт2_1", ПредставлениеГрузополучателя);
	ДанныеДокумента.Вставить("Пункт2_2", ПредставлениеГрузополучателя);
	ДанныеДокумента.Вставить("Пункт7_1", ПредставлениеГрузополучателя);
	
	//ВЦ-
	
	//ВЦ+
	//Если Шапка.ГрузоотправительЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
	//	ДанныеДокумента.Вставить("Пункт1_1", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	//	ДанныеДокумента.Вставить("Пункт15_6", ДанныеДокумента.Пункт1_1);
	//ИначеЕсли Шапка.ГрузоотправительЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
	//	ДанныеДокумента.Вставить("Пункт1_2", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	//	ДанныеДокумента.Вставить("Пункт15_6", ДанныеДокумента.Пункт1_2);
	//КонецЕсли;
	ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "Представление,ФактическийАдрес,Телефоны");
	ДанныеДокумента.Вставить("Пункт1_1", ПредставлениеГрузоотправителя);
	ДанныеДокумента.Вставить("Пункт1_2", ПредставлениеГрузоотправителя);
	ДанныеДокумента.Вставить("Пункт15_6", ПредставлениеГрузоотправителя);
	ДанныеДокумента.Вставить("Пункт6_1", ПредставлениеГрузоотправителя);
	//ВЦ-
	
	//ДанныеДокумента.Вставить("Пункт3_2", "Всего мест: " + ЧислоПрописью(ЗапросТовары.Итог("КоличествоМест"), ,",,,,,,,,0"));
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ЗапросТовары.Итог("МассаБрутто") > 0.00 Тогда
		ДанныеДокумента.Вставить("Пункт3_3", "Масса брутто: " + ЧислоПрописью(ЗапросТовары.Итог("МассаБрутто"), ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
	КонецЕсли;
	ДанныеДокумента.Вставить("Пункт16_1", СведенияОГрузоотправитель.Представление);
	ДанныеДокумента.Вставить("Пункт10_3Ведомость", СведенияОГрузополучателе.Представление);
	
	//ВЦ+
	СторкаПункт3_1="";
	Для Каждого СтрокаТовары Из ЗапросТовары Цикл
		
		СторкаПункт3_1 = СторкаПункт3_1 + " " + 
		СтрокаТовары.ТоварНаименование + " - " +
		СтрокаТовары.Количество + " " +
		СтрокаТовары.ЕдиницаИзмерения + ", ";
		
	КонецЦикла;
	ДанныеДокумента.Вставить("Пункт3_1", СторкаПункт3_1);
	
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Грузоотправитель, Шапка.ДатаДокумента, );
	
	ДанныеДокумента.Вставить("Пункт6_7", Руководители.Руководитель);
	ДанныеДокумента.Вставить("Пункт9_2", Руководители.Руководитель);
	ДанныеДокумента.Вставить("Пункт16_1", Руководители.Руководитель);
	ДанныеДокумента.Вставить("Пункт16_2", Руководители.Руководитель);
	//ВЦ-
	возврат ДанныеДокумента;
	
КонецФункции //ПолучитьДанныеДляТТНПриложение4()

Функция ПечатьТТН(ПолучитьДанныеПечати = Ложь) Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Документ.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Документ.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",  Документ);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент.ЮрФизЛицо
	|	      ИНАЧЕ Грузополучатель.ЮрФизЛицо КОНЕЦ КАК ГрузополучательЮрФизЛицо,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация
	|	      ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      ТОГДА Организация.ЮрФизЛицо
	|	      ИНАЧЕ Грузоотправитель.ЮрФизЛицо КОНЕЦ КАК ГрузоотправительЮрФизЛицо,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	Подразделение,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов       КАК Курс,
	|	КратностьВзаиморасчетов  КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	ОтпускРазрешил,
	|	ОтпускПроизвел,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьВыдана
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);

	Если Документ.ВалютаДокумента = Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", Документ.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", Документ.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.МассаБрутто                                  КАК МассаБрутто,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление           КАК ВидУпаковки,
	|	ВложенныйЗапрос.Характеристика      КАК Характеристика,
	|	ВложенныйЗапрос.Серия               КАК Серия,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВЫБОР
	|		КОГДА((ВложенныйЗапрос.ПроцентСкидкиНаценки = 0) И 
	|		      (ВложенныйЗапрос.ПроцентАвтоматическихСкидок = 0))
	|	ТОГДА ЛОЖЬ
	|	ИНАЧЕ Истина
	|	КОНЕЦ                                КАК ЕстьСкидкиПоСтроке,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест      КАК КоличествоМест,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.КоличествоМест > 0
	|				ТОГДА РеализацияТоваровУслуг.КоличествоМест * РеализацияТоваровУслуг.ЕдиницаИзмеренияМест.Вес
	|			ИНАЧЕ РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.ЕдиницаИзмерения.Вес
	|		КОНЕЦ) КАК МассаБрутто,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры            КАК Характеристика,
	|		РеализацияТоваровУслуг.СерияНоменклатуры                     КАК Серия,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность             КАК Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|		СУММА(РеализацияТоваровУслуг.Количество)                     КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.КоличествоМест)                 КАК КоличествоМест,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность)  КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность)  КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                  КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|		РеализацияТоваровУслуг.СерияНоменклатуры,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена,
	|		РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	РеализацияТоваровУслуг.МассаБрутто                     КАК МассаБрутто,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура." + ТоварКод + "   КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	Ложь                                                  КАК ЕстьСкидкиПоСтроке,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	0                                                     КАК КоличествоМест,
	|	РеализацияТоваровУслуг.Сумма                          КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                      КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслуг.Количество * РеализацияТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Вес) КАК МассаБрутто,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность         КАК Цена,
	|	СУММА(РеализацияТоваровУслуг.Количество)                 КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма * &Курс / &Кратность) КАК Сумма,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)              КАК НомерСтроки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Цена
	|) КАК РеализацияТоваровУслуг
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Если ПолучитьДанныеПечати = Истина Тогда
		Возврат ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка);
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;

	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет       = ПолучитьМакет("ТТН");

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПлательщикПредставление       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");

		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		СуммаБезНДС = СуммаСНДС - СуммаНДС;
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		Если Шапка.СуммаВключаетНДС
		 Или ВыборкаСтрок.ЕстьСкидкиПоСтроке Тогда
			ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);
		Иначе
			ОбластьМакета.Параметры.Цена = ВыборкаСтрок.Цена;
		КонецЕсли;

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;
	
	// Отпуск товара разрешил
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
		ФИООтпускРазрешил       = Руководитель;
		ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	Иначе
		ФамилияИмяОтчествоФизЛица        = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица    = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускРазрешил, Шапка.ДатаДокумента, Шапка.Организация);
		ФамилияИмяОтчествоОтпускРазрешил = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИООтпускРазрешил                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускРазрешил);
		ДолжностьОтпускРазрешил          = ПодразделениеДолжностьФизЛица.Должность;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ФИООтпускРазрешил       = ФИООтпускРазрешил;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;
	
	// Отпуск товара произвел
	Если НЕ ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);
	Иначе
		ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента);
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтпускПроизвел, Шапка.ДатаДокумента, Шапка.Организация);
	КонецЕсли;
	
	ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;
	
	ОбластьМакета.Параметры.ФИООтпускПроизвел       = ФИООтпускПроизвел;
	ОбластьМакета.Параметры.ОтпускПроизвелДолжность = ДолжностьОтпускПроизвел;
	
	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДатаДоверенности = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
	ОбластьМакета.Параметры.ДоверенностьВыдана = Шапка.ДоверенностьВыдана;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.КоличествоСтрок         = КоличествоСтрок;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	ОбластьМакета.Параметры.ВсегоМестПрописью       = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ВсегоНаименований       = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ТабДокумент.Вывести(ОбластьМакета);
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , НЕ ЛицензионнаяКарточка);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка);

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;

	ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;
	ОбластьМакета.Параметры.Номер                     = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПеревозчик     = Перевозчик;
	ОбластьМакета.Параметры.МаркаАвтомобиля           = МаркаАвтомобиля;
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ОрганизацияЗаказчик       = Заказчик;
	ОбластьМакета.Параметры.ФИОВодителя               = Водитель;
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
	ОбластьМакета.Параметры.ВидПеревозки              = ВидПеревозки;
	ОбластьМакета.Параметры.ПунктПогрузки             = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки            = ПунктРазгрузки;
	ОбластьМакета.Параметры.Прицеп                    = МаркаПрицепа;
	ОбластьМакета.Параметры.ГосНомерПрицепа           = ГосНомерПрицепа;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()

// Функция осуществляет печать формы "1-Т"
// на основании документа "ПеремещениеТоваров".
//
Функция ПечатьТТН_ПеремещениеТоваров(ПолучитьДанныеПечати = Ложь) Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Документ.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Документ.СкладОтправитель);
	Запрос.УстановитьПараметр("ТекущийДокумент",    Документ);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВидСкладаНТТ",       Перечисления.ВидыСкладов.НТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата                               КАК ДатаДокумента,
	|	Организация                        КАК Организация,
	|	Организация                        КАК ЮрФизЛицо,
	|	Организация                        КАК Поставщик,
	|	Организация                        КАК Контрагент,
	|	Организация                        КАК Руководители,
	|	Организация                        КАК Грузополучатель,
	|	Организация.ЮрФизЛицо              КАК ГрузополучательЮрФизЛицо,
	|	Организация                        КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо              КАК ГрузоотправительЮрФизЛицо,
	|	Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	&ПустойКонтрагент                  КАК Покупатель,
	|	&ПустойКонтрагент                  КАК Плательщик,
	|	Подразделение                      КАК Подразделение,
	|	ВЫБОР КОГДА (СкладОтправитель.ВидСклада = &ВидСкладаНТТ ИЛИ СкладПолучатель.ВидСклада = &ВидСкладаНТТ) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьНТТ,
	|	ОтветственныеЛица.ФизическоеЛицо   КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокПеремещение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = ДокПеремещение.СкладОтправитель
	|
	|ГДЕ
	|	ДокПеремещение.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);
	Запрос.УстановитьПараметр("ЕстьНТТ",         Шапка.ЕстьНТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.МассаБрутто                                  КАК МассаБрутто,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление           КАК ВидУпаковки,
	|	ВложенныйЗапрос.Характеристика                               КАК Характеристика,
	|	ВложенныйЗапрос.Серия                                        КАК Серия,
	|	ВложенныйЗапрос.Цена                                         КАК Цена,
	|	ВложенныйЗапрос.Количество                                   КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест                               КАК КоличествоМест,
	|	ВложенныйЗапрос.НомерСтроки                                  КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                                        КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ДокТовар.ЕдиницаИзмеренияМест,
	|		ДокТовар.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ДокТовар.СерияНоменклатуры          КАК Серия,
	|		ВЫБОР КОГДА &ЕстьНТТ ТОГДА ДокТовар.Цена ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|		СУММА(
	|				ДокТовар.Количество
	|				* ДокТовар.Номенклатура.ЕдиницаХраненияОстатков.Вес
	|			)                               КАК МассаБрутто,
	|		СУММА(ДокТовар.Количество)          КАК Количество,
	|		СУММА(ДокТовар.КоличествоМест)      КАК КоличествоМест,
	|		МИНИМУМ(ДокТовар.НомерСтроки)       КАК НомерСтроки,
	|		0                                   КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ДокТовар
	|	ГДЕ
	|		ДокТовар.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ДокТовар.ЕдиницаИзмеренияМест,
	|		ДокТовар.ХарактеристикаНоменклатуры,
	|		ДокТовар.СерияНоменклатуры,
	|		ВЫБОР КОГДА &ЕстьНТТ ТОГДА ДокТовар.Цена ИНАЧЕ 0 КОНЕЦ
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТара.Номенклатура                                  КАК Номенклатура,
	|	ДокТара.МассаБрутто                                   КАК МассаБрутто,
	|	ВЫРАЗИТЬ(ДокТара.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ДокТара.Номенклатура." + ТоварКод + "                 КАК Артикул,
	|	ДокТара.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ДокТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ДокТара.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	0                                                     КАК Цена,
	|	ДокТара.Количество                                    КАК Количество,
	|	0                                                     КАК КоличествоМест,
	|	ДокТара.НомерСтроки                                   КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	ДокТара.Номенклатура                                  КАК Номенклатура,
	|	СУММА(ДокТара.Количество)                             КАК Количество,
	|	СУММА(ДокТара.Количество * ДокТара.Номенклатура.ЕдиницаХраненияОстатков.Вес) КАК МассаБрутто,
	|	МИНИМУМ(ДокТара.НомерСтроки)                          КАК НомерСтроки
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ДокТара
	|
	|ГДЕ
	|	ДокТара.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	ДокТара.Номенклатура
	|) КАК ДокТара
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Если ПолучитьДанныеПечати = Истина Тогда
		возврат ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка);
	КонецЕсли;
	ТабДокумент = Новый ТабличныйДокумент;
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет       = ПолучитьМакет("ТТН");
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПлательщикПредставление       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");

		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;

		Если ВыборкаСтрок.Метка = 2
		 ИЛИ НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			Цена      = 0;
			СуммаСНДС = 0;
		Иначе
			Если ВыборкаСтрок.Цена = 0 Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрок.Номенклатура, ВыборкаСтрок.Характеристика,
				                                ТипЦен, Шапка.ДатаДокумента, ВыборкаСтрок.ЕдиницаИзмерения,
				                                мВалютаРегламентированногоУчета, 1, 1);
			Иначе
				Цена = ВыборкаСтрок.Цена;
			КонецЕсли;

			СуммаСНДС = Окр(Количество * Цена, 2);
		КонецЕсли;

		ОбластьМакета.Параметры.Цена  = Цена;
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Главный бухгалтер
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;

	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководитель;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;

	ОбластьМакета.Параметры.ФИООтпускРазрешил       = ФИООтпускРазрешил;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;

	// Отпуск товара произвел
	ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);

	ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;

	ОбластьМакета.Параметры.ФИООтпускПроизвел       = ФИООтпускПроизвел;
	ОбластьМакета.Параметры.ОтпускПроизвелДолжность = ДолжностьОтпускПроизвел;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.КоличествоСтрок         = КоличествоСтрок;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, глЗначениеПеременной("ВалютаРегламентированногоУчета"));
	ОбластьМакета.Параметры.ВсегоМестПрописью       = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ВсегоНаименований       = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , НЕ ЛицензионнаяКарточка);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка);

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;

	ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;
	ОбластьМакета.Параметры.Номер                     = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПеревозчик     = Перевозчик;
	ОбластьМакета.Параметры.МаркаАвтомобиля           = МаркаАвтомобиля;
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ОрганизацияЗаказчик       = Заказчик;
	ОбластьМакета.Параметры.ФИОВодителя               = Водитель;
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
	ОбластьМакета.Параметры.ВидПеревозки              = ВидПеревозки;
	ОбластьМакета.Параметры.ПунктПогрузки             = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки            = ПунктРазгрузки;
	ОбластьМакета.Параметры.Прицеп                    = МаркаПрицепа;
	ОбластьМакета.Параметры.ГосНомерПрицепа           = ГосНомерПрицепа;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН_ПеремещениеТоваров()

// Функция осуществляет печать формы "1-Т"
// на основании документа "РасходныйОрдерНаТовары".
//
Функция ПечатьТТН_РасходныйОрдерНаТовары(ПолучитьДанныеПечати = Ложь) Экспорт

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Документ.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Документ.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",    Документ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер                             КАК Номер,
	|	Дата                              КАК ДатаДокумента,
	|	Организация                       КАК Организация,
	|	Организация                       КАК ЮрФизЛицо,
	|	Организация                       КАК Поставщик,
	|	Контрагент                        КАК Контрагент,
	|	Организация                       КАК Руководители,
	|	Контрагент                        КАК Грузополучатель,
	|	Контрагент.ЮрФизЛицо              КАК ГрузополучательЮрФизЛицо,
	|	Организация                       КАК Грузоотправитель,
	|	Организация.ЮрФизЛицо             КАК ГрузоотправительЮрФизЛицо,
	|	Контрагент.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	Контрагент                        КАК Покупатель,
	|	Контрагент                        КАК Плательщик,
	|	Подразделение                     КАК Подразделение,
	|	ОтветственныеЛица.ФизическоеЛицо  КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК ДокОрдер
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = ДокОрдер.Склад
	|ГДЕ
	|	ДокОрдер.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.МассаБрутто                                  КАК МассаБрутто,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура." + ТоварКод + "                КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияМест.Представление           КАК ВидУпаковки,
	|	ВложенныйЗапрос.Характеристика                               КАК Характеристика,
	|	ВложенныйЗапрос.Серия                                        КАК Серия,
	|	ВложенныйЗапрос.Количество                                   КАК Количество,
	|	ВложенныйЗапрос.КоличествоМест                               КАК КоличествоМест,
	|	ВложенныйЗапрос.НомерСтроки                                  КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                                        КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ДокТовар.Номенклатура               КАК Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|		ДокТовар.ЕдиницаИзмеренияМест       КАК ЕдиницаИзмеренияМест,
	|		ДокТовар.ХарактеристикаНоменклатуры КАК Характеристика,
	|		ДокТовар.СерияНоменклатуры          КАК Серия,
	|		СУММА(
	|				ДокТовар.Количество
	|				* ДокТовар.Номенклатура.ЕдиницаХраненияОстатков.Вес
	|			)                               КАК МассаБрутто,
	|		СУММА(ДокТовар.Количество)          КАК Количество,
	|		СУММА(ДокТовар.КоличествоМест)      КАК КоличествоМест,
	|		МИНИМУМ(ДокТовар.НомерСтроки)       КАК НомерСтроки,
	|		0                                   КАК Метка
	|	ИЗ
	|		Документ.РасходныйОрдерНаТовары.Товары КАК ДокТовар
	|	ГДЕ
	|		ДокТовар.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ДокТовар.ЕдиницаИзмеренияМест,
	|		ДокТовар.ХарактеристикаНоменклатуры,
	|		ДокТовар.СерияНоменклатуры
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокТара.Номенклатура                                  КАК Номенклатура,
	|	ДокТара.МассаБрутто                                   КАК МассаБрутто,
	|	ВЫРАЗИТЬ(ДокТара.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
	|	ДокТара.Номенклатура." + ТоварКод + "                 КАК Артикул,
	|	ДокТара.Номенклатура.ЕдиницаХраненияОстатков.Представление               КАК БазоваяЕдиницаНаименование,
	|	ДокТара.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ДокТара.Номенклатура.ЕдиницаХраненияОстатков                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	NULL                                                  КАК Характеристика,
	|	NULL                                                  КАК Серия,
	|	ДокТара.Количество                                    КАК Количество,
	|	0                                                     КАК КоличествоМест,
	|	ДокТара.НомерСтроки                                   КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|(ВЫБРАТЬ
	|	ДокТара.Номенклатура                                  КАК Номенклатура,
	|	СУММА(
	|			ДокТара.Количество
	|			* ДокТара.Номенклатура.ЕдиницаХраненияОстатков.Вес
	|	)                                                     КАК МассаБрутто,
	|	СУММА(ДокТара.Количество)                             КАК Количество,
	|	МИНИМУМ(ДокТара.НомерСтроки)                          КАК НомерСтроки
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ВозвратнаяТара КАК ДокТара
	|ГДЕ
	|	ДокТара.Ссылка = &ТекущийДокумент
	|СГРУППИРОВАТЬ ПО
	|	ДокТара.Номенклатура
	|) КАК ДокТара
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Если ПолучитьДанныеПечати = Истина Тогда
		Возврат ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка);
	КонецЕсли;
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет       = ПолучитьМакет("ТТН");


	// Выводим общие реквизиты шапки
	Если Шапка.БанковскийСчет = Null Тогда
		СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента);
	Иначе	
		СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента,, Шапка.БанковскийСчет);
	КонецЕсли;	
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПлательщикПредставление       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОПоставщике.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

			ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

			// очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование)
		                                          + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрок)
		                                          + ?(ВыборкаСтрок.Метка = 2, " (возвратная тара)", "");

		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;

		Если ВыборкаСтрок.Метка = 2
		 ИЛИ НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			Цена      = 0;
			СуммаСНДС = 0;
		Иначе
			ДатаДокумента = Шапка.ДатаДокумента;
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрок.Номенклатура, ВыборкаСтрок.Характеристика,
			                                ТипЦен, ДатаДокумента, ВыборкаСтрок.ЕдиницаИзмерения,
			                                мВалютаРегламентированногоУчета, 1, 1);

			СуммаСНДС = Окр(Количество * Цена, 2);
		КонецЕсли;

		ОбластьМакета.Параметры.Цена  = Цена;
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// увеличим итоги по дукументу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

	ТабДокумент.Вывести(ОбластьИтоговПоСтранице);

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Руководители, Шапка.ДатаДокумента,);
	Руководитель = Руководители.Руководитель;
	Бухгалтер    = Руководители.ГлавныйБухгалтер;

	// Главный бухгалтер
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Бухгалтер;

	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководитель;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;

	ОбластьМакета.Параметры.ФИООтпускРазрешил       = ФИООтпускРазрешил;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;

	// Отпуск товара произвел
	ФамилияИмяОтчествоФизЛица     = ФормированиеПечатныхФорм.ФамилияИмяОтчество(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента);
	ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(Шапка.ОтветственноеЛицо, Шапка.ДатаДокумента, Шапка.Организация);

	ФамилияИмяОтчествоОтпускПроизвел = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
	ФИООтпускПроизвел                = ОбщегоНазначения.ФамилияИнициалыФизЛица(ФамилияИмяОтчествоОтпускПроизвел);
	ДолжностьОтпускПроизвел          = ПодразделениеДолжностьФизЛица.Должность;

	ОбластьМакета.Параметры.ФИООтпускПроизвел       = ФИООтпускПроизвел;
	ОбластьМакета.Параметры.ОтпускПроизвелДолжность = ДолжностьОтпускПроизвел;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.КоличествоСтрок         = КоличествоСтрок;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
	ОбластьМакета.Параметры.ВсегоМестПрописью       = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ВсегоНаименований       = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , НЕ ЛицензионнаяКарточка);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка);

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;

	ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;
	ОбластьМакета.Параметры.Номер                     = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПеревозчик     = Перевозчик;
	ОбластьМакета.Параметры.МаркаАвтомобиля           = МаркаАвтомобиля;
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ОрганизацияЗаказчик       = Заказчик;
	ОбластьМакета.Параметры.ФИОВодителя               = Водитель;
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
	ОбластьМакета.Параметры.ВидПеревозки              = ВидПеревозки;
	ОбластьМакета.Параметры.ПунктПогрузки             = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки            = ПунктРазгрузки;
	ОбластьМакета.Параметры.Прицеп                    = МаркаПрицепа;
	ОбластьМакета.Параметры.ГосНомерПрицепа           = ГосНомерПрицепа;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН_РасходныйОрдерНаТовары()

Процедура КнопкаВыполнитьНажатие(Элемент)

	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	
	МаркаАвтомобиля = Пункт11_1;
	ГосНомерАвтомобиля = Пункт11_2;
	Водитель = Пункт10_4;
	ПунктРазгрузки = Пункт7_1;
	ПунктПогрузки = Пункт6_1;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ТабДокумент = ПечатьТТН_ПеремещениеТоваров();
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		ТабДокумент = ПечатьТТН_РасходныйОрдерНаТовары();
	Иначе
		ТабДокумент = ПечатьТТН();
	КонецЕсли;

	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Товарно-транспортная накладная");

КонецПроцедуры

// Процедура устанавливает тип цен.
//
Процедура УстановитьТипЦен()

	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда

		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
	Иначе
		ТипЦен = Неопределено;
	КонецЕсли;

КонецПроцедуры // УстановитьТипЦен()

// Процедура устанавливает видимость и доступность реквизитов.
//
Процедура УстановитьВидимостьДоступность()

	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДоступностьТипаЦен = Истина;
	Иначе
		ДоступностьТипаЦен = Ложь;
	КонецЕсли;

	ЭлементыФормы.НадписьТипЦен.Доступность = ДоступностьТипаЦен;
	ЭлементыФормы.ТипЦен.Доступность        = ДоступностьТипаЦен;

КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	УстановитьТипЦен();
	УстановитьВидимостьДоступность();
	ЗаполнитьДанныеПечатиТТНПриложение4();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Документ".
//
Процедура ДокументПриИзменении(Элемент)

	УстановитьТипЦен();
	УстановитьВидимостьДоступность();
	ЗаполнитьДанныеПечатиТТНПриложение4();
	
КонецПроцедуры // ДокументПриИзменении()

Процедура Пункт3_1НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("ФормаВыборГруппыТоваров", Элемент);
	ВыбраннаяГруппаТоваров = Форма.ОткрытьМодально();
	Пункт3_1 = ?(ЗначениеЗаполнено(ВыбраннаяГруппаТоваров), ВыбраннаяГруппаТоваров, Пункт3_1);
КонецПроцедуры // ПолеВвода8НачалоВыбора()

Процедура КоманднаяПанельПриложение4ПечатьТТНПриложение4(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	СтруктураДанныхПечати = Новый Структура();
	Для Каждого Реквизит Из ЭлементыФормы Цикл
		Если Найти(Реквизит.Имя, "Пункт") > 0.00 Тогда
			СтруктураДанныхПечати.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Данные]);
		КонецЕсли;
	КонецЦикла;
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТНПриложение4";
	
	Если Пункт0_2 > '00010101000000' И Пункт0_2 < '20171222' Тогда
		МакетТТНПриложение4 = ПолучитьМакет("ТТНПриложение4");
	Иначе
		МакетТТНПриложение4 = ПолучитьМакет("ТранспортнаяНакладная1529");
	КонецЕсли;
	
	ЛицеваяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона|ВертикальнаяОбласть");
	ЛицеваяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ЛицеваяСторона);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОборотнаяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона|ВертикальнаяОбласть");
	ОборотнаяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ОборотнаяСторона);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Транспортная накладная");
	Пункт0_1 = Пункт0_1 + 1;
КонецПроцедуры // КоманднаяПанельПриложение4ПечатьТТНПриложение4()

Процедура КоманднаяПанель2ПечатьВедомостьПриложение4(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	СтруктураДанныхПечати = Новый Структура();
	Для Каждого Реквизит Из ЭлементыФормы Цикл
		Если Найти(Реквизит.Имя, "Пункт") > 0.00 Тогда
			СтруктураДанныхПечати.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Данные]);
		КонецЕсли;
	КонецЦикла;
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьПриложение4";
	МакетТТНПриложение4 = ПолучитьМакет("Ведомость");
	ЛицеваяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяОбласть|ВертикальнаяОбласть");
	ЛицеваяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ЛицеваяСторона);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Сопроводительная ведомость");
	Пункт0_0 = Пункт0_0 + 1;
	
КонецПроцедуры // КоманднаяПанель2ПечатьВедомостьПриложение4()
//ВЦ+
Процедура МаркаАвтомобиляНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ВЦ_Автомобили.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма);
	
	ФормаВыбора.Открыть();

КонецПроцедуры //ВЦ-

//ВЦ+
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Источник.Заголовок = "Справочник Автомобили" Тогда
		
		Пункт11_1 = СокрЛП(ЗначениеВыбора.Наименование);
		Пункт11_2 = СокрЛП(ЗначениеВыбора.ГосНомер);
		
	ИначеЕсли Источник.Заголовок = "Справочник Водители" Тогда
		
		Пункт10_4 = СокрЛП(ЗначениеВыбора.Наименование);
		ВодительскоеУдостоверение = СокрЛП(ЗначениеВыбора.Удостоверение);
		
	КонецЕсли;
	
	
КонецПроцедуры     //ВЦ-

Процедура ВодительНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ВЦ_Водители.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма);
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры //ВЦ-

