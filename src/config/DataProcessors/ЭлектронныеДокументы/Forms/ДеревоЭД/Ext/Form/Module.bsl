////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьСписокИдентификаторовСтрокДерева()
	
	СписокИдентификаторов.Очистить();
	Для Каждого ЭлементДерева Из ДеревоПодчиненныеЭД.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.АктуальныйЭД И НЕ ЭлементДерева.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			СписокИдентификаторов.Добавить(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтроки()
	
	Если СписокИдентификаторов.Количество()=0 Тогда
		ЗаполнитьСписокИдентификаторовСтрокДерева();
	КонецЕсли;
	
	Для Каждого Строка Из СписокИдентификаторов Цикл
		Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = Строка.Значение;
		Элементы.ДеревоПодчиненныеЭД.Развернуть(Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЭД()

	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектСсылка, Ложь);
	СформироватьДеревьяЭД();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексИД(ДеревоЭД, Ссылка)
	
	Для Каждого ЭлементДерева Из ДеревоЭД.ПолучитьЭлементы() Цикл
		
		Если ЭлементДерева.Ссылка = Ссылка Тогда
			ИндексИД = ЭлементДерева.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			 ЗаполнитьИндексИД(ЭлементДерева, Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Корневым элементом дерева является первичный ЭД, в случае
// с ТОРГ-12 - титул продавца. Актуальная запись в регистре
// "СостоянияЭД" может ссылаться на ТОРГ-12 (титул покупателя).
// Поэтому, чтобы правильно построить дерево, надо по текущему
// ЭД получить корневой элемент.
//
&НаСервере
Функция ЭДВладелец(Знач ТекущийЭД)
	
	ВозвращаемоеЗначение = ТекущийЭД;
	
	Если ТекущийЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ТекущийЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ТекущийЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		ИЛИ ТекущийЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		ИЛИ ТекущийЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
		
		ВозвращаемоеЗначение = ТекущийЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;

	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция МассивВидовЭДКорневыхЭлементовДерева()
	
	СписокВидовЭД = Новый Массив;
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12);
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктВыполненныхРабот);
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	
	Возврат СписокВидовЭД;
	
КонецФункции

&НаСервере
Функция МассивВидовЭДНеОтображаемыхВДереве()
	
	СписокВидовЭД = Новый Массив;
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ДопДанные);
	
	Возврат СписокВидовЭД;
	
КонецФункции

// Процедура добавляет в дерево неактуальные первичные ЭД
// с полной структурой подчиненности.
&НаСервере
Процедура ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецЭД
		|	И НЕ ЭДПрисоединенныеФайлы.ВидЭД В (&ВидыЭДИсключения)
		|	И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
		|	И ЭДПрисоединенныеФайлы.Ссылка <> &АктуальныйЭД";

	Запрос.УстановитьПараметр("ВладелецЭД", ОбъектСсылка);
	Запрос.УстановитьПараметр("СписокВидовЭД", МассивВидовЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ВидыЭДИсключения", МассивВидовЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("АктуальныйЭД", АктуальныйЭД);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		КорневойЭлемент = Неопределено;
		ПредварительноеЗаполнениеДерева(Выборка.Ссылка, ДеревоОбъект, Ложь, КорневойЭлемент);
		Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
			ВывестиПодчиненныеДокументы(Выборка.ВладелецФайла, КорневойЭлемент, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

	ДеревоОбъект.Строки.Сортировать("Версия");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект)
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			СтруктураПараметров.Вставить("ТипЭД", Строка.ТипЭД);
			Строка.Представление = ЭлектронныеДокументыСлужебный.ОпределитьПредставлениеЭД(Строка.ВидЭД, СтруктураПараметров);
			Строка.СтатусЭД = Перечисления.СтатусыЭД[?(Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "НеСформирован", "НеПолучен")];
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьДанныеВПустыхСтроках(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревьяЭД()

	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();

	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ОбъектСсылка);
	
	СоответствиеВладельцевИЭД = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеВладельцевИЭД(МассивСсылок);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			АктуальныйЭД = "";
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
					НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(
						ОбъектСсылка, Ложь, , Элемент.Значение, , Ложь);
				КонецЕсли;
				АктуальныйЭД = ЭДВладелец(Элемент.Значение);
				КорневойЭлемент = Неопределено;
				ПредварительноеЗаполнениеДерева(АктуальныйЭД, ДеревоОбъект, Истина, КорневойЭлемент);
				Если Не КорневойЭлемент = Неопределено Тогда
					ВывестиПодчиненныеДокументы(ОбъектСсылка, КорневойЭлемент, АктуальныйЭД);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(НастройкиОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидЭД",					НастройкиОбмена.ВидЭД);
				СтруктураПараметров.Вставить("НаправлениеЭД",			НастройкиОбмена.НаправлениеЭД);
				СтруктураПараметров.Вставить("ВерсияРегламентаЭДО",		НастройкиОбмена.ВерсияРегламентаЭДО);
				СтруктураПараметров.Вставить("СтатусЭД",				Перечисления.СтатусыЭД.ПустаяСсылка());
				СтруктураПараметров.Вставить("ПрофильНастроекЭДО",		НастройкиОбмена.ПрофильНастроекЭДО);
				СтруктураПараметров.Вставить("СоглашениеЭД",			НастройкиОбмена.СоглашениеЭД);
				СтруктураПараметров.Вставить("ТребуетсяИзвещение",		НастройкиОбмена.ТребуетсяИзвещение);
				СтруктураПараметров.Вставить("ТребуетсяПодтверждение",	НастройкиОбмена.ТребуетсяПодтверждение);
				
				СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
				КонецЕсли;
				
				Если НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УПД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура и первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Корректировочный счет-фактура)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ФНС 5.01 (УКД:Первичный документ)" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
				КонецЕсли;
				
				ПредварительноеЗаполнениеДерева(СтруктураПараметров, ДеревоОбъект, Ложь);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД);
		
		ОбработатьДерево(ДеревоОбъект);
		
		ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект);
		ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
		ЗаполнитьСписокИдентификаторовСтрокДерева();
		
		ЗаполнитьИндексИД(ДеревоПодчиненныеЭД, ИсходныйДокумент);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПредварительноеЗаполнениеДерева(ЭД, ДеревоОбъект, ЭтоАктуальныйЭД, КорневойЭлемент = Неопределено)
	
	Если ЗначениеЗаполнено(НастройкиОбмена) И НастройкиОбмена.Свойство("СоглашениеЭД") Тогда
		ОбменЧерезОператора = Не ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоПрямойОбмен(НастройкиОбмена.СпособОбменаЭД);
		ВерсияФорматаПакета = НастройкиОбмена.ВерсияФорматаПакета;
		КорневойЭлемент = Неопределено;
		
		Если ТипЗнч(ЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
			
			СписокРеквизитов = "ВерсияРегламентаЭДО, НаправлениеЭД, ВидЭД, СтатусЭД, ТребуетсяИзвещение, ТребуетсяПодтверждение";
			СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, СписокРеквизитов);
		Иначе
			СвойстваЭД = ЭД;
		КонецЕсли;
		
		Если ОбменЧерезОператора
			И (ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = ЭД.ТипЭлементаВерсииЭД;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
			КонецЕсли;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДО.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						
					ВидВстречногоЭД = ЭД.ВидЭД;
					Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
						ВидВстречногоЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
					ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						ВидВстречногоЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
					КонецЕсли;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
						ИПСтрока.ТипЭД            = ТипВстречногоЭД;
						ИПСтрока.ВидЭД            = ВидВстречногоЭД;
						ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
						
						ПДОИПСтрока               = ИПСтрока.Строки.Добавить();
						ПДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
						ПДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
						ПДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						ИППДОИПСтрока               = ПДОИПСтрока.Строки.Добавить();
						ИППДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
						ИППДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						ИППДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
					КонецЕсли;
						
				КонецЕсли;
					
				Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					Или СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					
					ВидВстречногоЭД = ЭД.ВидЭД;
					Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
						ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						ВидВстречногоЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
					КонецЕсли;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
						ИПСтрока.ТипЭД            = ТипВстречногоЭД;
						ИПСтрока.ВидЭД            = ВидВстречногоЭД;
						ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					Или СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбменЧерезОператора И (СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = ЭД.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДО.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;

				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
				Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
				Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					Или СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтрокаУУ                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
					СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
					СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаУУ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			ВидВстречногоЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
			Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ВидВстречногоЭД = Перечисления.ВидыЭД.АктЗаказчик;
			ИначеЕсли СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ВидВстречногоЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			КонецЕсли;
			
			ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
				ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = ТипЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = ЭД.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
					
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипЭД;
						СтрокаПокупатель.ВидЭД    = ВидВстречногоЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если СвойстваЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20
							И ОбменЧерезОператора Тогда
							
							НоваяСтрока               = СтрокаПокупатель.Строки.Добавить();
							НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
							НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
							НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
							
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
				Иначе
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипЭД;
						СтрокаПокупатель.ВидЭД    = ВидВстречногоЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЗначениеЗаполнено(ЭД.ВерсияРегламентаЭДО) 
							И СвойстваЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
						КонецЕсли;
						
					КонецЕсли;
					
					Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
				СтрокаПокупатель.ТипЭД    = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
				СтрокаПокупатель.ВидЭД    = ВидВстречногоЭД;
				СтрокаПокупатель.НаправлениеЭД = ?(ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
					Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
			
		ИначеЕсли СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
			ИЛИ СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = ЭД.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора Тогда
				Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
					
				Иначе
					СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
					СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
					СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
						ИЛИ СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						
						СтрокаУУ                  = СтрокаПродавец.Строки.Добавить();
						СтрокаУУ.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
						СтрокаУУ.ВидЭД            = Перечисления.ВидыЭД.УведомлениеОбУточнении;
						СтрокаУУ.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтрокаГлавная                = ДеревоОбъект.Строки.Добавить();
			СтрокаГлавная.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаГлавная.ВидЭД          = ЭД.ВидЭД;
			СтрокаГлавная.НаправлениеЭД  = ЭД.НаправлениеЭД;
			СтрокаГлавная.СтрокаДоступна = Истина;
			СтрокаГлавная.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаГлавная;
			
			Если СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
				
				Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
					
			ИначеЕсли СвойстваЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				
				Если СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					
					Если ОбменЧерезОператора Тогда
						// Подтверждение доставки
						СтрокаДерева                 = СтрокаГлавная.Строки.Добавить();
						СтрокаДерева.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаДерева.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаДерева.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если КорневойЭлемент <> Неопределено И (СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.Аннулирован
			ИЛИ СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
			ИЛИ СвойстваЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании) Тогда
			
			СтрокаПОА                  = КорневойЭлемент.Строки.Добавить();
			СтрокаПОА.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			СтрокаПОА.ВидЭД            = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
			СтрокаПОА.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДерево(ДеревоОбъект)
	
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			Если (НЕ ЗначениеЗаполнено(Строка.Родитель) ИЛИ ЗначениеЗаполнено(Строка.Родитель.Ссылка))
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И Строка.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И Строка.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
				И Строка.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				И Строка.ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
				И Строка.ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
				
				Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Сформировать;
				
				Если ЗначениеЗаполнено(Строка.Родитель) Тогда
					Если ЗначениеЗаполнено(Строка.Родитель.Ссылка) Тогда
						
						Если ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(Строка.Родитель.Ссылка.ВладелецФайла) Тогда
							Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита(Строка.Ссылка, "ПометкаУдаления") Тогда
				Строка.ОжидаемоеДействие = ПолучитьОжидаемоеДействиеПоТекущемуСтатусу(Строка);
			КонецЕсли;
		КонецЕсли;
		
		Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка);
		Строка.СтрокаДоступна = ?(ЗначениеЗаполнено(Строка.ОжидаемоеДействие), Истина, Ложь);
		Строка.Представление = СтрЗаменить(Строка.Представление, "_", " ");
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбработатьДерево(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОжидаемоеДействиеПоТекущемуСтатусу(Строка)
	
	ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
	
	СтатусЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если СтатусЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или СтатусЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или СтатусЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении  Тогда
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, "ВладелецФайла, НаправлениеЭД");
	ДОЗакрыт = ЭлектронныеДокументыСлужебныйВызовСервера.ДОЗакрытПринудительно(СвойстваЭД.ВладелецФайла);

	Если ДОЗакрыт Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТекущийСтатусЭД = Строка.СтатусЭД;
	ЭтоСлужебныйЭД = (Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
	
	Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
		И ЭлектронныеДокументыСлужебный.ЭтоТитулФНС(Строка.Ссылка)
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Возврат ВозвращаемоеЗначение;
		
	ИначеЕсли Строка.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании
		И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
		
		Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "ЭлектронныйДокументВладелец");
		СтатусВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "СтатусЭД");
		Если СтатусВладельца = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Принять;
		КонецЕсли;
		
	Иначе
		НастройкиОбменаДляСтатусов = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(Строка.Ссылка);
		МассивСтатусовЭД = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиОбменаДляСтатусов);
		
		Если МассивСтатусовЭД.Количество() > 0 Тогда
			ИндексТекСтатуса = МассивСтатусовЭД.Найти(ТекущийСтатусЭД);
			Если ИндексТекСтатуса <> Неопределено Тогда
				
				Если ИндексТекСтатуса + 1 < МассивСтатусовЭД.Количество() Тогда
					СледующийСтатус = МассивСтатусовЭД[ИндексТекСтатуса + 1];
					
					Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
						ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
						Если НЕ (НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД()
								ИЛИ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи")) Тогда
								
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.УтвердитьОтправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
						Если СледующийСтатус = Перечисления.СтатусыЭД.Подписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Подписать;
							Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
								ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПодписатьОтправить;
							КонецЕсли;
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						Если СледующийСтатус = Перечисления.СтатусыЭД.Доставлен Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						Иначе
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
						И СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ПолучитьОжидаемоеДействиеКонтрагента(Строка)
	
	ВозвращаемоеЗначение = "";
	
	ВерсияСтатусуЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Если Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение И НЕ ЗначениеЗаполнено(Строка.Ссылка)
			И ЗначениеЗаполнено(Строка.Родитель.Ссылка)
			И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен) Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Подтверждения оператора ЭДО'");
		ИначеЕсли (Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ)
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И ЗначениеЗаполнено(Строка.Родитель.Ссылка) И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен)
				И НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Извещения о получении'");
		КонецЕсли;
		
	Иначе
		Если Строка.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Подтверждения отправки'");
			
			// Изменения в поведении дерева для версии регламента 20.
			Если Строка.Ссылка.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (Строка.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД) Тогда
				
				ВозвращаемоеЗначение = "";
			КонецЕсли;
			
			Если Строка.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = "";
			КонецЕсли;
			
		ИначеЕсли Строка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			ВозвращаемоеЗначение = Нстр("ru = 'Подтверждения о доставке'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент, ДеревоРодитель, АктуальныйЭД = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрисоединенныеФайлы.Ссылка,
	|	ПрисоединенныеФайлы.Ссылка.СтатусЭД КАК СтатусЭД,
	|	ПрисоединенныеФайлы.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД,
	|	ПрисоединенныеФайлы.Ссылка.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатусаЭД,
	|	ПрисоединенныеФайлы.Ссылка.НаправлениеЭД КАК НаправлениеЭД,
	|	ПрисоединенныеФайлы.Ссылка.Представление КАК Представление,
	|	ПрисоединенныеФайлы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ПодчиненныеПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеПодчиненныхДокументов,
	|	ПрисоединенныеФайлы.Ссылка.ДатаДокументаОтправителя КАК ДатаВладельца,
	|	ПрисоединенныеФайлы.Ссылка.НомерДокументаОтправителя КАК НомерВладельца,
	|	ПрисоединенныеФайлы.Ссылка.ВидЭД КАК ВидЭД,
	|	ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД КАК ТипЭД,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Ссылка.ВидЭД В (&СписокВидовЭД)
	|		И НЕ ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД)
	|		И НЕ ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)
	|			ТОГДА ВЫБОР
	|					КОГДА ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|						ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|							ИНАЧЕ ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Версия
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ВидЭД В (&ВидыЭДИсключения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ВидЭД В (&ВидыЭДИсключения)) КАК ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеПрисоединенныеФайлы
	|		ПО (НЕ ПодчиненныеПрисоединенныеФайлы.ВидЭД В (&ВидыЭДИсключения))
	|			И ПрисоединенныеФайлы.Ссылка = ПодчиненныеПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатусаЭД";	
	
	Если АктуальныйЭД <> Неопределено  Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец", "ПрисоединенныеФайлы.Ссылка = &АктуальныхЭД");
		Запрос.УстановитьПараметр("АктуальныхЭД", АктуальныйЭД);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокВидовЭД", МассивВидовЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ВидыЭДИсключения", МассивВидовЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("ОбъектВладелец", ТекущийДокумент);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ТипЭД = ?(Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО,
			Перечисления.ТипыЭлементовВерсииЭД.ПДП,
			Выборка.ТипЭД);
		
		ПараметрыПоиска = Новый Структура("ТипЭД, ВидЭД", ТипЭД, Выборка.ВидЭД);
		
		Если Выборка.Ссылка = АктуальныйЭД Тогда
			ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка);
			Продолжить;
		КонецЕсли;
		
		МассивСтрокДерева = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоиска, Ложь);
		
		Если МассивСтрокДерева.Количество() = 0 Тогда
			// Добавляются уведомления об уточнении подчиненных ЭД
			// (ТОРГ-12 титул покупателя, Акт титул заказчика).
			СтрокаДерева = ДеревоРодитель.Строки.Добавить();
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка);
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка,
		"Ссылка, СтатусЭД, ДатаИзмененияСтатусаЭД, НаправлениеЭД, Представление, ПометкаУдаления, ВидЭД, Версия");
	
	СтруктураПараметров = Новый Структура;
	Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		СтруктураПараметров.Вставить("НомерВладельца", Выборка.НомерВладельца);
		СтруктураПараметров.Вставить("ДатаВладельца",  Выборка.ДатаВладельца);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипЭД",              Выборка.ТипЭД);
	СтрокаДерева.Представление = ЭлектронныеДокументыСлужебный.ОпределитьПредставлениеЭД(Выборка.ВидЭД, СтруктураПараметров);
	
	// Для входящих ЭД актуальность меняется вручную. В связи с этим надо выделять в списке
	// цветом более актуальные ЭД. Для этого в дереве есть реквизит "ДатаЭДБольшеАктуального",
	// а так же для сравнивания текущей даты создания ЭД с датой актуального ЭД, существует
	// реквизит объекта "ДатаАктуальногоЭД". Необходимо заполнить их.
	СтрокаДерева.ДатаЭДБольшеАктуального = Ложь;
	Если СтрокаДерева.АктуальныйЭД Тогда
		Если НЕ ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия) Тогда
			ДатаАктуальногоЭД = Выборка.Версия;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия)
		И ДатаАктуальногоЭД < Выборка.Версия Тогда
		СтрокаДерева.ДатаЭДБольшеАктуального = Истина;
	КонецЕсли;
	
	Если Выборка.НаличиеПодчиненныхДокументов Тогда
		
		ВывестиПодчиненныеДокументы(Выборка.Ссылка, СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

//Инициирует вывод в дерево и отображает его по окончанию формирования.
&НаКлиенте
Процедура ВывестиДеревоЭД()

	ОбновитьДеревоЭД();
	РазвернутьСтроки();

КонецПроцедуры

&НаСервере
Функция МассивПакетовКОтправке(СсылкаЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ОбъектВладелец = &ОбъектВладелец
	|	И ПакетЭДЭлектронныеДокументы.Ссылка.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке)
	|	И НЕ ПакетЭДЭлектронныеДокументы.Ссылка.ПометкаУдаления
	|	И ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПакетЭДЭлектронныеДокументы.Ссылка.МоментВремени УБЫВ";
	Запрос.УстановитьПараметр("ОбъектВладелец", СсылкаЭД.ВладелецФайла);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", СсылкаЭД);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(СсылкаЭД);
		МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(МассивЭД, Истина);
	Иначе
		МассивСтруктурПакетовЭД = Новый Массив;
		МассивСтруктурПакетовЭД.Добавить(Новый Структура("ПЭД", Результат.Выгрузить().ВыгрузитьКолонку("Ссылка")[0]));
	КонецЕсли;
	
	Возврат МассивСтруктурПакетовЭД;
	
КонецФункции

&НаКлиенте
Процедура ДеревоПодчиненныеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Поле.Имя = "ДеревоПодчиненныеЭДОжидаемоеДействие" И Элемент.ТекущиеДанные.СтрокаДоступна Тогда
			СтандартнаяОбработка = Ложь;
			ВыполняемоеДействие = Элемент.ТекущиеДанные.ОжидаемоеДействие;
			Если ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Сформировать") Тогда
				
				Если Элемент.ТекущиеДанные.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ИзвещениеОПолучении")
					И Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено
					И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПолучитьРодителя().Ссылка) Тогда
					
					МассивЭДДляИзвещений = Новый Массив;
					МассивЭДДляИзвещений.Добавить(Элемент.ТекущиеДанные.ПолучитьРодителя().Ссылка);
					ЭлектронныеДокументыКлиентСервер.СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭДДляИзвещений,
						Элемент.ТекущиеДанные.ВидЭД)
					
				ИначеЕсли (Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД")
					ИЛИ Элемент.ТекущиеДанные.ТипЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"))
					И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка)
					И Элемент.ТекущиеДанные.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий") Тогда
					
					ЭлектронныеДокументыКлиент.СформироватьНовыйЭД(ОбъектСсылка, Ложь);
				КонецЕсли;
				
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Утвердить")
				  ИЛИ ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.УтвердитьОтправить") Тогда
				
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
					ЭлектронныеДокументыСлужебныйКлиент.УтвердитьЭД(ОбъектСсылка, Элемент.ТекущиеДанные.Ссылка, Истина);
				КонецЕсли;
				
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Подписать")
				ИЛИ ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.ПодписатьОтправить") Тогда
				
				ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(ОбъектСсылка, Элемент.ТекущиеДанные.Ссылка);
				
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Отправить") Тогда
				
				МассивСтруктурПакетовЭД = МассивПакетовКОтправке(Элемент.ТекущиеДанные.Ссылка);
				Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
					
					МассивПЭД = Новый Массив;
					МассивПЭД.Добавить(МассивСтруктурПакетовЭД[0].ПЭД);
					
					ЭлектронныеДокументыСлужебныйКлиент.ОтправитьМассивПакетовЭД(МассивПЭД);
				КонецЕсли;
			ИначеЕсли ВыполняемоеДействие = ПредопределенноеЗначение("Перечисление.ОжидаемоеДействиеЭД.Принять") Тогда
				ЭлектронныеДокументыСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(Элемент.ТекущиеДанные.ПолучитьРодителя().Ссылка);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока) Тогда 
				Элементы.ДеревоПодчиненныеЭД.Развернуть(Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока, Истина);
			КонецЕсли;
			
		Иначе
			ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка,, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		
		Если Элемент.ТекущийЭлемент.Имя = "ДеревоПодчиненныеЭДПредставление" Тогда
			
			Если Элемент.ТекущиеДанные <> Неопределено
				И ТипЗнч(Элемент.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы")
				И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ссылка) Тогда
				
				ЭлектронныеДокументыСлужебныйКлиент.ОткрытьЭДДляПросмотра(Элемент.ТекущиеДанные.Ссылка,, ЭтаФорма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку()
	
	Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИндексИД;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИндексТекущейСтроки(ТекущаяСсылка)
	
	ЗаполнитьИндексИД(ДеревоПодчиненныеЭД, ТекущаяСсылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные.Ссылка;
	
	ВывестиДеревоЭД();
	
	ОбновитьИндексТекущейСтроки(ТекущаяСсылка);
	УстановитьТекущуюСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытий(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВладелецЭД", ОбъектСсылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФормуМодально("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИсходныйДокумент", ИсходныйДокумент);
	
	Параметры.Свойство("ОбъектОтбора", ОбъектСсылка);
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Заголовок = НСтр("ru = 'Электронные документы:'") + " " + ОбъектСсылка;
		ОбновитьДеревоЭД();
	КонецЕсли;
	
	Элементы.ЖурналСобытий.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ВывестиДеревоЭД();
	ИначеЕсли ИмяСобытия = "ОбновитьПозиционироватьСтрокуДереваЭД" И ЗначениеЗаполнено(Параметр) Тогда
		// Обновление текущей строки при повторной открытии формы
		ИсходныйДокумент = Параметр;
		ВывестиДеревоЭД();
		УстановитьТекущуюСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьСтроки();
	
	Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		УстановитьТекущуюСтроку();
	КонецЕсли;
	
КонецПроцедуры
