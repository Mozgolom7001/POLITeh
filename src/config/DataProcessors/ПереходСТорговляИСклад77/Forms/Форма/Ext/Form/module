Перем КоличествоЭтапов;
Перем КоличествоШагов;
Перем СписокШагов;
Перем Этап;
Перем Шаг;
Перем ЗакрытьБезВопросов;
Перем БуферОрганизации;
Перем БуферЗаполнен;
Перем ОбработкаОбмена;
Перем ДатаНачала, ДатаОкончания;
Перем КонфигурацияОбновлена;
Перем мНаборыШаблон;

////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКА ОСНОВНЫХ ДЕЙСТВИЙ ФОРМЫ И НАВИГАЦИИ ПО СТРАНИЦАМ
////////////////////////////////////////////////////////////////////////////

// Процедура устанавливает текущую станицу формы в соответствии с этапом 
//  и шагом обработки.
//
Процедура УстановитьСтраницу()
	Если (Шаг = 0 ) И (Этап = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ЭлементыФормы.ПанельЭтапов.Страницы[Этап - 1];
	ЭлементыФормы.ПанельКартинки.ТекущаяСтраница = ЭлементыФормы.ПанельКартинки.Страницы[Этап - 1];
	ЭлементыФормы.НадписьНазад.Доступность = НЕ (Этап = 1 И Шаг = 1);
	
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 7, Истина, Ложь, Ложь, Ложь);
	Иначе
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 9, Истина, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры // УстановитьСтраницу()

// Процедура управляет доступностью элементов НадписьВперед, НадписьНазад, 
// НадписьГотово, НадписьЗакрыть.
//
Процедура УстановитьДоступность()
	
	ДоступностьВперед = Истина;
	ЭлементыФормы.НадписьГотово.Видимость  = Ложь;
	ЭлементыФормы.НадписьЗакрыть.Видимость = Истина;
	
	Если Этап = 3 Тогда
		
		 Если ПустаяСтрока(ИмяФайлаОбмена) или ОбработкаОбмена.ФлагОшибки Тогда
		 	ДоступностьВперед = Ложь;	
		 КонецЕсли;
				
	ИначеЕсли Этап = КоличествоЭтапов Тогда
		
		 ДоступностьВперед =  Ложь;
		 ЭлементыФормы.НадписьГотово.Видимость  = Истина;
		// ЭлементыФормы.НадписьЗакрыть.Видимость = Ложь;
		
	КонецЕсли;
	
	ЭлементыФормы.ПанельКнопок.ТекущаяСтраница = ЭлементыФормы.ПанельКнопок.Страницы.Далее;
		
	ЭлементыФормы.КнопкаВперед.Доступность = ДоступностьВперед;
	ЭлементыФормы.НадписьВперед.Доступность = ДоступностьВперед;
	
КонецПроцедуры // Процедура УстановитьДоступность() 

// Процедура устанавливает количество этапов
//
Процедура ОпределитьКоличествоЭтапов()
	КоличествоЭтапов = ЭлементыФормы.ПанельЭтапов.Страницы.Количество();
КонецПроцедуры // ОпределитьКоличествоЭтапов() 

// Процедура устанавливает количество шагов этапа
//
Процедура ОпределитьКоличествоШагов()
	// КоличествоШагов = ЭлементыФормы.ПанельЭтапов.Страницы.Количество();
	КоличествоШагов = ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].Страницы.Количество();	
КонецПроцедуры // ОпределитьКоличествоШагов() 

// Процедура заполняет дерево этапов и шагов в табличном поле ПолеТабличногоДокумента1
//
Процедура ЗаполнитьДеревоШагов()
	
	НомерСтроки = 2;
	Отступ = "	";
	
	Для Каждого СтраницаЭтапа из ЭлементыФормы.ПанельЭтапов.Страницы Цикл
		НомерЭтапа = ЭлементыФормы.ПанельЭтапов.Страницы.Индекс(СтраницаЭтапа)+1;
		
		Область = ЭлементыФормы.ПолеТабличногоДокумента1.Область(НомерСтроки,2,НомерСтроки,4);
		Область.Шрифт = Новый Шрифт(, 9, Ложь, Ложь, Ложь, Ложь);
		Область.Объединить();
		Область.Имя = Строка(НомерЭтапа) + "_";
		Область.Текст = СтраницаЭтапа.Заголовок;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьДеревоШагов()
	
////////////////////////////////////////////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
////////////////////////////////////////////////////////////////////////////

// Процедура обработчик события Нажатие элемента формы НадписьНазад
//
Процедура КнопкаНазад(Элемент)
			
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 7, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 9, Ложь, Ложь, Ложь, Ложь);
	Если (Шаг > 1) Тогда
		Шаг = Шаг - 1;
	Иначе
		Если Этап > 1 Тогда
			Если Этап = 9 Тогда
				Если ЭтапПерехода = 0 Тогда
					Этап = 6;
				Иначе
					Этап = Этап - 1;
				КонецЕсли;
			ИначеЕсли Этап = 10 Тогда
	            Если ПолеВыбораРежима = "Произвольный" Тогда
					Этап = 3;
				Иначе
					Этап = Этап - 1;
				КонецЕсли;
			ИначеЕсли Этап = 7 Тогда
				Этап = 3;
			Иначе
				Этап = Этап - 1;
			КонецЕсли;
			ОпределитьКоличествоШагов();
			Шаг = КоличествоШагов;  						
		КонецЕсли;
	КонецЕсли;	
	УстановитьСтраницу();
КонецПроцедуры // КнопкаНазад()

// Процедура обработчик события Нажатие элемента формы НадписьВперед
//
Процедура КнопкаВпередНажатие(Элемент = Неопределено)
	
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 7, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 9, Ложь, Ложь, Ложь, Ложь);
	Если Шаг < КоличествоШагов Тогда
		Шаг = Шаг + 1;		
	Иначе	
		Если Этап < КоличествоЭтапов Тогда
			Если Этап = 3 Тогда
				ЗагрузитьДанные();
				Если ПолеВыбораРежима = "Произвольный" Тогда
					Этап = 10;
				Иначе
					Если ЭтапПерехода = 0 Тогда
						Этап = Этап + 1;
					Иначе
						Этап = 7;
						ЗаполнитьТаблицуДокументов();
					КонецЕсли;
				КонецЕсли;	
		    ИначеЕсли Этап = 8 Тогда
				  Если ЭтапПерехода = 1 Тогда
		          	  ЭлементыФормы.ПанельЗавершение.ТекущаяСтраница = ЭлементыФормы.ПанельЗавершение.Страницы.Этап2;				  
				  ИначеЕсли ЭтапПерехода = 2 Тогда
               	  	  ЭлементыФормы.ПанельЗавершение.ТекущаяСтраница = ЭлементыФормы.ПанельЗавершение.Страницы.Этап3;				  	
					  Завершение = 2;
				  КонецЕсли;
 				  Этап = Этап + 1;
			 ИначеЕсли Этап = 9 Тогда
				 Если Завершение = 0 Тогда
					 Этап = 3; 
					 Если ЭтапПерехода = 0 Тогда					 					 
					 	ЭтапПерехода = 1;
					 Иначе 
						ЭтапПерехода = 2;
					 КонецЕсли;
				 ИначеЕсли Завершение = 1 Тогда
					 Этап = 1;
					 Если ЭтапПерехода = 0 Тогда					 					 
					 	ЭтапПерехода = 1;
					 Иначе 
						ЭтапПерехода = 2;
					 КонецЕсли;
				 ИначеЕсли Завершение = 2 Тогда
	                 Этап = 10;
				 КонецЕсли;				 
			 ИначеЕсли Этап = 6 Тогда
				Если ЭтапПерехода = 0 Тогда
					ЭлементыФормы.ПанельЗавершение.ТекущаяСтраница = ЭлементыФормы.ПанельЗавершение.Страницы.Этап1;
					Этап = 9;
				Иначе
					Этап = Этап + 1;
					ЗаполнитьТаблицуДокументов();
				КонецЕсли;
			Иначе
				Этап = Этап + 1;
			КонецЕсли;
			ОпределитьКоличествоШагов();
			Шаг = 1;
		Иначе
			Шаг = 0;
			Этап = 0;
		КонецЕсли;
	КонецЕсли;
				
	УстановитьСтраницу();
КонецПроцедуры // КнопкаВпередНажатие()

// Процедура обработчик события ПриОткрытии формы 
//
Процедура ПриОткрытии()
		
	Этап = 1;
	Шаг = 1;

	ЗакрытьБезВопросов = Ложь;
	ОпределитьКоличествоЭтапов();
	ОпределитьКоличествоШагов();
	
	ЕстьПартионныйУчет = Ложь;	
	БуферЗаполнен = Ложь;
	
	ДатаНачалаОтбораДокументов = ДатаНачала;
	ДатаОкончанияОтбораДокументов = ДатаОкончания;

	ОткрытьСтартовогоПомощника = Истина;
	//Дерево
	ЗаполнитьДеревоШагов();
	
	// Подготовим универсальный обмен данными
	ЭлементыФормы.ДатаВыгрузкиДанных.Значение = "";
	ЭлементыФормы.ПредставлениеПериодаВыгрузки.Значение = "";
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	УстановитьСтраницу();
	
КонецПроцедуры // ПриОткрытии()

// Процедура обработчик события ПередОткрытием формы 
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Предупреждение("Недостаточно прав для запуска помощника перехода с 1С:Торговля и склад 7.7");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием() 

// Процедура обработчик события ПередЗакрытием формы
// 
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ЗакрытьБезВопросов Тогда
		Ответ = Вопрос("Завершить работу Помощника?",РежимДиалогаВопрос.ДаНет,60);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры // ПередЗакрытием()

// Процедура обработчик события Нажатие элемента формы НадписьЗакрыть
// 
Процедура НадписьЗакрытьНажатие(Элемент)
	Закрыть();
КонецПроцедуры // НадписьЗакрытьНажатие() 

// Процедура обработчик события Нажатие элемента формы НадписьГотово
//  
Процедура НадписьГотовоНажатие(Элемент)
	
	Если Не ОбработкаОбмена.ФлагОшибки Тогда
		
		Если ОткрытьСтартовогоПомощника Тогда
			ОткрытьСтартовогоПомощника();
		КонецЕсли;
		
		Если ОткрытьБыстроеОсвоение Тогда 
			ОткрытьБыстроеОсвоение();			
		КонецЕсли;
		
		Если ОткрытьГрупповуюОбработкуСправочниковИДокументов Тогда
			ОткрытьГрупповуюОбработкуСправочниковИДокументов();
		КонецЕсли;
		
		Если ОткрытьУниверсальныйЖурналДокументов Тогда
			ОткрытьУниверсальныйЖурналДокументов();
		КонецЕсли;
		
		Если ОткрытьПоискИЗаменуДублирующихсяОбъектов Тогда
			ОткрытьПоискИЗаменуДублирующихсяОбъектов();
		КонецЕсли;
		
		Если ОткрытьПоискДанных Тогда
			ОткрытьПоискДанных();
		КонецЕсли;
		
		ЗакрытьБезВопросов = Истина;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры // НадписьГотовоНажатие() 

// Процедура обработчик события Нажатие элемента формы ИнтернетПоддержка
// 
Процедура ИнтернетПоддержкаНажатие(Элемент)
	
	Обработки.ОбновлениеКонфигурации.ПолучитьФорму("ОбновлениеКонфигурации").Открыть();
	
КонецПроцедуры // ИнтернетПоддержкаНажатие()

// Процедура обработчик события ПриИзменении элемента формы ПолеВыбораРежима
//
Процедура ПолеВыбораРежимаПриИзменении(Элемент)
	
	ПриИзмененииРежима();
	
КонецПроцедуры // ПолеВыбораРежимаПриИзменении()

// Процедура обработчик события Нажатие элемента формы НастроитьПараметрыУчета
//
Процедура НастроитьПараметрыУчетаНажатие(Элемент)
	  НастроитьПараметрыУчета();
КонецПроцедуры // НастроитьПараметрыУчетаНажатие() 

// Процедура обработчик события Нажатие элемента формы ЗагрузитьКурсыВалют
//
Процедура ЗагрузитьКурсыВалютНажатие(Элемент)
	  ЗагрузитьКурсыВалют();	
КонецПроцедуры // ЗагрузитьКурсыВалютНажатие() 

// Процедура обработчик события Нажатие элемента формы ВвестиСведенияОбУчетнойПолитикеПредприятия
//
Процедура ВвестиСведенияОбУчетнойПолитикеПредприятияНажатие(Элемент)
	ВвестиСведенияОбУчетнойПолитикеПредприятия();
КонецПроцедуры // ВвестиСведенияОбУчетнойПолитикеПредприятияНажатие()

// Процедура обработчик события Нажатие элемента формы ИзменитьДанныеОрганизации
//
Процедура ИзменитьДанныеОрганизацииНажатие(Элемент)
	ИзменитьДанныеОрганизации();
КонецПроцедуры // ИзменитьДанныеОрганизацииНажатие()

// Процедура обработчик события Нажатие элемента формы ВвестиСведенияОбУчетнойПолитикеНУОрганизации
//
Процедура ВвестиСведенияОбУчетнойПолитикеНУОрганизацииНажатие(Элемент)
	ВвестиСведенияОбУчетнойПолитикеНУОрганизации();
КонецПроцедуры // ВвестиСведенияОбУчетнойПолитикеНУОрганизацииНажатие()

// Процедура обработчик события Нажатие элемента формы ЗаполнитьНастройкиПользователя
// 
Процедура ЗаполнитьНастройкиПользователяНажатие(Элемент)
	ЗаполнитьНастройкиПользователя();
КонецПроцедуры // ЗаполнитьНастройкиПользователяНажатие()

// Процедура обработчик события Нажатие элемента формы НазначитьДополнительныеПраваПользователю
// 
Процедура НазначитьДополнительныеПраваПользователюНажатие(Элемент)
	НазначитьДополнительныеПраваПользователю();
КонецПроцедуры // НазначитьДополнительныеПраваПользователюНажатие()

// Процедура обработчик события Нажатие элемента формы ВедомостьПоЗаказамПоставщикам
//
Процедура ВедомостьПоЗаказамПоставщикамНажатие(Элемент)
	   ОткрытьВедомостьПоЗаказамПоставщикам();
КонецПроцедуры // ВедомостьПоЗаказамПоставщикамНажатие() 

// Процедура обработчик события Нажатие элемента формы ВедомостьПоЗаказамПокупателей
//
Процедура ВедомостьПоЗаказамПокупателейНажатие(Элемент)
	ОткрытьВедомостьПоЗаказамПокупателей();
КонецПроцедуры // ВедомостьПоЗаказамПокупателейНажатие() 

// Процедура обработчик события Нажатие элемента формы ВедомостьПоТоварамНаСкладах
//
Процедура ВедомостьПоТоварамНаСкладахНажатие(Элемент)
	ОткрытьВедомостьПоТоварамНаСкладах();	
КонецПроцедуры // ВедомостьПоТоварамНаСкладахНажатие()

// Процедура обработчик события Нажатие элемента формы ВедомостьПоПартиямТоваровНаСкладах
//
Процедура ВедомостьПоПартиямТоваровНаСкладахНажатие(Элемент)	
	ОткрытьВедомостьПоПартиямТоваровНаСкладах();
КонецПроцедуры // ВедомостьПоПартиямТоваровНаСкладахНажатие()

// Процедура обработчик события Нажатие элемента формы ВедомостьПоДенежнымСредствам
//
Процедура ВедомостьПоДенежнымСредствамНажатие(Элемент)
	ОткрытьВедомостьПоДенежнымСредствам();
КонецПроцедуры // ВедомостьПоДенежнымСредствамНажатие() 

// Процедура обработчик события Нажатие элемента формы ВедомостьПоВзаиморасчетамСКонтрагентами
//
Процедура ВедомостьПоВзаиморасчетамСКонтрагентамиНажатие(Элемент)
	ОткрытьВедомостьПоВзаиморасчетамСКонтрагентами();
КонецПроцедуры // ВедомостьПоВзаиморасчетамСКонтрагентамиНажатие() 

// Процедура обработчик события Нажатие элемента формы ВедомостьПоВзаиморасчетамСПодотчетнымиЛицами
//
Процедура ВедомостьПоВзаиморасчетамСПодотчетнымиЛицамиНажатие(Элемент)
	ОткрытьВедомостьПоВзаиморасчетамСПодотчетнымиЛицами();
КонецПроцедуры // ВедомостьПоВзаиморасчетамСПодотчетнымиЛицамиНажатие()

////////////////////////////////////////////////////////////////////////////
//Манипуляции с файлом загрузки
////////////////////////////////////////////////////////////////////////////

// Открывает диалог выбора файла
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует
// 
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	ДиалогФыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml";
	ДиалогФыбораФайла.Расширение					=	"xml";
		
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.ИндексФильтра					=	0;
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
		ИмяФайлаОбмена = Элемент.Значение;
		ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);		
		СформироватьПредставлениеПериода();
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента ИмяФайлаОбмена.
//
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборФайла(Элемент);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента ИмяФайлаОбмена.
//
Процедура ИмяФайлаОбменаПриИзменении(Элемент)
    ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
	ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
	СформироватьПредставлениеПериода();
	УстановитьДоступность();
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
// Параметры:
//  
// 
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)

	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры // ОткрытьВПриложении() 

// Формирует внешнее представление периода, заданного датами начала и окончания периода. 
// Процедура используется в качестве обработчика события для полей ввода
// ДатаНачала и ДатаОкончания. Назначается методом ПодключитьОбработчикИзмененияДанных
// в обработчике "При открытии"
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//
Процедура СформироватьПредставлениеПериода()

	ДатаОкончания = ОбработкаОбмена.ДатаОкончания;
	ДатаНачала = ОбработкаОбмена.ДатаНачала ;
	
	Если ДатаОкончания < ДатаНачала Тогда
		ПредставлениеПериодаВыгрузки = "";
	Иначе
		Если ДатаНачала = ДатаОкончания Тогда
			ПредставлениеПериодаВыгрузки = Формат(ДатаОкончания, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			ПредставлениеПериодаВыгрузки = "Январь - " + Формат(ДатаОкончания, "ДФ='ММММ гггг'") + " г." ;			
		КонецЕсли;		
	КонецЕсли;
	
	ЭлементыФормы.ДатаВыгрузкиДанных.Значение = Формат(ОбработкаОбмена.ДатаВыгрузкиДанных, "ДЛФ=DD; ДП=-");

КонецПроцедуры // СформироватьПредставлениеПериода() 

////////////////////////////////////////////////////////////////////////////
// Загрузка данных
////////////////////////////////////////////////////////////////////////////

// Процедура выполняет загрузку данных из файла обмена
//
Процедура ЗагрузитьДанные()
	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;
	ОбработкаОбмена.ФлагКомментироватьОбработкуОбъектов = КомментироватьЗагрузкуОбъектов;
	ОбработкаОбмена.ВыводВОкноСообщенийИнформационныхСообщений = КомментироватьЗагрузкуОбъектов;
	ОбработкаОбмена.ВыполнитьЗагрузку();
	Если ОбработкаОбмена.ФлагОшибки Тогда
		Предупреждение("Не удалось загрузить данные.", , "Ошибка");
	КонецЕсли;	
	
КонецПроцедуры // ЗагрузитьДанные() 

////////////////////////////////////////////////////////////////////////////
// Действия по настройке параметров и открытию обработок
////////////////////////////////////////////////////////////////////////////

// Изменяет страницу в зависимости от режима загрузки 
//
Процедура ПриИзмененииРежима ()
		
	Если ЭлементыФормы.ПолеВыбораРежима.Значение = "Типовой" Тогда
		ЭлементыФормы.ПанельРежимПереносаДанных.ТекущаяСтраница = ЭлементыФормы.ПанельРежимПереносаДанных.Страницы.Типовой;
	Иначе
		ЭлементыФормы.ПанельРежимПереносаДанных.ТекущаяСтраница = ЭлементыФормы.ПанельРежимПереносаДанных.Страницы.Произвольный;		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииРежима ()

// Открывает форму настройки параметров учета 
//
Процедура НастроитьПараметрыУчета()
	  ПолучитьОбщуюФорму("НастройкаПараметровУчета").Открыть();
КонецПроцедуры // НастроитьПараметрыУчета()

// Открывает форму для ввода записи в регистр сведений "Учетная политика" 
//
Процедура ВвестиСведенияОбУчетнойПолитикеПредприятия()
	 МенеджерЗаписи = РегистрыСведений.УчетнаяПолитика.СоздатьМенеджерЗаписи();
	 ФормаЗаписи = МенеджерЗаписи.ПолучитьФорму();
	 ФормаЗаписи.Открыть();
 КонецПроцедуры // ВвестиСведенияОбУчетнойПолитикеПредприятия()
 
// Открывает форму обработки загрузки курсов валют РБК 
//
Процедура ЗагрузитьКурсыВалют()
	 КурсыВалютРБК = ОБработки.КурсыВалютРБК.Создать();
	 ФормаОбработки = КурсыВалютРБК.ПолучитьФорму();
	 ФормаОбработки.Открыть();
КонецПроцедуры // ЗагрузитьКурсыВалют()

// Открывает форму элемента выбранной организации 
//
Процедура ИзменитьДанныеОрганизации ()
	Если Не ЗначениеЗаполнено(Организация) Тогда
		 Предупреждение ("Необходимо указать организацию!");
		 Возврат;
	КонецЕсли;		
	ФормаЭлемента = Организация.ПолучитьФорму();
	ФормаЭлемента.Открыть();
КонецПроцедуры // ИзменитьДанныеОрганизации ()

// Открывает форму для ввода записи в регистр сведений "Учетная политика (налоговый учет)"  
//
Процедура ВвестиСведенияОбУчетнойПолитикеНУОрганизации ()
	Если Не ЗначениеЗаполнено(Организация) Тогда
		 Предупреждение ("Необходимо указать организацию!");
		 Возврат;
	 КонецЕсли;	
	МенеджерЗаписи = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Период = РабочаяДата;
	ФормаЗаписи = МенеджерЗаписи.ПолучитьФорму();
	ФормаЗаписи.Открыть();	
КонецПроцедуры // ВвестиСведенияОбУчетнойПолитикеНУОрганизации () 

// Открывает форму элемента выбранного пользователя 
//
Процедура ЗаполнитьНастройкиПользователя()
	 Если Не ЗначениеЗаполнено(Пользователь) Тогда
		 Предупреждение ("Необходимо указать пользователя!");
		 Возврат;
	 КонецЕсли;
	 ФормаЭлемента = Пользователь.ПолучитьФорму();
	 ФормаЭлемента.Открыть();
КонецПроцедуры // ЗаполнитьНастройкиПользователя() 

// Открывает форму редактирования записи регистра сведений "Значения дополнительных прав пользователя"  
//
Процедура НазначитьДополнительныеПраваПользователю()
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		 Предупреждение ("Необходимо указать пользователя!");
		 Возврат;
	 КонецЕсли;	
	 МенеджерЗаписи = РегистрыСведений.ЗначенияДополнительныхПравПользователя.СоздатьМенеджерЗаписи();
	 МенеджерЗаписи.Пользователь = Пользователь;
	 МенеджерЗаписи.ПолучитьФорму("ФормаРедактирования").Открыть();
КонецПроцедуры // НазначитьДополнительныеПраваПользователю()

// Открывает обработку "Стартовый помощник"  
//
Процедура ОткрытьСтартовогоПомощника()	
	ФормаСтартовыйПомощник = Обработки.СтартовыйПомощник.ПолучитьФорму("Форма");
	ФормаСтартовыйПомощник.Открыть();	
	ЗакрытьБезВопросов = Истина;	
КонецПроцедуры // ОткрытьСтартовогоПомощника()

// Открывает обработку "Быстрое освоение"  
//
Процедура ОткрытьБыстроеОсвоение()
	ФормаБыстроеОсвоение = Обработки.БыстроеОсвоение.ПолучитьФорму("Форма");
	ФормаБыстроеОсвоение.Открыть();	
	ЗакрытьБезВопросов = Истина;		
КонецПроцедуры // ОткрытьБыстроеОсвоение()

// Открывает обработку "Групповая обработка справочников и документов"  
//
Процедура ОткрытьГрупповуюОбработкуСправочниковИДокументов()
	ФормаГрупповаяОбработкаСправочниковИДокументов = Обработки.ГрупповаяОбработкаСправочниковИДокументов.ПолучитьФорму("Форма");
	ФормаГрупповаяОбработкаСправочниковИДокументов.Открыть();	
	ЗакрытьБезВопросов = Истина;		
КонецПроцедуры // ОткрытьГрупповуюОбработкуСправочниковИДокументов()

// Открывает обработку "Универсальный журнал документов"  
//
Процедура ОткрытьУниверсальныйЖурналДокументов()
	ФормаУниверсальныйЖурналДокументов = Обработки.УниверсальныйЖурналДокументов.ПолучитьФорму("ОсновнаяФорма");
	ФормаУниверсальныйЖурналДокументов.Открыть();	
	ЗакрытьБезВопросов = Истина;		
КонецПроцедуры // ОткрытьУниверсальныйЖурналДокументов()

// Открывает обработку "Поиск и замена дублирующихся элементов"  
//
Процедура ОткрытьПоискИЗаменуДублирующихсяОбъектов()
	ФормаПоискИЗаменаДублирующихсяЭлементов = Обработки.ПоискИЗаменаДублирующихсяЭлементов.ПолучитьФорму("Форма");
	ФормаПоискИЗаменаДублирующихсяЭлементов.Открыть();	
	ЗакрытьБезВопросов = Истина;			
КонецПроцедуры // ОткрытьПоискИЗаменуДублирующихсяОбъектов()

// Открывает обработку "Поиск данных"  
//
Процедура ОткрытьПоискДанных()
	ФормаПоискДанных = Обработки.ПоискДанных.ПолучитьФорму("Форма");
	ФормаПоискДанных.Открыть();	
	ЗакрытьБезВопросов = Истина;		
КонецПроцедуры // ОткрытьПоискДанных()

// Открывает обработку "Проведение по партиям"  
//
Процедура ОткрытьПроведениеПоПартиям()
	 Отчет = Обработки.ПроведениеПоПартиям.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();		
КонецПроцедуры // ОткрытьПроведениеПоПартиям()

// Открывает отчет "Ведомость по заказам поставщикам"  
//
Процедура ОткрытьВедомостьПоЗаказамПоставщикам()
	 Отчет = Отчеты.ВедомостьЗаказыПоставщикам.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();
КонецПроцедуры // ОткрытьВедомостьПоЗаказамПоставщикам() 

// Открывает отчет "Ведомость по заказам покупателей"  
//
Процедура ОткрытьВедомостьПоЗаказамПокупателей()
	 Отчет = Отчеты.ВедомостьЗаказыПокупателей.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();	
КонецПроцедуры // ОткрытьВедомостьПоЗаказамПокупателей()

// Открывает отчет "Ведомость по товарам на складах"  
//
Процедура ОткрытьВедомостьПоТоварамНаСкладах()
	 Отчет = Отчеты.ВедомостьТоварыНаСкладах.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();		
КонецПроцедуры // ОткрытьВедомостьПоТоварамНаСкладах()

// Открывает отчет "Ведомость по партиям товаров на складах"  
//
Процедура ОткрытьВедомостьПоПартиямТоваровНаСкладах()
	 Отчет = Отчеты.ВедомостьПартииТоваровНаСкладах.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();		
КонецПроцедуры // ОткрытьВедомостьПоПартиямТоваровНаСкладах()

// Открывает отчет "Ведомость по денежным средствам"  
//
Процедура ОткрытьВедомостьПоДенежнымСредствам()
	 Отчет = Отчеты.ВедомостьДенежныеСредства.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();		
КонецПроцедуры // ОткрытьВедомостьПоДенежнымСредствам() 

// Открывает отчет "Ведомость по взаиморасчетам с контрагентами"  
//
Процедура ОткрытьВедомостьПоВзаиморасчетамСКонтрагентами()
	 Отчет = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();		
КонецПроцедуры // ОткрытьВедомостьПоВзаиморасчетамСКонтрагентами() 

// Открывает отчет "Ведомость по взаиморасчетам с подотчетными лицами"  
//
Процедура ОткрытьВедомостьПоВзаиморасчетамСПодотчетнымиЛицами()
	 Отчет = Отчеты.ВедомостьВзаиморасчетыСПодотчетнымиЛицами.Создать();
	 ФормаОтчета = Отчет.ПолучитьФорму();     
	 ФормаОтчета.Открыть();		
КонецПроцедуры // ОткрытьВедомостьПоВзаиморасчетамСПодотчетнымиЛицами()

// Обновляет состояния документов в таблице документов  
//
Процедура ОбновитьСостоянияДокументов()
	
	//Индекс = 0;
	//
	//Пока Индекс < ТаблицаДокументов.Количество() Цикл
	//	
	//	СтрокаТаблицы = ТаблицаДокументов[Индекс];
	//			
	//	Если СтрокаТаблицы.ПометкаУдаления Тогда
	//		
	//		СтрокаТаблицы.ПометкаУдаления  = Истина;
	//		СтрокаТаблицы.ДокументПроведен = Ложь;
	//		
	//	ИначеЕсли СтрокаТаблицы.Ссылка.Проведен Тогда
	//		
	//		СтрокаТаблицы.ПометкаУдаления  = Ложь;
	//		СтрокаТаблицы.ДокументПроведен = Истина;
	//		
	//	Иначе
	//		
	//		СтрокаТаблицы.ПометкаУдаления  = Ложь;
	//		СтрокаТаблицы.ДокументПроведен = Ложь;
	//		
	//	КонецЕсли; 
	//	
	//	Индекс = Индекс + 1;
	//
	//КонецЦикла; 

КонецПроцедуры // ОбновитьСостоянияДокументов()

// Заполняет таблицу документов в соответствии с интервалом дат   
//
Процедура ЗаполнитьТаблицуДокументов()
	
Запрос = Новый Запрос;

ОтборДат = Истина;
Если Не ЗначениеЗаполнено(ДатаНачалаОтбораДокументов) И Не ЗначениеЗаполнено(ДатаОкончанияОтбораДокументов) Тогда
	ОтборДат = Ложь;	
КонецЕсли;

Запрос.УстановитьПараметр("ДатаНачала",НачалоДня(ДатаНачалаОтбораДокументов));		
Запрос.УстановитьПараметр("ДатаОкончания",НачалоДня(ДатаОкончанияОтбораДокументов));	

Запрос.Текст = "ВЫБРАТЬ ВложенныйЗапрос.* ИЗ (
			   |ВЫБРАТЬ
               |	ЗаказПокупателя.Ссылка,
               |	ЗаказПокупателя.Номер,
               |	ЗаказПокупателя.Дата,
               |	ЗаказПокупателя.Проведен,
               |	ЗаказПокупателя.ПометкаУдаления,
               |	ЗаказПокупателя.Контрагент,
               |	ЗаказПокупателя.Организация,
               |	ЗаказПокупателя.СуммаДокумента,
               |	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
               |	NULL КАК ОрганизацияОтправитель
               |ИЗ
               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ЗакрытиеЗаказовПокупателей.Ссылка,
               |	ЗакрытиеЗаказовПокупателей.Номер,
               |	ЗакрытиеЗаказовПокупателей.Дата,
               |	ЗакрытиеЗаказовПокупателей.Проведен,
               |	ЗакрытиеЗаказовПокупателей.ПометкаУдаления,
               |	NULL,
               |	NULL,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ЗакрытиеЗаказовПокупателей КАК ЗакрытиеЗаказовПокупателей
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	Доверенность.Ссылка,
               |	Доверенность.Номер,
               |	Доверенность.Дата,
               |	Доверенность.Проведен,
               |	Доверенность.ПометкаУдаления,
               |	Доверенность.Контрагент,
               |	Доверенность.Организация,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.Доверенность КАК Доверенность
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	КомплектацияНоменклатуры.Ссылка,
               |	КомплектацияНоменклатуры.Номер,
               |	КомплектацияНоменклатуры.Дата,
               |	КомплектацияНоменклатуры.Проведен,
               |	КомплектацияНоменклатуры.ПометкаУдаления,
               |	NULL,
               |	КомплектацияНоменклатуры.Организация,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.КомплектацияНоменклатуры КАК КомплектацияНоменклатуры
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ИнвентаризацияТоваровНаСкладе.Ссылка,
               |	ИнвентаризацияТоваровНаСкладе.Номер,
               |	ИнвентаризацияТоваровНаСкладе.Дата,
               |	ИнвентаризацияТоваровНаСкладе.Проведен,
               |	ИнвентаризацияТоваровНаСкладе.ПометкаУдаления,
               |	ИнвентаризацияТоваровНаСкладе.Склад,
               |	ИнвентаризацияТоваровНаСкладе.Организация,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ИнвентаризацияТоваровНаСкладе КАК ИнвентаризацияТоваровНаСкладе
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ЧекККМ.Ссылка,
               |	ЧекККМ.Номер,
               |	ЧекККМ.Дата,
               |	ЧекККМ.Проведен,
               |	ЧекККМ.ПометкаУдаления,
               |	ЧекККМ.Склад,
               |	ЧекККМ.Организация,
               |	ЧекККМ.СуммаДокумента,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ЧекККМ КАК ЧекККМ
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	РеализацияТоваровУслуг.Ссылка,
               |	РеализацияТоваровУслуг.Номер,
               |	РеализацияТоваровУслуг.Дата,
               |	РеализацияТоваровУслуг.Проведен,
               |	РеализацияТоваровУслуг.ПометкаУдаления,
               |	РеализацияТоваровУслуг.Контрагент,
               |	РеализацияТоваровУслуг.Организация,
               |	РеализацияТоваровУслуг.СуммаДокумента,
               |	РеализацияТоваровУслуг.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	СчетФактураВыданный.Ссылка,
               |	СчетФактураВыданный.Номер,
               |	СчетФактураВыданный.Дата,
               |	СчетФактураВыданный.Проведен,
               |	СчетФактураВыданный.ПометкаУдаления,
               |	СчетФактураВыданный.Контрагент,
               |	СчетФактураВыданный.Организация,
               |	СчетФактураВыданный.СуммаДокумента,
               |	СчетФактураВыданный.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.Ссылка,
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.Номер,
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.Дата,
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.Проведен,
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.ПометкаУдаления,
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.Контрагент,
               |	ИнвентаризацияТоваровОтданныхНаКомиссию.Организация,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ИнвентаризацияТоваровОтданныхНаКомиссию КАК ИнвентаризацияТоваровОтданныхНаКомиссию
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	КорректировкаДолга.Ссылка,
               |	КорректировкаДолга.Номер,
               |	КорректировкаДолга.Дата,
               |	КорректировкаДолга.Проведен,
               |	КорректировкаДолга.ПометкаУдаления,
               |	КорректировкаДолга.КонтрагентДебитор,
               |	КорректировкаДолга.Организация,
               |	NULL,
               |	КорректировкаДолга.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.КорректировкаДолга КАК КорректировкаДолга
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ОтчетКомиссионераОПродажах.Ссылка,
               |	ОтчетКомиссионераОПродажах.Номер,
               |	ОтчетКомиссионераОПродажах.Дата,
               |	ОтчетКомиссионераОПродажах.Проведен,
               |	ОтчетКомиссионераОПродажах.ПометкаУдаления,
               |	ОтчетКомиссионераОПродажах.Контрагент,
               |	ОтчетКомиссионераОПродажах.Организация,
               |	ОтчетКомиссионераОПродажах.СуммаДокумента,
               |	ОтчетКомиссионераОПродажах.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ОтчетКомитентуОПродажах.Ссылка,
               |	ОтчетКомитентуОПродажах.Номер,
               |	ОтчетКомитентуОПродажах.Дата,
               |	ОтчетКомитентуОПродажах.Проведен,
               |	ОтчетКомитентуОПродажах.ПометкаУдаления,
               |	ОтчетКомитентуОПродажах.Контрагент,
               |	ОтчетКомитентуОПродажах.Организация,
               |	ОтчетКомитентуОПродажах.СуммаДокумента,
               |	ОтчетКомитентуОПродажах.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	СписаниеТоваров.Ссылка,
               |	СписаниеТоваров.Номер,
               |	СписаниеТоваров.Дата,
               |	СписаниеТоваров.Проведен,
               |	СписаниеТоваров.ПометкаУдаления,
               |	СписаниеТоваров.Склад,
               |	СписаниеТоваров.Организация,
               |	СписаниеТоваров.СуммаДокумента,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.СписаниеТоваров КАК СписаниеТоваров
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ОприходованиеТоваров.Ссылка,
               |	ОприходованиеТоваров.Номер,
               |	ОприходованиеТоваров.Дата,
               |	ОприходованиеТоваров.Проведен,
               |	ОприходованиеТоваров.ПометкаУдаления,
               |	ОприходованиеТоваров.Склад,
               |	ОприходованиеТоваров.Организация,
               |	ОприходованиеТоваров.СуммаДокумента,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ОприходованиеТоваров КАК ОприходованиеТоваров
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ОтчетОРозничныхПродажах.Ссылка,
               |	ОтчетОРозничныхПродажах.Номер,
               |	ОтчетОРозничныхПродажах.Дата,
               |	ОтчетОРозничныхПродажах.Проведен,
               |	ОтчетОРозничныхПродажах.ПометкаУдаления,
               |	ОтчетОРозничныхПродажах.Склад,
               |	ОтчетОРозничныхПродажах.Организация,
               |	ОтчетОРозничныхПродажах.СуммаДокумента,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ЗаказПоставщику.Ссылка,
               |	ЗаказПоставщику.Номер,
               |	ЗаказПоставщику.Дата,
               |	ЗаказПоставщику.Проведен,
               |	ЗаказПоставщику.ПометкаУдаления,
               |	ЗаказПоставщику.Контрагент,
               |	ЗаказПоставщику.Организация,
               |	ЗаказПоставщику.СуммаДокумента,
               |	ЗаказПоставщику.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПоступлениеТоваровУслуг.Ссылка,
               |	ПоступлениеТоваровУслуг.Номер,
               |	ПоступлениеТоваровУслуг.Дата,
               |	ПоступлениеТоваровУслуг.Проведен,
               |	ПоступлениеТоваровУслуг.ПометкаУдаления,
               |	ПоступлениеТоваровУслуг.Контрагент,
               |	ПоступлениеТоваровУслуг.Организация,
               |	ПоступлениеТоваровУслуг.СуммаДокумента,
               |	ПоступлениеТоваровУслуг.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПеремещениеТоваров.Ссылка,
               |	ПеремещениеТоваров.Номер,
               |	ПеремещениеТоваров.Дата,
               |	ПеремещениеТоваров.Проведен,
               |	ПеремещениеТоваров.ПометкаУдаления,
               |	ПеремещениеТоваров.СкладОтправитель,
               |	ПеремещениеТоваров.Организация,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ГТДИмпорт.Ссылка,
               |	ГТДИмпорт.Номер,
               |	ГТДИмпорт.Дата,
               |	ГТДИмпорт.Проведен,
               |	ГТДИмпорт.ПометкаУдаления,
               |	ГТДИмпорт.Контрагент,
               |	ГТДИмпорт.Организация,
               |	NULL,
               |	ГТДИмпорт.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ГТДИмпорт КАК ГТДИмпорт
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	СчетФактураПолученный.Ссылка,
               |	СчетФактураПолученный.Номер,
               |	СчетФактураПолученный.Дата,
               |	СчетФактураПолученный.Проведен,
               |	СчетФактураПолученный.ПометкаУдаления,
               |	СчетФактураПолученный.Контрагент,
               |	NULL,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.СчетФактураПолученный КАК СчетФактураПолученный
              |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВозвратТоваровОтПокупателя.Ссылка,
               |	ВозвратТоваровОтПокупателя.Номер,
               |	ВозвратТоваровОтПокупателя.Дата,
               |	ВозвратТоваровОтПокупателя.Проведен,
               |	ВозвратТоваровОтПокупателя.ПометкаУдаления,
               |	ВозвратТоваровОтПокупателя.Контрагент,
               |	ВозвратТоваровОтПокупателя.Организация,
               |	ВозвратТоваровОтПокупателя.СуммаДокумента,
               |	ВозвратТоваровОтПокупателя.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВозвратТоваровПоставщику.Ссылка,
               |	ВозвратТоваровПоставщику.Номер,
               |	ВозвратТоваровПоставщику.Дата,
               |	ВозвратТоваровПоставщику.Проведен,
               |	ВозвратТоваровПоставщику.ПометкаУдаления,
               |	ВозвратТоваровПоставщику.Контрагент,
               |	ВозвратТоваровПоставщику.Организация,
               |	ВозвратТоваровПоставщику.СуммаДокумента,
               |	ВозвратТоваровПоставщику.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПереоценкаТоваровВРознице.Ссылка,
               |	ПереоценкаТоваровВРознице.Номер,
               |	ПереоценкаТоваровВРознице.Дата,
               |	ПереоценкаТоваровВРознице.Проведен,
               |	ПереоценкаТоваровВРознице.ПометкаУдаления,
               |	ПереоценкаТоваровВРознице.Склад,
               |	ПереоценкаТоваровВРознице.Организация,
               |	NULL,
               |	NULL,
               |	NULL
               |ИЗ
               |	Документ.ПереоценкаТоваровВРознице КАК ПереоценкаТоваровВРознице
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПереоценкаТоваровОтданныхНаКомиссию.Ссылка,
               |	ПереоценкаТоваровОтданныхНаКомиссию.Номер,
               |	ПереоценкаТоваровОтданныхНаКомиссию.Дата,
               |	ПереоценкаТоваровОтданныхНаКомиссию.Проведен,
               |	ПереоценкаТоваровОтданныхНаКомиссию.ПометкаУдаления,
               |	ПереоценкаТоваровОтданныхНаКомиссию.Контрагент,
               |	ПереоценкаТоваровОтданныхНаКомиссию.Организация,
               |	NULL,
               |	ПереоценкаТоваровОтданныхНаКомиссию.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ПереоценкаТоваровОтданныхНаКомиссию КАК ПереоценкаТоваровОтданныхНаКомиссию
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПриходныйКассовыйОрдер.Ссылка,
               |	ПриходныйКассовыйОрдер.Номер,
               |	ПриходныйКассовыйОрдер.Дата,
               |	ПриходныйКассовыйОрдер.Проведен,
               |	ПриходныйКассовыйОрдер.ПометкаУдаления,
               |	ПриходныйКассовыйОрдер.Контрагент,
               |	ПриходныйКассовыйОрдер.Организация,
               |	ПриходныйКассовыйОрдер.СуммаДокумента,
               |	ПриходныйКассовыйОрдер.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	РасходныйКассовыйОрдер.Ссылка,
               |	РасходныйКассовыйОрдер.Номер,
               |	РасходныйКассовыйОрдер.Дата,
               |	РасходныйКассовыйОрдер.Проведен,
               |	РасходныйКассовыйОрдер.ПометкаУдаления,
               |	РасходныйКассовыйОрдер.Контрагент,
               |	РасходныйКассовыйОрдер.Организация,
               |	РасходныйКассовыйОрдер.СуммаДокумента,
               |	РасходныйКассовыйОрдер.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
              |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПлатежноеПоручениеВходящее.Ссылка,
               |	ПлатежноеПоручениеВходящее.Номер,
               |	ПлатежноеПоручениеВходящее.Дата,
               |	ПлатежноеПоручениеВходящее.Проведен,
               |	ПлатежноеПоручениеВходящее.ПометкаУдаления,
               |	ПлатежноеПоручениеВходящее.Контрагент,
               |	ПлатежноеПоручениеВходящее.Организация,
               |	ПлатежноеПоручениеВходящее.СуммаДокумента,
               |	ПлатежноеПоручениеВходящее.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ПлатежноеПоручениеВходящее КАК ПлатежноеПоручениеВходящее
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПлатежноеПоручениеИсходящее.Ссылка,
               |	ПлатежноеПоручениеИсходящее.Номер,
               |	ПлатежноеПоручениеИсходящее.Дата,
               |	ПлатежноеПоручениеИсходящее.Проведен,
               |	ПлатежноеПоручениеИсходящее.ПометкаУдаления,
               |	ПлатежноеПоручениеИсходящее.Контрагент,
               |	ПлатежноеПоручениеИсходящее.Организация,
               |	ПлатежноеПоручениеИсходящее.СуммаДокумента,
               |	ПлатежноеПоручениеИсходящее.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ПлатежноеПоручениеИсходящее КАК ПлатежноеПоручениеИсходящее
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ПоступлениеДопРасходов.Ссылка,
               |	ПоступлениеДопРасходов.Номер,
               |	ПоступлениеДопРасходов.Дата,
               |	ПоступлениеДопРасходов.Проведен,
               |	ПоступлениеДопРасходов.ПометкаУдаления,
               |	ПоступлениеДопРасходов.Контрагент,
               |	ПоступлениеДопРасходов.Организация,
               |	ПоступлениеДопРасходов.СуммаДокумента,
               |	ПоступлениеДопРасходов.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.ПоступлениеДопРасходов КАК ПоступлениеДопРасходов
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	АвансовыйОтчет.Ссылка,
               |	АвансовыйОтчет.Номер,
               |	АвансовыйОтчет.Дата,
               |	АвансовыйОтчет.Проведен,
               |	АвансовыйОтчет.ПометкаУдаления,
               |	АвансовыйОтчет.СкладОрдер,
               |	АвансовыйОтчет.Организация,
               |	АвансовыйОтчет.СуммаДокумента,
               |	АвансовыйОтчет.ВалютаДокумента,
               |	NULL
               |ИЗ
               |	Документ.АвансовыйОтчет КАК АвансовыйОтчет
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.Ссылка,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.Номер,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.Дата,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.Проведен,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.ПометкаУдаления,
               |	NULL,
               |	NULL,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.СуммаДокумента,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.ВалютаДокумента,
               |	ВнутреннееПеремещениеНаличныхДенежныхСредств.ОрганизацияОтправитель
               |ИЗ
               |	Документ.ВнутреннееПеремещениеНаличныхДенежныхСредств КАК ВнутреннееПеремещениеНаличныхДенежныхСредств
			   | ) КАК ВложенныйЗапрос
			   |" + ?(ОтборДат," ГДЕ  ВложенныйЗапрос.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания ","" ) + "
               |";

Результат = Запрос.Выполнить();
ТаблицаДокументов = Результат.Выгрузить();
ТаблицаДокументов.Колонки.Добавить("Пометка");

Для Каждого ТекСтрока Из ТаблицаДокументов Цикл
	ТекСтрока.Пометка = Истина;
КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельТаблицаДокументов"
////////////////////////////////////////////////////////////////////////////

// Устанавливает пометки на таблице документов
//
Процедура КоманднаяПанельТаблицаДокументовУстановитьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из ТаблицаДокументов Цикл
		
		Строка.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТаблицаДокументовУстановитьПометки()

// Снимает пометки на таблице документов
//
Процедура КоманднаяПанельТаблицаДокументовСнятьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из ТаблицаДокументов Цикл
		
		Строка.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТаблицаДокументовСнятьПометки()

// Проводит документы, отмеченные в таблице документов
//
Процедура КоманднаяПанельТаблицаДокументовПровести(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из ТаблицаДокументов Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				
				Попытка
					
					Строка.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
					Строка.ПометкаУдаления = Ложь;
					
				Исключение  	
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				КонецПопытки;
 				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельТаблицаДокументовПровести()

// Помечает на удаление документы, отмеченные в таблице документов
//
Процедура КоманднаяПанельТаблицаДокументовПометитьНаУдаление(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из ТаблицаДокументов Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Ссылка.ПолучитьОбъект() <> Неопределено Тогда
				
				Попытка
					Строка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(НЕ Строка.ПометкаУдаления);
					Строка.ПометкаУдаления = Ложь;
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельТаблицаДокументовПометитьНаУдаление()

// Удаляет непосредственно документы, помеченные в таблице документов
// 
Процедура КоманднаяПанельТаблицаДокументовУдалить(Кнопка)
	
	КодВозврата = Вопрос("Внимание! Выбранные документы будут удалены без возможности восстановления
	|и без проверки ссылочной целостности!", РежимДиалогаВопрос.ОКОтмена,,, "Помощник планирования");
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из ТаблицаДокументов Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Ссылка.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Ссылка.ПолучитьОбъект().Удалить();
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельТаблицаДокументовУдалить()

// Обновляет таблицу документов
//
Процедура КоманднаяПанельТаблицаДокументовОбновить(Кнопка)
	
	ЗаполнитьТаблицуДокументов();	
	// ОбновитьСостоянияДокументов();

КонецПроцедуры // КоманднаяПанельТаблицаДокументовОбновить()

// Открывает групповую обработку справочников и документов
//
Процедура КоманднаяПанельСформированныеДокументыГрупповаяОбработкаСправочниковИДокументов(Кнопка)
	ОткрытьГрупповуюОбработкуСправочниковИДокументов();	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыГрупповаяОбработкаСправочниковИДокументов()  

// Открывает универсальный журнал документов
//
Процедура КоманднаяПанельСформированныеДокументыУниверсальныйЖурналДокументов(Кнопка)
	 ОткрытьУниверсальныйЖурналДокументов();
 КонецПроцедуры // КоманднаяПанельСформированныеДокументыУниверсальныйЖурналДокументов()
 
// Открывает обработку проведения по партиям 
// 
Процедура КоманднаяПанельСформированныеДокументыПроведениеПоПартиям(Кнопка)
	 ОткрытьПроведениеПоПартиям();
 КонецПроцедуры // КоманднаяПанельСформированныеДокументыПроведениеПоПартиям()
  
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТабличноеПолеТаблицаДокументов"
////////////////////////////////////////////////////////////////////////////
 
// Процедура обработчик события Выбор элемента формы ТабличноеПолеТаблицаДокументов
//
Процедура ТабличноеПолеТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОбновитьСостоянияДокументов();
	
	Попытка
		
		ОткрытьЗначение(ВыбраннаяСтрока.Ссылка);
		
	Исключение
	КонецПопытки;

КонецПроцедуры // ТабличноеПолеТаблицаДокументовВыбор()

// Процедура обработчик события ПриПолученииДанных элемента формы ТабличноеПолеТаблицаДокументов
//
Процедура ТабличноеПолеТаблицаДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ОформлениеСтроки.Ячейки.Ссылка.ОтображатьФлажок = Истина;

		ОформлениеСтроки.Ячейки.Картинка.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		
		Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
			
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Проведен Тогда
			
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеТаблицаДокументовПриПолученииДанных()






   



