////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаПоискаПоСтроке;
Перем мТекстПоискаПоСтроке;
Перем мПоследнееЗначениеЭлементаПоискаПоСтроке;

Перем мСписокЗначенийОтбораНоменклатуры;
Перем мСписокЗначенийКонтрагента;

Перем мКнопкаОтображенияСкладов;
Перем мКнопкаОтображенияКартинки;

Перем мСохраненноеЗначениеКнопкиОтображенияСкладов;
Перем мСохраненноеЗначениеКнопкиОтображенияКартинки;

Перем мСтруктураТекущейНоменклатурыСтраниц;
Перем мКонтрагентЗакладкиЗаказов;

Перем мОформляемыеДокументы;

// список значений строк - префиксов колонок с суммами
Перем мСписокПрефиксовЦен;

// соответсвие хранит структуры курсов валют
Перем мСоответствиеКурсовВалют;

// количество колонок в табличном поле ОстаткиДляНовогоКлиента без учета колонок сумм
Перем мКоличествоБазовыхКолонокОстаткиТоваров;

// объект для поиска данных
Перем мПоискОбъектовВСпискахДанных;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает единственное, выбранное галочкой значение.
// если не выбрано ничего, либо несколько - то неопределено
Функция ПолучитьТипВыбраннойЦены()
	
	Если (мСписокПрефиксовЦен = Неопределено) или (мСписокПрефиксовЦен.Количество() = 0) или (мСписокПрефиксовЦен.Количество() > 1) Тогда
		Возврат Неопределено;
	Иначе
		ВыбраннаяСтрока = СписокЦенОстатков.Найти(мСписокПрефиксовЦен[0].Значение, "Префикс");
		Возврат ВыбраннаяСтрока.Ссылка; 
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру значений для выбранной номенклатуры с пустой характеристикой
//
Функция ПолучитьСтруктуруЗначенийНоменклатуры()
	
	ДеревоОстатковНоменклатуры = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков, Истина);
	УправлениеЗапасами.ПолучитьДеревоОстатковНоменклатуры(ДеревоОстатковНоменклатуры, ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка, Ложь, СписокЦенОстатков, Истина, мСоответствиеКурсовВалют);
	// находим пустую характеристику
	СтрокаОстатка = ДеревоОстатковНоменклатуры.Строки.Найти(Неопределено, "ХарактеристикаСклад", Истина);
	Если СтрокаОстатка = Неопределено Тогда
		СтрокаОстатка = ДеревоОстатковНоменклатуры.Строки.Найти(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), "ХарактеристикаСклад", Истина);
	КонецЕсли;

	Если СтрокаОстатка <> Неопределено Тогда
		СтруктураЗначений = СформироватьСтруктуруПараметровСтроки(ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка, СтрокаОстатка)
	КонецЕсли;
	
	Возврат СтруктураЗначений;

КонецФункции // ПолучитьСтруктуруЗначенийНоменклатуры()

// Функция предоставляет выбор документа для добавления номенклатуры из списка
//
Функция ВыбратьРедактируемыйДокумент()

	Если мОформляемыеДокументы.Количество() = 1 Тогда
		
		Возврат мОформляемыеДокументы[0];
		
	Иначе
		
		СписокВыбора = Новый СписокЗначений;
		
		Для каждого СтрокаТЗ Из мОформляемыеДокументы Цикл
			ПредставлениеДокумента = СтрокаТЗ.Объект.Метаданные().Синоним + " №" + СтрокаТЗ.Объект.Номер + " от " + СтрокаТЗ.Объект.Дата + ?(ЗначениеЗаполнено(СтрокаТЗ.Объект.Контрагент), (", " + СтрокаТЗ.Объект.Контрагент), "");
			СписокВыбора.Добавить(СтрокаТЗ, ПредставлениеДокумента);
		КонецЦикла;
		
		ВыбранноеЗначение = СписокВыбора.ВыбратьЭлемент("Выберите документ для добавления номенклатуры");
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Возврат ВыбранноеЗначение.Значение
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 

КонецФункции // ВыбратьРедактируемыйДокумент()

// Функция формирует Структуру параметров по текущей строке остатков
//
Функция СформироватьСтруктуруПараметровСтроки(Номенклатура, ТекущаяСтрока)
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("Номенклатура", Номенклатура);
	
	Если ТекущаяСтрока.Родитель = Неопределено Тогда
		ДанныеСтроки = ТекущаяСтрока;
	Иначе
		ДанныеСтроки = ТекущаяСтрока.Родитель;
	КонецЕсли; 
	
	СтруктураЗначений.Вставить("Характеристика"            , ДанныеСтроки.ХарактеристикаСклад);
	СтруктураЗначений.Вставить("СпособЗаполненияЦен"       , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	ЗаполнитьСуммыВСтруктуре(СтруктураЗначений, ДанныеСтроки);

	Возврат СтруктураЗначений;
	
КонецФункции

// Функция получает из регистра сведений данные незарегистрированного контрагента,
// предлагая в противном случае создать нового
//
Функция ПолучитьДанныеОНезарегистрированномКонтрагенте(НаименованиеКонтрагента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ *
		|ИЗ
		|	РегистрСведений.ДанныеНезарегистрированныхКонтрагентов КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОбъектРегистратор ССЫЛКА Документ.СчетНаОплатуПокупателю
		|	И Контрагенты.НаименованиеКонтрагента = &ПользНаименование
		|";
	
	Запрос.УстановитьПараметр("ПользНаименование", НаименованиеКонтрагента);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтрагента   = Выборка.АдресЭлектроннойПочтыКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ВидАдресаКонтрагента               = Выборка.ВидАдресаКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ВидТелефонаКонтрагента             = Выборка.ВидТелефонаКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ВидЭлектроннойПочтыКонтрагента     = Выборка.ВидЭлектроннойПочтыКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ГородКонтрагента                   = Выборка.ГородКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента = Выборка.ДобавочныйНомерТелефонаКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ДомКонтрагента                     = Выборка.ДомКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ДополнительноеОписание             = Выборка.ДополнительноеОписание;
		ДанныеНезарегистрированногоКонтрагента.ИНН                                = Выборка.ИНН;
		ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтрагента       = Выборка.КодГородаТелефонаКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.КорпусКонтрагента                  = Выборка.КорпусКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента            = Выборка.НаименованиеКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагентаПолное      = Выборка.НаименованиеКонтрагентаПолное;
		ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента           = Выборка.НомерТелефонаКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ОКОПФ                              = Выборка.ОКОПФ;
		ДанныеНезарегистрированногоКонтрагента.ОсновнойВидДеятельностиКонтрагента = Выборка.ОсновнойВидДеятельностиКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.Покупатель                         = Выборка.Покупатель;
		ДанныеНезарегистрированногоКонтрагента.Поставщик                          = Выборка.Поставщик;
		ДанныеНезарегистрированногоКонтрагента.УлицаКонтрагента                   = Выборка.УлицаКонтрагента;
		ДанныеНезарегистрированногоКонтрагента.ЮрФизЛицо                          = Выборка.ЮрФизЛицо;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает галочку в типе цены по основному договору контрагента
//
Процедура УстановитьТипЦенДляКонтрагента()
	
	Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		Попытка
			// Попытка нужна для обхода ограничения прав доступа
			ОсновнойДоговор = Контрагент.ОсновнойДоговорКонтрагента;
		Исключение
			Возврат;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ОсновнойДоговор)
			И ЗначениеЗаполнено(ОсновнойДоговор.ТипЦен)
			И ТипЗнч(ОсновнойДоговор.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
			
			
			// у списка СписокЦенОстатков взведем галочку у данного типа цены, а все остальные типы цен уберем
			СтрокаТипаЦен  = СписокЦенОстатков.Найти(ОсновнойДоговор.ТипЦен, "Ссылка");
			Если (СтрокаТипаЦен <> Неопределено) и (НЕ СтрокаТипаЦен.Пометка) Тогда
				// Убираем галочки у всех типов цен, кроме одной
				РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Ложь);
				// обновляем таблицу остатков
				СтрокаТипаЦен.Пометка = Истина;
				ПерестроитьДеревоОстатков();
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура полностью перестраивает дерево остатков
//
Процедура ПерестроитьДеревоОстатков()
	
	// структуры остатков надо восстановить
	ОстаткиДляНовогоКлиента = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
	ЗаполнитьДетальныеОстатки(Истина);
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура добавляет строку в документ по структуре данных
// если структура неопределена, то она заполняется по текущей номенклатуре и пустой характеристике товара
Процедура ДобавитьДанныеВДокументПоВыборуСтроки(СтруктураДанных = Неопределено, СтандартнаяОбработка)
	
	Если мОформляемыеДокументы.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаВыбораРедактируемогоДокумента = ВыбратьРедактируемыйДокумент();
		Если СтрокаВыбораРедактируемогоДокумента <> Неопределено Тогда
			
			Если СтруктураДанных = Неопределено Тогда
				СтруктураДанных = ПолучитьСтруктуруЗначенийНоменклатуры();
			КонецЕсли;
			
			УправлениеКонтактами.ДобавитьСтрокуВТабличнуюЧастьДокумента(СтруктураДанных, ?(ЭлементыФормы.Номенклатура.ТекущиеДанные.Услуга, "Услуги", "Товары"), СтрокаВыбораРедактируемогоДокумента.Объект, СтрокаВыбораРедактируемогоДокумента.Форма);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	Если ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа Тогда
		КатегорииЭлемента.НазначениеКатегорий   = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
		КатегорииЭлемента.ОбъектОтбораКатегорий = ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка;
	Иначе
		КатегорииЭлемента.НазначениеКатегорий   = Неопределено;
		КатегорииЭлемента.ОбъектОтбораКатегорий = Неопределено;
	КонецЕсли; 
	КатегорииЭлемента.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения()

	СвойстваЭлемента.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Номенклатура;
	Если ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа Тогда
		СвойстваЭлемента.ОбъектОтбораЗначений   = ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка;
		СвойстваЭлемента.ОбъектОтбораНазначений = ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка;
	Иначе
		СвойстваЭлемента.ОбъектОтбораЗначений   = Неопределено;
		СвойстваЭлемента.ОбъектОтбораНазначений = Неопределено;
	КонецЕсли; 
	СвойстваЭлемента.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

// Процедура пересчитывает суммы номенклатуры по курсам
//
Процедура ПересчитатьВалютыОстатковНоменклатуры()
	
	Если НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
		СтруктураКурса = УправлениеЗапасами.ВернутьСтруктуруКурсВалюты(мСоответствиеКурсовВалют, ВалютаЦены);
	КонецЕсли;

	УправлениеЗапасами.ПересчитатьОстаткиВВалюте(ОстаткиДляНовогоКлиента, мСписокПрефиксовЦен, СтруктураКурса, ВВалютеЦены, ВалютаЦены)

КонецПроцедуры

// Процедура управляет отображением панели с изображением номенклатуры
//
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()
	
	Если мКнопкаОтображенияКартинки.Пометка Тогда
		
		ЭлементыФормы.РазделительКартинки.Свертка        = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельОсновногоИзображения.Высота = 0 Тогда
			ТекущийВерх = ЭлементыФормы.ПанельОсновногоИзображения.Верх;
			ЭлементыФормы.ПанельОсновногоИзображения.Верх = ТекущийВерх - 120;
			ЭлементыФормы.ПанельОсновногоИзображения.Высота = ТекущийВерх - ЭлементыФормы.ПанельОсновногоИзображения.Верх;
		КонецЕсли;
		
		Если ЭлементыФормы.ПанельОсновногоИзображения.Лево = 0 Тогда
			ЭлементыФормы.ПанельОсновногоИзображения.Ширина = ЭлементыФормы.ПанельОсновногоИзображения.Ширина - 8;
			ЭлементыФормы.ПанельОсновногоИзображения.Лево = 8;
		КонецЕсли;
		
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Низ);
	Иначе
		
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительКартинки.Свертка        = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	
	ПоказатьКартинку();
	
КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

// Процедура получает изображение номенклатуры или создает новое
//
Процедура ПоказатьКартинку()
	
	Если мКнопкаОтображенияКартинки.Пометка Тогда
		
		Если НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные = Неопределено
			И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа
			И ЗначениеЗаполнено(ЭлементыФормы.Номенклатура.ТекущиеДанные.ОсновноеИзображение) Тогда
			ЭлементыФормы.Картинка.Картинка = ЭлементыФормы.Номенклатура.ТекущиеДанные.ОсновноеИзображение.Хранилище.Получить();
		Иначе
			ЭлементыФормы.Картинка.Картинка = Новый Картинка;
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.Картинка.Картинка = Новый Картинка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет отображением иерархии номенклатуры
//
Процедура УстановкаИерархииНоменклатурыПриПервомОткрытии(ИмяСтраницы = Неопределено)

	Если НЕ ЭлементыФормы.Номенклатура.ИерархическийПросмотр Тогда
		Если ИмяСтраницы = Неопределено Тогда
			Если ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.Дерево Тогда
				ЭлементыФормы.Номенклатура.ИерархическийПросмотр = Истина;
			КонецЕсли; 
		Иначе
			Если ИмяСтраницы = "Дерево" Тогда
				ЭлементыФормы.Номенклатура.ИерархическийПросмотр = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура обновляет данные страниц панели
//
Процедура ОбновитьДанныеСтраницПанели()

	Если ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.ОсновныеПараметры Тогда
		ЗаполнитьОбщиеПараметры();
	ИначеЕсли ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.ОстаткиЦены Тогда
		ЗаполнитьДетальныеОстатки();
	ИначеЕсли ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.Заказы Тогда
		ЗаполнитьДанныеЗаказовПокупателя();
	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью закладки заказов
//
Процедура ВидимостьЗакладкиЗаказов()

	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(Контрагент) Тогда
		ЭлементыФормы.ПанельДействий.Страницы.Заказы.Видимость = Истина;
	Иначе
		ЭлементыФормы.ПанельДействий.Страницы.Заказы.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Процедура управляет доступностью кнопок "Оформить новый заказ" и "Оформить реализацию"
//
Процедура ДоступностьОформленияЗаказа()

	ДоступностьКнопки = НЕ (ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("Строка"));
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОформитьНовыйЗаказ.Доступность = ДоступностьКнопки;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОформитьРеализацию.Доступность = ДоступностьКнопки;

КонецПроцедуры

// Процедура заполняет структуру значенйи всеми суммами из строки
//
Процедура ЗаполнитьСуммыВСтруктуре(СтруктураЗначений, ДанныеСтроки)
	
	Если мСписокПрефиксовЦен = Неопределено Тогда
		мСписокПрефиксовЦен = Новый СписокЗначений;
	КонецЕсли;
	
	Для Каждого Префикс Из мСписокПрефиксовЦен Цикл
		ПрефиксСтрока = Префикс.Значение;
		
		СтруктураЗначений.Вставить(ПрефиксСтрока + "ВалютаЦены"                , ДанныеСтроки[ПрефиксСтрока + "ВалютаЦены"]);
		СтруктураЗначений.Вставить(ПрефиксСтрока + "Цена"                      , ДанныеСтроки[ПрефиксСтрока + "ЦенаНоменклатуры"]);
		СтруктураЗначений.Вставить(ПрефиксСтрока + "КурсВалюты"                , ДанныеСтроки[ПрефиксСтрока + "КурсВалюты"]);
		СтруктураЗначений.Вставить(ПрефиксСтрока + "КратностьВалюты"           , ДанныеСтроки[ПрефиксСтрока + "КратностьВалюты"]);
		СтруктураЗначений.Вставить(ПрефиксСтрока + "ЕдиницаИзмерения"          , ?(НЕ ЗначениеЗаполнено(ДанныеСтроки[ПрефиксСтрока + "ЕдиницаЦены"]), ЭлементыФормы.Номенклатура.ТекущиеДанные.ЕдиницаХраненияОстатков, ДанныеСтроки[ПрефиксСтрока + "ЕдиницаЦены"]));
		
	КонецЦикла;
	
	СтруктураЗначений.Вставить("СписокПрефиксовЦен", мСписокПрефиксовЦен.Скопировать());
	
КонецПроцедуры

// Процедура заполняет значениями поля Контрагент и Валюта
//
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов")
	КонецЕсли; 
	
КонецПроцедуры

// Процедура заполняет значениями общие поля
//
Процедура ЗаполнитьОбщиеПараметры()

	Если ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.ОсновныеПараметры
		И ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено
		И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа Тогда
		
		Если ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка <> мСтруктураТекущейНоменклатурыСтраниц.ОсновныеПараметры Тогда
		
			ПрочитатьЗаполнитьСвойстваИЗначения();
			ПрочитатьЗаполнитьКатегории();
			
			НаименованиеПолное = ЭлементыФормы.Номенклатура.ТекущиеДанные.НаименованиеПолное;
			Артикул = ЭлементыФормы.Номенклатура.ТекущиеДанные.Артикул;
			Если ЭлементыФормы.Номенклатура.ТекущиеДанные.Услуга Тогда
				Вид = "Услуга";
			ИначеЕсли ЭлементыФормы.Номенклатура.ТекущиеДанные.Набор Тогда
				Вид = "Набор";
			Иначе
				Вид = "Товар";
			КонецЕсли;
			ЕдиницаБазовая         = ЭлементыФормы.Номенклатура.ТекущиеДанные.БазоваяЕдиницаИзмерения;
			ЕдиницаОстатков        = ЭлементыФормы.Номенклатура.ТекущиеДанные.ЕдиницаХраненияОстатков;
			ОтветственныйЗаЗакупки = ЭлементыФормы.Номенклатура.ТекущиеДанные.ОтветственныйМенеджерЗаПокупки;
			ОсновнойПоставщик      = ЭлементыФормы.Номенклатура.ТекущиеДанные.ОсновнойПоставщик;
			НоменклатурнаяГруппа   = ЭлементыФормы.Номенклатура.ТекущиеДанные.НоменклатурнаяГруппа;
			
			мСтруктураТекущейНоменклатурыСтраниц.ОсновныеПараметры = ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка;
		
		КонецЕсли;
		
	Иначе
		
		СвойстваЭлемента.СвойстваИЗначения.Очистить();
		
		НаименованиеПолное     = "";
		Артикул                = "";
		Вид                    = "";
		ЕдиницаБазовая         = "";
		ЕдиницаОстатков        = "";
		ОтветственныйЗаЗакупки = "";
		ОсновнойПоставщик      = "";
		НоменклатурнаяГруппа   = "";
		
		мСтруктураТекущейНоменклатурыСтраниц.ОсновныеПараметры = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значениями поля детальных остатков
//
Процедура ЗаполнитьДетальныеОстатки(БезусловноеОбновление = Ложь)

	Если ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено
		И ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.ОстаткиЦены
		И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа Тогда
		
		Если БезусловноеОбновление
			ИЛИ мСтруктураТекущейНоменклатурыСтраниц.ОстаткиЦены <> ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка Тогда
			
			мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
			УправлениеЗапасами.ПолучитьДеревоОстатковНоменклатуры(ОстаткиДляНовогоКлиента, ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка, мКнопкаОтображенияСкладов.Пометка, СписокЦенОстатков, , мСоответствиеКурсовВалют);
			//Разворачиваем дерево
			Для Каждого СтрокаДереваОстатков Из ОстаткиДляНовогоКлиента.Строки Цикл
				ЭлементыФормы.ОстаткиДляНовогоКлиента.Развернуть(СтрокаДереваОстатков, Истина);
			КонецЦикла;
			РаботаСДиалогами.ОбновитьШапкиКолонокОстатков(ЭлементыФормы.ОстаткиДляНовогоКлиента, ЭлементыФормы.Номенклатура.ТекущиеДанные.ЕдиницаХраненияОстатков);
			ПересчитатьВалютыОстатковНоменклатуры();
			
			мСтруктураТекущейНоменклатурыСтраниц.ОстаткиЦены = ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка;
			
		КонецЕсли;
		
	Иначе
		
		ОстаткиДляНовогоКлиента.Строки.Очистить();
		мСтруктураТекущейНоменклатурыСтраниц.ОстаткиЦены = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значениями поля заказа покупателя
//
Процедура ЗаполнитьДанныеЗаказовПокупателя()

	Если ЗначениеЗаполнено(Контрагент)
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено
		И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа
		И ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы.Заказы Тогда
		
		Если мСтруктураТекущейНоменклатурыСтраниц.Заказы <> ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка
			ИЛИ мКонтрагентЗакладкиЗаказов <> Контрагент Тогда
		
			ЗаказыТекущегоПокупателя.Очистить();
			ЗаказыТекущегоПокупателяВЗаказахПоставщикам.Очистить();
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Номенклатура", ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка);
			Запрос.УстановитьПараметр("Контрагент"  , Контрагент);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ОстаткиИРезервы.ЗаказПокупателя.ДатаОтгрузки    КАК ДатаОтгрузки,
			|	ОстаткиИРезервы.ЗаказПокупателя                 КАК ЗаказПокупателя,
			|	ОстаткиИРезервы.ЗаказПокупателя.Проведен        КАК Проведен,
			|	ОстаткиИРезервы.ЗаказПокупателя.ПометкаУдаления КАК ПометкаУдаления,
			|	СУММА(ОстаткиИРезервы.Остаток)                  КАК ОстатокПоЗаказу,
			|	СУММА(ОстаткиИРезервы.ОстатокРезерва)           КАК ОстатокРезерваПоЗаказу
			|ИЗ
			|	(
			|	ВЫБРАТЬ
			|		ЗаказыПокупателейОстатки.ЗаказПокупателя                 КАК ЗаказПокупателя,
			|		ЗаказыПокупателейОстатки.КоличествоОстаток               КАК Остаток,
			|		ТоварыВРезервеНаСкладах.КоличествоОстаток                КАК ОстатокРезерва
			|	ИЗ
			|		РегистрНакопления.ЗаказыПокупателей.Остатки(, (Номенклатура = &Номенклатура И ДоговорКонтрагента.Владелец = &Контрагент)) КАК ЗаказыПокупателейОстатки
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		(
			|		ВЫБРАТЬ
			|			ТоварыВРезервеНаСкладахОстатки.ДокументРезерва          КАК ЗаказПокупателя,
			|			СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
			|		ИЗ
			|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, (Номенклатура = &Номенклатура
			|			И ДокументРезерва ССЫЛКА Документ.ЗаказПокупателя
			|			И ДокументРезерва.Контрагент = &Контрагент)) КАК ТоварыВРезервеНаСкладахОстатки
			|		СГРУППИРОВАТЬ ПО
			|			ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
			|		)
			|		КАК ТоварыВРезервеНаСкладах
			|	ПО
			|		ЗаказыПокупателейОстатки.ЗаказПокупателя = ТоварыВРезервеНаСкладах.ЗаказПокупателя
			|		
			|	ОБЪЕДИНИТЬ
			|		
			|	ВЫБРАТЬ
			|		ОстаткиТоваровВРезервеНаСкладах.ЗаказПокупателя,
			|		NULL,
			|		ОстаткиТоваровВРезервеНаСкладах.КоличествоОстаток
			|	ИЗ
			|		(
			|		ВЫБРАТЬ
			|			ТоварыВРезервеНаСкладахОстатки.ДокументРезерва КАК ЗаказПокупателя,
			|			СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
			|		ИЗ
			|			РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки( , Номенклатура = &Номенклатура
			|						И ДокументРезерва ССЫЛКА Документ.ЗаказПокупателя
			|						И ДокументРезерва.Контрагент = &Контрагент
			|						И (НЕ ДокументРезерва В
			|									(ВЫБРАТЬ
			|											ЗаказыПокупателейОстатки.ЗаказПокупателя
			|									ИЗ
			|											РегистрНакопления.ЗаказыПокупателей.Остатки( , Номенклатура = &Номенклатура
			|												И ДоговорКонтрагента.Владелец = &Контрагент) КАК ЗаказыПокупателейОстатки))) КАК ТоварыВРезервеНаСкладахОстатки
			|		СГРУППИРОВАТЬ ПО
			|			ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
			|		)
			|		КАК ОстаткиТоваровВРезервеНаСкладах
			|	)
			|	КАК ОстаткиИРезервы	
			|СГРУППИРОВАТЬ ПО
			|	ОстаткиИРезервы.ЗаказПокупателя
			|";
			
			ЗаказыТекущегоПокупателя = Запрос.Выполнить().Выгрузить();
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя                 КАК ЗаказПокупателя,
			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки    КАК ДатаОтгрузки,
			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику                 КАК ЗаказПоставщику,
			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
			|	СУММА(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток)        КАК Количество
			|ИЗ
			|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки( , ЗаказПокупателя.Контрагент = &Контрагент
			|		И Номенклатура = &Номенклатура) КАК РазмещениеЗаказовПокупателейОстатки
			|СГРУППИРОВАТЬ ПО
			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя,
			|	РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику
			|";
			
			ЗаказыТекущегоПокупателяВЗаказахПоставщикам = Запрос.Выполнить().Выгрузить();
			
			мСтруктураТекущейНоменклатурыСтраниц.Заказы = ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка;
			мКонтрагентЗакладкиЗаказов = Контрагент;
		
		КонецЕсли;
		
	Иначе
		
		ЗаказыТекущегоПокупателя.Очистить();
		ЗаказыТекущегоПокупателяВЗаказахПоставщикам.Очистить();
		
		мСтруктураТекущейНоменклатурыСтраниц.Заказы = Неопределено;
		мКонтрагентЗакладкиЗаказов = Неопределено;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает заголовок колонки ХарактеристикаСклад, таблицы остатков
//
Процедура УстановитьЗаголовокКолонкиТаблицыОстатков()

	Если мКнопкаОтображенияСкладов.Пометка Тогда
		ЭлементыФормы.ОстаткиДляНовогоКлиента.Колонки.ХарактеристикаСклад.ТекстШапки = "Характеристика/Склад";
	Иначе
		ЭлементыФормы.ОстаткиДляНовогоКлиента.Колонки.ХарактеристикаСклад.ТекстШапки = "Характеристика";
	КонецЕсли; 

КонецПроцедуры

// Процедура устанавливает доступность элемента управления ВалютаЦены
//
Процедура ПроверитьДоступностьВалютуЦен()
	
	ЭлементыФормы.ВалютаЦены.Доступность = НЕ ВВалютеЦены;
	ЭлементыФормы.НадписьВалютаЦены.Доступность = НЕ ВВалютеЦены;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик "Перед открытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	мПоискОбъектовВСпискахДанных.ВосстановитьНастройки(ЭлементыФормы.ТипПоискаДанных);
	мПоискОбъектовВСпискахДанных.ВосстановитьСписокОтбораДанных();
			
	мКоличествоБазовыхКолонокОстаткиТоваров = ЭлементыФормы.ОстаткиДляНовогоКлиента.Колонки.Количество();
	// восстанавливаем выделенные элементы у СписокЦенОстатков
	СписокЦенОстатков = УправлениеЗапасами.ЗаполнитьСписокТиповЦенДляПолученияОстатков();

КонецПроцедуры

// Процедура-обработчик открытия формы
//
Процедура ПриОткрытии()
	
	Для каждого Закладка Из ЭлементыФормы.ПанельДействий.Страницы Цикл
		мСтруктураТекущейНоменклатурыСтраниц.Вставить(Закладка.Имя, Неопределено);
	КонецЦикла; 
	
	ИмяЗакладки = ВосстановитьЗначение("ИмяЗакладки");
	Если ТипЗнч(ИмяЗакладки) = Тип("Строка") И ЭлементыФормы.ПанельДействий.Страницы.Найти(ИмяЗакладки) <> Неопределено Тогда
		УстановкаИерархииНоменклатурыПриПервомОткрытии(ИмяЗакладки);
		ЭлементыФормы.ПанельДействий.ТекущаяСтраница = ЭлементыФормы.ПанельДействий.Страницы[ИмяЗакладки];
	Иначе
		УстановкаИерархииНоменклатурыПриПервомОткрытии();
	КонецЕсли;
	
	Если ТипЗнч(мСохраненноеЗначениеКнопкиОтображенияСкладов) = Тип("Булево") Тогда
		мКнопкаОтображенияСкладов.Пометка = мСохраненноеЗначениеКнопкиОтображенияСкладов;
	КонецЕсли;
	
	Если ТипЗнч(мСохраненноеЗначениеКнопкиОтображенияКартинки) = Тип("Булево") Тогда
		мКнопкаОтображенияКартинки.Пометка = мСохраненноеЗначениеКнопкиОтображенияКартинки;
	КонецЕсли; 
	
	УстановитьЗаголовокКолонкиТаблицыОстатков();
	
	ЗаполнитьЗначенияПоУмолчанию();
	
	РаботаСДиалогами.ВосстановитьСписокЗначенийУнивер(мСписокЗначенийКонтрагента, "мСписокЗначенийКонтрагента", ЭлементыФормы.Контрагент.СписокВыбора);
	
	ДоступностьОформленияЗаказа();
	
	ВидимостьЗакладкиЗаказов();
	
	ОбновитьДанныеСтраницПанели();
	
	ПоказатьСпрятатьПанельОсновногоИзображения();
	
КонецПроцедуры

// Процедура-обработчик обновления отображения формы
//
Процедура ОбновлениеОтображения()
	
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Контрагент, мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке);
	
КонецПроцедуры

// Процедура-обработчик закрытия формы
//
Процедура ПриЗакрытии()
	
	мПоискОбъектовВСпискахДанных.СохранитьНастройки();
	СохранитьЗначение("ИмяЗакладки", ЭлементыФормы.ПанельДействий.ТекущаяСтраница.Имя);
	
КонецПроцедуры

// Процедура-обработчик события формы ОбработкаОповещения
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыПоиска"
		И Источник = ЭтаФорма Тогда
		
		// обновляем выпадающий список настроек отбора данных
		мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	ИначеЕсли ИмяСобытия = "ЗакрытаПодчиненнаяФормаДляРабочегоМестаМенеджераПоПродажам" Тогда
		СтрокаЗакрываемогоОбъекта = мОформляемыеДокументы.Найти(Параметр, "Объект");
		Если СтрокаЗакрываемогоОбъекта <> Неопределено Тогда
			мОформляемыеДокументы.Удалить(СтрокаЗакрываемогоОбъекта);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события формы ПередСохранениемЗначений
//
Процедура ПередСохранениемЗначений(Отказ)
	
	СтруктураСохранения = Новый Структура;
	СтруктураСохранения.Вставить("ЗначениеОтбораСпискаНоменклатуры", ЗначениеОтбораСпискаНоменклатуры);
	СтруктураСохранения.Вставить("Контрагент"                      , Контрагент);
	СтруктураСохранения.Вставить("ВВалютеЦены"                     , ВВалютеЦены);
	СтруктураСохранения.Вставить("ВалютаЦены"                      , ВалютаЦены);
	СтруктураСохранения.Вставить("ИерархическийПросмотр"           , ЭлементыФормы.Номенклатура.ИерархическийПросмотр);
	СтруктураСохранения.Вставить("ОтображатьСклады"                , мКнопкаОтображенияСкладов.Пометка);
	СтруктураСохранения.Вставить("ОтображатьКартинку"              , мКнопкаОтображенияКартинки.Пометка);
	СтруктураСохранения.Вставить("СписокПомеченныхЭлементовТиповЦен", мСписокПрефиксовЦен);
	
	ПорядокСледованияТиповЦен = Новый Массив;
	ПорядокСледованияТиповЦен = СписокЦенОстатков.ВыгрузитьКолонку("Ссылка");
	СтруктураСохранения.Вставить("ПрядокСледованияЭлементовТиповЦен", ПорядокСледованияТиповЦен);
	
	СохраняемыеЗначения = СтруктураСохранения;
	
КонецПроцедуры

// Процедура-обработчик события формы ПослеВосстановленияЗначений
//
Процедура ПослеВосстановленияЗначений()
	
	Если ТипЗнч(СохраняемыеЗначения) = Тип("Структура") Тогда
	
		ЗначениеОтбораСпискаНоменклатуры                 = СохраняемыеЗначения.ЗначениеОтбораСпискаНоменклатуры;
		Контрагент                                       = СохраняемыеЗначения.Контрагент;
		ВВалютеЦены                                      = СохраняемыеЗначения.ВВалютеЦены;
		ВалютаЦены                                       = СохраняемыеЗначения.ВалютаЦены;
		ЭлементыФормы.Номенклатура.ИерархическийПросмотр = СохраняемыеЗначения.ИерархическийПросмотр;
		мСохраненноеЗначениеКнопкиОтображенияСкладов     = СохраняемыеЗначения.ОтображатьСклады;
		мСохраненноеЗначениеКнопкиОтображенияКартинки    = СохраняемыеЗначения.ОтображатьКартинку;
		
		Если (ВВалютеЦены = Неопределено) Или НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВВалютеЦены = Истина;	
		КонецЕсли;
		ПроверитьДоступностьВалютуЦен();
		
		
		// восстанавливаем выделенные элементы у СписокЦенОстатков
		Если (СписокЦенОстатков.Количество() = 0) Тогда
			СписокЦенОстатков = УправлениеЗапасами.ЗаполнитьСписокТиповЦенДляПолученияОстатков();
		КонецЕсли;
		
		СписокПомеченныхЭлементовТиповЦен  = Неопределено;
		СохраняемыеЗначения.Свойство("СписокПомеченныхЭлементовТиповЦен", СписокПомеченныхЭлементовТиповЦен);
		УправлениеЗапасами.ВосстановитьФлажкиТиповЦен(СписокЦенОстатков, СписокПомеченныхЭлементовТиповЦен);
				
		ПорядокСледованияТиповЦен  = Неопределено;
		СохраняемыеЗначения.Свойство("ПрядокСледованияЭлементовТиповЦен", ПорядокСледованияТиповЦен);
		УправлениеЗапасами.УпорядочитьСписокТиповЦен(СписокЦенОстатков, ПорядокСледованияТиповЦен);
				
	КонецЕсли; 
	
	// структуры остатков надо восстановить
	ОстаткиДляНовогоКлиента = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура-обработчик активизации строки дерева номенклатуры
//
Процедура НоменклатураДеревоПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭлементыФормы.Номенклатура.ИерархическийПросмотр Тогда
		ОтветНаВопрос = Вопрос("Для отбора списка номенклатуры по текущей группе необходимо установить режим иерархического просмотра. Установить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			ЭлементыФормы.Номенклатура.ИерархическийПросмотр = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик активизации строки таблицы номенклатуры
//
Процедура НоменклатураПриАктивизацииСтроки(Элемент)
	
	ОбновитьДанныеСтраницПанели();
	
	ПоказатьКартинку();
	
КонецПроцедуры

// Процедура-обработчик нажатия ссылки "Ответственный за закупки", вкладки Параметры
//
Процедура ОтветственныйЗаЗакупкиНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ОтветственныйЗаЗакупки) Тогда
		ОтветственныйЗаЗакупки.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия ссылки "Основной поставщик", вкладки Параметры
//
Процедура ОсновнойПоставщикНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ОсновнойПоставщик) Тогда
		Попытка
			ОсновнойПоставщик.ПолучитьФорму().Открыть();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия ссылки "Номенклатурная группа", вкладки Параметры
//
Процедура НоменклатурнаяГруппаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		НоменклатурнаяГруппа.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик вывода строки табличного поля СвойстваИЗначения, вкладки Параметры
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик нажатия ссылки "Базовая", вкладки Параметры
//
Процедура ЕдиницаБазоваяНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ЕдиницаБазовая) Тогда
		ЕдиницаБазовая.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик нажатия ссылки "Остатков", вкладки Параметры
//
Процедура ЕдиницаОстатковНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ЕдиницаОстатков) Тогда
		ЕдиницаОстатков.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик "При Изменении" поля ввода ВалютаЦены
//
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки "Оформить новый заказ"
//
Процедура КоманднаяПанельФормыОформитьНовыйЗаказ(Кнопка)
	
	НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	ВыбранныйТип = ПолучитьТипВыбраннойЦены();
	Если ЗначениеЗаполнено(ВыбранныйТип) Тогда
		НовыйЗаказ.ТипЦен = ВыбранныйТип;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		НовыйЗаказ.Контрагент = Контрагент;
	КонецЕсли;
	
	ФормаЗаказа = НовыйЗаказ.ПолучитьФорму(, ЭтаФорма);
	ФормаЗаказа.мОповещатьВладельцаОЗакрытии = Истина;
	ФормаЗаказа.Открыть();
	
	НоваяСтрока = мОформляемыеДокументы.Добавить();
	НоваяСтрока.Объект = НовыйЗаказ;
	НоваяСтрока.Форма  = ФормаЗаказа;
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки "Оформить счет на оплату"
//
Процедура КоманднаяПанельФормыОформитьСчетНаОплату(Кнопка)
	
	НовыйСчет = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	
	ВыбранныйТип = ПолучитьТипВыбраннойЦены();
	Если ЗначениеЗаполнено(ВыбранныйТип) Тогда
		НовыйСчет.ТипЦен = ВыбранныйТип;
	КонецЕсли;
	
	ФормаСчета = НовыйСчет.ПолучитьФорму(, ЭтаФорма);
	ФормаСчета.мОповещатьВладельцаОЗакрытии = Истина;
	ФормаСчета.Открыть();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НовыйСчет.Контрагент = Контрагент;
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
			ФормаСчета.ДанныеНезарегистрированногоКонтрагента = ДанныеНезарегистрированногоКонтрагента;
			ФормаСчета.ДоступностьДоговора();
		КонецЕсли; 
	КонецЕсли;
	
	НоваяСтрока = мОформляемыеДокументы.Добавить();
	НоваяСтрока.Объект = НовыйСчет;
	НоваяСтрока.Форма  = ФормаСчета;
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки "Оформить реализацию"
//
Процедура КоманднаяПанельФормыОформитьРеализацию(Кнопка)
	
	НоваяРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	
	ВыбранныйТип = ПолучитьТипВыбраннойЦены();
	Если ЗначениеЗаполнено(ВыбранныйТип) Тогда
		НоваяРеализация.ТипЦен = ВыбранныйТип;
	КонецЕсли;
	
	ФормаРеализации = НоваяРеализация.ПолучитьФорму(, ЭтаФорма);
	Если ЗначениеЗаполнено(Контрагент) и ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			НоваяРеализация.Контрагент = Контрагент;
	КонецЕсли;
	
	ФормаРеализации.мОповещатьВладельцаОЗакрытии = Истина;
	ФормаРеализации.Открыть();
	
	НоваяСтрока = мОформляемыеДокументы.Добавить();
	НоваяСтрока.Объект = НоваяРеализация;
	НоваяСтрока.Форма  = ФормаРеализации;

КонецПроцедуры

// Процедура-обработчик смены страницы панели действий
//
Процедура ПанельДействийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеСтраницПанели();
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки Изображение, командной панели
//
Процедура КоманднаяПанельФормыИзображение(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ПоказатьСпрятатьПанельОсновногоИзображения();
	
КонецПроцедуры

// Процедура-обработчик  "При Изменении" поля выбора ВыборТипаРасчетаВалюты
//
Процедура ВыборТипаРасчетаВалютыПриИзменении(Элемент)
	
	ПроверитьДоступностьВалютуЦен();
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ "Контрагент"

// Процедура-обработчик изменения значения поля ввода Контрагент
//
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли; 
	
	ПриИзмененииКонтрагента(Элемент);
	
КонецПроцедуры

// Процедура-обработчик начала выбора значения поля ввода Контрагент
//
Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
	Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура-обработчик открытия элемента выбранного значения поля ввода Контрагент
//
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка")
		И (СтрДлина(СокрЛП(Элемент.Значение)) > 0) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		ФормаРегистрацииНовогоКонтрагента = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма);
		
		Если Элемент.Значение <> ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента Тогда
			
			Если НЕ ПолучитьДанныеОНезарегистрированномКонтрагенте(Элемент.Значение) Тогда
				
				ФормаРегистрацииНовогоКонтрагента.ЗаполнитьНачальныеДанные();
				ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента       = Элемент.Значение;
				ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагентаПолное = Элемент.Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		
		Если ФормаРегистрацииНовогоКонтрагента.ОткрытьМодально() <> Ложь Тогда
			
			Модифицированность = Истина;
			Контрагент         = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентОткрытие()

// Процедура-обработчик автоподбора значения поля ввода Контрагент
//
Процедура КонтрагентАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура, Тип("СправочникСсылка.Контрагенты"));
	
КонецПроцедуры

// Процедура-обработчик окончания ввода текста в поле ввода Контрагент
//
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РезультатЗапроса = ПроцедурыПоискаПоСтроке.ПолучитьРезультатЗапросаАвтоподбора(Текст, Новый Структура, Тип("СправочникСсылка.Контрагенты"), 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.Контрагенты"), мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке, мПоследнееЗначениеЭлементаПоискаПоСтроке, Ложь);
		Возврат;
	КонецЕсли; 
	
	УправлениеКонтактами.РегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мОбработкаПоискаПоСтроке, мТекстПоискаПоСтроке, мПоследнееЗначениеЭлементаПоискаПоСтроке, ЭтаФорма, Контрагент, Неопределено, Модифицированность, ДанныеНезарегистрированногоКонтрагента);
	
КонецПроцедуры

// Процедура производит стандартные действия при изменении контрагента
//
Процедура ПриИзмененииКонтрагента(Элемент)
	
	мПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	РаботаСДиалогами.ДобавитьВСписокЗначенийУнивер(мСписокЗначенийКонтрагента, "мСписокЗначенийКонтрагента", Элемент);
	ДоступностьОформленияЗаказа();
	ВидимостьЗакладкиЗаказов();
	ОбновитьДанныеСтраницПанели();
	УстановитьТипЦенДляКонтрагента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ ФОРМЫ

// Процедура-обработчик "При Выводе строки" табличного поля ОстаткиДляНовогоКлиента
//
Процедура ОстаткиДляНовогоКлиентаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиБезЦены(Элемент, ОформлениеСтроки, ДанныеСтроки, мКнопкаОтображенияСкладов.Пометка, ЭлементыФормы.Номенклатура.ТекущиеДанные);
	РаботаСДиалогами.ПриВыводеСуммОстатковНоменклатуры(ОформлениеСтроки, ДанныеСтроки, мСписокПрефиксовЦен, ВВалютеЦены);
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки "Отображать склады",
// командной панели КоманднаяПанельДереваОстатков, табличного поля ОстаткиДляНовогоКлиента
//
Процедура КоманднаяПанельДереваОстатковОтображатьСклады(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьЗаголовокКолонкиТаблицыОстатков();
	ЗаполнитьДетальныеОстатки(Истина);
	
КонецПроцедуры

// Процедура по выбранной строке остатков переносит данные в документ
//
Процедура ОстаткиДляНовогоКлиентаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено
		И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа Тогда
		
		Если Колонка.Имя = "СвободныйОжидаемый" ИЛИ Колонка.Имя = "ВРезерве" Тогда
			
			РаботаСДиалогами.ОбработатьВыборТаблицаОстатков(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка);
			
		Иначе
			
			СтруктураЗначений = СформироватьСтруктуруПараметровСтроки(ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка, ВыбраннаяСтрока);
			ДобавитьДанныеВДокументПоВыборуСтроки(СтруктураЗначений, СтандартнаяОбработка);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик "Начало перетаскивания" в табличном поле Номенклатура
//
Процедура ОстаткиДляНовогоКлиентаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Номенклатура.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные <> Неопределено
	   И НЕ ЭлементыФормы.Номенклатура.ТекущиеДанные.ЭтоГруппа
	   И Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		
		ПараметрыПеретаскивания.Значение = СформироватьСтруктуруПараметровСтроки(ЭлементыФормы.Номенклатура.ТекущиеДанные.Ссылка, Элемент.ТекущиеДанные);
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик выбора элемента в табличном поле Номенклатура
//
Процедура НоменклатураНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		
		ПараметрыПеретаскивания.Значение = ПолучитьСтруктуруЗначенийНоменклатуры();
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик выбора элемента в табличном поле Номенклатура
//
Процедура НоменклатураВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		ДобавитьДанныеВДокументПоВыборуСтроки(, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик выбора строки табличного поля ЗаказыПокупателя
//
Процедура ЗаказыТекущегоПокупателяВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено И ЗначениеЗаполнено(ВыбраннаяСтрока.ЗаказПокупателя) Тогда
		ВыбраннаяСтрока.ЗаказПокупателя.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик вывода строки табличного поля ЗаказыПокупателя
//
Процедура ЗаказыТекущегоПокупателяПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ПометкаУдаления Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
	ИначеЕсли ДанныеСтроки.Проведен Тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик выбора строки табличного поля ЗаказыПокупателяВЗаказахПоставщикам
//
Процедура ЗакзаыТекущегоПокупателяВЗаказахПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
	
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.ЗаказПокупателя) И (Колонка.Имя = "ЗаказПокупателя" ИЛИ Колонка.Имя = "ДатаОтгрузки") Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяСтрока.ЗаказПокупателя.ПолучитьФорму(, ЭтаФорма).Открыть();
		ИначеЕсли ЗначениеЗаполнено(ВыбраннаяСтрока.ЗаказПоставщику) И (Колонка.Имя = "ЗаказПоставщику" ИЛИ Колонка.Имя = "ДатаПоступления") Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяСтрока.ЗаказПоставщику.ПолучитьФорму(, ЭтаФорма).Открыть();
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-обработчик вывода строки табличного поля Категории
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик обновления строки табличного поля СписокЦенОстатков
//
Процедура ОбновитьСтрокуСписокаЦенОстатков(СтрокаСписка)
	
	КолонкаВДеревеОстатков = Неопределено;
	// если добавилась новая колонка
	Если СтрокаСписка.Пометка Тогда
		// а может колонка то есть в дереве, а в таблице она не отображается 
		КолонкаВДеревеОстатков = ОстаткиДляНовогоКлиента.Колонки.Найти(СтрокаСписка.Префикс + "Цена");
		
		Если КолонкаВДеревеОстатков = Неопределено Тогда
			// поля в дереве нет - надо все пересчитать
			ОстаткиДляНовогоКлиента = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
		КонецЕсли;
		ЗаполнитьДетальныеОстатки(Истина);
		
	Иначе
		// обновляем список префиксов видымых цен
		мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
	КонецЕсли;
	
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
		
КонецПроцедуры

// Процедура-обработчик "При изменении флажка" у табличного поля СписокЦенОстатков
//
Процедура СписокЦенОстатковПриИзмененииФлажка(Элемент, Колонка)
	
	мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
	ОбновитьСтрокуСписокаЦенОстатков(Элемент.ТекущиеДанные);
	
КонецПроцедуры

// Процедура-обработчик пункта выпадающего меню "Пометить все типы цен"
//
Процедура КоманднаяПанельТипыЦенДействие(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Истина);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура-обработчик пункта выпадающего меню "Отменить пометку всех типов цен"
//
Процедура КоманднаяПанельТипыЦенОтменитьВсе(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Ложь);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура-обработчик пункта меню "Обновить" у типов цен
//
Процедура КоманднаяПанельТипыЦенОбновить(Кнопка)
	
	УправлениеЗапасами.ОбновитьИУпорядочитьСписокТиповЦен(СписокЦенОстатков);	
	
КонецПроцедуры

// Процедура-обработчик пункта меню "Переместить вверх" у типов цен
//
Процедура КоманднаяПанельТипыЦенПереместитьВверх(Кнопка)

	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Истина);
	
КонецПроцедуры

// Процедура-обработчик пункта меню "Переместить вниз" у типов цен
//
Процедура КоманднаяПанельТипыЦенПереместитьВниз(Кнопка)
	
	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Ложь);
	
КонецПроцедуры

// Процедура-обработчик "Перед удалением" у типов цен
//
Процедура СписокЦенОстатковПередУдалением(Элемент, Отказ)
	// Удалять ничего нельзя
	Отказ = Истина; 
КонецПроцедуры

// Процедура-обработчик "Перед началом добавления" у типов цен
//
Процедура СписокЦенОстатковПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Добавлять ничего нельзя
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик "Окончание перетаскивания" у типов цен
//
Процедура СписокЦенОстатковОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьПорядокКолонокСуммТабПоле(ЭлементыФормы.ОстаткиДляНовогоКлиента, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров) 
	
КонецПроцедуры


//УНИВЕРСАЛЬНЫЙ ПОИСК ОБЪЕКТОВ
///////////////////////////////////////////////////////////////////////////////

// Процедура - обработчик события ПриИзменении элемента управления ЗначениеОтбораСпискаНоменклатуры.
//
Процедура ЗначениеОтбораСпискаНоменклатурыПриИзменении(Элемент)
	
	мПоискОбъектовВСпискахДанных.ЗначениеОтбораПоискаданныхПриИзменении(Элемент, ЗначениеОтбораСпискаНоменклатуры);
				
КонецПроцедуры

// Процедура - обработчик события АвтоПодборТекста элемента управления ЗначениеОтбораСпискаНоменклатуры.
//
Процедура ЗначениеОтбораСпискаНоменклатурыАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
			
КонецПроцедуры

// При выводе строки списка
//
Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мПоискОбъектовВСпискахДанных.СписокПриВыводеСтрокиСпискаОтбораДанных(Элемент, ОформлениеСтроки, ДанныеСтроки);
			
КонецПроцедуры

// Обработка выбора значения поля ТипПоиска
//
Процедура ТипПоискаДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// обработка выбора элемента из списка
	мПоискОбъектовВСпискахДанных.ОбработатьВыборТипаОграниченияИзСписка(ЭтаФорма, Элемент, ВыбранноеЗначение, 
		СтандартнаяОбработка, ЗначениеОтбораСпискаНоменклатуры);
	
КонецПроцедуры

// Кнопка открытия настройки
//
Процедура ТипПоискаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанныхОткрытие(ЗначениеОтбораСпискаНоменклатуры, Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Для каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
	Номенклатура.Колонки.Добавить(Реквизит.Имя);
КонецЦикла;

мОбработкаПоискаПоСтроке                 = Ложь;
мТекстПоискаПоСтроке                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтроке = Неопределено;

мСписокЗначенийОтбораНоменклатуры  = Новый СписокЗначений;
мСписокЗначенийКонтрагента         = Новый СписокЗначений;

мОформляемыеДокументы = Новый ТаблицаЗначений;
мОформляемыеДокументы.Колонки.Добавить("Объект");
мОформляемыеДокументы.Колонки.Добавить("Форма");

мСтруктураТекущейНоменклатурыСтраниц = Новый Структура;

ВВалютеЦены = Истина;

ОстаткиДляНовогоКлиента.Колонки.Добавить("ФлагЦены",Новый ОписаниеТипов("Булево"));
Номенклатура.Колонки.Добавить("ВестиУчетПоХарактеристикам");
Номенклатура.Колонки.Добавить("ЕдиницаХраненияОстатков");

мСоответствиеКурсовВалют = Новый Соответствие;

мПоискОбъектовВСпискахДанных = МодульПоискаВДанных.СоздатьОбъектПоискаДанныхДляНоменклатуры(ЭлементыФормы.ЗначениеОтбораСпискаНоменклатуры, ЭлементыФормы.Номенклатура, Номенклатура);
мПоискОбъектовВСпискахДанных.ПоказыватьФормуХодаВыполненияПоискаДанных = Ложь;

мКнопкаОтображенияСкладов  = ЭлементыФормы.КоманднаяПанельДереваОстатков.Кнопки.ОтображатьСклады;
мКнопкаОтображенияКартинки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Изображение;