Перем мВалютаРегламентированногоУчета;
Перем мВалютаУпрУчета;

Перем мКолонкиТовары;
Перем НеВыбиратьНовоеКачество;

Перем мУчетнаяПолитика;

Перем мВалютаДокумента Экспорт;
Перем мКурсДокумента;
Перем мКратностьДокумента;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит метаданные документа, чтобы не считывать его при каждом обращении.
Перем мМетаданныеДокумента;
Перем мИмяТабличнойЧастиДокумента Экспорт;

// Хранят признаки наличия реквизитов табличной части. Заполняются до открытия формы обработки.
Перем мЕстьНДС          Экспорт;
Перем мЕстьЦенаВРознице Экспорт;

// Хранит признак того, надо ли показывать в форме суммовые реквуизиты. Заполняется при открытии формы.
Перем мЕстьСумма;

// Хранит признак того, надо ли заполнять склад в табличной части. Заполняется при открытии формы.
Перем мЕстьСклад;

// Хранит форму документа. Устанавливается до открытия формы обработки.
Перем мФормаДокумента Экспорт;

// Хранит способ заполнения цен (по ценам номенклатуры, по ценам контрагента, по розничным ценам).
// Устанавливается до открытия формы обработки.
Перем мСпособЗаполненияЦен Экспорт;

// Хранит признак того, можно ли менять цену в расходных документах
Перем мМожноМенятьЦенуВДокументе Экспорт;

// Хранит информацию о сумме без скидки документа до изменения строк.
Перем мСуммаДокументаБезСкидок;
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

Перем мИнициализированПостроительДляУпорядочивания;

Перем мЕстьРеквизитПроцентСкидкиНаценки, мПересчитыватьСкидку, мЕстьРеквизитПроцентАвтоматическихСкидок;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет видимостью формы.
//
Процедура УстановитьВидимость(ТекущееДействие)

	Если ТекущееДействие = "Установить серию по ГТД" Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельДополнительныеПараметры.ТекущаяСтраница = ЭлементыФормы.ПанельДополнительныеПараметры.Страницы.УстановитьСериюПоГТД;
	ИначеЕсли ТекущееДействие = "Упорядочить строки" Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельДополнительныеПараметры.ТекущаяСтраница = ЭлементыФормы.ПанельДополнительныеПараметры.Страницы.УпорядочитьСтроки;		
	Иначе
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

Процедура ОбработкаПодбора(ТабличнаяЧасть, ДокументОбъект, ДокументДобавления, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем ТаблицаПодбора, Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия, Качество;

	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("Валюта",              ВалютаЦены);

	ЗначениеВыбора.Свойство("ТаблицаПодбора", ТаблицаПодбора);

	Если ТаблицаПодбора.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено Тогда
		ТаблицаПодбора.Колонки.Удалить(ТаблицаПодбора.Колонки.ХарактеристикаНоменклатуры);
		ТаблицаПодбора.Колонки.ХарактеристикаНоменклатурыНовая.Имя = "ХарактеристикаНоменклатуры";
	КонецЕсли;

	Если ТаблицаПодбора.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено Тогда
		ТаблицаПодбора.Колонки.Удалить(ТаблицаПодбора.Колонки.СерияНоменклатуры);
		ТаблицаПодбора.Колонки.СерияНоменклатурыНовая.Имя = "СерияНоменклатуры";
	КонецЕсли;

	Для каждого СтрокаТаблицы из ТаблицаПодбора цикл
		Номенклатура         = СтрокаТаблицы.Номенклатура;
		ЕдиницаИзмерения     = СтрокаТаблицы.ЕдиницаИзмерения;
		Количество           = СтрокаТаблицы.Количество;
		КоличествоМест       = СтрокаТаблицы.КоличествоМест;
		Цена                 = СтрокаТаблицы.Цена;
		Характеристика       = СтрокаТаблицы.ХарактеристикаНоменклатуры;
		Серия                = СтрокаТаблицы.СерияНоменклатуры;
		ПроцентСкидкиНаценки = СтрокаТаблицы.ПроцентСкидкиНаценки;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОграничениеСкидкиНаценки", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента)
		   И ТаблицаПодбора.Колонки.Найти("ОграничениеСкидкиНаценки") <> Неопределено Тогда
			ОграничениеСкидкиНаценки = СтрокаТаблицы.ОграничениеСкидкиНаценки;
		Иначе
			ОграничениеСкидкиНаценки = Неопределено;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента)
			И ТаблицаПодбора.Колонки.Найти("ЕдиницаИзмеренияМест") <> Неопределено Тогда
			ЕдиницаИзмеренияМест = СтрокаТаблицы.ЕдиницаИзмеренияМест;
		Иначе
			ЕдиницаИзмеренияМест = Неопределено;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента)
			И ТаблицаПодбора.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
			СтавкаНДС = Номенклатура.СтавкаНДС;
		Иначе
			СтавкаНДС = Неопределено;
		КонецЕсли;

		Если ТаблицаПодбора.Колонки.Найти("Качество") <> Неопределено Тогда
			Качество = СтрокаТаблицы.Качество;
			Если Не ЗначениеЗаполнено(Качество) Тогда
				Качество = Справочники.Качество.Новый;
			КонецЕсли;
		Иначе
			Качество = Справочники.Качество.Новый;
		КонецЕсли;

		Если мЕстьСклад
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента)
		   И ТаблицаПодбора.Колонки.Найти("Склад") <> Неопределено Тогда
			Склад = СтрокаТаблицы.Склад;
		Иначе
			Склад = Неопределено;
		КонецЕсли;

		// Пересчитаем цену в валюту документа.
		ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаДокумента, мКурсДокумента,
		                                                         мКратностьДокумента, ДокументОбъект.Дата);

		Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", мМетаданныеДокумента)
		   И ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеДокумента) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", ДокументДобавления.Метаданные()) Тогда
				ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаВВалютеДокумента,
				                       СпособЗаполненияЦен,
				                       ДокументДобавления.СуммаВключаетНДС,
				                       ДокументОбъект.УчитыватьНДС,
				                       ДокументОбъект.СуммаВключаетНДС,
				                       УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
			Иначе
				ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаВВалютеДокумента,
				                       СпособЗаполненияЦен,
				                       ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				                       ДокументОбъект.УчитыватьНДС,
				                       ДокументОбъект.СуммаВключаетНДС,
				                       УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
			КонецЕсли;
		Иначе
			ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаВВалютеДокумента,
			                       СпособЗаполненияЦен,
			                       Истина,
			                       Истина,
			                       Истина,
			                       );
		КонецЕсли;

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);

		Если Характеристика <> Неопределено
			 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		КонецЕсли;

		Если Серия <> Неопределено
			 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СерияНоменклатуры", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("СерияНоменклатуры", Серия);
		КонецЕсли;

		Если ЕдиницаИзмерения <> Неопределено
			 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		КонецЕсли;

		Если ЕдиницаИзмеренияМест <> Неопределено
			 И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмеренияМест", СтрокаТаблицы.ЕдиницаИзмеренияМест);
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("Цена", Окр(ЦенаВВалютеДокумента, 2));
		КонецЕсли;

		Если ПроцентСкидкиНаценки <> Неопределено
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("ПроцентСкидкиНаценки", ПроцентСкидкиНаценки);
		КонецЕсли;

		Если ОграничениеСкидкиНаценки <> Неопределено
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОграничениеСкидкиНаценки", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("ОграничениеСкидкиНаценки", ОграничениеСкидкиНаценки);
		КонецЕсли;

		Если мЕстьСклад
		   И Склад <> Неопределено
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("Склад", Склад);
		КонецЕсли;

		Если Качество <> Неопределено
		   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
			СтруктураОтбора.Вставить("Качество", Качество);
		КонецЕсли;

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);

		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			Если СтрокаТабличнойЧасти.Пометка Тогда
				// Нашли, увеличиваем количество в первой найденной строке.
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
				КонецЕсли;
			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Пометка              = Истина;
			СтрокаТабличнойЧасти.Номенклатура         = Номенклатура;
			СтрокаТабличнойЧасти.Количество           = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = ЕдиницаИзмеренияМест;
			СтрокаТабличнойЧасти.Коэффициент          = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			СтрокаТабличнойЧасти.Качество = Качество;
			СтрокаТабличнойЧасти.Цена     = ЦенаВВалютеДокумента;

			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки= СтрокаТаблицы.ПроцентСкидкиНаценки;
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОграничениеСкидкиНаценки", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
				СтрокаТабличнойЧасти.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
			КонецЕсли;

			Если мЕстьСклад
			   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
				ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КоличествоМест", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено
	КонецЦикла;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ОбработкаПодбора()

// Производит расчет суммы, суммы НДС, колонки Всего, цены в рознице
// при изменении связанных реквизитов.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части.
//
Процедура РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти)

	Колонки = ЭлементыФормы.Товары.Колонки;

	Если Колонки.ЦенаВРознице.Видимость Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
			ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	Если Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // РассчитатьЦеныИСуммы()

// Распределяет заданную сумму по выбранной колонке 
//
// Параметры: 
//  ИмяКолонки         - cтрока, имя колонки, по которой распределяется сумма ("Количество" или "Сумма");
//  СуммаРаспределения - число, распределяемая сумма
//
//
Процедура РаспределитьСуммуПоКолонке(ИмяКолонки, СуммаРаспределения)

	// Посчитаем общую помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли;
	КонецЦикла;

	Если ОбщаяСумма = 0 Тогда
		Предупреждение("Общая сумма помеченных строк нулевая!
		               |Распределение невозможно.",, Заголовок);
		Возврат;
	КонецЕсли;

	// Теперь распределяем
	СтрокаМаксимальнойСуммы = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; // Значение максимальной суммы.
	ЕдиницаРаспределения    = СуммаРаспределения / ОбщаяСумма;
	НепогашеннаяСумма       = СуммаРаспределения;

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			ТекущаяСумма = СтрокаТабличнойЧасти.Сумма;
			Дельта       = ЕдиницаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки];

			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Учеличиваем значение
			СтрокаТабличнойЧасти.Сумма = ТекущаяСумма + Дельта;

			// Остаток нераспределенной суммы надо уменьшать на дельту реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);

			// Пересчитываем связанные реквизиты.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,мЕстьРеквизитПроцентСкидкиНаценки,мПересчитыватьСкидку,мЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
		СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"),,мЕстьРеквизитПроцентСкидкиНаценки,мПересчитыватьСкидку,мЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");

		Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры// РаспределитьСуммуПоКолонке()

// Процедуры выполняет необходимые действия при установке нового значения в поле
// выбора действия.
//
// Параметры:
//  ТекущийЭлементДействий - число, индекс устанавливаемого действия в списке действий
//
Процедура ПриИзмененииТекущегоДействия(ТекущийЭлементДействий)

	// Назначим новое действие кнопке "Выполнить". Само действие возьмем из списка значений.
	ЭлементыФормы.КнопкаВыполнить.УстановитьДействие("Нажатие", СписокДействий[ТекущийЭлементДействий].Значение);

	// Будем считать, что по умолчанию никакие реквизиты не нужны.
	ЭлементыФормы.ПолеВводаВариантаЗачения.  Видимость = Ложь;

	ДействиеНеВыполнено = Истина;

	// Заполним свзанные поля и реквизиты
	МассивНужныхТипов = Новый Массив();
	Если СписокДействий[ТекущийЭлементДействий].Представление = "Добавить из документа" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае должны выбираться только документы с таб. частью "Товары",
		// в которой есть реквизиты "Номенклатура", "Количество", "Единица измерения".
		Для Каждого Документ Из Метаданные.Документы Цикл

			Если Документ.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", Документ, "Товары")
				   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", Документ, "Товары")
				   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", Документ, "Товары") Тогда
					МассивНужныхТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(МассивНужныхТипов[0]);

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить цены по типу" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать ссылку на справочник.
		// ТипЦен может быть типа ТипыЦенНоменклатурыКонтрагентов и ТипыЦенНоменклатуры
		Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатурыКонтрагентов" Тогда
			МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов"));
			ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
			
			// Надо заполнить поле ввода значением нужного типа.
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.ТипЦен;
			ЭлементыФормы.ПолеВводаВариантаЗачения.ВыборПоВладельцу = ДокументОбъект.Контрагент;
		ИначеЕсли  ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
			МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатуры"));
			ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
			
			// Надо заполнить поле ввода значением нужного типа.
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.ТипЦен;
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Заполнить цены в рознице по типу" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать ссылку на справочник.
		МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатуры"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.Склад.ТипЦенРозничнойТорговли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Распределить сумму по суммам"
		  Или СписокДействий[ТекущийЭлементДействий].Представление = "Распределить сумму по количеству"Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число.
		КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2);
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Изменить цены на %" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число.
		КвалификаторЧисла = Новый КвалификаторыЧисла(5, 2);
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить цены до" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления порядков округления.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа
		Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = ДокументОбъект.ТипЦен.ПорядокОкругления;
		Иначе
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = Перечисления.ПорядкиОкругления.Окр0_01;
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить цены в рознице до" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления порядков округления.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 
		                             ДокументОбъект.Склад.ТипЦенРозничнойТорговли.ПорядокОкругления;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить ставку НДС" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить скидку"
	      Или СписокДействий[ТекущийЭлементДействий].Представление = "Установить ограничение" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно задавать только число.
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2));
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить склад" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов("СправочникСсылка.Склады");
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить серию по ГТД" Тогда
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Истина;

		// В этом случае можно выбирать только из справочника "Номера ГТД".
		ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа = 
		             Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = Справочники.НомераГТД.ПустаяСсылка();
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Упорядочить строки" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗачения.Видимость = Ложь;
		Если НЕ мИнициализированПостроительДляУпорядочивания Тогда
			ИнициализацияПостроителяОтчетаУпорядочитьСтроки();
			мИнициализированПостроительДляУпорядочивания = Истина;

			НастройкиПостроителя = ВосстановитьЗначение("ОбработкаТабличнойЧастиНастройкиПостроителя");
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	УстановитьВидимость(СписокДействий[ТекущийЭлементДействий].Представление);

КонецПроцедуры // ПриИзмененииТекущегоДействия()

Процедура ИнициализацияПостроителяОтчетаУпорядочитьСтроки()
	
	ЕстьКонтрагент = ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", мМетаданныеДокумента);
	
	ПостроительОтчета.Текст =
	"ВЫБРАТЬ
	|	Товары.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Товары" +
	?(ЕстьКонтрагент, "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|	ПО Товары.Ссылка = НоменклатураКонтрагентов.Номенклатура
	|	 И НоменклатураКонтрагентов.Контрагент = &Контрагент", "") + "
	|ГДЕ
	|	Товары.Ссылка В (&МассивНоменклатуры)	
	|{УПОРЯДОЧИТЬ ПО
	|	Ссылка.* КАК Номенклатура" +
	?(ЕстьКонтрагент, ",
	|	АртикулНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента", "") + "}";
	
	ПостроительОтчета.Параметры.Вставить("МассивНоменклатуры", Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Если ЕстьКонтрагент Тогда
		ПостроительОтчета.Параметры.Вставить("Контрагент", ДокументОбъект.Контрагент);
		ПостроительОтчета.ДоступныеПоля.АртикулНоменклатурыКонтрагента.Представление = "Артикул номенклатуры контрагента";
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием"формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Если не установлено значения объекта редактируемого документа,
	// то форму обработки открывать не нужно.
	Если ДокументОбъект = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Не задан документ для обработки! " 
		               + "Эта обработка вызывается из формы документа.", , Заголовок);
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии"формы.
//
Процедура ПриОткрытии()

	// Заполним модульные переменные
	мМетаданныеДокумента = ДокументОбъект.Метаданные();
	мИнициализированПостроительДляУпорядочивания = Ложь;

	Если Не ЗначениеЗаполнено(мИмяТабличнойЧастиДокумента) Тогда
		мИмяТабличнойЧастиДокумента = "Товары";
	КонецЕсли;

	мЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента);
	мПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПриИзмененииСуммыПересчитыватьСкидку");
	мЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента);

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	Если мРассчитыватьАвтоматическиеСкидки = Неопределено Тогда
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	// Опеределим какие колонки табличной части надо показывать
	// на основании того что есть в табличной части обработки 
	// и какие колонки есть в табличной части документа.
	// В дальнейшем с невидимыми колонками табличной части оработки работать не будем,
	// их как бы нет.
	// Для начала сделаем невидимыми все колонки, которых нет в табличном поле формы документа.

	мУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);

	Колонки = ЭлементыФормы.Товары.Колонки;
	Для каждого Колонка Из Колонки Цикл
		Если мФормаДокумента.ЭлементыФормы[мИмяТабличнойЧастиДокумента].Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Колонки[Колонка.Имя].Видимость = Ложь;
		Иначе
			Колонки[Колонка.Имя].Видимость = мФормаДокумента.ЭлементыФормы[мИмяТабличнойЧастиДокумента].Колонки[Колонка.Имя].Видимость;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмеренияМест", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
		Колонки.Единица.ТекстШапки          = "Единица";
		Колонки.Единица.ПодсказкаВШапке     = "Единица измерения";
		Колонки.Коэффициент.ТекстШапки      = "К.";
		Колонки.Коэффициент.ПодсказкаВШапке = "Коэффициент пересчета";
	КонецЕсли;

	// Есть ли в документе сумма определим по видимости колонки
	мЕстьСумма = Колонки["СуммаНДС"].Видимость;

	// Есть ли в документе склад определим по видимости колонки
	мЕстьСклад = Колонки["Склад"].Видимость;

	// Теперь погасим колонки, исходя из методических соображений.
	Колонки["СтавкаНДС"].Видимость = мЕстьНДС И Колонки["СтавкаНДС"].Видимость;
	Колонки["СуммаНДС"] .Видимость = мЕстьНДС И Колонки["СуммаНДС"] .Видимость;

	Колонки["ЦенаВРознице"].Видимость = мЕстьЦенаВРознице И Колонки["ЦенаВРознице"].Видимость;
	Если Колонки["ЦенаВРознице"].Видимость Тогда
		Колонки.ЦенаВРознице.ТекстШапки = "Розн. цена ("
		                                + мВалютаРегламентированногоУчета
		                                + ")";
	КонецЕсли;

	Колонки["ПроцентРозничнойНаценки"].Видимость = мЕстьЦенаВРознице И Колонки["ПроцентРозничнойНаценки"].Видимость;

	// Пометка видна всегда
	Колонки["Пометка"].Видимость = Истина;

	// Теперь заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеДобавитьИзДокумента"), "Добавить из документа");

	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦену"), "Изменить цены на %");
	КонецЕсли;

	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", мМетаданныеДокумента) Тогда
		// Тип цен устанавливается как значение по умолчанию
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу"), "Установить цены по типу");
	КонецЕсли;

	Если Колонки["Сумма"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам")    , "Распределить сумму по суммам");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству"), "Распределить сумму по количеству");
	КонецЕсли;

	Если Колонки["Цена"].Видимость
	   И мМожноМенятьЦенуВДокументе
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", мМетаданныеДокумента) Тогда
		// По типу цен определяется флаг "Округлять в большую сторону"
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦену"), "Округлить цены до");
	КонецЕсли;

	Если Колонки["ЦенаВРознице"].Видимость
	   И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу"), "Заполнить цены в рознице по типу");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице")      , "Округлить цены в рознице до"     );
	КонецЕсли;

	Если Колонки["СтавкаНДС"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСтавкуНДС"), "Установить ставку НДС");
	КонецЕсли;

	Если Колонки["Склад"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСклад"), "Установить склад");
	КонецЕсли;

	Если Колонки["ПроцентСкидкиНаценки"].Видимость И мМожноМенятьЦенуВДокументе Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСкидку"), "Установить скидку");
	КонецЕсли;

	Если Колонки["ОграничениеСкидкиНаценки"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьОграничение"), "Установить ограничение");
	КонецЕсли;

	Если Колонки["СерияНоменклатуры"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСериюПоГТД"), "Установить серию по ГТД");
	КонецЕсли;

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУдалитьГруппуСтрок"), "Удалить помеченные строки");
	
	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУпорядочитьСтроки"), "Упорядочить строки");

	// Заполним список действий для выбора из выпадающего списка
	ЭлементыФормы.ПолеВыбораДействия.СписокВыбора = СписокДействий;
	ЭлементыФормы.ПолеВыбораДействия.ВысотаСпискаВыбора = СписокДействий.Количество();

	// Попробуем вспомнить последнее выбранное значение из списка действий
	ТекущееДействие = ВосстановитьЗначение("ОбработкаТабличнойЧастиТекущееДействие");

	Если (ТипЗнч(ТекущееДействие) <> Тип("Действие"))
	 ИЛИ (СписокДействий.НайтиПоЗначению(ТекущееДействие) = Неопределено) Тогда
		// Нет сохраненного значения или сохранено значение, отсутсвующее в списке
		ТекущееДействие = СписокДействий[0].Значение;
	КонецЕсли;

	ЭлементыФормы.ПолеВыбораДействия.Значение = ТекущееДействие;

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ТекущееДействие)));

	// Надо установить пометку и заполнить номер строки документа
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка              = Истина;
		СтрокаТабличнойЧасти.НомерСтрокиДокумента = СтрокаТабличнойЧасти.НомерСтроки;
	КонецЦикла;

	ЭлементыФормы.ВсегоНДС.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ЭлементыФормы.Всего.ГоризонтальноеПоложение    = ГоризонтальноеПоложение.Лево;

	ДействиеНеВыполнено = Истина;

	Колонки["Цена"].ЭлементУправления.ТолькоПросмотр                    = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["ЦенаВРознице"].ЭлементУправления.ТолькоПросмотр            = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["ПроцентРозничнойНаценки"].ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["Сумма"].ЭлементУправления.ТолькоПросмотр                   = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["СуммаНДС"].ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["Сумма"].ЭлементУправления.ТолькоПросмотр                   = НЕ мМожноМенятьЦенуВДокументе;
	Колонки["ПроцентСкидкиНаценки"].ЭлементУправления.ТолькоПросмотр    = НЕ мМожноМенятьЦенуВДокументе;

	мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);

	НеВыбиратьНовоеКачество  = Ложь;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.УстановкаСкидокНоменклатуры") Тогда
		НеВыбиратьНовоеКачество = Истина;
	КонецЕсли;

	Если мВалютаДокумента = Неопределено Тогда
		Если мМетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
				мВалютаДокумента = мВалютаУпрУчета;
				СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаДокумента, ДокументОбъект.Дата);
				мКурсДокумента      = СтруктураВалюты.Курс;
				мКратностьДокумента = СтруктураВалюты.Кратность;
			Иначе
				мВалютаДокумента = ДокументОбъект.ВалютаДокумента;
				мКурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
				мКратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;
		Иначе
			мВалютаДокумента = мВалютаРегламентированногоУчета;
			мКурсДокумента      = 1;
			мКратностьДокумента = 1
		КонецЕсли;
	Иначе
		СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаДокумента, ДокументОбъект.Дата);
		мКурсДокумента      = СтруктураВалюты.Курс;
		мКратностьДокумента = СтруктураВалюты.Кратность;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// При изменении данных обновим суммы в подвале.
	// Вначале посчитаем сумму.
	Если мЕстьСумма Тогда

		ЭлементыФормы.Всего       .Видимость = Истина;
		ЭлементыФормы.НадписьВсего.Видимость = Истина;
		
		СуммаДокумента = Товары.Итог("Сумма");
	
		Если мЕстьНДС
		   И ДокументОбъект.УчитыватьНДС 
		   И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаДокумента = СуммаДокумента + Товары.Итог("СуммаНДС");
		КонецЕсли; 

		ЭлементыФормы.Всего.Значение    = СуммаДокумента;

		Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (руб):";
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
		Иначе
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		КонецЕсли;
	Иначе
		
		ЭлементыФормы.Всего       .Видимость = Ложь;
		ЭлементыФормы.НадписьВсего.Видимость = Ложь;
		
	КонецЕсли; 

	Если мЕстьНДС И ДокументОбъект.УчитыватьНДС Тогда

		ЭлементыФормы.ВсегоНДС       .Видимость = Истина;
		ЭлементыФормы.НадписьВсегоНДС.Видимость = Истина;
		
		ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС");
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		Иначе
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		КонецЕсли;
	Иначе

		ЭлементыФормы.ВсегоНДС       .Видимость = Ложь;
		ЭлементыФормы.НадписьВсегоНДС.Видимость = Ложь;
		
	КонецЕсли; 

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗакрытием" формы.
// Если действие не было выполнено задает вопрос пользователю.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если ОбработкаОбъект.ПолучитьФорму().Открыта() Тогда

		Если ДействиеНеВыполнено Тогда
			Ответ = Вопрос("Выбранное действие не было выполнено! Продолжить?", 
			            РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "УстановитьФлажки" командной панели
// табличного поля "Товары", устанавливает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнатьФлажки" командной панели
// табличного поля "Товары", снимает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ИнвертироватьФлажки" командной панели
// табличного поля "Товары", инвертирует флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИнвертироватьФлажки(Кнопка)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Не СтрокаТабличнойЧасти.Пометка;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик добавляет в табличную часть обработки позиции
// табличной части выбранного документа.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСериюПоГТД(Элемент)

	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда
		Предупреждение("Не выбран номер ГТД!");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтранаПроисхождения) Тогда
		Предупреждение("Не выбрана страна происхождения!");
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпрСерии.Владелец КАК Номенклатура,
	|	СпрСерии.Ссылка КАК СерияНоменклатуры
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СпрСерии
	|ГДЕ
	|	СпрСерии.НомерГТД = &НомерГТД
	|	И СпрСерии.СтранаПроисхождения = &СтранаПроисхождения
	|");

	Запрос.УстановитьПараметр("НомерГТД", ВариантЗначения);
	Запрос.УстановитьПараметр("СтранаПроисхождения", СтранаПроисхождения);

	ТаблицаСерий = Запрос.Выполнить().Выгрузить();

	СтруктураПоиска = Новый Структура("Номенклатура");

	СпрСерии = Справочники.СерииНоменклатуры;

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			Если СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям Тогда
				СтруктураПоиска.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
				МассивСтрок = ТаблицаСерий.НайтиСтроки(СтруктураПоиска);

				Если МассивСтрок.Количество() = 0 Тогда
					НоваяСерия = СпрСерии.СоздатьЭлемент();
					НоваяСерия.Владелец            = СтрокаТабличнойЧасти.Номенклатура;
					НоваяСерия.НомерГТД            = ВариантЗначения;
					НоваяСерия.СтранаПроисхождения = СтранаПроисхождения;
					НоваяСерия.Наименование        = НоваяСерия.СформироватьНаименование();
					НоваяСерия.Записать();

					НоваяСтрока = ТаблицаСерий.Добавить();
					НоваяСтрока.Номенклатура = НоваяСерия.Владелец;
					НоваяСтрока.СерияНоменклатуры = НоваяСерия.Ссылка;

					ТекСерия = НоваяСерия.Ссылка;
				ИначеЕсли МассивСтрок.Количество() = 1 Тогда
					ТекСерия = МассивСтрок[0].СерияНоменклатуры;
				Иначе
					ТекСерия = МассивСтрок[0].СерияНоменклатуры;

					Сообщить("Для строки № " + СокрЛП(СтрокаТабличнойЧасти.НомерСтроки)
					   + " найдено несколько серий с выбранным ГТД.");
				КонецЕсли;

				СтрокаТабличнойЧасти.СерияНоменклатуры = ТекСерия;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьСериюПоГТД()

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ПолеВводаВариантаЗачения". Процедура предлагает выбор пользователю из 
// списка разрешенных для текущего действия типов объектов (документов, справочников)
// после выбора типа объекта процедура выбора стандартным образом с 
// использованием системных механизмов.
// Выбранное значение обрабатывается стандартным образом.
//
Процедура ПолеВводаВариантаЗначенияНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Заполним список возможных типов для выбора
	СписокВидов = Новый СписокЗначений;
	МассивТипов = ЭлементыФормы.ПолеВводаВариантаЗачения.ОграничениеТипа.Типы();
	РазмерСписка = МассивТипов.Количество();
	Если РазмерСписка = 1 Тогда

		Если МассивТипов[0] = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов")
		   И Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
			// Не понятно что выбирать, это ошибка.
			Предупреждение("Для установки цен поставщика необходимо в документе выбрать тип цен контрагента!"); 
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

	ИначеЕсли РазмерСписка > 1 Тогда

		// В случае одного элемента выбирать нечего, нужное значение мы установили при выборе действия,
		// поэтому этот случай здесь не обрабатывается.
		
		Для каждого ЭлементМассива Из МассивТипов Цикл

			Если Документы.ТипВсеСсылки().СодержитТип(ЭлементМассива)
			 ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ЭлементМассива) Тогда
				ПустоеЗначение = Новый(ЭлементМассива);
				ОбъектОписанияМетаданного = ПустоеЗначение.Метаданные();
				СписокВидов.Добавить(ЭлементМассива, ОбъектОписанияМетаданного.Представление());
			КонецЕсли;
		КонецЦикла;

		СписокВидов.СортироватьПоПредставлению();

		НачальноеЗначение = Неопределено;
		Если ТипЗнч(ВариантЗначения) = Тип("СписокЗначений") Тогда
			НачальноеЗначение = ЭлементыФормы.ПолеВводаВариантаЗачения.Значение.ТипЗначения.Типы()[0];
		КонецЕсли;
		НачальноеЗначениеСписка = СписокВидов.НайтиПоЗначению(НачальноеЗначение);
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВидов, Элемент, НачальноеЗначениеСписка);

		Если ВыбранныйЭлемент = Неопределено Тогда // отказ от выбора
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

		Если Документы.ТипВсеСсылки().СодержитТип(ВыбранныйЭлемент.Значение) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение = Новый СписокЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ВыбранныйЭлемент.Значение);
			ЭлементыФормы.ПолеВводаВариантаЗачения.Значение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		Иначе
			Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ВыбранныйЭлемент.Значение);
		КонецЕсли;

	Иначе // размер списка = 0

		// Не понятно что выбирать, это ошибка.
		Предупреждение("Не заданы возможные типы значения!"); 
		СтандартнаяОбработка = Ложь;
		Возврат;

	КонецЕсли; 

КонецПроцедуры // ПолеВводаВариантаЗаченияНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик добавляет в табличную часть обработки позиции
// табличной части выбранного документа.
//
Процедура КнопкаВыполнитьНажатиеДобавитьИзДокумента(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если ТипЗнч(ВариантЗначения) = Тип("СписокЗначений") Тогда
		Если ВариантЗначения.Количество() = 0 Тогда
			Предупреждение("Не выбраны документы!");
		Иначе
			Для Каждого ДокументДобавления Из ВариантЗначения Цикл
				
				// Должен быть выбран документ, из которого добавляем
				Если Не ЗначениеЗаполнено(ДокументДобавления.Значение) Тогда
					
					Предупреждение("Не выбран документ, из которого надо добавить строки табличной части!", , 
					               Заголовок);
					ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
					Продолжить;
					
				КонецЕсли;

				МетаданныеВариантаЗначения = ДокументДобавления.Значение.Метаданные();

				// Для добавления в табличную часть обработки воспользуемся стандартной процедурой обработки подбора.
				СтруктураПодбора = Новый Структура();
				СтруктураПодбора.Вставить("СпособЗаполненияЦен", мСпособЗаполненияЦен);

				Если ОбщегоНазначения.ЕстьРеквизитДокумента ("ТипЦен", мМетаданныеДокумента) Тогда
					СтруктураПодбора.Вставить("ТипЦен", ДокументОбъект.ТипЦен);
				КонецЕсли;

				Если ОбщегоНазначения.ЕстьРеквизитДокумента ("ВалютаДокумента", мМетаданныеДокумента) Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента ("ВалютаДокумента", МетаданныеВариантаЗначения) Тогда
						СтруктураПодбора.Вставить("Валюта", ДокументДобавления.Значение.ВалютаДокумента);
					Иначе
						СтруктураПодбора.Вставить("Валюта", мВалютаРегламентированногоУчета);
					КонецЕсли;
				КонецЕсли;
				СтруктураПодбора.Вставить("Команда", "ДобавитьИзДокумента");

				ТаблицаПодбора   = ДокументДобавления.Значение["Товары"].Выгрузить();
				ТаблицаДокумента = ДокументОбъект[мИмяТабличнойЧастиДокумента].Выгрузить();

				// Если каких-то колонок нет в документе-источнике, но
				// есть в документе-приемнике, добавим их в таблицу
				Для Каждого Реквизит из ТаблицаДокумента.Колонки Цикл
					Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(Реквизит.Имя, МетаданныеВариантаЗначения, "Товары") 
						  И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(Реквизит.Имя, мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
						ТаблицаПодбора.Колонки.Добавить(Реквизит.Имя, мМетаданныеДокумента.ТабличныеЧасти[мИмяТабличнойЧастиДокумента].Реквизиты[Реквизит.Имя].Тип);
					КонецЕсли;
				КонецЦикла;

				// Некоторые колонки должны быть в таблице подобора вне
				МассивОбязательныхКолонок = Новый Массив;
				МассивОбязательныхКолонок.Добавить("Номенклатура");
				МассивОбязательныхКолонок.Добавить("ЕдиницаИзмерения");
				МассивОбязательныхКолонок.Добавить("Цена");
				МассивОбязательныхКолонок.Добавить("Количество");
				МассивОбязательныхКолонок.Добавить("КоличествоМест");
				МассивОбязательныхКолонок.Добавить("ХарактеристикаНоменклатуры");
				МассивОбязательныхКолонок.Добавить("СерияНоменклатуры");
				МассивОбязательныхКолонок.Добавить("ПроцентСкидкиНаценки");

				Для каждого ИмяКолонки Из МассивОбязательныхКолонок Цикл
					Если ТаблицаПодбора.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
						Если ИмяКолонки = "Цена" ИЛИ ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "КоличествоМест" Тогда
							ТаблицаПодбора.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
						Иначе
							ТаблицаПодбора.Колонки.Добавить(ИмяКолонки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

				// Если есть реквизит КачествоНовое, то в качестве реквизита Качество нужно взять именно его
				Если ТаблицаПодбора.Колонки.Найти("КачествоНовое") <> Неопределено Тогда
					КолонкаКачества = ТаблицаПодбора.Колонки.Найти("Качество");
					Если КолонкаКачества <> Неопределено Тогда
						ТаблицаПодбора.Колонки.Удалить(КолонкаКачества);
					КонецЕсли;
					ТаблицаПодбора.Колонки.Найти("КачествоНовое").Имя = "Качество";
				КонецЕсли;

				СтруктураПодбора.Вставить("ТаблицаПодбора", ТаблицаПодбора);

				ОбработкаПодбора(Товары, ДокументОбъект, ДокументДобавления.Значение, СтруктураПодбора);

				ДействиеНеВыполнено = Ложь;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда
			Предупреждение("Не выбраны документы!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КнопкаВыполнитьНажатиеДобавитьИзДокумента()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает цены в соответствии с выбранным типом цен.
//
Процедура КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	// Должен быть выбран тип цен.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда

		Предупреждение("Не выбран тип цен!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;

	КонецЕсли;

	Если мЕстьНДС Тогда
		ТекУчитыватьНДС = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", мМетаданныеДокумента), ДокументОбъект.УчитыватьНДС, Ложь);
		ТекСуммаВключаетНДС = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", мМетаданныеДокумента), ДокументОбъект.СуммаВключаетНДС, Ложь);
	Иначе
		ТекУчитыватьНДС = Истина;
		ТекСуммаВключаетНДС = Истина;
	КонецЕсли;

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("НовыйТипЦен", ВариантЗначения);
	СтруктураЗначений.Вставить("НовыйВалютаДокумента", мВалютаДокумента);
	СтруктураЗначений.Вставить("НовыйУчитыватьНДС", ТекУчитыватьНДС);
	СтруктураЗначений.Вставить("НовыйСуммаВключаетНДС", ТекСуммаВключаетНДС);
	СтруктураЗначений.Вставить("НовыйКурсДокумента", мКурсДокумента);
	СтруктураЗначений.Вставить("НовыйКратностьДокумента", мКратностьДокумента);

	ВыборкаИзЗапроса = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений, мСпособЗаполненияЦен, Товары.ВыгрузитьКолонку("Номенклатура"),
	   ДокументОбъект.Дата, Неопределено, Неопределено, Неопределено).Выбрать();

	Дата = ДокументОбъект.Дата;

	ЕстьХарактеристикаНоменклатуры = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ХарактеристикаНоменклатуры", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента);

	СтруктураПоиска = Новый Структура; // структура для поиска в результате запроса

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

			Если ЕстьХарактеристикаНоменклатуры Тогда
				ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
			Иначе
				ХарактеристикаНоменклатуры = Неопределено;
			КонецЕсли;

			Ценообразование.ЗаполнитьЦенуВСтрокеТабличнойЧасти(ДокументОбъект, СтрокаТабличнойЧасти, СтруктураПоиска,
			                                   ВыборкаИзЗапроса, СтруктураЗначений,
			                                   мСпособЗаполненияЦен, ХарактеристикаНоменклатуры);
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;

	ПересчитатьАвтоматическиеСкидки();

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает цены в рознице в соответствии с выбранным типом цен.
//
Процедура КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	// Должен быть выбран тип цен.
	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран тип цен!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	// Надо получить цены нужного типа. Цены достанем запросом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен"      , ВариантЗначения);
	Запрос.УстановитьПараметр("ДатаЦен"     , ДокументОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В(&Номенклатура) И ТипЦен =&ТипЦен) 
	|	             КАК ЦеныНоменклатурыСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда

				// Нашли базовую цену.
				// Пересчитываем ее в рубли
				ЦенаБазовая = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта,
				                                    мВалютаРегламентированногоУчета,
													1,1, ДокументОбъект.Дата);
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли; 

			// Не забудем округлить.
			СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ОкруглитьЦену(ЦенаБазовая, ВариантЗначения.ПорядокОкругления, 
			                                      ВариантЗначения.ОкруглятьВБольшуюСторону);

			ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);

		КонецЕсли; 
	КонецЦикла; 

	ПересчитатьАвтоматическиеСкидки();

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик распределяет заданную сумму по строкам табличной части пропорционально их суммам.
//
Процедура КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	// Сумма должна быть не нулевой.
	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда

		Предупреждение("Не задана сумма для распределения!",, Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;

	КонецЕсли;

	РаспределитьСуммуПоКолонке("Сумма", ВариантЗначения);

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик распределяет заданную сумму по строкам табличной части 
// пропорционально значению колонки "Количество".
//
Процедура КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	// Сумма должна быть не нулевой.
	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда

		Предупреждение("Не задана сумма для распределения!",, Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;

	КонецЕсли;

	РаспределитьСуммуПоКолонке("Количество", ВариантЗначения);

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик округляет цену до выбранного порядка.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦену(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	// Должна быть выбран порядок округленеия.
	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ВариантЗначения,
				                                          ДокументОбъект.ТипЦен.ОкруглятьВБольшуюСторону);
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ВариантЗначения,
				                                          Истина);
			КонецЕсли;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ПересчитатьАвтоматическиеСкидки();

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик округляет цену в рознице до выбранного порядка.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	// Должна быть выбран порядок округленеия.
	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаВРознице, ВариантЗначения,
					                ДокументОбъект.Склад.ТипЦенРозничнойТорговли.ОкруглятьВБольшуюСторону);
			
			ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
			
		КонецЕсли; 
	КонецЦикла; 

	ПересчитатьАвтоматическиеСкидки();

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик изменяет цену на заданный процент.
//
Процедура КнопкаВыполнитьНажатиеИзменитьЦену(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ВариантЗначения) / 100;
			
			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ПересчитатьАвтоматическиеСкидки();

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранную ставку НДС по всем помеченным позициям табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСтавкуНДС(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	// Должна быть выбрана новая ставка НДС.
	Если Не ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана новая ставка НДС!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗачения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.СтавкаНДС = ВариантЗначения;
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьСтавкуНДС()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает процент скидки в каждой строке.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСкидку(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = ВариантЗначения;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает процент скидки в каждой строке.
//
Процедура КнопкаВыполнитьНажатиеУстановитьОграничение(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ОграничениеСкидкиНаценки = ВариантЗначения;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает процент скидки в каждой строке.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСклад(Элемент) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.Склад = ВариантЗначения;
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик удаляет все помеченные позиции табличной части.
//
Процедура КнопкаВыполнитьНажатиеУдалитьГруппуСтрок(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	КолвоЭлементовКоллекции = Товары.Количество();

	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		ЭлементКоллекции = Товары[КолвоЭлементовКоллекции - ОбратныйИндекс];

		Если ЭлементКоллекции.Пометка Тогда
			Товары.Удалить(ЭлементКоллекции);
		Иначе
			// Включим пометку для не удаляемых строк.
			ЭлементКоллекции.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;

	ПересчитатьАвтоматическиеСкидки();

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный выполняет упорядочивание строк.
//
Процедура КнопкаВыполнитьНажатиеУпорядочитьСтроки(Элемент)  // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Счетчик = 0;
	СтруктураПоиска = Новый Структура("Номенклатура");
	ТаблицаТовары = Товары.Выгрузить();
	ТаблицаТовары.Колонки.Добавить("Порядок");
	ТаблицаТовары.Индексы.Добавить("Номенклатура");
	ТаблицаТовары.Индексы.Добавить("Порядок");
	
	Выборка = ПостроительОтчета.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Счетчик = Счетчик + 1;
		
		СтруктураПоиска.Номенклатура = Выборка.Ссылка;
		НайденныеСтроки = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТовары Из НайденныеСтроки Цикл
			СтрокаТовары.Порядок = Счетчик;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТовары.Сортировать("Порядок");
	Товары.Загрузить(ТаблицаТовары);
	
	ДействиеНеВыполнено = Ложь;
	
	// Сохраним настройки построителя.
	СохранитьЗначение("ОбработкаТабличнойЧастиНастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки());
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Вполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик удаляет все помеченные позиции табличной части.
//
Процедура ПолеВыбораДействияПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(Элемент.Значение) <> Неопределено Тогда
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(Элемент.Значение)));
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ОК".
//
Процедура КнопкаОКНажатие(Элемент)

	Если ДействиеНеВыполнено Тогда
		Ответ = Вопрос("Выбранное действие не было выполнено! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ДействиеНеВыполнено = Ложь;
		КонецЕсли;
	КонецЕсли;

	// Действие выполняется, если еще не закрыли документ
	Если ДокументОбъект <> Неопределено Тогда

		// Выгрузим ТЧ обработки в таблицу значений для дальнейших преобразований
		ТаблицаОбработки        = Товары.Выгрузить();
		КолвоЭлементовКоллекции = ТаблицаОбработки.Количество();

		Если ПереноситьВДокументТолькоОтмеченные Тогда
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = ТаблицаОбработки[КолвоЭлементовКоллекции - ОбратныйИндекс];

				Если НЕ ЭлементКоллекции.Пометка Тогда
					ТаблицаОбработки.Удалить(ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		// ТЧ документа также выгрузим в таблицу значений ради удобства работы с колонками
		ТаблицаДокумента = ДокументОбъект[мИмяТабличнойЧастиДокумента].Выгрузить();

		// Создадим структуру, которая будет содержать имена колонок присутствующих в 
		// документе, но не присутствующих в ТЧ обработки
		СтруктураНовыхКолонок = Новый Структура;

		// Идем по строкам табличной части и обрабатываем строки, в которых заполнен
		// реквизит НомерДокумента. Эти строки были выгружены из документа.
		Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСтрокиДокумента) Тогда

				// Если номер строки заполнен, находим соответствующую строку в табличной 
				// части документа
				СтрокаТаблицыДокумента = ТаблицаДокумента[СтрокаТаблицы.НомерСтрокиДокумента - 1];

				// Во избежание проблем с подчиненными реквизитами, строка ТЧ обработки 
				// считается соответствующей строке ТЧ документа, только в том случае,если
				// номенклатура не изменилась. Если номенклатура в строке изменилась, 
				// считается, что это новая строка.
				Если СтрокаТаблицыДокумента.Номенклатура = СтрокаТаблицы.Номенклатура Тогда

					// Теперь пройдем по колонкам таблицы документа
					Для каждого КолонкаТаблицыДокумента Из ТаблицаДокумента.Колонки Цикл

						// Если колонка есть в таблице документа, но ее нет в таблице, выгруженной
						// из обработке и нет в структуре новых колонок, тогда добавим ее в таблицу
						// и в структуру
						Если ТаблицаОбработки.Колонки.Найти(КолонкаТаблицыДокумента.Имя) = Неопределено
						   И НЕ СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
							ТаблицаОбработки.Колонки.Добавить(КолонкаТаблицыДокумента.Имя);
							СтруктураНовыхКолонок.Вставить(КолонкаТаблицыДокумента.Имя);
						КонецЕсли;

						// Если колонка есть в структуре новых колонок, заполняем ее значение 
						// из таблицы документа
						Если СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
							СтрокаТаблицы[КолонкаТаблицыДокумента.Имя] = СтрокаТаблицыДокумента[КолонкаТаблицыДокумента.Имя];
						КонецЕсли;

						
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				// Для документов реализации надо заполнить способ списания товаров значением
				// по умолчанию, если он не был заполнен ранее
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров", мМетаданныеДокумента, мИмяТабличнойЧастиДокумента) Тогда
					Если ТаблицаОбработки.Колонки.Найти("СпособСписанияОстаткаТоваров") = Неопределено Тогда
						ТаблицаОбработки.Колонки.Добавить("СпособСписанияОстаткаТоваров");
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособСписанияОстаткаТоваров) Тогда
						ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТаблицы, ДокументОбъект);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
			МассивСтрокКомиссионера = ДокументОбъект[мИмяТабличнойЧастиДокумента].НайтиСтроки(Новый Структура("КлючСтроки", мФормаДокумента.ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки));
			Для каждого СтрокаОтчетаКомиссионера Из МассивСтрокКомиссионера Цикл
				ДокументОбъект[мИмяТабличнойЧастиДокумента].Удалить(ДокументОбъект[мИмяТабличнойЧастиДокумента].Индекс(СтрокаОтчетаКомиссионера));
			КонецЦикла;
			Для каждого СтрокаОбработки Из ТаблицаОбработки Цикл
				СтрокаДокументаОтчетКомиссионера = ДокументОбъект[мИмяТабличнойЧастиДокумента].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокументаОтчетКомиссионера, СтрокаОбработки);
				СтрокаДокументаОтчетКомиссионера.КлючСтроки = мФормаДокумента.ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки;
			КонецЦикла;
		Иначе
			// Загрузим полученную таблицу в документ
			ДокументОбъект[мИмяТабличнойЧастиДокумента].Загрузить(ТаблицаОбработки);
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			//очистим серию, если ее не должно быть в документе
			// Проверим ведётся ли обособленный учет.
			ОбособленныйУчет = ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) И ДокументОбъект.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей И Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

			Для каждого Строка из ДокументОбъект.Товары цикл
				Если НЕ ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
					Продолжить;
				КонецЕсли;
				Если не ОбособленныйУчет или НЕ ЗначениеЗаполнено(Строка.Размещение) или ТипЗнч(Строка.Размещение)<>Тип("СправочникСсылка.Склады") Тогда
					Строка.СерияНоменклатуры = "";


				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;  //Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда

		Если мМетаданныеДокумента.ТабличныеЧасти.Найти("АвтоматическиеСкидки") <> Неопределено
			И мРассчитыватьАвтоматическиеСкидки Тогда
			мФормаДокумента.мСуммаДокументаБезСкидок = мСуммаДокументаБезСкидок;
			мФормаДокумента.мМинимальныеЦены = мМинимальныеЦены;
			мФормаДокумента.мСписокФильтров = мСписокФильтров;
		КонецЕсли;

	КонецЕсли;

	// Сохраним текущее выбранное значение в списке действий.
	СохранитьЗначение("ОбработкаТабличнойЧастиТекущееДействие", ЭлементыФормы.ПолеВыбораДействия.Значение);
	
	// Можно закрывать форму.
	Закрыть();
	
КонецПроцедуры // КнопкаОКНажатие()

// Процедура - обработчик события "Очистка" поля выбора действия.
// Запрещает очистку поля.
//
Процедура ПолеВыбораДействияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ Товары

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;

	// Новые строки будем по умолчанию помечать.
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Пометка              = Истина;
		ТекущаяСтрока.Качество             = Справочники.Качество.Новый;
		ТекущаяСтрока.НомерСтрокиДокумента = 0;
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                             + ?(мЕстьНДС И ДокументОбъект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЭлементыФормы.Товары.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "НачалоВыбора" поля ввода качества номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыКачествоНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если НеВыбиратьНовоеКачество Тогда
		СтандартнаяОбработка                                    = Ложь;
		ФормаВыбора                                             = Справочники.Качество.ПолучитьФормуВыбора();
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение      = Справочники.Качество.Новый;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.НеРавно;
		Элемент.Значение                                        = ФормаВыбора.ОткрытьМодально();
	КонецЕсли;

КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	Если мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         ДокументОбъект.Контрагент, ДокументОбъект.ТипЦен, ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Дата,ДокументОбъект.ВалютаДокумента, ДокументОбъект.УчитыватьНДС,ДокументОбъект.СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры  Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда 
		Если мЕстьЦенаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ДокументОбъект.Склад, мВалютаРегламентированногоУчета);
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
		ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         ДокументОбъект.Контрагент, ДокументОбъект.ТипЦен, ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Дата,ДокументОбъект.ВалютаДокумента, ДокументОбъект.УчитыватьНДС,ДокументОбъект.СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры  Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда 
		Если мЕстьЦенаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ДокументОбъект.Склад, мВалютаРегламентированногоУчета);
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	КонецЕсли;

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
		ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// розничной наценки в строке табличной части "Товары".
//
Процедура ТоварыПроцентРозничнойНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПроцентРозничнойНаценки", мМетаданныеДокумента) Тогда
		ОбработкаТабличныхЧастей.РассчитатьРозничнуюЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаВРозницеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Рассчитать реквизиты табличной части.
	Если мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

Процедура ПолеВводаВариантаЗначенияОчистка(Элемент, СтандартнаяОбработка)
	
	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(ЭлементыФормы.ПолеВыбораДействия.Значение) <> Неопределено Тогда
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ЭлементыФормы.ПолеВыбораДействия.Значение)));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры

// Функция выполняет пересчет автоматических скидок.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
Функция ПересчитатьАвтоматическиеСкидки()

	Если мРассчитыватьАвтоматическиеСкидки Тогда
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                 , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                , мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                         , ДокументОбъект.ДисконтнаяКарта);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);

		Если мЕстьНДС Тогда
			СтруктураПараметров.Вставить("УчитыватьНДС"    , ДокументОбъект.УчитыватьНДС);
			СтруктураПараметров.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
		КонецЕсли;

		СтруктураПараметров.Вставить("УчетнаяПолитика", мУчетнаяПолитика);

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", мМетаданныеДокумента, "Товары") Тогда
			ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ДокументОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		Иначе
			ТЗТовары = Товары.Выгрузить();
			ТЗТовары.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");

			ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ДокументОбъект, ТЗТовары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

			КолонкаКачество = Товары.ВыгрузитьКолонку("Качество");
			Товары.Загрузить(ТЗТовары);
			Товары.ЗагрузитьКолонку(КолонкаКачество, "Качество");
		КонецЕсли;

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПересчитатьАвтоматическиеСкидки()

// Процедура - обработчик события "ПриОкончанииРедактирования" строки ТЧ "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" строки ТЧ "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУпрУчета                 = глЗначениеПеременной("ВалютаУправленческогоУчета");
мКолонкиТовары                  = ЭлементыФормы.Товары.Колонки;

