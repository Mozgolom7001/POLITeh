////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЦветТемноСерый;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обновляет подписи к элементу графической схемы типа "Действие".
//
// Параметры
//  ЭлементСхемы - элемент графической схемы.
//  ПараметрыТочекМаршрута - таблица значений с параметрами точек маршрута.
Процедура ОбновитьЭлементГрафическойСхемы(ЭлементСхемы, ПараметрыТочекМаршрута)

	Если ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыДействие") Тогда
		Возврат;
	КонецЕсли;

	СтрокаПараметрыТочкиМаршрута = ПараметрыТочекМаршрута.Найти(ЭлементСхемы.Значение);
	Если СтрокаПараметрыТочкиМаршрута <> Неопределено Тогда

		Если Не СтрокаПараметрыТочкиМаршрута.Выполнять Тогда

			ЭлементСхемы.Пояснение = "Не выполняется";
			ЭлементСхемы.ЦветФона  = мЦветТемноСерый;
		Иначе
			//ЭлементСхемы.Пояснение = СокрЛП(СтрокаПараметрыТочкиМаршрута.ТочкаМаршрута.Пояснение);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьЭлементГрафическойСхемы()

// Функция возвращает таблицу с параметрами точки маршрута бизнес-процесса.
//
// Параметры
//  Настройка - СправочникСсылка.НастройкиБизнесПроцессов, настройка для получения параметров.
//
Функция ПолучитьТаблицуПараметровТочкиМаршрута(Настройка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Параметры.Выполнять,
	|	Параметры.ТочкаМаршрута
	|ИЗ
	|	Справочник.НастройкиБизнесПроцессов.ПараметрыТочекМаршрута КАК Параметры
	|ГДЕ
	|	Параметры.Ссылка = &Настройка");
	Запрос.УстановитьПараметр("Настройка", Настройка);

	ПараметрыТочекМаршрута = Запрос.Выполнить().Выгрузить();
	ПараметрыТочекМаршрута.Индексы.Добавить("ТочкаМаршрута");

	Возврат ПараметрыТочекМаршрута;

КонецФункции // ПолучитьТаблицуПараметровТочкиМаршрута()

// Процедура обновляет элементы графической схемы в соответствии с настройками бизнес-процесса.
//
Процедура ОбновитьЭлементыГрафическойСхемы()

	Если Не (ЗначениеЗаполнено(БизнесПроцесс) И ЗначениеЗаполнено(БизнесПроцесс.Настройка)) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыТочекМаршрута = ПолучитьТаблицуПараметровТочкиМаршрута(БизнесПроцесс.Настройка);
	
	Для Каждого ЭлементСхемы Из ЭлементыФормы.КартаМаршрута.ЭлементыГрафическойСхемы Цикл
		ОбновитьЭлементГрафическойСхемы(ЭлементСхемы, ПараметрыТочекМаршрута);
	КонецЦикла;

КонецПроцедуры // ОбновитьЭлементыГрафическойСхемы()

// Процедура обновляет графическую схему данными карты маршрута бизнес-процесса.
//
Процедура ОбновитьКартуМаршрута()

	Если ЗначениеЗаполнено(БизнесПроцесс) Тогда

		ЭлементыФормы.КартаМаршрута.УстановитьСхему(БизнесПроцесс.ПолучитьОбъект().ПолучитьКартуМаршрута());
		ОбновитьЭлементыГрафическойСхемы();

	ИначеЕсли БизнесПроцесс <> Неопределено Тогда

		ЭлементыФормы.КартаМаршрута.УстановитьСхему(БизнесПроцессы[БизнесПроцесс.Метаданные().Имя].ПолучитьКартуМаршрута());

	Иначе

		ЭлементыФормы.КартаМаршрута.Очистить();

	КонецЕсли;

КонецПроцедуры // ОбновитьКартуМаршрута()

// Процедура открывает список задач бизнес-процесса в точке маршрута.
//
// Параметры:
//  АктивныеЗадачи - булево, открывать только невыполненные задачи.
//
Процедура ОткрытьСписокЗадачТочкиМаршрута(АктивныеЗадачи = Ложь)

	ТекЭлемент = ЭлементыФормы.КартаМаршрута.ТекущийЭлемент;

	Если ТекЭлемент = Неопределено Или Не ЗначениеЗаполнено(БизнесПроцесс) Тогда
		Возврат;
	КонецЕсли;

	Если Не (ТипЗнч(ТекЭлемент) = Тип("ЭлементГрафическойСхемыДействие")
		Или ТипЗнч(ТекЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")) Тогда
		Возврат;
	КонецЕсли;

	ФормаСпискаЗадач = Задачи["ЗадачиПользователя"].ПолучитьФормуСписка();
	ФормаСпискаЗадач.ЗадачаСписок.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	ФормаСпискаЗадач.ЗадачаСписок.Отбор.ТочкаМаршрута.Установить(ТекЭлемент.Значение);
	Если АктивныеЗадачи Тогда
		ФормаСпискаЗадач.ЗадачаСписок.Отбор.Выполнена.Установить(Ложь);
	Иначе
		ФормаСпискаЗадач.ЗадачаСписок.Отбор.Выполнена.Использование = Ложь;
	КонецЕсли;
	ФормаСпискаЗадач.Открыть();

КонецПроцедуры // ОткрытьСписокЗадачТочкиМаршрута()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура обработчик действия элемента "ОткрытьСписокЗадач" панели "КоманднаяПанельДействияВТочкахМаршрута".
//
Процедура КоманднаяПанельДействияВТочкахМаршрутаОткрытьСписокЗадач(Кнопка)

	ОткрытьСписокЗадачТочкиМаршрута();

КонецПроцедуры // КоманднаяПанельДействияВТочкахМаршрутаОткрытьСписокЗадач()

// Процедура обработчик действия элемента "ОткрытьСписокНевыполненныхЗадач" панели "КоманднаяПанельДействияВТочкахМаршрута".
//
Процедура КоманднаяПанельДействияВТочкахМаршрутаОткрытьСписокНевыполненныхЗадач(Кнопка)

	ОткрытьСписокЗадачТочкиМаршрута(Истина);

КонецПроцедуры // КоманднаяПанельДействияВТочкахМаршрутаОткрытьСписокНевыполненныхЗадач()

// Процедура обработчик действия элемента "ОбновитьКарту" панели "КоманднаяПанель".
//
Процедура КоманднаяПанельОбновитьКарту(Кнопка)

	ОбновитьКартуМаршрута();

КонецПроцедуры // КоманднаяПанельОбновитьКарту()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ
//

// Процедура обработчик события "ПриИзменении" поля БизнесПроцесс.
//
Процедура БизнесПроцессПриИзменении(Элемент)

	ОбновитьКартуМаршрута()

КонецПроцедуры // БизнесПроцессПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ОбновитьКартуМаршрута();

	Заголовок = Заголовок +" "+ Строка(БизнесПроцесс);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
// 
Процедура ПриПовторномОткрытии(СтандартнаяОбработка)

	ОбновитьКартуМаршрута();

КонецПроцедуры // ПриПовторномОткрытии()

////////////////////////////////////////////////////////////////////////////////
// БЕЗ ПРОЦЕДУР
//
мЦветТемноСерый = WebЦвета.ТемноСерый;




