///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета;
Перем мСписокВесов;
Перем мИспользоватьСерии;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ДЕЙСТВИЯ ФОРМЫ

// Процедура заполняет построитель отчета.
//
Процедура ЗаполнитьПостроительОтчета()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК Выгружать,
	|	КодыТовара.Код КАК КодТовара,
	|	КодыТовара.Номенклатура КАК Номенклатура,
	|	КодыТовара.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	КодыТовара.Номенклатура.Артикул КАК Артикул,
	|	КодыТовара.Номенклатура.Код КАК КодНоменклатуры,
	|	КодыТовара.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	КодыТовара.СерияНоменклатуры КАК СерияНоменклатуры,
	|	КодыТовара.Качество КАК Качество,
	|	0 КАК Цена
	|ИЗ
	|	РегистрСведений.КодыВесовогоТовара КАК КодыТовара
	|";
	
	Если ТолькоИмеющиесяВНаличии Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		НаСкладе.Номенклатура,
		|		НаСкладе.ХарактеристикаНоменклатуры,
		|		НаСкладе.СерияНоменклатуры,
		|		НаСкладе.Качество,
		|		НаСкладе.КоличествоОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.ТоварыНаСкладах.Остатки(, {Номенклатура.* КАК Номенклатура,
		|		   Склад.* КАК Склад}) КАК НаСкладе
		|	) КАК НаСкладе
		|ПО
		|	КодыТовара.Номенклатура = НаСкладе.Номенклатура
		|	И КодыТовара.ХарактеристикаНоменклатуры = НаСкладе.ХарактеристикаНоменклатуры
		|	И КодыТовара.СерияНоменклатуры = НаСкладе.СерияНоменклатуры
		|	И КодыТовара.Качество = НаСкладе.Качество
		|ГДЕ
		|	ЕСТЬNULL(НаСкладе.Количество, 0) > 0
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|{ГДЕ
	|	КодыТовара.Номенклатура.* КАК Номенклатура}
	|";

	ПостроительОтчета.Текст = ТекстЗапроса;

	ПостроительОтчета.ЗаполнитьНастройки();

	// Создадим список доступных отборов.
	СоответствиеДоступныхОтборов = Новый Соответствие;
	СоответствиеДоступныхОтборов.Вставить("Номенклатура", 0);
	СоответствиеДоступныхОтборов.Вставить("Склад", 0);

	Для Каждого ДоступноеПоле Из ПостроительОтчета.ДоступныеПоля Цикл
		Если СоответствиеДоступныхОтборов[ДоступноеПоле.Имя] = Неопределено Тогда
			ДоступноеПоле.Отбор = Ложь;
		Иначе
			ДоступноеПоле.Отбор = Истина;
		КонецЕсли;
	КонецЦикла;

	// Создадим массив отборов.
	МассивОтбора = Новый Массив;
	МассивОтбора.Добавить("Номенклатура");

	Если ТолькоИмеющиесяВНаличии Тогда
		МассивОтбора.Добавить("Склад");
	КонецЕсли;

	Для Каждого ЭлементОтбора Из МассивОтбора Цикл
		Если ПостроительОтчета.Отбор.Найти(ЭлементОтбора) = Неопределено Тогда
			ПостроительОтчета.Отбор.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПостроительОтчета()

// Процедура - обработчик события "ПриНажатии" кнопки "Заполнить" командной
// панели "ДействияФормы"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели>
//         – кнопка, с которой связано событие (кнопка "Заполнить")
//
Процедура ДействияФормыЗаполнить(Кнопка)

	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		Предупреждение("Не выбран тип цен!");
		Возврат;
	КонецЕсли;

	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки();

	ЗаполнитьПостроительОтчета();

	Товары = ПостроительОтчета.Результат.Выгрузить();

	ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);

	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен);

	ЗапросПоЦенам = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений,
	   Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
	   Товары.ВыгрузитьКолонку("Номенклатура"),
	   РабочаяДата,
	   Неопределено).Выгрузить();
	ЗапросПоЦенам.Индексы.Добавить("Номенклатура");

	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ТипЦенРассчитывается = ТипЦен.Рассчитывается;

	Для Каждого СтрокаТовара Из Товары Цикл
		ХарактеристикаНоменклатуры = СтрокаТовара.ХарактеристикаНоменклатуры;

		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);

		СтрокиЦен = ЗапросПоЦенам.НайтиСтроки(СтруктураПоиска);

		СтрокаБезХарактеристики = Неопределено;
		СтрокаСХарактеристикой = Неопределено;
		
		Для Каждого СтрокаЦен Из СтрокиЦен Цикл
			Если СтрокаЦен.ХарактеристикаНоменклатуры = ПустаяХарактеристика Тогда
				СтрокаБезХарактеристики = СтрокаЦен;
			ИначеЕсли СтрокаЦен.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры Тогда
				СтрокаСХарактеристикой = СтрокаЦен;
			КонецЕсли;
		КонецЦикла;

		Если СтрокаСХарактеристикой <> Неопределено Тогда
			НайденнаяСтрока = СтрокаСХарактеристикой;
		ИначеЕсли СтрокаБезХарактеристики <> Неопределено Тогда
			НайденнаяСтрока = СтрокаБезХарактеристики;
		Иначе
			НайденнаяСтрока = Неопределено;
		КонецЕсли;

		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = НайденнаяСтрока.Цена * (1 + ?(ТипЦенРассчитывается, НайденнаяСтрока.ПроцентСкидкиНаценки / 100, 0));
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(Цена, НайденнаяСтрока.ЕдиницаИзмеренияЦены, СтрокаТовара.ЕдиницаИзмерения);
			Цена = Ценообразование.ОкруглитьЦену(Цена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, НайденнаяСтрока.ВалютаЦены, мВалютаРегламентированногоУчета, 1, 1);
		Иначе
			Цена = 0;
		КонецЕсли;

		СтрокаТовара.Цена = Цена;
	КонецЦикла;

КонецПроцедуры // ДействияФормыЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ТОВАРЫ

// Процедура - обработчик события "ПриНажатии" кнопки "ВыделитьВсе"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ВыделитьВсе"
//
Процедура КоманднаяПанельТоварыВыделитьВсе(Кнопка)

	Товары.ЗаполнитьЗначения(Истина, "Выгружать");

КонецПроцедуры // КоманднаяПанельТоварыВыделитьВсе()

// Процедура - обработчик события "ПриНажатии" кнопки "ОчиститьВыделение"
// командной панели "КомандыТоваров"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ОчиститьВыделение"
//
Процедура КоманднаяПанельТоварыОчиститьВыделение(Кнопка)

	Товары.ЗаполнитьЗначения(Ложь, "Выгружать");

КонецПроцедуры // КоманднаяПанельТоварыОчиститьВыделение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
// Параметры
//  Отказ                – <Булево> 
//                       – признак отказа от открытия формы; если в теле 
//                         процедуры-обработчика установить данному параметру 
//                         значение Истина, открытие формы выполнено не будет.
//
//  СтандартнаяОбработка – <Булево> 
//                       –  в данный параметр передается признак выполнения 
//                          стандартной (системной) обработки события; если в 
//                          теле процедуры-обработчика установить данному 
//                          параметру значение Ложь, стандартная обработка 
//                          события производиться не будет. Отказ от 
//                          стандартной обработки не отменяет открытие формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Отказ = (мСписокВесов.Количество() = 0);
	Если Отказ Тогда
		Предупреждение("Не подключены весы с печатью этикеток.");
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	Перем НастройкиПостроителя;

	СписокВесов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(мСписокВесов);

	ЭлементыФормы.ПолеВыбораВесы.СписокВыбора   = СписокВесов;
	ТекущиеВесы = СписокВесов[0].Значение;
	ЭлементыФормы.ПолеВыбораВесы.ТолькоПросмотр = (СписокВесов.Количество() = 1);

	Если Не мИспользоватьСерии Тогда
		Колонка                   = ЭлементыФормы.Товары.Колонки.СерияНоменклатуры;
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли;
	
	Если Не глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Колонка                   = ЭлементыФормы.Товары.Колонки.ХарактеристикаНоменклатуры;
		Колонка.Видимость         = Ложь;
		Колонка.ИзменятьВидимость = Ложь;
	КонецЕсли;

	СтруктураНастроек = ВосстановитьЗначение("ТорговоеОборудование.ВОВыгрузкаДанных.Настройки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек.Свойство("ТипЦен", ТипЦен);
		СтруктураНастроек.Свойство("ТолькоИмеющиесяВНаличии", ТолькоИмеющиесяВНаличии);
		СтруктураНастроек.Свойство("НастройкиПостроителя", НастройкиПостроителя);
	КонецЕсли;

	ЗаполнитьПостроительОтчета();

	Если НастройкиПостроителя <> Неопределено Тогда
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ТипЦен", ТипЦен);
	СтруктураНастроек.Вставить("ТолькоИмеющиесяВНаличии", ТолькоИмеющиесяВНаличии);
	СтруктураНастроек.Вставить("НастройкиПостроителя", ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Ложь, Ложь, Ложь));

	СохранитьЗначение("ТорговоеОборудование.ВОВыгрузкаДанных.Настройки", СтруктураНастроек);

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "Нажатие" кнопки "ВыгрузитьВВесы".
//
Процедура ДействияФормыВыгрузитьВВесы(Кнопка)

	Перем Индикатор;
	Перем Параметры;
	Перем Ошибки;
	Перем Ответ;
	Перем Форма;

	Если НЕ ЗначениеЗаполнено(ТекущиеВесы) Тогда
		Ошибки = " - Не выбраны текущие весы.";
	Иначе
		Ошибки = "";
	КонецЕсли;

	Если Товары.Количество() = 0 Тогда
		Если Не ПустаяСтрока(Ошибки) Тогда
			Ошибки = Ошибки + "
			                  |";
		КонецЕсли;
		Ошибки = Ошибки + " - Нет данных для выгрузки.";
	КонецЕсли;

	Если ПустаяСтрока(Ошибки) Тогда

		Результат = ПолучитьСерверТО().НачатьВыгрузкуВВесыСПечатьюЭтикеток(ТекущиеВесы);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
			Индикатор.НаименованиеОбработкиДанных = "Выгрузка данных в весы с печатью этикеток";
			Индикатор.КомментарийОбработкиДанных  = "Выгружаются данные в файл обмена с весами";
			Индикатор.КомментарийЗначения         = "Выгружено";
			Индикатор.МаксимальноеЗначение        = Товары.Количество();
			Индикатор.Открыть();

			СтруктураДопИнф = Новый Структура("Характеристика, Серия");
			Товар           = Неопределено;
			ПЛУ             = 0;
			Для Каждого Товар Из Товары Цикл
				Если Товар.Выгружать Тогда
					ПЛУ                            = ПЛУ + 1;
					СтруктураДопИнф.Характеристика = Товар.ХарактеристикаНоменклатуры;
					СтруктураДопИнф.Серия          = Товар.СерияНоменклатуры;
					Наименование                   = СокрЛП(Товар.Номенклатура.Наименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(СтруктураДопИнф);
					Результат                      = ПолучитьСерверТО().ВыгрузитьПозициюВВесыСПечатьюЭтикеток(ТекущиеВесы, ПЛУ, Товар.КодТовара, Наименование, Товар.Цена);
					Если НЕ ЗначениеЗаполнено(Результат) Тогда
						Индикатор.Значение         = ПЛУ;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			Индикатор.Закрыть();

			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = ПолучитьСерверТО().ЗавершитьВыгрузкуВВесыСПечатьюЭтикеток(ТекущиеВесы);
				Если ЗначениеЗаполнено(Результат) Тогда
					Ошибки = ПолучитьСерверТО().ПолучитьТекстОшибкиВесыСПЭТО(Результат);
				КонецЕсли;
			Иначе
				Ошибки = ПолучитьСерверТО().ПолучитьТекстОшибкиВесыСПЭТО(Результат);
			КонецЕсли;
		Иначе
			Ошибки = ПолучитьСерверТО().ПолучитьТекстОшибкиВесыСПЭТО(Результат);
		КонецЕсли;
	КонецЕсли;

	Если ПустаяСтрока(Ошибки) Тогда
		Предупреждение("Всего выгружено " + Формат(ПЛУ, "ЧГ=0") + " строк.");
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("Невозможно осуществить выгрузку по следующим причинам:
		                 |" + Ошибки);
	КонецЕсли;

КонецПроцедуры // ДействияФормыВыгрузитьВВесы()

// Обработчик события "ПриИзменении" флажка "ТолькоИмеющиесяВНаличии".
//
Процедура ТолькоИмеющиесяВНаличииПриИзменении(Элемент)

	ЗаполнитьПостроительОтчета();

КонецПроцедуры // ТолькоИмеющиесяВНаличииПриИзменении()

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мИспользоватьСерии              = глЗначениеПеременной("ИспользоватьСерииНоменклатуры");
мСписокВесов                    = ПолучитьСерверТО().ПолучитьСписокУстройств(
                                      Перечисления.ВидыТорговогоОборудования.ВесыСПечатьюЭтикеток);