Перем мКэшРеквизитовДокумента;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет табличное поле Список.
// Выбирает данные из критерия отбора по значению отбора.
//
Процедура ЗаполнитьТабличнуюЧасть()
	
	// Если не выбран договор, то запрос делать смысла не имеет, 
	// отберутся документы с пустым договором, не имеющие отношения к выбранному контрагенту.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Сообщить("Не указан договор контрагента", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
		
	Список.Очистить();
	
	Таблица = ПолныеПрава.ПолучитьВыборкуПоКритериюОтбора("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);	
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);		
	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
					|ВЫБРАТЬ ", "
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ") + "
					|Дата, Номер, Ссылка, Проведен, ПометкаУдаления, """ + КлючИЗначение.Значение.Синоним + """ КАК ВидДокумента,
					|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"], "СуммаДокумента", "NULL") + " КАК СуммаДокумента,
					|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВалютаДокумента"], "ВалютаДокумента", "NULL") + " КАК ВалютаДокумента,
					|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["ВидОперации"], "ВидОперации", "NULL") + " КАК ВидОперации,
					|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Организация"], "Организация", "NULL") + " КАК Организация,
					|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["Ответственный"], "Ответственный", "NULL") + " КАК Ответственный
					
					|ИЗ Документ." + КлючИЗначение.Ключ + "
					|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
					
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Дата = Выборка.Дата;
		НоваяСтрока.Номер = Выборка.Номер;
		НоваяСтрока.Вид = Выборка.ВидДокумента;
		НоваяСтрока.ВидОперации = Выборка.ВидОперации;
		НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
		НоваяСтрока.ВалютаДокумента = Выборка.ВалютаДокумента;
		НоваяСтрока.Организация = Выборка.Организация;
		НоваяСтрока.Ответственный = Выборка.Ответственный;
		НоваяСтрока.Проведен = Выборка.Проведен;
		НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = Новый Соответствие;		
		РеквизитыДокумента.Вставить("СуммаДокумента", МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокумента.Вставить("ВалютаДокумента", МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено);		
		РеквизитыДокумента.Вставить("ВидОперации", МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено);	
		РеквизитыДокумента.Вставить("Организация", МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено);	
		РеквизитыДокумента.Вставить("Ответственный", МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено);	
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура обработчик события "ПриОткрытии" формы.
// Устанавливает значение отбора. Заполняет табличное поле.
//
Процедура ПриОткрытии()
	
	Контрагент         = ПараметрОтборПоЗначению.Владелец;
	ДоговорКонтрагента = ПараметрОтборПоЗначению;
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработчик события "ПриВыводеСтроки" элемента формы Список.
// Устанавливает текст ячейки Вид. Устанавливает картинку строки.
//
Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейки = ОформлениеСтроки.Ячейки;
	ЯчейкаКартинки = Ячейки.Картинка;
	ЯчейкаКартинки.ОтображатьТекст    = Ложь;
	ЯчейкаКартинки.ОтображатьФлажок   = Ложь;
	ЯчейкаКартинки.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Ссылка = Неопределено Тогда
		
		ЯчейкаКартинки.ИндексКартинки = 3;
		
	Иначе
		
		Если ДанныеСтроки.Проведен Тогда
			ЯчейкаКартинки.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.ПометкаУдаления Тогда
			ЯчейкаКартинки.ИндексКартинки = 1;
		Иначе
			ЯчейкаКартинки.ИндексКартинки = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписокПриВыводеСтроки()

// Процедура обработчик события "Выбор" элемента формы Список.
// Открывает форму документа.
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяСтрока.Ссылка.ПолучитьФорму().Открыть();
	
КонецПроцедуры // СписокВыбор()


// Процедура обработчик события "ПриИзменении" элемента формы ДоговорКонтрагента.
// Заполняет табличное поле Список.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры // ОтборЗначениеОтбораПриИзменении()

// Процедура обработчик события "Очистка" элемента формы ДоговорКонтрагента.
// Отменяет действие
//
Процедура ДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОтборЗначениеОтбораОчистка()

// Процедура обработчик события "ПриИзменении" элемента формы Контрагент.
// Заполняет табличное поле Список.
//
Процедура КонтрагентПриИзменении(Элемент)
	
	// Если изменили контрагента, то установим отбор по основному 
	// договору выбранного контрагента.
	Если ДоговорКонтрагента.Владелец <> Контрагент Тогда
		
		ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		ЗаполнитьТабличнуюЧасть();
		
	КонецЕсли;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура обработчик события "Очистка" элемента формы Контрагент.
// Отменяет действие.
//
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонтрагентОчистка()

// Процедура обработчик действия "Обновить" элемента формы  КоманднаяПанель.
// Заполняет табличное поле Список.
//
Процедура КоманднаяПанельФормыОбновить(Кнопка)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры // КоманднаяПанельФормыОбновить()

мКэшРеквизитовДокумента = Новый Соответствие;

Список.Колонки.Добавить("Ссылка");
Список.Колонки.Добавить("Проведен");
Список.Колонки.Добавить("ПометкаУдаления");
