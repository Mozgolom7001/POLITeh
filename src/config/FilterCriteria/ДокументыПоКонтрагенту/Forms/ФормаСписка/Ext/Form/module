Перем мКэшРеквизитовДокумента;

// Переменная содержит соответствия документ-реквизит
// для каждого графа журнала документов ДокументыКонтрагентов.
// Это необходимо для правильного указания источника данных
// при выборке.
// описание стуктуры хранимых данных
// структура 
//           ключ - имя графа
//           значение - соответствие
//                   ключ - имя документа
//                   значение - имя соответствующего реквизита
Перем мКэшСоответствийРеквизитов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет табличное поле Список.
// Выбирает данные из критерия отбора по значению отбора.
//
Процедура ЗаполнитьТабличнуюЧасть()
	
	СсылкаНаВыделенныйЭлемент = ?(ЭлементыФормы.Список.ТекущиеДанные = Неопределено,
	                              Неопределено, ЭлементыФормы.Список.ТекущиеДанные.Ссылка);
	
	// Если не выбран Контрагент, то запрос делать смысла не имеет
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан Контрагент", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Список.Очистить();
	
	Таблица = ПолныеПрава.ПолучитьВыборкуПоКритериюОтбора("ДокументыПоКонтрагенту", Контрагент);
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		ИмяДокумента = МетаданныеДокумента.Имя;
		
		Если ЗначениеЗаполнено(ОтборПоТипуДокумента) Тогда
			Если ОтборПоТипуДокумента <> ИмяДокумента Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);		
	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
		РекСуммаДокумента = 
		 ?(ЗначениеЗаполнено(мКэшСоответствийРеквизитов.Сумма[КлючИЗначение.Ключ]),
		   мКэшСоответствийРеквизитов.Сумма[КлючИЗначение.Ключ],
		   "NULL");
		
		РекВалютаДокумента = 
		 ?(ЗначениеЗаполнено(мКэшСоответствийРеквизитов.Валюта[КлючИЗначение.Ключ]),
		   мКэшСоответствийРеквизитов.Валюта[КлючИЗначение.Ключ],
		   "NULL");
		
		РекВидОперации = 
		 ?(ЗначениеЗаполнено(мКэшСоответствийРеквизитов.ВидОперации[КлючИЗначение.Ключ]),
		   мКэшСоответствийРеквизитов.ВидОперации[КлючИЗначение.Ключ],
		   "NULL");
		
		РекОрганизация = 
		 ?(ЗначениеЗаполнено(мКэшСоответствийРеквизитов.Организация[КлючИЗначение.Ключ]),
		   мКэшСоответствийРеквизитов.Организация[КлючИЗначение.Ключ],
		   "NULL");
		
		РекОтветственный = 
		 ?(ЗначениеЗаполнено(мКэшСоответствийРеквизитов.Ответственный[КлючИЗначение.Ключ]),
		   мКэшСоответствийРеквизитов.Ответственный[КлючИЗначение.Ключ],
		   "NULL");
		
		РекИнформация = 
		 ?(ЗначениеЗаполнено(мКэшСоответствийРеквизитов.Информация[КлючИЗначение.Ключ]),
		   мКэшСоответствийРеквизитов.Информация[КлючИЗначение.Ключ],
		   "NULL");
		
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
					|ВЫБРАТЬ ", "
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ") + "
					|Дата, Номер, Ссылка, Проведен, ПометкаУдаления, """ + КлючИЗначение.Значение.Синоним + """ КАК ВидДокумента,
					|" + РекСуммаДокумента  + " КАК СуммаДокумента,
					|" + РекВалютаДокумента + " КАК ВалютаДокумента,
					|" + РекВидОперации     + " КАК ВидОперации,
					|" + РекОрганизация     + " КАК Организация,
					|" + РекОтветственный   + " КАК Ответственный,
					|" + РекИнформация      + " КАК Информация
					
					|ИЗ Документ." + КлючИЗначение.Ключ + "
					|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
					
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + Запрос.Текст + ТекстЗапросаКонец;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Список.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Дата = Выборка.Дата;
		НоваяСтрока.Номер = Выборка.Номер;
		НоваяСтрока.Вид = Выборка.ВидДокумента;
		НоваяСтрока.ВидОперации = Выборка.ВидОперации;
		НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
		НоваяСтрока.ВалютаДокумента = Выборка.ВалютаДокумента;
		НоваяСтрока.Организация = Выборка.Организация;
		НоваяСтрока.Ответственный = Выборка.Ответственный;
		НоваяСтрока.Информация = Выборка.Информация;
		НоваяСтрока.Проведен = Выборка.Проведен;
		НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;
		Если ЗначениеЗаполнено(СсылкаНаВыделенныйЭлемент) И
			 СсылкаНаВыделенныйЭлемент = НоваяСтрока.Ссылка Тогда
			ЭлементыФормы.Список.ТекущаяСтрока = НоваяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = Новый Соответствие;		
		РеквизитыДокумента.Вставить("СуммаДокумента", МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокумента.Вставить("ВалютаДокумента", МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено);		
		РеквизитыДокумента.Вставить("ВидОперации", МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено);	
		РеквизитыДокумента.Вставить("Организация", МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено);	
		РеквизитыДокумента.Вставить("Ответственный", МетаданныеДокумента.Реквизиты.Найти("Ответственный") <> Неопределено);	
		РеквизитыДокумента.Вставить("Информация", МетаданныеДокумента.Реквизиты.Найти("Информация") <> Неопределено);	
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
	КонецЕсли;	
КонецПроцедуры


// Процедура обработчик события "ПриОткрытии" формы.
// Устанавливает значение отбора. Заполняет табличное поле.
//
Процедура ПриОткрытии()
	
	ОтборПоТипуДокумента = "";
	
	СформироватьМенюОтборПоТипуДокумента();
	
	ЗаполнитьСоответствиеРеквизитов();
	
	Контрагент = ПараметрОтборПоЗначению;
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры // ПриОткрытии()

Процедура ЗаполнитьСоответствиеРеквизитов()
	
	Для Каждого ЭлементГраф Из Метаданные.ЖурналыДокументов.ДокументыКонтрагентов.Графы Цикл
		мКэшСоответствийРеквизитов.Вставить(ЭлементГраф.Имя, Новый Соответствие);
		Для Каждого ЭлементОбъектМетаданных Из ЭлементГраф.Ссылки Цикл
			НаименованиеДокумента = ЭлементОбъектМетаданных.ПолноеИмя();
			Поз = Найти(НаименованиеДокумента, ".");
			НаименованиеДокумента = Прав(НаименованиеДокумента, СтрДлина(НаименованиеДокумента)-Поз);
			Поз = Найти(НаименованиеДокумента, ".");
			НаименованиеДокумента = Лев(НаименованиеДокумента, Поз - 1);
			мКэшСоответствийРеквизитов[ЭлементГраф.Имя].Вставить(НаименованиеДокумента, ЭлементОбъектМетаданных.Имя);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработчик события "ПриВыводеСтроки" элемента формы Список.
// Устанавливает текст ячейки Вид. Устанавливает картинку строки.
//
Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейки = ОформлениеСтроки.Ячейки;	
	
	ЯчейкаКартинки = Ячейки.Картинка;
	ЯчейкаКартинки.ОтображатьТекст    = Ложь;
	ЯчейкаКартинки.ОтображатьФлажок   = Ложь;
	ЯчейкаКартинки.ОтображатьКартинку = Истина;
	
	Если ДанныеСтроки.Ссылка = Неопределено Тогда
		
		ЯчейкаКартинки.ИндексКартинки = 3;
		
	Иначе
		
		Если ДанныеСтроки.Проведен Тогда
			ЯчейкаКартинки.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.ПометкаУдаления Тогда
			ЯчейкаКартинки.ИндексКартинки = 1;
		Иначе
			ЯчейкаКартинки.ИндексКартинки = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //СписокПриВыводеСтроки()

// Процедура обработчик события "Выбор" элемента формы Список.
// Открывает форму документа.
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбраннаяСтрока.Ссылка.ПолучитьФорму().Открыть();
	
КонецПроцедуры // СписокВыбор()

// Процедура обработчик события "ПриИзменении" элемента формы Контрагент.
// Заполняет табличное поле Список.
//
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура обработчик события "Очистка" элемента формы Контрагент.
// Отменяет действие.
//
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонтрагентОчистка()

// Процедура обработчик действия "ПриАктивизацииСтроки" элемента формы Список
// Необходимо переформировать меню в зависимости от метаданных выбранного элемента
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		НастроитьКоманднуюПанель(Элемент.ТекущиеДанные.Ссылка);
		Заполнить(Элемент.ТекущиеДанные.Ссылка);
	Иначе
		Заполнить(Неопределено);
		НастроитьКоманднуюПанель(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьКоманднуюПанель(знач Ссылка = Неопределено)
	
	Кнопка = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПометкаНаУдаление;
	
	Если Ссылка = Неопределено Тогда
		Кнопка.Доступность = Ложь;
	Иначе
		Кнопка.Доступность = Истина;
		Если Ссылка.ПометкаУдаления Тогда
			Кнопка.Подсказка = "Снять пометку удаления(Del)";
		Иначе
			Кнопка.Подсказка = "Установить пометку удаления(Del)";
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

// Заполняет меню "Перейти" в соответствии с типом переданного метаданного
//
Процедура Заполнить(знач Ссылка = Неопределено)
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Перейти.Кнопки.Очистить();
	
	Если Ссылка = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Перейти.Доступность = Ложь;
	Иначе
		НаборДвижений = Ссылка.Метаданные().Движения;
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Перейти.Доступность = Истина;
		
		НовоеДействие = Новый Действие("ОбработатьПереходКСвязаннымДокументам");
		
		Для Каждого ЭлементДвижение Из НаборДвижений Цикл
			ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Перейти.Кнопки.Добавить("Документ"+ЭлементДвижение.Имя,
			                                                           ТипКнопкиКоманднойПанели.Действие,
			                                                           ЭлементДвижение.Синоним,
			                                                           НовоеДействие);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПереходКСвязаннымДокументам(ВыбранныйЭлемент)
	
	РегистраторСсылка = ЭлементыФормы.Список.ТекущаяСтрока.Ссылка;
	НаборДвижений = РегистраторСсылка.Метаданные().Движения;
	НаименованиеОбъекта = Прав(ВыбранныйЭлемент.Имя, СтрДлина(ВыбранныйЭлемент.Имя) - 8);
	
	Для Каждого ЭлементДвижение Из НаборДвижений Цикл
		Если ЭлементДвижение.Имя = НаименованиеОбъекта Тогда
			ТипОМ = ВыделитьТипОбъектаМетаданного(ЭлементДвижение.ПолноеИмя());
			Форма = Неопределено;
			Если ТипОМ = "РегистрНакопления" Тогда
				Форма = РегистрыНакопления[НаименованиеОбъекта].ПолучитьФормуСписка();
			КонецЕсли;
			
			Если ТипОМ = "РегистрСведений" Тогда
				Форма = РегистрыСведений[НаименованиеОбъекта].ПолучитьФормуСписка();
			КонецЕсли;
			Если ТипОМ = "РегистрБухгалтерии" Тогда
				Форма = РегистрыБухгалтерии[НаименованиеОбъекта].ПолучитьФормуСписка();
			КонецЕсли;
			Если ТипОМ = "РегистрРасчета" Тогда
				Форма = РегистрыРасчета[НаименованиеОбъекта].ПолучитьФормуСписка();
			КонецЕсли;
			
			Если Форма <> Неопределено Тогда
				ОтборПоРегистратору = Форма.Отбор.Регистратор;
				ОтборПоРегистратору.Значение = РегистраторСсылка;
				ОтборПоРегистратору.ВидСравнения = ВидСравнения.Равно;
				ОтборПоРегистратору.Использование = Истина;
				Форма.Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыделитьТипОбъектаМетаданного(ПолноеИмя)
	
	Результат = "";
	Поз = Найти(ПолноеИмя, ".");
	Результат = Лев(ПолноеИмя, Поз - 1);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьСписок(Элемент)
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

Процедура СформироватьМенюОтборПоТипуДокумента()
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Доступность = Истина;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки.Очистить();
	НовоеДействие = Новый Действие("ОбработатьУстановитьОтборПоТипуДокумента");
	
	Кнопка = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки.Добавить("ВсеДокументы",
	                                                           ТипКнопкиКоманднойПанели.Действие,
	                                                           "Все документы",
	                                                           НовоеДействие);
	Кнопка.Пометка = Истина;
	
	Кнопка = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки.Добавить("Разделитель",
	                                                           ТипКнопкиКоманднойПанели.Разделитель);
	
	Для Каждого ЭлементДокумент Из Метаданные.Документы Цикл
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки.Добавить(ЭлементДокумент.Имя,
		                                                           ТипКнопкиКоманднойПанели.Действие,
		                                                           ЭлементДокумент.Синоним,
		                                                           НовоеДействие);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьУстановитьОтборПоТипуДокумента(Элемент)
	
	Для Каждого ЭлементКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ОтборПоВидуДокумента.Кнопки Цикл
		ЭлементКнопка.Пометка = Ложь;
		Если Элемент.Имя = ЭлементКнопка.Имя Тогда
			ЭлементКнопка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент.Имя = "ВсеДокументы" Тогда
		ОтборПоТипуДокумента = "";
	Иначе
		ОтборПоТипуДокумента = Элемент.Имя;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

Процедура ДействияФормыПометкаНаУдаление(Кнопка)
	
	ПометитьСнятьПометкуУдаления();
	
КонецПроцедуры

Процедура ПометитьСнятьПометкуУдаления()
	
	ДанныеСтроки = ЭлементыФормы.Список.ТекущиеДанные;
	
	Ссылка = ЭлементыФормы.Список.ТекущаяСтрока.Ссылка;
	
	Если Ссылка.ПометкаУдаления Тогда
		ТекстВопроса = "Снять с объекта пометку на удаление?";
	Иначе
		ТекстВопроса = "Пометить объект на удаление?";
	КонецЕсли;
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект = Ссылка.ПолучитьОбъект();
		
		Объект.Проведен = Ложь;
		Объект.ПометкаУдаления = НЕ Объект.ПометкаУдаления;
		
		Попытка
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ОшибкаИнфо = ИнформацияОбОшибке();
			Если ОшибкаИнфо.Причина = Неопределено Тогда
				СообщениеОбОшибке =ОшибкаИнфо.Описание;
			Иначе
				СообщениеОбОшибке = ОшибкаИнфо.Причина.Описание;
			КонецЕсли;
			Сообщить(СообщениеОбОшибке);
		КонецПопытки;
		
		ЗаполнитьТабличнуюЧасть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПередУдалением(Элемент, Отказ)
	
	ПометитьСнятьПометкуУдаления();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОткрытьФорму(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.Список.ТекущиеДанные.Ссылка.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПровести(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Список.ТекущиеДанные.Ссылка.ПометкаУдаления Тогда
		Предупреждение("Помеченный на удаление документ не может быть проведен!");
		Возврат;
	ИначеЕсли ЭлементыФормы.Список.ТекущиеДанные.Ссылка.Дата > КонецДня(ТекущаяДата()) Тогда
		Предупреждение("Нельзя проводить документы будущей датой!");
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаписатьВыбранныйДокумент(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ: "+ОписаниеОшибки());
	КонецПопытки;
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОтменаПроведения(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭлементыФормы.Список.ТекущиеДанные.Ссылка.Проведен Тогда
		Предупреждение("Документ не проведен");
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаписатьВыбранныйДокумент(РежимЗаписиДокумента.ОтменаПроведения);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось отменить проведение документа: "+ОписаниеОшибки());
	КонецПопытки;
	
	ЗаполнитьТабличнуюЧасть();
	
КонецПроцедуры


//Процедура выполняет проведение или отмену проведения документа
Процедура ЗаписатьВыбранныйДокумент(РежимЗаписи)
	
	Если ЭлементыФормы.Список.ТекущиеДанные.Ссылка = Неопределено тогда
		Возврат
	КонецЕсли;
	
	ДокОбъект = ЭлементыФормы.Список.ТекущиеДанные.Ссылка.ПолучитьОбъект();
	ДокОбъект.Записать(РежимЗаписи);
	ЭлементыФормы.Список.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНайтиВЖурнале(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаСписка = Документы[ЭлементыФормы.Список.ТекущиеДанные.Ссылка.Метаданные().Имя].ПолучитьФормуСписка();
	ФормаСписка.ПараметрТекущаяСтрока = ЭлементыФормы.Список.ТекущиеДанные.Ссылка;
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПечать(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Список.ТекущиеДанные.Ссылка = Неопределено тогда
		Возврат
	КонецЕсли;
	
	УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭлементыФормы.Список.ТекущиеДанные.Ссылка.ПолучитьОбъект());
	
КонецПроцедуры


мКэшРеквизитовДокумента = Новый Соответствие;
мКэшСоответствийРеквизитов = Новый Структура;

Список.Колонки.Добавить("Ссылка");
Список.Колонки.Добавить("Проведен");
Список.Колонки.Добавить("ПометкаУдаления");

//Процедура УстановитьОтбор()

//	СписокЖурнала.Отбор.ДокументыПоКонтрагенту.Значение = КритерийОтбораСписок.Отбор.ЗначениеОтбора.Значение;

//КонецПроцедуры

//Процедура ПриОткрытии()
//	
//	КритерийОтбораСписок.Отбор.ЗначениеОтбора.Значение = ПараметрОтборПоЗначению;
//	СписокЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
//	ЭлементыФормы.СписокЖурнала.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;
//	УстановитьОтбор();
//	
//КонецПроцедуры

//Процедура ВыбКонтрагентПриИзменении(Элемент)
//	
//	УстановитьОтбор();
//	
//КонецПроцедуры
