#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат НСтр("ru = 'Настройки синхронизации для Клиента ЭДО'");
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
	СтруктураТабличнойЧастиУчастникиЭДО = Новый Структура;
	СтруктураТабличнойЧастиУчастникиЭДО.Вставить("Организация", Новый Массив);
	СтруктураТабличнойЧастиУчастникиЭДО.Вставить("Контрагент",  Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов", НачалоДня(ТекущаяДатаСеанса()));
	СтруктураНастроек.Вставить("ПередаватьТолькоДокументыОтраженныеВБУ", Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоУчастникамЭДО", Ложь);
	
	СтруктураНастроек.Вставить("УчастникиЭДО", СтруктураТабличнойЧастиУчастникиЭДО);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчанию для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	СтруктураНастроек.Вставить("ЦенаВключаетНДС", Истина);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	ОграничениеДатаНачалаВыгрузкиДокументов = "";
	ОграничениеПередаватьДокументыОраженныеВБУ = "";
	ОграничениеОтборПоУчастникамЭДО = "";
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются начиная с [ДатаНачалаВыгрузкиДокументов]'");
		ОграничениеДатаНачалаВыгрузкиДокументов = СтрЗаменить(ОграничениеДатаНачалаВыгрузкиДокументов,
			"[ДатаНачалаВыгрузкиДокументов]", Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДЛФ=DD"));
	Иначе
		ОграничениеДатаНачалаВыгрузкиДокументов = НСтр("ru = 'Документы выгружаются за весь период'");
	КонецЕсли;
	
	ОграничениеПередаватьДокументыОраженныеВБУ = "";
	Если НастройкаОтборовНаУзле.ПередаватьТолькоДокументыОтраженныеВБУ Тогда
		ОграничениеПередаватьДокументыОраженныеВБУ = НСтр("ru = 'Документы выгружаются только отраженные в бухгалтерском учете'");
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоУчастникамЭДО Тогда
		СоответствиеУчастниковЭДО = Новый Соответствие;
		МассивОрганизаций  = НастройкаОтборовНаУзле.УчастникиЭДО.Организация;
		МассивКонтрагентов = НастройкаОтборовНаУзле.УчастникиЭДО.Контрагент;
		Для Счетчик = 0 По МассивОрганизаций.Количество() - 1 Цикл
			Организация = МассивОрганизаций[Счетчик];
			Контрагенты = СоответствиеУчастниковЭДО.Получить(Организация);
			Если Контрагенты = Неопределено Тогда
				Контрагенты = Новый Массив;
				Контрагенты.Добавить(МассивКонтрагентов[Счетчик]);
				СоответствиеУчастниковЭДО.Вставить(Организация, Контрагенты);
			Иначе
				Контрагенты.Добавить(МассивКонтрагентов[Счетчик]);
			КонецЕсли;
		КонецЦикла;
		
		ПредставленияОтбора = "";
		Для Каждого ЭлементСоответствия Из СоответствиеУчастниковЭДО Цикл
			ПредставленияОтбора = ПредставленияОтбора + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 и %2'"),
				ЭлементСоответствия.Ключ, 
				СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(ЭлементСоответствия.Значение, "; ")) + Символы.ПС;
		КонецЦикла;
		
		ОграничениеОтборПоУчастникамЭДО = НСтр("ru = 'Отбор по участникам ЭДО:'")
			+ Символы.ПС + ПредставленияОтбора;
	Иначе
		ОграничениеОтборПоУчастникамЭДО = НСтр("ru = 'По всем организациям и контрагентам.'");
	КонецЕсли;
	
	Результат = НСтр("ru = 'Выгружать документы и справочную информацию:
							|[ОграничениеДатаНачалаВыгрузкиДокументов]
							|[ОграничениеПередаватьДокументыОраженныеВБУ]
							|[ОграничениеОтборПоУчастникамЭДО]'");
	
	Результат = СтрЗаменить(Результат, "[ОграничениеДатаНачалаВыгрузкиДокументов]", ОграничениеДатаНачалаВыгрузкиДокументов);
	Результат = СтрЗаменить(Результат, "[ОграничениеПередаватьДокументыОраженныеВБУ]", ОграничениеПередаватьДокументыОраженныеВБУ);
	Результат = СтрЗаменить(Результат, "[ОграничениеОтборПоУчастникамЭДО]", ОграничениеОтборПоУчастникамЭДО);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	ОписаниеЗначенийПоУмолчанию = НСтр("ru = 'В документах поступления:'");
	
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.Склад) Тогда
		ОписаниеСклад = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'будет указан склад ""%1"";'"),
			Строка(ЗначенияПоУмолчаниюНаУзле.Склад));
	Иначе
		ОписаниеСклад = НСтр("ru = 'склад указан не будет.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ЦенаВключаетНДС) Тогда
		ОписаниеЦена = НСтр("ru = 'цена будет указана с учетом НДС.'");
	Иначе
		ОписаниеЦена = НСтр("ru = 'цена будет указана без учета НДС.'")
	КонецЕсли;
	
	ОписаниеЗначенийПоУмолчанию = ОписаниеЗначенийПоУмолчанию
		+ Символы.ПС + ОписаниеСклад
		+ Символы.ПС + ОписаниеЦена;
	
	Возврат ОписаниеЗначенийПоУмолчанию;
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат НСтр("ru = 'Создать обмен с конфигурацией ""Клиент ЭДО, ред. 2.3""'");
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак использования плана обмена для организации обмена в модели сервиса.
//  Если признак установлен, то в сервисе можно включить обмен данными
//  с использованием этого плана обмена.
//  Если признак не установлен, то план обмена будет использоваться только 
//  для обмена в локальном режиме работы конфигурации.
// 
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак того, что план обмена поддерживает обмен данными с корреспондентом, работающим в модели сервиса.
// Если признак установлен, то становится возможным создать обмен данными когда эта информационная база
// работает в локальном режиме, а корреспондент в модели сервиса.
//
Функция КорреспондентВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает имена реквизитов и табличных частей плана обмена,
// перечисленных через запятую, которые являются общими для пары обменивающихся конфигураций.
// Например, если для плана обмена предусмотрено ограничение миграции данных по организациям в обе стороны,
// то табличная часть плана обмена, в которой перечислены разрешенные организации, считается общей.
// Возвращает пустую строку, если общие данные узлов не предусмотрены.
//
Функция ОбщиеДанныеУзлов() Экспорт
	
	Возврат "ДатаНачалаВыгрузкиДокументов, ИспользоватьОтборПоУчастникамЭДО";
	
КонецФункции

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные с программой ""Управление торговлей, ред. 10.3"".
	|Из приложения ""Управление торговлей"" в приложение ""Клиент ЭДО"" переносятся справочники и все необходимые документы
	|для создания исходящих электронных документов, а из приложения ""Клиент ЭДО"" в приложение ""Управление торговлей"" -
	|справочники и документы для отражения входящих электронных документов в учете. Для получения более подробной информации нажмите на ссылку ""Подробное описание"".'");
	
	Возврат СтрЗаменить(ПоясняющийТекст, Символы.ПС, " ");
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену() Экспорт
	
	Возврат "ПланОбмена.ОбменУправлениеТорговлей103КлиентЭДО.Форма.ПодробнаяИнформация";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий для обмена без использования правил обмена

// Обработчик события коллизиАй изменений объектов.
// Условие возникновения: 
// Событие возникает при загрузке данных,
// в случае коллизии изменений загружаемого объекта.
// Коллизия изменений возникает, когда в информационной базе 
// зарегистрированы изменения для загружаемого объекта.
//
//  Параметры:
// УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена для которого выполняется загрузка данных.
// Объект – объект, для которого возникла коллизия изменений.
//
//  Возвращаемое значение:
// Тип: Булево. Истина – загружаемый объект будет записан в информационную базу;
// Ложь – загружаемый объект записан не будет.
//
Функция ПрименитьОбъектПриКоллизииИзменений(УзелИнформационнойБазы, Объект) Экспорт
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы через внешнее соединение

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	Возврат "";
	
КонецФункции

// Процедура предназначена для получения дополнительных данных, используемых при настройке обмена в базе-корреспонденте.
//
//  Параметры:
// ДополнительныеДанные – Структура. Дополнительные данные, которые будут использованы
// в базе-корреспонденте при настройке обмена.
// В качестве значений структуры применимы только значения, поддерживающие XDTO-сериализацию.
//
Процедура ПолучитьДополнительныеДанныеДляКорреспондента(ДополнительныеДанные) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Константы и проверка параметров учета

// Возвращает пояснение о последовательности действий пользователя для настройки параметров учета в текущей информационной базе.
//
Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает пояснение о последовательности действий пользователя для настройки параметров учета в базе-корреспонденте.
//
Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента() Экспорт
	
	Возврат "";
	
КонецФункции

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

#КонецЕсли
