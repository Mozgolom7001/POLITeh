////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет доступностью элементов формы.
//
Процедура УправлениеДоступностью()
	
	ЭлементыФормы.ДатаНачалаВыгрузкиСебестоимости.Доступность    = ВыгружатьСебестоимость;
	ЭлементыФормы.ПериодичностьПередачиСебестоимости.Доступность = ВыгружатьСебестоимость;
	ЭлементыФормы.ЗарегистрироватьСебестоимость.Доступность      = ВыгружатьСебестоимость;
	
	ЭлементыФормы.ПередатьТолькоДляСверки.Доступность = ЗначениеЗаполнено(ДатаСвертки);
	
КонецПроцедуры

// Процедура заполняет табличные поля построителя отчета на форме по сохраненным отборам
//
Процедура ЗаполнитьПостроительОтчета(ПостроительОтчета, ИмяСправочника, ПредставлениеЭлемента, ХранилищеСОтбором)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИмяСправочника.Ссылка КАК ПредставлениеЭлемента
	|ИЗ
	|	Справочник.ИмяСправочника КАК ИмяСправочника";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника", ИмяСправочника);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПредставлениеЭлемента", ПредставлениеЭлемента);
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	
	ПостроительОтчета.ЗаполнитьНастройки();
	
	СтруктураПостроителяОтчета = ХранилищеСОтбором.Получить();
		
	Если СтруктураПостроителяОтчета <> Неопределено Тогда
		
		ПостроительОтчета.УстановитьНастройки(СтруктураПостроителяОтчета.Настройки);
		
		//заполним отбор сохраненными значениями
		Для Каждого ЭлементОтбора Из СтруктураПостроителяОтчета.Отбор Цикл
			
			Если ПустаяСтрока(ЭлементОтбора.ПутьКДанным) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлементОтбора = ПостроительОтчета.Отбор.Добавить(ЭлементОтбора.ПутьКДанным);
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора, , "Значение");
			НовыйЭлементОтбора.Значение = ЭлементОтбора.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает стуктуру, определяющую отбор и настройки построителя отчета
//
Функция ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчета)
	
	СтруктураПостроителяОтчета = Новый Структура;
	СтруктураПостроителяОтчета.Вставить("Отбор"    , ПостроительОтчета.Отбор);
	СтруктураПостроителяОтчета.Вставить("Настройки", ПостроительОтчета.ПолучитьНастройки(Ложь, Истина, Истина, Истина, Истина));
	Возврат Новый ХранилищеЗначения(СтруктураПостроителяОтчета);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоНоменклатуре, "Номенклатура", "Номенклатура", ОтборПоНоменклатуре);
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоКонтрагентам, "Контрагенты" , "Контрагент"  , ОтборПоКонтрагентам);
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоСкладам     , "Склады"      , "Склад"       , ОтборПоСкладам);
	ЗаполнитьПостроительОтчета(ПостроительОтчетаПоКассам      , "Кассы"       , "Касса"       , ОтборПоКассам);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	Если Организации.Количество() > 0 Тогда
		
		МассивИспользуемыхОрганизаций = СоответствияМагазиновИСкладов.ВыгрузитьКолонку("Организация");
		
		Для каждого ИспользуемаяОрганизация Из МассивИспользуемыхОрганизаций Цикл
			
			Если Организации.Найти(ИспользуемаяОрганизация) = Неопределено Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Используемая в соответствии магазинов и складов организация
				|" + ИспользуемаяОрганизация + " не указана в фильтре по организациям", Отказ);
								
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если Ссылка.ДатаСвертки < ДатаСвертки И Не ДляСверки Тогда
		
		Ответ = Вопрос("После внесенных изменений в базе Розница будет произведена необратимая операция свертки. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			ДатаСвертки = Ссылка.ДатаСвертки;
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ДатаСвертки) Тогда
		
		Если ДатаСвертки < Ссылка.ДатаСвертки Или Не ЗначениеЗаполнено(ДатаСвертки) Тогда
			
			Ответ = Вопрос("Свертка базы Розница уже была выполнена. Установка даты свертки на более раннюю дату (либо ее очистка)
			                |может повлечь за собой необратимые последствия. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
		
				ДатаСвертки = Ссылка.ДатаСвертки;
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтборПоНоменклатуре = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоНоменклатуре);
	ОтборПоКонтрагентам = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоКонтрагентам);
	ОтборПоСкладам      = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоСкладам);
	ОтборПоКассам       = ПолучитьСтруктуруСОтборомИНастройками(ПостроительОтчетаПоКассам);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		ПериодичностьПередачиСебестоимости = Перечисления.Периодичность.День;
		
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры


// Процедура - обработчик события "Нажатие" надписи ГиперссылкаНастроить.
//
Процедура ДействияФормыНастройкиОбменов(Кнопка)
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьМониторОбменовДляУзлаОбмена(ЭтотОбъект.Ссылка, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ


// Процедура - обработчик события "ПриИзменении" флажка ВыгружатьСебестоимость.
//
Процедура ВыгружатьСебестоимостьПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриИзменении" табличного поля ТипыЦенНоменклатуры.
//
Процедура ТипыЦенНоменклатурыТипЦеныНоменклатурыПриИзменении(Элемент)
	
	ВыбранныйТипЦен = ЭлементыФормы.ТипыЦенНоменклатуры.ТекущаяСтрока.ТипЦеныНоменклатуры;
	
	Если ВыбранныйТипЦен.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон 
	 Или ВыбранныйТипЦен.Рассчитывается Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Нельзя выбирать динамические типы цен, и типы цен, рассчитываемые от вхождения в диапазон базовой цены!");
	
		ТипыЦенНоменклатуры.Удалить(ЭлементыФормы.ТипыЦенНоменклатуры.ТекущаяСтрока);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки ЗарегистрироватьСебестоимость.
//
Процедура ЗарегистрироватьСебестоимостьНажатие(Элемент)
	
	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроцедурыОбменаСРозничнойТорговлей.ЗарегистрироватьИзмененияДляСебестоимости(ЭтотОбъект);
	
	Предупреждение("Изменения успешно зарегистрированы!");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаСвертки.
//
Процедура ДатаСверткиПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры


