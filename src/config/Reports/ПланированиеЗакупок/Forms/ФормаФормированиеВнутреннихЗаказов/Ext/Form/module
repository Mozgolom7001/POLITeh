Процедура ПриОткрытии()
	
	ЗаполнитьПотребности();
	
	Для каждого Строка из Потребности.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
	ЭлементыФормы.ТабличноеПолеПотребности.Колонки.СкладНоменклатура.ТриСостоянияФлажка = Ложь;
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ТабличноеПолеПотребности.Колонки, Новый Структура("Характеристика"));
	
КонецПроцедуры // ПриОткрытии()

Процедура ТабличноеПолеПотребностиПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьПометки(Элемент.ТекущаяСтрока);
	
КонецПроцедуры // ТабличноеПолеПотребностиПриИзмененииФлажка()

Процедура ТабличноеПолеПотребностиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		
		Если Элемент.ТекущаяСтрока.Строки.Количество() > 0 Тогда
			
			Элемент.Колонки.ЗаказатьКоличество.ТолькоПросмотр = Истина;
			
		Иначе
			
			Элемент.Колонки.ЗаказатьКоличество.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПотребностиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.Уровень() > 0 Тогда
			
			Если ОформлениеСтроки.ДанныеСтроки.ЗаказатьКоличество > 0 Тогда
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.Кирпичный;
				
			Иначе
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.ЦианТемный;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеПотребностиПриПолученииДанных()

Процедура УстановитьПометки(ТекущаяСтрока) Экспорт
	
	УстановитьПометкиПодчиненных(ТекущаяСтрока);
	УстановитьПометкиРодителей(ТекущаяСтрока);
	
КонецПроцедуры // УстановитьПометки()

Процедура УстановитьПометкиПодчиненных(СтрокаРодитель) Экспорт

	Пометка = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.Строки;

	Если Подчиненные.Количество() > 0 Тогда
		
		Для каждого ТекущаяСтрока из Подчиненные Цикл
			
			ТекущаяСтрока.Пометка = Пометка;
			УстановитьПометкиПодчиненных(ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

Процедура УстановитьПометкиРодителей(Родитель) Экспорт

	Если Родитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	Если Родитель.Строки.Количество() Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для каждого Строка из Родитель.Строки Цикл
			
			Если Строка.Пометка = 0 Тогда
				
				НайденыВыключенные = Истина;
				
			ИначеЕсли Строка.Пометка = 1 Тогда
				
				НайденыВключенные  = Истина;
				
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			
			Пометка = 2;
			
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			
			Пометка = 1;
			
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			
			Пометка = 0;
			
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			
			Пометка = 2;
			
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиРодителей(Родитель.Родитель);
	
КонецПроцедуры // УстановитьПометкиРодителей()

Процедура ЗаполнитьПотребности()
	
	Потребности.Строки.Очистить();
	
	ТекущийСклад = Неопределено;
	НовыйСклад = Неопределено;
	
	Для каждого СтрокаВнутренниеЗаказы из ВнутренниеЗаказы Цикл
		
		Если СтрокаВнутренниеЗаказы.Склад <> ТекущийСклад Тогда
			
			ТекущийСклад = СтрокаВнутренниеЗаказы.Склад;
			
			НовыйСклад = Потребности.Строки.Добавить();
			НовыйСклад.СкладНоменклатура = ТекущийСклад;
			
		КонецЕсли;
		
		НоваяНоменклатура = НовыйСклад.Строки.Добавить();
		НоваяНоменклатура.СкладНоменклатура = СтрокаВнутренниеЗаказы.Номенклатура;
		НоваяНоменклатура.Характеристика = СтрокаВнутренниеЗаказы.ХарактеристикаНоменклатуры;
		НоваяНоменклатура.ТребуемоеКоличество = СтрокаВнутренниеЗаказы.Количество;
		НоваяНоменклатура.ЗаказатьКоличество = СтрокаВнутренниеЗаказы.Количество;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПотребности()

Процедура СформироватьВнутренниеЗаказы()
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Для каждого Склад из Потребности.Строки Цикл
		
		Если Склад.Пометка = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		ЗаполняемыйДокумент = Документы.ВнутреннийЗаказ.СоздатьДокумент();
			
		ЗаполняемыйДокумент.Дата = ТекущаяДата();
		ЗаполняемыйДокумент.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
		ЗаполняемыйДокумент.Заказчик = Склад.СкладНоменклатура;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаполняемыйДокумент, глЗначениеПеременной("глТекущийПользователь"), ВалютаРегламентированногоУчета);
			
		Для каждого Номенклатура из Склад.Строки Цикл
			
			Если Номенклатура.Пометка = 1 И Номенклатура.ЗаказатьКоличество > 0 Тогда
				
				НоваяСтрокаТовара = ЗаполняемыйДокумент.Товары.Добавить();
				
				НоваяСтрокаТовара.Номенклатура = Номенклатура.СкладНоменклатура;
				НоваяСтрокаТовара.ХарактеристикаНоменклатуры = Номенклатура.Характеристика;
				НоваяСтрокаТовара.ЕдиницаИзмерения = Номенклатура.СкладНоменклатура.ЕдиницаХраненияОстатков;
				НоваяСтрокаТовара.Количество = Номенклатура.ЗаказатьКоличество;
				НоваяСтрокаТовара.Коэффициент = НоваяСтрокаТовара.ЕдиницаИзмерения.Коэффициент;
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
			
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполняемыйДокумент.Записать();
		НоваяСтрока = СформированныеДокументы.Добавить();
		НоваяСтрока.Документ = ЗаполняемыйДокумент.Ссылка;
		НоваяСтрока.Пометка  = Истина;
			
	КонецЦикла;
	
КонецПроцедуры // СформироватьЗаказы()

Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	
	СформироватьВнутренниеЗаказы();
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы["СтраницаВнутренниеЗаказы"];
	Предупреждение("Формирование внутренних заказов завершено.");
	
	
КонецПроцедуры // ОсновныеДействияФормыВыполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьСостоянияДокументов()
	
	Индекс = 0;
	
	Пока Индекс < СформированныеДокументы.Количество() Цикл
		
		СтрокаТаблицы = СформированныеДокументы[Индекс];
		
		Попытка
			
			Если СтрокаТаблицы.Документ.ПолучитьОбъект() = Неопределено Тогда
				
				СформированныеДокументы.Удалить(СтрокаТаблицы);
				Продолжить;
				
			КонецЕсли;
			
		Исключение
			
			СформированныеДокументы.Удалить(СтрокаТаблицы);
			Продолжить;
			
		КонецПопытки;
		
		Если СтрокаТаблицы.Документ.ПометкаУдаления Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Истина;
			СтрокаТаблицы.Проведен = Ложь;
			
		ИначеЕсли СтрокаТаблицы.Документ.Проведен Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.Проведен = Истина;
			
		Иначе
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.Проведен = Ложь;
			
		КонецЕсли; 
		
		Индекс = Индекс + 1;
	
	КонецЦикла; 

КонецПроцедуры // ОбновитьСостоянияДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельЗакупкиУстановитьПометки(Кнопка)
	
	Для каждого Строка из Потребности.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиУстановитьПометки()

Процедура КоманднаяПанельЗакупкиСнятьПометки(Кнопка)
	
	Для каждого Строка из Потребности.Строки Цикл
		
		Строка.Пометка = 0;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиСнятьПометки()

Процедура КоманднаяПанельЗакупкиОбновить(Кнопка)
	
	ЗаполнитьПотребности();
	
	Для каждого Строка из Потребности.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиОбновить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельСформированныеДокументыУстановитьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУстановитьПометки()

Процедура КоманднаяПанельСформированныеДокументыСнятьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыСнятьПометки()

Процедура КоманднаяПанельСформированныеДокументыПровести(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				
				Попытка
					
					Строка.Документ.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
					Строка.Пометка = Ложь;
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПровести()

Процедура КоманднаяПанельСформированныеДокументыПометитьНаУдаление(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().УстановитьПометкуУдаления(НЕ Строка.ПометкаУдаления);
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыУдалить(Кнопка)
	
	КодВозврата = Вопрос("Внимание! Выбранные документы будут удалены без возможности восстановления
	|и без проверки ссылочной целостности!", РежимДиалогаВопрос.ОКОтмена,,, "Формирование заказов поставщикам");
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().Удалить();
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУдалить()

Процедура КоманднаяПанельСформированныеДокументыПечать(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено Тогда
				
				Попытка
					
					ДокументОбъект.Печать("Заказ");
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (Строка(ДокументОбъект) + ", печать не выполнена"));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыОбновить(Кнопка)
	
	ОбновитьСостоянияДокументов();

КонецПроцедуры // КоманднаяПанельСформированныеДокументыОбновить()

Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОбновитьСостоянияДокументов();
	
	Попытка
		
		ОткрытьЗначение(ВыбраннаяСтрока.Документ);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры // СформированныеДокументыВыбор()

Процедура СформированныеДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ОформлениеСтроки.Ячейки.Проведен.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.Проведен.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.Проведен.ОтображатьКартинку = Истина;
		
		Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
			
			ОформлениеСтроки.Ячейки.Проведен.ИндексКартинки = 1;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Проведен Тогда
			
			ОформлениеСтроки.Ячейки.Проведен.ИндексКартинки = 0;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.Проведен.ИндексКартинки = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформированныеДокументыПриПолученииДанных()

