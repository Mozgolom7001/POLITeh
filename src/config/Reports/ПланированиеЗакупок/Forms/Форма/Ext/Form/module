Процедура КоманднаяПанельФормыСформировать(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(РабочаяНеделя) Тогда
		
		Сообщить("Не заполнено значение реквизита ""Рабочая неделя""!");
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ОстатокКНачалуПериодаЗакупок) Тогда
		
		Сообщить("Не заполнено значение реквизита ""Остаток к началу периода закупок""!");
		Возврат;
		
	КонецЕсли;	
	
	СоставЗаказа.Очистить();
	ВнутренниеЗаказы.Очистить();
	
	Результат = Новый ТаблицаЗначений;
	
	УправлениеОтчетами.ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, мСтруктураДляОтбораПоКатегориям);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНачПродаж", ?(ДатаНачПродаж = Дата('00010101000000'), ДатаНачПродаж, Новый Граница(НачалоДня(ДатаНачПродаж), ВидГраницы.Включая)));
	ПостроительОтчета.Параметры.Вставить("ДатаКонПродаж", ?(ДатаКонПродаж = Дата('00010101000000'), ДатаКонПродаж, Новый Граница(КонецДня(ДатаКонПродаж), ВидГраницы.Включая)));
	ПостроительОтчета.Параметры.Вставить("ДатаНачЗакупок", ?(ДатаНачЗакупок = Дата('00010101000000'), ДатаНачЗакупок, Новый Граница(НачалоДня(ДатаНачЗакупок), ВидГраницы.Включая)));
	ПостроительОтчета.Параметры.Вставить("ДатаКонЗакупок", ?(ДатаКонЗакупок = Дата('00010101000000'), ДатаКонЗакупок, Новый Граница(КонецДня(ДатаКонЗакупок), ВидГраницы.Включая)));
	
	ПостроительОтчета.Параметры.Вставить("ДатаНачалаПродаж", ?(ДатаНачПродаж = Дата('00010101000000'), ДатаНачПродаж, НачалоДня(ДатаНачПродаж)));
	ПостроительОтчета.Параметры.Вставить("ДатаКонцаПродаж", ?(ДатаКонПродаж = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКонПродаж)));
	ПостроительОтчета.Параметры.Вставить("ДатаНачалаЗакупок", ?(ДатаНачЗакупок = Дата('00010101000000'), ДатаНачЗакупок, НачалоДня(ДатаНачЗакупок)));
	ПостроительОтчета.Параметры.Вставить("ДатаКонцаЗакупок", ?(ДатаКонЗакупок = Дата('00010101000000'), Дата("39991231"), КонецДня(ДатаКонЗакупок)));
	
	ПостроительОтчета.Параметры.Вставить("ОстатокКНачалуПериодаЗакупок", ОстатокКНачалуПериодаЗакупок);
	ПостроительОтчета.Параметры.Вставить("ПоВсейНоменклатуре", ПоВсейНоменклатуре);
	
	ПостроительОтчета.Выполнить();
	
	РезультатЗапроса = ПостроительОтчета.Результат;
	
	Для каждого Колонка из РезультатЗапроса.Колонки Цикл
		
		Если Колонка.Имя = "КоличествоКонечныйОстаток" ИЛИ
			Колонка.Имя = "КоличествоНачальныйОстаток" ИЛИ
			Колонка.Имя = "ОстатокНаДатуНачалаЗакупок" ИЛИ
			Колонка.Имя = "Продано" ИЛИ
			Колонка.Имя = "Период" Тогда
			
			Продолжить;
			
		КонецЕсли;

		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		
	КонецЦикла;
	
	Результат.Колонки.Добавить("Продано", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДнейПродажи", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("СредняяПродажаЗаДень", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Остаток", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("НеобходимыйОбъемЗакупки", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ПланируемыйОбъемПродаж", Новый ОписаниеТипов("Число"));
	
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСклад.Следующий() Цикл
		
		ВыборкаНоменклатура = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ВыборкаХарактеристика = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристика.Следующий() Цикл
				
				ПроданоВсего = ВыборкаХарактеристика.Продано;
				КоличествоДнейПродажи = 0; 
				ТекущийОстаток = ВыборкаХарактеристика.КоличествоНачальныйОстаток;
				ТекущаяДата = ДатаНачПродаж;
				ТекущаяДатаУчтена = 0;
				
				ВыборкаПериод = ВыборкаХарактеристика.Выбрать();
				
				Пока ВыборкаПериод.Следующий() Цикл
					
					ТекущийОстаток = ВыборкаПериод.КоличествоНачальныйОстаток;
					
					Если ВыборкаПериод.Период <> Неопределено И НачалоДня(ТекущаяДата) <> НачалоДня(ВыборкаПериод.Период) Тогда
						
						Если ТекущийОстаток > 0 Тогда
							
							КоличествоДнейПродажи = КоличествоДнейПродажи + ЧислоРабочихДнейМежду(НачалоДня(ТекущаяДата) + 60 * 60 * 24, НачалоДня(ВыборкаПериод.Период) - 60 * 60 * 24);
							
						КонецЕсли;
						
						ТекущаяДатаУчтена = 0;
						ТекущаяДата = НачалоДня(ВыборкаПериод.Период);
						
					КонецЕсли;
					      
					ТекущийОстаток = ВыборкаПериод.КоличествоКонечныйОстаток;
					
					Если ТекущаяДатаУчтена = 0 Тогда
						
						Если (ТекущийОстаток <> 0 И ЯвляетсяРабочимДнем(ВыборкаПериод.Период)) ИЛИ ВыборкаПериод.Продано > 0 Тогда
							
							КоличествоДнейПродажи = КоличествоДнейПродажи + 1;
							ТекущаяДатаУчтена  = 1;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТекущийОстаток > 0 Тогда
					
				    КоличествоДнейПродажи = КоличествоДнейПродажи + ЧислоРабочихДнейМежду(ТекущаяДата + ТекущаяДатаУчтена, ДатаКонПродаж);
					
				КонецЕсли;
				
				СредняяСкорость = ?(КоличествоДнейПродажи = 0, 0, ПроданоВсего / КоличествоДнейПродажи);
				ОстатокКНачалуЗакупок = ВыборкаХарактеристика.ОстатокНаДатуНачалаЗакупок;
				
				ДнейЗакупок = ЧислоРабочихДнейМежду(ДатаНачЗакупок, ДатаКонЗакупок);
				ПланПродаж = Макс(0, ДнейЗакупок * СредняяСкорость);
				ОбъемЗакупок = Макс(0, ПланПродаж - ОстатокКНачалуЗакупок);
				
				ПланПродаж = Округлить(ПланПродаж, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				ОбъемЗакупок = Округлить(ОбъемЗакупок, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				СредняяСкорость = Округлить(СредняяСкорость, ПорядокОкругления, ОкруглятьВБольшуюСторону);
				
				Если ОбъемЗакупок <= 0 И ПоказатьТолькоНеобходимыеЗакупки Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаХарактеристика);
				
				НоваяСтрока.ДнейПродажи = КоличествоДнейПродажи;
				НоваяСтрока.СредняяПродажаЗаДень = СредняяСкорость;
				НоваяСтрока.Остаток = ОстатокКНачалуЗакупок;
				НоваяСтрока.НеобходимыйОбъемЗакупки = ОбъемЗакупок;
				НоваяСтрока.ПланируемыйОбъемПродаж = ПланПродаж;
				
				Если ОбъемЗакупок > 0 Тогда
					
					НоваяСтрокаСоставЗаказа = СоставЗаказа.Добавить();
					НоваяСтрокаСоставЗаказа.Номенклатура = ВыборкаХарактеристика.Номенклатура;
					НоваяСтрокаСоставЗаказа.ХарактеристикаНоменклатуры = ВыборкаХарактеристика.ХарактеристикаНоменклатуры;
					НоваяСтрокаСоставЗаказа.Количество = ОбъемЗакупок;
					
					НоваяСтрокаВнутренниеЗаказы = ВнутренниеЗаказы.Добавить();
					НоваяСтрокаВнутренниеЗаказы.Склад = ВыборкаХарактеристика.Склад;
					НоваяСтрокаВнутренниеЗаказы.Номенклатура = ВыборкаХарактеристика.Номенклатура;
					НоваяСтрокаВнутренниеЗаказы.ХарактеристикаНоменклатуры = ВыборкаХарактеристика.ХарактеристикаНоменклатуры;
					НоваяСтрокаВнутренниеЗаказы.Количество = ОбъемЗакупок;
					
				КонецЕсли;
				
				ОбработкаПрерыванияПользователя();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СоставЗаказа.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	
	ЭлементыФормы.ПолеТабличногоДокументаРезультат.Очистить();
	
	ИсточникДанных = Новый ОписаниеИсточникаДанных(Результат);
	
	Для каждого Колонка из ИсточникДанных.Колонки Цикл
		
		Колонка.ПутьКданным = СтрЗаменить(Колонка.ПутьКданным, "Представление", ".Представление");
		
		Если Колонка.Имя <> "Склад" И Колонка.Имя <> "СкладПредставление" И Колонка.Имя <> "Номенклатура" И Колонка.Имя <> "НоменклатураПредставление" Тогда
			
			Колонка.ПутьКданным = СтрЗаменить(Колонка.ПутьКданным, "Номенклатура", "Номенклатура.");
			
			Если (Лев(Колонка.Имя, 8) = "Свойство" И Прав(Колонка.Имя, 8) = "Значение") ИЛИ Колонка.Имя = "Штрихкод" Тогда
				
				Колонка.ПутьКданным = "Номенклатура." + Колонка.ПутьКданным;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсточникДанных.Колонки.Склад.Измерение = Истина;
	ИсточникДанных.Колонки.Номенклатура.Измерение = Истина;
	
	Для каждого ВыбранноеПоле из ПостроительОтчета.ВыбранныеПоля Цикл
		
		Если Найти(ВыбранноеПоле.Имя, "ХарактеристикаНоменклатуры") > 0 Тогда
			
			ИсточникДанных.Колонки.ХарактеристикаНоменклатуры.Измерение = Истина;
			Прервать;
	
		КонецЕсли;
		
	КонецЦикла;
		
	ИсточникДанных.Колонки.Продано.Итог = "СУММА(Продано)";
	ИсточникДанных.Колонки.ДнейПродажи.Итог = "СУММА(ДнейПродажи)";
	ИсточникДанных.Колонки.СредняяПродажаЗаДень.Итог = "СУММА(СредняяПродажаЗаДень)";
	ИсточникДанных.Колонки.Остаток.Итог = "СУММА(Остаток)";
	ИсточникДанных.Колонки.НеобходимыйОбъемЗакупки.Итог = "СУММА(НеобходимыйОбъемЗакупки)";
	ИсточникДанных.Колонки.ПланируемыйОбъемПродаж.Итог = "СУММА(ПланируемыйОбъемПродаж)";
	
	_ПостроительОтчета = Новый ПостроительОтчета;
	
	_ПостроительОтчета.ИсточникДанных = ИсточникДанных;
	
	Для каждого ВыбранноеПоле из _ПостроительОтчета.ВыбранныеПоля Цикл
		
		Если ВыбранноеПоле.Имя = "Продано" Тогда
			
			ВыбранноеПоле.Представление = "Продано";
			
		ИначеЕсли ВыбранноеПоле.Имя = "ДнейПродажи" Тогда
			
			ВыбранноеПоле.Представление = "Дней" + Символы.ПС + "продажи";
			
		ИначеЕсли ВыбранноеПоле.Имя = "СредняяПродажаЗаДень" Тогда
			
			ВыбранноеПоле.Представление = "Средняя продажа" + Символы.ПС + "за день";
			
		ИначеЕсли ВыбранноеПоле.Имя = "Остаток" Тогда
			
			ВыбранноеПоле.Представление = "Остаток на дату" + Символы.ПС + "начала закупок";
			
		ИначеЕсли ВыбранноеПоле.Имя = "НеобходимыйОбъемЗакупки" Тогда
			
			ВыбранноеПоле.Представление = "Необходимый" + Символы.ПС + "объем закупки";
			
		ИначеЕсли ВыбранноеПоле.Имя = "ПланируемыйОбъемПродаж" Тогда
			
			ВыбранноеПоле.Представление = "Планируемый" + Символы.ПС + "объем продаж";
			
		ИначеЕсли ВыбранноеПоле.Имя = "ХарактеристикаНоменклатуры" Тогда
			
			ВыбранноеПоле.Представление = "Характеристика";
			
		ИначеЕсли Лев(ВыбранноеПоле.Имя, 8) = "Свойство" И Прав(ВыбранноеПоле.Имя, 8) = "Значение" Тогда
			
			ВыбранноеПоле.Представление = "Свойство";
			
		ИначеЕсли ВыбранноеПоле.Имя = "Штрихкод" Тогда
			
			ВыбранноеПоле.Представление = "Штрих-код";
			
		КонецЕсли;

	КонецЦикла;
	
	_ПостроительОтчета.ИзмеренияСтроки.Удалить(_ПостроительОтчета.ИзмеренияСтроки.Найти("Склад"));
	_ПостроительОтчета.ИзмеренияКолонки.Добавить("Склад");
	
	Для каждого Показатель из Показатели Цикл
		
		Если Показатель.Использование = Ложь Тогда
			
			_ПостроительОтчета.ВыбранныеПоля.Удалить(_ПостроительОтчета.ВыбранныеПоля.Найти(Показатель.Имя));
			
		КонецЕсли;
		
	КонецЦикла;
	
	_ПостроительОтчета.РазмещениеРеквизитовИзмеренийВСтроках = ТипРазмещенияРеквизитовИзмерений.Отдельно;
	_ПостроительОтчета.РазмещениеИзмеренийВСтроках = ТипРазмещенияИзмерений.Вместе;
	_ПостроительОтчета.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.ЗначенияГруппировок;
	
	_ПостроительОтчета.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Интерфейс);

	_ПостроительОтчета.Выполнить();
	_ПостроительОтчета.Вывести(ЭлементыФормы.ПолеТабличногоДокументаРезультат);
	
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Номенклатура", 35);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Характеристика", 35);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Продано", 15);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Дней" + Символы.ПС + "продажи", 15);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Средняя продажа" + Символы.ПС + "за день", 15);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Остаток на дату" + Символы.ПС + "начала закупок", 15);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Необходимый" + Символы.ПС + "объем закупки", 15);
	УстановитьШиринуКолонки(ЭлементыФормы.ПолеТабличногоДокументаРезультат, "Планируемый" + Символы.ПС + "объем продаж", 15);
	
	ЭлементыФормы.ПолеТабличногоДокументаРезультат.ФиксацияСверху = 5;
	
КонецПроцедуры // КоманднаяПанельФормыСформировать()

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаПродажНажатие(Элемент)

	мНастройкаПериодаПродаж.УстановитьПериод(ДатаНачПродаж, ?(ДатаКонПродаж = Дата('00010101000000'), ДатаКонПродаж, КонецДня(ДатаКонПродаж)));
	
	Если мНастройкаПериодаПродаж.Редактировать() Тогда
		
		ДатаНачПродаж = мНастройкаПериодаПродаж.ПолучитьДатуНачала();
		ДатаКонПродаж = мНастройкаПериодаПродаж.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаПродажНажатие()

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаЗакупокНажатие(Элемент)
	
	мНастройкаПериодаЗакупок.УстановитьПериод(ДатаНачЗакупок, ?(ДатаКонЗакупок = Дата('00010101000000'), ДатаКонЗакупок, КонецДня(ДатаКонЗакупок)));
	
	Если мНастройкаПериодаЗакупок.Редактировать() Тогда
		
		ДатаНачЗакупок = мНастройкаПериодаЗакупок.ПолучитьДатуНачала();
		ДатаКонЗакупок = мНастройкаПериодаЗакупок.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаЗакупокНажатие()

Процедура КоманднаяПанельФормыСформироватьЗаказ(Кнопка)
	
	Если СоставЗаказа.Количество() = 0 Тогда
		
		Предупреждение("Состав заказываемых позиций пуст!");
		Возврат;
		
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ЗаполняемыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
	
	ЗаполняемыйДокумент.Дата = ?(НЕ ЗначениеЗаполнено(ДатаНачЗакупок), ТекущаяДата(), ДатаНачЗакупок);
	ЗаполняемыйДокумент.ДатаПоступления = ?(НЕ ЗначениеЗаполнено(ДатаНачЗакупок), ТекущаяДата(), ДатаНачЗакупок);
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаполняемыйДокумент, глЗначениеПеременной("глТекущийПользователь"), ВалютаРегламентированногоУчета, "Покупка");
	
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС", ЗаполняемыйДокумент.Контрагент, ЗаполняемыйДокумент.ТипЦен, ЗаполняемыйДокумент.ДоговорКонтрагента, ЗаполняемыйДокумент.Дата, ЗаполняемыйДокумент.ВалютаДокумента, ЗаполняемыйДокумент.УчитыватьНДС, ЗаполняемыйДокумент.СуммаВключаетНДС);
	
	Для каждого СтрокаЗаказа из СоставЗаказа Цикл
		
		НоваяСтрокаТовара = ЗаполняемыйДокумент.Товары.Добавить();
		
		НоваяСтрокаТовара.Номенклатура = СтрокаЗаказа.Номенклатура;
		НоваяСтрокаТовара.ХарактеристикаНоменклатуры = СтрокаЗаказа.ХарактеристикаНоменклатуры;
		НоваяСтрокаТовара.ЕдиницаИзмерения = СтрокаЗаказа.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрокаТовара.Количество = СтрокаЗаказа.Количество;
		НоваяСтрокаТовара.Коэффициент = СтрокаЗаказа.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		НоваяСтрокаТовара.СтавкаНДС = СтрокаЗаказа.Номенклатура.СтавкаНДС;
		НоваяСтрокаТовара.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(НоваяСтрокаТовара.Номенклатура, НоваяСтрокаТовара.ХарактеристикаНоменклатуры,
			              ТипЦенНоменклатуры, ?(НЕ ЗначениеЗаполнено(ДатаНачЗакупок), ТекущаяДата(), ДатаНачЗакупок),
						  НоваяСтрокаТовара.ЕдиницаИзмерения, ВалютаРегламентированногоУчета,
						  ЗаполнениеДокументов.КурсДокумента(ЗаполняемыйДокумент, ВалютаРегламентированногоУчета),
						  ЗаполнениеДокументов.КратностьДокумента(ЗаполняемыйДокумент, ВалютаРегламентированногоУчета));
						  
						  
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
		
		Если НоваяСтрокаТовара.Цена = 0 Тогда
			
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент, СтруктураШапкиДокумента, ЗаполняемыйДокумент.ВалютаДокумента);
			
		КонецЕсли;
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
		
		// Рассчитываем плановую себестоимость.
		ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент, ВалютаРегламентированногоУчета);
		
	КонецЦикла;
	
	ФормаЗаказа = ЗаполняемыйДокумент.ПолучитьФорму(, ЭтаФорма);
	ФормаЗаказа.Открыть();
	
КонецПроцедуры // КоманднаяПанельФормыСформироватьЗаказ()

Процедура КоманднаяПанельФормыФормированиеВнутреннихЗаказов(Кнопка)
	
	Если ВнутренниеЗаказы.Количество() = 0 Тогда
		
		Предупреждение("Состав заказываемых позиций пуст!");
		Возврат;
		
	КонецЕсли;
	
	ФормаФормированиеВнутреннихЗаказов = ЭтотОбъект.ПолучитьФорму("ФормаФормированиеВнутреннихЗаказов", ЭтаФорма);
	ФормаФормированиеВнутреннихЗаказов.ВнутренниеЗаказы = ВнутренниеЗаказы.Скопировать();
	ФормаФормированиеВнутреннихЗаказов.ОткрытьМодально();
	
КонецПроцедуры // КоманднаяПанельФормыФормированиеВнутреннихЗаказов()

Функция ЯвляетсяРабочимДнем(Дата)
	
	Возврат ДеньНедели(Дата) <= РабочаяНеделя;
	
КонецФункции	// ЯвляетсяРабочимДнем()

Функция ЧислоРабочихДнейМежду(Дата1, Дата2)
	
	Перем ОбщееЧислоДней, ЧислоПолныхНедель, ЧислоДнейВНеполнойНеделе;     
	Перем ЧислоРабочихДней;
	                            
	Если Дата1 > Дата2 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	    
	ОбщееЧислоДней = (НачалоДня(Дата2) - НачалоДня(Дата1)) / (60 * 60 * 24) + 1;
	ЧислоДнейВНеполнойНеделе = ОбщееЧислоДней % 7;
	ЧислоПолныхНедель = Окр((ОбщееЧислоДней - ЧислоДнейВНеполнойНеделе) / 7);
	                      
	ЧислоРабочихДней = РабочаяНеделя * ЧислоПолныхНедель;
	
	Для Индекс = 0 По (ЧислоДнейВНеполнойНеделе - 1) Цикл
		
		ЧислоРабочихДней = ЧислоРабочихДней + ЯвляетсяРабочимДнем(Дата2 - Индекс * 60 * 60 * 24);
		
	КонецЦикла;	
	
	Возврат ЧислоРабочихДней;           
	
КонецФункции	// ЧислоРабочихДнейМежду()        

Процедура ПолеВыбораРабочаяНеделяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПолеВыбораОстатокКНачалуПериодаЗакупокОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПолеВводаОкруглятьВБольшуюСторонуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтборПередУдалением(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) Тогда
		
		Отказ = Истина;
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры) Тогда
		
		ТипЦенНоменклатуры = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		
	КонецЕсли;
	
	НовыйПоказатель = Показатели.Добавить();
	
	НовыйПоказатель.Имя = "Продано";
	НовыйПоказатель.Представление = "Продано";
	НовыйПоказатель.Использование = Истина;
			
	НовыйПоказатель = Показатели.Добавить();
	
	НовыйПоказатель.Имя = "ДнейПродажи";
	НовыйПоказатель.Представление = "Дней продажи";
	НовыйПоказатель.Использование = Истина;
			
	НовыйПоказатель = Показатели.Добавить();
	
	НовыйПоказатель.Имя = "СредняяПродажаЗаДень";
	НовыйПоказатель.Представление = "Средняя продажа за день";
	НовыйПоказатель.Использование = Истина;
			
	НовыйПоказатель = Показатели.Добавить();
	
	НовыйПоказатель.Имя = "Остаток";
	НовыйПоказатель.Представление = "Остаток на дату начала закупок";
	НовыйПоказатель.Использование = Истина;
			
	НовыйПоказатель = Показатели.Добавить();
	
	НовыйПоказатель.Имя = "НеобходимыйОбъемЗакупки";
	НовыйПоказатель.Представление = "Необходимый объем закупки";
	НовыйПоказатель.Использование = Истина;
			
	НовыйПоказатель = Показатели.Добавить();
	
	НовыйПоказатель.Имя = "ПланируемыйОбъемПродаж";
	НовыйПоказатель.Представление = "Планируемый объем продаж";
	НовыйПоказатель.Использование = Истина;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", Строка(ЭтотОбъект));
	
	Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
			
		мТекущаяНастройка = СтруктураНастройки;
		ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
		
	Иначе
		
		ЗаполнитьНачальныеНастройки();
		РабочаяНеделя = ЭлементыФормы.ПолеВыбораРабочаяНеделя.СписокВыбора.Получить(0).Значение;
		ОстатокКНачалуПериодаЗакупок = ЭлементыФормы.ПолеВыбораОстатокКНачалуПериодаЗакупок.СписокВыбора.Получить(0).Значение;
		
	КонецЕсли;
	
КонецПроцедуры

Функция Округлить(Число, ПараметрПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	Если НЕ ЗначениеЗаполнено(Число) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПараметрПорядокОкругления) Тогда
		
		Порядок = 0.001;
		
	Иначе
		
		Порядок = ПараметрПорядокОкругления;
		
	КонецЕсли;

	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
		
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
		
	Иначе
		
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлитья до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
			
		Иначе

			// При порядке округления "0.05" 0.371 должно округлитья до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // Округлить()

Процедура КоманднаяПанельФормыСохранитьНастройки(Кнопка)
	
	СохранитьНастройки();
	
КонецПроцедуры // КоманднаяПанельФормыСохранитьНастройки()

Процедура КоманднаяПанельФормыВосстановитьнастройки(Кнопка)
	
	ВосстановитьНастройки();
	
КонецПроцедуры // КоманднаяПанельФормыВосстановитьнастройки()

