// Обновляет отчет.
//
Процедура ОбновитьОтчет() Экспорт

	Если Не ЗначениеЗаполнено(ДатаНач) ИлИ Не ЗначениеЗаполнено(ДатаКон) Тогда
		Предупреждение("Не выбран период!");
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Склад) Тогда
		Предупреждение("Не выбран склад!");
		Возврат;
	КонецЕсли;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		Предупреждение("Отчет можно формировать только по складам с видом ""Розничный"" или ""НТТ""!");
		Возврат;
	КонецЕсли;

	мТабДок = ЭлементыФормы.ДокументРезультат;

	мТабДок.Очистить();

	Макет = ЭтотОбъект.ПолучитьМакет("Макет");

	// Выведем заголовок.
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация, ДатаКон);

	ВыбМОЛ = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(КонецДня(ДатаКон), Новый Структура("СтруктурнаяЕдиница", Склад)).ФизическоеЛицо;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ОрганизацияПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ДатаСоставления = РабочаяДата;
	ОбластьМакета.Параметры.ДатаНачала = ДатаНач;
	ОбластьМакета.Параметры.ДатаКонца = ДатаКон;
	ОбластьМакета.Параметры.ОрганизацияПоОКПО = СведенияОПокупателе.КодПоОКПО;
	ОбластьМакета.Параметры.МОЛ = ?(ЗначениеЗаполнено(ВыбМОЛ), ВыбМОЛ, "");
	ОбластьМакета.Параметры.МОЛТабельныйНомер = ?(Не ЗначениеЗаполнено(ВыбМОЛ), "", ВыбМОЛ.Код);

	ОбластьМакета.Параметры.Номер = НомерОтчета;
	ВысотаЗаголовка = ОбластьМакета.ВысотаТаблицы;

	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ПовторятьПриПечатиСтроки = мТабДок.Область(1 + ВысотаЗаголовка, ,2 + ВысотаЗаголовка);

	мТабДок.Вывести(ОбластьМакета);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ДатаНач));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ДатаКон));
	Запрос.УстановитьПараметр("Склад", Склад);

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	NULL КАК Док,
		|	NULL КАК ДатаДок,
		|	NULL КАК НомерДок,
		|	СУММА(ОстаткиТоваров.СуммаПродажнаяНачальныйОстаток) КАК НачОст,
		|	СУММА(ОстаткиТоваров.СуммаПродажнаяКонечныйОстаток) КАК КонОст,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.СуммаПродажнаяПриход - ОстаткиТоваров.СуммаПродажнаяРасход > 0 ТОГДА
		|			ОстаткиТоваров.СуммаПродажнаяПриход - ОстаткиТоваров.СуммаПродажнаяРасход
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	) КАК Приход,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.СуммаПродажнаяРасход - ОстаткиТоваров.СуммаПродажнаяПриход > 0 ТОГДА
		|			ОстаткиТоваров.СуммаПродажнаяРасход - ОстаткиТоваров.СуммаПродажнаяПриход
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	) КАК Расход
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&Дата1, &Дата2, , , Склад = &Склад) КАК ОстаткиТоваров
		|ИМЕЮЩИЕ
		|	СУММА(ОстаткиТоваров.СуммаПродажнаяНачальныйОстаток) <> 0.00
		|	ИЛИ СУММА(ОстаткиТоваров.СуммаПродажнаяКонечныйОстаток) <> 0.00
		|	ИЛИ СУММА(ВЫБОР	КОГДА ОстаткиТоваров.СуммаПродажнаяПриход - ОстаткиТоваров.СуммаПродажнаяРасход > 0 ТОГДА
		|					ОстаткиТоваров.СуммаПродажнаяПриход - ОстаткиТоваров.СуммаПродажнаяРасход ИНАЧЕ 0.00 КОНЕЦ) <> 0.00
		|	ИЛИ СУММА(ВЫБОР	КОГДА ОстаткиТоваров.СуммаПродажнаяРасход - ОстаткиТоваров.СуммаПродажнаяПриход > 0 ТОГДА
		|					ОстаткиТоваров.СуммаПродажнаяРасход - ОстаткиТоваров.СуммаПродажнаяПриход ИНАЧЕ 0.00 КОНЕЦ) <> 0.00
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваров.Регистратор КАК Док,
		|	ОстаткиТоваров.Период КАК ДатаДок,
		|	ОстаткиТоваров.Регистратор.Номер КАК НомерДок,
		|	СУММА(ОстаткиТоваров.СуммаПродажнаяНачальныйОстаток) КАК НачОст,
		|	СУММА(ОстаткиТоваров.СуммаПродажнаяКонечныйОстаток) КАК КонОст,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.СуммаПродажнаяПриход - ОстаткиТоваров.СуммаПродажнаяРасход > 0 ТОГДА
		|			ОстаткиТоваров.СуммаПродажнаяПриход - ОстаткиТоваров.СуммаПродажнаяРасход
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	) КАК Приход,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.СуммаПродажнаяРасход - ОстаткиТоваров.СуммаПродажнаяПриход > 0 ТОГДА
		|			ОстаткиТоваров.СуммаПродажнаяРасход - ОстаткиТоваров.СуммаПродажнаяПриход
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	) КАК Расход
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, , Склад = &Склад) КАК ОстаткиТоваров
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Регистратор,
		|	ОстаткиТоваров.Период,
		|	ОстаткиТоваров.Регистратор.Номер
		|УПОРЯДОЧИТЬ ПО
		|	ОстаткиТоваров.Период
		|";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	NULL КАК Док,
		|	NULL КАК ДатаДок,
		|	NULL КАК НомерДок,
		|	СУММА(ОстаткиТоваров.КоличествоНачальныйОстаток * ОстаткиТоваров.ЦенаВРознице) КАК НачОст,
		|	СУММА(ОстаткиТоваров.КоличествоКонечныйОстаток * ОстаткиТоваров.ЦенаВРознице) КАК КонОст,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.КоличествоПриход - ОстаткиТоваров.КоличествоРасход > 0 ТОГДА
		|			(ОстаткиТоваров.КоличествоПриход - ОстаткиТоваров.КоличествоРасход) * ОстаткиТоваров.ЦенаВРознице
		|		ИНАЧЕ
		|			0.00
		|		КОНЕЦ
		|	) КАК Приход,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.КоличествоРасход - ОстаткиТоваров.КоличествоПриход > 0 ТОГДА
		|			(ОстаткиТоваров.КоличествоРасход - ОстаткиТоваров.КоличествоПриход) * ОстаткиТоваров.ЦенаВРознице
		|		ИНАЧЕ
		|			0.00
		|		КОНЕЦ
		|	) КАК Расход
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.ОстаткиИОбороты(&Дата1, &Дата2, , , Склад = &Склад) КАК ОстаткиТоваров
		|ИМЕЮЩИЕ
		|	СУММА(ОстаткиТоваров.КоличествоНачальныйОстаток * ОстаткиТоваров.ЦенаВРознице) <> 0.00
		|	ИЛИ СУММА(ОстаткиТоваров.КоличествоКонечныйОстаток * ОстаткиТоваров.ЦенаВРознице) <> 0.00
		|	ИЛИ СУММА(ВЫБОР КОГДА ОстаткиТоваров.КоличествоПриход - ОстаткиТоваров.КоличествоРасход > 0 ТОГДА
		|					(ОстаткиТоваров.КоличествоПриход - ОстаткиТоваров.КоличествоРасход) * ОстаткиТоваров.ЦенаВРознице
		|					ИНАЧЕ 0.00 КОНЕЦ) <> 0.00
		|	ИЛИ СУММА(ВЫБОР КОГДА ОстаткиТоваров.КоличествоРасход - ОстаткиТоваров.КоличествоПриход > 0 ТОГДА
		|					(ОстаткиТоваров.КоличествоРасход - ОстаткиТоваров.КоличествоПриход) * ОстаткиТоваров.ЦенаВРознице
		|					ИНАЧЕ 0.00 КОНЕЦ) <> 0.00
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОстаткиТоваров.Регистратор КАК Док,
		|	ОстаткиТоваров.Период КАК ДатаДок,
		|	ОстаткиТоваров.Регистратор.Номер КАК НомерДок,
		|	СУММА(ОстаткиТоваров.КоличествоНачальныйОстаток * ОстаткиТоваров.ЦенаВРознице) КАК НачОст,
		|	СУММА(ОстаткиТоваров.КоличествоКонечныйОстаток * ОстаткиТоваров.ЦенаВРознице) КАК КонОст,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.КоличествоПриход - ОстаткиТоваров.КоличествоРасход > 0 
		|			И ОстаткиТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА
		|			(ОстаткиТоваров.КоличествоПриход - ОстаткиТоваров.КоличествоРасход) * ОстаткиТоваров.ЦенаВРознице
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	) КАК Приход,
		|	СУММА(
		|		ВЫБОР КОГДА ОстаткиТоваров.КоличествоРасход - ОстаткиТоваров.КоличествоПриход > 0
		|			И ОстаткиТоваров.Номенклатура ССЫЛКА Справочник.Номенклатура ТОГДА
		|			(ОстаткиТоваров.КоличествоРасход - ОстаткиТоваров.КоличествоПриход) * ОстаткиТоваров.ЦенаВРознице
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ
		|	) КАК Расход
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, , Склад = &Склад) КАК ОстаткиТоваров
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиТоваров.Регистратор,
		|	ОстаткиТоваров.Период,
		|	ОстаткиТоваров.Регистратор.Номер
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок
		|";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;

	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезултатОстаков = МассивРезультатов[0];
	РезультатЗапроса = МассивРезультатов[1];

	Если РезултатОстаков.Пустой() Тогда
		НачОст = 0;
		КонОст = 0;
	Иначе
		ВыборкаСтрокаОстатков = РезултатОстаков.Выбрать();
		ВыборкаСтрокаОстатков.Следующий();
		НачОст = ВыборкаСтрокаОстатков.НачОст;
		КонОст = ВыборкаСтрокаОстатков.КонОст;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокНачала");
	ОбластьМакета.Параметры.ДатаНачала = "Остаток на " + Формат(ДатаНач, "ДЛФ=Д");
	ОбластьМакета.Параметры.НачСтоимостьВсего = ОбщегоНазначения.ФорматСумм(НачОст);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Приход");
	мТабДок.Вывести(ОбластьМакета);

	ТЗПриходы = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(РезультатЗапроса, Новый Структура("Приход", 0),
	            Новый Структура("Приход", ВидСравнения.НеРавно)).Выгрузить();

	ТЗПриходы.Сортировать("ДатаДок Возр");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого СтрокаПрихода Из ТЗПриходы Цикл
		ОбластьМакета.Параметры.Докум = СтрокаПрихода.Док;
		ОбластьМакета.Параметры.Расшифровка = СтрокаПрихода.Док;
		ОбластьМакета.Параметры.ДатаДокумента = СтрокаПрихода.ДатаДок;
		ОбластьМакета.Параметры.НомерДокумента = СтрокаПрихода.НомерДок;
		ОбластьМакета.Параметры.СуммаТовара = ОбщегоНазначения.ФорматСумм(СтрокаПрихода.Приход);
		ОбластьМакета.Параметры.СуммаТары = ОбщегоНазначения.ФорматСумм(0);
		мТабДок.Вывести(ОбластьМакета);
	КонецЦикла;

	Приход = ТЗПриходы.Итог("Приход");

	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПриход");
	ОбластьМакета.Параметры.ПрихСтоимостьВсего = ОбщегоНазначения.ФорматСумм(Приход);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ВсегоПриход");
	ОбластьМакета.Параметры.ПриходСОстатком = ОбщегоНазначения.ФорматСумм(Приход + НачОст);
	мТабДок.Вывести(ОбластьМакета);

	мТабДок.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета = Макет.ПолучитьОбласть("Расход");
	мТабДок.Вывести(ОбластьМакета);

	ТЗРасходы = ОбщегоНазначения.ОтобратьСтрокиПоКритериям(РезультатЗапроса, Новый Структура("Расход", 0),
	            Новый Структура("Расход", ВидСравнения.НеРавно)).Выгрузить();

	ТЗРасходы.Сортировать("ДатаДок Возр");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого СтрокаРасхода Из ТЗРасходы Цикл
		ОбластьМакета.Параметры.Докум = СтрокаРасхода.Док;
		ОбластьМакета.Параметры.Расшифровка = СтрокаРасхода.Док;
		ОбластьМакета.Параметры.ДатаДокумента = СтрокаРасхода.ДатаДок;
		ОбластьМакета.Параметры.НомерДокумента = СтрокаРасхода.НомерДок;
		ОбластьМакета.Параметры.СуммаТовара = ОбщегоНазначения.ФорматСумм(СтрокаРасхода.Расход);
		ОбластьМакета.Параметры.СуммаТары = ОбщегоНазначения.ФорматСумм(0);
		мТабДок.Вывести(ОбластьМакета);
	КонецЦикла;

	Расход = ТЗРасходы.Итог("Расход");

	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРасход");
	ОбластьМакета.Параметры.РасхСтоимостьВсего = ОбщегоНазначения.ФорматСумм(Расход);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокКонец");
	ОбластьМакета.Параметры.ДатаКонца = "Остаток на " + Формат(ДатаКон, "ДЛФ=Д");
	ОбластьМакета.Параметры.КонСтоимостьВсего = ОбщегоНазначения.ФорматСумм(КонОст);
	мТабДок.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.МОЛ = ?(ЗначениеЗаполнено(ВыбМОЛ), ВыбМОЛ, "");
	мТабДок.Вывести(ОбластьМакета);

	мТабДок.ПовторятьПриПечатиСтроки = ПовторятьПриПечатиСтроки;

	НомерОтчета = НомерОтчета + 1;

КонецПроцедуры // ОбновитьОтчет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события "Нажатие" кнопки "НастройкаПериода".
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));

	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Обработчик события "Нажатие" кнопки "Сформировать".
//
Процедура КоманднаяПанель1Сформировать(Кнопка)

	ОбновитьОтчет();

КонецПроцедуры // КоманднаяПанель1Сформировать()

// Обработчик события "НачалоВыбора" реквизита "Склад".
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.ПараметрВыборГруппИЭлементов                   = Элемент.ВыборГруппИЭлементов;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение      = Перечисления.ВидыСкладов.Оптовый;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения  = ВидСравнения.НеРавно;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры // СкладНачалоВыбора()
