Процедура ПриОткрытии()
	
	ЗаполнитьЗакупки();
	
	ЭлементыФормы.ТабличноеПолеЗакупки.Колонки.СкладПоставщикНоменклатура.ТриСостоянияФлажка = Ложь;
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ТабличноеПолеЗакупки.Колонки, Новый Структура("Характеристика"));
	
КонецПроцедуры // ПриОткрытии()

Процедура ТабличноеПолеЗакупкиПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьПометки(Элемент.ТекущаяСтрока);
	
КонецПроцедуры // ТабличноеПолеЗакупкиПриИзмененииФлажка()

Процедура ТабличноеПолеЗакупкиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		
		Если Элемент.ТекущаяСтрока.Строки.Количество() > 0 Тогда
			
			Элемент.Колонки.ЗаказатьКоличество.ТолькоПросмотр = Истина;
			
		Иначе
			
			Элемент.Колонки.ЗаказатьКоличество.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеЗакупкиПриАктивизацииСтроки()

Процедура ТабличноеПолеЗакупкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		Если ТипЗнч(ОформлениеСтроки.ДанныеСтроки.СкладПоставщикНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ОформлениеСтроки.ДанныеСтроки.ЗаказатьКоличество > 0 Тогда
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.Кирпичный;
				
			Иначе
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.ЦианТемный;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеЗакупкиПриПолученииДанных()

Процедура УстановитьПометки(ТекущаяСтрока) Экспорт
	
	УстановитьПометкиПодчиненных(ТекущаяСтрока);
	УстановитьПометкиРодителей(ТекущаяСтрока);
	
КонецПроцедуры // УстановитьПометки()

Процедура УстановитьПометкиПодчиненных(СтрокаРодитель) Экспорт

	Пометка = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.Строки;

	Если Подчиненные.Количество() > 0 Тогда
		
		Для каждого ТекущаяСтрока из Подчиненные Цикл
			
			ТекущаяСтрока.Пометка = Пометка;
			УстановитьПометкиПодчиненных(ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

Процедура УстановитьПометкиРодителей(Родитель) Экспорт

	Если Родитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	Если Родитель.Строки.Количество() Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для каждого Строка из Родитель.Строки Цикл
			
			Если Строка.Пометка = 0 Тогда
				
				НайденыВыключенные = Истина;
				
			ИначеЕсли Строка.Пометка = 1 ИЛИ Строка.Пометка = 2 Тогда
				
				НайденыВключенные  = Истина;
				
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			
			Пометка = 2;
			
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			
			Пометка = 1;
			
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			
			Пометка = 0;
			
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			
			Пометка = 2;
			
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиРодителей(Родитель.Родитель);
	
КонецПроцедуры // УстановитьПометкиРодителей()

Процедура ЗаполнитьЗакупки()
	
	Закупки.Строки.Очистить();

	СохраненныеНастройки = УниверсальныйОтчет.ПостроительОтчета.ПолучитьНастройки();
	
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	УниверсальныйОтчет.ПостроительОтчета.Порядок.Очистить();
	
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Склад",, ТипИзмеренияПостроителяОтчета.Элементы);
	УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Добавить("Номенклатура.ОсновнойПоставщик",, ТипИзмеренияПостроителяОтчета.Элементы);
		
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("Номенклатура");
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("ХарактеристикаНоменклатуры");
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("РекомендуемыйОбъемЗакупки");
	УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Добавить("ОжидаемоеПоступление");
	
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНач", ?(УниверсальныйОтчет.ДатаНач = Дата('00010101000000'), УниверсальныйОтчет.ДатаНач, Новый Граница(НачалоДня(УниверсальныйОтчет.ДатаНач), ВидГраницы.Включая)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКон", ?(УниверсальныйОтчет.ДатаКон = Дата('00010101000000'), УниверсальныйОтчет.ДатаКон, Новый Граница(КонецДня(УниверсальныйОтчет.ДатаКон), ВидГраницы.Включая)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаНачала", ?(УниверсальныйОтчет.ДатаНач = Дата('00010101000000'), УниверсальныйОтчет.ДатаНач, НачалоДня(УниверсальныйОтчет.ДатаНач)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ДатаКонца", ?(УниверсальныйОтчет.ДатаКон = Дата('00010101000000'), Дата("39991231"), КонецДня(УниверсальныйОтчет.ДатаКон)));
	УниверсальныйОтчет.ПостроительОтчета.Параметры.Вставить("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = УниверсальныйОтчет.ПостроительОтчета.ПолучитьЗапрос().Выполнить();
	
	ВыборкаСклад = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСклад.Следующий() Цикл
		
		НовыйСклад = Закупки.Строки.Добавить();
		НовыйСклад.СкладПоставщикНоменклатура = ВыборкаСклад.Склад;
		
		ВыборкаПоставщик = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоставщик.Следующий() Цикл
		
			НовыйПоставщик = НовыйСклад.Строки.Добавить();
			НовыйПоставщик.СкладПоставщикНоменклатура = ВыборкаПоставщик.НоменклатураОсновнойПоставщик;
			
			ВыборкаНоменклатура = ВыборкаПоставщик.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				НоваяНоменклатура = НовыйПоставщик.Строки.Добавить();
				
				НоваяНоменклатура.СкладПоставщикНоменклатура = ВыборкаНоменклатура.Номенклатура;
				НоваяНоменклатура.Характеристика = ВыборкаНоменклатура.ХарактеристикаНоменклатуры;
				НоваяНоменклатура.РекомендуемоеКоличество = ВыборкаНоменклатура.РекомендуемыйОбъемЗакупки;
				НоваяНоменклатура.ЗаказанноеКоличество = ВыборкаНоменклатура.ОжидаемоеПоступление;
					
				Если ВыборкаНоменклатура.РекомендуемыйОбъемЗакупки > ВыборкаНоменклатура.ОжидаемоеПоступление Тогда
					
					НоваяНоменклатура.ЗаказатьКоличество = ВыборкаНоменклатура.РекомендуемыйОбъемЗакупки - ВыборкаНоменклатура.ОжидаемоеПоступление;
					НоваяНоменклатура.Пометка = 1;
					
				Иначе
					
					НоваяНоменклатура.ЗаказатьКоличество = 0;
					НоваяНоменклатура.Пометка = 0;
					
				КонецЕсли;
				
				УстановитьПометкиРодителей(НоваяНоменклатура);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УниверсальныйОтчет.ПостроительОтчета.УстановитьНастройки(СохраненныеНастройки);
	
КонецПроцедуры // ЗаполнитьЗакупки()

Процедура СформироватьЗаказы()
	
	ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Для каждого Склад из Закупки.Строки Цикл
		
		Если Склад.Пометка = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
	
		Для каждого Поставщик из Склад.Строки Цикл
			
			Если Поставщик.Пометка = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
				
			ЗаполняемыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
				
			ЗаполняемыйДокумент.Дата = ТекущаяДата();
			ЗаполняемыйДокумент.Контрагент = Поставщик.СкладПоставщикНоменклатура;
			ЗаполняемыйДокумент.ДоговорКонтрагента = Поставщик.СкладПоставщикНоменклатура.ОсновнойДоговорКонтрагента;
			ЗаполняемыйДокумент.Организация = ЗаполняемыйДокумент.ДоговорКонтрагента.Организация;
			ЗаполняемыйДокумент.УчитыватьНДС = Истина;
			ЗаполняемыйДокумент.СуммаВключаетНДС = Истина;
			ЗаполняемыйДокумент.ВалютаДокумента = ЗаполняемыйДокумент.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			ЗаполняемыйДокумент.Склад = Склад.СкладПоставщикНоменклатура;
				
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаполняемыйДокумент, глЗначениеПеременной("глТекущийПользователь"), ВалютаРегламентированногоУчета, "Покупка");
			
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС", ЗаполняемыйДокумент.Контрагент, ЗаполняемыйДокумент.ТипЦен, ЗаполняемыйДокумент.ДоговорКонтрагента, ЗаполняемыйДокумент.Дата, ЗаполняемыйДокумент.ВалютаДокумента, ЗаполняемыйДокумент.УчитыватьНДС, ЗаполняемыйДокумент.СуммаВключаетНДС);
			
			Для каждого Номенклатура из Поставщик.Строки Цикл
				
				Если Номенклатура.Пометка = 1 И Номенклатура.ЗаказатьКоличество > 0 Тогда
					
					НоваяСтрокаТовара = ЗаполняемыйДокумент.Товары.Добавить();
					
					НоваяСтрокаТовара.Номенклатура = Номенклатура.СкладПоставщикНоменклатура;
					НоваяСтрокаТовара.ХарактеристикаНоменклатуры = Номенклатура.Характеристика;
					НоваяСтрокаТовара.ЕдиницаИзмерения = Номенклатура.СкладПоставщикНоменклатура.ЕдиницаХраненияОстатков;
					НоваяСтрокаТовара.Количество = Номенклатура.ЗаказатьКоличество;
					НоваяСтрокаТовара.Коэффициент = НоваяСтрокаТовара.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрокаТовара.СтавкаНДС = НоваяСтрокаТовара.Номенклатура.СтавкаНДС;
					
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
					ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета);
					
					// Рассчитываем реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);

					// Рассчитываем плановую себестоимость.
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент, ВалютаРегламентированногоУчета);
				
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаполняемыйДокумент.Записать();
			НоваяСтрока = СформированныеДокументы.Добавить();
			НоваяСтрока.Документ = ЗаполняемыйДокумент.Ссылка;
			НоваяСтрока.Пометка  = Истина;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьЗаказы()

Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	
	СформироватьЗаказы();
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы["ЗаказыПоставщикам"];
	Предупреждение("Формирование заказов поставщикам завершено.");
	
КонецПроцедуры // ОсновныеДействияФормыВыполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьСостоянияДокументов()
	
	Индекс = 0;
	
	Пока Индекс < СформированныеДокументы.Количество() Цикл
		
		СтрокаТаблицы = СформированныеДокументы[Индекс];
		
		Попытка
			
			Если СтрокаТаблицы.Документ.ПолучитьОбъект() = Неопределено Тогда
				
				СформированныеДокументы.Удалить(СтрокаТаблицы);
				Продолжить;
				
			КонецЕсли;
			
		Исключение
			
			СформированныеДокументы.Удалить(СтрокаТаблицы);
			Продолжить;
			
		КонецПопытки;
		
		Если СтрокаТаблицы.Документ.ПометкаУдаления Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Истина;
			СтрокаТаблицы.ДокументПроведен = Ложь;
			
		ИначеЕсли СтрокаТаблицы.Документ.Проведен Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.ДокументПроведен = Истина;
			
		Иначе
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.ДокументПроведен = Ложь;
			
		КонецЕсли; 
		
		Индекс = Индекс + 1;
	
	КонецЦикла; 

КонецПроцедуры // ОбновитьСостоянияДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельЗакупкиУстановитьПометки(Кнопка)
	
	Для каждого Строка из Закупки.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиУстановитьПометки()

Процедура КоманднаяПанельЗакупкиСнятьПометки(Кнопка)
	
	Для каждого Строка из Закупки.Строки Цикл
		
		Строка.Пометка = 0;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиСнятьПометки()

Процедура КоманднаяПанельЗакупкиОбновить(Кнопка)
	
	ЗаполнитьЗакупки();
	
КонецПроцедуры // КоманднаяПанельЗакупкиОбновить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельСформированныеДокументыУстановитьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУстановитьПометки()

Процедура КоманднаяПанельСформированныеДокументыСнятьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыСнятьПометки()

Процедура КоманднаяПанельСформированныеДокументыПровести(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				
				Попытка
					
					Строка.Документ.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
					Строка.Пометка = Ложь;
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПровести()

Процедура КоманднаяПанельСформированныеДокументыПометитьНаУдаление(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().УстановитьПометкуУдаления(НЕ Строка.ПометкаУдаления);
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыУдалить(Кнопка)
	
	КодВозврата = Вопрос("Внимание! Выбранные документы будут удалены без возможности восстановления
	|и без проверки ссылочной целостности!", РежимДиалогаВопрос.ОКОтмена,,, "Формирование заказов поставщикам");
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().Удалить();
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУдалить()

Процедура КоманднаяПанельСформированныеДокументыПечать(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено Тогда
				
				Попытка
					
					ДокументОбъект.Печать("Заказ");
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (Строка(ДокументОбъект) + ", печать не выполнена"));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыОбновить(Кнопка)
	
	ОбновитьСостоянияДокументов();

КонецПроцедуры // КоманднаяПанельСформированныеДокументыОбновить()

Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОбновитьСостоянияДокументов();
	
	Попытка
		
		ОткрытьЗначение(ВыбраннаяСтрока.Документ);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры // СформированныеДокументыВыбор()

Процедура СформированныеДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ОформлениеСтроки.Ячейки.ДокументПроведен.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.ДокументПроведен.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.ДокументПроведен.ОтображатьКартинку = Истина;
		
		Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
			
			ОформлениеСтроки.Ячейки.ДокументПроведен.ИндексКартинки = 1;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.ДокументПроведен Тогда
			
			ОформлениеСтроки.Ячейки.ДокументПроведен.ИндексКартинки = 0;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.ДокументПроведен.ИндексКартинки = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформированныеДокументыПриПолученииДанных()
