
Функция ПолучитьТаблицуПараметрыИзXMLПакетаККТ(Данные, ИдентификаторУстройства = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыРегистрацииККТ();
	
	Если ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
		Параметры.ВерсияФФДФН   = ЧтениеXML.ЗначениеАтрибута("FFDVersionFN");
		Параметры.ВерсияФФДККТ  = ЧтениеXML.ЗначениеАтрибута("FFDVersionKKT");
		// ФФД 1.0
		Параметры.РегистрационныйНомерККТ        = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTNumber"));
		Параметры.ОрганизацияНазвание            = ЧтениеXML.ЗначениеАтрибута("OrganizationName");
		Параметры.ОрганизацияИНН                 = СокрЛП(ЧтениеXML.ЗначениеАтрибута("VATIN"));
		Параметры.АдресУстановкиККТ              = ЧтениеXML.ЗначениеАтрибута("AddressSettle");
		Параметры.КодыСистемыНалогообложения     = ЧтениеXML.ЗначениеАтрибута("TaxVariant");
		Если ПустаяСтрока(Параметры.КодыСистемыНалогообложения) Тогда
			Параметры.КодыСистемыНалогообложения = ЧтениеXML.ЗначениеАтрибута("TaxVarinat");
		КонецЕсли;
		Параметры.ПризнакАвтономногоРежима       = ВРег(ЧтениеXML.ЗначениеАтрибута("OfflineMode")) = "TRUE";
		Параметры.ПризнакАвтоматическогоРежима   = ВРег(ЧтениеXML.ЗначениеАтрибута("AutomaticMode")) = "TRUE";
		Параметры.НомерАвтоматаДляАвтоматическогоРежима = ЧтениеXML.ЗначениеАтрибута("AutomaticNumber");
		Параметры.ПризнакРасчетовЗаУслуги        = ВРег(ЧтениеXML.ЗначениеАтрибута("ServiceSign")) = "TRUE";
		Параметры.ПризнакФормированияТолькоБСО   = ВРег(ЧтениеXML.ЗначениеАтрибута("BSOSing")) = "TRUE";
		Параметры.ПризнакРасчетовТолькоВИнтернет = ВРег(ЧтениеXML.ЗначениеАтрибута("CalcOnlineSign")) = "TRUE";
		Параметры.ПризнакШифрованиеДанных        = ВРег(ЧтениеXML.ЗначениеАтрибута("DataEncryption")) = "TRUE";
		Параметры.ОрганизацияОФДИНН          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("OFDVATIN"));
		Параметры.ОрганизацияОФДНазвание     = ЧтениеXML.ЗначениеАтрибута("OFDOrganizationName");
		Параметры.ЗаводскойНомерККТ          = СокрЛП(ЧтениеXML.ЗначениеАтрибута("KKTSerialNumber"));
		Параметры.ПризнакФискализации        = ВРег(ЧтениеXML.ЗначениеАтрибута("Fiscal")) = "TRUE";
		Параметры.ЗаводскойНомерФН           = СокрЛП(ЧтениеXML.ЗначениеАтрибута("FNSerialNumber"));
		Параметры.НомерДокументаФискализации = ЧтениеXML.ЗначениеАтрибута("DocumentNumber");
		Параметры.ДатаВремяФискализации      = ЧтениеXML.ЗначениеАтрибута("DateTime");
		// ФФД 1.0.5 & 1.1
		Параметры.МестоПроведенияРасчетов    = ЧтениеXML.ЗначениеАтрибута("PlaceSettle");
		Параметры.ПродажаПодакцизногоТовара  = ЧтениеXML.ЗначениеАтрибута("SaleExcisableGoods");
		Параметры.ПроведенияАзартныхИгр      = ЧтениеXML.ЗначениеАтрибута("SignOfGambling");
		Параметры.ПроведенияЛотерей          = ЧтениеXML.ЗначениеАтрибута("SignOfLottery");
		Параметры.ПризнакиАгента             = ЧтениеXML.ЗначениеАтрибута("SignOfAgent");
		Параметры.УстановкаПринтераВАвтомате = ЧтениеXML.ЗначениеАтрибута("PrinterAutomatic");
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметрыСостоянияСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметрыСменыИзXMLПакета(Данные, НомерСмены) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыНормализуемыхФискальныхДанных();
	Параметры.НомерСменыККТ = НомерСмены;
	
	Если Не ПустаяСтрока(Данные) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(Данные);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Если ЧтениеXML.Имя = "OutputParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				
				Параметры.ПревышеноВремяОжиданияОтветаОФД = ВРег(ЧтениеXML.ЗначениеАтрибута("OFDtimeout")) = "TRUE";
				Параметры.НеобходимаСтрочнаяЗаменаФН = ВРег(ЧтениеXML.ЗначениеАтрибута("UrgentReplacementFN")) = "TRUE";
				Параметры.ПамятьФНПереполнена        = ВРег(ЧтениеXML.ЗначениеАтрибута("MemoryOverflowFN")) = "TRUE";
				Параметры.РесурсФНИсчерпан           = ВРег(ЧтениеXML.ЗначениеАтрибута("ResourcesExhaustionFN")) = "TRUE";
				КоличествоНепереданныхФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter");
				Параметры.КоличествоНепереданныхФД    = ?(ПустаяСтрока(КоличествоНепереданныхФД), 0, Число(КоличествоНепереданныхФД));
				Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
				ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
				Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
					Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные) Экспорт
	
	Параметры = МенеджерОборудованияКлиентСервер.ПараметрыСостоянияККТ();
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ВыходныеПараметры, СуммаЧека, ШиринаСтроки = 32, НовыйФормат = Ложь, ВерсияФФД = 0) Экспорт
	
	ПозицииЧека  = ОбщиеПараметры.ПозицииЧека;
	ТаблицаОплат = ОбщиеПараметры.ТаблицаОплат;
	СуммаЧека = 0;
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
	Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5 
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		Если Не ПустаяСтрока(ОбщиеПараметры.ОтправительEmail) Тогда
			ЗаписьXML.ЗаписатьАтрибут("SenderEmail", XMLСтрока(ОбщиеПараметры.ОтправительEmail));
		КонецЕсли;
	КонецЕсли;
	
	// Email отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	КонецЕсли;
	// SMS отправляет средствами 1C
	Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
		ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	КонецЕсли;
		
	Если НовыйФормат Тогда
		
		Если ВерсияФФД > 0 И ОбщиеПараметры.Свойство("ПризнакАгента") И ОбщиеПараметры.ПризнакАгента <> Неопределено Тогда  // Атрибут с ФФД 1.0.5 
			ПризнакАгента = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаАгента(ОбщиеПараметры.ПризнакАгента);
			ЗаписьXML.ЗаписатьАтрибут("AgentSign", XMLСтрока(ПризнакАгента));
		КонецЕсли;
		
		ЗаписатьДанныеАгента(ЗаписьXML, ОбщиеПараметры.ДанныеАгента);
		ЗаписатьДанныеПоставщика(ЗаписьXML, ОбщиеПараметры.ДанныеПоставщика);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
					ЗаписьXML.ЗаписатьАтрибут("Quantity"         , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("PriceWithDiscount", XMLСтрока(ТекущаяПозиция.ЦенаСоСкидками));
					ЗаписьXML.ЗаписатьАтрибут("SumWithDiscount"  , XMLСтрока(ТекущаяПозиция.Сумма));
					ЗаписьXML.ЗаписатьАтрибут("DiscountSum"      , XMLСтрока(ТекущаяПозиция.СуммаСкидок));
					ЗаписьXML.ЗаписатьАтрибут("Department"       , XMLСтрока(ТекущаяПозиция.НомерСекции));
					
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						Если ТекущаяПозиция.СтавкаНДС = 118 Тогда
							ЗначениеСтавкаНДС = "18/118";
						ИначеЕсли ТекущаяПозиция.СтавкаНДС = 110 Тогда
							ЗначениеСтавкаНДС = "10/110";
						Иначе
							ЗначениеСтавкаНДС = ТекущаяПозиция.СтавкаНДС;
						КонецЕсли;
					Иначе
						ЗначениеСтавкаНДС = "none";
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьАтрибут("Tax", XMLСтрока(ЗначениеСтавкаНДС));
					
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И ТекущаяПозиция.ПризнакСпособаРасчета <> Неопределено Тогда
						ПризнакСпособаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаСпособаРасчета(ТекущаяПозиция.ПризнакСпособаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("SignMethodCalculation", XMLСтрока(ПризнакСпособаРасчета));
					КонецЕсли;
					Если ТекущаяПозиция.Свойство("ПризнакПредметаРасчета") И ТекущаяПозиция.ПризнакПредметаРасчета <> Неопределено Тогда
						ПризнакПредметаРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаПредметаРасчета(ТекущаяПозиция.ПризнакПредметаРасчета);
						ЗаписьXML.ЗаписатьАтрибут("SignCalculationObject", XMLСтрока(ПризнакПредметаРасчета));
					КонецЕсли;
					
					Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5
						ЗаписьXML.ЗаписатьАтрибут("TaxSum", XMLСтрока(ТекущаяПозиция.СуммаНДС));
						Если ВерсияФФД > 1 Тогда // Атрибуты с ФФД 1.1
							Если ТекущаяПозиция.Свойство("ПризнакАгентаПоПредметуРасчета") И ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета <> Неопределено Тогда
								ПризнакАгентаПоПредметуРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодПризнакаАгента(ТекущаяПозиция.ПризнакАгентаПоПредметуРасчета);
								ЗаписьXML.ЗаписатьАтрибут("SignSubjectCalculationAgent", XMLСтрока(ПризнакАгентаПоПредметуРасчета));
							КонецЕсли;
							Если ТекущаяПозиция.Свойство("ЕдиницаИзмеренияПредметаРасчета") И ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета <> Неопределено Тогда
								ЗаписьXML.ЗаписатьАтрибут("MeasurementUnit"   , XMLСтрока(ТекущаяПозиция.ЕдиницаИзмеренияПредметаРасчета));
							КонецЕсли;
							Если ТекущаяПозиция.Свойство("КодТоварнойНоменклатуры") И ТекущаяПозиция.КодТоварнойНоменклатуры <> Неопределено Тогда
								ЗаписьXML.ЗаписатьАтрибут("NomenclatureCode"   , XMLСтрока(ТекущаяПозиция.КодТоварнойНоменклатуры));
							КонецЕсли;
							
							ЗаписатьДанныеАгента(ЗаписьXML, ТекущаяПозиция.ДанныеАгента);
							ЗаписатьДанныеПоставщика(ЗаписьXML, ТекущаяПозиция.ДанныеПоставщика);
						КонецЕсли;
					КонецЕсли;
					
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
					
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
					
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			СуммаПредоставлением = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда
					СуммаПредоставлением = СуммаПредоставлением + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5
				ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличными));
				ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронными));
				ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(СуммаПостоплатой));
				ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(СуммаПредоплатой));
				ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(СуммаПредоставлением));
			Иначе
				ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(СуммаНаличными));
				ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(СуммаЭлектронными + СуммаПостоплатой + СуммаПредоплатой + СуммаПредоставлением));
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	Иначе
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Табличная часть
		Если ОбщиеПараметры.ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ОбщиеПараметры.ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ОбщиеПараметры.ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
					Наименование = ТекущаяПозиция.Наименование;
					Если ТекущаяПозиция.Свойство("ПризнакСпособаРасчета") И ТекущаяПозиция.ПризнакСпособаРасчета <> Неопределено Тогда
						Если НЕ ТекущаяПозиция.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой Тогда // Не отображаем для полной оплаты.
							Наименование = МенеджерОборудованияКлиентСервер.ПолучитьПризнакСпособаРасчетаДляПечати(ТекущаяПозиция.ПризнакСпособаРасчета) + " " + Наименование;
						КонецЕсли;
					КонецЕсли;
					ЗаписьXML.ЗаписатьАтрибут("Name"      , Наименование);
					ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
					ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
					ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
					ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
					Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
						ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
					КонецЕсли;
					ЗаписьXML.ЗаписатьКонецЭлемента();
					СуммаЧека = СуммаЧека + ТекущаяПозиция.Сумма;
				ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
					Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
						ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
					Иначе
						ТекстовыеСтроки = ТекущаяПозиция.Текст;
					КонецЕсли;
					Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
					Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
						ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
						ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
						ЗаписьXML.ЗаписатьКонецЭлемента();  
					КонецЦикла;
				ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
					ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
					ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		// Таблица оплат
		Если ТаблицаОплат <> Неопределено Тогда
			СуммаНаличными       = 0;
			СуммаЭлектронными    = 0;
			СуммаПостоплатой     = 0;
			СуммаПредоплатой     = 0;
			Для ИндексОплаты = 0 По ТаблицаОплат.Количество() - 1 Цикл
				Если ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
					СуммаЭлектронными = СуммаЭлектронными + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда
					СуммаПредоплатой = СуммаПредоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				ИначеЕсли ТаблицаОплат[ИндексОплаты].ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда
					СуммаПостоплатой = СуммаПостоплатой + ТаблицаОплат[ИндексОплаты].Сумма;
				Иначе
					СуммаНаличными = СуммаНаличными + ТаблицаОплат[ИндексОплаты].Сумма;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
			ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНаличными));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаЭлектронными));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(СуммаПостоплатой));
			ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(СуммаПредоплатой));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ВыходныеПараметры, НовыйФормат = Ложь, ВидовОплаты = 0, ВерсияФФД = 0) Экспорт
	
	ВидовОплаты = 0;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckCorrectionPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ТипРасчета = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаРасчетаДенежнымиСредствами(ОбщиеПараметры.ТипРасчета);
	СистемаНалогообложения = МенеджерОборудованияКлиентСервер.ПолучитьКодТипаСистемыНалогообложенияККТ(ОбщиеПараметры.СистемаНалогообложения);
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(ТипРасчета));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant" , XMLСтрока(СистемаНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("CashierName",  XMLСтрока(ОбщиеПараметры.Кассир));
	
	Если ВерсияФФД > 0 Тогда
		Если Не ПустаяСтрока(ОбщиеПараметры.КассирИНН) Тогда 
			ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", XMLСтрока(ОбщиеПараметры.КассирИНН));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("ТипКоррекции") И ОбщиеПараметры.ТипКоррекции <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("CorrectionType",  XMLСтрока(ОбщиеПараметры.ТипКоррекции));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("НаименованиеОснования") И ОбщиеПараметры.НаименованиеОснования <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("СorrectionBaseName",  XMLСтрока(ОбщиеПараметры.НаименованиеОснования));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("ДатаДокументаОснования") И ОбщиеПараметры.ДатаДокументаОснования <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("СorrectionBaseDate",  XMLСтрока(ОбщиеПараметры.ДатаДокументаОснования));
		КонецЕсли;
		Если ОбщиеПараметры.Свойство("НомерДокументаОснования") И ОбщиеПараметры.НомерДокументаОснования <> Неопределено Тогда
			ЗаписьXML.ЗаписатьАтрибут("СorrectionBaseNumber",  XMLСтрока(ОбщиеПараметры.НомерДокументаОснования));
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьАтрибут("Sum", XMLСтрока(ОбщиеПараметры.Сумма));
	
	Если НовыйФормат Тогда
		ЗаписьXML.ЗаписатьАтрибут("SumTAXNone", XMLСтрока(ОбщиеПараметры.СуммаБезНДС)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX0"   , XMLСтрока(ОбщиеПараметры.СуммаНДС0));
		ЗаписьXML.ЗаписатьАтрибут("SumTAX10"  , XMLСтрока(ОбщиеПараметры.СуммаНДС10)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX18"  , XMLСтрока(ОбщиеПараметры.СуммаНДС18)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX110" , XMLСтрока(ОбщиеПараметры.СуммаНДС110)); 
		ЗаписьXML.ЗаписатьАтрибут("SumTAX118" , XMLСтрока(ОбщиеПараметры.СуммаНДС118));
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Если НовыйФормат Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		Если ВерсияФФД > 0 Тогда // Атрибуты с ФФД 1.0.5
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты));
			ЗаписьXML.ЗаписатьАтрибут("Credit"           , XMLСтрока(ОбщиеПараметры.Постоплатой));
			ЗаписьXML.ЗаписатьАтрибут("AdvancePayment"   , XMLСтрока(ОбщиеПараметры.Предоплатой));
			ЗаписьXML.ЗаписатьАтрибут("CashProvision"    , XMLСтрока(ОбщиеПараметры.ВстречнымПредоставлением));
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("Cash"             , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
			ЗаписьXML.ЗаписатьАтрибут("ElectronicPayment", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты + ОбщиеПараметры.Постоплатой 
				+ ОбщиеПараметры.Предоплатой + ОбщиеПараметры.ВстречнымПредоставлением));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash"         , XMLСтрока(ОбщиеПараметры.НаличнаяОплата));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(ОбщиеПараметры.ЭлектроннаяОплаты));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(ОбщиеПараметры.Предоплатой));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(ОбщиеПараметры.Постоплатой));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ВидовОплаты = ВидовОплаты + ?(ОбщиеПараметры.НаличнаяОплата > 0, 1, 0) 
		+ ?(ОбщиеПараметры.ЭлектроннаяОплаты > 0, 1, 0) 
		+ ?(ОбщиеПараметры.Предоплатой > 0, 1, 0) 
		+ ?(ОбщиеПараметры.Постоплатой > 0, 1, 0) 
		+ ?(ОбщиеПараметры.ВстречнымПредоставлением > 0, 1, 0);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция ПолучитьXMLПакетДляТекста(СтрокаТекста) Экспорт
	
	Результат = Новый Массив();
	
	// Пакетная печать чека. Подготовка пакета.
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	                              
	Если НЕ ПустаяСтрока(СтрокаТекста) Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(СтрокаТекста) Цикл
			
			ВыделеннаяСтрока = СтрПолучитьСтроку(СтрокаТекста, НомерСтроки);
			
			Если (Найти(ВыделеннаяСтрока, "[отрезка]") > 0)
				 Или (Найти(ВыделеннаяСтрока, "[cut]") > 0) Тогда
				 
				// Завершаем запись текущего пакета. 
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				Результат.Добавить(Текст);
				
				// Новый пакет.
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
				
			ИначеЕсли (Найти(ВыделеннаяСтрока, "|ШтрихКод|") > 0) Тогда
				ВыделеннаяСтрока = Сред(ВыделеннаяСтрока, СтрДлина("|ШтрихКод|") + 1);
				ВремТипШтрихкода = Сред(ВыделеннаяСтрока, 1, Найти(ВыделеннаяСтрока, "|") - 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока, Найти(ВыделеннаяСтрока, "|") + 1); 
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ВремТипШтрихкода));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	Результат.Добавить(Текст);
	
	Возврат Результат;

КонецФункции   

Функция ПолучитьXMLПакетДляТекстовогоДокумента(НефискальныеДокументы, ВыходныеПараметры, ШиринаСтроки = 32) Экспорт
	
	Результат = Новый Массив();
	
	Для Каждого ПозицииЧека Из НефискальныеДокументы Цикл
		
		// Пакетная печать чека. Подготовка пакета.
		ЗаписьXML = Новый ЗаписьXML();
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
		
		// Табличная часть
		Если ПозицииЧека <> Неопределено Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			Для ИндексМассива = 0 По ПозицииЧека.Количество() - 1 Цикл
				ТекущаяПозиция = ПозицииЧека[ИндексМассива];
				Если ТекущаяПозиция.Свойство("ФискальнаяСтрока") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
						ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ТекущаяПозиция.Наименование));
						ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ТекущаяПозиция.Количество));
						ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ТекущаяПозиция.Цена));
						ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ТекущаяПозиция.Сумма));
						ЗаписьXML.ЗаписатьАтрибут("Department", XMLСтрока(ТекущаяПозиция.НомерСекции));
						Если НЕ ПустаяСтрока(ТекущаяПозиция.СтавкаНДС) Тогда 
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , XMLСтрока(ТекущаяПозиция.СтавкаНДС));
						Иначе
							ЗаписьXML.ЗаписатьАтрибут("Tax"   , "none");
						КонецЕсли;
						ЗаписьXML.ЗаписатьКонецЭлемента();
					ИначеЕсли ТекущаяПозиция.Свойство("ТекстоваяСтрока") Тогда
						Если ТекущаяПозиция.Свойство("ПереносСтроки") И ТекущаяПозиция.ПереносСтроки Тогда 
							ТекстовыеСтроки = МенеджерОборудованияКлиентСервер.ПостроитьПолеПереносом(ТекущаяПозиция.Текст, ШиринаСтроки);
						Иначе
							ТекстовыеСтроки = ТекущаяПозиция.Текст;
						КонецЕсли;
						Выравнивание = ?(ТекущаяПозиция.Свойство("Выравнивание"),  ТекущаяПозиция.Выравнивание, "Лево"); 
						Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстовыеСтроки) Цикл
							ВыделеннаяСтрока = СтрПолучитьСтроку(ТекстовыеСтроки, НомерСтроки);
							ВыделеннаяСтрока = МенеджерОборудованияКлиентСервер.ВыравнитьПоле(ВыделеннаяСтрока, ШиринаСтроки, Выравнивание); 
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ВыделеннаяСтрока));
							ЗаписьXML.ЗаписатьКонецЭлемента();  
						КонецЦикла;
					ИначеЕсли ТекущаяПозиция.Свойство("ШтрихКод") Тогда
						ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
						ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТекущаяПозиция.ТипШтрихкода));
						ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ТекущаяПозиция.ШтрихКод));
						ЗаписьXML.ЗаписатьКонецЭлемента();
					Иначе
						ТекстОшибки = НСтр("ru='Не определен тип позиции чека.'"); 
						ВыходныеПараметры.Очистить();
						ВыходныеПараметры.Вставить("ТекстОшибки", ТекстОшибки);
						Результат = Ложь;  
						Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		Текст = ЗаписьXML.Закрыть();
		Результат.Добавить(Текст);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции  

Функция ПолучитьXMLПакетДляОперации(ОбщиеПараметры) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InputParameters");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	ЗаписьXML.ЗаписатьАтрибут("CashierName", ?(ОбщиеПараметры.Свойство("Кассир"), XMLСтрока(ОбщиеПараметры.Кассир), НСтр("ru='Администратор'")));
	ЗаписьXML.ЗаписатьАтрибут("CashierVATIN", ?(ОбщиеПараметры.Свойство("КассирИНН"), XMLСтрока(ОбщиеПараметры.КассирИНН), ""));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции   

Функция СформироватьТаблицуПараметровДляОперацииФН(СтруктураПараметров) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	// ФФД 1.0.0
	ЗаписьXML.ЗаписатьАтрибут("KKTNumber"          , XMLСтрока(СтруктураПараметров.РегистрационныйНомерККТ));
	ЗаписьXML.ЗаписатьАтрибут("OFDVATIN"           , XMLСтрока(СтруктураПараметров.ОрганизацияОФДИНН));
	ЗаписьXML.ЗаписатьАтрибут("OFDOrganizationName", XMLСтрока(СтруктураПараметров.ОрганизацияОФДНазвание));
	ЗаписьXML.ЗаписатьАтрибут("OrganizationName"   , XMLСтрока(СтруктураПараметров.ОрганизацияНазвание));
	ЗаписьXML.ЗаписатьАтрибут("VATIN"              , XMLСтрока(СтруктураПараметров.ОрганизацияИНН));
	ЗаписьXML.ЗаписатьАтрибут("AddressSettle"      , XMLСтрока(СтруктураПараметров.АдресУстановкиККТ));
	ЗаписьXML.ЗаписатьАтрибут("TaxVariant"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("TaxVarinat"         , XMLСтрока(СтруктураПараметров.КодыСистемыНалогообложения));
	ЗаписьXML.ЗаписатьАтрибут("OfflineMode"        , XMLСтрока(СтруктураПараметров.ПризнакАвтономногоРежима));
	ЗаписьXML.ЗаписатьАтрибут("DataEncryption"     , XMLСтрока(СтруктураПараметров.ПризнакШифрованиеДанных));
	ЗаписьXML.ЗаписатьАтрибут("ServiceSign"        , XMLСтрока(СтруктураПараметров.ПризнакРасчетовЗаУслуги));
	ЗаписьXML.ЗаписатьАтрибут("BSOSing"            , XMLСтрока(СтруктураПараметров.ПризнакФормированияТолькоБСО));
	ЗаписьXML.ЗаписатьАтрибут("CalcOnlineSign"     , XMLСтрока(СтруктураПараметров.ПризнакРасчетовТолькоВИнтернет));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticMode"      , XMLСтрока(СтруктураПараметров.ПризнакАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("AutomaticNumber"    , XMLСтрока(СтруктураПараметров.НомерАвтоматаДляАвтоматическогоРежима));
	ЗаписьXML.ЗаписатьАтрибут("ReasonCode"         , XMLСтрока(СтруктураПараметров.КодПричиныПеререгистрации));
	// ФФД 1.0.5 & 1.1
	ЗаписьXML.ЗаписатьАтрибут("PlaceSettle"        , XMLСтрока(СтруктураПараметров.МестоПроведенияРасчетов));
	ЗаписьXML.ЗаписатьАтрибут("SaleExcisableGoods" , XMLСтрока(СтруктураПараметров.ПродажаПодакцизногоТовара));
	ЗаписьXML.ЗаписатьАтрибут("SignOfGambling"     , XMLСтрока(СтруктураПараметров.ПроведенияАзартныхИгр));
	ЗаписьXML.ЗаписатьАтрибут("SignOfLottery"      , XMLСтрока(СтруктураПараметров.ПроведенияЛотерей));
	ЗаписьXML.ЗаписатьАтрибут("SignOfAgent"        , XMLСтрока(СтруктураПараметров.ПризнакиАгента));
	ЗаписьXML.ЗаписатьАтрибут("PrinterAutomatic"   , XMLСтрока(СтруктураПараметров.УстановкаПринтераВАвтомате));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Процедура ЗаписатьДанныеАгента(ЗаписьXML, ДанныеАгента)
	
	Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Операция) Тогда
		ЗаписьXML.ЗаписатьАтрибут("PayingAgentOperation" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Операция));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ПлатежныйАгент.Телефон) Тогда
		ЗаписьXML.ЗаписатьАтрибут("PayingAgentPhone" , XMLСтрока(ДанныеАгента.ПлатежныйАгент.Телефон));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефон) Тогда
		ЗаписьXML.ЗаписатьАтрибут("ReceivePaymentsOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПоПриемуПлатежей.Телефо));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Телефон) Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorPhone" , XMLСтрока(ДанныеАгента.ОператорПеревода.Телефон));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Наименование) Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorName" , XMLСтрока(ДанныеАгента.ОператорПеревода.Наименование));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.Адрес) Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorAddress" , XMLСтрока(ДанныеАгента.ОператорПеревода.Адрес));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеАгента.ОператорПеревода.ИНН) Тогда
		ЗаписьXML.ЗаписатьАтрибут("MoneyTransferOperatorVATIN" , XMLСтрока(ДанныеАгента.ОператорПеревода.ИНН));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеПоставщика(ЗаписьXML, ДанныеПоставщика)
	
	Если Не ПустаяСтрока(ДанныеПоставщика.Телефон) Тогда
		ЗаписьXML.ЗаписатьАтрибут("PurveyorPhone" , XMLСтрока(ДанныеПоставщика.Телефон));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеПоставщика.Наименование) Тогда
		ЗаписьXML.ЗаписатьАтрибут("PurveyorName" , XMLСтрока(ДанныеПоставщика.Наименование));
	КонецЕсли;
	Если Не ПустаяСтрока(ДанныеПоставщика.ИНН) Тогда
		ЗаписьXML.ЗаписатьАтрибут("PurveyorVATIN" , XMLСтрока(ДанныеПоставщика.ИНН));
	КонецЕсли;
	
КонецПроцедуры

// Подготовка данных для фискализации чеков

Процедура ПодготовитьДанныеДляФискализацииЧека(Ссылка, ОбщиеПараметры, ВерсияФормата, ТО, КомуОтКого, Основание) Экспорт
	
	Если ОбщиеПараметры = Неопределено Тогда
		ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	КонецЕсли;
	ОбщиеПараметры.Вставить("ВерсияФормата", ВерсияФормата);
	ОбщиеПараметры.Вставить("МетаданныеОбъекта", Ссылка.Метаданные());
	
	ОписаниеПКС = Неопределено;
	Если ОбщиеПараметры.Свойство("ОписаниеПКС", ОписаниеПКС) Тогда
		ОбщиеПараметры.НомерСмены = КассовыеСменыВызовСервера.ТекущийНомерСмены(ОписаниеПКС);
		ОбщиеПараметры.НомерЧека = КассовыеСменыВызовСервера.ТекущийНомерЧека(ОписаниеПКС) + 1;
	КонецЕсли;
	
	ОрганизацияЧека = Ссылка.Организация;
	// Шапка
	ОбщиеПараметры.ДокументОснование = Ссылка;
	
	Если ОбщиеПараметры.МетаданныеОбъекта.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		ВидОперации = Ссылка.ВидОперации;
	Иначе
		ВидОперации = "";
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком Тогда
		ИмяТипаРасчета = "ВозвратРасходаДенежныхСредств";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю ИЛИ 
		ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю Тогда
		ИмяТипаРасчета = "ВозвратДенежныхСредств";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		// РКО - все остальные виды операций
		ИмяТипаРасчета = "РасходДенежныхСредств";
	Иначе
		// РТУ и ПКО, ОПК - все остальные виды операций
		ИмяТипаРасчета = "ПриходДенежныхСредств";
	КонецЕсли;
	
	ОбщиеПараметры.ПокупательEmail = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "АдресЭП"));
	АдресЭПЗадан = Не ПустаяСтрока(ОбщиеПараметры.ПокупательEmail);
	
	ОбщиеПараметры.ТипРасчета = ПредопределенноеЗначение("Перечисление.ТипыРасчетаДенежнымиСредствами."+ИмяТипаРасчета);
	ОбщиеПараметры.Кассир = Ссылка.Ответственный.Наименование;
	ОбщиеПараметры.Электронно = глЗначениеПеременной("НеПечататьФискальныйЧекПриОтправкеЭлектронного") И АдресЭПЗадан;
	ОбщиеПараметры.Отправляет1СSMS = Ложь;
	ОбщиеПараметры.Отправляет1СEmail = Не глЗначениеПеременной("ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД") И АдресЭПЗадан;
	ОбщиеПараметры.ОрганизацияНазвание = ОрганизацияЧека.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = ОрганизацияЧека.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = ОрганизацияЧека.КПП;
	ОбщиеПараметры.СистемаНалогообложения = МенеджерОборудованияКлиентСервер.СистемаНалогообложения
		(ОрганизацияЧека, Ссылка.Дата);
	ОбщиеПараметры.СпособФорматоЛогическогоКонтроля = ТО.СпособФЛК;
	ОбщиеПараметры.ДопустимоеРасхождениеФорматоЛогическогоКонтроля = ТО.ДопустимоеРасхождениеФЛК;
	
	ЭтоТоварныйДокумент = ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") ИЛИ 
		ТипЗнч(Ссылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя");
		
	Если ЭтоТоварныйДокумент Тогда
		
		Если Ссылка.ВалютаДокумента = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
			КурсОплаты = 1;
		Иначе
			КурсОплаты = Ссылка.КурсВзаиморасчетов / Ссылка.КратностьВзаиморасчетов;
		КонецЕсли;
		
		ЗаполнитьОплатыДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты);
		
		ЗаполнитьТоварныеПозицииДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты);
		
	Иначе
		
		ЗаполнитьОплатыДляПлатежногоДокумента(Ссылка, ОбщиеПараметры);
		
		РасчетыСПокупателем = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ОплатаПокупателя"))
			ИЛИ (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю"))
			ИЛИ (ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой"));
		ЭтоВозврат = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю"))
			ИЛИ (ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		
		ЗаполнитьТоварныеПозицииДляПлатежногоДокумента(Ссылка, ОбщиеПараметры, 
			РасчетыСПокупателем, ЭтоВозврат, КомуОтКого, Основание);
		
	КонецЕсли;
	
	ОбщиеПараметры.Удалить("МетаданныеОбъекта");
	МенеджерОборудованияКлиентСервер.ПровестиФорматоЛогическийКонтроль(ОбщиеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьОплатыДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты)

	ДокументыРасчетов = Ссылка.ДокументыРасчетовСКонтрагентом;
	Если ДокументыРасчетов.Количество() = 0 Тогда
		
		ОбщиеПараметры.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты);
		
		СтрокаОплаты = Новый Структура();
		СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
		СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
		СтрокаОплаты.Вставить("Сумма", Ссылка.СуммаДокумента);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
		
	Иначе
		
		СуммаЭлектронными = 0;
		СуммаНаличными = 0;
		СуммаДругое = 0;
		Для Каждого СтрокаРасчетныйДокумент Из ДокументыРасчетов Цикл
			
			Если ТипЗнч(СтрокаРасчетныйДокумент.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
				СуммаЭлектронными = СуммаЭлектронными + СтрокаРасчетныйДокумент.СуммаВзаиморасчетов * КурсОплаты;
			ИначеЕсли ТипЗнч(СтрокаРасчетныйДокумент.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") ИЛИ 
				ТипЗнч(СтрокаРасчетныйДокумент.ДокументРасчетовСКонтрагентом) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СуммаНаличными = СуммаНаличными + СтрокаРасчетныйДокумент.СуммаВзаиморасчетов * КурсОплаты;
			Иначе
				СуммаДругое = СуммаДругое + СтрокаРасчетныйДокумент.СуммаВзаиморасчетов * КурсОплаты;
			КонецЕсли;
			
		КонецЦикла;
		
		СуммаОплаты = СуммаЭлектронными + СуммаНаличными + СуммаДругое;
		Если СуммаОплаты >= Ссылка.СуммаДокумента Тогда
			
			ОбщиеПараметры.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванса'"));
			СтрокаОплаты.Вставить("Сумма", Ссылка.СуммаДокумента);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		Иначе
			
			ОбщиеПараметры.Вставить("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой);
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Предоплата);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Зачет аванса'"));
			СтрокаОплаты.Вставить("Сумма", СуммаОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
			СтрокаОплаты = Новый Структура();
			СтрокаОплаты.Вставить("ТипОплаты", Перечисления.ТипыОплатыККТ.Постоплата);
			СтрокаОплаты.Вставить("Наименование", НСтр("ru = 'Постоплата'"));
			СтрокаОплаты.Вставить("Сумма", Ссылка.СуммаДокумента - СуммаОплаты);
			ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТоварныеПозицииДляТоварногоДокумента(Ссылка, ОбщиеПараметры, КурсОплаты)
	
	ИмяДокумента = ОбщиеПараметры.МетаданныеОбъекта.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Документы[ИмяДокумента].ТекстЗапросаТоварныеПозицииЧека();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		СтрокаЧека.Количество = Выборка.Количество;
		СтрокаЧека.Цена = Окр(Выборка.Цена * КурсОплаты, 2);
		СтрокаЧека.ЦенаСоСкидками = Окр(Выборка.Сумма * КурсОплаты / Выборка.Количество, 2);
		СтрокаЧека.Сумма = Окр(Выборка.Сумма * КурсОплаты, 2);
		СтрокаЧека.Наименование = СокрЛП(Выборка.Наименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(Выборка) + 
		?(ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения)," "+Строка(Выборка.ЕдиницаИзмерения),"");
		СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(Выборка.СтавкаНДС);
		СтрокаЧека.СуммаНДС = Выборка.СуммаНДС;
		// Дополнительные реквизиты начиная с ФФД 1.1
		СтрокаЧека.ПризнакСпособаРасчета = ОбщиеПараметры.ПризнакСпособаРасчета;
		СтрокаЧека.ПризнакПредметаРасчета = МенеджерОборудованияВызовСервера.ОпределитьПризнакПредметаРасчета(Выборка.Номенклатура);
		СтрокаЧека.НомерСекции = Выборка.НомерСекции;
		
		ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОплатыДляПлатежногоДокумента(Ссылка, ОбщиеПараметры)
	
	СуммаОплаты = Ссылка.СуммаДокумента;
	Если СуммаОплаты <> 0 И СуммаОплаты <> Неопределено Тогда
		СтрокаОплаты = Новый Структура();
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОплатаОтПокупателяПлатежнойКартой") Тогда
			СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Электронно"));
			СтрокаОплаты.Вставить("Наименование", "Платежная карта");
		Иначе
			СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Наличные"));
			СтрокаОплаты.Вставить("Наименование", "Наличная оплата");
		КонецЕсли;
		СтрокаОплаты.Вставить("Сумма", СуммаОплаты);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТоварныеПозицииДляПлатежногоДокумента(Ссылка, ОбщиеПараметры, РасчетыСПокупателем, ЭтоВозврат, КомуОтКого, Основание)
	
	Если ЭтоВозврат Тогда
		Заголовок = "Выдать: ";
	Иначе
		Заголовок = "Принято от: ";
	КонецЕсли;
	НаименованиеПредметаРасчета = Заголовок + КомуОтКого + " Основание: " + Основание;
	Если Не РасчетыСПокупателем Тогда
		Для Каждого СтрокаПлатежа Из Ссылка.РасшифровкаПлатежа Цикл
			ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаПлатежа, НаименованиеПредметаРасчета);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	// Заполнение для случая расчетов с покупателем
	ВалютаРеглУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	Запрос = ЗапросДанныеЧека(Ссылка, ВалютаРеглУчета);
	
	Результат = Запрос.ВыполнитьПакет();
	ДеревоСделок = Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ОбщиеПараметры.ВерсияФормата = "1.0" Тогда
		ЗаполнитьПоСтарому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета);
	Иначе
		ЗаполнитьПоНовому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСтарому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета)
	Для Каждого СтрокаСделки Из ДеревоСделок.Строки Цикл
		Для Каждого СтрокаСтавки Из СтрокаСделки.Строки Цикл
			Если СтрокаСтавки.ВалютаСделки = ВалютаРеглУчета Тогда
				КурсОплаты = 1;
				ИмяРеквизитаДляСравнения = "СуммаПлатежа";
			Иначе
				КурсОплаты = Окр(СтрокаСтавки.СуммаПлатежа / СтрокаСтавки.СуммаВзаиморасчетов, 8);
				ИмяРеквизитаДляСравнения = "СуммаВзаиморасчетов";
			КонецЕсли;
			Если СтрокаСтавки.СуммаТовара = СтрокаСтавки[ИмяРеквизитаДляСравнения] Тогда
				Для Каждого СтрокаПозиции Из СтрокаСтавки.Строки Цикл
					ЗаполнитьТоварнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, КурсОплаты);
				КонецЦикла;
			Иначе
				ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаСтавки, НаименованиеПредметаРасчета);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПоНовому(ОбщиеПараметры, ДеревоСделок, НаименованиеПредметаРасчета, ВалютаРеглУчета)
	Для Каждого СтрокаСделки Из ДеревоСделок.Строки Цикл
		Для Каждого СтрокаСтавки Из СтрокаСделки.Строки Цикл
			Если СтрокаСтавки.ВалютаСделки = ВалютаРеглУчета Тогда
				КурсОплаты = 1;
			Иначе
				КурсОплаты = Окр(СтрокаСтавки.СуммаПлатежа / СтрокаСтавки.СуммаВзаиморасчетов, 8);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаСтавки.Сделка) Тогда
				ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаСтавки, НаименованиеПредметаРасчета);
			Иначе
				// детальная печать
				Для Каждого СтрокаПозиции Из СтрокаСтавки.Строки Цикл
					Если ЗначениеЗаполнено(СтрокаПозиции.Номенклатура) Тогда
						ЗаполнитьТоварнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, КурсОплаты);
					Иначе
						// есть платеж по сделке и ставке, но нет товарных позиций по такой ставке
						// излишек денег, нужно добавить авансовую товарную позицию
						ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, НаименованиеПредметаРасчета);
					КонецЕсли;
				КонецЦикла;
				
				СуммаТовара = Окр(СтрокаСтавки.СуммаТовара * КурсОплаты,2);
				Если СуммаТовара <> 0 Тогда
					Если СтрокаСтавки.СуммаПлатежа > СуммаТовара Тогда
						// излишек денег по сделке и ставке, нужно добавить авансовую товарную позицию
						ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, НаименованиеПредметаРасчета, 
							СтрокаСтавки.СуммаПлатежа - СуммаТовара);
					ИначеЕсли СтрокаСтавки.СуммаПлатежа < СуммаТовара Тогда
						// недостаток денег по сделке и ставке, нужно добавить оплату кредитом
						СтрокаОплаты = Новый Структура();
						СтрокаОплаты.Вставить("ТипОплаты", ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ.Постоплата"));
						СтрокаОплаты.Вставить("Наименование", "Постоплата (кредит)");
						СтрокаОплаты.Вставить("Сумма", СуммаТовара - СтрокаСтавки.СуммаПлатежа);
						ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЗапросДанныеЧека(Ссылка, ВалютаРеглУчета)
	
	Запрос = Новый Запрос;
	
	ИмяДокумента = Ссылка.Метаданные().Имя;
	
	ДопустимыеТипыДР = МенеджерОборудованияКлиентСервер.ДопустимыеТипыДокументаРасчетов();
	ДопустимыеТипыСД = МенеджерОборудованияКлиентСервер.ДопустимыеТипыСделки();
	ДопустимыеТипыДО = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипыДО, ДопустимыеТипыДР);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипыДО, ДопустимыеТипыСД);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПДРП.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ПДРП.ДокументРасчетовСКонтрагентом <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.ДокументРасчетовСКонтрагентом) В (&ДопустимыеТипыДР)
	               |				И НЕ ПДРП.ДокументРасчетовСКонтрагентом В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.ДокументРасчетовСКонтрагентом
	               |		КОГДА ПДРП.Сделка <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Сделка) В (&ДопустимыеТипыСД)
	               |				И НЕ ПДРП.Сделка В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Сделка
	               |		КОГДА ПДРП.Ссылка.ДокументОснование <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Ссылка.ДокументОснование) В (&ДопустимыеТипыДО)
	               |				И НЕ ПДРП.Ссылка.ДокументОснование В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Ссылка.ДокументОснование
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК Сделка,
	               |	ПДРП.СтавкаНДС КАК СтавкаНДС,
	               |	СУММА(ПДРП.СуммаПлатежа) КАК СуммаПлатежа,
	               |	СУММА(ПДРП.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	               |	СУММА(ПДРП.СуммаНДС) КАК СуммаНДС,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ПДРП.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	               |				ТОГДА 18
	               |			КОГДА ПДРП.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	               |				ТОГДА 10
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ПроцентНДС,
	               |	ПДРП.ПризнакСпособаРасчета
	               |ПОМЕСТИТЬ ТаблицаПлатежей
	               |ИЗ
	               |	Документ."+ИмяДокумента+".РасшифровкаПлатежа КАК ПДРП
	               |ГДЕ
	               |	ПДРП.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПДРП.Ссылка,
	               |	ПДРП.СтавкаНДС,
	               |	ПДРП.ПризнакСпособаРасчета,
	               |	ВЫБОР
	               |		КОГДА ПДРП.ДокументРасчетовСКонтрагентом <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.ДокументРасчетовСКонтрагентом) В (&ДопустимыеТипыДР)
	               |				И НЕ ПДРП.ДокументРасчетовСКонтрагентом В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.ДокументРасчетовСКонтрагентом
	               |		КОГДА ПДРП.Сделка <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Сделка) В (&ДопустимыеТипыСД)
	               |				И НЕ ПДРП.Сделка В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Сделка
	               |		КОГДА ПДРП.Ссылка.ДокументОснование <> НЕОПРЕДЕЛЕНО
	               |				И ТИПЗНАЧЕНИЯ(ПДРП.Ссылка.ДокументОснование) В (&ДопустимыеТипыДО)
	               |				И НЕ ПДРП.Ссылка.ДокументОснование В (&ПустыеСсылки)
	               |			ТОГДА ПДРП.Ссылка.ДокументОснование
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ
				   |;
				   |";
	ИмяВТ = "НоменклатураСделок";
	Для Каждого ОписаниеТипа Из ДопустимыеТипыДО Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеТипа);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТЧ Из МенеджерОборудованияКлиентСервер.ДопустимыеТабличныеЧасти() Цикл
			Если ОбъектМетаданных.ТабличныеЧасти.Найти(ТЧ) <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + ТекстаЗапросаТЧпоВидуДокументов(ОбъектМетаданных.Имя, ТЧ, ИмяВТ);
				ИмяВТ = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса +
				   "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка КАК Сделка,
	               |	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
				   |	ЕСТЬNULL(НоменклатураСделок.ВалютаСделки, &ВалютаРеглУчета) КАК ВалютаСделки,
	               |	НоменклатураСделок.Номенклатура КАК Номенклатура,
				   |	НоменклатураСделок.Услуга КАК Услуга,
	               |	НоменклатураСделок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	НоменклатураСделок.Характеристика КАК Характеристика,
	               |	НоменклатураСделок.Серия КАК Серия,
	               |	ВЫБОР
	               |		КОГДА НоменклатураСделок.Количество = 0
	               |				И ЕСТЬNULL(НоменклатураСделок.Номенклатура.Услуга, ИСТИНА)
	               |			ТОГДА 1
	               |		ИНАЧЕ ЕСТЬNULL(НоменклатураСделок.Количество, 0)
	               |	КОНЕЦ КАК Количество,
	               |	ВЫРАЗИТЬ(ВЫБОР
	               |			КОГДА НоменклатураСделок.СуммаВключаетНДС
	               |				ТОГДА НоменклатураСделок.Цена
	               |			ИНАЧЕ НоменклатураСделок.Цена + НоменклатураСделок.Цена * НоменклатураСделок.ПроцентНДС / 100
	               |		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	               |	ВЫБОР
	               |		КОГДА НоменклатураСделок.СуммаВключаетНДС
	               |			ТОГДА ЕСТЬNULL(НоменклатураСделок.Сумма, 0)
	               |		ИНАЧЕ ЕСТЬNULL(НоменклатураСделок.Сумма, 0) + ЕСТЬNULL(НоменклатураСделок.СуммаНДС, 0)
	               |	КОНЕЦ КАК СуммаТовара,
	               |	ЕСТЬNULL(НоменклатураСделок.СуммаНДС, 0) КАК СуммаНДСТовара,
	               |	ТаблицаПлатежей.СуммаПлатежа КАК СуммаПлатежа,
				   |	ТаблицаПлатежей.СуммаНДС КАК СуммаНДС,
	               |	ТаблицаПлатежей.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	&СтрокаВыборкиПоляСодержания КАК Наименование,
				   |	НоменклатураСделок.НомерСекции КАК НомерСекции,
				   |	ТаблицаПлатежей.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
	               |ИЗ
				   |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |	ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСделок КАК НоменклатураСделок
				   |		ПО ТаблицаПлатежей.Сделка = НоменклатураСделок.Сделка
				   |			И ТаблицаПлатежей.СтавкаНДС = НоменклатураСделок.СтавкаНДС
				   |	УПОРЯДОЧИТЬ ПО
				   |	Сделка,
				   |	СтавкаНДС
	               |ИТОГИ
	               |	СУММА(СуммаТовара),
				   |	СУММА(СуммаНДСТовара),
	               |	МАКСИМУМ(СуммаПлатежа),
				   |	МАКСИМУМ(СуммаНДС),
	               |	МАКСИМУМ(СуммаВзаиморасчетов),
				   |	МАКСИМУМ(ВалютаСделки),
				   |	МАКСИМУМ(ПризнакСпособаРасчета)
	               |ПО
	               |	Сделка,
	               |	СтавкаНДС";
				   
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("НоменклатураСделок");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтрокаВыборкиПоляСодержания", СтрокаВыборкиПоляСодержания);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("ДопустимыеТипыДР", ДопустимыеТипыДР);
	Запрос.УстановитьПараметр("ДопустимыеТипыСД", ДопустимыеТипыСД);
	Запрос.УстановитьПараметр("ДопустимыеТипыДО", ДопустимыеТипыДО);
	Запрос.УстановитьПараметр("ПустыеСсылки", ПустыеСсылки(ДопустимыеТипыДО));

	Возврат Запрос;
	
КонецФункции

Функция ТекстаЗапросаТЧпоВидуДокументов(ИмяДокумента, ИмяТЧ, ИмяВТ = "")
	
	ПолеНомерСекции = "
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Ссылка.СкладГруппа) = ТИП(Справочник.Склады)
	|				И ТаблицаНоменклатуры.Ссылка.СкладГруппа <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА ТаблицаНоменклатуры.Ссылка.СкладГруппа.НомерСекции
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	// Рассматриваем только два варианта: "Товары" и "Услуги"
	Если ИмяТЧ = "Товары" Тогда
		ПолеЕдиницаИзмерения = "ТаблицаНоменклатуры.ЕдиницаИзмерения";
		ПолеХарактеристика = "ТаблицаНоменклатуры.ХарактеристикаНоменклатуры";
		Если Метаданные.Документы[ИмяДокумента].ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти("СерияНоменклатуры") <> Неопределено Тогда
			ПолеСерия = "ТаблицаНоменклатуры.СерияНоменклатуры";
		Иначе
			ПолеСерия = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		КонецЕсли;
		ПолеСодержание = """""";
		Если ИмяДокумента = "СчетНаОплатуПокупателю" Тогда
			ПолеНомерСекции = СтрЗаменить(ПолеНомерСекции, "СкладГруппа", "Склад");
		ИначеЕсли ИмяДокумента <> "ЗаказПокупателя" Тогда
			ПолеНомерСекции = "
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатуры.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			ТОГДА ТаблицаНоменклатуры.Склад.НомерСекции
			|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаНоменклатуры.Ссылка.СкладОрдер) = ТИП(Справочник.Склады)
			|				И ТаблицаНоменклатуры.Ссылка.СкладОрдер <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|			ТОГДА ТаблицаНоменклатуры.Ссылка.СкладОрдер.НомерСекции
			|		ИНАЧЕ 0
			|	КОНЕЦ";
			Если ИмяДокумента = "РеализацияТоваровУслуг" Тогда
				ПолеНомерСекции = СтрЗаменить(ПолеНомерСекции, "СкладОрдер", "Склад");
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПолеЕдиницаИзмерения = "ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)";
		ПолеХарактеристика = "ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
		ПолеСерия = "ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		ПолеСодержание = "ТаблицаНоменклатуры.Содержание";
		Если ИмяДокумента <> "ЗаказПокупателя" Тогда
			ПолеНомерСекции = СтрЗаменить(ПолеНомерСекции, "СкладГруппа", "Склад");
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяВТ) Тогда
		ТекстВТ = Символы.ПС + " ПОМЕСТИТЬ " + ИмяВТ;
		ТекстОбъединения = "";
	Иначе
		ТекстВТ = "";
		ТекстОбъединения = "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |";
		
	КонецЕсли;
	ТекстЗапроса = ТекстОбъединения + "
	               |ВЫБРАТЬ
	               |	ТаблицаПлатежей.Сделка,
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
				   |	ТаблицаНоменклатуры.Номенклатура.Услуга КАК Услуга,
	               |	ТаблицаНоменклатуры.Количество КАК Количество,
	               |	ТаблицаНоменклатуры.Цена КАК Цена,
	               |	ТаблицаНоменклатуры.Сумма КАК Сумма,
	               |	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
				   |	ТаблицаНоменклатуры.Ссылка.ВалютаДокумента КАК ВалютаСделки,
	               |	ТаблицаНоменклатуры.СуммаНДС КАК СуммаНДС,
	               |	"+ПолеЕдиницаИзмерения+" КАК ЕдиницаИзмерения,
	               |	ТаблицаНоменклатуры.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ТаблицаПлатежей.СуммаПлатежа КАК СуммаПлатежа,
	               |	ТаблицаПлатежей.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	"+ПолеХарактеристика+" КАК Характеристика,
	               |	"+ПолеСерия+" КАК Серия,
	               |	"+ПолеСодержание+" КАК Содержание,
				   |	"+ПолеНомерСекции+" КАК НомерСекции,
	               |	ТаблицаПлатежей.ПроцентНДС КАК ПроцентНДС"+
				   ТекстВТ+"
	               |ИЗ
	               |	ТаблицаПлатежей КАК ТаблицаПлатежей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ИмяДокумента+"."+ИмяТЧ+" КАК ТаблицаНоменклатуры
	               |		ПО ТаблицаПлатежей.Сделка = ТаблицаНоменклатуры.Ссылка
	               |			И ТаблицаПлатежей.СтавкаНДС = ТаблицаНоменклатуры.СтавкаНДС
				   |";
				   
	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗаполнитьТоварнуюСтрокуЧека(ОбщиеПараметры, СтрокаПозиции, КурсОплаты)
	
	СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	
	СтрокаЧека.Количество = СтрокаПозиции.Количество;
	СтрокаЧека.Цена = Окр(СтрокаПозиции.Цена * КурсОплаты, 2);
	СтрокаЧека.ЦенаСоСкидками = Окр(СтрокаПозиции.СуммаТовара * КурсОплаты / СтрокаПозиции.Количество, 2);
	СтрокаЧека.Сумма = Окр(СтрокаПозиции.СуммаТовара * КурсОплаты, 2);
	СтрокаЧека.Наименование = СокрЛП(СтрокаПозиции.Наименование) + ПредставлениеСерий(СтрокаПозиции) + 
		?(ЗначениеЗаполнено(СтрокаПозиции.ЕдиницаИзмерения)," "+Строка(СтрокаПозиции.ЕдиницаИзмерения),"");
	СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаПозиции.СтавкаНДС);
	// Дополнительные реквизиты начиная с ФФД 1.1
	СтрокаЧека.СуммаНДС = СтрокаПозиции.СуммаНДСТовара;
	СтрокаЧека.ПризнакСпособаРасчета = СтрокаПозиции.ПризнакСпособаРасчета;
	Если Не ЗначениеЗаполнено(СтрокаЧека.ПризнакСпособаРасчета) Тогда
		СтрокаЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой");
	КонецЕсли;
	СтрокаЧека.ПризнакПредметаРасчета = ОпределитьПризнакПредметаРасчета(СтрокаПозиции.Номенклатура);
	СтрокаЧека.НомерСекции = СтрокаПозиции.НомерСекции;
	
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
	
КонецПроцедуры

Процедура ЗаполнитьФиктивнуюСтрокуЧека(ОбщиеПараметры, СтрокаРасшифровки, НаименованиеПредметаРасчета, Сумма = Неопределено)
	
	СтрокаЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
	
	Если Сумма = Неопределено Тогда
		Сумма = СтрокаРасшифровки.СуммаПлатежа;
	КонецЕсли;
	
	СтрокаЧека.Наименование = НаименованиеПредметаРасчета; // Наименование предмета расчета
	СтрокаЧека.Количество = 1; // Количество предмета расчета 
	СтрокаЧека.Цена = Сумма; // Цена без учета скидок и наценок
	СтрокаЧека.ЦенаСоСкидками = Сумма; // Цена с учетом скидок и наценок
	СтрокаЧека.Сумма = Сумма; // Cтоимость предмета расчета с учетом скидок и наценок
	СтрокаЧека.СтавкаНДС = МенеджерОборудованияКлиентСервер.ПолучитьСтавкуНДСДляФискализацииЧека(СтрокаРасшифровки.СтавкаНДС); // Cтавка НДС в %
	Если СтрокаЧека.СтавкаНДС = Неопределено Тогда
		СтрокаЧека.СтавкаНДС = 0;
	КонецЕсли;
	// Дополнительные реквизиты начиная с ФФД 1.1
	СтрокаЧека.СуммаНДС = СтрокаРасшифровки.СуммаНДС;
	СтрокаЧека.ПризнакСпособаРасчета = СтрокаРасшифровки.ПризнакСпособаРасчета;
	Если Не ЗначениеЗаполнено(СтрокаЧека.ПризнакСпособаРасчета) Тогда
		СтрокаЧека.ПризнакСпособаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиСпособаРасчета.Аванс");
	КонецЕсли;
	СтрокаЧека.ПризнакПредметаРасчета = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПлатежВыплата");
	
	ОбщиеПараметры.ПозицииЧека.Добавить(СтрокаЧека);
	
КонецПроцедуры

Функция ПредставлениеСерий(Выборка, ИмяХарактеристики = "Характеристика", ИмяСерии = "Серия") Экспорт

	Результат = "(";

	Если ЗначениеЗаполнено(Выборка[ИмяХарактеристики]) Тогда
		Результат = Результат + Выборка[ИмяХарактеристики];
		Результат = СтрЗаменить(Результат, "<>", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка[ИмяСерии]) Тогда
		Результат = ?(Результат = "(", Результат, Результат + "; ");
		Результат = Результат + Выборка[ИмяСерии];
		Результат = СтрЗаменить(Результат,  "(<>", "(");
		Результат = СтрЗаменить(Результат, "; <>",  "");
	КонецЕсли;

	Результат = Результат + ")";

	Возврат ?(Результат = "()", "", " " + Результат);

КонецФункции // ПредставлениеСерий()

Функция ОпределитьПризнакПредметаРасчета(Номенклатура) Экспорт
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "АлкогольнаяПродукция, Услуга");
	
	Если РеквизитыНоменклатуры.АлкогольнаяПродукция Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.ПодакцизныйТовар");
	ИначеЕсли РеквизитыНоменклатуры.Услуга Тогда
		Результат = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Услуга");
	Иначе
		Результат = ПредопределенноеЗначение("Перечисление.ПризнакиПредметаРасчета.Товар");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПустыеСсылки(Знач ДопустимыеТипы = Неопределено)
	
	Если ДопустимыеТипы = Неопределено Тогда
		ДопустимыеТипы = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипы, МенеджерОборудованияКлиентСервер.ДопустимыеТипыДокументаРасчетов());
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеТипы, МенеджерОборудованияКлиентСервер.ДопустимыеТипыСделки());
	КонецЕсли;
	
	мСсылок = Новый Массив;
	
	Для Каждого ОписаниеТипа Из ДопустимыеТипы Цикл
		мСсылок.Добавить(Новый(ОписаниеТипа));
	КонецЦикла;
	
	Возврат мСсылок;
	
КонецФункции

// Отправка электронных чеков

Функция АдресЭПКонтрагентаПоУмолчанию(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Тип = &Тип
		|	И (КонтактнаяИнформация.Вид = &Вид
		|			ИЛИ КонтактнаяИнформация.ЗначениеПоУмолчанию)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Запрос.УстановитьПараметр("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЭлектроннойПочтыКонтрагентаДляОтправкиЧеков"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = СокрЛП(Выборка.Представление);
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидимостьЭлементовОтправкиЧека() Экспорт
	Возврат глЗначениеПеременной("ОтправкаЭлектронныхЧековПослеПробития");
КонецФункции

Функция УчетнаяЗаписьЭлектроннойПочтыДляОтправкиЧеков() Экспорт
	Возврат Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
КонецФункции

Процедура ПоставитьЧекВОчередьНаОтправку(ПараметрыЧека) Экспорт
	
	ПривилегированныйРежимБылУстановлен = ПривилегированныйРежим();
	
	УстановитьПривилегированныйРежим(Истина);

	МассивАдресов = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыЧека.ПокупательEmail, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЭлектронныеЧекиККМ.Источник,
	               |	ЭлектронныеЧекиККМ.ПорядковыйНомер КАК ПорядковыйНомер,
	               |	ЭлектронныеЧекиККМ.ТекстЧека,
	               |	ЭлектронныеЧекиККМ.АдресПолучателя,
	               |	ЭлектронныеЧекиККМ.ДатаПостановкиВОчередь,
	               |	ЭлектронныеЧекиККМ.ДатаОтправки,
	               |	ЭлектронныеЧекиККМ.ОписаниеОшибки
	               |ИЗ
	               |	РегистрСведений.ЭлектронныеЧекиККМ КАК ЭлектронныеЧекиККМ
	               |ГДЕ
	               |	ЭлектронныеЧекиККМ.Источник = &Источник
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядковыйНомер УБЫВ";
	Запрос.УстановитьПараметр("Источник", ПараметрыЧека.ДокументОснование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПорядковыйНомерЧека = Выборка.ПорядковыйНомер + 1;
	Иначе
		ПорядковыйНомерЧека = 1;
	КонецЕсли;
	
	Для Каждого АдресЭП Из МассивАдресов Цикл
		
		АдресПолучателя = "";
		Если Не АдресЭП.Свойство("Адрес", АдресПолучателя) ИЛИ ПустаяСтрока(АдресПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		
		нзЭЧ = РегистрыСведений.ЭлектронныеЧекиККМ.СоздатьНаборЗаписей();
		нзЭЧ.Отбор.Источник.Значение = ПараметрыЧека.ДокументОснование;
		нзЭЧ.Отбор.Источник.Использование = Истина;
		нзЭЧ.Отбор.ПорядковыйНомер.Значение = ПорядковыйНомерЧека;
		нзЭЧ.Отбор.ПорядковыйНомер.Использование = Истина;
		ЭлектронныйЧек = нзЭЧ.Добавить();
		ЭлектронныйЧек.Источник = ПараметрыЧека.ДокументОснование;
		ЭлектронныйЧек.ПорядковыйНомер = ПорядковыйНомерЧека;
		ЭлектронныйЧек.ТекстЧека = ПараметрыЧека.ТекстЭлектронногоЧека;
		ЭлектронныйЧек.АдресПолучателя = АдресПолучателя;
		ЭлектронныйЧек.ДатаПостановкиВОчередь = ТекущаяДата();
		
		Попытка
			нзЭЧ.Записать();
		Исключение
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации("ПостановкаЧекаВОчередьНаОтправку", УровеньЖурналаРегистрации.Предупреждение, 
			ПараметрыЧека.ДокументОснование.Метаданные(), ПараметрыЧека.ДокументОснование, Инфо.Описание);
			ПараметрыЧека.Вставить("ОшибкаПостановкиВОчередьНаОтправку");
		КонецПопытки;
		
		ПорядковыйНомерЧека = ПорядковыйНомерЧека + 1;
		
	КонецЦикла;

	Если Не ПривилегированныйРежимБылУстановлен Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры
