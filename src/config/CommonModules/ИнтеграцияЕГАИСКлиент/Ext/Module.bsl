
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Инициирует формирование исходящего запроса в ЕГАИС.
//
// Параметры:
//  ВидДокумента - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид документа ЕГАИС,
//  ВходныеПараметры - Структура - необходимые данные для формирования запроса,
//  ТранспортныйМодуль - Структура - модуль ТМ, в котором требуется сформировать запрос,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат формирования запроса.
//
Функция СформироватьИсходящийЗапрос(ВидДокумента, ВходныеПараметры, ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина) Экспорт
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатВыполненияHTTPЗапроса();
	
	// НачатьФормированиеИсходящегоЗапроса
	Если ТранспортныйМодуль = Неопределено Тогда
		Отбор = Новый Массив;
		
		Если ВходныеПараметры.Свойство("ДокументСсылка") Тогда
			Если ТипЗнч(ВходныеПараметры.ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
				ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузополучатель");
			ИначеЕсли ТипЗнч(ВходныеПараметры.ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
				ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "Грузоотправитель");
			Иначе
				ОрганизацияЕГАИС = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ВходныеПараметры.ДокументСсылка, "ОрганизацияЕГАИС");
			КонецЕсли;
			
			ИдентификаторФСРАР = ИнтеграцияЕГАИСВызовСервера.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
			Отбор.Добавить(Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР));
		КонецЕсли;
		
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(Отбор, Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// ФормированиеИсходящегоЗапроса_ПослеВыбораТранспортногоМодуля
	Если (ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросОрганизаций")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции"))
		И ПустаяСтрока(ВходныеПараметры.ИНН) Тогда
		
		Если ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции") Тогда
			ТекстЗаголовка = НСтр("ru = 'Введите ИНН производителя или импортера алкогольной продукции'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Введите ИНН производителя, импортера или собственной организации'");
		КонецЕсли;
		
		Если НЕ ВвестиСтроку(ВходныеПараметры.ИНН, ТекстЗаголовка, 12) Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат);
		КонецЕсли;
		
		Если ПустаяСтрока(ВходныеПараметры.ИНН) Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Не введен ИНН'"));
		КонецЕсли;
		
	ИначеЕсли (ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиА")
		ИЛИ ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиБ"))
		И ПустаяСтрока(ВходныеПараметры.РегистрационныйНомер) Тогда
		
		Если ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросСправкиА") Тогда
			ТекстЗаголовка = НСтр("ru = 'Введите регистрационный номер справки 1'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Введите регистрационный номер справки 2'");
		КонецЕсли;
		
		Если НЕ ВвестиСтроку(ВходныеПараметры.РегистрационныйНомер, ТекстЗаголовка, 50) Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат);
		КонецЕсли;
		
		Если ПустаяСтрока(ВходныеПараметры.РегистрационныйНомер) Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Не введен регистрационный номер'"));
		КонецЕсли;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросТТН")
		И ПустаяСтрока(ВходныеПараметры.ИдентификаторЕГАИС) Тогда
		
		Если НЕ ВвестиСтроку(ВходныеПараметры.ИдентификаторЕГАИС, НСтр("ru = 'Введите идентификатор ТТН'"), 50) Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат);
		КонецЕсли;
		
		Если ПустаяСтрока(ВходныеПараметры.ИдентификаторЕГАИС) Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Не введен идентификатор ТТН'"));
		КонецЕсли;
	КонецЕсли;
	
	// ФормированиеИсходящегоЗапроса_ПослеВводаДополнительныхПараметров
	// ФормированиеИсходящегоЗапроса_ПослеПодготовкиДанных
	ДокументОснование = ?(ТипЗнч(ВходныеПараметры) = Тип("Структура") И ВходныеПараметры.Свойство("ДокументСсылка"), ВходныеПараметры.ДокументСсылка, Неопределено);
	
	ТекстОшибки = "";
	Если НЕ ПустаяСтрока(ТранспортныйМодуль.ИмяОбработкиОбслуживания) Тогда
		ДанныеЗапроса = ИнтеграцияЕГАИСВызовСервера.ПодготовитьДанныеЗапросаВУТМЧерезОбработкуОбслуживания(
			ТранспортныйМодуль,
			ВидДокумента,
			ВходныеПараметры,
			ТекстОшибки);
	Иначе
		ДанныеЗапроса = ИнтеграцияЕГАИСВызовСервера.ПодготовитьДанныеЗапросаВУТМ(
			ТранспортныйМодуль,
			ВидДокумента,
			ВходныеПараметры,
			ТекстОшибки);
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, ТекстОшибки);
	КонецЕсли;
	
	Результат = ИнтеграцияЕГАИСКлиентСервер.СформироватьHTTPЗапрос(ТранспортныйМодуль, ДанныеЗапроса);
	
	// ФормированиеИсходящегоЗапроса_ПослеФормированияHTTPЗапроса
	Если НЕ Результат.Результат Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, Результат.ОписаниеОшибки);
	КонецЕсли;
	
	ДанныеЗапроса.Вставить("ИдентификаторЗапроса", Результат.ИдентификаторЗапроса);
	
	ИнтеграцияЕГАИСВызовСервера.ЗавершитьФормированиеИсходящегоЗапроса(ДанныеЗапроса, ВидДокумента, ДокументОснование);
	
	Оповестить("ОбновитьСписокЗапросовЕГАИС");
	
	Возврат Результат;
	
КонецФункции

// Инициирует загрузку новых документов из ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - Структура - модуль ТМ, из которого требуется загрузить документы,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ИдентификаторКлиента - УникальныйИдентификатор - идентификатор формы, вызвавшей процедуру,
//  ДополнительныеПараметры - Произвольный - произвольные параметры прикладной конфигурации.
//
// Возвращаемое значение:
//   Структура - результат загрузки документов.
//
Функция ЗагрузитьДокументы(ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ИдентификаторКлиента = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	// НачатьЗагрузкуДокументов
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(, Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// ЗагрузкаДокументов_ПослеВыбораТранспортногоМодуля
	Если НЕ ТранспортныйМодуль.ЗагружатьВходящиеДокументы Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Загрузка документов запрещена.'"));
	КонецЕсли;
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;
	
	Результат = ИнтеграцияЕГАИСВызовСервера.ЗагрузитьДокументыИзУТМ(ТранспортныйМодуль, ДополнительныеПараметры);
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента);
	
	Если НЕ РезультатБлокировки.Результат И ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;
	
	Оповестить("ОбновитьСписокЗапросовЕГАИС");
	
	Возврат Результат;
	
КонецФункции

// Инициирует обработку ответов на запросы из ЕГАИС.
//
// Параметры:
//  ТранспортныйМодуль - Структура - модуль ТМ, из которого требуется загрузить ответы,
//  ОтображатьСообщения - Булево - если Истина, то пользователю будут отображены сообщения с ошибками,
//  ИдентификаторКлиента - УникальныйИдентификатор - идентификатор формы, вызвавшей процедуру,
//  ДополнительныеПараметры - Произвольный - произвольные параметры прикладной конфигурации.
//
Функция ОбработатьОтветы(ТранспортныйМодуль = Неопределено, ОтображатьСообщения = Истина, ИдентификаторКлиента = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	// НачатьОбработкуОтветов
	Результат = ИнтеграцияЕГАИСКлиентСервер.РезультатЗагрузкиВходящихДокументов();
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(, Результат.ОписаниеОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения);
		КонецЕсли;
	КонецЕсли;
	
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.ЗаблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;

	Результат = ИнтеграцияЕГАИСВызовСервера.ОбработатьОтветыИзУТМ(ТранспортныйМодуль, ДополнительныеПараметры);
		
	РезультатБлокировки = ИнтеграцияЕГАИСВызовСервера.РазблокироватьТранспортныйМодульДляОбмена(ТранспортныйМодуль, ИдентификаторКлиента);
	Если НЕ РезультатБлокировки.Результат И ОтображатьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатБлокировки.ОписаниеОшибки);
	КонецЕсли;

	Если Результат.Результат Тогда
		Оповестить("ОбновитьСписокЗапросовЕГАИС");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует электронную подпись чека в транспортном модуле и печает чек на ФР.
//
// Параметры:
//  ПараметрыЧека           - Массив - массив, содержащий элементы:
//     0 - Таблица товаров - таблица значений с колонками:
//             1 - Наименование,
//             2 - НомерСекции,
//             3 - Цена,
//             4 - Количество,
//             5 - Скидка,
//             6 - СтавкаНДС,
//             7 - ПараметрыАлкогольнойПродукции - Структура с ключами:
//                    АлкогольнаяПродукция (Булево),
//                    Маркируемая (Булево),
//                    Штрихкод (Строка),
//                    ШтрихкодМарки (Строка, PDF417),
//                    Объем (Число),
//                    Крепость (Число, %),
//                    Код вида алкогольной продукции (Строка).
//     1 - Сумма оплаты наличными,
//     2 - Сумма оплаты по безналу,
//     3 - Признак возврата,
//     4 - ИНН организации,
//     5 - КПП торгового объекта,
//     6 - Адрес магазина,
//     7 - Наименование магазина,
//     8 - Заводской номер ККМ,
//     9 - Номер чека ККМ,
//    10 - Номер смены ККМ.
//  ТранспортныйМодуль      - Структура - данные транспортного модуля, в котором требуется получить подпись ЕГАИС,
//  ПараметрыЧекаЕГАИС      - Структура - параметры чека в формате ЕГАИС,
//  ПечатьСлипЧека          - Булево    - признак печати слип-чека инфо квитанции ЕГАИС,
//  ИдентификаторУстройства - Строка    - Идентификатор фискального регистратора,
//  ОтображатьСообщения     - Булево    - если Истина, то пользователю будут отображены сообщения с ошибками.
//
// Возвращаемое значение:
//   Структура - результат подписи чека.
//
Функция СформироватьПодписьЧека(ПараметрыЧека,
		ТранспортныйМодуль = Неопределено,
		ПараметрыЧекаЕГАИС = Неопределено,
		ПечатьСлипЧека = Ложь,
		ИдентификаторУстройства = Неопределено,
		ОтображатьСообщения = Истина) Экспорт
		
	// НачатьФормированиеПодписиЧека
	Результат = РезультатПодписиЧека(ТранспортныйМодуль);
	
	ИспользуетсяРегистрацияВЕГАИС = ИнтеграцияЕГАИСКлиентПовтИсп.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС();
	
	Если НЕ ИспользуетсяРегистрацияВЕГАИС Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, НСтр("ru = 'Розничная регистрация продаж в системе ЕГАИС не используется.'"));
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС = Неопределено Тогда
		РезультатОперации = Неопределено;
		ПараметрыЧекаЕГАИС = ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, ПараметрыЧека[9], ПараметрыЧека[10], РезультатОперации);
		
		Если НЕ РезультатОперации.Результат Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЧекаЕГАИС.ТаблицаТоваров.Количество() = 0 Тогда
		Результат.Результат = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ТранспортныйМодуль = Неопределено Тогда
		ТекстОшибки = "";
		ТранспортныйМодуль = ВыбратьТранспортныйМодуль(, ТекстОшибки);
		
		Если ТранспортныйМодуль = Неопределено Тогда
			Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Результат.ТранспортныйМодуль = ТранспортныйМодуль;
	
	// ФормированиеПодписиЧека_ПослеВыбораТранспортногоМодуля
	РезультатОперации = ПроверитьВходящиеДанныеПередПодписьюЧека(ТранспортныйМодуль, ПараметрыЧекаЕГАИС);
	Если НЕ РезультатОперации.Результат Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
	ВходныеПараметры = Новый Массив;
	ВходныеПараметры.Добавить(ПараметрыЧекаЕГАИС);
	ВходныеПараметры.Добавить(ПараметрыЧекаЕГАИС.ТаблицаТоваров);
	
	РезультатОперации = СформироватьИсходящийЗапрос(
		ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ"),
		ВходныеПараметры,
		ТранспортныйМодуль,
		ОтображатьСообщения);
		
	Если НЕ РезультатОперации.Результат Тогда
		Возврат ИнтеграцияЕГАИСКлиентСервер.ЗавершитьОперациюСОшибкой(Результат, ОтображатьСообщения, РезультатОперации.ОписаниеОшибки);
	КонецЕсли;
	
	Результат.АдресЧека = РезультатОперации.ИдентификаторЗапроса;
	Результат.ПодписьЧека = РезультатОперации.Подпись;
	
	ПараметрыЧекаЕГАИС.АдресЧека = РезультатОперации.ИдентификаторЗапроса;
	ПараметрыЧекаЕГАИС.ПодписьЧека = РезультатОперации.Подпись;
	
	Если ПечатьСлипЧека Тогда
		РезультатОперации = ПечатьСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС);
		
		Если НЕ РезультатОперации.Результат Тогда
			Если ОтображатьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОперации.ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает результат подписи чека ККМ в ЕГАИС.
//
Функция РезультатПодписиЧека(ТранспортныйМодуль = Неопределено)
	
	Результат = Новый Структура();
	Результат.Вставить("Результат"         , Ложь);
	Результат.Вставить("ОписаниеОшибки"    , "");
	Результат.Вставить("АдресЧека"         , "");
	Результат.Вставить("ПодписьЧека"       , "");
	Результат.Вставить("ТранспортныйМодуль", ТранспортныйМодуль);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру данных чека для формирования подписи ЕГАИС.
//
Функция СтруктураДанныхЧекаККМ()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИНН"                   , "");           // ИНН Организации
	СтруктураДанных.Вставить("КПП"                   , Неопределено); // КПП обособленного подразделения по розничной лицензии.
	СтруктураДанных.Вставить("АдресМагазина"         , "");           // Адрес обособленного подразделения по розничной лицензии (Длина до 128 символов).
	СтруктураДанных.Вставить("НаименованиеМагазина"  , "");           // Наименование магазина (Длина до 128 символов).
	СтруктураДанных.Вставить("ЗаводскойНомерККМ"     , "");           // Заводской номер ККМ (Длина до 128 символов).
	СтруктураДанных.Вставить("НомерСменыККМ"         , 0);            // Номер смены.
	СтруктураДанных.Вставить("НомерЧекаККМ"          , 0);            // Номер чека.
	СтруктураДанных.Вставить("ДатаВремяЧека"         , '00010101');   // Дата, время чека. Формат: ДДММГГЧЧММ - день, месяц, год, часы, минуты.
	СтруктураДанных.Вставить("Возврат"               , Ложь);         // Если Истина - то покупатель возвращает товар.
	СтруктураДанных.Вставить("АдресЧека"             , "");           // Адрес чека на сайте ЕГАИС.
	СтруктураДанных.Вставить("ПодписьЧека"           , "");           // Электронная подпись чека.
	СтруктураДанных.Вставить("ТаблицаТоваров"        , Новый Массив); // Таблица товаров
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает структуру данных строки чека для формирования подписи ЕГАИС.
//
Функция СтруктураДанныхСтрокиЧекаККМ()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Наименование"  , "");
	СтруктураДанных.Вставить("Цена"          , 0);
	СтруктураДанных.Вставить("ШтрихкодМарки" , "");
	СтруктураДанных.Вставить("ШтрихкодТовара", "");
	СтруктураДанных.Вставить("Объем"         , 0);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Печатает слип-чек на ФР.
//
Функция ПечатьСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС, ШиринаСтроки = Неопределено) Экспорт

	Результат = Новый Структура("Результат, ОписаниеОшибки, РезультатПечатиЧека", Ложь, "", Неопределено);
	
	МассивСтрокСлипЧека = СформироватьМассивСтрокСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС, ШиринаСтроки);
	
	Результат.РезультатПечатиЧека = ПолучитьСерверТО().ОткрытьЧек(
		ИдентификаторУстройства,
		"",
		ПараметрыЧекаЕГАИС.Свойство("Возврат") И ПараметрыЧекаЕГАИС.Возврат,
		ПараметрыЧекаЕГАИС.НомерЧекаККМ,
		ПараметрыЧекаЕГАИС.НомерСменыККМ,
		Ложь);

	Если ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка открытия слип-чека.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.РезультатПечатиЧека = ПолучитьСерверТО().ПечатьТекста(ИдентификаторУстройства, МассивСтрокСлипЧека, ШиринаСтроки);
	
	Если ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка печати слип-чека.'");
		Возврат Результат;
	КонецЕсли;

	Результат.РезультатПечатиЧека = ПолучитьСерверТО().ЗакрытьЧек(ИдентификаторУстройства, 0, 0);
	
	Если ЗначениеЗаполнено(Результат.РезультатПечатиЧека) Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка закрытия слип-чека.'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Результат = Истина;
	
	Возврат Результат;

КонецФункции

// Формирует массив строк слип-чека для печати инфо-квитанции ЕГАИС.
//
Функция СформироватьМассивСтрокСлипЧека(ИдентификаторУстройства, ПараметрыЧекаЕГАИС, Знач ШиринаСтроки)
	
	Если НЕ ЗначениеЗаполнено(ШиринаСтроки) Тогда
		ШиринаСтроки = 32;
	КонецЕсли;
	
	// Сформировать шапку чека.
	Текст = ВыстроитьПоля(ПараметрыЧекаЕГАИС.НаименованиеМагазина, "", ШиринаСтроки) + Символы.ПС;
	
	ОрганизацияИНН = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН), НСтр("ru='ИНН:'") + Символы.НПП + ПараметрыЧекаЕГАИС.ИНН, "");
	ОрганизацияКПП = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП), НСтр("ru='КПП:'") + Символы.НПП + ПараметрыЧекаЕГАИС.КПП, "");
	Если Не ПустаяСтрока(ОрганизацияИНН) Или НЕ ПустаяСтрока(ОрганизацияКПП) Тогда
		Текст = Текст + ВыстроитьПоля(ОрганизацияИНН, ОрганизацияКПП, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерКассы = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.ЗаводскойНомерККМ), НСтр("ru='КАССА:'") + Символы.НПП + ПараметрыЧекаЕГАИС.ЗаводскойНомерККМ, "");
	НомерСмены = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.НомерСменыККМ), НСтр("ru='СМЕНА:'") + Символы.НПП + ПараметрыЧекаЕГАИС.НомерСменыККМ, "");
	Если Не ПустаяСтрока(НомерКассы) Или НЕ ПустаяСтрока(НомерСмены) Тогда
		Текст = Текст + ВыстроитьПоля(НомерКассы, НомерСмены, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	НомерЧека = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.НомерЧекаККМ), НСтр("ru='ЧЕК:'") + Символы.НПП + ПараметрыЧекаЕГАИС.НомерЧекаККМ, "");
	ДатаВремя = ?(НЕ ПустаяСтрока(ПараметрыЧекаЕГАИС.ДатаВремяЧека), ПараметрыЧекаЕГАИС.ДатаВремяЧека, ТекущаяДата());
	ДатаВремя = НСтр("ru='ДАТА:'") + Символы.НПП + Формат(ДатаВремя, "ДФ=""дд.ММ.гггг ЧЧ:мм""");
	Если Не ПустаяСтрока(НомерЧека) Или НЕ ПустаяСтрока(ДатаВремя) Тогда
		Текст = Текст + ВыстроитьПоля(НомерЧека, ДатаВремя, ШиринаСтроки) + Символы.ПС;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	МассивСтрок.Добавить(Текст + Символы.ПС);
	
	ВидФУ = ПолучитьСерверТО().ПолучитьВид(ИдентификаторУстройства);
	Если ВидФУ = ПредопределенноеЗначение("Перечисление.ВидыТорговогоОборудования.ККТ") Тогда
		МассивСтрок.Добавить("|ШтрихКод|QR|" + ПараметрыЧекаЕГАИС.АдресЧека);;
	КонецЕсли;
	
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(ПостроитьПолеПереносом(ПараметрыЧекаЕГАИС.АдресЧека, ШиринаСтроки));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(ПостроитьПолеПереносом(ПараметрыЧекаЕГАИС.ПодписьЧека, ШиринаСтроки));
	
	Возврат МассивСтрок;
	
КонецФункции

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет символами.
//
Функция ПостроитьПоле(Знач Текст, Знач ДлинаПоля, ДобСимвол = "", ДобавлятьСправа = Истина)
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		Если ДобавлятьСправа Тогда
			ТекстПолный = ТекстПолный + ДобСимвол;
		Иначе
			ТекстПолный = ДобСимвол + ТекстПолный;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

// Выстраивает строку по длине поля, если поле длинное - переносит на следующую строку.
//
Функция ПостроитьПолеПереносом(Знач Текст, Знач ДлинаПоля, ДобСимвол = "")
	
	ДобСимвол = ?(ПустаяСтрока(ДобСимвол), " ", ДобСимвол);
	
	Если СтрДлина(Текст) > ДлинаПоля Тогда 
		ТекстПолный = "";
		Пока СтрДлина(Текст) > ДлинаПоля Цикл
			ТекстПолный = ТекстПолный + ?(ПустаяСтрока(ТекстПолный), "", Символы.ПС) +  Лев(Текст, ДлинаПоля);
			Текст = Сред(Текст, ДлинаПоля + 1);
		КонецЦикла;
		ТекстПолный = ТекстПолный + ?(ПустаяСтрока(Текст), "", Символы.ПС + Текст);
	Иначе
		ТекстПолный = Текст;
	КонецЕсли;
		
	Возврат ТекстПолный;
	
КонецФункции

// Формирует строку из двух полей, если передается одно поле дополняет символами до нужного размера.
//
Функция ВыстроитьПоля(Знач Текст1, Знач Текст2, Знач ДлинаПоля)
	
	Если ПустаяСтрока(Текст2) Тогда
		ТекстПолный = ПостроитьПоле(Текст1, СтрДлина(Текст1) + Цел((ДлинаПоля - СтрДлина(Текст1))/2), , Ложь);
		ТекстПолный = ПостроитьПоле(ТекстПолный, ДлинаПоля);
	ИначеЕсли СтрДлина(Текст1) + СтрДлина(Текст2) < ДлинаПоля Тогда
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля - СтрДлина(Текст2)) + Текст2;
	Иначе
		ТекстПолный = ПостроитьПоле(Текст1, ДлинаПоля) + Символы.ПС + ПостроитьПоле(Текст2, ДлинаПоля, ,Ложь)
	КонецЕсли;
	
	Возврат ТекстПолный;
	
КонецФункции

// Добавляет в текст ошибки строку с ошибкой.
//
// Параметры:
//  ТекстОшибки  - Строка - Общий текст ошибки,
//  СтрокаОшибки - Строка - Добавляемая строка ошибки,
//  Номенклатура - Строка - Номенклатура, для которой зафиксирована ошибка.
//
Процедура ДобавитьСтрокуСОшибкой(ТекстОшибки, СтрокаОшибки, Номенклатура)

	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС;
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки + СтрЗаменить(СтрокаОшибки, "%1", Номенклатура);

КонецПроцедуры

// Подготавливает входящие данные для подписи чека.
//
Функция ПодготовитьВходящиеДанныеДляПодписиЧека(ПараметрыЧека, НомерЧека = 0, НомерСмены = 0, РезультатПодготовки = Неопределено)

	РезультатПодготовки = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	ВходящиеДанные = СтруктураДанныхЧекаККМ();
	
	ТаблицаТоваров = ПараметрыЧека[0];
	
	Если ТаблицаТоваров.Колонки.Найти("ПараметрыАлкогольнойПродукции") = Неопределено Тогда
		РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
		Возврат ВходящиеДанные;
	КонецЕсли;
	
	ВходящиеДанные.ИНН                  = ПараметрыЧека[4];
	ВходящиеДанные.КПП                  = ПараметрыЧека[5];
	ВходящиеДанные.АдресМагазина        = ПараметрыЧека[6];
	ВходящиеДанные.НаименованиеМагазина = ПараметрыЧека[7];
	ВходящиеДанные.ЗаводскойНомерККМ    = ПараметрыЧека[8];
	ВходящиеДанные.НомерСменыККМ        = НомерСмены;
	ВходящиеДанные.НомерЧекаККМ         = НомерЧека;
	ВходящиеДанные.ДатаВремяЧека        = ТекущаяДата();
	ВходящиеДанные.Возврат              = ПараметрыЧека[3];
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		ПараметрыАлкогольнойПродукции = СтрокаТаблицы.ПараметрыАлкогольнойПродукции;
		
		Если ТипЗнч(ПараметрыАлкогольнойПродукции) <> Тип("Структура") Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		Если НЕ ПараметрыАлкогольнойПродукции.Свойство("АлкогольнаяПродукция")
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Свойство("Маркируемая")
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Свойство("ШтрихкодМарки")
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Свойство("Объем") Тогда
			РезультатПодготовки.ОписаниеОшибки = НСтр("ru = 'В процедуру подготовки входящих данных передана некорректная структура параметров.'");
			Возврат ВходящиеДанные;
		КонецЕсли;
		
		Если НЕ ПараметрыАлкогольнойПродукции.АлкогольнаяПродукция
			ИЛИ НЕ ПараметрыАлкогольнойПродукции.Маркируемая Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрок = ?(ПараметрыАлкогольнойПродукции.Маркируемая, СтрокаТаблицы.Количество, 1);
		
		Для Сч = 1 По КоличествоСтрок Цикл
			СтрокаЧека = СтруктураДанныхСтрокиЧекаККМ();
			СтрокаЧека.Наименование   = СтрокаТаблицы.Наименование;
			
			Если СтрокаТаблицы.Количество = 0 ИЛИ СтрокаТаблицы.Скидка = 0 Тогда
				СтрокаЧека.Цена = СтрокаТаблицы.Цена;
			Иначе
				СтрокаЧека.Цена = Окр(СтрокаТаблицы.Цена * (1 - СтрокаТаблицы.Скидка / 100), 2);
			КонецЕсли;
			
			СтрокаЧека.ШтрихкодТовара = ПараметрыАлкогольнойПродукции.Штрихкод;
			СтрокаЧека.Объем          = ПараметрыАлкогольнойПродукции.Объем;
			
			Если ТипЗнч(ПараметрыАлкогольнойПродукции.ШтрихкодМарки) = Тип("Массив") Тогда
				СтрокаЧека.ШтрихкодМарки = ?(ПараметрыАлкогольнойПродукции.ШтрихкодМарки.ВГраница() < Сч - 1, "", ПараметрыАлкогольнойПродукции.ШтрихкодМарки[Сч - 1]);
			ИначеЕсли ТипЗнч(ПараметрыАлкогольнойПродукции.ШтрихкодМарки) = Тип("Строка") И Сч = 1 Тогда
				СтрокаЧека.ШтрихкодМарки = ПараметрыАлкогольнойПродукции.ШтрихкодМарки;
			КонецЕсли;
			
			ВходящиеДанные.ТаблицаТоваров.Добавить(СтрокаЧека);
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатПодготовки.Результат = Истина;
	
	Возврат ВходящиеДанные;

КонецФункции

// Проверяет корректность входящих данных перед отправкой запроса в УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные УТМ, в котором требуется подписать чек,
//  ПараметрыЧекаЕГАИС - Структура - подготовленные ранее данные чека.
//
// Возвращаемое значение:
//   Структура - результат проверки данных.
//
Функция ПроверитьВходящиеДанныеПередПодписьюЧека(ТранспортныйМодуль, ПараметрыЧекаЕГАИС)
	
	Результат = Новый Структура("Результат, ОписаниеОшибки", Ложь, "");
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) И НЕ ПустаяСтрока(ТранспортныйМодуль.ИНН) ИЛИ
		ПараметрыЧекаЕГАИС.ИНН <> ТранспортныйМодуль.ИНН Тогда
		ПараметрыЧекаЕГАИС.ИНН = ТранспортныйМодуль.ИНН;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И НЕ ПустаяСтрока(ТранспортныйМодуль.КПП) ИЛИ
		ПараметрыЧекаЕГАИС.КПП <> ТранспортныйМодуль.КПП Тогда
		ПараметрыЧекаЕГАИС.КПП = ТранспортныйМодуль.КПП;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Адрес) Тогда
		ПараметрыЧекаЕГАИС.АдресМагазина = Лев(ТранспортныйМодуль.Адрес, 128);
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.НаименованиеМагазина) И НЕ ПустаяСтрока(ТранспортныйМодуль.Представление) Тогда
		ПараметрыЧекаЕГАИС.НаименованиеМагазина = Лев(ТранспортныйМодуль.Представление, 128);
	КонецЕсли;
	
	МассивКодовМарок = Новый Массив;
	ТекстОшибки  = "";
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ИНН) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан ИНН организации.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.КПП) И СтрДлина(ПараметрыЧекаЕГАИС.ИНН) = 10 Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан КПП торгового объекта.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.АдресМагазина) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан адрес магазина.'"), "");
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыЧекаЕГАИС.ЗаводскойНомерККМ) Тогда
		ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Не указан заводской номер ККМ.'"), "");
	КонецЕсли;
	
	Для Каждого СтрокаЧека Из ПараметрыЧекаЕГАИС.ТаблицаТоваров Цикл
		
		Если СтрокаЧека.Цена = 0 Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указана цена.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаЧека.ШтрихкодМарки) Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'Товар %1. 
															|Не указан штрихкод марки алкогольной продукции.'"), СтрокаЧека.Наименование);
		КонецЕсли;
		
		Если МассивКодовМарок.Найти(СокрЛП(СтрокаЧека.ШтрихкодМарки)) <> Неопределено Тогда
			ДобавитьСтрокуСОшибкой(ТекстОшибки, НСтр("ru = 'В чеке обнаружены дублирующиеся позиции.'"), "");
		КонецЕсли;
		
		МассивКодовМарок.Добавить(СокрЛП(СтрокаЧека.ШтрихкодМарки));
	КонецЦикла;
	
	Результат.ОписаниеОшибки = ТекстОшибки;
	Результат.Результат = ПустаяСтрока(ТекстОшибки);
	
	Возврат Результат;
	
КонецФункции

// Выбирает доступный транспортный модуль из настроек обмена.
//
Функция ВыбратьТранспортныйМодуль(Отбор, ТекстОшибки = "")

	СписокДоступныхМодулей = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
	
	Если СписокДоступныхМодулей.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствуют доступные транспортные модули ЕГАИС.'");
		Возврат Неопределено;
		
	ИначеЕсли СписокДоступныхМодулей.Количество() = 1 Тогда
		Возврат СписокДоступныхМодулей[0];
		
	Иначе
		СписокДляВыбора = Новый СписокЗначений;
		СписокДляВыбора.Добавить(СписокДоступныхМодулей[0], СписокДоступныхМодулей[0].Представление);
		АдресУТМ = СписокДоступныхМодулей[0].АдресУТМ;
		ПортУТМ  = СписокДоступныхМодулей[0].ПортУТМ;
		Для Каждого Модуль Из СписокДоступныхМодулей Цикл
			Если Модуль.АдресУТМ <> АдресУТМ ИЛИ Модуль.ПортУТМ <> ПортУТМ Тогда
				СписокДляВыбора.Добавить(Модуль, Модуль.Представление);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокДляВыбора.Количество() > 1 Тогда
			ВыбранныйЭлемент = СписокДляВыбора.ВыбратьЭлемент(НСтр("ru = 'Выберите транспортный модуль ЕГАИС'"));
		Иначе
			ВыбранныйЭлемент = СписокДляВыбора[0];
		КонецЕсли;
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйЭлемент.Значение;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции
