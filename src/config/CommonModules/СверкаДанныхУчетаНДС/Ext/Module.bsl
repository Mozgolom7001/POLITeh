////////////////////////////////////////////////////////////////////////////////
// СверкаДанныхУчетаНДС: сверка счетов-фактур и других данных учета НДС.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирование отчета "Реестр счетов-фактур выданных" ("Реестр счетов-фактур полученных") по данным информационной базы
//
// Параметры:
//  ПараметрыОтчета  - Структура - структура параметров для отчета. Ключи структуры:
//    * ЧастьЖурнала - ПеречислениеСсылка.ЧастиЖурналаУчетаСчетовФактур - выставленные или полученные счета-фактуры
//    * Контрагент - СправочникСсылка.Контрагенты - покупатель (поставщик), по которому формируется реестр
//    * Организация - СправочникСсылка.Организации - наша организация, по которой формируется реестр
//    * НалоговыйПериод - Дата - начало налогового периода, за который формируется реестр
//    * АдресХранилищаФайлаВыгрузки - Строка - адрес временного хранилища, в которое помещаются двоичные данные файла XML
//                 (только для выданных счетов-фактур)
//  АдресХранилища  - Строка - адрес временного хранилища, в которое помещается структура, содержащая 
//                 сформированный отчет и ИНН контрагента и нашей организации
//
Процедура СформироватьРеестрСчетовФактур(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТаблицаРезультата = ПодготовитьТаблицуРеестраСчетовФактур(ПараметрыОтчета);
	
	// Выводим отчет
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбластиМакета = ВсеОбластиМакета(Отчеты.РеестрСчетовФактурДляСверки.ПолучитьМакет("Макет"));
	
	// Шапка
	
	ДатаФормирования = ТекущаяДатаСеанса();
	ПериодОтчета = ПолучитьПредставлениеПериода(
		НачалоКвартала(ПараметрыОтчета.НалоговыйПериод), 
		КонецКвартала(ПараметрыОтчета.НалоговыйПериод));
	ОбластиМакета.Шапка.Параметры.ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			НСтр("ru='Реестр счетов-фактур выданных%1 по состоянию на %2'"),
			НСтр("ru='Реестр счетов-фактур полученных%1 по состоянию на %2'")),
		ПериодОтчета,
		Формат(ДатаФормирования, "ДЛФ=D"));
		
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ТекущаяДатаСеанса());
	ОбластиМакета.Шапка.Параметры.Организация = СведенияОбОрганизации.ПолноеНаименование;
	ОбластиМакета.Шапка.Параметры.ИННКППОрганизации = "" + СведенияОбОрганизации.ИНН 
		+ ?(НЕ ЗначениеЗаполнено(СведенияОбОрганизации.КПП), "", ("/" + СведенияОбОрганизации.КПП));
	СведенияОКонтрагенте = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ПараметрыОтчета.Контрагент, ТекущаяДатаСеанса());
	ОбластиМакета.Шапка.Параметры.Контрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1: %2'"),
		?(ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			НСтр("ru='Покупатель'"), 
			НСтр("ru='Поставщик'")),
		СведенияОКонтрагенте.ПолноеНаименование);
	ОбластиМакета.Шапка.Параметры.ИННКППКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1: %2'"),
		?(ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			НСтр("ru='ИНН/КПП покупателя'"), 
			НСтр("ru='ИНН/КПП поставщика'")),
		"" + СведенияОКонтрагенте.ИНН 
			+ ?(НЕ ЗначениеЗаполнено(СведенияОКонтрагенте.КПП), "", ("/" + СведенияОКонтрагенте.КПП)));
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	// Счета-фактуры по покупателю (поставщику)

	ПараметрыРаздела = Новый Структура("ЧастьЖурнала,ЕстьВалюта,НаАванс");
	ПараметрыРаздела.ЧастьЖурнала = ПараметрыОтчета.ЧастьЖурнала;
	ПараметрыРаздела.ЕстьВалюта   = ТаблицаРезультата.Найти(Истина, "ЕстьВалюта") <> Неопределено;
	
	// По операциям реализации (поступления)
	ПараметрыРаздела.НаАванс = Ложь;
	ВывестиРазделРеестра(ТабличныйДокумент, ТаблицаРезультата, ПараметрыРаздела, ОбластиМакета);
	
	// По авансам полученным (выданным)
	ПараметрыРаздела.НаАванс = Истина;
	ВывестиРазделРеестра(ТабличныйДокумент, ТаблицаРезультата, ПараметрыРаздела, ОбластиМакета);
	
	// Подвал
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Подвал);
	
	// Файл выгрузки (для выданных счетов-фактур)
	
	Если ПараметрыОтчета.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры
		И ПравоДоступа("Вывод", Метаданные) Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ИННПоставщика",    СведенияОбОрганизации.ИНН);
		СтруктураДанных.Вставить("КПППоставщика",    СведенияОбОрганизации.КПП);
		СтруктураДанных.Вставить("ИННПокупателя",    СведенияОКонтрагенте.ИНН);
		СтруктураДанных.Вставить("КПППокупателя",    СведенияОКонтрагенте.КПП);
		СтруктураДанных.Вставить("НалоговыйПериод",  НачалоКвартала(ПараметрыОтчета.НалоговыйПериод));
		СтруктураДанных.Вставить("ДатаФормирования", ДатаФормирования);
		СтруктураДанных.Вставить("ТаблицаДанных",    ТаблицаРезультата);
		
		ПоместитьВоВременноеХранилище(РеестрСчетовФактурВXML(СтруктураДанных), ПараметрыОтчета.АдресХранилищаФайлаВыгрузки);
		
	КонецЕсли;
	
	Результат = Новый Структура("ИННПоставщика,ИННПокупателя,Реестр", 
		СведенияОбОрганизации.ИНН, СведенияОКонтрагенте.ИНН, ТабличныйДокумент);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Формирует реестр выданных счетов-фактур в XML.
//
// Параметры:
//  Параметры - Структура - Параметры для формирования запроса реестра.
//       Ключи структуры см. Обработки.СверкаДанныхУчетаНДС.ПараметрыРеестра().
//
// Возвращаемое значение:
//  ДвоичныеДанные - ДвоичныеДанные - двоичные данные XML файла реестра счетов-фактур выданных.
//
Функция РеестрСчетовФактурВXML(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("ТаблицаДанных") ИЛИ Параметры.ТаблицаДанных = Неопределено Тогда
		// получение таблицы счетов-фактур
		ТаблицаРеестраСчетовФактур = ПодготовитьТаблицуРеестраСчетовФактур(Параметры);
		Параметры.Вставить("ТаблицаДанных"   , ТаблицаРеестраСчетовФактур);
		Параметры.Вставить("ДатаФормирования", ТекущаяДатаСеанса());
		
	КонецЕсли;
	
	// Формирование файла XML
	XMLДокумент = ТекстXMLДляВыгрузкиОтчета(Параметры);
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(XMLДокумент);
	ИмяФайлаXML = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент.Записать(ИмяФайлаXML, КодировкаТекста.UTF8);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаXML);
	УдалитьФайлы(ИмяФайлаXML);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует текст ошибок заполнения полей и списков.
//
// Параметры:
//  ВидПоля       - Строка - может принимать значения:
//                  Поле, Колонка, Список;
//  ВидСообщения  - Строка - может принимать значения:
//                  Заполнение, Корректность;
//  ИмяПоля        - Строка - имя поля;
//  НомерСтроки    - Строка, Число - номер строки;
//  ИмяСписка      - Строка - имя списка;
//  ТекстСообщения - Строка - детальная расшифровка ошибки заполнения.
//
// Возвращаемое значение:
//   Строка - текст ошибки заполнения.
//
Функция ТекстОшибкиЗаполнения(ВидПоля = "Поле", ВидСообщения = "Заполнение",
	ИмяПоля = "", НомерСтроки = "", ИмяСписка = "", ТекстСообщения = "") Экспорт
	
	Если ВРег(ВидПоля) = "ПОЛЕ" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" не заполнено'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Поле ""%1"" заполнено некорректно.
								|
								|%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "КОЛОНКА" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнена колонка ""%1"" в строке %2 списка ""%3"".
								|
								|%4'");
		КонецЕсли;
	ИначеЕсли ВРег(ВидПоля) = "СПИСОК" Тогда
		Если ВРег(ВидСообщения) = "ЗАПОЛНЕНИЕ" Тогда
			Шаблон = НСтр("ru = 'Не введено ни одной строки в список ""%3""'");
		ИначеЕсли ВРег(ВидСообщения) = "КОРРЕКТНОСТЬ" Тогда
			Шаблон = НСтр("ru = 'Некорректно заполнен список ""%3"".
								|
								|%4'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ИмяПоля, НомерСтроки, ИмяСписка, ТекстСообщения);
	
КонецФункции

Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Процедура ВывестиРазделРеестра(ТабличныйДокумент, ТаблицаДанных, ПараметрыРаздела, ОбластиМакета)
	
	НаАванс    = ПараметрыРаздела.НаАванс;
	ЕстьВалюта = ПараметрыРаздела.ЕстьВалюта;
	
	Отбор = Новый Структура("НаАванс", НаАванс);
	ТаблицаРаздела = ТаблицаДанных.Скопировать(Отбор);
	ТаблицаРаздела.Сортировать("ДатаДокумента,НомерДокумента");
	
	ИмяОбластиЗаголовок = "Заголовок" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиСтрока    = "Строка" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ИмяОбластиИтоги     = "Итоги" + ?(НаАванс, "Авансы", "") + ?(ЕстьВалюта, "Валюта", "");
	ОбластьЗаголовок = ОбластиМакета[ИмяОбластиЗаголовок];
	ОбластьСтрока    = ОбластиМакета[ИмяОбластиСтрока];
	ОбластьИтоги     = ОбластиМакета[ИмяОбластиИтоги];
	
	// Заголовок
	Если НаАванс Тогда
		ОбластьЗаголовок.Параметры.ЗаголовокРаздела =
			?(ПараметрыРаздела.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
				НСтр("ru='Счета-фактуры по авансам, полученным от покупателя'"),
				НСтр("ru='Счета-фактуры по авансам, выданным поставщику'"));
	Иначе
		ОбластьЗаголовок.Параметры.ЗаголовокРаздела = 
			?(ПараметрыРаздела.ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
				НСтр("ru='Счета-фактуры по операциям реализации покупателю'"),
				НСтр("ru='Счета-фактуры по операциям поступления от поставщика'"));
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Строки
	НомерСтроки = 1;
	Для каждого СтрокаТаблицы Из ТаблицаРаздела Цикл
		ОбластьСтрока.Параметры.Заполнить(СтрокаТаблицы);
		ОбластьСтрока.Параметры.Ном = НомерСтроки;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Итоги по разделу - только если все счета-фактуры в одной валюте
	Если ЕстьВалюта Тогда
		ВсеКодыВалют = ТаблицаРаздела.ВыгрузитьКолонку("КодВалюты");
		КодыВалют = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КодыВалют, ВсеКодыВалют, Истина);
		ВыводитьИтоги = КодыВалют.Количество() < 2;
	Иначе
		ВыводитьИтоги = Истина;
	КонецЕсли;
	Если ВыводитьИтоги Тогда
		ОбластьИтоги.Параметры.СуммаДокумента = ТаблицаРаздела.Итог("СуммаДокумента");
		ОбластьИтоги.Параметры.СуммаНДС       = ТаблицаРаздела.Итог("СуммаНДС");
		Если НЕ НаАванс Тогда
			ОбластьИтоги.Параметры.СуммаДокументаРазницаУменьшение = ТаблицаРаздела.Итог("СуммаДокументаРазницаУменьшение");
			ОбластьИтоги.Параметры.СуммаДокументаРазницаУвеличение = ТаблицаРаздела.Итог("СуммаДокументаРазницаУвеличение");
			ОбластьИтоги.Параметры.СуммаНДСРазницаУменьшение = ТаблицаРаздела.Итог("СуммаНДСРазницаУменьшение");
			ОбластьИтоги.Параметры.СуммаНДСРазницаУвеличение = ТаблицаРаздела.Итог("СуммаНДСРазницаУвеличение");
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьИтоги);
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьТаблицуРеестраСчетовФактур(Параметры)
	
	ТаблицаРезультата = НоваяТаблицаРеестрСчетовФактур();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРеестрСчетовФактурОрганизации();
	
	Запрос.Параметры.Вставить("ЧастьЖурнала",       Параметры.ЧастьЖурнала);
	СписокОрганизаций  = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Параметры.Организация);
	Запрос.УстановитьПараметр("СписокОрганизаций",  СписокОрганизаций);
	Запрос.УстановитьПараметр("Контрагент",         Параметры.Контрагент);
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентовОтчета(Параметры.Контрагент));
	ПоВсемКонтрагентам = НЕ ЗначениеЗаполнено(Параметры.Контрагент);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", ПоВсемКонтрагентам);
	Запрос.УстановитьПараметр("НачалоКвартала",     НачалоКвартала(Параметры.НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецКвартала",      КонецКвартала(Параметры.НалоговыйПериод));
	Запрос.Параметры.Вставить("ВалютаРеглУчета",    Константы.ВалютаРегламентированногоУчета.Получить());
	КодыВидаОперацииНаАванс = Новый Массив;
	КодыВидаОперацииНаАванс.Добавить("02");
	КодыВидаОперацииНаАванс.Добавить("05");
	КодыВидаОперацииНаАванс.Добавить("12");
	Запрос.Параметры.Вставить("КодыВидаОперацииНаАванс", КодыВидаОперацииНаАванс);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ПодготовитьТаблицуСчетовФактурДляВыводаОтчета(ТаблицаРезультата);
	ТаблицаРезультата.Сортировать("ДатаДокумента,НомерДокумента");
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Процедура ПодготовитьТаблицуСчетовФактурДляВыводаОтчета(ТаблицаСчетовФактур)
	
	ТаблицаСчетовФактур.Колонки.Добавить("ЕстьИсправления", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетовФактур.Колонки.Добавить("ЕстьВалюта",      Новый ОписаниеТипов("Булево"));
	Для каждого СтрокаТаблицы Из ТаблицаСчетовФактур Цикл
		СтрокаТаблицы.ЕстьИсправления = ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправления)
			ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.НомерКорректировочногоСчетаФактуры);
		СтрокаТаблицы.ЕстьВалюта = СтрокаТаблицы.КодВалюты <> "643";
	КонецЦикла;
	
	ЕстьИсправления = ТаблицаСчетовФактур.Найти(Истина, "ЕстьИсправления") <> Неопределено;
	ЕстьВалюта      = ТаблицаСчетовФактур.Найти(Истина, "ЕстьВалюта") <> Неопределено;
	
	ТаблицаСчетовФактур.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаСчетовФактур.Колонки.Добавить("ДатаДокумента",  Новый ОписаниеТипов("Дата"));
	Если ЕстьИсправления Тогда
		ТаблицаСчетовФактур.Колонки.Добавить("НомерДатаИсправления",   Новый ОписаниеТипов("Строка"));
		ТаблицаСчетовФактур.Колонки.Добавить("НомерДатаКорректировки", Новый ОписаниеТипов("Строка"));
		ТаблицаСчетовФактур.Колонки.Добавить("НомерДатаИсправленияКорректировки", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ЕстьВалюта Тогда
		ТаблицаСчетовФактур.Колонки.Добавить("НаименованиеКодВалюты",  Новый ОписаниеТипов("Строка"));
		НаименованияВалют = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаСчетовФактур Цикл
		
		СтрокаТаблицы.ДатаДокумента  = СтрокаТаблицы.ДатаСчетаФактуры;
		СтрокаТаблицы.НомерДокумента = СтрокаТаблицы.НомерСчетаФактуры;
		Если ЕстьИсправления Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправления) Тогда
				СтрокаТаблицы.НомерДатаИсправления = СтрокаТаблицы.НомерИсправления + ";" 
					+ Формат(СтрокаТаблицы.ДатаИсправления, "ДЛФ=D");
			КонецЕсли;
			Если СтрокаТаблицы.НаАванс Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправления) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаИсправления;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправленияКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаИсправленияКорректировочногоСчетаФактуры;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаКорректировочногоСчетаФактуры;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ДатаИсправления) Тогда
					СтрокаТаблицы.ДатаДокумента = СтрокаТаблицы.ДатаИсправления;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.НомерДокумента = СтрокаТаблицы.НомерКорректировочногоСчетаФактуры;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.НомерДатаКорректировки = СтрокаТаблицы.НомерКорректировочногоСчетаФактуры + ";" 
						+ Формат(СтрокаТаблицы.ДатаКорректировочногоСчетаФактуры, "ДЛФ=D");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.НомерИсправленияКорректировочногоСчетаФактуры) Тогда
					СтрокаТаблицы.НомерДатаИсправленияКорректировки = СтрокаТаблицы.НомерИсправленияКорректировочногоСчетаФактуры + ";"
						+ Формат(СтрокаТаблицы.ДатаИсправленияКорректировочногоСчетаФактуры, "ДЛФ=D");
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если ЕстьВалюта
			И ЗначениеЗаполнено(СтрокаТаблицы.КодВалюты) Тогда
			НаименованиеВалюты = НаименованияВалют[СтрокаТаблицы.КодВалюты];
			Если НаименованиеВалюты = Неопределено Тогда
				НаименованиеВалюты = Строка(Справочники.Валюты.НайтиПоКоду(СтрокаТаблицы.КодВалюты));
				НаименованияВалют.Вставить(СтрокаТаблицы.КодВалюты, НаименованиеВалюты);
			КонецЕсли;
			СтрокаТаблицы.НаименованиеКодВалюты = НаименованиеВалюты + ";" + СтрокаТаблицы.КодВалюты;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокКонтрагентовОтчета(ВыбранныйКонтрагент)

	Если НЕ ЗначениеЗаполнено(ВыбранныйКонтрагент) Тогда
		Результат = Новый Массив;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.Ссылка = &Контрагент
		|			ИЛИ Контрагенты.ГоловнойКонтрагент = &Контрагент)";
		Запрос.УстановитьПараметр("Контрагент", ВыбранныйКонтрагент);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаРеестрСчетовФактур()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСчетаФактуры", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаСчетаФактуры",  Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НомерИсправления",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаИсправления",   Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НомерКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаКорректировочногоСчетаФактуры",  Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("НомерИсправленияКорректировочногоСчетаФактуры", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаИсправленияКорректировочногоСчетаФактуры",  Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КодВалюты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДС",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаДокументаРазницаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаДокументаРазницаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСРазницаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДСРазницаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("НаАванс",     Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СчетФактура", Документы.ТипВсеСсылки());
	
	Возврат Результат;
	
КонецФункции 

Функция ТекстXMLДляВыгрузкиОтчета(СтруктураДанных)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ИННПоставщика)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.ИННПокупателя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПространствоИмен = "http://www.v8.1c.ru/NDS/ReestrSF";
	
	Реестр = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Реестр"));
	
	ЗаполнитьЗначенияСвойств(Реестр, СтруктураДанных);
	
	Для каждого СтрокаТаблицы Из СтруктураДанных.ТаблицаДанных Цикл
		СтрокаСчетаФактуры = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "СтрокаСчетаФактуры"));
		Если СтрокаТаблицы.ЕстьИсправления Тогда
			Если СтрокаТаблицы.НаАванс Тогда
				ЗаполнитьЗначенияСвойств(СтрокаСчетаФактуры, СтрокаТаблицы,
					"НомерСчетаФактуры,ДатаСчетаФактуры,НомерИсправления,ДатаИсправления,КодВалюты,СуммаДокумента,СуммаНДС,НаАванс");
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаСчетаФактуры, СтрокаТаблицы);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаСчетаФактуры, СтрокаТаблицы,
				"НомерСчетаФактуры,ДатаСчетаФактуры,КодВалюты,СуммаДокумента,СуммаНДС,НаАванс");
		КонецЕсли;
		Реестр.СчетФактура.Добавить(СтрокаСчетаФактуры);
	КонецЦикла;
	
	Возврат ОбъектXDTOВСтрокуXML(Реестр);

КонецФункции

Функция ТекстЗапросаРеестрСчетовФактурОрганизации()
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодКонтрагента,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта.Код КАК КодВалюты,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КодВидаОперации В (&КодыВидаОперацииНаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаАванс,
	|	ИСТИНА КАК ДанныеОрганизации,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре) КАК СуммаДокумента,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение) КАК СуммаДокументаРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение) КАК СуммаДокументаРазницаУвеличение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение) КАК СуммаНДСРазницаУменьшение,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение) КАК СуммаНДСРазницаУвеличение
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Организация В(&СписокОрганизаций)
	|	И (&ПоВсемКонтрагентам
	|			ИЛИ ЖурналУчетаСчетовФактур.Контрагент В (&СписокКонтрагентов))
	|	И ЖурналУчетаСчетовФактур.ЧастьЖурнала = &ЧастьЖурнала
	|	И ЖурналУчетаСчетовФактур.Период = &НачалоКвартала
	|	И ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ПоВсемКонтрагентам
	|			ТОГДА ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ЖурналУчетаСчетовФактур.СчетФактура,
	|	ЖурналУчетаСчетовФактур.НомерСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправления,
	|	ЖурналУчетаСчетовФактур.ДатаИсправления,
	|	ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.НомерИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры,
	|	ЖурналУчетаСчетовФактур.Валюта.Код,
	|	ВЫБОР
	|		КОГДА ЖурналУчетаСчетовФактур.КодВидаОперации В (&КодыВидаОперацииНаАванс)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ";
	
	Возврат Результат;

КонецФункции

Функция ВсеОбластиМакета(Макет)
	
	Результат = Новый Структура;
	Для каждого Область Из Макет.Области Цикл
		Результат.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
	КонецЦикла;
	Возврат Результат;

КонецФункции 

Функция ОбъектXDTOВСтрокуXML(Знач ОбъектXDTO, Знач Фабрика = Неопределено) Экспорт
	
	ИнформацияОбОшибке = Неопределено;
	Попытка
		ОбъектXDTO.Проверить();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецЕсли;
	
	Если Фабрика = Неопределено Тогда
		Фабрика = ФабрикаXDTO;
	КонецЕсли;
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	Фабрика.ЗаписатьXML(Запись, ОбъектXDTO, , , , НазначениеТипаXML.Явное);
	
	Возврат Запись.Закрыть();
	
КонецФункции
