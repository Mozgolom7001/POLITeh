
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура вызывается перед записью организации в базу.
//
// Параметры:
//  Организация             - СправочникОбъект.КлассификаторОрганизацийЕГАИС - загружаемая организация,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеОрганизации(Организация, ДополнительныеПараметры) Экспорт



КонецПроцедуры

// Процедура вызывается перед записью алкогольной продукции в базу.
//
// Параметры:
//  АлкогольнаяПродукция - СправочникОбъект.КлассификаторАлкогольнойПродукцииЕГАИС - загружаемая алкогольная продукция,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеАлкогольнойПродукции(АлкогольнаяПродукция, ДополнительныеПараметры) Экспорт

	

КонецПроцедуры

// Процедура вызывается перед записью справки в базу.
//
// Параметры:
//  Справка - СправочникОбъект.СправкиА(Б)ЕГАИС - загружаемая справка,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеСправки(Справка, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

// Процедура вызывается при загрузке ТТН (перед записью).
//
// Параметры:
//  ТТН_Объект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации.
//
Процедура ПриЗагрузкеТТН(ТТН_Объект, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ТТН_Объект.Основание) Тогда
		
		ИДСтрокой = Лев(ТТН_Объект.Основание, 36);
		ТипУникальныйИдентификатор = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "UUID");
		Попытка
			ТипУникальныйИдентификатор.Проверить(ИДСтрокой);
			ИД = Новый УникальныйИдентификатор(ИДСтрокой);
			СсылкаНаПеремещение = Документы.ПеремещениеТоваров.ПолучитьСсылку(ИД);
			ОбъектПеремещение = СсылкаНаПеремещение.ПолучитьОбъект();
			Если ОбъектПеремещение <> Неопределено И Не ЗначениеЗаполнено(ОбъектПеремещение.ТТНВходящая) Тогда
				Если ТТН_Объект.ЭтоНовый() Тогда
					СсылкаНаТТН = ТТН_Объект.ПолучитьСсылкуНового();
					ТТН_Объект.УстановитьСсылкуНового(СсылкаНаТТН);
				Иначе
					СсылкаНаТТН = ТТН_Объект.Ссылка;
				КонецЕсли;
				ОбъектПеремещение.ТТНВходящая = СсылкаНаТТН;
				ОбъектПеремещение.Записать();
			КонецЕсли;
		Исключение
				
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при загрузке акта подтверждения ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНИсходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтТТН - Булево - признак загрузки акта отказа от ТТН,
//  ЕстьРасхождения - Булево - признак загрузки акта расхождений.
//
Процедура ПриЗагрузкеАктаПодтвержденияТТН(ТТН, ОтказОтТТН, ЕстьРасхождения) Экспорт
	
	
	
КонецПроцедуры

// Процедура вызывается при загрузке подтверждения акта расхождений ТТН.
//
// Параметры:
//  ТТН - ДокументСсылка.ТТНВходящаяЕГАИС - подтверждаемая ТТН,
//  ОтказОтАкта - Булево - признак загрузки отказа от акта расхождений ТТН,
//
Процедура ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(ТТН, ОтказОтАкта) Экспорт
	
	
	
КонецПроцедуры

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработки* - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработки* - новый статус обработки.
//
Процедура ПриИзмененииСтатусаОбработкиДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, УправляемаяФорма - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
//
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при определении настроек обмена с УТМ.
//
// Параметры:
//  ТранспортныйМодуль - Структура - данные транспортного модуля
//
Процедура ПриПолученииНастроекУТМ(ТранспортныйМодуль) Экспорт
	
	Если Не ТранспортныйМодуль.Свойство("ОбменНаСервере") Тогда
		ТранспортныйМодуль.Вставить("ОбменНаСервере", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеЗаполнения);
	Иначе
		
		РеквизитДокументОснование = ДокументОбъект.Метаданные().Реквизиты.Найти("ДокументОснование");
		Если РеквизитДокументОснование <> Неопределено Тогда
			ТипыДокументаОснования = РеквизитДокументОснование.Тип.Типы();
			Если ТипыДокументаОснования.Найти(ТипЗнч(ДанныеЗаполнения)) = Неопределено Тогда
				Сообщить("Неизвестный тип в данных заполнения для объекта """+ДокументОбъект.Метаданные().Синоним+"""");
				СтандартнаяОбработка = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Отказ = Ложь;
		ПроверитьСостояниеДокументаОснования(ДанныеЗаполнения, Отказ);
		Если Отказ Тогда
			ДокументОбъект.Комментарий = "Отказ";
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПередачаВТорговыйЗалЕГАИС") Тогда
			ЗаполнитьПередачуВТорговыйЗал(ДокументОбъект, ДанныеЗаполнения);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратИзТорговогоЗалаЕГАИС") Тогда
			ЗаполнитьВозвратИзТорговогоЗала(ДокументОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		Если ДокументОбъект.ОрганизацияЕГАИС = Неопределено ИЛИ ДокументОбъект.ОрганизацияЕГАИС.Пустая() Тогда
			Сообщить("Не удалось определить организацию ЕГАИС, создание документа невозможно.");
			ДокументОбъект.Комментарий = "Отказ";
		КонецЕсли;
		
		ДокументОбъект.ДокументОснование = ДанныеЗаполнения.Ссылка;
		ДокументОбъект.Дата = ТекущаяДата();
		
	КонецЕсли;
КонецПроцедуры

// Возвращает имя справочника, содержащего классификатор видов алкогольной продукции.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Строка   - имя справочника.
//
Функция СправочникВидовАлкогольнойПродукции() Экспорт

	Возврат "ВидыАлкогольнойПродукции";

КонецФункции // СправочникВидовАлкогольнойПродукции()

// Заполняет алкогольные реквизиты справочника Номенклатура по данным регистра сведений СведенияОбАлкогольнойПродукции.
//
// Параметры: нет.
//
Процедура ЗаполнитьРеквизитыАП() Экспорт
	
	ВключитьУчетАП = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбАлкогольнойПродукции.Номенклатура,
	|	СведенияОбАлкогольнойПродукции.ВидПродукции,
	|	СведенияОбАлкогольнойПродукции.ВидЛицензии,
	|	СведенияОбАлкогольнойПродукции.КоэффПересчетаДал,
	|	СведенияОбАлкогольнойПродукции.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции КАК Импортер
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции";

	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Номенклатура = Выборка.Номенклатура.ПолучитьОбъект(); 
			
			// Заполнение реквизитов
			ЕстьИзменения = Ложь;
			Если Не Номенклатура.АлкогольнаяПродукция Тогда
				Номенклатура.АлкогольнаяПродукция = Истина;
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если Не Номенклатура.ИмпортнаяАлкогольнаяПродукция = ЗначениеЗаполнено(Выборка.Импортер) Тогда
				Номенклатура.ИмпортнаяАлкогольнаяПродукция = ЗначениеЗаполнено(Выборка.Импортер);
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Номенклатура.ОбъемДАЛ) Тогда
				Номенклатура.ОбъемДАЛ = Выборка.КоэффПересчетаДал;
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Номенклатура.ВидАлкогольнойПродукцииЕГАИС) Тогда
				Номенклатура.ВидАлкогольнойПродукцииЕГАИС = Выборка.ВидПродукции;
				ЕстьИзменения = Истина;
			КонецЕсли;

			Если Не ЕстьИзменения Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				Номенклатура.Записать();
				ВключитьУчетАП = Истина;
			Исключение
				ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла
		
	КонецЕсли;
	
	Если ВключитьУчетАП Тогда
		Константы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя перечисления, содержащего классификатор видов лицензий алкогольной продукции.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Строка   - имя справочника.
//
Функция ВидыЛицензийАлкогольнойПродукции() Экспорт

	Возврат "ВидыЛицензийАлкогольнойПродукции";

КонецФункции // ВидыЛицензийАлкогольнойПродукции()

// Возвращает имя реквизита справочника видов алкогольной продукции, содержащего код вида.
//
// Параметры: нет.
//
// Возвращаемое значение:
//   Строка   - имя реквизита.
//
Функция ИмяКодаВидаПродукции() Экспорт
	Возврат "КодВидаПродукции";
КонецФункции

// Возвращает пустую таблицу товаров, необходимую для подписи чека в ЕГАИС
//
// Возвращаемое значение
//  ТаблицаЗначений
//
Функция ТаблицаТоваровДляПодписиЧека() Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Наименование");
	ТаблицаТоваров.Колонки.Добавить("НомерСекции");
	ТаблицаТоваров.Колонки.Добавить("Цена");
	ТаблицаТоваров.Колонки.Добавить("Количество");
	ТаблицаТоваров.Колонки.Добавить("Скидка");
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");
	ТаблицаТоваров.Колонки.Добавить("ПараметрыАлкогольнойПродукции");
	
	Возврат ТаблицаТоваров;
	
КонецФункции

//Устанавливает значение константы по умолчанию
//
Процедура УстановитьЗначениеДатаНачалаПримененияПриказа164() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ДатаНачалаПримененияПриказа164.Получить()) Тогда
		Константы.ДатаНачалаПримененияПриказа164.Установить(Дата(2016, 1, 1));
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает значение константы по умолчанию
//
Процедура УстановитьЗначениеДатаНачалаРегистрацииРозничныхПродажВЕГАИС() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Получить()) Тогда
		Константы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Установить(Дата(2016, 7, 1));
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыШапки_ТТН_ЕГАИС() Экспорт
	Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.ДатаТТН КАК ДатаВходящегоДокумента,
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТоварноТранспортнаяНакладнаяЕГАИС,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|	ТТНВходящаяЕГАИС.Грузоотправитель КАК Грузоотправитель,
	|	ТТНВходящаяЕГАИС.Грузополучатель КАК Грузополучатель
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВЗапросе.НомерВходящегоДокумента,
	|	ТаблицаВЗапросе.ДатаВходящегоДокумента,
	|	ТаблицаВЗапросе.ТоварноТранспортнаяНакладнаяЕГАИС КАК ДокЕГАИС,
	|	ВЫБОР
	|		КОГДА СоответствиеОрганизацийЕГАИС.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ СоответствиеОрганизацийЕГАИС.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА СоответствиеОрганизацийЕГАИСГрузоотправитель.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ СоответствиеОрганизацийЕГАИСГрузоотправитель.Контрагент
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА СоответствиеОрганизацийЕГАИСГрузополучатель.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ СоответствиеОрганизацийЕГАИСГрузополучатель.Контрагент
	|	КОНЕЦ КАК Грузополучатель
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИСГрузоотправитель
	|		ПО ТаблицаВЗапросе.Грузоотправитель = СоответствиеОрганизацийЕГАИСГрузоотправитель.ОрганизацияЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИСГрузополучатель
	|		ПО ТаблицаВЗапросе.Грузополучатель = СоответствиеОрганизацийЕГАИСГрузополучатель.ОрганизацияЕГАИС";
	Возврат Текст;
КонецФункции

Функция ТекстЗапросаРеквизитыТЧ_ТТН_ЕГАИС() Экспорт
	Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Количество,
	|	ТТНВходящаяЕГАИСТовары.Количество КАК КоличествоУпаковок,
	|	ТТНВходящаяЕГАИСТовары.Сумма,
	|	ТТНВходящаяЕГАИСТовары.Цена,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторУпаковки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЕГАИС.АлкогольнаяПродукция,
	|	ТаблицаЕГАИС.Количество,
	|	ТаблицаЕГАИС.КоличествоУпаковок,
	|	ТаблицаЕГАИС.Сумма,
	|	ТаблицаЕГАИС.Цена,
	|	ТаблицаЕГАИС.ИдентификаторУпаковки,
	|	ТаблицаЕГАИС.ИдентификаторСтроки,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИскатьСоответствиеБезУпаковок
	|ПОМЕСТИТЬ ТаблицаСоответствий
	|ИЗ
	|	ТаблицаЕГАИС КАК ТаблицаЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаЕГАИС.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|			И ТаблицаЕГАИС.ИдентификаторУпаковки = СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.АлкогольнаяПродукция,
	|	ТаблицаСоответствий.Количество,
	|	ТаблицаСоответствий.КоличествоУпаковок,
	|	ТаблицаСоответствий.Сумма,
	|	ТаблицаСоответствий.Цена,
	|	ТаблицаСоответствий.ИдентификаторУпаковки,
	|	ТаблицаСоответствий.ИдентификаторСтроки,
	|	ТаблицаСоответствий.Номенклатура,
	|	ТаблицаСоответствий.Характеристика,
	|	ТаблицаСоответствий.ЕдиницаИзмерения,
	|	ТаблицаСоответствий.ИскатьСоответствиеБезУпаковок
	|ПОМЕСТИТЬ ТаблицаПодготовкаДополнительногоПоиска
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий
	|ГДЕ
	|	ТаблицаСоответствий.ИскатьСоответствиеБезУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДополнительногноПоиска.АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения = &ЕдиницаИзмеренияПустоеЗначение
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПараметрРанжирования,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаПодготовкаДополнительногоПоиска КАК ТаблицаДополнительногноПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаДополнительногноПоиска.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрРанжирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.АлкогольнаяПродукция,
	|	ТаблицаСоответствий.Количество,
	|	ТаблицаСоответствий.КоличествоУпаковок,
	|	ТаблицаСоответствий.Сумма,
	|	ТаблицаСоответствий.Цена,
	|	ТаблицаСоответствий.ИдентификаторУпаковки,
	|	ТаблицаСоответствий.ИдентификаторСтроки,
	|	ТаблицаСоответствий.Номенклатура,
	|	ТаблицаСоответствий.Характеристика,
	|	ТаблицаСоответствий.ЕдиницаИзмерения,
	|	ТаблицаСоответствий.ИскатьСоответствиеБезУпаковок
	|ИЗ
	|	ТаблицаСоответствий КАК ТаблицаСоответствий";
	Возврат Текст;
КонецФункции

Процедура ЗаполнитьТЧДокументаИБПоДаннымЕГАИС(ТаблицаДанныеЕГАИС, ТаблицаДополнительныхДанные, ДокументОбъект) Экспорт
	
	ЗаполнятьСтавкуНДС = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", 
		ДокументОбъект.Метаданные(), "Товары");
		
	ЗаполнятьСклад = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Склад", 
		ДокументОбъект.Метаданные(), "Товары");

	ЗаполнятьКачество = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Качество", 
		ДокументОбъект.Метаданные(), "Товары");
		
	Если ЗаполнятьСклад Тогда
		СкладШапки = СкладИзШапкиДокумента(ДокументОбъект);
	КонецЕсли;
	
	Для Каждого СтрокаДанныхЕГАИС Из ТаблицаДанныеЕГАИС Цикл
		СтрокаТаблицы = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДанныхЕГАИС);
		
		Если СтрокаДанныхЕГАИС.ИскатьСоответствиеБезУпаковок Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("АлкогольнаяПродукция", СтрокаДанныхЕГАИС.АлкогольнаяПродукция);
			
			МассивСтрок = ТаблицаДополнительныхДанные.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МассивСтрок[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			
			Если ЗаполнятьКачество Тогда
				СтрокаТаблицы.Качество = Справочники.Качество.Новый;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения) Тогда
				СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицы.Номенклатура.ЕдиницаХраненияОстатков;
			КонецЕсли;
			
			СтрокаТаблицы.Коэффициент = СтрокаТаблицы.ЕдиницаИзмерения.Коэффициент;
			Если ЗаполнятьСтавкуНДС Тогда
				СтрокаТаблицы.СтавкаНДС   = СтрокаТаблицы.Номенклатура.СтавкаНДС;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТаблицы, ДокументОбъект);
			
			Если ЗаполнятьСтавкуНДС Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДокументОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗаполнятьСклад Тогда		
			СтрокаТаблицы.Склад = СкладШапки;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращается структуру для установки отбора по умолчанию при выборе ТТН Входящей ЕГАИС
// Ключи в структуре должны соответствовать именам доступных полей отбора списка в форме выбора ТТН Входящей ЕГАИС
//
Функция ПараметрыОтбораДокЕГАИС(ДокументИБ, ИмяРеквизитаЕГАИС) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	
	Если ТипЗнч(ДокументИБ) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		ДобавитьПараметрыОтбораПеремещения(ДокументИБ, ПараметрыОтбора);
	ИначеЕсли ТипЗнч(ДокументИБ) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		ДобавитьПараметрыОтбораОтчетаОРозничныхПродажах(ДокументИБ, ПараметрыОтбора);
	Иначе
		ДобавитьПараметрыОтбораОбычногоДокумента(ДокументИБ, ПараметрыОтбора);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("СтатусОбработки", РедактируемыеСтатусы(ДокументИБ[ИмяРеквизитаЕГАИС]));
	
	ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ИмяРеквизитаЕГАИС = "ТТНИсходящая" Тогда
		Направление = "Исходящий";
	ИначеЕсли ИмяРеквизитаЕГАИС = "ТТНВходящая" Тогда
		Направление = "Входящий";
	КонецЕсли;
	ВидОперацииЕГАИС = ВидОперацииЕГАИСпоВидуОперацииДокументаИБ(ДокументИБ, Направление);
	Если ЗначениеЗаполнено(ВидОперацииЕГАИС) Тогда
		ПараметрыОтбора.Вставить("ВидОперации", ВидОперацииЕГАИС);
	КонецЕсли;

	Возврат ПараметрыОтбора;
	
КонецФункции

Процедура ДобавитьПараметрыОтбораОбычногоДокумента(ДокументИБ, ПараметрыОтбора)
	
	РеквизитыДокумента = ДокументИБ.Метаданные().Реквизиты;

	Если РеквизитыДокумента.Найти("Склад") <> Неопределено Тогда
		ИмяРеквизитаСклад = "Склад";
	Иначе
		ИмяРеквизитаСклад = "СкладОрдер";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументИБ.Контрагент) Тогда
		ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Контрагент);
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ПараметрыОтбора.Вставить("Грузоотправитель", ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументИБ.Организация) Тогда
		ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ[ИмяРеквизитаСклад]);
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ПараметрыОтбора.Вставить("Грузополучатель", ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыДокумента.Найти("Грузоотправитель") <> Неопределено И ЗначениеЗаполнено(ДокументИБ.Грузоотправитель) Тогда
		ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Грузоотправитель);
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ПараметрыОтбора.Вставить("Грузоотправитель", ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыДокумента.Найти("Грузополучатель") <> Неопределено И ЗначениеЗаполнено(ДокументИБ.Грузополучатель) Тогда
		ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Грузополучатель, ДокументИБ[ИмяРеквизитаСклад]);
		Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
			ПараметрыОтбора.Вставить("Грузополучатель", ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрыОтбораПеремещения(ДокументИБ, ПараметрыОтбора)
	
	ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.СкладОтправитель);
	Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		ПараметрыОтбора.Вставить("Грузоотправитель", ОрганизацияЕГАИС);
	КонецЕсли;
	
	ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.СкладПолучатель);
	Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		ПараметрыОтбора.Вставить("Грузополучатель", ОрганизацияЕГАИС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПараметрыОтбораОтчетаОРозничныхПродажах(ДокументИБ, ПараметрыОтбора)
	
	ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад);
	Если ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		ПараметрыОтбора.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала);

КонецПроцедуры

// Выполняет сопоставление документов
//
// Параметры:
//  ТТН_ЕГАИС  - ДокументСсылка.ТТНВходящаяЕГАИС
//  ДокументИБ - ДокументОбъект.ПоступлениеТоваровУслуг, ДокументОбъект.ПриходныйОрдерНаТовары, ДокументОбъект.ВозвратТоваровОтПокупателя
//
Процедура ВыполнитьСопоставление(ТТН_ЕГАИС, ДокументИБ, ЗаполнятьТЧ) Экспорт
	
	// Заполнение шапки
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРеквизитыШапки_ТТН_ЕГАИС();
	Запрос.УстановитьПараметр("Ссылка", ТТН_ЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТЗ = Результат.Выгрузить();
		СтрокаТЗ = ТЗ[0];
		
		РеквизитыДокумента = ДокументИБ.Метаданные().Реквизиты;
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			ИмяРеквизита = Колонка.Имя;
			Если РеквизитыДокумента.Найти(ИмяРеквизита) <> Неопределено Тогда
				ЗначениеРеквизита = СтрокаТЗ[ИмяРеквизита];
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДокументИБ[ИмяРеквизита] = ЗначениеРеквизита;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	РеквизитыДокумента = ДокументИБ.Метаданные().Реквизиты;
	Если РеквизитыДокумента.Найти("Склад") <> Неопределено Тогда
		ИмяРеквизитаСклад = "Склад";
	Иначе
		ИмяРеквизитаСклад = "СкладОрдер";
	КонецЕсли;

	ИдентификаторФСРАР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТН_ЕГАИС.Грузополучатель, "Код");
	ВыборкаНастроек = РегистрыСведений.НастройкиОбменаЕГАИС.Выбрать(Новый Структура("ИдентификаторФСРАР", ИдентификаторФСРАР));
	Если ВыборкаНастроек.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаНастроек.Организация) Тогда
			ДокументИБ.Организация = ВыборкаНастроек.Организация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаНастроек.Склад) Тогда
			ДокументИБ[ИмяРеквизитаСклад] = ВыборкаНастроек.Склад;
		КонецЕсли;
	КонецЕсли;

	// Заполнение табличной части
	Если Не ЗаполнятьТЧ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРеквизитыТЧ_ТТН_ЕГАИС();
	
	Запрос.УстановитьПараметр("Ссылка", ТТН_ЕГАИС);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияПустоеЗначение", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаДанныеЕГАИС = Результат[4].Выгрузить();
	ТаблицаДополнительныхДанные = Результат[3].Выгрузить();

	ЗаполнитьТЧДокументаИБПоДаннымЕГАИС(ТаблицаДанныеЕГАИС, ТаблицаДополнительныхДанные, ДокументИБ);
	
КонецПроцедуры

// Начало
Функция ТипыИсходящихДокументов()
	Результат = Новый Массив;
	Результат.Добавить(Тип("ДокументСсылка.ОприходованиеТоваров")); 
	Результат.Добавить(Тип("ДокументСсылка.СписаниеТоваров"));
	Результат.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
	Результат.Добавить(Тип("ДокументСсылка.РасходныйОрдерНаТовары"));
	Результат.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	Возврат Результат;
КонецФункции

Функция ТипыВходящихДокументов()
	Результат = Новый Массив;
	Результат.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	Результат.Добавить(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"));
	Возврат Результат;
КонецФункции

Функция ЭтоИсходящийДокументЕГАИС(ЭтотОбъект) Экспорт
	
	ТД = ТипыИсходящихДокументов();
	Возврат ТД.Найти(ТипЗнч(ЭтотОбъект.Ссылка)) <> Неопределено;
	
КонецФункции

Функция ЭтоВходящийДокументЕГАИС(ЭтотОбъект) Экспорт
	
	ТД = ТипыВходящихДокументов();
	Возврат ТД.Найти(ТипЗнч(ЭтотОбъект.Ссылка)) <> Неопределено;
		
КонецФункции

Функция ВидОперацииЕГАИСпоВидуОперацииДокументаИБ(ДокументИБ, Направление = Неопределено)
	
	Результат = Неопределено;
	
	ИмяТипаДокумента = ДокументИБ.Метаданные().Имя;
	Если ИмяТипаДокумента = "ПоступлениеТоваровУслуг" Тогда
		Результат = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
	ИначеЕсли ИмяТипаДокумента = "ВозвратТоваровПоставщику" Тогда
		Результат = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику;
	ИначеЕсли ИмяТипаДокумента = "ВозвратТоваровОтПокупателя" Тогда
		Результат = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя;
	КонецЕсли;
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВидОперации = ДокументИБ.ВидОперации;
	Если ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРеализацияТоваров") Тогда
		Результат = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная;
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийРасходныйОрдер") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			Результат = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
			Результат = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПриходныйОрдер") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.Перемещение Тогда
			Результат = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя Тогда
			Результат = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВидОперации) = Тип("ПеречислениеСсылка.ВидыОперацийПеремещениеТоваров") Тогда
		Если ВРег(Направление) = "ИСХОДЯЩИЙ" Тогда
			Результат = Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная;
		ИначеЕсли ВРег(Направление) = "ВХОДЯЩИЙ" Тогда
			Результат = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция НачальныйСтатусДокументаЕГАИС(ДокЕГАИС)
	
	Результат = Неопределено;
	
	ИмяТипаДокумента = ДокЕГАИС.Метаданные().Имя;
	Если ИмяТипаДокумента = "АктПостановкиНаБалансЕГАИС" Тогда
		Результат = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый;
	ИначеЕсли ИмяТипаДокумента = "АктСписанияЕГАИС" Тогда
		Результат = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый;
	ИначеЕсли ИмяТипаДокумента = "ТТНИсходящаяЕГАИС" Тогда
		Результат = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиОрганизациюЕГАИС(СправочникИБ, Склад = Неопределено) Экспорт
	
	Если ТипЗнч(СправочникИБ) = Тип("СправочникСсылка.Контрагенты") И Склад = Неопределено Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС
		               |ИЗ
		               |	РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
		               |ГДЕ
		               |	СоответствиеОрганизацийЕГАИС.Контрагент = &СправочникИБ";
		ПараметрОтбора = СправочникИБ;
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		               |	0 КАК Приоритет
		               |ПОМЕСТИТЬ втНастройки
		               |ИЗ
		               |	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		               |ГДЕ
		               |	НастройкиОбменаЕГАИС.Организация = &СправочникИБ
		               |	И НастройкиОбменаЕГАИС.Склад = &Склад
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		               |	1
		               |ИЗ
		               |	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		               |ГДЕ
		               |	НастройкиОбменаЕГАИС.Организация = &СправочникИБ
		               |	И НастройкиОбменаЕГАИС.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		               |	2
		               |ИЗ
		               |	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		               |ГДЕ
		               |	НастройкиОбменаЕГАИС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		               |	И НастройкиОбменаЕГАИС.Склад = &Склад
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		               |	3
		               |ИЗ
		               |	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		               |ГДЕ
		               |	НастройкиОбменаЕГАИС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		               |	И НастройкиОбменаЕГАИС.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
		               |	втНастройки.ИдентификаторФСРАР,
		               |	втНастройки.Приоритет
		               |ИЗ
		               |	втНастройки КАК втНастройки
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		               |		ПО втНастройки.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	втНастройки.Приоритет";
		Если ТипЗнч(СправочникИБ) = Тип("СправочникСсылка.Контрагенты") Тогда
			ПараметрОтбора = ЗаполнениеДокументов.ПолучитьОрганизациюПоКонтрагенту(СправочникИБ);
		Иначе
			ПараметрОтбора = СправочникИБ;
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("СправочникИБ", ПараметрОтбора);
		Запрос.УстановитьПараметр("Склад", ?(Склад = Неопределено, Справочники.Склады.ПустаяСсылка(), Склад));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОрганизацияЕГАИС;
	
КонецФункции

Функция ТекстСостоянияДокумента(ДокументОбъект) Экспорт
	
	Результат = "";
	
	Если Не глЗначениеПеременной("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЭтоИсходящийДокументЕГАИС(ДокументОбъект) Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокЕГАИС) Тогда
			СтатусДокЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокЕГАИС, "СтатусОбработки");
			ТекстовыйСтатус = Строка(СтатусДокЕГАИС);
			Если СтатусДокЕГАИС = НачальныйСтатусДокументаЕГАИС(ДокументОбъект.ДокЕГАИС)
				ИЛИ Не ЗначениеЗаполнено(ТекстовыйСтатус) Тогда
				ТекстовыйСтатус = "Сопоставлен с документом ЕГАИС";
			КонецЕсли;
			Результат = ". " + ТекстовыйСтатус + ".";
		КонецЕсли;
		
	ИначеЕсли ЭтоВходящийДокументЕГАИС(ДокументОбъект) Тогда
		
		Если ЗначениеЗаполнено(ДокументОбъект.ДокЕГАИС) Тогда
			СтатусДокЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДокЕГАИС, "СтатусОбработки");
			ТекстовыйСтатус = Строка(СтатусДокЕГАИС);
			Если Не ЗначениеЗаполнено(ТекстовыйСтатус) Тогда
				ТекстовыйСтатус = "Ошибка получения статуса документа ЕГАИС";
			КонецЕсли;
			Результат = ". " + ТекстовыйСтатус + ".";
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ДокЕГАИС = "";
		СостояниеДокумента = ОпределитьСостояниеПеремещения(ДокументОбъект, ДокЕГАИС);
		Если ЗначениеЗаполнено(ДокЕГАИС) Тогда
			СтатусДокЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокЕГАИС, "СтатусОбработки");
			ТекстовыйСтатус = Строка(СтатусДокЕГАИС);
			Если СостояниеДокумента = "Исходящий" Тогда
				Если СтатусДокЕГАИС = НачальныйСтатусДокументаЕГАИС(ДокЕГАИС)
					ИЛИ Не ЗначениеЗаполнено(ТекстовыйСтатус) Тогда
					ТекстовыйСтатус = "Сопоставлен с документом ЕГАИС";
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(ТекстовыйСтатус) Тогда
					ТекстовыйСтатус = "Ошибка получения статуса документа ЕГАИС";
				КонецЕсли;
			КонецЕсли;
			Результат = ". " + ТекстовыйСтатус + ".";
		КонецЕсли;
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СкладИзШапкиДокумента(ДокументОбъект)
	Результат = Справочники.Склады.ПустаяСсылка();
	РеквизитыДокумента = ДокументОбъект.Метаданные().Реквизиты;
	Если РеквизитыДокумента.Найти("СкладОрдер") <> Неопределено Тогда
		Если ТипЗнч(ДокументОбъект.СкладОрдер) = Тип("СправочникСсылка.Склады") Тогда
			Результат = ДокументОбъект.СкладОрдер;
		КонецЕсли;
	ИначеЕсли РеквизитыДокумента.Найти("Склад") <> Неопределено Тогда
		Результат = ДокументОбъект.Склад;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция НайтиДокументИБПоДокументуЕГАИС(ДокЕГАИС, Направление = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляПоискаДокументаИБ(Направление);
	Запрос.УстановитьПараметр("ДокЕГАИС", ДокЕГАИС);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура("Ссылка");
	Если Выборка.Следующий() Тогда
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Результат.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДляПоискаДокументаИБ(Направление = Неопределено)
	
	ТипыИсходящих = ТипыИсходящихДокументов();
	ТипыВходящих  = ТипыВходящихДокументов();
	ТипыДокументов = Новый Массив;
	Если ВРег(Направление) = "ИСХОДЯЩИЙ" Тогда
		ТипыДокументов = ТипыИсходящих;
	ИначеЕсли ВРег(Направление) = "ВХОДЯЩИЙ" Тогда
		ТипыДокументов = ТипыВходящих;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыИсходящих);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыДокументов, ТипыВходящих );
	КонецЕсли;
	
	ВсегоТипов = ТипыДокументов.Количество();
	ТекстЗапроса = "";
	Для Сч = 0 По ВсегоТипов - 1 Цикл
		ТипДокумента = ТипыДокументов[Сч];
		Ссылка = ОбщегоНазначения.ПустоеЗначениеТипа(ТипДокумента);
		ИмяТипа = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
		ТекстЗапроса = ТекстЗапроса + "
	               |ВЫБРАТЬ
	               |	Док.Ссылка,
	               |	Док.Представление
	               |ИЗ
	               |	"+ИмяТипа+" КАК Док
	               |ГДЕ
	               |	Док.ДокЕГАИС = &ДокЕГАИС
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
				   |";
	КонецЦикла;
	ИмяРеквизита = ИмяРеквизитаЕГАИС(Документы.ПеремещениеТоваров.ПустаяСсылка(), Направление);
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	                              |	ПеремещениеТоваров.Ссылка,
	                              |	ПеремещениеТоваров.Представление
	                              |ИЗ
	                              |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                              |ГДЕ
	                              |	ПеремещениеТоваров."+ИмяРеквизита+" = &ДокЕГАИС";
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьСписокСкладовИзНастроекЕГАИС(Отбор) Экспорт
	ТранспортныеМодули = РегистрыСведений.НастройкиОбменаЕГАИС.ДоступныеТранспортныеМодули(Отбор);
	СписокСкладов = Новый СписокЗначений;
	Для Каждого ТМ Из ТранспортныеМодули Цикл
		Если СписокСкладов.НайтиПоЗначению(ТМ.Склад) = Неопределено И ЗначениеЗаполнено(ТМ.Склад) Тогда
			СписокСкладов.Добавить(ТМ.Склад);
		КонецЕсли;
	КонецЦикла;
	Возврат СписокСкладов;
КонецФункции

#Если Клиент Тогда
// Работа с формами прикладных документов //

Процедура УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма) Экспорт
	
	УчетАлкоголяВключен = глЗначениеПеременной("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ЭлементыФормы = ЭтаФорма.ЭлементыФормы;
	ЭтотОбъект = ЭтаФорма.ДокументОбъект;
	
	Если ЭтоИсходящийДокументЕГАИС(ЭтотОбъект) Тогда
		УстановитьСвойстваЭлементовФормыИсходящегоДокумента(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
	ИначеЕсли ЭтоВходящийДокументЕГАИС(ЭтотОбъект) Тогда
		УстановитьСвойстваЭлементовФормыВходящегоДокумента(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		УстановитьСвойстваЭлементовФормыВозврата(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
	Иначе
		УстановитьСвойстваЭлементовФормыПеремещения(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИнформациюНаФормеДокумента(ЭтотОбъект, ЭтаФорма)
	
	Если ЭтотОбъект.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		СтрокаВидОперации = Строка(ЭтотОбъект.ВидОперации);
	Иначе
		СтрокаВидОперации =  "";
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(СтрокаВидОперации, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Исходящие документы
Процедура УстановитьСвойстваЭлементовФормыИсходящегоДокумента(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	ВидимостьЕГАИС = УчетАлкоголяВключен И ВыбранПодходящийВидОперации(ЭтотОбъект);
	Если ЭтотОбъект.Метаданные().Реквизиты.Найти("ВидПередачи") <> Неопределено Тогда
		ВидимостьЕГАИС = ВидимостьЕГАИС И 
			ЭтотОбъект.ВидПередачи <> Перечисления.ВидыПередачиТоваров.ПоОрдеру;
	КонецЕсли;
	
	ЭлементыФормы.НадписьДокЕГАИС.Видимость = ВидимостьЕГАИС;
	ЭлементыФормы.ДокЕГАИС.Видимость        = ВидимостьЕГАИС;
	РамкаЕГАИС = ЭлементыФормы.Найти("РамкаДополнительнаяИнформацияЕГАИС");
	Если РамкаЕГАИС <> Неопределено Тогда
		РамкаЕГАИС.Видимость = ВидимостьЕГАИС;
	КонецЕсли;
	
	Если Не ВидимостьЕГАИС Тогда
		РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.ДействияФормы.Кнопки, "ЕГАИС");
		РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.КоманднаяПанельТовары.Кнопки, "ЕГАИС");
	Иначе
		ДобавитьПодменюЕГАИСвКоманднуюПанельФормыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
		ДобавитьПодменюЕГАИСвКоманднуюПанельТоварыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
		
		ЭлементыФормы.ДокЕГАИС.УстановитьДействие("ПриИзменении", Новый Действие("ДокЕГАИСПриИзменении"));
		Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
			ЭлементыФормы.ДокЕГАИС.УстановитьДействие("НачалоВыбора",    Новый Действие("ДокЕГАИСНачалоВыбора"));
			ЭлементыФормы.ДокЕГАИС.УстановитьДействие("ОбработкаВыбора", Новый Действие("ДокЕГАИСОбработкаВыбора"));
		КонецЕсли;
	КонецЕсли;
	
	// Работа с торговым залом
	НастроитьПодменюЕГАИСДляТорговогоЗала(ЭлементыФормы, ЭтотОбъект, ВидимостьЕГАИС);
	// Работа с торговым залом
	
	ОбновитьИнформациюНаФормеДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ДобавитьПодменюЕГАИСвКоманднуюПанельФормыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект)

	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);
	ВидДокумента = ЭтотОбъект.Метаданные().Имя;
	
	КнопкиКП = ЭлементыФормы.ДействияФормы.Кнопки;
	кЕГАИС = КнопкиКП.Найти("ЕГАИС");
	Если кЕГАИС = Неопределено Тогда
		кРазделительЕГАИС = КнопкиКП.Найти("РазделительЕГАИС");
		Если кРазделительЕГАИС = Неопределено Тогда
			кРазделительЕГАИС = КнопкиКП.Добавить("РазделительЕГАИС", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		кЕГАИС = КнопкиКП.Добавить("ЕГАИС", ТипКнопкиКоманднойПанели.Подменю, "ЕГАИС");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаЕГАИС]) Тогда
		ТекстНаКнопке = ТекстКнопки("Создать", ВидДокумента);
		КартинкаНаКнопке = БиблиотекаКартинок.СоздатьДокумент;
		ДоступностьКнопки = Истина;
	Иначе
		ТекстНаКнопке = ТекстКнопки("Перезаполнить", ВидДокумента);
		КартинкаНаКнопке = БиблиотекаКартинок.Исправить;
		СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект[ИмяРеквизитаЕГАИС], "Статусобработки");
		ДоступностьКнопки = РедактируемыеСтатусы(ЭтотОбъект[ИмяРеквизитаЕГАИС]).Найти(СтатусОбработки) <> Неопределено;
	КонецЕсли;
	
	кСоздатьПерезаполнить = кЕГАИС.Кнопки.Найти("СоздатьПерезаполнитьДокЕГАИС");
	Если кСоздатьПерезаполнить = Неопределено Тогда
		кСоздатьПерезаполнить = кЕГАИС.Кнопки.Добавить("СоздатьПерезаполнитьДокЕГАИС", ТипКнопкиКоманднойПанели.Действие, 
			ТекстНакнопке, Новый Действие("ДействияФормыСоздатьПерезаполнитьДокЕГАИС"));
	КонецЕсли;
	кСоздатьПерезаполнить.Текст = ТекстНаКнопке;
	кСоздатьПерезаполнить.Подсказка = ТекстНаКнопке;
	кСоздатьПерезаполнить.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	кСоздатьПерезаполнить.Картинка = КартинкаНаКнопке;
	кСоздатьПерезаполнить.Доступность = ДоступностьКнопки;
	
	Если ТипЗнч(Этотобъект) <> Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаЕГАИС]) Тогда
			ТекстНаКнопке = ТекстКнопки("Открыть", ВидДокумента);
			ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, "ОткрытьДокЕГАИС", ТекстНаКнопке, "ДействияФормыОткрытьДокЕГАИС");
		Иначе
			РаботаСДиалогами.УдалитьКнопки(кЕГАИС.Кнопки, "ОткрытьДокЕГАИС");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект.ТТНИсходящая) Тогда
			ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, "ОткрытьТТНИ", "Открыть ТТН (исходящую)", "ДействияФормыОткрытьДокЕГАИС");
		Иначе
			РаботаСДиалогами.УдалитьКнопки(кЕГАИС.Кнопки, "ОткрытьТТНИ");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.ТТНВходящая) Тогда
			ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, "ОткрытьТТНВ", "Открыть ТТН (входящую)", "ДействияФормыОткрытьДокЕГАИС");
		Иначе
			РаботаСДиалогами.УдалитьКнопки(кЕГАИС.Кнопки, "ОткрытьТТНВ");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодменюЕГАИСвКоманднуюПанельТоварыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект)
	
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);

	КнопкиКП = ЭлементыФормы.КоманднаяПанельТовары.Кнопки;
	кЕГАИС = КнопкиКП.Найти("ЕГАИС");
	Если кЕГАИС = Неопределено Тогда
		кЕГАИС = КнопкиКП.Добавить("ЕГАИС", ТипКнопкиКоманднойПанели.Подменю, "ЕГАИС");
		кСопоставитьНоменклатуру = кЕГАИС.Кнопки.Добавить("СопоставитьНоменклатуру", ТипКнопкиКоманднойПанели.Действие, 
			"Сопоставить номенклатуру...", Новый Действие("КоманднаяПанельТоварыСопоставитьНоменклатуру"));
	КонецЕсли;

КонецПроцедуры

// Входящие документы
Процедура УстановитьСвойстваЭлементовФормыВходящегоДокумента(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	ВидимостьЕГАИС = УчетАлкоголяВключен И ВыбранПодходящийВидОперации(ЭтотОбъект);
	Если ЭтотОбъект.Метаданные().Реквизиты.Найти("ВидПоступления") <> Неопределено Тогда
		ВидимостьЕГАИС = ВидимостьЕГАИС И 
			ЭтотОбъект.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру;
	КонецЕсли;
	
	// Обработка статических элементов формы
	ЭлементыФормы.НадписьДокЕГАИС.Видимость = ВидимостьЕГАИС;
	ЭлементыФормы.ДокЕГАИС.Видимость        = ВидимостьЕГАИС;
	РамкаЕГАИС = ЭлементыФормы.Найти("РамкаДополнительнаяИнформацияЕГАИС");
	Если РамкаЕГАИС <> Неопределено Тогда
		РамкаЕГАИС.Видимость = ВидимостьЕГАИС;
	КонецЕсли;
	Если Не ВидимостьЕГАИС Тогда
		РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.ДействияФормы.Кнопки, "ЕГАИС");
		РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.КоманднаяПанельТовары.Кнопки, "ЕГАИС");
		УдалитьКолонкиИзТабличногоПоляТовары(ЭлементыФормы);
	Иначе
		ДобавитьПодменюЕГАИСвКоманднуюПанельФормыВходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
		ДобавитьПодменюЕГАИСвКоманднуюПанельТоварыВходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
		ДобавитьКолонкиВТабличноеПолеТовары(ЭлементыФормы);
		ЭлементыФормы.ДокЕГАИС.УстановитьДействие("ПриИзменении",    Новый Действие("ДокЕГАИСПриИзменении"));
		ЭлементыФормы.ДокЕГАИС.УстановитьДействие("НачалоВыбора",    Новый Действие("ДокЕГАИСНачалоВыбора"));
		ЭлементыФормы.ДокЕГАИС.УстановитьДействие("ОбработкаВыбора", Новый Действие("ДокЕГАИСОбработкаВыбора"));
	КонецЕсли;
	УстановитьДоступностьКнопокИзмененияТЧ(ЭлементыФормы, Не ПолученИзЕГАИС(ЭтотОбъект));
	
	// Работа с торговым залом
	НастроитьПодменюЕГАИСДляТорговогоЗала(ЭлементыФормы, ЭтотОбъект, ВидимостьЕГАИС);
	// Работа с торговым залом
	
	ОбновитьИнформациюНаФормеДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДобавитьПодменюЕГАИСвКоманднуюПанельФормыВходящегоДокумента(ЭлементыФормы, ЭтотОбъект)

	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);
	ВидДокумента = ЭтотОбъект.Метаданные().Имя;

	КнопкиКП = ЭлементыФормы.ДействияФормы.Кнопки;
	кЕГАИС = КнопкиКП.Найти("ЕГАИС");
	Если кЕГАИС = Неопределено Тогда
		кРазделительЕГАИС = КнопкиКП.Найти("РазделительЕГАИС");
		Если кРазделительЕГАИС = Неопределено Тогда
			кРазделительЕГАИС = КнопкиКП.Добавить("РазделительЕГАИС", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		кЕГАИС = КнопкиКП.Добавить("ЕГАИС", ТипКнопкиКоманднойПанели.Подменю, "ЕГАИС");
	КонецЕсли;
	
	кПередатьДанныеВЕГАИС = кЕГАИС.Кнопки.Найти("ПередатьДанныеВЕГАИС");
	Если кПередатьДанныеВЕГАИС = Неопределено Тогда
		кПередатьДанныеВЕГАИС = кЕГАИС.Кнопки.Добавить("ПередатьДанныеВЕГАИС", ТипКнопкиКоманднойПанели.Действие, 
			"Отправить акт в ЕГАИС", Новый Действие("ДействияФормыПередатьДанныеВЕГАИС"));
		кПередатьДанныеВЕГАИС.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		кПередатьДанныеВЕГАИС.Картинка = БиблиотекаКартинок.ЕГАИС_ИсходящийЗапрос;
	КонецЕсли;
	кПередатьДанныеВЕГАИС.Доступность = ЭтотОбъект.Проведен И ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаЕГАИС]) И Не ПереданВЕГАИС(ЭтотОбъект);

	Если ТипЗнч(Этотобъект) <> Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаЕГАИС]) Тогда
			ТекстНаКнопке = ТекстКнопки("Открыть", ВидДокумента);
			ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, "ОткрытьДокЕГАИС", ТекстНаКнопке, "ДействияФормыОткрытьДокЕГАИС");
		Иначе
			РаботаСДиалогами.УдалитьКнопки(кЕГАИС.Кнопки, "ОткрытьДокЕГАИС");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ЭтотОбъект.ТТНИсходящая) Тогда
			ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, "ОткрытьТТНИ", "Открыть ТТН (исходящую)", "ДействияФормыОткрытьДокЕГАИС");
		Иначе
			РаботаСДиалогами.УдалитьКнопки(кЕГАИС.Кнопки, "ОткрытьТТНИ");
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.ТТНВходящая) Тогда
			ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, "ОткрытьТТНВ", "Открыть ТТН (входящую)", "ДействияФормыОткрытьДокЕГАИС");
		Иначе
			РаботаСДиалогами.УдалитьКнопки(кЕГАИС.Кнопки, "ОткрытьТТНВ");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПодменюЕГАИСвКоманднуюПанельТоварыВходящегоДокумента(ЭлементыФормы, ЭтотОбъект)
	
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);

	КнопкиКП = ЭлементыФормы.КоманднаяПанельТовары.Кнопки;
	кЕГАИС = КнопкиКП.Найти("ЕГАИС");
	Если кЕГАИС = Неопределено Тогда
		кЕГАИС = КнопкиКП.Добавить("ЕГАИС", ТипКнопкиКоманднойПанели.Подменю, "ЕГАИС");
		кОтобратьДляЗаполнения = кЕГАИС.Кнопки.Добавить("ОтобратьДляЗаполнения", ТипКнопкиКоманднойПанели.Действие, 
			"Отобрать для заполнения", Новый Действие("КоманднаяПанельТоварыОтобратьДляЗаполнения"));
		кОтобратьДляЗаполнения.Пометка = Ложь;
		кСопоставитьКонтрагентов = кЕГАИС.Кнопки.Добавить("СопоставитьКонтрагентов", ТипКнопкиКоманднойПанели.Действие, 
			"Сопоставить контрагентов", Новый Действие("КоманднаяПанельТоварыСопоставитьКонтрагентов"));
		кСопоставитьНоменклатуру = кЕГАИС.Кнопки.Добавить("СопоставитьНоменклатуру", ТипКнопкиКоманднойПанели.Действие, 
			"Сопоставить номенклатуру", Новый Действие("КоманднаяПанельТоварыСопоставитьНоменклатуру"));
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКолонкиВТабличноеПолеТовары(ЭлементыФормы)
	
	КолонкиТП = ЭлементыФормы.Товары.Колонки;
	
	КолонкаТП = КолонкиТП.Найти("АлкогольнаяПродукция");
	Если КолонкаТП = Неопределено Тогда
		КолонкаТП = КолонкиТП.Вставить(3, "Алкогольная продукция");
		КолонкаТП.Имя = "АлкогольнаяПродукция";
		КолонкаТП.Данные = "АлкогольнаяПродукция";
		КолонкаТП.ИзменятьВидимость = Истина;
		КолонкаТП.УстановитьЭлементУправления(Тип("ПолеВвода"));
		КолонкаТП.ЭлементУправления.КнопкаВыбора = Истина;
		КолонкаТП.ЭлементУправления.КнопкаОткрытия = Истина;
	КонецЕсли;
	КолонкаТП.Видимость = Истина;
	
	КолонкаТП = КолонкиТП.Найти("ИдентификаторУпаковки");
	Если КолонкаТП = Неопределено Тогда
		КолонкаТП = КолонкиТП.Вставить(4, "Идентификатор упаковки");
		КолонкаТП.Имя = "ИдентификаторУпаковки";
		КолонкаТП.Данные = "ИдентификаторУпаковки";
		КолонкаТП.ИзменятьВидимость = Истина;
		КолонкаТП.УстановитьЭлементУправления(Тип("ПолеВвода"));
	КонецЕсли;
	КолонкаТП.Видимость = Истина;

КонецПроцедуры

Процедура УдалитьКолонкиИзТабличногоПоляТовары(ЭлементыФормы)
	
	КолонкиТП = ЭлементыФормы.Товары.Колонки;
	
	КолонкаТП = КолонкиТП.Найти("АлкогольнаяПродукция");
	Если Не КолонкаТП = Неопределено Тогда
		КолонкаТП.Видимость = Ложь;
		КолонкаТП.ИзменятьВидимость = Ложь;
	КонецЕсли;
	
	КолонкаТП = КолонкиТП.Найти("ИдентификаторУпаковки");
	Если Не КолонкаТП = Неопределено Тогда
		КолонкаТП.Видимость = Ложь;
		КолонкаТП.ИзменятьВидимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКнопокИзмененияТЧ(ЭлементыФормы, Доступность)
	
	УстановитьСвойствоКнопокКоманднойПанели(ЭлементыФормы.ДействияФормы, "ДействиеЗаполнитьИПровести", "Доступность", Доступность);
	
	УстановитьСвойствоКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТовары, "ДействиеПодбор,ДействиеИзменить", "Доступность", Доступность);
	
	КнопкаЗаполнить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти("ПодменюЗаполнить");
	Если КнопкаЗаполнить <> Неопределено Тогда
		УстановитьСвойствоКнопокКоманднойПанели(КнопкаЗаполнить, "", "Доступность", Доступность);
	КонецЕсли;

КонецПроцедуры

Функция ОтборДляЗаполненияВключен(ЭтаФорма)
	
	кЕГАИС = ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти("ЕГАИС");
	Если кЕГАИС <> Неопределено Тогда
		кОтобратьДляЗаполнения = кЕГАИС.Кнопки.Найти("ОтобратьДляЗаполнения");
		Если кОтобратьДляЗаполнения <> Неопределено Тогда
			Результат = кОтобратьДляЗаполнения.Пометка;
		Иначе
			Результат = Ложь;
		КонецЕсли;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВыделенныеСтроки(ЭтаФорма, ЭтотОбъект)
	Если ОтборДляЗаполненияВключен(ЭтаФорма) Тогда
		ВыделенныеСтроки = Новый Массив;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ВыделенныеСтроки.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВыделенныеСтроки = ЭтаФорма.ЭлементыФормы.Товары.ВыделенныеСтроки;
	КонецЕсли;
	Возврат ВыделенныеСтроки;
КонецФункции

// Общие обработчики событий форм
Процедура ОткрытьДокументЕГАИС(ДокЕГАИС) Экспорт

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокЕГАИС)) Тогда
		Если ЗначениеЗаполнено(ДокЕГАИС) Тогда
			ФормаДокумента = ДокЕГАИС.ПолучитьФорму("ФормаДокумента");
			ОткрытьФорму(ФормаДокумента);
		Иначе
			ОбщегоНазначения.СообщитьИнформациюПользователю("Прикладной документ не связан с документом ЕГАИС");
		КонецЕсли;
	Иначе
		ФормаДокумента = ДокЕГАИС.Ссылка.ПолучитьФорму("ФормаДокумента");
		ЗначениеВДанныеФормы(ДокЕГАИС, ФормаДокумента.Объект);
		ФормаДокумента.Открыть();
		ФормаДокумента.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокЕГАИСПриИзменении(Элемент, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если ЭтоИсходящийДокументЕГАИС(ЭтотОбъект) Тогда
		
		УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
		
	ИначеЕсли ЭтоВходящийДокументЕГАИС(ЭтотОбъект) Тогда
	
		Если ЭтотОбъект.ДокЕГАИС = ЭтаФорма.мСтароеЗначениеДокЕГАИС Тогда
			Возврат;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ЭтотОбъект.ДокЕГАИС) Тогда
			Ответ = КодВозвратаДиалога.Да;
			Если ЭтотОбъект.Товары.Количество() > 0 Тогда
				Ответ = Вопрос("Перезаполнить табличную часть ""Товары"" по данным ТТН ЕГАИС?", РежимДиалогаВопрос.ДаНетОтмена, 60,
				КодВозвратаДиалога.Да, "", КодВозвратаДиалога.Отмена);
			КонецЕсли;
			
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				ЭтотОбъект.ДокЕГАИС = ЭтаФорма.мСтароеЗначениеДокЕГАИС;
			Иначе
				ЗаполнятьТЧ = (Ответ = КодВозвратаДиалога.Да);
				Если ЗаполнятьТЧ Тогда
					ЭтотОбъект.Товары.Очистить();
				КонецЕсли;
				ВыполнитьСопоставление(ЭтотОбъект.ДокЕГАИС, ЭтотОбъект, ЗаполнятьТЧ);
			КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма.мСтароеЗначениеДокЕГАИС = ЭтотОбъект.ДокЕГАИС;
		УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
		
	Иначе
		
		УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокЕГАИСНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект) Экспорт
	
	ИмяРеквизитаЕГАИС = Элемент.Имя;
	ЭтаФорма.мСтароеЗначениеДокЕГАИС = ЭтотОбъект[ИмяРеквизитаЕГАИС];
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор");
	ПараметрыФормы.Отбор = ПараметрыОтбораДокЕГАИС(ЭтотОбъект, ИмяРеквизитаЕГАИС);
	ОткрытьФорму("Документ."+ЭтотОбъект[ИмяРеквизитаЕГАИС].Метаданные().Имя+".ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура ДокЕГАИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если ЭтоИсходящийДокументЕГАИС(ЭтотОбъект) Тогда
		Направление = "Исходящий";
	ИначеЕсли ЭтоВходящийДокументЕГАИС(ЭтотОбъект) Тогда
		Направление = "Входящий";
	Иначе
		Если Элемент.Имя = "ТТНИсходящая" Тогда
			Направление = "Исходящий";
		Иначе
			Направление = "Входящий";
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьВозможностьСопоставления(ВыбранноеЗначение, ЭтотОбъект, Направление, Отказ);
	СтандартнаяОбработка = Не Отказ;

КонецПроцедуры

Процедура ПередЗаписьюДокументаИзФормы(Отказ, РежимЗаписи, РежимПроведения, ЭтаФорма, ЭтотОбъект) Экспорт
	
	//Розница (для возврата)
	
	Если ЭтоРозничныйВозвратАлкоголя(ЭтотОбъект) И ЭтотОбъект.АктПереданВЕГАИС Тогда
		СообщениеПользователю = "Акт отправлен в ЕГАИС. Изменение данных может привести к расхождениям с ЕГАИС.";
		ОбщегоНазначения.СообщитьИнформациюПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;

	//Опт (для входящих документов)
	
	Если ИнтеграцияЕГАИСПереопределяемый.ПереданВЕГАИС(ЭтотОбъект) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	*
					   |ПОМЕСТИТЬ втТовары
					   |ИЗ
					   |	&тчТовары КАК тчТовары";
		Запрос.УстановитьПараметр("тчТовары", Этотобъект.Товары.Выгрузить());
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	*
					   |ПОМЕСТИТЬ тчТовары
					   |ИЗ
					   |	Документ."+ЭтотОбъект.Метаданные().Имя+".Товары КАК ПоступлениеТоваровУслугТовары
					   |ГДЕ
					   |	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
					   |	ЕСТЬNULL(втТовары.Номенклатура, тчТовары.Номенклатура) КАК Номенклатура,
					   |	ЕСТЬNULL(втТовары.ИдентификаторСтроки, тчТовары.ИдентификаторСтроки) КАК ИдентификаторСтроки,
					   |	ЕСТЬNULL(втТовары.Количество, тчТовары.Количество) КАК Количество,
					   |	ЕСТЬNULL(втТовары.АлкогольнаяПродукция, тчТовары.АлкогольнаяПродукция) КАК АлкогольнаяПродукция
					   |ИЗ
					   |	втТовары КАК втТовары
					   |		ПОЛНОЕ СОЕДИНЕНИЕ тчТовары КАК тчТовары
					   |		ПО втТовары.ИдентификаторСтроки = тчТовары.ИдентификаторСтроки
					   |ГДЕ
					   |	(втТовары.ИдентификаторСтроки ЕСТЬ NULL 
					   |			ИЛИ тчТовары.ИдентификаторСтроки ЕСТЬ NULL 
					   |			ИЛИ втТовары.Количество <> тчТовары.Количество
					   |			ИЛИ тчТовары.АлкогольнаяПродукция <> втТовары.АлкогольнаяПродукция)";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			СообщениеПользователю = "Документ отправлен в ЕГАИС. Изменение данных может привести к расхождениям с ЕГАИС.";
			ОбщегоНазначения.СообщитьИнформациюПользователю(СообщениеПользователю);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписиДокументаИзФормы(ЭтаФорма, ЭтотОбъект) Экспорт
	
	УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);

КонецПроцедуры

Процедура ПриОткрытииФормыДокумента(ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если ЭтоИсходящийДокументЕГАИС(ЭтотОбъект) Тогда
		
	ИначеЕсли ЭтоВходящийДокументЕГАИС(ЭтотОбъект) Тогда

		ЭтаФорма.мСтароеЗначениеДокЕГАИС = ЭтотОбъект.ДокЕГАИС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СШКНоменклатура(Номенклатура, Характеристика, Единица, ЭтаФорма, ЭтотОбъект) Экспорт
	
	СтрокаТабличнойЧасти = ЭтаФорма.ЭлементыФормы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Единица;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОповещения(ЭтаФорма, ЭтотОбъект, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ОбновитьСписокЗапросовЕГАИС" Тогда
		УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораВидаПередачиПоступления(Этаформа, ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	ИмяЗначения = ОбщегоНазначения.ИмяЗначенияПеречисления(ВыбранноеЗначение);
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);
	Если (ЭтоРозничныйВозвратАлкоголя(ЭтотОбъект) И ПереданВЕГАИС(ЭтотОбъект)) ИЛИ 
		(ЗначениеЗаполнено(ИмяРеквизитаЕГАИС) И ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаЕГАИС])) Тогда
		Если ИмяЗначения = "ПоОрдеру" Тогда
			Параметр1 = "";
			Параметр2 = "";
			Если ЭтоРозничныйВозвратАлкоголя(ЭтотОбъект) Тогда
				Параметр1 = "переданных в";
				Параметр2 = "поступления";
			ИначеЕсли Элемент.Имя = "ВидПоступления" Тогда
				Параметр1 = "полученных из";
				Параметр2 = "поступления";
			ИначеЕсли Элемент.Имя = "ВидПередачи" Тогда
				Параметр1 = "переданных в";
				Параметр2 = "передачи";
			КонецЕсли;
			ШаблонСообщения = "Для документов %1 ЕГАИС использование вида %2 ""по ордеру"" запрещено.";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр1, Параметр2);
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Обработчики событий форм исходящих документов
Процедура СоздатьПерезаполнитьДокументЕГАИС(Кнопка, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Отказ = Ложь;
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(ЭтотОбъект[ИмяРеквизитаЕГАИС]) Тогда
		ПроверитьВозможностьСозданияДокЕГАИС(Отказ, ЭтотОбъект, ЭтаФорма);
	Иначе
		ПроверитьВозможностьПерезаполненияДокЕГАИС(Отказ, ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеЗаполнения = ПодготовитьДанныеДляДокументаЕГАИС(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ИДФСРАР) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось определить организацию ЕГАИС, создание документа невозможно.", Отказ);
		Возврат;
	КонецЕсли;
		
	ДокЕГАИС = ПолучитьДокументЕГАИС(ЭтотОбъект[ИмяРеквизитаЕГАИС]);
	
	ЗаполнитьДокументЕГАИС(ДокЕГАИС, ДанныеЗаполнения);
	
	Если ДокЕГАИС.ЭтоНовый() Тогда
		ДокЕГАИС.Записать(РежимЗаписиДокумента.Запись);
		ЭтотОбъект[ИмяРеквизитаЕГАИС] = ДокЕГАИС.Ссылка;
		ДокЕГАИС = ДокЕГАИС.Ссылка;
	КонецЕсли;
	
	ОткрытьДокументЕГАИС(ДокЕГАИС);
	
	Попытка
		ЭтотОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось сохранить документ " + Строка(ЭтотОбъект) + " сохраните его вручную.");
	КонецПопытки;
	
	УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
	
КонецПроцедуры

Процедура ОткрытьФормуСопоставленияНоменклатуры(ЭтаФорма) Экспорт
	
	ЭтотОбъект = ЭтаФорма.ДокументОбъект;
	
	МассивНоменклатуры = ЭтотОбъект.Товары.ВыгрузитьКолонку("Номенклатура");
	
	Если МассивНоменклатуры.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("В табличной части ""Товары"" отсутствует номенклатура для сопоставления.");
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Номенклатура", МассивНоменклатуры);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных,);
	СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ОткрытьФормуМодально("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", СтруктураПараметры, ЭтаФорма);

КонецПроцедуры

// Обработчики событий форм входящих документов
Процедура ПередатьДанныеВЕГАИС(Кнопка, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Отказ = Истина;
	
	ПроверитьВозможностьПередачиВЕГАИС(Отказ, ЭтотОбъект, ЭтаФорма);
	Если Не Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);
	
	Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Ответ = Вопрос("Для перемещения можно передать только акт подтверждения ТТН. Вы уверены?",
			РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК, , КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		СтрокиСРасхождениями = НайтиСтрокиСРасхождениями(ЭтотОбъект.Ссылка, ЭтотОбъект[ИмяРеквизитаЕГАИС]);
		Если СтрокиСРасхождениями.Количество() > 0 Тогда
			ТекстВопроса = "Документ отличается от ТТН ЕГАИС, будет передан акт о расхождениях. Вы уверены?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, , КодВозвратаДиалога.Нет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			Результат = ПерезаполнитьДокументЕГАИСПоДаннымДокументаИБ(СтрокиСРасхождениями, ЭтотОбъект[ИмяРеквизитаЕГАИС]);
			Если Не Результат Тогда
				СтрокаСообщения = НСтр("ru = 'Ошибка перезаполнения документа ЕГАИС'");
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
				Возврат;
			КонецЕсли;
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктРасхожденийТТН;
		Иначе
			ВидДокумента = Перечисления.ВидыДокументовЕГАИС.АктПодтвержденияТТН;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса = ИнтеграцияЕГАИСКлиентСервер.ПараметрыИсходящегоЗапроса(ВидДокумента);
	ПараметрыЗапроса.ДокументСсылка = ЭтотОбъект[ИмяРеквизитаЕГАИС];
	РезультатОтправки = ИнтеграцияЕГАИСКлиент.СформироватьИсходящийЗапрос(ВидДокумента, ПараметрыЗапроса);

	Если Не РезультатОтправки.Результат Тогда
		СтрокаСообщения = НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") 
			+ Символы.ПС + РезультатОтправки.ОписаниеОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;

	ИнтеграцияЕГАИСПереопределяемый.УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
	
КонецПроцедуры

Процедура НачалоВыбораСклада(ЭтаФорма, ЭтотОбъект, Элемент, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,Элемент,);

	ИдентификаторФСРАР = ЭтотОбъект.ДокЕГАИС.Грузополучатель.Код;
	Отбор = Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР);
	СписокСкладов = ПолучитьСписокСкладовИзНастроекЕГАИС(Отбор);
	
	Если СписокСкладов.Количество() > 0 Тогда
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Значение      = СписокСкладов;
		ФормаВыбора.СправочникСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Ссылка.Доступность = Истина;
		НачальноеЗначениеЕстьВСписке = СписокСкладов.НайтиПоЗначению(Элемент.Значение) <> Неопределено;
	Иначе
		НачальноеЗначениеЕстьВСписке = Истина;
	КонецЕсли;

	// уберем из выбора НТТ
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение      = Перечисления.ВидыСкладов.НТТ;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения  = ВидСравнения.НеРавно;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	
	ФормаВыбора.ПараметрВыборГруппИЭлементов = Элемент.ВыборГруппИЭлементов;
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Склады") И НачальноеЗначениеЕстьВСписке Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ОтобратьДляЗаполнения(Кнопка, ЭтаФорма, ЭтотОбъект) Экспорт

	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭтаФорма.ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.Использование = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЭтаФорма.ЭлементыФормы.Товары.ОтборСтрок.Номенклатура.Значение = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьКонтрагентов(ЭтаФорма, ЭтотОбъект) Экспорт
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтроки(ЭтаФорма, ЭтотОбъект);
	
	МассивАлкогольнойПродукции = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивАлкогольнойПродукции.Добавить(ВыделеннаяСтрока.АлкогольнаяПродукция);
	КонецЦикла;
	
	МассивОрганизаций = ПолучитьОрганизацииЕГАИСИзВходящегоДокумента(МассивАлкогольнойПродукции, ЭтотОбъект.ДокЕГАИС);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ОрганизацииЕГАИС", МассивОрганизаций);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных,);
	СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ОткрытьФормуМодально("Обработка.СопоставлениеОрганизацийЕГАИС.Форма", СтруктураПараметры, ЭтаФорма);
	ЗаполнитьВДокументеСопоставленныхКонтрагентов(ЭтотОбъект);
	
КонецПроцедуры

Процедура СопоставитьНоменклатуру(ЭтаФорма, ЭтотОбъект) Экспорт
	
	ВыделенныеСтроки = ПолучитьВыделенныеСтроки(ЭтаФорма, ЭтотОбъект);
	
	МассивАлкогольнойПродукции = Новый Массив;
	МассивИдентификаторовСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивАлкогольнойПродукции.Добавить(ВыделеннаяСтрока.АлкогольнаяПродукция);
		МассивИдентификаторовСтрок.Добавить(ВыделеннаяСтрока.ИдентификаторСтроки);
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("АлкогольнаяПродукция", МассивАлкогольнойПродукции);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных,);
	СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АлкогольнаяПродукция", МассивИдентификаторовСтрок);
	
	ОткрытьФормуМодально("Обработка.СопоставлениеНоменклатурыЕГАИС.Форма", СтруктураПараметры, ЭтаФорма);
	ЗаполнитьВДокументеСопоставленнуюНоменклатуру(ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОтборДляЗаполненияВключен(ЭтаФорма) Тогда
		ЕстьПустаяНоменклатура = Ложь;
		Для Каждого СтрокаТЧ Из ЭтотОбъект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				ЕстьПустаяНоменклатура = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьПустаяНоменклатура Тогда
			
			// Отключим отбор чтобы не пугать пользователя
			кЕГАИС = ЭтаФорма.ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти("ЕГАИС");
			Если Не кЕГАИС = Неопределено Тогда
				кОтобратьДляЗаполнения = кЕГАИС.Кнопки.Найти("ОтобратьДляЗаполнения");
				Если Не кОтобратьДляЗаполнения = Неопределено Тогда
					ОтобратьДляЗаполнения(кОтобратьДляЗаполнения, ЭтаФорма, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательные интерфейсные процедуры

// Специфичные для ЕГАИС
Функция ДопустимыйВидОперацииДляЕГАИС(ИмяВидаОперации, ЭтотОбъект, Сообщать = Истина) Экспорт
	
	НовыйВидОперации = Перечисления[ЭтотОбъект.ВидОперации.Метаданные().Имя][ИмяВидаОперации];
	
	ПодходящиеВидыОпераций = Новый Массив;
	Если ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.ТТНИсходящая) ИЛИ ЗначениеЗаполнено(ЭтотОбъект.ТТНВходящая) Тогда
			Результат = ВыбранПодходящийВидОперации(НовыйВидОперации, ПодходящиеВидыОпераций);
			Направление = ОпределитьСостояниеПеремещения(ЭтотОбъект);
		Иначе
			Результат = Истина;
		КонецЕсли;
	ИначеЕсли ПолученИзЕГАИС(ЭтотОбъект) Тогда
		Результат = ВыбранПодходящийВидОперации(НовыйВидОперации, ПодходящиеВидыОпераций);
		Направление = "Входящий"
	ИначеЕсли ПереданВЕГАИС(ЭтотОбъект) Тогда
		Результат = ВыбранПодходящийВидОперации(НовыйВидОперации, ПодходящиеВидыОпераций);
		Направление = "Исходящий";
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Если Не Результат И Сообщать Тогда
		ИменаВидовОпераций = "";
		Сч = 0;
		Для Каждого ПодходящийВидОперации Из ПодходящиеВидыОпераций Цикл
			ИменаВидовОпераций = ИменаВидовОпераций + """" + Строка(ПодходящийВидОперации) + """" + " ";
			Сч = Сч + 1;
		КонецЦикла;
		ТекстПодстановки = ?(Направление = "Исходящий","переданных в","полученных из");
		СтрокаСообщения = "Для документов "+ТекстПодстановки+" ЕГАИС можно использовать только " + 
			?(Сч <= 1, "вид операции", "виды операций") + " " + ИменаВидовОпераций;
		
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура СообщитьОРезультатахПроверки(МассивОшибок, МассивПредупреждений, Отказ, ВыводитьПредупрежденияТолькоПриОтсутствииОшибок = Ложь)
	
	// Вывод сообщений об ошибках
	Если МассивОшибок.Количество() > 0 Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнить операцию невозможно.");
		Для Каждого ТекстОшибки Из МассивОшибок Цикл
			ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ВыводитьПредупрежденияТолькоПриОтсутствииОшибок И Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод предупреждений
	Если МассивПредупреждений.Количество() > 0 Тогда
		Для Каждого ТекстПредупреждения Из МассивПредупреждений Цикл
			ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстПредупреждения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКнопкуОткрытьДокЕГАИС(кЕГАИС, ИмяКнопки, ТекстНаКнопке, ИмяОбработчика)
	кОткрытьДокЕГАИС = кЕГАИС.Кнопки.Найти(ИмяКнопки);
	Если кОткрытьДокЕГАИС = Неопределено Тогда
		кОткрытьДокЕГАИС = кЕГАИС.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, 
		ТекстНаКнопке, Новый Действие(ИмяОбработчика));
		кОткрытьДокЕГАИС.Подсказка = ТекстНаКнопке;
		кОткрытьДокЕГАИС.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		кОткрытьДокЕГАИС.Картинка = БиблиотекаКартинок.ОткрытьДокумент;
	КонецЕсли;
КонецПроцедуры

// Устанавливает текст на кнопка командной панели, добавляемых динамически
// Параметры:
// ТипКнопки - строка ("Создать", "Открыть", "Перезаполнить")
// ТипДокумента - имя документа в метаданных
// ИмяРеквизита - используется для документа "ПеремещениеТоваров", в котором есть две ссылки на документы ЕГАИС
//
Функция ТекстКнопки(ТипКнопки, ТипДокумента, ИмяРеквизита = "")
	Результат = ТипКнопки + " ";
	Если ТипДокумента = "ПоступлениеТоваровУслуг" Тогда
		ТекстДокументаЕГАИС = "ТТН (входящую)";
	ИначеЕсли ТипДокумента = "ПриходныйОрдерНаТовары" Тогда
		ТекстДокументаЕГАИС = "ТТН (входящую)";
	ИначеЕсли ТипДокумента = "РасходныйОрдерНаТовары" Тогда
		ТекстДокументаЕГАИС = "ТТН (исходящую)";
	ИначеЕсли ТипДокумента = "ПеремещениеТоваров" Тогда
		
		ТекстДокументаЕГАИС = "ТТН (исходящую)";
	Иначе
		ТекстДокументаЕГАИС = "документ ЕГАИС";
	КонецЕсли;
	Возврат Результат + ТекстДокументаЕГАИС;
КонецФункции

// Универсальные
Процедура УстановитьСвойствоКнопокКоманднойПанели(ПанельФормы, ИменаКнопок, ИмяСвойства, ЗначениеСвойства)
	КнопкиКП = ПанельФормы.Кнопки;
	Если ИменаКнопок = "" Тогда //для всех
		Для Каждого Кнопка Из КнопкиКП Цикл
			Кнопка[ИмяСвойства] = ЗначениеСвойства;
		КонецЦикла;
	Иначе
		МассивИменКнопок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаКнопок);
		Для Каждого ИмяКнопки Из МассивИменКнопок Цикл
			Кнопка = КнопкиКП.Найти(ИмяКнопки);
			Если Кнопка <> Неопределено Тогда
				Кнопка[ИмяСвойства] = ЗначениеСвойства;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Обработка исходящих документов ЕГАИС //
Процедура ПроверитьВозможностьСозданияДокЕГАИС(Отказ, ДокументИБ, ЭтаФорма)
	
	МассивОшибок = Новый Массив;
	МассивПредупреждений = Новый Массив;
	
	ДокЕГАИС = ДокументИБ[ИмяРеквизитаЕГАИС(ДокументИБ)];
	
	// Общие проверки
	Если ЭтаФорма.Модифицированность Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Документ не сохранен'"));
	КонецЕсли;
	
	Если Не ДокументИБ.Проведен Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Документ не проведен'"));
	КонецЕсли;
	
	Если ДокументИБ.Товары.Количество() = 0 Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Не заполнена табличная часть ""Товары""'"));
	КонецЕсли;
	
	РеквизитыАП = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДокументИБ.Товары.ВыгрузитьКолонку("Номенклатура"), "АлкогольнаяПродукция");
	Для Каждого Элемент Из РеквизитыАП Цикл
		Если Не Элемент.Значение.АлкогольнаяПродукция Тогда
			МассивПредупреждений.Добавить(НСтр("ru = 'Табличная часть ""Товары"" содержит номенклатуру, не являющуюся алкогольной продукцией'"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокЕГАИС) Тогда
		РедактируемыеСтатусы = РедактируемыеСтатусы(ДокЕГАИС);
		СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокЕГАИС, "СтатусОбработки");
		Если РедактируемыеСтатусы.Найти(СтатусОбработки) = Неопределено Тогда
			МассивОшибок.Добавить("Документ в текущем статусе редактировать нельзя");
		КонецЕсли;
	КонецЕсли;
	
	СообщитьОРезультатахПроверки(МассивОшибок, МассивПредупреждений, Отказ);
	
КонецПроцедуры

Процедура ПроверитьВозможностьПерезаполненияДокЕГАИС(Отказ, ДокументИБ, ЭтаФорма)
	
	ПроверитьВозможностьСозданияДокЕГАИС(Отказ, ДокументИБ, ЭтаФорма);
	
КонецПроцедуры

Функция ПодготовитьДанныеДляДокументаЕГАИС(ДокументИБ)
	
	Результат = Новый Структура;
	
	ТипДокумента = ТипЗнч(ДокументИБ);
	
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ДокументИБ);
	
	// Шапка
	
	Результат.Вставить("Дата", ТекущаяДата());
	Если Не ЗначениеЗаполнено(ДокументИБ[ИмяРеквизитаЕГАИС]) Тогда
		Результат.Вставить("СтатусОбработки", НачальныйСтатусДокументаЕГАИС(ДокументИБ[ИмяРеквизитаЕГАИС]));
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда
		
		Результат.Вставить("ОрганизацияЕГАИС", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		Если ДокументИБ.Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			Результат.Вставить("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБаланс);
		Иначе
			Результат.Вставить("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВТорговомЗале);
		КонецЕсли;
		Результат.Вставить("ПричинаПостановкиНаБаланс", Перечисления.ПричиныПостановкиНаБалансЕГАИС.Излишки);
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		Результат.Вставить("ОрганизацияЕГАИС", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		Если ДокументИБ.Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			Результат.Вставить("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.АктСписания);
		Иначе
			Результат.Вставить("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала);
		КонецЕсли;
		Результат.Вставить("ПричинаСписания", Перечисления.ПричиныСписанийЕГАИС.Потери);
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		Результат.Вставить("ОрганизацияЕГАИС", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		Результат.Вставить("ВидДокумента", Перечисления.ВидыДокументовЕГАИС.АктСписанияИзТорговогоЗала);
		Результат.Вставить("ПричинаСписания", Перечисления.ПричиныСписанийЕГАИС.Реализация);
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Результат.Вставить("ВидОперации", ВидОперацииЕГАИСПоВидуОперацииДокументаИБ(ДокументИБ));
		Результат.Вставить("НомерТТН", ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументИБ));
		Результат.Вставить("ДатаТТН", ДокументИБ.Дата);
		Результат.Вставить("ДатаОтгрузки", ДокументИБ.Дата);
		Если ЗначениеЗаполнено(ДокументИБ.Грузоотправитель) Тогда
			Результат.Вставить("Грузоотправитель", НайтиОрганизациюЕГАИС(ДокументИБ.Грузоотправитель, ДокументИБ.Склад));
		Иначе
			Результат.Вставить("Грузоотправитель", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументИБ.Грузополучатель) Тогда
			Результат.Вставить("Грузополучатель", НайтиОрганизациюЕГАИС(ДокументИБ.Грузополучатель));
		Иначе
			Результат.Вставить("Грузополучатель", НайтиОрганизациюЕГАИС(ДокументИБ.Контрагент));
		КонецЕсли;
		Результат.Вставить("Поставщик", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		Если ДокументИБ.Метаданные().Реквизиты.Найти("АдресДоставки") <> Неопределено Тогда
			Результат.Вставить("ПунктРазгрузки", ДокументИБ.АдресДоставки);
		КонецЕсли;
		Результат.Вставить("СуммаДокумента", УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументИБ, "Товары"));
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.РасходныйОрдерНаТовары") Тогда
		
		Результат.Вставить("ВидОперации", ВидОперацииЕГАИСПоВидуОперацииДокументаИБ(ДокументИБ));
		Если ЗначениеЗаполнено(ДокументИБ.ДокументПередачи) Тогда
			ДокументПередачи = ДокументИБ.ДокументПередачи.ПолучитьОбъект();
			Результат.Вставить("НомерТТН", ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументПередачи));
			Результат.Вставить("ДатаТТН", ДокументПередачи.Дата);
		КонецЕсли;
		Результат.Вставить("ДатаОтгрузки", ДокументИБ.Дата);
		Результат.Вставить("Грузоотправитель", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		Если ДокументИБ.ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			Результат.Вставить("Грузополучатель", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументПередачи.СкладПолучатель));
		Иначе
			Результат.Вставить("Грузополучатель", НайтиОрганизациюЕГАИС(ДокументИБ.Контрагент));
			Результат.Вставить("Поставщик", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.Склад));
		КонецЕсли;
	
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		Результат.Вставить("ВидОперации", ВидОперацииЕГАИСПоВидуОперацииДокументаИБ(ДокументИБ, "Исходящий"));
		Результат.Вставить("НомерТТН", ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументИБ));
		Результат.Вставить("ДатаТТН", ДокументИБ.Дата);
		Результат.Вставить("ДатаОтгрузки", ДокументИБ.Дата);
		Результат.Вставить("Грузоотправитель", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.СкладОтправитель));
		Результат.Вставить("Грузополучатель", НайтиОрганизациюЕГАИС(ДокументИБ.Организация, ДокументИБ.СкладПолучатель));
		Результат.Вставить("Основание", Строка(ДокументИБ.Ссылка.УникальныйИдентификатор()));

	КонецЕсли;
	
	Если Результат.Свойство("ОрганизацияЕГАИС") Тогда
		Отправитель = Результат.ОрганизацияЕГАИС;
	ИначеЕсли Результат.Свойство("Грузоотправитель") Тогда
		Отправитель = Результат.Грузоотправитель;
	Иначе
		Отправитель = Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка();
	КонецЕсли;
	Результат.Вставить("ИДФСРАР", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отправитель, "Код"));
	
	// Табличная часть
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСопоставлениеНоменклатуры(ДокументИБ.Метаданные().Имя);
	Запрос.УстановитьПараметр("Ссылка", ДокументИБ.Ссылка);
	Результат.Вставить("Товары", Запрос.Выполнить().Выгрузить());

	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументЕГАИС(СсылкаНаДокЕГАИС)
	
	Если ЗначениеЗаполнено(СсылкаНаДокЕГАИС) Тогда
		Результат = СсылкаНаДокЕГАИС.ПолучитьОбъект();
	Иначе
		Результат = Документы[СсылкаНаДокЕГАИС.Метаданные().Имя].СоздатьДокумент();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДокументЕГАИС(ДокЕГАИС, ДанныеЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ДокЕГАИС, ДанныеЗаполнения);
	ДокЕГАИС.Товары.Загрузить(ДанныеЗаполнения.Товары);
	
КонецПроцедуры

Функция ТекстЗапросаСопоставлениеНоменклатуры(ИмяДокумента)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.ЕдиницаИзмерения,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Коэффициент,
	|	ТаблицаТоваров.Номенклатура,
	|	&ПолеСумма КАК Сумма,
	|	&ПолеЦена КАК Цена
	|ПОМЕСТИТЬ ТЧДокументаИБ
	|ИЗ
	|	Документ." + ИмяДокумента + ".Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки,
	|	ТЧДокументаИБ.Количество,
	|	ТЧДокументаИБ.Сумма,
	|	ТЧДокументаИБ.Цена
	|ИЗ
	|	ТЧДокументаИБ КАК ТЧДокументаИБ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТЧДокументаИБ.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура";
	
	Если ИмяДокумента = "РеализацияТоваровУслуг" ИЛИ ИмяДокумента = "ВозвратТоваровПоставщику" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", "ТаблицаТоваров.Сумма");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеЦена" , "ТаблицаТоваров.Цена" );
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеСумма", "0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеЦена" , "0");
	КонецЕсли;
	
	Если ИмяДокумента = "ОтчетОРозничныхПродажах" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	ЕСТЬNULL(Не СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция.ВидПродукции.Маркируемый, ИСТИНА)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Обработка входящих документов ЕГАИС //

Процедура ПроверитьВозможностьСопоставления(НовыйДокЕГАИС, ДокументИБ, Направление, Отказ, Сообщать = Истина) Экспорт
	
	МассивОшибок = Новый Массив;
	МассивПредупреждений = Новый Массив;
	
	// Проверка на то что документ ЕГАИС уже передан
	Если ПереданВЕГАИС(НовыйДокЕГАИС) Тогда
		МассивОшибок.Добавить("По выбранному документу информация уже передана в ЕГАИС.");
	КонецЕсли;
	
	// Проверка на то что документ ЕГАИС уже сопоставлен с документом ИБ
	СтруктураВозврата = НайтиДокументИБПоДокументуЕГАИС(НовыйДокЕГАИС, Направление);
	Если ЗначениеЗаполнено(СтруктураВозврата.Ссылка) И СтруктураВозврата.Ссылка <> ДокументИБ.Ссылка Тогда
		МассивОшибок.Добавить("Выбранный документ уже сопоставлен с документом информационной базы - "+СтруктураВозврата.Представление);
	КонецЕсли;
	
	Если НовыйДокЕГАИС.ПометкаУдаления Тогда
		МассивОшибок.Добавить("Выбранный документ помечен на удаление.");
	КонецЕсли;
	
	Если НовыйДокЕГАИС.Метаданные().Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		Если ВидОперацииЕГАИСпоВидуОперацииДокументаИБ(ДокументИБ, Направление) <> НовыйДокЕГАИС.ВидОперации Тогда
			МассивПредупреждений.Добавить("Выбран документ с неподходящим видом операции");
		КонецЕсли;
	КонецЕсли;

	Если Сообщать Тогда
		СообщитьОРезультатахПроверки(МассивОшибок, МассивПредупреждений, Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВДокументеСопоставленнуюНоменклатуру(ЭтотОбъект, ДополнительныеПараметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваровПоДаннымПоставщика.АлкогольнаяПродукция,
	|	ТаблицаТоваровПоДаннымПоставщика.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаТоваровПоДаннымПоставщика
	|ИЗ
	|	&ТоварыПоДаннымПоставщика КАК ТаблицаТоваровПоДаннымПоставщика
	|ГДЕ
	|	ТаблицаТоваровПоДаннымПоставщика.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровПоДаннымПоставщика.АлкогольнаяПродукция,
	|	ТаблицаТоваровПоДаннымПоставщика.ИдентификаторСтроки
	|ПОМЕСТИТЬ ТаблицаСОтборомПоИдентификаторам
	|ИЗ
	|	ТаблицаТоваровПоДаннымПоставщика КАК ТаблицаТоваровПоДаннымПоставщика
	|ГДЕ
	|	ТаблицаТоваровПоДаннымПоставщика.ИдентификаторСтроки В(&ИдентификаторыСтрок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция,
	|	ТаблицаСОтборомПоИдентификаторам.ИдентификаторСтроки,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения = &ПустоеЗначениеЕдиницыИзмерения
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения = &ПустоеЗначениеЕдиницыИзмерения
	|			ТОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА СоответствиеНоменклатурыЕГАИС.Номенклатура = &ПустоеЗначениеНоменклатуры
	|			ТОГДА &ОсновнаяСтавкаНДС
	|		ИНАЧЕ СоответствиеНоменклатурыЕГАИС.Номенклатура.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС
	|ИЗ
	|	ТаблицаСОтборомПоИдентификаторам КАК ТаблицаСОтборомПоИдентификаторам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаСОтборомПоИдентификаторам.АлкогольнаяПродукция = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("ТоварыПоДаннымПоставщика", ЭтотОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ИдентификаторыСтрок"     , ДополнительныеПараметры.АлкогольнаяПродукция);
	Запрос.УстановитьПараметр("ПустоеЗначениеЕдиницыИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеЗначениеНоменклатуры"    , Справочники.Номенклатура.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОсновнаяСтавкаНДС"             , Перечисления.СтавкиНДС.НДС18);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ИсключаемыеРеквизиты = "АлкогольнаяПродукция, ИдентификаторСтроки"; // не заполняются всегда
	УчитыватьСтавкуНДС = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", ЭтотОбъект.Метаданные(), "Товары");
	
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИдентификаторСтроки", Выборка.ИдентификаторСтроки);
		
		МассивСтрок = ЭтотОбъект.Товары.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтрок[0];
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, , ИсключаемыеРеквизиты);
			Если УчитыватьСтавкуНДС Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОрганизацииЕГАИСИзВходящегоДокумента(МассивАлкогольнойПродукции, ДокЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель,
	               |	КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	               |ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	               |ИЗ
	               |	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	               |ГДЕ
	               |	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка В(&МассивАлкогольнойПродукции)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Подзапрос.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаАлкогольнойПродукции.Производитель КАК ОрганизацияЕГАИС
	               |	ИЗ
	               |		ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	               |	ГДЕ
	               |		ТаблицаАлкогольнойПродукции.Производитель <> &ПустаяОрганизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТаблицаАлкогольнойПродукции.Импортер
	               |	ИЗ
	               |		ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	               |	ГДЕ
	               |		ТаблицаАлкогольнойПродукции.Импортер <> &ПустаяОрганизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТТН.Поставщик
	               |	ИЗ
	               |		Документ.ТТНВходящаяЕГАИС КАК ТТН
	               |	ГДЕ
	               |		ТТН.Ссылка = &Ссылка
	               |		И ТТН.Поставщик <> &ПустаяОрганизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТТН.Грузоотправитель
	               |	ИЗ
	               |		Документ.ТТНВходящаяЕГАИС КАК ТТН
	               |	ГДЕ
	               |		ТТН.Ссылка = &Ссылка
	               |		И ТТН.Грузоотправитель <> &ПустаяОрганизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ТТН.Грузополучатель
	               |	ИЗ
	               |		Документ.ТТНВходящаяЕГАИС КАК ТТН
	               |	ГДЕ
	               |		ТТН.Ссылка = &Ссылка
	               |		И ТТН.Грузополучатель <> &ПустаяОрганизация) КАК Подзапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Подзапрос.ОрганизацияЕГАИС";
	
	Запрос.УстановитьПараметр("МассивАлкогольнойПродукции", МассивАлкогольнойПродукции);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", ДокЕГАИС);
	
	Результат = Запрос.Выполнить();
	ТаблицаОрганизаций = Результат.Выгрузить();
	
	Возврат ТаблицаОрганизаций.ВыгрузитьКолонку("ОрганизацияЕГАИС");
	
КонецФункции

Процедура ЗаполнитьВДокументеСопоставленныхКонтрагентов(ЭтотОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Поставщик = &ПустаяСсылкаПоставщика
	|			ТОГДА ТТНВходящаяЕГАИС.Грузоотправитель
	|		ИНАЧЕ ТТНВходящаяЕГАИС.Поставщик
	|	КОНЕЦ КАК Поставщик,
	|	""Контрагент"" КАК ИмяРеквизита
	|ПОМЕСТИТЬ ТаблицаВЗапросе
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Грузоотправитель,
	|	""Грузоотправитель""
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Грузополучатель,
	|	""Грузополучатель""
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоответствиеОрганизацийЕГАИС.Контрагент ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		ИНАЧЕ СоответствиеОрганизацийЕГАИС.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ТаблицаВЗапросе.ИмяРеквизита
	|ИЗ
	|	ТаблицаВЗапросе КАК ТаблицаВЗапросе
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОрганизацийЕГАИС КАК СоответствиеОрганизацийЕГАИС
	|		ПО ТаблицаВЗапросе.Поставщик = СоответствиеОрганизацийЕГАИС.ОрганизацияЕГАИС";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.ДокЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	РеквизитыДокумента = ЭтотОбъект.Метаданные().Реквизиты;
	Пока Выборка.Следующий() Цикл
		Если РеквизитыДокумента.Найти(Выборка.ИмяРеквизита) <> Неопределено И
			ЭтотОбъект[Выборка.ИмяРеквизита] <> Выборка.Контрагент И ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			
			ЭтотОбъект[Выборка.ИмяРеквизита] = Выборка.Контрагент;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтрокиСРасхождениями(СсылкаНаДокументИБ, ДокЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументЕГАИСТовары.ИдентификаторСтроки,
	|	ДокументЕГАИСТовары.Количество,
	|	ЕСТЬNULL(ДокументИБТовары.Количество, 0) КАК КоличествоФакт
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ДокументЕГАИСТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ."+СсылкаНаДокументИБ.Метаданные().Имя+".Товары КАК ДокументИБТовары
	|		ПО ДокументЕГАИСТовары.ИдентификаторСтроки = ДокументИБТовары.ИдентификаторСтроки
	|ГДЕ
	|	ДокументИБТовары.Ссылка = &СсылкаНаДокументИБ
	|	И ДокументЕГАИСТовары.Ссылка = &СсылкаНаДокЕГАИС
	|	И ДокументЕГАИСТовары.Количество <> ЕСТЬNULL(ДокументИБТовары.Количество, 0)";
	
	Запрос.УстановитьПараметр("СсылкаНаДокументИБ", СсылкаНаДокументИБ);
	Запрос.УстановитьПараметр("СсылкаНаДокЕГАИС", ДокЕГАИС);
			
	ТаблицаСтрок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСтрок;
	
КонецФункции

Функция ПерезаполнитьДокументЕГАИСПоДаннымДокументаИБ(СтрокиСРасхождениями, ДокЕГАИС)
	
	ДокОбъект = ДокЕГАИС.ПолучитьОбъект();
	
	Для Каждого СтрокаЕГАИС Из ДокОбъект.Товары Цикл
		СтрокаРасхождений = СтрокиСРасхождениями.Найти(СтрокаЕГАИС.ИдентификаторСтроки, "ИдентификаторСтроки");
		Если СтрокаРасхождений <> Неопределено Тогда
			СтрокаЕГАИС.КоличествоФакт = СтрокаРасхождений.КоличествоФакт;
		Иначе
			СтрокаЕГАИС.КоличествоФакт = СтрокаЕГАИС.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокОбъект.Записать();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьВозможностьПередачиВЕГАИС(Отказ, ДокументИБ, ЭтаФорма)
	
	МассивОшибок = Новый Массив;
	МассивПредупреждений = Новый Массив;
	
	Если ПереданВЕГАИС(ДокументИБ) Тогда
		МассивОшибок.Добавить(НСтр("ru = 'По данной накладной подтверждение уже передано в ЕГАИС.'"));
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность Тогда
		МассивОшибок.Добавить(("ru = 'Перед отправкой требуется сохранить документ'"));
	КонецЕсли;
	
	СообщитьОРезультатахПроверки(МассивОшибок, МассивПредупреждений, Отказ);
	
КонецПроцедуры

// Розничная схема

Процедура УстановитьСвойстваЭлементовФормыВозврата(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	ВидимостьЕГАИС = УчетАлкоголяВключен И ВыбранПодходящийВидОперации(ЭтотОбъект) И
		ЭтотОбъект.ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру;

	ИспользуетсяРегистрацияРозничныхПродаж = ИнтеграцияЕГАИСКлиентПовтИсп.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС(ЭтотОбъект.Дата);
	ВидимостьЕГАИС = ВидимостьЕГАИС И ИспользуетсяРегистрацияРозничныхПродаж;
	Если ВидимостьЕГАИС Тогда
		ДобавитьИнтерфейсРозницы(ЭлементыФормы, ЭтотОбъект.АктПереданВЕГАИС);
	Иначе
		УдалитьИнтерфейсРозницы(ЭлементыФормы);
	КонецЕсли;
	
	ОбновитьИнформациюНаФормеДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДобавитьИнтерфейсРозницы(ЭлементыФормы, АктПереданВЕГАИС)
	
	КнопкиПанели = ЭлементыФормы.ДействияФормы.Кнопки;
	Если КнопкиПанели.Найти("ВыгрузитьВЕГАИС") = Неопределено Тогда
		КнопкиПанели.Добавить("ВыгрузитьВЕГАИС", ТипКнопкиКоманднойПанели.Действие, "Выгрузить в ЕГАИС", Новый Действие("ДействияФормыВыгрузитьВЕГАИС"));
	КонецЕсли;

	Если АктПереданВЕГАИС Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.ВыгрузитьВЕГАИС.Доступность = Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.ВыгрузитьВЕГАИС.Текст = НСтр("ru = 'Выгружен в ЕГАИС'");
	КонецЕсли;

КонецПроцедуры

Процедура УдалитьИнтерфейсРозницы(ЭлементыФормы)
	РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.ДействияФормы.Кнопки, "ВыгрузитьВЕГАИС", Ложь);
КонецПроцедуры

// Обработчики событий форм розничных документов
Процедура ВыгрузитьВЕГАИСРозничныйДокумент(ЭтаФорма, ЭтотОбъект) Экспорт
	
	Отказ = Ложь;
	ПроверитьВозможностьВыгрузкиРозничногоДокумента(Отказ, ЭтотОбъект, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЧека = ПараметрыВыгрузкиРозничногоДокумента(ЭтотОбъект);
	
	ФУ = Неопределено;
	РезультатФР = ВыбратьФискальноеУстройство(ФУ);
	
	ПечатьСлипЧека = РезультатФР;
	
	ТранспортныйМодуль = ИспользуемыйТранспортныйМодуль(Этотобъект.Организация, ЭтотОбъект.СкладОрдер);
	РезультатОперации = ИнтеграцияЕГАИСКлиент.СформироватьПодписьЧека(ПараметрыЧека, ТранспортныйМодуль, , ПечатьСлипЧека, ФУ, Истина);
	
	Если РезультатОперации.Результат Тогда
		ЭтотОбъект.АктПереданВЕГАИС = Истина;
		ЭтотОбъект.АдресЧекаЕГАИС = РезультатОперации.АдресЧека;
		Этотобъект.ПодписьЧекаЕГАИС = РезультатОперации.ПодписьЧека;
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
	
КонецПроцедуры

Процедура ВидПоступленияПриИзменении(ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если ЭтотОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		ПроверитьОчиститьАкцизныеМарки(ЭтаФорма, ЭтотОбъект);
	КонецЕсли;
    
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма, Этотобъект) Экспорт
	
	Если Копирование Тогда
		Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.НеобходимостьВводаАкцизнойМарки Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПередНачаломИзменения(Элемент, Отказ, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
		И (Элемент.ТекущаяКолонка.Имя = "Количество" ИЛИ Элемент.ТекущаяКолонка.Имя = "Номенклатура") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПередУдалением(Элемент, Отказ, ЭтаФорма, ЭтотОбъект) Экспорт
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	УправлениеЗапасами.ОчиститьАкцизныеМарки(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма, ЭтотОбъект) Экспорт
	
	Если Не НоваяСтрока Тогда
		Элемент.Колонки.Количество.ЭлементУправления.Доступность = НЕ Элемент.ТекущиеДанные.НеобходимостьВводаАкцизнойМарки;
		Элемент.Колонки.Номенклатура.ЭлементУправления.Доступность = НЕ Элемент.ТекущиеДанные.НеобходимостьВводаАкцизнойМарки;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, Этотобъект) Экспорт

	ОбработкаТабличныхЧастей.ЗаполнитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ВводАкцизнойМарки", 0.1, Истина);
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;

КонецПроцедуры

Процедура ВводАкцизнойМарки(ЭтаФорма, ЭтотОбъект) Экспорт
	
	СтрокаТабличнойЧасти = ЭтаФорма.ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСканированияМарки = ПолучитьФорму("ОбщаяФорма.ФормаСканированияАкцизнойМарки", , ЭтаФорма);
	ФормаСканированияМарки.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
	ШтрихкодМарки = ФормаСканированияМарки.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ШтрихкодМарки) Тогда
		ЭтотОбъект.Товары.Удалить(СтрокаТабличнойЧасти);
		Возврат;
	КонецЕсли;
	
	СтрокаАкцизныеМарки = ЭтотОбъект.АкцизныеМарки.Добавить();
	СтрокаАкцизныеМарки.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки;
	СтрокаАкцизныеМарки.ШтрихкодМарки = ШтрихкодМарки;
	
КонецПроцедуры

// Обработка розничных документов
Процедура ПроверитьВозможностьВыгрузкиРозничногоДокумента(Отказ, ДокументИБ, ЭтаФорма)
	
	МассивОшибок = Новый Массив;
	МассивПредупреждений = Новый Массив;
	
	Если ДокументИБ.АктПереданВЕГАИС Тогда
		МассивОшибок.Добавить(НСтр("ru = 'По данному документу информация уже передана в ЕГАИС'"));
	КонецЕсли;

	Если Не ДокументИБ.Проведен Тогда
		МассивОшибок.Добавить(НСтр("ru = 'Документ не проведен'"));
	КонецЕсли;

	Если ДокументИБ.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		МассивОшибок.Добавить("Выгрузка документа в ЕГАИС доступна только для вида поступления ""На склад"".");
	КонецЕсли;
	
	Если ДокументИБ.Товары.Количество() = 0 Тогда
	    МассивОшибок.Добавить("Отсутствуют товары для выгрузки в ЕГАИС.");
	КонецЕсли;
	
	//Проверяем на наличие отсканированных акцизных марок
	ЗаголовокСообщения = "В документе присутствуют строки с неотсканированной маркируемой алкогольной продукцией:";
	ПодробныйТекст = "";
	Для Каждого Стр Из ДокументИБ.Товары.Выгрузить() Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьНеобходимостьВводаАкцизнойМарки(Стр);
		Если Стр.НеобходимостьВводаАкцизнойМарки Тогда
			
			СтрокиАкцизныхМарок = ДокументИБ.АкцизныеМарки.НайтиСтроки(Новый Структура("КлючСтроки", Стр.КлючСтроки));
			
			Если СтрокиАкцизныхМарок.Количество() = 0 Тогда
				ПодробныйТекст = ПодробныйТекст + Символы.ПС + Символы.Таб + "Строка" + Строка(Стр.НомерСтроки)
					+ " :" + Строка(Стр.Номенклатура)
					+ ?(ЗначениеЗаполнено(Стр.ХарактеристикаНоменклатуры),", "+Строка(Стр.ХарактеристикаНоменклатуры),"");
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	Если ПодробныйТекст <> "" Тогда
		МассивОшибок.Добавить(ЗаголовокСообщения + ПодробныйТекст);
	КонецЕсли;

	//Проверяем, что склад один на весь документ
	Если ДокументИБ.мУказаниеСкладовВТЧ Тогда
		ТаблицаСкладов = ДокументИБ.Товары.Выгрузить(,"Склад");
		ТаблицаСкладов.Свернуть("Склад");
		КоличествоСкладов = ТаблицаСкладов.Количество();
		Если КоличествоСкладов > 1 ИЛИ (КоличествоСкладов = 1 И
			Не ТаблицаСкладов[0].Склад = ДокументИБ.СкладОрдер) Тогда
			
			МассивОшибок.Добавить("Выгрузка документа в ЕГАИС доступна только для возврата на один склад.");

		КонецЕсли;
	КонецЕсли;

	СообщитьОРезультатахПроверки(МассивОшибок, МассивПредупреждений, Отказ);

КонецПроцедуры

Функция ПараметрыВыгрузкиРозничногоДокумента(ЭтотОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Наименование,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.НаименованиеПолное,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Код,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Артикул,
	|	ВозвратТоваровОтПокупателяТовары.Количество,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения.Представление,
	|	ВозвратТоваровОтПокупателяТовары.Цена,
	|	ВозвратТоваровОтПокупателяТовары.Сумма,
	|	ВозвратТоваровОтПокупателяТовары.КлючСтроки,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый КАК Маркируемая,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.ОбъемДАЛ * 10 КАК Объем,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.Крепость КАК Крепость,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.Производитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.Производитель.ИНН
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.ИНН
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.Производитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ВозвратТоваровОтПокупателяТовары.Номенклатура.Производитель.КПП
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.Номенклатура.ПроизводительИмпортерАлкогольнойПродукции.КПП
	|	КОНЕЦ КАК КПППроизводителя,
	|	ВозвратТоваровОтПокупателяТовары.ПроцентСкидкиНаценки,
	|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС,
	|	ЕСТЬNULL(ВозвратТоваровОтПокупателяАкцизныеМарки.ШтрихкодМарки, """") КАК ШтрихкодМарки,
	|	ВозвратТоваровОтПокупателяТовары.ХарактеристикаНоменклатуры,
	|	ВозвратТоваровОтПокупателяТовары.ЕдиницаИзмерения,
	|	ВозвратТоваровОтПокупателяТовары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.КодВидаПродукции КАК КодВидаПродукции
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.АкцизныеМарки КАК ВозвратТоваровОтПокупателяАкцизныеМарки
	|		ПО ВозвратТоваровОтПокупателяТовары.Ссылка = ВозвратТоваровОтПокупателяАкцизныеМарки.Ссылка
	|			И ВозвратТоваровОтПокупателяТовары.КлючСтроки = ВозвратТоваровОтПокупателяАкцизныеМарки.КлючСтроки
	|ГДЕ
	|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Номенклатура,
	|	ВТТовары.ХарактеристикаНоменклатуры,
	|	ВТТовары.ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(Штрихкоды.Штрихкод, """")) КАК Штрихкод
	|ПОМЕСТИТЬ ВТШтрихкоды
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Штрихкоды КАК Штрихкоды
	|		ПО ВТТовары.Номенклатура = Штрихкоды.Владелец
	|			И ВТТовары.ХарактеристикаНоменклатуры = Штрихкоды.ХарактеристикаНоменклатуры
	|			И ВТТовары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения
	|ГДЕ
	|	НЕ Штрихкоды.Штрихкод = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТовары.Номенклатура,
	|	ВТТовары.ХарактеристикаНоменклатуры,
	|	ВТТовары.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТовары.Номенклатура,
	|	ВТТовары.НоменклатураНаименование,
	|	ВТТовары.НоменклатураНаименованиеПолное,
	|	ВТТовары.НоменклатураКод,
	|	ВТТовары.НоменклатураАртикул,
	|	ВТТовары.Количество,
	|	ВТТовары.ЕдиницаИзмеренияПредставление,
	|	ВТТовары.Цена,
	|	ВТТовары.Сумма,
	|	ВТТовары.КлючСтроки,
	|	ЕСТЬNULL(ВТШтрихкоды.Штрихкод, """") КАК Штрихкод,
	|	ВТТовары.АлкогольнаяПродукция,
	|	ВТТовары.Маркируемая,
	|	ВТТовары.Объем,
	|	ВТТовары.Крепость,
	|	ВТТовары.ИННПроизводителя,
	|	ВТТовары.КПППроизводителя,
	|	ВТТовары.ПроцентСкидкиНаценки,
	|	ВТТовары.СтавкаНДС,
	|	ВТТовары.ШтрихкодМарки,
	|	ВТТовары.ХарактеристикаНоменклатуры,
	|	ВТТовары.ЕдиницаИзмерения,
	|	ВТТовары.КодВидаПродукции
	|ИЗ
	|	ВТТовары КАК ВТТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкоды КАК ВТШтрихкоды
	|		ПО ВТТовары.Номенклатура = ВТШтрихкоды.Номенклатура
	|			И ВТТовары.ХарактеристикаНоменклатуры = ВТШтрихкоды.ХарактеристикаНоменклатуры
	|			И ВТТовары.ЕдиницаИзмерения = ВТШтрихкоды.ЕдиницаИзмерения";
	
	ТаблицаТоваров = ИнтеграцияЕГАИСПереопределяемый.ТаблицаТоваровДляПодписиЧека();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаТоваров.Добавить();
		СтрокаТаблицы.Наименование = СокрЛП(Выборка.Номенклатура)
		                             + "(" + СокрЛП(Выборка.ЕдиницаИзмерения)
		                             + ?(ПустаяСтрока(СокрЛП(Выборка.ХарактеристикаНоменклатуры)), "", ", " + СокрЛП(Выборка.ХарактеристикаНоменклатуры)) + ")";
		
		СтрокаТаблицы.НомерСекции = 1;
		СтрокаТаблицы.Цена = Выборка.Цена;
		СтрокаТаблицы.Количество = Выборка.Количество;
		СтрокаТаблицы.Скидка = Выборка.ПроцентСкидкиНаценки;
		СтрокаТаблицы.СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС);
		
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции = Новый Структура;
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("АлкогольнаяПродукция", Выборка.АлкогольнаяПродукция);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("Маркируемая"         , Выборка.Маркируемая);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("Штрихкод"            , Выборка.Штрихкод);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("ШтрихкодМарки"       , Выборка.ШтрихкодМарки);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("Объем"               , Выборка.Объем);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("Крепость"            , Выборка.Крепость);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("ИННПроизводителя"    , Выборка.ИННПроизводителя);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("КПППроизводителя"    , Выборка.КПППроизводителя);
		СтрокаТаблицы.ПараметрыАлкогольнойПродукции.Вставить("КодВидаПродукции"    , Выборка.КодВидаПродукции);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтПокупателя.Организация.ИНН КАК ИНН,
	|	ВозвратТоваровОтПокупателя.Организация.КПП КАК КПП,
	|	"""" КАК АдресМагазина,
	|	ВозвратТоваровОтПокупателя.СкладОрдер.Наименование КАК НаименованиеМагазина,
	|	ВозвратТоваровОтПокупателя.Организация.КПП КАК ЗаводскойНомерККМ,
	|	ВозвратТоваровОтПокупателя.Организация КАК Организация,
	|	ВозвратТоваровОтПокупателя.СкладОрдер КАК Склад,
	|	ВозвратТоваровОтПокупателя.СуммаДокумента
	|ИЗ
	|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	|ГДЕ
	|	ВозвратТоваровОтПокупателя.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ПараметрыЧека = Новый Массив;
	ПараметрыЧека.Добавить(ТаблицаТоваров);
	ПараметрыЧека.Добавить(Шапка.СуммаДокумента);
	ПараметрыЧека.Добавить(0);
	ПараметрыЧека.Добавить(Истина);
	ПараметрыЧека.Добавить(Шапка.ИНН);
	ПараметрыЧека.Добавить(Шапка.КПП);
	ПараметрыЧека.Добавить(Шапка.АдресМагазина);
	ПараметрыЧека.Добавить(Шапка.НаименованиеМагазина);
	ПараметрыЧека.Добавить(Шапка.ЗаводскойНомерККМ);
	
	НомерНаПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(ЭтотОбъект);
	НомерНаПечатьЧисло = Число(НомерНаПечать);
	ПараметрыЧека.Добавить(НомерНаПечатьЧисло);

	НомерСменыЧисло = Число("2" + Формат(ЭтотОбъект.Дата, "ДФ=yyyyMMdd"));
	ПараметрыЧека.Добавить(НомерСменыЧисло);
	
	Возврат ПараметрыЧека;
	
КонецФункции

Функция ПараметрыЧекаДляПодписиВЕГАИС(ТаблицаТоваров, СуммаНал, СуммаБезНал, Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧекККМ.Организация.ИНН КАК ИНН,
	|	ЧекККМ.Организация.КПП КАК КПП,
	|	"""" КАК АдресМагазина,
	|	ЧекККМ.Склад.Наименование КАК НаименованиеМагазина,
	|	ЧекККМ.КассаККМ.СерийныйНомер КАК ЗаводскойНомерККМ,
	|	ВЫБОР
	|		КОГДА ЧекККМ.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЧекККМ.Возврат)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Возврат,
	|	ЧекККМ.Организация КАК Организация,
	|	ЧекККМ.Склад КАК Склад
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ПараметрыЧека = Новый Массив;
	ПараметрыЧека.Добавить(ТаблицаТоваров);
	ПараметрыЧека.Добавить(СуммаНал);
	ПараметрыЧека.Добавить(СуммаБезНал);
	ПараметрыЧека.Добавить(Выборка.Возврат);
	ПараметрыЧека.Добавить(Выборка.ИНН);
	ПараметрыЧека.Добавить(Выборка.КПП);
	ПараметрыЧека.Добавить(Выборка.АдресМагазина);
	ПараметрыЧека.Добавить(Выборка.НаименованиеМагазина);
	ПараметрыЧека.Добавить(Выборка.ЗаводскойНомерККМ);
	ПараметрыЧека.Добавить(0);
	ПараметрыЧека.Добавить(0);
	
	// Всегда должен быть последним
	ТранспортныйМодуль = ИнтеграцияЕГАИСПереопределяемый.ИспользуемыйТранспортныйМодуль(Выборка.Организация, Выборка.Склад);
	ПараметрыЧека.Добавить(ТранспортныйМодуль);
	
	Возврат ПараметрыЧека;
	
КонецФункции

// Фунцкия выбирает фискальный регистратор для печати слип-чека
Функция ВыбратьФискальноеУстройство(ФУ)
	
	Если ФУ = Неопределено Тогда
		МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(
		                    Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор);
		МассивККТ     = ПолучитьСерверТО().ПолучитьСписокУстройств(
		                    Перечисления.ВидыТорговогоОборудования.ККТ);
		МассивФУ = Новый Массив();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивФР);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивККТ);

		КоличествоФУ = МассивФУ.Количество();

		Если КоличествоФУ = 0 Тогда
			Сообщить(НСтр("ru = 'Чек не пробит, т.к. не подключено фискальное устройство!'"));
			Возврат Ложь;
		ИначеЕсли КоличествоФУ = 1 Тогда
			ФУ = МассивФР[0];
		Иначе
			СписокФУ = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(МассивФУ);

			ФУ = СписокФУ.ВыбратьЭлемент("Необходимо выбрать фискальное устройство");
			Если ФУ = Неопределено Тогда
				Сообщить(НСтр("ru = 'Операция отменена пользователем.'"));
				Возврат Ложь;
			Иначе
				ФУ = ФУ.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;

	КонецЕсли;
		
КонецФункции

Процедура ПроверитьОчиститьАкцизныеМарки(ЭтаФорма, ЭтотОбъект)
	
	Если ЭтотОбъект.АкцизныеМарки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Отсканированные акцизные марки будут очищены, документ будет недоступен для выгрузки в ЕГАИС, продолжить?",
		РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.СкладОрдер = ЭтаФорма.мСтароеЗначениеСклада;
		ЭтотОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		Возврат;
	КонецЕсли;
		
	ЭтотОбъект.АкцизныеМарки.Очистить();
	Для Каждого Стр Из ЭтотОбъект.Товары Цикл
		Стр.НеобходимостьВводаАкцизнойМарки = Ложь;
	КонецЦикла;
		
КонецПроцедуры
#КонецЕсли

// Обработчики событий документов
Процедура ЕГАИСПриКопированииДокументаИБПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		Источник.ТТНИсходящая = Документы["ТТНИсходящаяЕГАИС"].ПустаяСсылка();
		Источник.ТТНВходящая = Документы["ТТНВходящаяЕГАИС"].ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ЭтоРозничныйВозвратАлкоголя(Источник) Тогда
		Источник.АдресЧекаЕГАИС = "";
		Источник.ПодписьЧекаЕГАИС = "";
		Источник.АктПереданВЕГАИС = Ложь;
		Возврат;
	КонецЕсли;
	
	ИмяТипаДокЕГАИС = Источник.ДокЕГАИС.Метаданные().Имя;
	Источник.ДокЕГАИС = Документы[ИмяТипаДокЕГАИС].ПустаяСсылка();
	
	Если ЭтоВходящийДокументЕГАИС(Источник) Тогда
		Для Каждого СтрокаТоваров Из Источник.Товары Цикл
			СтрокаТоваров.АлкогольнаяПродукция  = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
			СтрокаТоваров.ИдентификаторСтроки   = "";
			СтрокаТоваров.ИдентификаторУпаковки = "";
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЕГАИСПередЗаписьюДокументаИБПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ЭтоНовый() И Источник.ПометкаУдаления Тогда
		Если ПереданВЕГАИС(Источник) И Не ЗафиксированОтказ(Источник) Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьОбОшибке("Документ передан в ЕГАИС, пометка на удаление невозможна.");
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ПолученИзЕГАИС(Источник) Тогда
			ТЧ = Источник.Метаданные().ТабличныеЧасти;
			Если ТЧ.Найти("Оборудование") <> Неопределено Тогда
				Источник.Оборудование.Очистить();
			КонецЕсли;
			Если ТЧ.Найти("ОбъектыСтроительства") <> Неопределено Тогда
				Источник.ОбъектыСтроительства.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Документы корректировки
Процедура ПроверитьСостояниеКорректируемогоДокумента(ДокКорректировки, ИмяРеквизита) Экспорт
	
	Если ДокКорректировки.ЭтоНовый() Тогда
		КД = ДокКорректировки[ИмяРеквизита];
		Если ЗначениеЗаполнено(КД) Тогда
			КДОбъект = КД.ПолучитьОбъект();
			Если (ЭтоВходящийДокументЕГАИС(КДОбъект) ИЛИ ЭтоИсходящийДокументЕГАИС(КДОбъект))
				И ПереданВЕГАИС(КД) Тогда
		
				СообщениеПользователю = "Корректируемый документ был передан в ЕГАИС. Исправление может привести к расхождениям с информацией отправленной в ЕГАИС.";
				ОбщегоНазначения.СообщитьИнформациюПользователю(СообщениеПользователю);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверка состояний документов ЕГАИС
Функция ПереданВЕГАИС(Док) Экспорт
	
	ДокЕГАИС = Неопределено;
	
	Если Док.Метаданные().Реквизиты.Найти("АктПереданВЕГАИС") <> Неопределено Тогда
		Результат = Док.АктПереданВЕГАИС;
		Возврат Результат;
	КонецЕсли;
	
	Если Док.Метаданные().Реквизиты.Найти("СтатусОбработки") <> Неопределено Тогда
		ДокЕГАИС = Док;
	Иначе
		ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(Док);
		Если Док.Метаданные().Реквизиты.Найти(ИмяРеквизитаЕГАИС) <> Неопределено Тогда
			ДокЕГАИС = Док[ИмяРеквизитаЕГАИС];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокЕГАИС) Тогда
		СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокЕГАИС, "СтатусОбработки");
		РедактируемыеСтатусы = РедактируемыеСтатусы(ДокЕГАИС);
		Результат = (РедактируемыеСтатусы.Найти(СтатусОбработки) = Неопределено);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолученИзЕГАИС(ДокументИБ) Экспорт
	
	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ДокументИБ, "Входящий");
	Если ЗначениеЗаполнено(ИмяРеквизитаЕГАИС) Тогда
		Возврат ЗначениеЗаполнено(ДокументИБ[ИмяРеквизитаЕГАИС]);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЗафиксированОтказ(ДокументИБ)
	Если ДокументИБ.Метаданные().Реквизиты.Найти("ДокЕГАИС") <> Неопределено Тогда
		Значение1 = ДокументИБ.ДокЕГАИС.СтатусОбработки;
		Значение2 = ДокументИБ.ДокЕГАИС.СтатусОбработки;
	ИначеЕсли ЭтоРозничныйВозвратАлкоголя(ДокументИБ) Тогда
		Возврат Ложь;
	Иначе
		Значение1 = ДокументИБ.ТТНВходящая.СтатусОбработки;
		Значение2 = ДокументИБ.ТТНИсходящая.СтатусОбработки;
	КонецЕсли;
	Результат = Значение1 = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа ИЛИ
		Значение2 = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа;
	Возврат Результат;
КонецФункции

Функция РедактируемыеСтатусы(ДокументЕГАИС)
	
	ТипДокументаЕГАИС = ТипЗнч(ДокументЕГАИС);
	
	МассивСтатусов = Новый Массив;
	
	Если ТипДокументаЕГАИС = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Новый);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачиВЕГАИС);
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаПодтверждения);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаОтказа);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОшибкаПередачиАктаРасхождений);
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Новый);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачиВЕГАИС);
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Новый);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачиВЕГАИС);
	КонецЕсли;		

	Возврат МассивСтатусов;
	
КонецФункции

Функция ЗавершающиеСтатусы(ДокументЕГАИС)
	
	ТипДокументаЕГАИС = ТипЗнч(ДокументЕГАИС);
	
	МассивСтатусов = Новый Массив;
	
	Если ТипДокументаЕГАИС = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктПодтверждения);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПринятАктОтказа);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданоПодтверждениеАктаРасхождений);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданОтказОтАктаРасхождений);
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктПодтверждения);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПереданАктОтказа);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятоПодтверждениеАктаРасхождений);
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятОтказОтАктаРасхождений);
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВЕГАИС);
	ИначеЕсли ТипДокументаЕГАИС = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВЕГАИС);
	КонецЕсли;		

	Возврат МассивСтатусов;
	
КонецФункции

Функция ЭтоРозничныйВозвратАлкоголя(ЭтотОбъект)
	
	// Для ВозвратаТоваровОтПокупателя должен возвращать "Истина"
	// для всех остальных должна возвращать "Ложь"
	Возврат  
		  ТипЗнч(ЭтотОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя");
		
КонецФункции

Функция ОпределитьСостояниеПеремещения(ЭтотОбъект, ДокЕГАИС = Неопределено) Экспорт
	// Если в ДокЕГАИС передано любое значение отличное от Неопределено,
	// то в него нужно вернуть ссылку на документ егаис из перемещения,
	// которая соответствует текущему состоянию
	Если ЗначениеЗаполнено(ЭтотОбъект.ТТНВходящая) Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.ТТНИсходящая) Тогда
			Результат = "Входящий";
			ИмяРеквизита = "ТТНВходящая";
		Иначе
			СтатусОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ТТНИсходящая, "СтатусОбработки");
			ЗавершающиеСтатусы = ЗавершающиеСтатусы(ЭтотОбъект.ТТНИсходящая);
			Если ЗавершающиеСтатусы.Найти(СтатусОбработки) <> Неопределено Тогда
				Результат = "Исходящий";
				ИмяРеквизита = "ТТНИсходящая";
			Иначе
				Результат = "Входящий";
				ИмяРеквизита = "ТТНВходящая";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Результат = "Исходящий";
		ИмяРеквизита = "ТТНИсходящая";
	КонецЕсли;
	Если ДокЕГАИС <> Неопределено Тогда
		ДокЕГАИС = ЭтотОбъект[ИмяРеквизита];
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Перемещение
#Если Клиент Тогда
Процедура УстановитьСвойстваЭлементовФормыПеремещения(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	ВидимостьЕГАИС = УчетАлкоголяВключен И ВыбранПодходящийВидОперации(ЭтотОбъект);

	ЭлементыФормы.НадписьТТНИсходящая.Видимость = ВидимостьЕГАИС;
	ЭлементыФормы.ТТНИсходящая.Видимость        = ВидимостьЕГАИС;
	ЭлементыФормы.НадписьТТНВходящая.Видимость  = ВидимостьЕГАИС;
	ЭлементыФормы.ТТНВходящая.Видимость         = ВидимостьЕГАИС;
	ЭлементыФормы.РамкаЕГАИС.Видимость          = ВидимостьЕГАИС;
	Если Не ВидимостьЕГАИС Тогда
		УдалитьИнтерфейсИсходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
		УдалитьИнтерфейсВходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
	Иначе
		СостояниеДокумента = ОпределитьСостояниеПеремещения(ЭтотОбъект);
		Если СостояниеДокумента = "Исходящий" Тогда
			УдалитьИнтерфейсВходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
			ДобавитьИнтерфейсИсходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
		Иначе
			УдалитьИнтерфейсИсходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
			ДобавитьИнтерфейсВходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект);
		КонецЕсли;
		ЭлементыФормы.ТТНИсходящая.УстановитьДействие("НачалоВыбора", Новый Действие("ДокЕГАИСНачалоВыбора"));
		ЭлементыФормы.ТТНВходящая.УстановитьДействие ("НачалоВыбора", Новый Действие("ДокЕГАИСНачалоВыбора"));
		ЭлементыФормы.ТТНИсходящая.УстановитьДействие("ОбработкаВыбора", Новый Действие("ДокЕГАИСОбработкаВыбора"));
		ЭлементыФормы.ТТНВходящая.УстановитьДействие ("ОбработкаВыбора", Новый Действие("ДокЕГАИСОбработкаВыбора"));
		ЭлементыФормы.ТТНИсходящая.УстановитьДействие("ПриИзменении", Новый Действие("ДокЕГАИСПриИзменении"));
		ЭлементыФормы.ТТНВходящая.УстановитьДействие ("ПриИзменении", Новый Действие("ДокЕГАИСПриИзменении"));
	КонецЕсли;
	
	// Работа с торговым залом
	НастроитьПодменюЕГАИСДляТорговогоЗала(ЭлементыФормы, ЭтотОбъект, ВидимостьЕГАИС);
	// Работа с торговым залом
	
	ОбновитьИнформациюНаФормеДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДобавитьИнтерфейсИсходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	ДобавитьПодменюЕГАИСвКоманднуюПанельФормыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
	ДобавитьПодменюЕГАИСвКоманднуюПанельТоварыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект);

КонецПроцедуры

Процедура ДобавитьИнтерфейсВходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	ДобавитьПодменюЕГАИСвКоманднуюПанельФормыВходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
	ДобавитьПодменюЕГАИСвКоманднуюПанельТоварыИсходящегоДокумента(ЭлементыФормы, ЭтотОбъект);
	
КонецПроцедуры

Процедура УдалитьИнтерфейсИсходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.ДействияФормы.Кнопки, "ЕГАИС");
	РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.КоманднаяПанельТовары.Кнопки, "ЕГАИС");
	
КонецПроцедуры

Процедура УдалитьИнтерфейсВходящего(ЭтаФорма, УчетАлкоголяВключен, ЭлементыФормы, ЭтотОбъект)
	
	РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.ДействияФормы.Кнопки, "ЕГАИС");
	РаботаСДиалогами.УдалитьКнопки(ЭлементыФормы.КоманднаяПанельТовары.Кнопки, "ЕГАИС");
	
КонецПроцедуры

Функция ИспользуемыйТранспортныйМодуль(Организация, Склад) Экспорт
	
	Результат = Неопределено;
	ТорговыйОбъект = НайтиОрганизациюЕГАИС(Организация, Склад);
	
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ТорговыйОбъект.Код));
	    ДоступныеМодули = ИнтеграцияЕГАИСВызовСервера.ДоступныеТранспортныеМодули(Отбор);
		Если ДоступныеМодули.Количество() = 1 Тогда
			Результат = ДоступныеМодули[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
#КонецЕсли

Функция ИмяРеквизитаЕГАИС(ЭтотОбъект, Направление = Неопределено)
	
	МетаданныеОбъекта = ЭтотОбъект.Метаданные();
	Если МетаданныеОбъекта.Реквизиты.Найти("ДокЕГАИС") <> Неопределено Тогда
		Результат = "ДокЕГАИС";
	ИначеЕсли ЭтоРозничныйВозвратАлкоголя(ЭтотОбъект) Тогда
		Результат = "";
	ИначеЕсли МетаданныеОбъекта.Имя = "ПеремещениеТоваров" Тогда
		Если Направление = Неопределено Тогда
			Направление = ОпределитьСостояниеПеремещения(ЭтотОбъект);
		КонецЕсли;
		Если ВРег(Направление) = "ИСХОДЯЩИЙ" Тогда
			Результат = "ТТНИсходящая";
		Иначе
			Результат = "ТТНВходящая";
		КонецЕсли;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет можно ли выполнять действия ЕГАИС с переданным объектом 
//
// Параметры:
// Объект (входящий) - документ или перечисление
// МассивВидовОпераций (исходящий) - массив подходящих видов операций
//
Функция ВыбранПодходящийВидОперации(Объект, МассивВидовОпераций = Неопределено)
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если МассивВидовОпераций = Неопределено ИЛИ ТипЗнч(МассивВидовОпераций) <> Тип("Массив") Тогда
		МассивВидовОпераций = Новый Массив;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг") ИЛИ 
		ТипОбъекта = Тип("ПеречислениеСсылка.ВидыОперацийРеализацияТоваров") Тогда
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Брак);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.РасходныйОрдерНаТовары") ИЛИ 
		ТипОбъекта = Тип("ПеречислениеСсылка.ВидыОперацийРасходныйОрдер") Тогда
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРасходныйОрдер.Перемещение);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") ИЛИ 
		ТипОбъекта = Тип("ПеречислениеСсылка.ВидыОперацийПриходныйОрдер") Тогда
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПриходныйОрдер.Перемещение);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПеремещениеТоваров") ИЛИ 
		ТипОбъекта = Тип("ПеречислениеСсылка.ВидыОперацийПеремещениеТоваров") Тогда
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция);
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Если МетаданныеОбъекта.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
			ВидОперации = Объект.ВидОперации;
		КонецЕсли;
	Иначе
		ВидОперации = Объект;
	КонецЕсли;
	
	Возврат МассивВидовОпераций.Количество() = 0 ИЛИ МассивВидовОпераций.Найти(ВидОперации) <> Неопределено;
	
КонецФункции

#Если Клиент Тогда
// Устанавливает видимость группы ЕГАИС при полном интерфейсе в зависимости от ФО
//
Процедура УстановитьВидимостьИнтерфейсаЕГАИС() Экспорт
	
	ОсновнойИнтерфейс = ПользователиИнформационнойБазы.ТекущийПользователь().ОсновнойИнтерфейс;
	
	Если ОсновнойИнтерфейс = Неопределено Тогда
		ОсновнойИнтерфейс = Метаданные.ОсновнойИнтерфейс;
		Если ОсновнойИнтерфейс = Неопределено Тогда
			ИмяИнтерфейса = "Полный";
		Иначе
			ИмяИнтерфейса = ОсновнойИнтерфейс.Имя;
		КонецЕсли;
	Иначе
		ИмяИнтерфейса = ОсновнойИнтерфейс.Имя;
	КонецЕсли;
	
	ИспользованиеАлкогольнойПродукции = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	Если ИспользованиеАлкогольнойПродукции Тогда
		ИмяИнтерфейса = ИмяИнтерфейса + ",ИнтерфейсЕГАИС"
	КонецЕсли;
	
	ГлавныйИнтерфейс.ПереключитьИнтерфейс(ИмяИнтерфейса);
	
КонецПроцедуры

Процедура НастроитьПодменюЕГАИСДляТорговогоЗала(ЭлементыФормы, ЭтотОбъект, ВидимостьЕГАИС)

	ИмяРеквизитаЕГАИС = ИмяРеквизитаЕГАИС(ЭтотОбъект);
	
	КнопкиКП = ЭлементыФормы.ДействияФормы.Кнопки;
	кЕГАИС = КнопкиКП.Найти("ЕГАИС");
	Если кЕГАИС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиЕГАИС = кЕГАИС.Кнопки;

	ТипОбъекта = ТипЗнч(ЭтотОбъект);
	ДобавлятьПередачу = ТипОбъекта = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") ИЛИ 
		ТипОбъекта = Тип("ДокументОбъект.ПеремещениеТоваров") ИЛИ
		ТипОбъекта = Тип("ДокументОбъект.ПриходныйОрдерНаТовары");
	ДобавлятьВозврат = ТипОбъекта = Тип("ДокументОбъект.ПеремещениеТоваров") ИЛИ
		ТипОбъекта = Тип("ДокументОбъект.РасходныйОрдерНаТовары");
	
	Если ДобавлятьПередачу ИЛИ ДобавлятьВозврат Тогда
		кРазделительТЗ = КнопкиЕГАИС.Найти("РазделительТЗ");
		Если кРазделительТЗ = Неопределено Тогда
			кРазделительТЗ = КнопкиЕГАИС.Добавить("РазделительТЗ", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлятьПередачу Тогда
		кПередача = КнопкиЕГАИС.Найти("ПередачаВТорговыйЗалЕГАИС");
		Если кПередача = Неопределено Тогда
			кПередача = КнопкиЕГАИС.Добавить("ПередачаВТорговыйЗалЕГАИС", ТипКнопкиКоманднойПанели.Действие, 
				"Передача в торговый зал ЕГАИС", Новый Действие("СоздатьДокументТорговогоЗала"));
			кПередача.Картинка = БиблиотекаКартинок.Документ;
			кПередача.Подсказка = "Создать новый документ ""Передача в торговый зал ЕГАИС""";
			кПередача.Пояснение = кПередача.Подсказка;
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлятьВозврат Тогда
		кВозврат = КнопкиЕГАИС.Найти("ВозвратИзТорговогоЗалаЕГАИС");
		Если кВозврат = Неопределено Тогда
			кВозврат = КнопкиЕГАИС.Добавить("ВозвратИзТорговогоЗалаЕГАИС", ТипКнопкиКоманднойПанели.Действие, 
				"Возврат из торгового зала ЕГАИС", Новый Действие("СоздатьДокументТорговогоЗала"));
			кВозврат.Картинка = БиблиотекаКартинок.Документ;
			кВозврат.Подсказка = "Создать новый документ ""Возврат из торгового зала ЕГАИС""";
			кВозврат.Пояснение = кВозврат.Подсказка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецЕсли

Функция СоздатьНайтиДокументИнформационнойБазы(ТТНВходящаяЕГАИС, ТолькоПоиск) Экспорт
	
	Результат = ИнтеграцияЕГАИСПереопределяемый.НайтиДокументИБПоДокументуЕГАИС(ТТНВходящаяЕГАИС, "Входящий");
	
	Если Результат.Ссылка <> Неопределено Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;
	
	Если ТолькоПоиск Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТТНВходящаяЕГАИС.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя Тогда
		Сообщить("Создание документа ""Возврат товаров от покупателя"" на основе ТТН (входящей) не поддерживается", СтатусСообщения.Обычное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТТНВходящаяЕГАИС.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная Тогда
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ТипОперацииДляЗаполненияШапки = "Покупка";
		ИмяГрузополучателя = "Грузополучатель";
	ИначеЕсли ТТНВходящаяЕГАИС.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя Тогда
		ДокументОбъект = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		ТипОперацииДляЗаполненияШапки = "Продажа";
		ИмяГрузополучателя = "";
	КонецЕсли;
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаРеквизитыШапки_ТТН_ЕГАИС();
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ПустаяСсылкаПоставщика", Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	ВыборкаПоШапке = Результат.Выбрать();
	
	Если ВыборкаПоШапке.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ВыборкаПоШапке);
	КонецЕсли;
	
	ИдентификаторФСРАР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС.Грузополучатель, "Код");
	ВыборкаНастроек = РегистрыСведений.НастройкиОбменаЕГАИС.Выбрать(Новый Структура("ИдентификаторФСРАР", ИдентификаторФСРАР));
	Если ВыборкаНастроек.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаНастроек.Организация) Тогда
			ДокументОбъект.Организация = ВыборкаНастроек.Организация;
			Грузополучатель = ЗаполнениеДокументов.ПолучитьКонтрагентаПоОрганизации(ВыборкаНастроек.Организация);
			Если ЗначениеЗаполнено(Грузополучатель) И ЗначениеЗаполнено(ИмяГрузополучателя) Тогда
				ДокументОбъект[ИмяГрузополучателя] = Грузополучатель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Отбор = Новый Структура("Поле, Значение", "ИдентификаторФСРАР", ИдентификаторФСРАР);
	СписокСкладов = ИнтеграцияЕГАИСПереопределяемый.ПолучитьСписокСкладовИзНастроекЕГАИС(Отбор);
	Если СписокСкладов.Количество() = 1 Тогда
		ДокументОбъект.СкладОрдер = СписокСкладов[0].Значение;
	КонецЕсли;

	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ДокументОбъект.ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОтражатьДокументыВУправленческомУчете");
	ДокументОбъект.ОтражатьВБухгалтерскомУчете  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
	ДокументОбъект.ОтражатьВНалоговомУчете	    = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОтражатьДокументыВНалоговомУчете");
	
	ДокументОбъект.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
	
	ДокументОбъект.Ответственный    = ТекущийПользователь;
	ДокументОбъект.УчитыватьНДС     = Истина;
	ДокументОбъект.СуммаВключаетНДС = Истина;
	
	ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();	
	ДокументОбъект.КурсВзаиморасчетов = 1;
	ДокументОбъект.КратностьВзаиморасчетов = 1;
	
	КонтрагентБылНайден = ЗначениеЗаполнено(ДокументОбъект.Контрагент);
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекущийПользователь, , ТипОперацииДляЗаполненияШапки, , , );
	Если Не КонтрагентБылНайден Тогда
		// Не нужно заполнять значениями из настроек пользователя
		ДокументОбъект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		ДокументОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ДокументОбъект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаРеквизитыТЧ_ТТН_ЕГАИС();
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияПустоеЗначение", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаДанныеЕГАИС = Результат[4].Выгрузить();
	ТаблицаДополнительныхДанные = Результат[3].Выгрузить();
	
	ИнтеграцияЕГАИСПереопределяемый.ЗаполнитьТЧДокументаИБПоДаннымЕГАИС(ТаблицаДанныеЕГАИС, ТаблицаДополнительныхДанные, ДокументОбъект);
	
	ДокументОбъект.Записать();
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Процедура СоздатьДокументТорговогоЗала(Кнопка, ЭтотОбъект) Экспорт
	
	ВидДокумента = Кнопка.Имя;
	ДокументТЗМенеджер = Документы[ВидДокумента];
	
	ДокументТЗ = ДокументТЗМенеджер.СоздатьДокумент();
	ДокументТЗ.Заполнить(ЭтотОбъект.Ссылка);
	
	ФормаДокумента = ДокументТЗМенеджер.ПолучитьФорму("ФормаДокумента");
	ЗначениеВДанныеФормы(ДокументТЗ, ФормаДокумента.Объект);
	ФормаДокумента.Открыть();
	ФормаДокумента.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПередачуВТорговыйЗал(ДокументОбъект, ДанныеЗаполнения)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДокументОбъект.ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДанныеЗаполнения.Организация, ДанныеЗаполнения.СкладОтправитель);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ДокументОбъект.ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДанныеЗаполнения.Организация, ДанныеЗаполнения.СкладОрдер);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		ДокументОбъект.ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДанныеЗаполнения.Организация, ДанныеЗаполнения.Склад);
	КонецЕсли;
	ЗаполнитьТЧДокументаЕГАИСПоДаннымИБ(ДокументОбъект, ДанныеЗаполнения);
КонецПроцедуры

Процедура ЗаполнитьВозвратИзТорговогоЗала(ДокументОбъект, ДанныеЗаполнения)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		ДокументОбъект.ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДанныеЗаполнения.Организация, ДанныеЗаполнения.СкладОтправитель);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		ДокументОбъект.ОрганизацияЕГАИС = НайтиОрганизациюЕГАИС(ДанныеЗаполнения.Организация, ДанныеЗаполнения.Склад);
	КонецЕсли;
	ЗаполнитьТЧДокументаЕГАИСПоДаннымИБ(ДокументОбъект, ДанныеЗаполнения);
КонецПроцедуры

Процедура ЗаполнитьТЧДокументаЕГАИСПоДаннымИБ(ДокументОбъект, ДанныеЗаполнения)
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧДокументаИБ.Номенклатура КАК Номенклатура,
	|	ТЧДокументаИБ.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТЧДокументаИБ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ТЧДокументаИБ.Количество) КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ."+ДанныеЗаполнения.Метаданные().Имя+".Товары КАК ТЧДокументаИБ
	|ГДЕ
	|	ТЧДокументаИБ.Ссылка = &Ссылка
	|	И ТЧДокументаИБ.Номенклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧДокументаИБ.Номенклатура,
	|	ТЧДокументаИБ.ХарактеристикаНоменклатуры,
	|	ТЧДокументаИБ.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.АлкогольнаяПродукция,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ПОМЕСТИТЬ втПродукцияИзРанееСозданныхДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВозвратИзТорговогоЗалаЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|		ВозвратИзТорговогоЗалаЕГАИСТовары.Количество КАК Количество
	|	ИЗ
	|		Документ.ВозвратИзТорговогоЗалаЕГАИС.Товары КАК ВозвратИзТорговогоЗалаЕГАИСТовары
	|	ГДЕ
	|		НЕ ВозвратИзТорговогоЗалаЕГАИСТовары.Ссылка.ПометкаУдаления
	|		И ВозвратИзТорговогоЗалаЕГАИСТовары.Ссылка.ДокументОснование = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаВТорговыйЗалЕГАИСТовары.АлкогольнаяПродукция,
	|		ПередачаВТорговыйЗалЕГАИСТовары.Количество
	|	ИЗ
	|		Документ.ПередачаВТорговыйЗалЕГАИС.Товары КАК ПередачаВТорговыйЗалЕГАИСТовары
	|	ГДЕ
	|		НЕ ПередачаВТорговыйЗалЕГАИСТовары.Ссылка.ПометкаУдаления
	|		И ПередачаВТорговыйЗалЕГАИСТовары.Ссылка.ДокументОснование = &Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	втТовары.Количество КАК Количество
	|ПОМЕСТИТЬ втРезультатСопоставления
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО втТовары.Номенклатура = СоответствиеНоменклатурыЕГАИС.Номенклатура
	|			И (втТовары.ЕдиницаИзмерения = СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения
	|				ИЛИ СоответствиеНоменклатурыЕГАИС.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))
	|			И (втТовары.Характеристика = СоответствиеНоменклатурыЕГАИС.Характеристика
	|				ИЛИ СоответствиеНоменклатурыЕГАИС.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультатСопоставления.АлкогольнаяПродукция,
	|	втРезультатСопоставления.Количество - ЕСТЬNULL(втПродукцияИзРанееСозданныхДокументов.Количество, 0) КАК Количество
	|ИЗ
	|	втРезультатСопоставления КАК втРезультатСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПродукцияИзРанееСозданныхДокументов КАК втПродукцияИзРанееСозданныхДокументов
	|		ПО втРезультатСопоставления.АлкогольнаяПродукция = втПродукцияИзРанееСозданныхДокументов.АлкогольнаяПродукция
	|ГДЕ
	|	(втПродукцияИзРанееСозданныхДокументов.АлкогольнаяПродукция ЕСТЬ NULL 
	|			ИЛИ втРезультатСопоставления.Количество - ЕСТЬNULL(втПродукцияИзРанееСозданныхДокументов.Количество, 0) > 0)";
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЕГАИС = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЕГАИС, Выборка);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьСостояниеДокументаОснования(ДокументОснование, Отказ)
	
	Если Не ДокументОснование.Проведен Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ основание не проведен", Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.КлючСвязи,
	|	Т.АлкогольнаяПродукция,
	|	Т.Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КлючСвязи,
	|	1 КАК Количество
	|ПОМЕСТИТЬ АкцизныеМаркиВсе
	|ИЗ
	|	&АкцизныеМарки КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.КлючСвязи,
	|	СУММА(Марки.Количество) КАК Количество
	|ПОМЕСТИТЬ АкцизныеМарки
	|ИЗ
	|	АкцизныеМаркиВсе КАК Марки
	|СГРУППИРОВАТЬ ПО
	|	Марки.КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Если это реализация, то количество марок всегда  должно соответствовать
	// количеству в ТЧ Товары
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                    КАК НомерСтроки,
	|	Товары.КлючСвязи                      КАК КлючСвязи,
	|	Товары.АлкогольнаяПродукция           КАК АлкогольнаяПродукция,
	|	Товары.Количество                     КАК Количество,
	|	ЕСТЬNULL(АкцизныеМарки.Количество, 0) КАК КоличествоАкцизныхМарок
	|ИЗ
	|	Товары КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|	ПО Товары.КлючСвязи = АкцизныеМарки.КлючСвязи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
	|	ПО Товары.АлкогольнаяПродукция = Продукция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
	|	ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ВидыПродукции.Маркируемый, ЛОЖЬ)
	|	И Товары.Количество <> ЕСТЬNULL(АкцизныеМарки.Количество, 0)
	|	И Товары.Количество <> 0
	|	И &ЭтоРеализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Если это другой вид операции, то проверка количества выполняется тольков в том случае,
	// если марки вообще заполнены.
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                    КАК НомерСтроки,
	|	Товары.КлючСвязи                      КАК КлючСвязи,
	|	Товары.АлкогольнаяПродукция           КАК АлкогольнаяПродукция,
	|	Товары.Количество                     КАК Количество,
	|	ЕСТЬNULL(АкцизныеМарки.Количество, 0) КАК КоличествоАкцизныхМарок
	|ИЗ
	|	Товары КАК Товары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|	ПО Товары.КлючСвязи = АкцизныеМарки.КлючСвязи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
	|	ПО Товары.АлкогольнаяПродукция = Продукция.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
	|	ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ВидыПродукции.Маркируемый, ЛОЖЬ)
	|	И Товары.Количество <> ЕСТЬNULL(АкцизныеМарки.Количество, 0)
	|	И Товары.Количество <> 0
	|	И НЕ &ЭтоРеализация
	|	И ЕСТЬNULL(АкцизныеМарки.Количество, 0) <> 0
	|");
	
	Запрос.Параметры.Вставить("Товары", Объект.Товары.Выгрузить());
	Запрос.Параметры.Вставить("АкцизныеМарки", Объект.АкцизныеМарки.Выгрузить());
	Запрос.Параметры.Вставить("ЭтоРеализация", Объект.ПричинаСписания = Перечисления.ПричиныСписанийЕГАИС.Реализация);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		ТекстОшибки = НСтр("ru = 'В строке %1 для %2 должно быть указано акцизных марок - %3, а указано - %4.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", СтрокаТЧ.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", СтрокаТЧ.АлкогольнаяПродукция);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%3", СтрокаТЧ.Количество);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%4", СтрокаТЧ.КоличествоАкцизныхМарок);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				"ТоварыКоличество",
				,
				Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеСправокБ(Объект, Отказ) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Т.НомерСтроки,
	|	Т.СправкаБ,
	|	Т.АлкогольнаяПродукция
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                    КАК НомерСтроки,
	|	Товары.СправкаБ                       КАК СправкаБ,
	|	Товары.АлкогольнаяПродукция           КАК АлкогольнаяПродукция
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.СправкаБ = ЗНАЧЕНИЕ(Справочник.СправкиБЕГАИС.ПустаяСсылка)
	|
	|");
	
	Запрос.Параметры.Вставить("Товары", Объект.Товары.Выгрузить());
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		ТекстОшибки = НСтр("ru = 'В строке %1 для %2 должна быть заполнена справка Б.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%1", СтрокаТЧ.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%2", СтрокаТЧ.АлкогольнаяПродукция);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				"ТоварыСправкаБ",
				,
				Отказ);
		
	КонецЦикла;
	
КонецПроцедуры
