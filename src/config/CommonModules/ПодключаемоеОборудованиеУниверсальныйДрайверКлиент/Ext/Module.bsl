
//#Область ПрограммныйИнтерфейс

// Функция осуществляет подключение устройства.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	ВыходныеПараметры = Новый Массив();
	ПараметрыПодключения.Вставить("ИДУстройства", "");
	
	ТипОборудованияИспользуемый = "";
	
	Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
		ТипОборудованияИспользуемый = ПараметрыПодключения.ТипОборудования;
		// Предопределенный параметр с указанием типа драйвера.
		Попытка
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудованияИспользуемый) 
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка обращения к драйверу.'"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, ОписаниеДрайвера, ТипОборудования, РевизияИнтерфейса, 
										ИнтеграционныйКомпонент, ОсновнойДрайверУстановлен, URLЗагрузкиДрайвера);
		ПараметрыПодключения.Вставить("РевизияИнтерфейса", РевизияИнтерфейса);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьОписание>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
		
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.Подключить(ПараметрыПодключения.ИДУстройства);
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.Подключить>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если НЕ Ответ Тогда
		Результат = Ложь;
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
	Иначе
		
		Если ТипОборудованияИспользуемый = "ПринтерЧеков" 
				Или ТипОборудованияИспользуемый = "ФискальныйРегистратор" 
				Или ТипОборудованияИспользуемый = "ККТ" Тогда
			ВремВыходныеПараметры = Новый Массив();
			Если ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВремВыходныеПараметры) Тогда
				ВремШиринаСтроки = ВремВыходныеПараметры[0];
				ШиринаСтроки = ?(ВремШиринаСтроки <> Неопределено И ВремШиринаСтроки > 0, ВремШиринаСтроки, 32);
			КонецЕсли;
			ПараметрыПодключения.Вставить("ШиринаСтроки", ШиринаСтроки);
		ИначеЕсли ТипОборудованияИспользуемый = "ЭквайринговыйТерминал" Тогда
			ПараметрыПодключения.Вставить("КодОригинальнойТранзакции", Неопределено);
			ПараметрыПодключения.Вставить("ТипТранзакции", "");
		ИначеЕсли ТипОборудованияИспользуемый = "СканерШтрихкода" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("Штрихкод");
			ВыходныеПараметры[1].Добавить("Barcode");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательМагнитныхКарт" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("ДанныеКарты");
			ВыходныеПараметры[1].Добавить("TracksData");
		ИначеЕсли ТипОборудованияИспользуемый = "СчитывательRFID" Тогда
			ВыходныеПараметры.Добавить(Строка(ПараметрыПодключения.ИДУстройства));
			ВыходныеПараметры.Добавить(Новый Массив());
			ВыходныеПараметры[1].Добавить("RFID");
			ВыходныеПараметры[1].Добавить("RFID");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	ОбъектДрайвера.Отключить(ПараметрыПодключения.ИДУстройства);
	
	Возврат Результат;
	
КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу.
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт
	
	Результат = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	Если ВходныеПараметры = Неопределено Тогда
		ВходныеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыВыполненияОперации();
		АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		ВходныеПараметры.Кассир = АвторизованныйПользователь.Наименование;
	КонецЕсли;
	
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ ВСЕХ ТИПОВ ДРАЙВЕРОВ
	
	// Тестирование устройства
	Если Команда = "ТестУстройства" ИЛИ Команда = "CheckHealth" Тогда
		Результат = ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	ИначеЕсли Команда = "ВыполнитьДополнительноеДействие" ИЛИ Команда = "DoAdditionalAction" Тогда
		ИмяДействия = ВходныеПараметры[0];
		Результат = ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры);
		
	// Получение версии драйвера
	ИначеЕсли Команда = "ПолучитьВерсиюДрайвера" ИЛИ Команда = "GetVersion" Тогда
		Результат = ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение описание драйвера.
	ИначеЕсли Команда = "ПолучитьОписаниеДрайвера" ИЛИ Команда = "GetDescription" Тогда
		Результат = ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩИЕ ДЛЯ РАБОТЫ С ФИСКАЛЬНЫМИ УСТРОЙСТВАМИ 
	
	// Открытие денежного ящика
	ИначеЕсли Команда = "OpenCashDrawer" ИЛИ Команда = "ОткрытьДенежныйЯщик" Тогда
		Результат = ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получение ширины строки в символах
	ИначеЕсли Команда = "GetLineLength" ИЛИ Команда = "ПолучитьШиринуСтроки" Тогда
		Результат = ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Открыть смену
	ИначеЕсли Команда = "OpenShift" ИЛИ Команда = "ОткрытьСмену" Тогда
		Результат = ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Закрыть кассовую смену
	ИначеЕсли Команда = "CloseShift" ИЛИ Команда = "ЗакрытьСмену" Тогда
		Результат = ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Отчет о текущем состоянии расчетов
	ИначеЕсли Команда = "ReportCurrentStatusOfSettlements" ИЛИ Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		Результат = ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		                        
	// Печать чека внесения/выемки.
	ИначеЕсли Команда = "Encash" ИЛИ Команда = "Инкассация" Тогда
		Результат = Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Фискализация чека.
	ИначеЕсли Команда = "CheckFiscalization" ИЛИ Команда = "ФискализацияЧека" Тогда
		Результат = ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать чека коррекции
	ИначеЕсли Команда = "PrintReceiptCorrection" ИЛИ Команда = "ПечатьЧекаКоррекции" Тогда
		Результат = ПечатьЧекаКоррекции(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Печать слип чека
	ИначеЕсли Команда = "PrintText" ИЛИ Команда = "ПечатьТекста"  Тогда
		СтрокаТекста = ВходныеПараметры[0];
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры);
		
	// Печать слип чеков
	ИначеЕсли Команда = "PrintTextDocument" ИЛИ Команда = "ПечатьТекстовогоДокумента"  Тогда
		Результат = ПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Получить текущее состояние 
	ИначеЕсли Команда = "GetCurrentStatus" ИЛИ Команда = "ПолучитьТекущееСостояние" Тогда
		Результат = ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Получить параметры ККТ
	ИначеЕсли Команда = "GetDataKKT" ИЛИ Команда = "ПолучитьПараметрыККТ" Тогда
		Результат = ПолучитьПараметрыККТ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);
		
	// Сформировать отчет без гашения
	ИначеЕсли Команда = "PrintXReport" ИЛИ Команда = "НапечататьОтчетБезГашения" Тогда
		Результат = ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры);

	// Операция фискального накопителя
	ИначеЕсли Команда = "OperationFN" ИЛИ Команда = "ОперацияФН" Тогда
		Результат = ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВходныеПараметры, ВыходныеПараметры);

	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Размер пакета в элементах передаваемой информации в драйвер.
//
Функция РазмерПакетаПоУмолчанию() Экспорт
	
	РазмерПакета = 200;
	Возврат РазмерПакета;
	
КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииОбщиеДляФискальныхУстройств

// Функция осуществляет открытие денежного ящика.
//
Функция ОткрытьДенежныйЯщик(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	Попытка
		Ответ = ОбъектДрайвера.ОткрытьДенежныйЯщик(ПараметрыПодключения.ИДУстройства);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьДенежныйЯщик>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция получает ширину строки в символах.
//  
Функция ПолучитьШиринуСтроки(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт 
	
	Результат = Истина;
	ШиринаСтроки = 0;
	 
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьШиринуСтроки(ПараметрыПодключения.ИДУстройства, ШиринаСтроки);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
			ВыходныеПараметры.Добавить(ШиринаСтроки);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьШиринуСтроки>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет открытие смены.
//
Функция ОткрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = Неопределено;
	
	ТипОборудования = Неопределено;
	ПараметрыПодключения.Свойство("ТипОборудования", ТипОборудования);
	
	Если ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 1, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	КонецЕсли;
	
	ПараметрыККТ = "";
	Попытка
		Результат = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Если Результат Тогда
			МенеджерОборудованияВызовСервера.ПолучитьТаблицуПараметрыИзXMLПакетаККТ(ПараметрыККТ, Параметры.Идентификатор);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;

	Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
		ПараметрыСостояния = Неопределено;
		ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
		Попытка
			Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
			Если Результат Тогда
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, НомерСмены);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	Иначе
		Если Результат Тогда
			Попытка
				Результат = ОбъектДрайвера.ОткрытьСмену(ПараметрыПодключения.ИДУстройства, Кассир, НомерСмены, НомерДокумента);
			Исключение
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
				Возврат Результат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
    
КонецФункции

// Функция осуществляет закрытие смены.
//
Функция ЗакрытьСмену(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	РезультатСостояние = Ложь;
	Кассир = ?(ВходныеПараметры <> Неопределено И ВходныеПараметры.Свойство("Кассир"), ВходныеПараметры.Кассир, НСтр("ru='Администратор'"));
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = Неопределено;
	
	ТипОборудования = Неопределено;
	ПараметрыПодключения.Свойство("ТипОборудования", ТипОборудования);
	
	Если ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 5, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	КонецЕсли;
	
	Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
		Попытка
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
			Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния, НомерСмены, НомерДокумента);
			Если Результат Тогда
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, НомерСмены);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	Иначе	
		Попытка
			Если НЕ ПараметрыПодключения.РевизияИнтерфейса < 2000 Тогда
				РезультатСостояние = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
			КонецЕсли;
			Результат = ОбъектДрайвера.ЗакрытьСмену(ПараметрыПодключения.ИДУстройства, Кассир, НомерСмены, НомерДокумента);
			Если РезультатСостояние Тогда
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСостоянияСменыИзXMLПакета(ПараметрыСостояния, НомерСмены);
			КонецЕсли;
		Исключение
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>.'") + Символы.ПС + ОписаниеОшибки());
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(1); // 1 - Закрыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет формирование отчета о текущем состоянии расчетов.
//
Функция ОтчетОТекущемСостоянииРасчетов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = Неопределено;
	
	ТипОборудования = Неопределено;
	ПараметрыПодключения.Свойство("ТипОборудования", ТипОборудования);
	
	Если ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'");
		ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 4, Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	КонецЕсли;
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
			Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ПараметрыСостояния);
			Если Результат Тогда
				ФискальныеДанныеСтруктура = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСменыИзXMLПакета(ПараметрыСостояния, НомерСмены);
			КонецЕсли;
		Иначе
			Результат = ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов(ПараметрыПодключения.ИДУстройства);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
		ВыходныеПараметры.Добавить(ПараметрыСостояния);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет внесение или выемку суммы.
//
Функция Инкассация(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	Если ТипЗнч(ВходныеПараметры) = Тип("Структура") Тогда
		СтруктураПараметров = ОбщегоНазначения.СкопироватьУниверсальнуюКоллекцию(ВходныеПараметры);
		ТипИнкассации  = ?(ВходныеПараметры.Свойство("ТипИнкассации"), ВходныеПараметры.ТипИнкассации, 0);  
		Сумма          = ?(ВходныеПараметры.Свойство("Сумма"), ВходныеПараметры.Сумма, 0);
	ИначеЕсли ТипЗнч(ВходныеПараметры) = Тип("Массив") Тогда
		СтруктураПараметров = Новый Структура();
		
		ТипИнкассации = ВходныеПараметры[0];
		СтруктураПараметров.Вставить("ТипИнкассации", ТипИнкассации);
		Сумма         = ВходныеПараметры[1];
		СтруктураПараметров.Вставить("Сумма", Сумма);
		
		Если ВходныеПараметры.Количество() > 2 Тогда
			СтруктураПараметров.Вставить("Кассир", ВходныеПараметры[2]);
		КонецЕсли;
		Если ВходныеПараметры.Количество() > 3 Тогда
			СтруктураПараметров.Вставить("КассирИНН", ВходныеПараметры[3]);
		КонецЕсли;
		
	Иначе
		СтруктураПараметров = Новый Структура();
		ТипИнкассации = 0;
		Сумма         = 0;
	КонецЕсли;
	
	ТипОборудования = Неопределено;
	ПараметрыПодключения.Свойство("ТипОборудования", ТипОборудования);
	
	Если ТипОборудования = "ПринтерЧеков" Тогда
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстЧека = НСтр("ru='НЕФИСКАЛЬНЫЙ РЕЖИМ'") + Символы.ПС;
		ТекстЧека = ТекстЧека + НСтр("ru='СУММА ='") + Символы.НПП + Формат(Сумма, "ЧРД=.;ЧЦ=10;ЧДЦ=2;ЧН=0.00;ЧГ=0");	
		ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ШиринаСтроки, ?(ТипИнкассации = 1, 2, 3), Неопределено, ТекстЧека);
		Возврат ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстЧека, ВыходныеПараметры)
	КонецЕсли;

	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(СтруктураПараметров);
			Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ПараметрыОперации, ?(ТипИнкассации = 1, Сумма, -Сумма));
		Иначе
			Результат = ОбъектДрайвера.НапечататьЧекВнесенияВыемки(ПараметрыПодключения.ИДУстройства, ?(ТипИнкассации = 1, Сумма, -Сумма));
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции    

// Функция осуществляет фискализацию чека.
//
Функция ФискализацияЧека(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ТипОборудования = Неопределено;
	ПараметрыПодключения.Свойство("ТипОборудования", ТипОборудования);

	Если ТипОборудования = "ПринтерЧеков" Тогда
	
		ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
		ТекстДокумента = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ШиринаСтроки, 0, ВходныеПараметры);
		
		Результат = ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, ТекстДокумента, ВыходныеПараметры);
		Если Результат Тогда
			
			НомерЧека = 1;
			НомерСмены = Неопределено;
			Если ВходныеПараметры <> Неопределено Тогда
				ОбщиеПараметры = ВходныеПараметры[0];
				НомерЧека = ОбщиеПараметры.НомерЧека;
				НомерСмены = ОбщиеПараметры.НомерСмены;
				ОбщиеПараметры.Вставить("ТекстЭлектронногоЧека", "");
			КонецЕсли;
				
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(ТекущаяДата());
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
			ВыходныеПараметры.Добавить(Неопределено);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
		
	ОбщиеПараметры = ВходныеПараметры[0];
	ФискальныйПризнак  = "";
	АдресСайтаПроверки = "";
	
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	РегистрационныйНомерККТ = ?(ПараметрыРегистрации.Свойство("РегистрационныйНомерККТ"), ПараметрыРегистрации.РегистрационныйНомерККТ, "");
	ЗаводскойНомерФН = ?(ПараметрыРегистрации.Свойство("ЗаводскойНомерФН"), ПараметрыРегистрации.ЗаводскойНомерФН, "");
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	НовыйФормат = ПараметрыПодключения.Свойство("РевизияИнтерфейса") И  ПараметрыПодключения.РевизияИнтерфейса > 2001; // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
	ВерсияККТ = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.0");
	
	Если ВерсияККТ = "1.1" Тогда
		ВерсияФФД = 2;
	ИначеЕсли ВерсияККТ = "1.0.5" Тогда
		ВерсияФФД = 1;
	Иначе
		ВерсияФФД = 0;
	КонецЕсли;

	Кассир       = ОбщиеПараметры.Кассир;
	Электронно   = ОбщиеПараметры.Электронно;
	Отправляет1СSMS   = ОбщиеПараметры.Отправляет1СSMS;
	Отправляет1СEmail = ОбщиеПараметры.Отправляет1СEmail;
	СуммаЧека = 0;
	
	ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляФискализацияЧека(ОбщиеПараметры, ВходныеПараметры, СуммаЧека, ШиринаСтроки, НовыйФормат, ВерсияФФД);
	НомерСмены = 0;
	НомерЧека  = 0;
	
	Попытка
		Если НовыйФормат Тогда
			Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Электронно, 
				ДанныеЧека, НомерЧека, НомерСмены, ФискальныйПризнак, АдресСайтаПроверки); 
		Иначе
			Результат = ОбъектДрайвера.СформироватьЧек(ПараметрыПодключения.ИДУстройства, Кассир, Электронно, 
				ДанныеЧека, НомерЧека, НомерСмены, ФискальныйПризнак, АдресСайтаПроверки); 
		КонецЕсли;
		
		Если НЕ Результат Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ДатаСеанса = ТекущаяДата();
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(ДатаСеанса);
			ВыходныеПараметры.Добавить(ФискальныйПризнак);
			ВыходныеПараметры.Добавить(АдресСайтаПроверки);
			ВыходныеПараметры.Добавить(РегистрационныйНомерККТ);
			ВыходныеПараметры.Добавить(ДанныеЧека);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	ОбщиеПараметры.НомерСмены = НомерСмены;
	ОбщиеПараметры.НомерЧека  = НомерЧека;
	ОбщиеПараметры.Вставить("СуммаЧека"      		 , СуммаЧека);
	ОбщиеПараметры.Вставить("ФискальныйПризнак"      , ФискальныйПризнак);
	ОбщиеПараметры.Вставить("АдресСайтаПроверки"     , АдресСайтаПроверки);
	ОбщиеПараметры.Вставить("РегистрационныйНомерККТ", РегистрационныйНомерККТ);
	МенеджерОборудованияКлиентСервер.СформироватьТекстЭлектронногоЧека(ОбщиеПараметры);
	
	Если Результат И (Отправляет1СSMS ИЛИ Отправляет1СEmail) Тогда
		
		ОтправитьЭлектронныйЧек(ОбщиеПараметры);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

// Осуществляет печать чека коррекции.
//
Функция ПечатьЧекаКоррекции(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;
	Ответ = Ложь;
	
	ВидовОплаты = 0;
	НомерСмены = 0;
	НомерЧека  = 0;
	ФискальныйПризнак  = "";
	АдресСайтаПроверки = "";
	ОбщиеПараметры = ВходныеПараметры[0];
	Кассир = ОбщиеПараметры.Кассир;
	ПараметрыРегистрации = ПараметрыПодключения.ПараметрыРегистрации;
	НовыйФормат = ПараметрыПодключения.РевизияИнтерфейса > 2001; // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
	ВерсияККТ = ?(ПараметрыРегистрации.Свойство("ВерсияФФДККТ"), ПараметрыРегистрации.ВерсияФФДККТ, "1.0");
	Если ВерсияККТ = "1.1" Тогда
		ВерсияФФД = 2;
	ИначеЕсли ВерсияККТ = "1.0.5" Тогда
		ВерсияФФД = 1;
	Иначе
		ВерсияФФД = 0;
	КонецЕсли;
	
	ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляЧекаКоррекции(ОбщиеПараметры, ВыходныеПараметры, НовыйФормат, ВидовОплаты, ВерсияФФД);
	Попытка
		Если НовыйФормат Тогда
			Ответ = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, ДанныеЧека, НомерЧека, НомерСмены, ФискальныйПризнак, АдресСайтаПроверки); 
		Иначе
			Если ВидовОплаты > 1 Тогда
				Результат = Ложь;
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(НСтр("ru='Чек коррекции для ФФД 1.0 допускает только один вид оплаты.'"));
				Возврат Результат;  
			Иначе
				Ответ = ОбъектДрайвера.СформироватьЧекКоррекции(ПараметрыПодключения.ИДУстройства, Кассир, ДанныеЧека, НомерЧека, НомерСмены, ФискальныйПризнак, АдресСайтаПроверки); 
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ДатаСеанса = ТекущаяДата();
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерЧека);
			ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
			ВыходныеПараметры.Добавить(ДатаСеанса);
			ВыходныеПараметры.Добавить(ФискальныйПризнак);
			ВыходныеПараметры.Добавить(АдресСайтаПроверки);
		КонецЕсли
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.СформироватьЧекКоррекции>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;  
	
КонецФункции

// Функция осуществляет печать текста.
//
Функция ПечатьТекста(ОбъектДрайвера, Параметры, ПараметрыПодключения, СтрокаТекста, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	
	ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекста(СтрокаТекста);
	Попытка
		Для Каждого ТекстПечати Из ДанныеЧека Цикл
			Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
			Если НЕ Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ТекущаяДата());
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет печать текстовых документов.
//
Функция ПечатьТекстовыхДокументов(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Результат  = Истина;  
	СтрокаТекста = "";
	
	ШиринаСтроки = ?(ПараметрыПодключения.Свойство("ШиринаСтроки"), ПараметрыПодключения.ШиринаСтроки, 32);
	ОбщиеПараметры = ВходныеПараметры[0];
	
	ДанныеЧека = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляТекстовогоДокумента(ОбщиеПараметры, ВыходныеПараметры, ШиринаСтроки);
	Попытка
		Для Каждого ТекстПечати Из ДанныеЧека Цикл
			Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ПараметрыПодключения.ИДУстройства, ТекстПечати);
			Если НЕ Результат Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить("");
				ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
				Возврат Результат;
			Иначе
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(0);
				ВыходныеПараметры.Добавить(ТекущаяДата());
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция получает текущее состояние.
//
Функция ПолучитьТекущееСостояние(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса < 2000 Тогда
			Ответ = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены);
		Иначе
			Ответ = ОбъектДрайвера.ПолучитьТекущееСостояние(ПараметрыПодключения.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
		КонецЕсли;
		
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерДокумента);
			ВыходныеПараметры.Добавить(СтатусСмены); 
			ВыходныеПараметры.Добавить(ТекущаяДата());
			Если НЕ ПустаяСтрока(ПараметрыСостояния) Тогда
				ПараметрыСостоянияВрем = МенеджерОборудованияВызовСервера.ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния);
			Иначе
				ПараметрыСостоянияВрем = Неопределено;
			КонецЕсли;
			ВыходныеПараметры.Добавить(ПараметрыСостоянияВрем);
		КонецЕсли
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция получает параметры ККТ.
//
Функция ПолучитьПараметрыККТ(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	ТипОборудования = Неопределено;
	ПараметрыПодключения.Свойство("ТипОборудования", ТипОборудования);
	Если ТипОборудования = "ПринтерЧеков" Тогда
		Результат = Истина;
		Если Не ТипЗнч(ВыходныеПараметры) = Тип("Структура") И Не ТипЗнч(ВыходныеПараметры) = Тип("ФиксированнаяСтруктура") Тогда
			ВыходныеПараметры = Новый Структура();
		КонецЕсли;
		ВыходныеПараметры.Вставить("ВерсияФФДККТ", "1.1");
		Возврат Результат;
	КонецЕсли;
	
	Результат = Истина;
	
	ПараметрыККТ = "";
	
	Попытка
		Ответ = ОбъектДрайвера.ПолучитьПараметрыККТ(ПараметрыПодключения.ИДУстройства, ПараметрыККТ);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			// Заполнение выходных параметров.
			ВыходныеПараметры = МенеджерОборудованияВызовСервера.ПолучитьТаблицуПараметрыИзXMLПакетаККТ(ПараметрыККТ, Параметры.Идентификатор);
		КонецЕсли;
		
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция осуществляет формирование отчет без гашения.
//
Функция ОтчетБезГашения(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	НомерСмены     = 0;
	НомерДокумента = 0;
	
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
			ПараметрыОперации = МенеджерОборудованияВызовСервера.ПолучитьXMLПакетДляОперации(ВходныеПараметры);
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства, ПараметрыОперации);
		Иначе
			Результат = ОбъектДрайвера.НапечататьОтчетБезГашения(ПараметрыПодключения.ИДУстройства);
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.НапечататьОтчетБезГашения>.'") + Символы.ПС + ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если Результат Тогда
		// Заполнение выходных параметров.
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(2); // 2 - Открыта - Состояние смены  
		ВыходныеПараметры.Добавить(ТекущаяДата());
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить("");
		ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОперацияФискальногоНакопителя(ОбъектДрайвера, Параметры, ПараметрыПодключения, ПараметрыФискализации, ВходныеПараметры, ВыходныеПараметры)
	
	Результат = Истина;
	ТипОперации = ПараметрыФискализации[0].ТипОперации;
	Кассир = "";
	
	ПараметрыФискализацииXML = МенеджерОборудованияВызовСервера.СформироватьТаблицуПараметровДляОперацииФН(ПараметрыФискализации[0]);
		
	Попытка
		Если ПараметрыПодключения.РевизияИнтерфейса > 2001 Тогда // Версия стандарта 2.2 (ОФД 1.0.5/1.1)
			Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ТипОперации, ПараметрыФискализацииXML);
		Иначе
			Результат = ОбъектДрайвера.ОперацияФН(ПараметрыПодключения.ИДУстройства, ТипОперации, Кассир, ПараметрыФискализацииXML);
		КонецЕсли;
		Если НЕ Результат Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1]);
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(0);
			ВыходныеПараметры.Добавить(ТекущаяДата());
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ОперацияФН>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииОбщиеДляВсехТиповДрайверов

// Функция осуществляет тестирование устройства.
//
Функция ТестУстройства(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат            = Истина;
	РезультатТеста       = "";
	АктивированДемоРежим = "";
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ТестУстройства(РезультатТеста, АктивированДемоРежим);
	
		Если Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(0);
		Иначе
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
		КонецЕсли;
		ВыходныеПараметры.Добавить(РезультатТеста);
		ВыходныеПараметры.Добавить(АктивированДемоРежим);
	
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция осуществляет выполнение дополнительного действия для устройства.
//
Функция ВыполнитьДополнительноеДействие(ОбъектДрайвера, Параметры, ПараметрыПодключения, ИмяДействия, ВыходныеПараметры)
	
	Результат  = Истина;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Лев(Параметр.Ключ, 2) = "P_" Тогда
			ЗначениеПараметра = Параметр.Значение;
			ИмяПараметра = Сред(Параметр.Ключ, 3);
			Ответ = ОбъектДрайвера.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра) 
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Ответ = ОбъектДрайвера.ВыполнитьДополнительноеДействие(ИмяДействия);
		Если НЕ Ответ Тогда
			Результат = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить("");
			ОбъектДрайвера.ПолучитьОшибку(ВыходныеПараметры[1])
		Иначе
			ВыходныеПараметры.Очистить();  
		КонецЕсли;
	Исключение
		Результат = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Ошибка вызова метода <ОбъектДрайвера.ВыполнитьДополнительноеДействие>.'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает версию установленного драйвера.
//
Функция ПолучитьВерсиюДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)

	Результат = Истина;

	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));

	Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();
	Исключение
	КонецПопытки;

	Возврат Результат;

КонецФункции

// Функция возвращает описание установленного драйвера.
//
Функция ПолучитьОписаниеДрайвера(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;
	
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));
	
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(НСтр("ru='Не определено'"));
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	ВыходныеПараметры.Добавить(Неопределено);
	
	НаименованиеДрайвера      = "";
	ОписаниеДрайвера          = "";
	ТипОборудования           = "";
	ИнтеграционныйКомпонент   = Ложь;
	ОсновнойДрайверУстановлен = Ложь;
	РевизияИнтерфейса         = РевизияИнтерфейсаДрайверов();
	URLЗагрузкиДрайвера       = "";
	ПараметрыДрайвера         = "";
	ДополнительныеДействия    = "";
	
	Попытка
		// Получаем версию драйвера
		ВерсияДрайвера = ОбъектДрайвера.ПолучитьНомерВерсии();
		ВыходныеПараметры[1] = ВерсияДрайвера;
		
		Если ПараметрыПодключения.Свойство("ТипОборудования") Тогда
			ТипОборудования = ПараметрыПодключения.ТипОборудования;
			// Предопределенный параметр с указанием типа драйвера.
			ОбъектДрайвера.УстановитьПараметр("EquipmentType", ТипОборудования) 
		КонецЕсли;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьОписание(НаименованиеДрайвера, 
										ОписаниеДрайвера, 
										ТипОборудования, 
										РевизияИнтерфейса, 
										ИнтеграционныйКомпонент, 
										ОсновнойДрайверУстановлен, 
										URLЗагрузкиДрайвера);
		ВыходныеПараметры[2] = НаименованиеДрайвера;
		ВыходныеПараметры[3] = ОписаниеДрайвера;
		ВыходныеПараметры[4] = ТипОборудования;
		ВыходныеПараметры[5] = РевизияИнтерфейса;
		ВыходныеПараметры[6] = ИнтеграционныйКомпонент;
		ВыходныеПараметры[7] = ОсновнойДрайверУстановлен;
		ВыходныеПараметры[8] = URLЗагрузкиДрайвера;
		
		// Получаем описание драйвера
		ОбъектДрайвера.ПолучитьПараметры(ПараметрыДрайвера);
		ВыходныеПараметры[9] = ПараметрыДрайвера;
		
		// Получаем дополнительные действия.
		ОбъектДрайвера.ПолучитьДополнительныеДействия(ДополнительныеДействия);
		ВыходныеПараметры[10] = ДополнительныеДействия;
	Исключение
		Результат = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка получения описания драйвера'") + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

//#КонецОбласти

// Добавленные
// Получает ревизию требований для драйверов подключаемого оборудования.
//
Функция РевизияИнтерфейсаДрайверов() Экспорт
	
	РевизияИнтерфейса = 2000;
	Возврат РевизияИнтерфейса;
	
КонецФункции

Процедура ОтправитьЭлектронныйЧек(ПараметрыЧека) Экспорт
	
	МенеджерОборудованияВызовСервера.ПоставитьЧекВОчередьНаОтправку(ПараметрыЧека);
	Если ПараметрыЧека.Свойство("ОшибкаПостановкиВОчередьНаОтправку") Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Не удалось поставить электронный чек в очередь на отправку.
			|Попробуйте выполнить отправку позднее из формы документа. Подробности см. в журнале регистрации.");
	Иначе
		ОбщегоНазначения.СообщитьИнформациюПользователю("Электронный чек успешно поставлен в очередь на отправку.");
	КонецЕсли;
	
КонецПроцедуры
