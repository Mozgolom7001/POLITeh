// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧОплатаПоДоговорамНалоговогоАгента;
Перем мКнопкиЗаполненияТЧОплатаДляСобственногоПотребления;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает видимость элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧОплатаПоДоговорамНалоговогоАгента = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧОплатаПоДоговорамНалоговогоАгента"));
	мКнопкиЗаполненияТЧОплатаДляСобственногоПотребления = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧОплатаДляСобственногоПотребления"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента, ЭлементыФормы.КоманднаяПанельПоДоговорамНалоговогоАгента.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧОплатаПоДоговорамНалоговогоАгента, СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОплатаДляСобственногоПотребления, ЭлементыФормы.КоманднаяПанельПоДоговорамСобственногоПотребления.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧОплатаДляСобственногоПотребления, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧОплатаПоДоговорамНалоговогоАгента(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧОплатаПоДоговорамНалоговогоАгента.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧОплатаПоДоговорамНалоговогоАгента()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧОплатаДляСобственногоПотребления(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧОплатаДляСобственногоПотребления.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧОплатаДляСобственногоПотребления()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

		УстановитьВремя(РежимАвтоВремя.Последним);
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;
	
	// Параметры для выбора организации
	УчетПоВсемОрганизациям = Истина; // Для совместимости с БП

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Проверка ведения однофирменности
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда

		Предупреждение("Не указана организация. Операция не записана.");

		Отказ = Истина;

		ТекущийЭлемент = ЭлементыФормы.Организация;

		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	СтраницаПанели  = ЭлементыФормы.НДСПоВидамДоговоров.Страницы;
	
	СтраницаПанели.ПоДоговорамНалоговогоАгента.Заголовок = "По договорам налогового агента ("   + ДокументОбъект.ОплатаПоДоговорамНалоговогоАгента.Количество() + " поз.)";
	СтраницаПанели.ДляСобственногоПотребления.Заголовок = "Для собственного потребления (" + ДокументОбъект.ОплатаДляСобственногоПотребления.Количество() + " поз.)";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНОЙ ПАНЕЛИ 


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура КоманднаяПанельПоДоговорамНалоговогоАгентаЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	Если ОплатаПоДоговорамНалоговогоАгента.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоДоговорамНалоговогоАгента();
	
КонецПроцедуры

Процедура КоманднаяПанельПоДоговорамСобственногоПотребленияЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	Если ОплатаДляСобственногоПотребления.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьДляСобственногоПотребления();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличной части "ОплатаПоДоговорамНалоговогоАгента"
//
Процедура ОплатаПоДоговорамНалоговогоАгентаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента.ТекущиеДанные;
	ЗначениеОтбора = Новый Структура("ЗначениеОтбора", Истина);
	ДополнительныеПараметры = Новый Структура("УчетАгентскогоНДС", ЗначениеОтбора);
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Поставщик, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	   	                                    Неопределено, СтандартнаяОбработка, ДополнительныеПараметры);
										
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличной части "ОплатаПоДоговорамНалоговогоАгента"
//
Процедура ОплатаПоДоговорамНалоговогоАгентаДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента.ТекущиеДанные.Поставщик) Тогда
		ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента.ТекущиеДанные.Поставщик = Элемент.Значение.Владелец;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = Элемент.Значение.Организация;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Поставщик"
// табличной части "ОплатаПоДоговорамНалоговогоАгента"
//
Процедура ОплатаПоДоговорамНалоговогоАгентаПоставщикПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента.ТекущиеДанные;
	Если Элемент.Значение <> СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДокументОплаты
//
Процедура ОплатаПоДоговорамНалоговогоАгентаДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента.ТекущиеДанные;
	
	Отбор = Новый Структура("Организация", Организация);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ОплатаПоДоговорамНалоговогоАгента");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетФактура
//
Процедура ОплатаПоДоговорамНалоговогоАгентаСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоДоговорамНалоговогоАгента.ТекущиеДанные;

	Отбор = Новый Структура("Организация,Контрагент,ДоговорКонтрагента", Организация,СтрокаТабличнойЧасти.Поставщик, СтрокаТабличнойЧасти.ДоговорКонтрагента);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ОплатаПоДоговорамНалоговогоАгента");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДокументОплаты
//
Процедура ОплатаДляСобственногоПотребленияДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаДляСобственногоПотребления.ТекущиеДанные;
	Отбор = Новый Структура("Организация", Организация);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ОплатаДляСобственногоПотребления");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетФактура
//
Процедура ОплатаДляСобственногоПотребленияСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаДляСобственногоПотребления.ТекущиеДанные;
	Отбор = Новый Структура("Организация", Организация);

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ОплатаДляСобственногоПотребления");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода ДокументОплаты
//
Процедура ОплатаДляСобственногоПотребленияДокументОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Если ВыбранноеЗначение.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		Если ВыбранноеЗначение.ВидОперации <> Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
			Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода ДокументОплаты
//
Процедура ОплатаПоДоговорамНалоговогоАгентаДокументОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
		Если ВыбранноеЗначение.ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
		Если ВыбранноеЗначение.ВидОперации <> Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
			Сообщить("В документе можно выбирать документы оплаты с операцией ""перечисление налога""", СтатусСообщения.Важное);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()
