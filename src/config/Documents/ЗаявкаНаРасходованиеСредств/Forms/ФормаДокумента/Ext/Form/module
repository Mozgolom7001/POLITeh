////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мТекущееРасширениеФайла;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем СтараяВалютаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()

	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	//СоответствиеТЧ.Вставить(ЭлементыФормы.РазмещениеЗаявки,ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюЗаполнить);

	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);

КонецПроцедуры

// Определение необходимости устанавливать отметку незаполненного для сделки
//
// Параметры
//  ТекущаяСтрокаПлатежа  – СтрокаТабличнойЧасти – Строка табличной части, для которой определяется
//                                                 необходимость отметки незаполненного значения
//
// Возвращаемое значение:
//   Булево   – Истина = отмечать, Ложь = не отмечать
//
Функция ПолучитьОтметкуНезаполненногоДляСделки(ТекущаяСтрокаПлатежа)

	Отметка = Ложь;

	ДоговорКонтрагента = ТекущаяСтрокаПлатежа.ДоговорКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Отметка = НЕ ЗначениеЗаполнено(ТекущаяСтрокаПлатежа.Сделка);
		КонецЕсли;
	КонецЕсли;

	Возврат Отметка;

КонецФункции // ПолучитьОтметкуНезаполненногоДляСделки()

// Процедура устанавливает автоотметку незаполненного для тех реквизитов,
// обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = ПолучитьОтметкуНезаполненногоДляСделки(СтрокаПлатеж);
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтрокаПлатеж.Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре

	// Надо поменять валюту и курс взаиморасчетов
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект = СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	УстановитьАвтоотметку();
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
КонецПроцедуры // ПриИзмененииКонтрагента

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура выполняет заполнение реквизита Получатель значением по умолчанию.
//
Процедура ЗаполнитьПолучателя()

	ВремПолучатель = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПоставщик");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		ВремПолучатель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКассаККМ");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Получатель) Тогда
		Получатель = ВремПолучатель;
	КонецЕсли;
	
	УстановитьТипПолучателя();
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПолучателя()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		СуммаДокумента=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");


КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Очищает реквизиты, относящиеся к платежам: при очистке валюты документа они становятся неопределенными.
//
Процедура ПриОчисткеВалютыДокумента()
	
		СуммаДокумента=0;
		КурсДокумента=0;
		КратностьДокумента=0;
		СтараяВалютаДокумента=Справочники.Валюты.ПустаяСсылка();
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			Платеж.СуммаПлатежа=0;
		КонецЦикла;
		
		БанковскийСчетКасса=Неопределено;
		ВключатьВПлатежныйКалендарь=Ложь;
		
		РазмещениеЗаявки.Очистить();

		УстановитьВидимость();
	
КонецПроцедуры // ПриОчисткеВалютыДокумента()

Процедура ЗаполнитьРазмещение(Отказ)
	
	ТекстУсловия="";
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта заявки.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если ФормаОплаты.Пустая() Тогда
		Сообщить("Не указана форма оплаты.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	ТекстУсловияОстатки="ВидДенежныхСредств=&ФормаОплаты И БанковскийСчетКасса.ВалютаДенежныхСредств=&ВалютаДокумента";
	ТекстУсловияПоступления="ДокументПланирования.ФормаОплаты=&ФормаОплаты И ДокументПланирования.ВалютаДокумента=&ВалютаДокумента";
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные И Не Организация.Пустая() Тогда
		ТекстУсловияОстатки=ТекстУсловияОстатки+" И БанковскийСчетКасса.Владелец=&Организация";
		ТекстУсловияПоступления=ТекстУсловияПоступления+" И  ДокументПланирования.Организация=&Организация";
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормаОплаты",ФормаОплаты );
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ДатаРасхода",КонецДня(ДатаРасхода));
	Запрос.УстановитьПараметр("ТекущаяЗаявка",Ссылка);
	
	Запрос.УстановитьПараметр("ПредпочтительноеРазмещение",БанковскийСчетКасса);
	
	ТекстЗапросаОстатки="ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|	- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ 
	|	- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК МестоРазмещения,
	|	0                                                КАК СортировкаРазмещение,
	|	ВЫБОР
	|		КОГДА ДенежныеСредстваОстатки.БанковскийСчетКасса = &ПредпочтительноеРазмещение ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ                                            КАК СортировкаРезерв,
	|	NULL                                             КАК ДатаПоступления
	|	ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+") КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+" И НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+") КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса";
	
	ТекстЗапросаРазмещение="ВЫБРАТЬ
	|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток 
	|	- ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток,
	|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования КАК МестоРазмещения,
	|	1                                                        КАК СортировкаРазмещение,
	|	1                                                        КАК СортировкаРезерв,
	|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(&ДатаРасхода,"+ТекстУсловияПоступления+") КАК ПланируемыеПоступленияДенежныхСредствОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ ДокументРезервирования=&ТекущаяЗаявка) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	|		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
			
	Если АвтоРазмещениеПоЗаявке И АвтоРезервированиеПоЗаявке Тогда 
		ТекстЗапроса=ТекстЗапросаОстатки+"
		|ОБЪЕДИНИТЬ ВСЕ
		|"+ТекстЗапросаРазмещение+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала на местах хранения, потом в планируемых поступлениях
		|	СортировкаРезерв,            // Сначала предпочтительное место хранения, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты поступления	";

	ИначеЕсли АвтоРазмещениеПоЗаявке Тогда
		ТекстЗапроса=ТекстЗапросаРазмещение+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты поступления	";
	ИначеЕсли АвтоРезервированиеПоЗаявке Тогда
		ТекстЗапроса=ТекстЗапросаОстатки+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРезерв             // Сначала предпочтительное место хранения, затем остальные";
		
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	
	Таблица=Запрос.Выполнить().Выгрузить();
	
	РазмещеноВручную=РазмещениеЗаявки.Итог("СуммаПлатежа");
	
	ОсталосьРазместить=СуммаДокумента-РазмещеноВручную;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.СвободныйОстаток<=0 Тогда
			Продолжить;	
		ИначеЕсли Строка.СвободныйОстаток>=ОсталосьРазместить Тогда
			
			Размещение=РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения=Строка.МестоРазмещения;
			Размещение.СуммаПлатежа=ОсталосьРазместить;
			
			Прервать;
			
		Иначе
			
			Размещение=РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения=Строка.МестоРазмещения;
			Размещение.СуммаПлатежа=Строка.СвободныйОстаток;
			
			ОсталосьРазместить=ОсталосьРазместить-Размещение.СуммаПлатежа;
			
		КонецЕсли;
		
	КонецЦикла;
		

КонецПроцедуры // ЗаполнитьРазмещение()

Процедура НачалоВыбораРазмещенияЗаявки(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Имя, Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Синоним);
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета. Синоним);
	Иначе
		СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы. Синоним);
	КонецЕсли;

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Имя Тогда
		
		СтандартнаяОбработка=Ложь;
				
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
		СтруктураПараметров.Вставить("ФормаОплаты"					,ФормаОплаты);
		СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
		СтруктураПараметров.Вставить("ДатаДок"						,ДатаРасхода);
		СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
		СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
		СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
		СтруктураПараметров.Вставить("ВидОперации"					,);
		СтруктураПараметров.Вставить("БанковскийСчетКасса"			,БанковскийСчетКасса);
		СтруктураПараметров.Вставить("Организация"					,Организация);
		СтруктураПараметров.Вставить("Проект"						,);
		СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",);
		СтруктураПараметров.Вставить("Контрагент"					,);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
		СтруктураПараметров.Вставить("Сделка"						,);
		
		УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
		
	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Значение=ВалютаДокумента;
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные И ЗначениеЗаполнено(Организация)Тогда
			
			ФормаВыбора.Отбор.Владелец.Значение=Организация;
			ФормаВыбора.Отбор.Владелец.Использование=Истина;
		    ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
			
		КонецЕсли;
			
			ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
		Если ЗначениеЗаполнено(ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения)
			И ТипЗнч(ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения)=Тип("СправочникСсылка."+ВыбранныйЭлемент.Значение) Тогда
			
			ФормаВыбора.ПараметрТекущаяСтрока=ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения;
			
		КонецЕсли;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры // НачалоВыбораРазмещенияЗаявки()

Процедура РассчитатьСуммуПлатежаТаблица()
	
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВалютаВзаиморасчетов= Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
	
		ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			Строка.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			Строка.КурсВзаиморасчетов,КурсДокумента,
			Строка.КратностьВзаиморасчетов,КратностьДокумента);	
		Иначе
			Строка.СуммаПлатежа = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СтрокаПлатеж=РасшифровкаПлатежа[0];
	
КонецПроцедуры // РассчитатьСуммуПлатежаТаблица()


Процедура РасшифровкаПлатежаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Отметка = ПолучитьОтметкуНезаполненногоДляСделки(ДанныеСтроки);

	Если ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного <> Отметка Тогда
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Отметка;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаПередНачаломДобавления(Элемент, Отказ, Копирование)

	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ЭлементУправления.АвтоВыборНезаполненного = ПолучитьОтметкуНезаполненногоДляСделки(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные);

КонецПроцедуры

Процедура РасшифровкаПлатежаПередНачаломИзменения(Элемент, Отказ)

	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ЭлементУправления.АвтоВыборНезаполненного = ПолучитьОтметкуНезаполненногоДляСделки(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные);

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)
	
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")=СуммаДокумента Тогда
		Сообщить("Заявка размещена полностью.");
		Возврат;
	КонецЕсли;
	
	Если АвтоРазмещениеПоЗаявке ИЛИ АвтоРезервированиеПоЗаявке Тогда
				
		Если НЕ ЭтоНовый() Тогда
			
			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 

		Отказ = Ложь;

		// Очистим записи документа по размещению, если он был ранее проведен
		Если Проведен Тогда
			НачатьТранзакцию();

			НаборОстаткиРезерв = РегистрыНакопления.ДенежныеСредстваВРезерве.СоздатьНаборЗаписей();
			НаборОстаткиРезерв.Отбор.Регистратор.Установить(Ссылка);
			НаборОстаткиРезерв.Прочитать();
			НаборОстаткиРезерв.Очистить();
			НаборОстаткиРезерв.Записать();
			НаборПланируемоеПоступление  = РегистрыНакопления.РазмещениеЗаявокНаРасходованиеСредств.СоздатьНаборЗаписей();
			НаборПланируемоеПоступление.Отбор.Регистратор.Установить(Ссылка);
			НаборПланируемоеПоступление.Прочитать();
			НаборПланируемоеПоступление.Очистить();
			НаборПланируемоеПоступление.Записать();
		КонецЕсли;

		// Заполнение документа
		ЗаполнитьРазмещение(Отказ);

		Если Проведен Тогда
			ОтменитьТранзакцию();
		КонецЕсли;

		Если Не Отказ Тогда
			РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);
		КонецЕсли;
	Иначе
		Предупреждение("Для режима заполнения с проведением требуется установка флагов ""Авторазмещение"" или ""Авторезервирование""");
	КонецЕсли; 

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Отличается от процедуры модуля РаботаСДиалогами.УстановитьТекущуюСтраницу тем, 
// что постоянно видна страница "Описание", а страница "Размещение" видна, если заполнена валюта документа.
// Работает только с панелью ОсновнаяПанель.
//
Процедура УстановитьТекущуюСтраницуОсновнойПанели(ИмяСтраницы)
	
	ТекСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	
	Для каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		Страница.Видимость = (Страница.Имя = ИмяСтраницы) 
			ИЛИ (Страница.Имя = "Описание") 
			ИЛИ (Страница.Имя = "Размещение" И ЗначениеЗаполнено(ВалютаДокумента));
		
	КонецЦикла;
	
	Если НЕ ТекСтраница.Видимость Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницы];
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДоступностьДокументаРасчетов()

	РасчетыПоДокументам = СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность        = РасчетыПоДокументам;
	ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Доступность = РасчетыПоДокументам;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;

КонецПроцедуры

Процедура УстановитьДоступностьСделки()
	
	СделкаДоступна = ЕстьРасчетыСКонтрагентами
		И (ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами)
		И (ВидОперации <> Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСКонтрагентами)
		И (СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЭлементыФормы.Сделка.Доступность = СделкаДоступна;
	ЭлементыФормы.НадписьСделка.Доступность = СделкаДоступна;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ТолькоПросмотр = НЕ СделкаДоступна;

КонецПроцедуры

// Процедура устанавливает доступность и видимость реквизитов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		УстановитьТекущуюСтраницуОсновнойПанели("ВыдачаПодотчетнику");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		УстановитьТекущуюСтраницуОсновнойПанели("ВыдачаКассеККМ");
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда
		
		УстановитьТекущуюСтраницуОсновнойПанели("Расчеты");
		
		Если Список Тогда
		 	РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	 	Иначе
		 	РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
				
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		УстановитьТекущуюСтраницуОсновнойПанели("Расчеты");
			
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
			
		УстановитьТекущуюСтраницуОсновнойПанели("Прочие");
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьСписок.Видимость = ЕстьРасчетыСКонтрагентами;
	ЭлементыФормы.Список.Видимость        = ЕстьРасчетыСКонтрагентами;
	ЭлементыФормы.Список1.Видимость       = ЕстьРасчетыСКонтрагентами;
	
	ЭлементыФормы.ВалютаДокумента.Доступность = НЕ ЗначениеЗаполнено(БанковскийСчетКасса);
	
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	ВыбранаВалютаДокумента = ЗначениеЗаполнено(ВалютаДокумента);
	ЭлементыФормы.КурсДокумента.Доступность                           = ВыбранаВалютаДокумента;
	ЭлементыФормы.БанковскийСчетКасса.Доступность                     = ВыбранаВалютаДокумента;
	ЭлементыФормы.ВключатьВПлатежныйКалендарь.Доступность             = ВыбранаВалютаДокумента;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежа.Доступность = ВыбранаВалютаДокумента;
	ЭлементыФормы.СуммаПлатежа.Доступность                            = ВыбранаВалютаДокумента;
	ЭлементыФормы.СуммаПлатежаПодотчет.Доступность                    = ВыбранаВалютаДокумента;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, 
		"НадписьПроект,Проект,НадписьПроект1,Проект1,НадписьПроект2,Проект2,НадписьПроект3,Проект3,РасшифровкаПлатежа.Проект");
		
КонецПроцедуры // УстановитьВидимость()

// Устанавливает ограничение типа полей, связанных с реквизитом "Получатель"
//
// Параметры:
//  Нет.
//
Процедура УстановитьОграничениеТипаПолучателя()
	
	ЭлементыФормы.ФизЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	
	Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		ЭлементыФормы.КассаККМ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
		ЭлементыФормы.КассаККМ.Подсказка       = "Касса ККМ, которой выдаются денежные средства";
	Иначе
		ЭлементыФормы.КассаККМ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		ЭлементыФормы.КассаККМ.Подсказка       = "НТТ, которой выдаются денежные средства";
	КонецЕсли;
	
КонецПроцедуры // УстановитьОграничениеТипаПолучателя()

Процедура УстановитьТипПолучателя()

	ОписаниеТиповПолучателя = Новый ОписаниеТипов();

	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ОписаниеТиповПолучателя = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
			ОписаниеТиповПолучателя = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
		Иначе
			ОписаниеТиповПолучателя = Новый ОписаниеТипов("СправочникСсылка.Склады");
		КонецЕсли;
		
	КонецЕсли;
	
	Получатель = ОписаниеТиповПолучателя.ПривестиЗначение(Получатель);

КонецПроцедуры //УстановитьТипПолучателя()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.КоманднаяПанель1.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата()) И (АвтоРезервированиеПоЗаявке ИЛИ АвтоРазмещениеПоЗаявке);

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,ПараметрОбъектКопирования);
		
		Если ПараметрОснование = Неопределено И ПараметрОбъектКопирования = Неопределено Тогда
			
			// Заполнить реквизит Получатель значением по умолчанию.
			ЗаполнитьПолучателя();
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(РасшифровкаПлатежа[0], ВидОперации);
			
		КонецЕсли;

	Иначе

		ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	УстановитьОграничениеТипаПолучателя();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	СтараяВалютаДокумента = ВалютаДокумента;	
	
	Список = (РасшифровкаПлатежа.Количество() > 1);
			
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору, 
												СтрокаПлатеж.КурсВзаиморасчетов,
												СтрокаПлатеж.КратностьВзаиморасчетов,
												мВалютаРегламентированногоУчета,
												Истина);
	
	// Установим заголовки по значению поля "Получатель" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;	

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПодотчетника) + ":";
		КонецЕсли;
		
		ЭлементыФормы.ИнфНадписьКурса1.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПодотчетника, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);

	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
									
	ЭлементыФормы.НадписьИтогоРазмещено.Заголовок="Итого размещено: "+
									Формат(РазмещениеЗаявки.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
									
	Если ВалютаДокумента.Пустая() Тогда
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Не указана валюта расхода денежных средств!";
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстПредупреждающейНадписи;
		
	Иначе
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Всего по заявке: "+
									Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
									
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстИнформационнойНадписи;
		
	КонецЕсли;
	
	ТекстВалюта=Строка(ВалютаДокумента);
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент1.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент2.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент3.Заголовок=ТекстВалюта;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеВыбора.Свойство("ДокументПланирования") Тогда
		
		ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения=ЗначениеВыбора.ДокументПланирования;
		СуммаКРазмещению=СуммаДокумента-РазмещениеЗаявки.Итог("СуммаПлатежа");
		СуммаПлатежа=?(ЗначениеВыбора.СуммаПлатежа<=СуммаКРазмещению,ЗначениеВыбора.СуммаПлатежа,СуммаКРазмещению);
		
		ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.СуммаПлатежа=СуммаПлатежа;


	Иначе
	
		УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(
			ЭтотОбъект, СтрокаПлатеж, ЗначениеВыбора, Список, ВалютаДокумента, КурсДокумента, КратностьДокумента);
											
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
					
	УстановитьФокус();
				
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы. 
// Вызывается при смене или перечитывании объекта.
Процедура ПриИзмененииДанных()
	
	Если ТипЗнч(СтрокаПлатеж) = Тип("ДокументТабличнаяЧастьСтрока.ЗаявкаНаРасходованиеСредств.РасшифровкаПлатежа")
		И РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = -1 Тогда
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели формы.
// Процедура устанавливает значение реквизита ВидОперации и производит связанные с этим действия.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка) 

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование[Кнопка.Имя];
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	УстановитьТипПолучателя();	
	
	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику 		
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		Контрагент = Неопределено;
	КонецЕсли;
		
	УстановитьВидимость();
	УстановитьФокус();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	Если НЕ ЗначениеЗаполнено(ДатаРасхода) И НЕ ВалютаДокумента.Пустая() Тогда
		
		УстановитьКурсДокумента(Дата);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
			
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента(ДатаКурса)
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();	
	
	ПриИзмененииДоговора();
	
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаПлатежаПриИзменении(Элемент)

	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсДокумента".
//
Процедура КурсДокументаПриИзменении(Элемент)

	РассчитатьСуммуПлатежаТаблица();

КонецПроцедуры // КурсДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаВзаиморасчетовПодотчетника".
//
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуПлатежа();

КонецПроцедуры // ВалютаВзаиморасчетовПодотчетникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"БанковскийСчетКассаКасса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура БанковскийСчетКассаПриИзменении(Элемент)

	Если (НЕ БанковскийСчетКасса=Неопределено) И (НЕ БанковскийСчетКасса.Пустая()) Тогда
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаРасхода, СуммаДокумента, БанковскийСчетКасса.ВалютаДенежныхСредств);
		ЭлементыФормы.ВалютаДокумента.Доступность=Ложь;
		
		РазмещениеЗаявки.Очистить();
		СуммаДокументаПриИзменении();
		
		Если ТипЗнч(БанковскийСчетКасса)=Тип("СправочникСсылка.БанковскиеСчета") Тогда
			Если Организация.Пустая() Тогда
				Организация=БанковскийСчетКасса.Владелец;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ВалютаДокумента.Доступность=Истина;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаТаблица();
	
	УстановитьВидимость();
	СтараяВалютаДокумента = ВалютаДокумента;
	
КонецПроцедуры // БанковскийСчетКассаПриИзменении()

Процедура СуммаДокументаПриИзменении()
			 
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьКурсВзаиморасчетов();
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
		
	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьКурсВзаиморасчетов();
		
	КонецЕсли;
			 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(,Элемент,);
		
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Значение = ВалютаВзаиморасчетовПодотчетника;
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность=Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатель) Тогда
						
			ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Значение = Получатель;
			ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность=Ложь;
					
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументПриИзменении(Элемент)

	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		Получатель                       = РасчетныйДокумент.ФизЛицо;
		ВалютаВзаиморасчетовПодотчетника = РасчетныйДокумент.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность; 
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
			
		Иначе
			
			СтрокаПлатеж.СуммаВзаиморасчетов=РасчетныйДокумент.СуммаЗайма;
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	ИначеЕсли ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.Кассы"));
   	Иначе
		БанковскийСчетКасса=Неопределено;
	КонецЕсли;
	
	РазмещениеЗаявки.Очистить();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)

	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
		ЭлементыФормы.БанковскийСчетКасса.ВыборПоВладельцу=Организация;

		РазмещениеЗаявки.Очистить();

	КонецЕсли;

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		РассчитатьСуммуПлатежа();
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(
		ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов подотчетника."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовПодотчетника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры
 
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта расхода денежных средств."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = КратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		КурсДокумента = СтруктураКурсаИКратности.КурсВалюты;
		КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаТаблица();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РазмещениеЗаявкиМестоРазмещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораРазмещенияЗаявки(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РазмещениеЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта заявки.");
		Отказ=Истина;
	КонецЕсли;
	
	Если ФормаОплаты.Пустая() Тогда
		Сообщить("Не указана форма оплаты.");
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ПриОчисткеВалютыДокумента();
		
	ИначеЕсли НЕ ВалютаДокумента=СтараяВалютаДокумента Тогда
		
		РазмещениеЗаявки.Очистить();	
		
		СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,?(ДатаРасхода='00010101',Дата,ДатаРасхода));
		
		КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

		РассчитатьСуммуПлатежаТаблица();	
		УстановитьВидимость();
		
	КонецЕсли;
	
	СтараяВалютаДокумента=ВалютаДокумента;
	
КонецПроцедуры

Процедура БанковскийСчетКассаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура АвтоРезервированиеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры

Процедура АвтоРазмещениеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры

Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеВалютыДокумента();
	
КонецПроцедуры

Процедура СуммаПлатежаПодотчетПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовККМПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПрочиеПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ДатаРасходаПриИзменении(Элемент)
	
	Если НЕ(НЕ ЗначениеЗаполнено(ДатаРасхода) ИЛИ ВалютаДокумента.Пустая()) Тогда
		
		УстановитьКурсДокумента(ДатаРасхода);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	БанковскийСчетКасса=Неопределено;
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода вида выдачи денежных средств
//
Процедура ВидВыдачиДенежныхСредствПриИзменении(Элемент)
	
	УстановитьТипПолучателя();
	УстановитьОграничениеТипаПолучателя();
 
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
														СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
													КонецПроцедуры
													
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры
