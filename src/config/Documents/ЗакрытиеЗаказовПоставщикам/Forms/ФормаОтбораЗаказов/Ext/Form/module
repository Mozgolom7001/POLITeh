Перем НП;
// Переменные настройки диалога
Перем ФлагВидимостиВидовРазмещений;
Перем ФлагВидимостиПросроченоДнейОплаты;
Перем ФлагВидимостиДатыОплаты;
Перем ФлагВидимостиОплаты;
Перем ФлагВидимостиПросроченоДнейОтгрузки;
Перем ФлагВидимостиДатыПоступления;
Перем ФлагДоступностиИзмененияНастроек;

Перем СоответствиеНазначений;

Перем СтруктураДляОтбораПоКатегориям;

Перем СтруктураПредставлениеПолей;

Перем СтараяПричинаЗакрытия;

Перем ДатаНачала;
Перем ДатаОкончания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

// Устанавливает видимость полей ввода в зависимости от настроек в форме.
//
Процедура УстановитьВидимостьЭлементовНастройки()
	
	// Поле ВидРазмещений видимо когда Наличие размещения установлено как С размещениями
	ЭлементыФормы.ПолеНастройкиВидРазмещений.Видимость = ФлагВидимостиВидовРазмещений;
	
	// Поле ДатаПоступления видимо когда Меньше/Равна/Больше
	ЭлементыФормы.ПолеДатаПоступления.Видимость = ФлагВидимостиДатыПоступления;
	
	// Поле ввода ПросроченоДней видимо только когда Просрочен
	ЭлементыФормы.НадписьОтгрузкаДней.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	ЭлементыФормы.ПолеПросроченоДнейОтгрузки.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	ЭлементыФормы.НадписьОтгрузкаНа.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	
	ЭлементыФормы.ПолеДатаОплаты.Видимость = ФлагВидимостиДатыОплаты;
	
	// Поле ввода ПросроченоДней видимо только когда Просрочен
	ЭлементыФормы.НадписьОплатаДней.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	ЭлементыФормы.ПолеПросроченоДнейОплаты.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	ЭлементыФормы.НадписьОплатаНа.Видимость = ФлагВидимостиПросроченоДнейОплаты;
		
КонецПроцедуры // УстановитьВидимостьЭлементовНастройки()

// Устанавливает доступность полей ввода в зависимости от настроек в форме.
//
Процедура УстановитьДоступностьЭлементовНастройки()
	
	ЭлементыФормы.ПолеНастройкиНаличиеРазмещений.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСостояниеОплаты.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСрокОплатыСравнение.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСостояниеОтгрузки.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСрокОтгрузкиСравнение.Доступность = ФлагДоступностиИзмененияНастроек;

КонецПроцедуры // УстановитьДоступностьЭлементовНастройки()

// Устанавливает доступность кнопок в зависимости от наличия документов в таблице.
//
Процедура УстановитьДоступностьКнопокПанелиЗаказов()
	
	// При пустом ТабличноеПолеЗаказы не должны быть доступны кнопки действий над заказами.
	Если ТабличноеПолеЗаказы.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеАнализ.Доступность       = Истина;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВключитьВсе.Доступность  = Истина;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВыключитьВсе.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеАнализ.Доступность       = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВключитьВсе.Доступность  = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВыключитьВсе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопокПанелиЗаказов()

// Устанавливает список доступных "Видов заполнения" и "Вид заполнения" по умолчанию.
//
Процедура УстановитьСтруктуруПодменюВидЗаполнения()
	
	ЭлементыФормы.ПолеНастройкиВидЗаполнения.СписокВыбора.Очистить();
	
	// Доступные Виды заполнения
	ЭлементыФормы.ПолеНастройкиВидЗаполнения.СписокВыбора.Добавить(1, "Произвольный отбор");
	ЭлементыФормы.ПолеНастройкиВидЗаполнения.СписокВыбора.Добавить(2, "Устаревшие заказы");		
	ЭлементыФормы.ПолеНастройкиВидЗаполнения.СписокВыбора.Добавить(3, "Исполненные заказы");		
	
	ВидЗаполненияПоУмолчанию = 3;
	
	// Получим настройки из хранилища
	НастройкиЗаполнения = ДокументОбъект.СпособЗаполнения.Получить();
	
	// Проверим был ли заполнен документ
	Если НастройкиЗаполнения <> Неопределено Тогда
		
		// Было заполнение, попробуем восстановить значения
		ДатаНач = НастройкиЗаполнения.ДатаНач;
		ДатаКон = НастройкиЗаполнения.ДатаКон;
		НаличиеРазмещений = НастройкиЗаполнения.НаличиеРазмещений;
		ВидРазмещений = НастройкиЗаполнения.ВидРазмещений;
		
		СостояниеОтгрузки = НастройкиЗаполнения.СостояниеОтгрузки;
		СрокОтгрузкиСравнение = НастройкиЗаполнения.СрокОтгрузкиСравнение;
		ПросроченоДнейОтгрузки = НастройкиЗаполнения.ПросроченоДнейОтгрузки;
		ДатаПоступления = НастройкиЗаполнения.ДатаПоступления;
		
		СостояниеОплаты = НастройкиЗаполнения.СостояниеОплаты;
		СрокОплатыСравнение = НастройкиЗаполнения.СрокОплатыСравнение;
		ПросроченоДнейОплаты = НастройкиЗаполнения.ПросроченоДнейОплаты;
		ДатаОплаты = НастройкиЗаполнения.ДатаОплаты;
		
		ИспользоватьСвойстваИКатегории = НастройкиЗаполнения.ИспользоватьСвойстваИКатегории;
		НастройкиОтбора = НастройкиЗаполнения.НастройкиОтбора;
		
		ПричинаЗакрытия = НастройкиЗаполнения.ПричинаЗакрытия;
	
		ВидЗаполненияИзДокумента = НастройкиЗаполнения.ВидЗаполнения;
		
		НастройкиИзДокумента = Истина;
		
		Найден = ЭлементыФормы.ПолеНастройкиВидЗаполнения.СписокВыбора.НайтиПоЗначению(ВидЗаполненияИзДокумента);
		Если НЕ(Найден = Неопределено) Тогда
			// Значение в документе корректно, берем его
			ВидЗаполнения = ВидЗаполненияИзДокумента;
		Иначе
			Сообщить("Некорректное значение способа заполнения в документе, установлено значение по умолчанию");
			ВидЗаполнения = ВидЗаполненияПоУмолчанию;
		КонецЕсли;
		
	Иначе
		ВидЗаполнения = ВидЗаполненияПоУмолчанию; // Для нового документа
	КонецЕсли;
	
	ПолеНастройкиВидЗаполненияПриИзменении(ЭлементыФормы.ПолеНастройкиВидЗаполнения);
	
	УстановитьВидимостьЭлементовНастройки();
	
КонецПроцедуры // УстановитьСтруктуруПодменюВидЗаполнения()

// Вызывается при изменении настроек отбора в форме.
//
Процедура ПриИзмененииНастроекПоУмолчанию()

	ПолеНастройкиНаличиеРазмещенийПриИзменении(ЭлементыФормы.ПолеНастройкиНаличиеРазмещений);
	ПолеНастройкиСрокОплатыСравнениеПриИзменении(ЭлементыФормы.ПолеНастройкиСрокОплатыСравнение);
	ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении(ЭлементыФормы.ПолеНастройкиСрокОтгрузкиСравнение);
	
	Если ВидЗаполнения = 1 Тогда
		// Для данного вида заполнения доступны для изменения все настройки
		ФлагДоступностиИзмененияНастроек = Истина;
	Иначе			
		// Для данного Вида заполнения основные настройки недоступны для изменения
		ФлагДоступностиИзмененияНастроек = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовНастройки();
			
КонецПроцедуры // ПриИзмененииНастроекПоУмолчанию()

// Заполняет установки по умолчанию для отбора по всем возможным условиям.
//
Процедура УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора()
	
	// Не важно
	НаличиеРазмещений =1;
	
	// Не важно
	СостояниеОплаты = 1;
	
	// Не важно
	СостояниеОтгрузки = 1;
	
	// Не важно
	СрокОплатыСравнение = 1;
	// Не важно
	СрокОтгрузкиСравнение = 1;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВидЗаполнения));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОплаты = ЗначениеПользователя;
	Иначе
		// По умолчанию 1 день
		ПросроченоДнейОплаты = 1;
	КонецЕсли;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВидЗаполнения));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОтгрузки = ЗначениеПользователя;
	Иначе
		// По умолчанию 1 день
		ПросроченоДнейОтгрузки = 1;
	КонецЕсли;
	
	// По умолчанию Текущая дата
	ДатаОплаты = ТекущаяДата();
	ДатаПоступления = ТекущаяДата();
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора()

// Заполняет установки по умолчанию для отбора "Устаревших" заказов.
//
Процедура УстановитьНастройкиПоУмолчаниюДляУстаревшихЗаказов()

	// Без размещений
	НаличиеРазмещений = 2;
	
	// Не оплачен полностью (неоплачен либо оплачен частично)
	СостояниеОплаты = 2;
	
	// Не отгружен полностью (неотгружен либо отгружен частично)
	СостояниеОтгрузки = 2;
	
	// Просрочен (более чем на)
	СрокОплатыСравнение = 2;
	// Просрочен (более чем на)
	СрокОтгрузкиСравнение = 2;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВидЗаполнения));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОплаты = ЗначениеПользователя;
	Иначе
		// Срок давности для устаревших заказов по умолчанию: 90 дней
		ПросроченоДнейОплаты = 90;
	КонецЕсли;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВидЗаполнения));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОтгрузки = ЗначениеПользователя;
	Иначе
		// Срок давности для устаревших заказов по умолчанию: 90 дней
		ПросроченоДнейОтгрузки = 90;
	КонецЕсли;
	
	// По умолчанию Текущая дата (в отборе не участвуют)
	ДатаОплаты = ТекущаяДата();
	ДатаПоступления = ТекущаяДата();
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляУстаревшихЗаказов()

// Заполняет установки по умолчанию для отбора "Исполненных" заказов.
//
Процедура УстановитьНастройкиПоУмолчаниюДляИсполненныхЗаказов()

	// Без размещений
	НаличиеРазмещений = 2;
	
	// Оплачен полностью
	СостояниеОплаты = 3;
	
	// Получен полностью
	СостояниеОтгрузки = 3;
	
	// Срок оплаты Не важно
	СрокОплатыСравнение = 1;
	// Срок отгрузки Не важно
	СрокОтгрузкиСравнение = 1;
	
	// По умолчанию 1 день (в отборе не участвуют)
	ПросроченоДнейОплаты = 1;
	ПросроченоДнейОтгрузки = 1;
	
	// По умолчанию Текущая дата (в отборе не участвуют)
	ДатаОплаты = ТекущаяДата();
	ДатаПоступления = ТекущаяДата();
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляИсполненныхЗаказов()

// Создает запрос и заполняет начальные установки построителя отбора.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета)
	
	// Запрос для отбора
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	истина 															  				КАК Переносить,
	|	&ПричинаЗакрытияЗаказа 															КАК ПричинаЗакрытияЗаказа,
	|	ВЫБОР КОГДА ЕстьNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток,0)>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										                КАК ЗаказыКоличество,
	|	ВЫБОР КОГДА ЕстьNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток,0)>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										                КАК РазмещенияКоличество,
	|	ЕстьNULL(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток,0)                 КАК ЗаказыОстаток,
	|	ЕстьNULL(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0)             КАК РасчетыОстаток,
	|
	|	ДокументыЗаказПоставщику.Ссылка,
	|	ДокументыЗаказПоставщику.Дата,
	|	ДокументыЗаказПоставщику.Номер,
	|	ДокументыЗаказПоставщику.Контрагент,
	|	ДокументыЗаказПоставщику.ДоговорКонтрагента,
	|	ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента,
	|	ДокументыЗаказПоставщику.Организация,
	|	ДокументыЗаказПоставщику.Подразделение,
	|	ДокументыЗаказПоставщику.Склад,
	|	ДокументыЗаказПоставщику.Ответственный,
	|	ДокументыЗаказПоставщику.СуммаДокумента,
	|	ДокументыЗаказПоставщику.ВалютаДокумента,
	|	ДокументыЗаказПоставщику.ТипЦен,
	|	ДокументыЗаказПоставщику.ДатаОплаты,
	|	ДокументыЗаказПоставщику.ДатаПоступления,
	|	ДокументыЗаказПоставщику.Проведен
	|
	|{ ВЫБРАТЬ
	|	 ДокументыЗаказПоставщику.Контрагент.* КАК Контрагент,
	|	 ДокументыЗаказПоставщику.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	 ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента.* КАК КонтактноеЛицоКонтрагента,
	|	 ДокументыЗаказПоставщику.Организация.* КАК Организация,
	|	 ДокументыЗаказПоставщику.Склад.* КАК Склад,
	|	 ДокументыЗаказПоставщику.Подразделение.* КАК Подразделение,
	|	 ДокументыЗаказПоставщику.Ответственный.* КАК Ответственный,
	|	 ДокументыЗаказПоставщику.ТипЦен.* КАК ТипЦен,
	|	 ДокументыЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	 ДокументыЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента
	|//СВОЙСТВА
	|}
	|
	|ИЗ
	|	Документ.ЗаказПоставщику                                    КАК ДокументыЗаказПоставщику
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки             КАК ЗаказыПоставщикамОстатки
	|		ПО ДокументыЗаказПоставщику.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки         КАК РасчетыСКонтрагентамиОстатки
	|		ПО ДокументыЗаказПоставщику.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
	|
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки  КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО ДокументыЗаказПоставщику.Ссылка = РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику
	|
	|//СОЕДИНЕНИЯ
	|
	|	{ ГДЕ 
	|	 ДокументыЗаказПоставщику.Контрагент.* КАК Контрагент,
	|	 ДокументыЗаказПоставщику.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	 ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента.* КАК КонтактноеЛицоКонтрагента,
	|	 ДокументыЗаказПоставщику.Организация.* КАК Организация,
	|	 ДокументыЗаказПоставщику.Склад.* КАК Склад,
	|	 ДокументыЗаказПоставщику.Подразделение.* КАК Подразделение,
	|	 ДокументыЗаказПоставщику.Ответственный.* КАК Ответственный,
	|	 ДокументыЗаказПоставщику.ТипЦен.* КАК ТипЦен,
	|	 ДокументыЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	 ДокументыЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|	}
	|
	|ГДЕ
	|	(ДокументыЗаказПоставщику.Проведен) И
	|
	|	((ДокументыЗаказПоставщику.Дата >= &ДатаНач) ИЛИ (&ДатаНач = &ПустаяДата)) И
	|	((ДокументыЗаказПоставщику.Дата <= &ДатаКон) ИЛИ (&ДатаКон = &ПустаяДата)) И
	|
	|	(	((&СрокОплатыСравнение = 6) И (ДокументыЗаказПоставщику.ДатаОплаты = &ПустаяДата)) ИЛИ
	|		((&СрокОплатыСравнение = 5) И (ДокументыЗаказПоставщику.ДатаОплаты > &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 4) И (ДокументыЗаказПоставщику.ДатаОплаты = &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 3) И (ДокументыЗаказПоставщику.ДатаОплаты < &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 2) И (ДокументыЗаказПоставщику.ДатаОплаты <= &ТребуемаяДатаОплаты)) ИЛИ
	|		(&СрокОплатыСравнение = 1)
	|	) И
	|
	|	(	((&СрокОтгрузкиСравнение = 6) И (ДокументыЗаказПоставщику.ДатаПоступления = &ПустаяДата)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 5) И (ДокументыЗаказПоставщику.ДатаПоступления > &ДатаПоступления)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 4) И (ДокументыЗаказПоставщику.ДатаПоступления = &ДатаПоступления)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 3) И (ДокументыЗаказПоставщику.ДатаПоступления < &ДатаПоступления)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 2) И (ДокументыЗаказПоставщику.ДатаПоступления <= &ТребуемаяДатаПоступления)) ИЛИ
	|		(&СрокОтгрузкиСравнение = 1)
	|	) И
	|
	|	(	((&СостояниеОплаты = 3) И (ДокументыЗаказПоставщику.СуммаДокумента > 0) И ((РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток IS NULL) ИЛИ (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0))) ИЛИ
	|		((&СостояниеОплаты = 2) И (ДокументыЗаказПоставщику.СуммаДокумента > 0) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0)) ИЛИ
	|		(&СостояниеОплаты = 1)
	|	) И
	|
	|	(	((&СостояниеОтгрузки = 3) И (ДокументыЗаказПоставщику.СуммаДокумента > 0) И ((ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток IS NULL) ИЛИ (ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток < 0)) И ((ЗаказыПоставщикамОстатки.КоличествоОстаток IS NULL) ИЛИ (ЗаказыПоставщикамОстатки.КоличествоОстаток < 0))) ИЛИ
	|		((&СостояниеОтгрузки = 2) И (ДокументыЗаказПоставщику.СуммаДокумента > 0) И ((ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток > 0) ИЛИ (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0))) ИЛИ
	|		(&СостояниеОтгрузки = 1)
	|	) И
	|
	|	(	((&НаличиеРазмещений = 3) И (&ВидРазмещений = 3) И (РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРазмещений = 3) И (&ВидРазмещений = 2) И (РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРазмещений = 3) И (&ВидРазмещений = 1) И ((РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) ИЛИ (РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ)) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРазмещений = 2) И ((РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток IS NULL) ИЛИ (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток < 0))) ИЛИ
	|		(&НаличиеРазмещений = 1)
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыЗаказПоставщику.Дата, ДокументыЗаказПоставщику.Номер
	|";
	
	СтруктураПредставлениеПолей = Новый Структура;
	
	СтруктураПредставлениеПолей.Вставить("Контрагент",                "Контрагент");
	СтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента",        "Договор");
	СтруктураПредставлениеПолей.Вставить("КонтактноеЛицоКонтрагента", "Контактное лицо");
	СтруктураПредставлениеПолей.Вставить("Организация",               "Организация");
	СтруктураПредставлениеПолей.Вставить("Подразделение",             "Подразделение");
	СтруктураПредставлениеПолей.Вставить("Склад",                     "Склад");
	СтруктураПредставлениеПолей.Вставить("Ответственный",             "Ответственный");
	СтруктураПредставлениеПолей.Вставить("СуммаДокумента",            "Сумма документа");
	СтруктураПредставлениеПолей.Вставить("ТипЦен",                    "Тип цен");
	СтруктураПредставлениеПолей.Вставить("ВалютаДокумента",           "Валюта документа");
	
	Если ИспользоватьСвойстваИКатегории Тогда

        СоответствиеНазначений = Новый Соответствие;
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		//ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		ТаблицаПолей.Очистить();
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПоставщику.Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента";
		НоваяСтрока.Представление = "КонтактноеЛицоКонтрагента";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛицаКонтрагентов;
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА", "//КАТЕГОРИИ", "//СОЕДИНЕНИЯ", , СтруктураДляОтбораПоКатегориям);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) = Ложь Тогда
		ПостроительОтчета.Текст = ТекстЗапроса;
	КонецЕсли;
	
	УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, СоответствиеНазначений, СтруктураПредставлениеПолей);
	
	// Заполнить отбор построителя по умолчанию
	Если НЕ(ПостроительОтчета.Отбор.Количество() > 0) Тогда
		Если НастройкиИзДокумента Тогда
			ПостроительОтчета.УстановитьНастройки(НастройкиОтбора);
		Иначе
			ЗаполнитьОтборПостроителя(ПостроительОтчета);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить представление полей построителя по именам
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // ИнициироватьПостроительДляОтбораЗаказов()

// Заполняет переменные построителя отбора выбранными в форме значениями.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ЗаполнитьПараметрыПостроителя(ПостроительОтчета)
	
	// Заполним параметры построителя
	ПостроительОтчета.Параметры.Вставить("НаличиеРазмещений", 		НаличиеРазмещений);
	ПостроительОтчета.Параметры.Вставить("ВидРазмещений",	 		ВидРазмещений);
	ПостроительОтчета.Параметры.Вставить("СостояниеОплаты", 		СостояниеОплаты);
	ПостроительОтчета.Параметры.Вставить("СостояниеОтгрузки", 		СостояниеОтгрузки);
	ПостроительОтчета.Параметры.Вставить("СрокОплатыСравнение", 	СрокОплатыСравнение);
	ПостроительОтчета.Параметры.Вставить("СрокОтгрузкиСравнение", 	СрокОтгрузкиСравнение);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач", 		ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаКон", 		ДатаОкончания);
	ПостроительОтчета.Параметры.Вставить("ДатаОплаты", 		ДатаОплаты);
	ПостроительОтчета.Параметры.Вставить("ДатаПоступления", ДатаПоступления);
	ПостроительОтчета.Параметры.Вставить("ТекущаяДата", 	ТекущаяДата());
	ПостроительОтчета.Параметры.Вставить("ПустаяДата",  	Дата('00010101'));
	ПостроительОтчета.Параметры.Вставить("ПричинаЗакрытияЗаказа", 	ПричинаЗакрытия);
	Если Константы.СпособКонтроляДнейЗадолженности.Получить() = Перечисления.СпособыКонтроляДнейЗадолженности.ПоКалендарнымДням Тогда

		ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаОплаты", 	НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОплаты));
		ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаПоступления", 	НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОтгрузки));
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйПроизводственныйКалендарь.Год
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачГода И &КонГода";
		
		Запрос.УстановитьПараметр("НачГода",НачалоГода(ТекущаяДата()));
		Запрос.УстановитьПараметр("КонГода",КонецГода(ТекущаяДата()));
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Если СрокОтгрузкиСравнение = 2 или СрокОплатыСравнение = 2 Тогда
				Сообщить("Не заполнен Регламентированный производственный календарь за "+Год(ТекущаяДата())+" год.");
				Сообщить("Дата, ранее которой заказы просрочены, рассчитана по календарным дням.");
			КонецЕсли;
			ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаОплаты", 	НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОплаты));
			ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаПоступления", 	НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОтгрузки));
		Иначе
			ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаОплаты", 	ЗаполнениеДокументов.ОпределитьДату(НачалоДня(ТекущаяДата()),-ПросроченоДнейОплаты));
			ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаПоступления", 	ЗаполнениеДокументов.ОпределитьДату(НачалоДня(ТекущаяДата()),-ПросроченоДнейОтгрузки));
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыПостроителя()

// Заполняет отбор построителя по умолчанию.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ЗаполнитьОтборПостроителя(ПостроительОтчета)
	
	// Добавим поля отбора по умолчанию
	Поле = ПостроительОтчета.Отбор.Добавить("Ответственный", "Ответственный", "Ответственный");
	
	Поле.Установить(ДокументОбъект.Ответственный.Ссылка);
	
	Поле = ПостроительОтчета.Отбор.Добавить("Контрагент", "Контрагент", "Контрагент");
	Поле.Использование = Ложь;
	Поле = ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента", "ДоговорКонтрагента", "Договор");
	Поле.Использование = Ложь;
	Поле = ПостроительОтчета.Отбор.Добавить("Организация", "Организация", "Организация");
	Поле.Использование = Ложь;
	Поле = ПостроительОтчета.Отбор.Добавить("Склад", "Склад", "Склад");
	Поле.Использование = Ложь;
		
КонецПроцедуры // ЗаполнитьОтборПостроителя()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ
//

// Обработчик события ПриОткрытии формы
//
Процедура ПриОткрытии()
	
	// Заполнить структуру подменю Вид заполнения панели формы отбора
	УстановитьСтруктуруПодменюВидЗаполнения();
	
	// Создание запроса для Построителя отбора
	ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета);
	
	// Установить доступность кнопок командной панели таблицы Заказов
	УстановитьДоступностьКнопокПанелиЗаказов();
	
	// Установим конец периода на конец дня даты документа закрытия
	ДатаКон = КонецДня(Дата);
	ДатаКонПриИзменении(ЭлементыФормы.ДатаКон);

КонецПроцедуры // ПриОткрытии()

// Обработчик события ПриИзменении элемента формы ДатаНач.
//
Процедура ДатаНачПриИзменении(Элемент)

	// Установка даты начала периода по умолчанию
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры	// ДатаНачПриИзменении()

// Обработчик события ПриИзменении элемента формы ДатаКон.
//
Процедура ДатаКонПриИзменении(Элемент)

	// Установка даты конца периода по умолчанию
	Если КонецДня(ДатаКон) > КонецДня(Дата) Тогда
		// Установим конец периода на конец дня даты документа закрытия
		ДатаКон = КонецДня(Дата);
		Предупреждение("Дата окончания периода не должна быть больше даты документа!",,ЭтаФорма.Заголовок);
	Иначе
		ДатаКон = КонецДня(ДатаКон);
	КонецЕсли;
	
	НП.УстановитьПериод(ДатаНач, ДатаКон, Истина);
	
КонецПроцедуры	// ДатаКонПриИзменении()

// Обработчик события Нажатие кнопки настройки периода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	// Установка периода отбора
	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Обработчик события Выбор кнопки подменю ВидЗаполнения командной панели формы.
//
Процедура ПолеНастройкиВидЗаполненияПриИзменении(Элемент)

	// Установить настройки диалога по виду заполнения
	Если Элемент.Значение = 1 Тогда 
		УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора();
	ИначеЕсли Элемент.Значение = 2 Тогда 
		УстановитьНастройкиПоУмолчаниюДляУстаревшихЗаказов();
	ИначеЕсли Элемент.Значение = 3 Тогда 
		УстановитьНастройкиПоУмолчаниюДляИсполненныхЗаказов();
	КонецЕсли;
	
	ПриИзмененииНастроекПоУмолчанию();

КонецПроцедуры // ПолеНастройкиВидЗаполненияПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиНаличиеРазмещений.
//
Процедура ПолеНастройкиНаличиеРазмещенийПриИзменении(Элемент)
	
	// Если с размещениями, то доступен отбор по виду документов заказ
	Если Элемент.Значение = 3 Тогда 
		ФлагВидимостиВидовРазмещений = Истина;
	Иначе
		ФлагВидимостиВидовРазмещений = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
	
КонецПроцедуры // ПолеНастройкиНаличиеРазмещенийПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСрокОплатыСравнение.
//
Процедура ПолеНастройкиСрокОплатыСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = 1 ИЛИ Элемент.Значение = 6 Тогда 
		// По значению Не важно и Не заполнена скроем поля настройки отбора 
		ФлагВидимостиПросроченоДнейОплаты = Ложь;
		ФлагВидимостиДатыОплаты = Ложь;
	ИначеЕсли Элемент.Значение = 2 Тогда 
		// По значению Просрочен доступен отбор по Количеству дней
		ФлагВидимостиПросроченоДнейОплаты = Истина;
		ФлагВидимостиДатыОплаты = Ложь;
	Иначе
		// Доступен отбор по Дате оплаты
		ФлагВидимостиПросроченоДнейОплаты = Ложь;
		ФлагВидимостиДатыОплаты = Истина;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
			
КонецПроцедуры // ПолеНастройкиСрокОплатыСравнениеПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСрокОтгрузкиСравнение.
//
Процедура ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = 1 ИЛИ Элемент.Значение = 6 Тогда 
		// По значению Не важно и Не заполнена скроем поля настройки отбора 
		ФлагВидимостиПросроченоДнейОтгрузки = Ложь;
		ФлагВидимостиДатыПоступления = Ложь;
	ИначеЕсли Элемент.Значение = 2 Тогда 
		// По значению Просрочен доступен отбор по Количеству дней
		ФлагВидимостиПросроченоДнейОтгрузки = Истина;
		ФлагВидимостиДатыПоступления = Ложь;
	Иначе
		// Доступен отбор по Дате отгрузки
		ФлагВидимостиПросроченоДнейОтгрузки = Ложь;
		ФлагВидимостиДатыПоступления = Истина;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
			
КонецПроцедуры // ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеПросроченоДнейОтгрузки.
//
Процедура ПолеПросроченоДнейОтгрузкиПриИзменении(Элемент)

	// Сохраним значение поля данного ВидаЗаполнения
	СохранитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВидЗаполнения), ПросроченоДнейОтгрузки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеПросроченоДнейОплаты.
//
Процедура ПолеПросроченоДнейОплатыПриИзменении(Элемент)
	
	// Сохраним значение поля для данного ВидаЗаполнения
	СохранитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВидЗаполнения), ПросроченоДнейОплаты);
	
КонецПроцедуры

// Обработчик события Выбор, открывает Документ по двойному щелчку в строке списка.
//
Процедура ТабличноеПолеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	Если (Колонка.Имя <> "Переносить") И (Колонка.Имя <> "ПричинаЗакрытияЗаказа") Тогда
		Если ВыбраннаяСтрока.Ссылка <> Неопределено Тогда
			ВыбраннаяСтрока.Ссылка.ПолучитьФорму(, ЭтаФорма).Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеЗаказыВыбор()

// Обработчик события НачалоВыбора элемента формы ТабличноеПолеОтбор.Значение.
//
Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "категории") Тогда
		// Ограничение списка категорий
		Назначение = СоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);
	ИначеЕсли Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "св-во") Тогда
		Свойство = СоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Обработчик события Нажатие кнопки ВключитьВсе.
//
Процедура КоманднаяПанельЗаказыДействиеВключитьВсе(Кнопка)
	
	// Установим все отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = Истина;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗаказыДействиеВключитьВсе()

// Обработчик события Нажатие кнопки ВыключитьВсе.
//
Процедура КоманднаяПанельЗаказыДействиеВыключитьВсе(Кнопка)
	
	// Сбросим все отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗаказыДействиеВыключитьВсе()

// Обработчик события нажатие кнопки Анализ.
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.ТабличноеПолеЗаказы.ТекущаяСтрока <> Неопределено Тогда
		
		УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ЭлементыФормы.ТабличноеПолеЗаказы.ТекущаяСтрока.Ссылка,ложь, истина);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеАнализ()

// Обработчик события Нажатие кнопки Заполнить.
//
Процедура КоманднаяПанельЗаказыДействиеЗаполнить(Кнопка)
	
	//Произведем отбор заказов по условиям отбора
	Если (ДатаНач > ДатаКон) И (ДатаКон <> Дата('00010101')) Тогда
		Предупреждение(" Дата начала периода не может быть больше даты окончания периода!",,ЭтаФорма.Заголовок);
		Возврат;
	КонецЕсли;
	
	// Заполним Построитель параметрами из полей формы и выполним отбор
	ДатаНачала = НачалоДня(ДатаНач);
	ДатаОкончания = КонецДня(ДатаКон);
	ЗаполнитьПараметрыПостроителя(ПостроительОтчета);
	ПостроительОтчета.Выполнить();
	
	// Заполним список отобранных заказов
	ТабличноеПолеЗаказы.Очистить();
	ТабличноеПолеЗаказы = ПостроительОтчета.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	УстановитьДоступностьКнопокПанелиЗаказов();

КонецПроцедуры // КоманднаяПанельЗаказыДействиеЗаполнить()

// Обработчик события Нажатие кнопки Перенести.
//
Процедура ОсновныеДействияФормыДействиеПеренести(Кнопка)
	
	// Проверим наличие строк в таблице.
	Если ТабличноеПолеЗаказы.Количество() = 0 Тогда
		Предупреждение("Не выбраны документы!");
		Возврат;
	КонецЕсли;
	
	//Перенесем заказы в табличную часть документа Закрытие заказов
	
	// Выберем отмеченные
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Переносить", Истина);
	НайденныеСтроки = ТабличноеПолеЗаказы.НайтиСтроки(СтруктураОтбора);
	
	// Если есть отмеченные 
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если ДокументОбъект.Заказы.Количество() > 0 Тогда
			// Если документ не пуст 
			ТекстВопроса = "";
			Если ДокументОбъект.Проведен Тогда
				ТекстВопроса = "Внимание! Документ проведен." + Символы.ПС;
			КонецЕсли;
			ТекстВопроса = ТекстВопроса + "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЭтаФорма.Заголовок);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			// Очистим 
			ДокументОбъект.Заказы.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// Перенесем отмеченные заказы в документ
	Для Каждого Строка Из НайденныеСтроки Цикл 
		Если Строка.Ссылка <> Неопределено Тогда
			СтрокаДокумента = ДокументОбъект.Заказы.Добавить();
			СтрокаДокумента.ЗаказПоставщику = Строка.Ссылка;
			Если НЕ(Строка.ПричинаЗакрытияЗаказа.Пустая() = Истина) Тогда
				СтрокаДокумента.ПричинаЗакрытияЗаказа = Строка.ПричинаЗакрытияЗаказа;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Сохраним значение всех настроек в поле документа СпособЗаполнения
	НастройкиЗаполнения = Новый Структура();
	
	НастройкиЗаполнения.Вставить("ВидЗаполнения", ВидЗаполнения);
	
	НастройкиЗаполнения.Вставить("ДатаНач", ДатаНач);
	НастройкиЗаполнения.Вставить("ДатаКон", ДатаКон);
	
	НастройкиЗаполнения.Вставить("НаличиеРазмещений", НаличиеРазмещений);
	НастройкиЗаполнения.Вставить("ВидРазмещений", ВидРазмещений);
	
	НастройкиЗаполнения.Вставить("СостояниеОтгрузки", СостояниеОтгрузки);
	НастройкиЗаполнения.Вставить("СрокОтгрузкиСравнение", СрокОтгрузкиСравнение);
	НастройкиЗаполнения.Вставить("ПросроченоДнейОтгрузки", ПросроченоДнейОтгрузки);
	НастройкиЗаполнения.Вставить("ДатаПоступления", ДатаПоступления);
	
	НастройкиЗаполнения.Вставить("СостояниеОплаты", СостояниеОплаты);
	НастройкиЗаполнения.Вставить("СрокОплатыСравнение", СрокОплатыСравнение);
	НастройкиЗаполнения.Вставить("ПросроченоДнейОплаты", ПросроченоДнейОплаты);
	НастройкиЗаполнения.Вставить("ДатаОплаты", ДатаОплаты);
	
	НастройкиЗаполнения.Вставить("ПричинаЗакрытия", ПричинаЗакрытия);
	
	НастройкиЗаполнения.Вставить("ИспользоватьСвойстваИКатегории", ИспользоватьСвойстваИКатегории);
	
	НастройкиЗаполнения.Вставить("НастройкиОтбора", ПостроительОтчета.ПолучитьНастройки());
	
	ДокументОбъект.СпособЗаполнения = Новый ХранилищеЗначения(НастройкиЗаполнения);
	
	ЭтаФорма.Закрыть();

КонецПроцедуры // ОсновныеДействияФормыДействиеПеренести()

// Обработчик события ПриИзменении элемента формы ИспользоватьСвойстваИКатегории.
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)
	
	// Заполнить построитель для отбора
	ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета);
	
КонецПроцедуры

// Обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Отключим стандартную обработку для этой формы
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеВводаПричинаЗакрытия.
//
Процедура ПолеВводаПричинаЗакрытияПриИзменении(Элемент)
	
	Если (ПричинаЗакрытия <> СтараяПричинаЗакрытия) И (ТабличноеПолеЗаказы.Количество() > 0) Тогда
		Если ПричинаЗакрытия.Пустая() Тогда
			ТекстВопроса = "Очистить причину закрытия у всех заказов?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЭтаФорма.Заголовок);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			// Очистим причину закрытия во всех строках
			Для Каждого Строка Из ТабличноеПолеЗаказы Цикл 
				Если Строка.Ссылка <> Неопределено Тогда
					Строка.ПричинаЗакрытияЗаказа = Справочники.ПричиныЗакрытияЗаказов.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстВопроса = "Изменить причину закрытия у всех заказов?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЭтаФорма.Заголовок);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			// Заполним причину закрытия во все строки
			Для Каждого Строка Из ТабличноеПолеЗаказы Цикл 
				Если Строка.Ссылка <> Неопределено Тогда
					Строка.ПричинаЗакрытияЗаказа = ПричинаЗакрытия;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ПолеВводаПричинаЗакрытия.
// 
Процедура ПолеВводаПричинаЗакрытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Сохраним значение
	СтараяПричинаЗакрытия = ПричинаЗакрытия;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ПолеВводаПричинаЗакрытия.
// 
Процедура ПолеВводаПричинаЗакрытияОчистка(Элемент, СтандартнаяОбработка)
	
	// Сохраним значение
	СтараяПричинаЗакрытия = ПричинаЗакрытия;
	
КонецПроцедуры


НП = Новый НастройкаПериода;