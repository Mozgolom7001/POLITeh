Перем НП;
Перем ДатаНачала;
Перем ДатаОкончания;

// Переменные настройки диалога
Перем ФлагВидимостиРазмещениеРезервов;
Перем ФлагВидимостиПросроченоДнейОплаты;
Перем ФлагВидимостиДатыОплаты;
Перем ФлагВидимостиПросроченоДнейОтгрузки;
Перем ФлагВидимостиДатыОтгрузки;
Перем ФлагДоступностиИзмененияНастроек;
Перем ФлагДоступностиИзмененияДляОтгрузки;

Перем СоответствиеНазначений;
Перем СтруктураДляОтбораПоКатегориям;
Перем СтруктураПредставлениеПолей;

Перем мКрасныйЦвет, мСинийЦвет, мЦветГруппы, мЦветТекста, мОбычныйШрифт, мЖирныйШрифт;

Перем мИспользоватьТару, мЧастичноеЗаполнение, мКонтролироватьПревышениеОбъемаЗаказа;
Перем мСоответствиеГруппыДоступностиСкладов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура определяет факт частичного заполнения табличных частей по способу заполнения.
//
// Параметры:
//  Пометка       - булево, признак установки/снятия флажков.
//  ТабличноеПоле - табличное поле, флажки которого необходимо установить/снять.
//
Процедура ОпределитьЧастичноеЗаполнение()

	мЧастичноеЗаполнение = Ложь;
	Если СпособЗаполнения = 2 Тогда
		мЧастичноеЗаполнение = Истина;
	КонецЕсли;

КонецПроцедуры // ОпределитьЧастичноеЗаполнение()

// Устанавливает доступные значения поля СпособЗаполнения.
// вызывает анализ текущего состояния заказа.
//
Процедура УстановитьСпособЗаполнения()

	Если ДокументОбъект.Товары.Количество() = 0
		И ДокументОбъект.Услуги.Количество() = 0
		И ДокументОбъект.ВозвратнаяТара.Количество() = 0 Тогда
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Очистить();
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Добавить(1, "Заполнить по заказам");
		СпособЗаполнения = 1;
	ИначеЕсли НЕ ДокументОбъект.ЭтоНовый() Тогда
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Очистить();
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Добавить(2, "Добавить по заказам");
		СпособЗаполнения = 2;
	Иначе
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Очистить();
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Добавить(1, "Заполнить по заказам");
		СпособЗаполнения = 1;
	КонецЕсли;
	
	ОпределитьЧастичноеЗаполнение();

КонецПроцедуры

// Процедура устанавливает/снимает флажки в заданном табличном поле.
//
// Параметры:
//  Пометка       - булево, признак установки/снятия флажков.
//  ТабличноеПоле - табличное поле, флажки которого необходимо установить/снять.
//
Процедура УстановитьСнятьФлажки(Пометка, ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		СтрокаТабличнойЧасти.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажки()

// Процедура устанавливает/снимает флажки для подчинения.
//
Процедура УстановитьСнятьФлажкиПодчинения(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя",                ТекущаяСтрока.ЗаказПокупателя);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		СтрокаПоСкладу.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажкиПодчинения()

// Процедура устанавливает/снимает флажки для группы.
//
Процедура УстановитьСнятьФлажкиГруппы(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя",                ТекущаяСтрока.ЗаказПокупателя);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	ПометкаГруппы  = Пометка;

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		Если СтрокаПоСкладу.Пометка И НЕ Пометка Тогда
			ПометкаГруппы = СтрокаПоСкладу.Пометка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя",                ТекущаяСтрока.ЗаказПокупателя);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Ложь);

	СтрокиПоСкладу            = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПоСкладу.Количество() > 0 Тогда
		СтрокиПоСкладу[0].Пометка = ПометкаГруппы;
	КонецЕсли;

КонецПроцедуры // УстановитьСнятьФлажкиГруппы()

// Процедура открывает отчет "Анализ заказа" по значению заказа.
//
// Параметры:
//  ЗаказПокупателя - ссылка на документ заказ.
//
Процедура ОткрытьОтчетАнализЗаказа(ЗаказПокупателя)

    УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ЗаказПокупателя,ложь, истина);

КонецПроцедуры // ОткрытьОтчетАнализЗаказа()

// Процедура обнуляет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле - обрабатываемое табличное поле.
//
Процедура ОбнулитьСтолбецДобавитьВДокумент(ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.ДобавитьВДокумент = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбнулитьСтолбецДобавитьВДокумент()

// Процедура заполняет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле       - обрабатываемое табличное поле.
//  ИмяСтолбцаИсточника - столбец, данными которого будет заполняться столбец "Добавить в документ".
//
Процедура ЗаполнитьСтолбецДобавитьВДокумент(ТабличноеПоле, ИмяСтолбцаИсточника)

	Для Каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		Если ТабличноеПоле = Услуги ИЛИ СтрокаТабличнойЧасти.МеткаОстаткиПоСкладу = Ложь Тогда
			Если СтрокаТабличнойЧасти.Пометка Тогда
				Отгрузить = СтрокаТабличнойЧасти[ИмяСтолбцаИсточника];
				Если мЧастичноеЗаполнение Тогда
					Заполнено         = СтрокаТабличнойЧасти.Заполнено;
					Добавить          = Отгрузить - ?(Заполнено > 0, Заполнено, 0);
					СтрокаТабличнойЧасти.ДобавитьВДокумент = ?(Добавить > 0, Добавить, 0);
				Иначе
					СтрокаТабличнойЧасти.ДобавитьВДокумент = Отгрузить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТабличноеПоле <> Услуги 
	   И мУказаниеСкладовВТЧ Тогда
		ЗаполнитьСтолбецДобавитьВДокументПоСкладам(ТабличноеПоле);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтолбецДобавитьВДокумент()

// Заполняет колонку ДобавитьВДокумент в ситуации множества складов.
//
// Параметры:
//  ТабличноеПоле  - обрабатываемое табличное поле.
//  ТоварыНаСкладе - таблица остатков на складах (если не определена, то берется из табличного поля).
//
Процедура ЗаполнитьСтолбецДобавитьВДокументПоСкладам(ТабличноеПоле, ТоварыНаСкладе = Неопределено)

	Если ТоварыНаСкладе = Неопределено Тогда
		
		ТоварыНаСкладе = ТабличноеПоле.Скопировать();
		
		// Если таблица по складу не заполнена, берем её из табличного поля
		КолвоСтрок = ТоварыНаСкладе.Количество();
		Для Индекс = 1 По КолвоСтрок Цикл
			Если ТоварыНаСкладе[КолвоСтрок - Индекс].МеткаОстаткиПоСкладу = Ложь Тогда
				ТоварыНаСкладе.Удалить(КолвоСтрок - Индекс);
			КонецЕсли;
		КонецЦикла;
		
		// В этом случае из табличного поля нужно удалить строки таблицы по складам
		КолвоСтрок = ТабличноеПоле.Количество();
		Для Индекс = 1 По КолвоСтрок Цикл
			Если ТабличноеПоле[КолвоСтрок - Индекс].МеткаОстаткиПоСкладу = Истина Тогда
				ТабличноеПоле.Удалить(КолвоСтрок - Индекс);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из ТоварыНаСкладе Цикл

			СтрокаТабличнойЧасти.Запланировано        = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),        0, СтрокаТабличнойЧасти.Запланировано);
			СтрокаТабличнойЧасти.Заполнено            = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),            0, СтрокаТабличнойЧасти.Заполнено);
			СтрокаТабличнойЧасти.ЗаполненоИзРезерва   = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаполненоИзРезерва),   0, СтрокаТабличнойЧасти.ЗаполненоИзРезерва);
			СтрокаТабличнойЧасти.ОсталосьОтгрузить    = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьОтгрузить),    0, СтрокаТабличнойЧасти.ОсталосьОтгрузить);
			СтрокаТабличнойЧасти.СвободныйОстаток     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СвободныйОстаток),     0, СтрокаТабличнойЧасти.СвободныйОстаток);
			СтрокаТабличнойЧасти.РезервПоЗаказу       = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.РезервПоЗаказу),       0, СтрокаТабличнойЧасти.РезервПоЗаказу);
			СтрокаТабличнойЧасти.ОстатокПоОрганизации = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОстатокПоОрганизации), 0, СтрокаТабличнойЧасти.ОстатокПоОрганизации);
			СтрокаТабличнойЧасти.МожноОтгрузить       = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.МожноОтгрузить),       0, СтрокаТабличнойЧасти.МожноОтгрузить);
			СтрокаТабличнойЧасти.ДобавитьВДокумент    = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент),    0, СтрокаТабличнойЧасти.ДобавитьВДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТоварыНаСкладе.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабличноеПоле = Товары Тогда
		СтрокаХарактеристика = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика = "";
	КонецЕсли;

	
	//сводная таблица: свободный остаток в разрезе складов без учета заказов
	ТабСвобОстатки = ТоварыНаСкладе.Скопировать();
	ТабСвобОстатки.Свернуть("Номенклатура" + СтрокаХарактеристика + ",ПриоритетПоСкладам, Склад, МеткаОстаткиПоСкладу,СвободныйОстаток");
	
	ТоварыПоЗаказу = ТабличноеПоле.Скопировать();
	

	ТоварыНаСкладе.Свернуть("Номенклатура" + СтрокаХарактеристика + ", ЗаказПокупателя, ПриоритетПоСкладам, Склад, РезервПоЗаказу, СвободныйОстаток, Пометка, МеткаОстаткиПоСкладу, Код, Артикул, ЕдиницаИзмерения, Запланировано, Заполнено, ЗаполненоИзРезерва, ОсталосьОтгрузить, МожноОтгрузить, ДобавитьВДокумент, ОстатокПоОрганизации, ФлагЗаполнено");

	// Выберем строки из таблицы потребностей по заказу
	Для Каждого СтрокаПоЗаказу ИЗ ТоварыПоЗаказу Цикл
		Если СтрокаПоЗаказу.Пометка Тогда
			ОсталосьОтгрузить = СтрокаПоЗаказу.ОсталосьОтгрузить;
			Если мЧастичноеЗаполнение Тогда
				ОсталосьОтгрузить = ОсталосьОтгрузить - СтрокаПоЗаказу.Заполнено;
			КонецЕсли;
			Если ОсталосьОтгрузить <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);
			СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу", истина);
			Если ТабличноеПоле = Товары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);
			КонецЕсли;

			СтрокиПоСкладу = ТоварыНаСкладе.НайтиСтроки(СтруктураПоиска);

			// Выберем строки из таблицы остатков по складам 
			Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
                Если не СтрокаПоСкладу.Пометка Тогда
					Продолжить;
				КонецЕсли;

				Если СтрокаПоСкладу.СвободныйОстаток > 0 Тогда 
					// Здесь на каждую строку по заказам добавим строки остатков по складам
						
					СписокСкладов = Новый СписокЗначений;
					Если ЗаполнениеСкладов <> 3 Тогда // По складу из шапки документа реализации
						СписокСкладов.Добавить(СкладИзШапки);
					КонецЕсли;
					Если ЗаполнениеСкладов <> 2 Тогда // По складам из шапок заказов
						Если ТипЗнч(СтрокаПоЗаказу.Склад) = Тип("СправочникСсылка.Склады") Тогда
							СписокСкладов.Добавить(СтрокаПоЗаказу.Склад);
						Иначе
							ДобавитьВСписокСкладыИзГруппыДоступности(СтрокаПоЗаказу.Склад,СписокСкладов);
						КонецЕсли;
					КонецЕсли;
						
					// Ограничим таблицу остатков списком доступных для этого заказа складов
					Если СписокСкладов.НайтиПоЗначению(СтрокаПоСкладу.Склад) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
						
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);
					Если ТабличноеПоле = Товары Тогда
						СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);
					КонецЕсли;
					СтруктураПоиска.Вставить("ЗаказПокупателя", СтрокаПоЗаказу.ЗаказПокупателя);
					СтруктураПоиска.Вставить("Склад",           СтрокаПоСкладу.Склад);
						
					// Выберем строки с резервами по заказу
					СтрокиПоРезервам = ТоварыНаСкладе.НайтиСтроки(СтруктураПоиска);

					НайденаСтрока = Ложь;
					Для Каждого СтрокаПоРезервам Из СтрокиПоРезервам Цикл
						Если СтрокаПоРезервам.Склад = СтрокаПоСкладу.Склад Тогда
							// Если строка с этим складом есть, не добавляем
							НайденаСтрока = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					// Добавим строку с остатками по складу
					Если НЕ НайденаСтрока Тогда
						НоваяСтрока = ТоварыНаСкладе.Вставить(0);
						НоваяСтрока.Пометка              = Истина;
						НоваяСтрока.ЗаказПокупателя      = СтрокаПоЗаказу.ЗаказПокупателя;
						НоваяСтрока.Код                  = СтрокаПоСкладу.Код;
						НоваяСтрока.Артикул              = СтрокаПоСкладу.Артикул;
						НоваяСтрока.Номенклатура         = СтрокаПоСкладу.Номенклатура;
						Если ТабличноеПоле = Товары Тогда
							НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаПоСкладу.ХарактеристикаНоменклатуры;
						КонецЕсли;
						НоваяСтрока.Склад                = СтрокаПоСкладу.Склад;
						НоваяСтрока.ЕдиницаИзмерения     = СтрокаПоСкладу.ЕдиницаИзмерения;
						НоваяСтрока.ДобавитьВДокумент    = 0;
						НоваяСтрока.Запланировано        = 0;
						НоваяСтрока.Заполнено            = 0;
						НоваяСтрока.ЗаполненоИзРезерва   = 0;
						НоваяСтрока.ОсталосьОтгрузить    = 0;
						НоваяСтрока.РезервПоЗаказу       = 0;
						НоваяСтрока.СвободныйОстаток     = СтрокаПоСкладу.СвободныйОстаток;
						НоваяСтрока.МожноОтгрузить       = 0;
						НоваяСтрока.ОстатокПоОрганизации = 0;
						НоваяСтрока.МеткаОстаткиПоСкладу = Истина;
						НоваяСтрока.ПриоритетПоСкладам   = СтрокаПоСкладу.ПриоритетПоСкладам;
						НоваяСтрока.ФлагЗаполнено        = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);
			СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу", истина);
			Если ТабличноеПоле = Товары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);
			КонецЕсли;

			СтруктураПоиска.Вставить("ЗаказПокупателя", СтрокаПоЗаказу.ЗаказПокупателя);

			СтрокиПоСкладу = ТоварыНаСкладе.НайтиСтроки(СтруктураПоиска);

			// Переберем строки с резервами
			Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
				Если ОсталосьОтгрузить <= 0 Тогда
					Прервать;
				КонецЕсли;
				Если не СтрокаПоСкладу.Пометка Тогда
					Продолжить;
				КонецЕсли;

				// Здесь заполним реквизит ДобавитьВДокумент по складам с резервами
				РезервПоЗаказу = СтрокаПоСкладу.РезервПоЗаказу - СтрокаПоЗаказу.ЗаполненоИзРезерва;
				Если ЗначениеЗаполнено(СтрокаПоСкладу.ЗаказПокупателя) 
					И РезервПоЗаказу > 0 Тогда
					
					КолвоДобавить     = Мин(ОсталосьОтгрузить, РезервПоЗаказу);
					ОсталосьОтгрузить = ОсталосьОтгрузить - КолвоДобавить;

					Если КолвоДобавить > 0 И СтрокаПоСкладу.Пометка Тогда
						СтрокаПоСкладу.ДобавитьВДокумент = КолвоДобавить;
						СтрокаПоСкладу.ЗаполненоИзРезерва = СтрокаПоСкладу.ЗаполненоИзРезерва + СтрокаПоЗаказу.ЗаполненоИзРезерва;
						СтрокаПоСкладу.Заполнено = СтрокаПоСкладу.Заполнено + СтрокаПоЗаказу.Заполнено;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			// Переберем строки из таблицы остатков по складам 
			Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
				Если ОсталосьОтгрузить <= 0 Тогда
					Прервать;
				КонецЕсли;
                Если не СтрокаПоСкладу.Пометка Тогда
					Продолжить;
				КонецЕсли;

				
				// Если остатка хватает, то чтобы не делить по складам, попытаемся 
				// все количество по заказу отгрузить с этого склада (независимо от приоритетов складов) 
				РезервПоЗаказу = СтрокаПоСкладу.РезервПоЗаказу;
				Если ЗначениеЗаполнено(СтрокаПоСкладу.ЗаказПокупателя) 
					И РезервПоЗаказу > 0 Тогда
					
					СтруктураПоискаСклад = Новый Структура;
					СтруктураПоискаСклад.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);
					СтруктураПоискаСклад.Вставить("МеткаОстаткиПоСкладу", истина);
					СтруктураПоискаСклад.Вставить("Склад", СтрокаПоСкладу.Склад);
					
					Если ТабличноеПоле = Товары Тогда
						СтруктураПоискаСклад.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);
					КонецЕсли;
					
					СтрокиПоСкладу_СвобОстатки = ТабСвобОстатки.НайтиСтроки(СтруктураПоискаСклад);
                    СвободныйОстатокПоСкладу = 0;
					Если СтрокиПоСкладу_СвобОстатки.Количество()>0 Тогда
						Строка_СвобОстаток = СтрокиПоСкладу_СвобОстатки[0];
						СвободныйОстатокПоСкладу = Строка_СвобОстаток.СвободныйОстаток
					КонецЕсли;
					Если СвободныйОстатокПоСкладу>0 Тогда
						СвободныйОстаток  = СвободныйОстатокПоСкладу - (СтрокаПоЗаказу.Заполнено - СтрокаПоЗаказу.ЗаполненоИзРезерва);
						КолвоДобавить     = Мин(ОсталосьОтгрузить, СвободныйОстаток);
						ОсталосьОтгрузить = ОсталосьОтгрузить - КолвоДобавить;

						Если КолвоДобавить > 0 И СтрокаПоСкладу.Пометка Тогда
							Если СтрокаПоСкладу.ДобавитьВДокумент=0 Тогда
								СтрокаПоСкладу.ЗаполненоИзРезерва = СтрокаПоСкладу.ЗаполненоИзРезерва + СтрокаПоЗаказу.ЗаполненоИзРезерва;
								СтрокаПоСкладу.Заполнено = СтрокаПоСкладу.Заполнено + СтрокаПоЗаказу.Заполнено;
							КонецЕсли;
							
							СтрокаПоСкладу.ДобавитьВДокумент = СтрокаПоСкладу.ДобавитьВДокумент + КолвоДобавить;
							Строка_СвобОстаток.СвободныйОстаток = Строка_СвобОстаток.СвободныйОстаток - КолвоДобавить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Заполним приоритеты складов в строках
			Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
				Если СтрокаПоСкладу.ЗаказПокупателя = NULL Тогда
					Продолжить;
				КонецЕсли;
				мСкладЗаказаСоответствуетСкладуОстатков = ложь;
				Если ЗаполнениеСкладов <> 2 Тогда
					Если ТипЗнч(СтрокаПоСкладу.ЗаказПокупателя.СкладГруппа)=Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
						МассивСкладов = мСоответствиеГруппыДоступностиСкладов.Получить(СтрокаПоСкладу.ЗаказПокупателя.СкладГруппа);
						Если МассивСкладов<>неопределено Тогда
							мСкладЗаказаСоответствуетСкладуОстатков = МассивСкладов.Найти(СтрокаПоСкладу.Склад)<>неопределено;
						КонецЕсли;
					ИначеЕсли СтрокаПоСкладу.Склад = СтрокаПоСкладу.ЗаказПокупателя.СкладГруппа Тогда
						мСкладЗаказаСоответствуетСкладуОстатков = истина;
					КонецЕсли;
				КонецЕсли;
				
				Если (ЗаполнениеСкладов = 1 ИЛИ ЗаполнениеСкладов = 2)
					И СтрокаПоСкладу.Склад = СкладИзШапки Тогда
					
					СтрокаПоСкладу.ПриоритетПоСкладам = 1;
					
				ИначеЕсли (ЗаполнениеСкладов = 3 ИЛИ ЗаполнениеСкладов = 4)
					И мСкладЗаказаСоответствуетСкладуОстатков Тогда
					
					СтрокаПоСкладу.ПриоритетПоСкладам = 1;
					
				ИначеЕсли ЗаполнениеСкладов = 4
					И СтрокаПоСкладу.Склад = СкладИзШапки Тогда
					
					СтрокаПоСкладу.ПриоритетПоСкладам = 2;
					
				ИначеЕсли ЗаполнениеСкладов = 1 
					И мСкладЗаказаСоответствуетСкладуОстатков Тогда
					
					СтрокаПоСкладу.ПриоритетПоСкладам = 2;
					
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(СтрокаПоСкладу.ПриоритетПоСкладам) Тогда
					СтрокаПоСкладу.ПриоритетПоСкладам = 3;
				КонецЕсли;
			КонецЦикла;
			
			Для Приоритет = 1 По 2 Цикл
			
				// Переберем строки из таблицы остатков по складам 
				Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
					Если ОсталосьОтгрузить <= 0 Тогда
						Прервать;
					КонецЕсли;
					// Пропускаем строки, несоответствующие текущему приоритету складов
					Если Приоритет <> СтрокаПоСкладу.ПриоритетПоСкладам Тогда
						Продолжить;
					КонецЕсли;
					
					// Здесь заполним реквизит ДобавитьВДокумент по остальным доступным складам (без резервов)
					РезервПоЗаказу = СтрокаПоСкладу.РезервПоЗаказу;
					Если ЗначениеЗаполнено(СтрокаПоСкладу.ЗаказПокупателя) 
						И НЕ РезервПоЗаказу > 0 Тогда
						
						СтруктураПоискаСклад = Новый Структура;
						СтруктураПоискаСклад.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);
						СтруктураПоискаСклад.Вставить("МеткаОстаткиПоСкладу", истина);
						СтруктураПоискаСклад.Вставить("Склад", СтрокаПоСкладу.Склад);
						
						Если ТабличноеПоле = Товары Тогда
							СтруктураПоискаСклад.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);
						КонецЕсли;
						
						СтрокиПоСкладу_СвобОстатки = ТабСвобОстатки.НайтиСтроки(СтруктураПоискаСклад);
						СвободныйОстатокПоСкладу = 0;
						Если СтрокиПоСкладу_СвобОстатки.Количество()>0 Тогда
							Строка_СвобОстаток = СтрокиПоСкладу_СвобОстатки[0];
							СвободныйОстатокПоСкладу = Строка_СвобОстаток.СвободныйОстаток
						КонецЕсли;
                        Если СвободныйОстатокПоСкладу>0 Тогда
						
							КолвоДобавить     = Мин(ОсталосьОтгрузить, СвободныйОстатокПоСкладу);
							ОсталосьОтгрузить = ОсталосьОтгрузить - КолвоДобавить;

							Если КолвоДобавить > 0 И СтрокаПоСкладу.Пометка Тогда
								СтрокаПоСкладу.ДобавитьВДокумент = КолвоДобавить;
								Строка_СвобОстаток.СвободныйОстаток = Строка_СвобОстаток.СвободныйОстаток - КолвоДобавить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
			
	// Удалим строки с пустым значением реквизита ЗаказПокупателя, они больше не нужны
	КолвоСтрок = ТоварыНаСкладе.Количество();
	Для Индекс = 1 По КолвоСтрок Цикл
		Если НЕ ЗначениеЗаполнено(ТоварыНаСкладе[КолвоСтрок - Индекс].ЗаказПокупателя) Тогда
			ТоварыНаСкладе.Удалить(КолвоСтрок - Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим таблицу остатков в табличное поле
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТоварыНаСкладе, ТабличноеПоле);
	
	ТабличноеПоле.Сортировать("Номенклатура" + СтрокаХарактеристика + ", ЗаказПокупателя, МеткаОстаткиПоСкладу, ПриоритетПоСкладам, Склад");

КонецПроцедуры // ЗаполнитьСтолбецДобавитьВДокументПоСкладам()

// Процедура обновляет реквизит "ДобавитьВДокумент" в табличной части
//
Процедура ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по складам
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя",                ТекущаяСтрока.ЗаказПокупателя);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Истина);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	ВсегоДобавить  = 0;

	Для Каждого СтрокаПоСкладу Из СтрокиПоСкладу Цикл
		ВсегоДобавить = ВсегоДобавить + СтрокаПоСкладу.ДобавитьВДокумент;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПокупателя",                ТекущаяСтрока.ЗаказПокупателя);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаОстаткиПоСкладу",           Ложь);

	СтрокиПоСкладу = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПоСкладу.Количество() > 0 Тогда
		СтрокиПоСкладу[0].ДобавитьВДокумент = ВсегоДобавить;
	КонецЕсли;

КонецПроцедуры

// Устанавливает видимость полей ввода в зависимости от настроек в форме.
//
Процедура УстановитьВидимостьЭлементовНастройки()
	
	// Поле Размещение резервов видимо когда Наличие резервов установлено как С резервами
	ЭлементыФормы.ПолеНастройкиРазмещениеРезервов.Видимость = ФлагВидимостиРазмещениеРезервов;
	
	// Поле Дата отгрузки видимо когда Меньше/Равна/Больше
	ЭлементыФормы.ПолеДатаОтгрузки.Видимость = ФлагВидимостиДатыОтгрузки;
	
	// Поле ввода Просрочено дней видимо только когда Просрочен
	ЭлементыФормы.НадписьОтгрузкаДней.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	ЭлементыФормы.ПолеПросроченоДнейОтгрузки.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	ЭлементыФормы.НадписьОтгрузкаНа.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	
	// Поле Дата оплаты видимо когда Меньше/Равна/Больше
	ЭлементыФормы.ПолеДатаОплаты.Видимость = ФлагВидимостиДатыОплаты;
	
	// Поле ввода Просрочено дней видимо только когда Просрочен
	ЭлементыФормы.НадписьОплатаДней.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	ЭлементыФормы.ПолеПросроченоДнейОплаты.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	ЭлементыФормы.НадписьОплатаНа.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	
КонецПроцедуры // УстановитьВидимостьЭлементовНастройки()

// Устанавливает доступность полей ввода в зависимости от настроек в форме.
//
Процедура УстановитьДоступностьЭлементовНастройки()
	
	ЭлементыФормы.ПолеНастройкиНаличиеРезервов.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСостояниеОплаты.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСрокОплатыСравнение.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСостояниеОтгрузки.Доступность = ФлагДоступностиИзмененияДляОтгрузки;
	ЭлементыФормы.ПолеНастройкиСрокОтгрузкиСравнение.Доступность = ФлагДоступностиИзмененияНастроек;

КонецПроцедуры // УстановитьДоступностьЭлементовНастройки()

// Устанавливает доступность кнопок в зависимости от наличия документов в таблице.
//
Процедура УстановитьДоступностьКнопокПанелиЗаказов()
	
	// При пустом ТабличноеПолеЗаказы не должны быть доступны кнопки действий над заказами.
	Если ТабличноеПолеЗаказы.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеАнализ.Доступность       = Истина;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВключитьВсе.Доступность  = Истина;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВыключитьВсе.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеАнализ.Доступность       = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВключитьВсе.Доступность  = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВыключитьВсе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопокПанелиЗаказов()

// Устанавливает доступность кнопок в зависимости от наличия номенклатуры в таблицах.
//
Процедура УстановитьДоступностьКнопокПанелейТабЧастей()

	// При пустом табличное поле не должны быть доступны кнопки действий.
	Если Товары.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельТовары.Доступность = Ложь;
	КонецЕсли;

	Если Услуги.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельУслуги.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельУслуги.Доступность = Ложь;
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопокПанелейТабЧастей()

// Устанавливает список "Вариантов отбора".
//
Процедура УстановитьСтруктуруВариантовОтбора()
	
	// Установить вариант отбора заказов
	ВариантОтбора = ЗаполнитьСписокВариантовОтбора();
	
	ПолеНастройкиВариантОтбораПриИзменении(ЭлементыФормы.ПолеНастройкиВариантОтбора);
	
КонецПроцедуры // УстановитьСтруктуруВариантовОтбора()

// Вызывается при изменении настроек отбора в форме.
//
Процедура ПриИзмененииНастроекПоУмолчанию()

	ПолеНастройкиНаличиеРезервовПриИзменении(ЭлементыФормы.ПолеНастройкиНаличиеРезервов);
	ПолеНастройкиСрокОплатыСравнениеПриИзменении(ЭлементыФормы.ПолеНастройкиСрокОплатыСравнение);
	ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении(ЭлементыФормы.ПолеНастройкиСрокОтгрузкиСравнение);
	
	Если ВариантОтбора = 1 Тогда
		// Для данного вида заполнения доступны для изменения настройки условий отгрузки
		ФлагДоступностиИзмененияДляОтгрузки = Истина;
	ИначеЕсли ВариантОтбора = 2 Тогда
		// Для данного вида заполнения недоступны для изменения настройки условий отгрузки
		ФлагДоступностиИзмененияДляОтгрузки = Ложь;
	КонецЕсли;
	
	ФлагДоступностиИзмененияНастроек = Истина;
	
	УстановитьДоступностьЭлементовНастройки();
			
КонецПроцедуры // ПриИзмененииНастроекПоУмолчанию()

// Заполнить список вариантов отбора.
// и вернуть Вид заполнения по умолчанию для данного Вида операции.
//
// Возвращаемое значение:
//  Число - Вид заполнения по умолчанию для данного Вида операции
//
Функция ЗаполнитьСписокВариантовОтбора()
	
	ЭлементыФормы.ПолеНастройкиВариантОтбора.СписокВыбора.Очистить();
	
	ЭлементыФормы.ПолеНастройкиВариантОтбора.СписокВыбора.Добавить(1, "Произвольный отбор");
	ЭлементыФормы.ПолеНастройкиВариантОтбора.СписокВыбора.Добавить(2, "Неисполненные заказы");

	Возврат 2;

КонецФункции // ЗаполнитьСписокВариантовОтбора()

// Заполняет установки по умолчанию для отбора по всем возможным условиям.
//
Процедура УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора()
	
	// Не важно
	НаличиеРезервов	=1;
	
	// Не важно
	СостояниеОплаты = 1;
	
	// Не важно
	СостояниеОтгрузки = 1;
	
	// Не важно
	СрокОплатыСравнение = 1;
	// Не важно
	СрокОтгрузкиСравнение = 1;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВариантОтбора));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОплаты = ЗначениеПользователя;
	Иначе
		// По умолчанию 1 день
		ПросроченоДнейОплаты = 1;
	КонецЕсли;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВариантОтбора));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОтгрузки = ЗначениеПользователя;
	Иначе
		// По умолчанию 1 день
		ПросроченоДнейОтгрузки = 1;
	КонецЕсли;
	
	// По умолчанию Текущая дата
	ДатаОплаты = ТекущаяДата();
	ДатаОтгрузки = ТекущаяДата();
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора()

// Заполняет установки по умолчанию для отбора "Неисполненных" заказов.
//
Процедура УстановитьНастройкиПоУмолчаниюДляНеисполненныхЗаказов()

	// Без резервов
	НаличиеРезервов = 1;
	
	// Оплачен полностью
	СостояниеОплаты = 1;
	
	// Отгружен полностью
	СостояниеОтгрузки = 2;
	
	// Срок оплаты Не важно
	СрокОплатыСравнение = 1;
	// Срок отгрузки Меньше
	СрокОтгрузкиСравнение = 3;
	
	// По умолчанию 1 день (в отборе не участвуют)
	ПросроченоДнейОплаты = 1;
	ПросроченоДнейОтгрузки = 1;
	
	// По умолчанию Текущая дата (в отборе не участвуют)
	ДатаОплаты = ТекущаяДата();
	// Дата документа плюс 1 день
	ДатаОтгрузки = ДокументОбъект.Дата + 24*60*60;
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляНеисполненныхЗаказов()

// Создает запрос и заполняет начальные установки построителя отбора для заказов.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета)

	// Запрос для отбора
	ТекстЗапроса = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	истина 																	КАК Переносить,
	|	ложь 																	КАК НеЗаполнять,
	|	ВЫБОР КОГДА ЕстьNULL(ЗаказыПокупателейОстатки.КоличествоОстаток,0)>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										        КАК ЗаказыКоличество,
	|	ВЫБОР КОГДА ЕстьNULL(ЗаказыПокупателейТара.КоличествоОстаток,0)>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										        КАК ТараКоличество,
	|	ВЫБОР КОГДА ЕстьNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток,0)>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										        КАК РезервыКоличество,
	|	ВЫБОР КОГДА ЕстьNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток,0)>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										        КАК РазмещенияКоличество,
	|	ЕстьNULL(ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток,0)         КАК ЗаказыОстаток,
	|	ЕстьNULL(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0)     КАК РасчетыОстаток,
	|
	|	ДокументыЗаказПокупателя.Ссылка,
	|	ДокументыЗаказПокупателя.Дата,
	|	ДокументыЗаказПокупателя.Номер,
	|	ДокументыЗаказПокупателя.Контрагент,
	|	ДокументыЗаказПокупателя.ДоговорКонтрагента,
	|	ДокументыЗаказПокупателя.КонтактноеЛицоКонтрагента,
	|	ДокументыЗаказПокупателя.Организация,
	|	ДокументыЗаказПокупателя.Подразделение,
	|	ДокументыЗаказПокупателя.СкладГруппа,
	|	ДокументыЗаказПокупателя.Ответственный,
	|	ДокументыЗаказПокупателя.СуммаДокумента,
	|	ДокументыЗаказПокупателя.ВалютаДокумента,
	|	ДокументыЗаказПокупателя.ТипЦен,
	|	ДокументыЗаказПокупателя.ДатаОплаты,
	|	ДокументыЗаказПокупателя.ДатаОтгрузки,
	|	ДокументыЗаказПокупателя.УсловиеПродаж,
	|	ДокументыЗаказПокупателя.Грузополучатель,
	|	ДокументыЗаказПокупателя.ДисконтнаяКарта,
	|	ДокументыЗаказПокупателя.Проведен
	|
	|{ВЫБРАТЬ 
	|	ДокументыЗаказПокупателя.Контрагент.* КАК Контрагент,
	|	ДокументыЗаказПокупателя.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	ДокументыЗаказПокупателя.Организация.* КАК Организация,
	|	ДокументыЗаказПокупателя.КонтактноеЛицоКонтрагента.* КАК КонтактноеЛицоКонтрагента,
	|	ДокументыЗаказПокупателя.Подразделение.* КАК Подразделение,
	|	ДокументыЗаказПокупателя.СкладГруппа.* КАК СкладГруппа,
	|	ДокументыЗаказПокупателя.Ответственный.* КАК Ответственный,
	|	ДокументыЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	ДокументыЗаказПокупателя.ТипЦен.* КАК ТипЦен,
	|	ДокументыЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументыЗаказПокупателя.УсловиеПродаж.* КАК УсловиеПродаж,
	|	ДокументыЗаказПокупателя.Грузополучатель.* КАК Грузополучатель,
	|	ДокументыЗаказПокупателя.ДисконтнаяКарта.* КАК ДисконтнаяКарта
	|//СВОЙСТВА
	|}
	|
	|ИЗ
	|	Документ.ЗаказПокупателя                                    КАК ДокументыЗаказПокупателя
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, СтатусПартии <> &СтатусТары) 
	|		                                                        КАК ЗаказыПокупателейОстатки
	|		ПО ДокументыЗаказПокупателя.Ссылка = ЗаказыПокупателейОстатки.ЗаказПокупателя
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПокупателей.Остатки(, СтатусПартии = &СтатусТары) 
	|		                                                        КАК ЗаказыПокупателейТара
	|		ПО ДокументыЗаказПокупателя.Ссылка = ЗаказыПокупателейТара.ЗаказПокупателя
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки         КАК РасчетыСКонтрагентамиОстатки
	|		ПО ДокументыЗаказПокупателя.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
	|
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|       РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки       КАК ТоварыВРезервеНаСкладахОстатки
	|		ПО ДокументыЗаказПокупателя.Ссылка = ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
	|
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки  КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО ДокументыЗаказПокупателя.Ссылка = РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя
	|
	|//СОЕДИНЕНИЯ
	|
	|	{ ГДЕ 
	|	 ДокументыЗаказПокупателя.Контрагент.* КАК Контрагент,
	|	 ДокументыЗаказПокупателя.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	 ДокументыЗаказПокупателя.Организация.* КАК Организация,
	|	 ДокументыЗаказПокупателя.КонтактноеЛицоКонтрагента.* КАК КонтактноеЛицоКонтрагента,
	|	 ДокументыЗаказПокупателя.СкладГруппа.* КАК СкладГруппа,
	|	 ДокументыЗаказПокупателя.Подразделение.* КАК Подразделение,
	|	 ДокументыЗаказПокупателя.Ответственный.* КАК Ответственный,
	|	 ДокументыЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	|	 ДокументыЗаказПокупателя.ТипЦен.* КАК ТипЦен,
	|	 ДокументыЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	 ДокументыЗаказПокупателя.УсловиеПродаж.* КАК УсловиеПродаж,
	|	 ДокументыЗаказПокупателя.Грузополучатель.* КАК Грузополучатель,
	|	 ДокументыЗаказПокупателя.ДисконтнаяКарта.* КАК ДисконтнаяКарта
	|//СВОЙСТВА
	|//КАТЕГОРИИ	
	|	}
	|
	|ГДЕ
	|	(ДокументыЗаказПокупателя.Проведен) И
	|
	|	((ДокументыЗаказПокупателя.Дата >= &ДатаНач) ИЛИ (&ДатаНач = &ПустаяДата)) И
	|	((ДокументыЗаказПокупателя.Дата <= &ДатаКон) ИЛИ (&ДатаКон = &ПустаяДата)) И
	|
	|	(	((&СрокОплатыСравнение = 6) И (ДокументыЗаказПокупателя.ДатаОплаты = &ПустаяДата)) ИЛИ
	|		((&СрокОплатыСравнение = 5) И (ДокументыЗаказПокупателя.ДатаОплаты > &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 4) И (ДокументыЗаказПокупателя.ДатаОплаты = &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 3) И (ДокументыЗаказПокупателя.ДатаОплаты < &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 2) И (ДокументыЗаказПокупателя.ДатаОплаты <= &ТребуемаяДатаОплаты)) ИЛИ
	|		(&СрокОплатыСравнение = 1)
	|	) И
	|
	|	(	((&СрокОтгрузкиСравнение = 6) И (ДокументыЗаказПокупателя.ДатаОтгрузки = &ПустаяДата)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 5) И (ДокументыЗаказПокупателя.ДатаОтгрузки > &ДатаОтгрузки)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 4) И (ДокументыЗаказПокупателя.ДатаОтгрузки = &ДатаОтгрузки)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 3) И (ДокументыЗаказПокупателя.ДатаОтгрузки < &ДатаОтгрузки)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 2) И (ДокументыЗаказПокупателя.ДатаОтгрузки <= &ТребуемаяДатаОтгрузки)) ИЛИ
	|		(&СрокОтгрузкиСравнение = 1)
	|	) И
	|
	|	(	((&СостояниеОплаты = 3) И ((РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток IS NULL) ИЛИ (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0))) ИЛИ
	|		((&СостояниеОплаты = 2) И (РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0)) ИЛИ
	|		(&СостояниеОплаты = 1)
	|	) И
	|
	|	(	((&СостояниеОтгрузки = 3) И ((ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток IS NULL) ИЛИ (ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток < 0)) И ((ЗаказыПокупателейОстатки.КоличествоОстаток IS NULL) ИЛИ (ЗаказыПокупателейОстатки.КоличествоОстаток < 0)) И ((ЗаказыПокупателейТара.КоличествоОстаток IS NULL) ИЛИ (ЗаказыПокупателейТара.КоличествоОстаток < 0))) ИЛИ
	|		((&СостояниеОтгрузки = 2) И ((ЗаказыПокупателейОстатки.СуммаВзаиморасчетовОстаток > 0) ИЛИ (ЗаказыПокупателейОстатки.КоличествоОстаток > 0) ИЛИ (ЗаказыПокупателейТара.КоличествоОстаток > 0))) ИЛИ
	|		(&СостояниеОтгрузки = 1)
	|	) И
	|
	|	(	((&НаличиеРезервов = 3) И (&РазмещениеРезервов = 3) И ((ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток IS NULL) ИЛИ (ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток < 0)) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРезервов = 3) И (&РазмещениеРезервов = 2) И (ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток > 0) И ((РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток IS NULL) ИЛИ (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток < 0))) ИЛИ
	|		((&НаличиеРезервов = 3) И (&РазмещениеРезервов = 1) И ((ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток > 0) ИЛИ (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0))) ИЛИ
	|		((&НаличиеРезервов = 2) И ((ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток IS NULL) ИЛИ (ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток < 0)) И ((РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток IS NULL) ИЛИ (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток < 0))) ИЛИ
	|		(&НаличиеРезервов = 1)
	|	)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыЗаказПокупателя.Дата, ДокументыЗаказПокупателя.Номер
	|";

	СтруктураПредставлениеПолей = Новый Структура;
	
	СтруктураПредставлениеПолей.Вставить("Контрагент",                  "Контрагент");
	СтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента",          "Договор");
	СтруктураПредставлениеПолей.Вставить("Организация",                 "Организация");
	СтруктураПредставлениеПолей.Вставить("КонтактноеЛицоКонтрагента",   "Контактное лицо");
	СтруктураПредставлениеПолей.Вставить("Подразделение",               "Подразделение");
	СтруктураПредставлениеПолей.Вставить("СкладГруппа",                 "Склад/группа");
	СтруктураПредставлениеПолей.Вставить("Ответственный",               "Ответственный");
	СтруктураПредставлениеПолей.Вставить("СуммаДокумента",              "Сумма документа");
	СтруктураПредставлениеПолей.Вставить("ТипЦен",                      "Тип цен");
	СтруктураПредставлениеПолей.Вставить("ВалютаДокумента",             "Валюта документа");
	СтруктураПредставлениеПолей.Вставить("УсловиеПродаж",               "Условие продаж");
	СтруктураПредставлениеПолей.Вставить("Грузополучатель",             "Грузополучатель");
	СтруктураПредставлениеПолей.Вставить("ДисконтнаяКарта",             "Дисконтная карта");
	
	Если ИспользоватьСвойстваИКатегории Тогда

        СоответствиеНазначений = Новый Соответствие;
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		//ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		ТаблицаПолей.Очистить();
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПокупателя.Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПокупателя.Контрагент";
		НоваяСтрока.Представление = "Грузополучатель";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПокупателя.КонтактноеЛицоКонтрагента";
		НоваяСтрока.Представление = "КонтактноеЛицоКонтрагента";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛица;
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА", "//КАТЕГОРИИ", "//СОЕДИНЕНИЯ", , СтруктураДляОтбораПоКатегориям);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) = Ложь Тогда
		ПостроительОтчета.Текст = ТекстЗапроса;
	КонецЕсли;
	
	УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, СоответствиеНазначений, СтруктураПредставлениеПолей);
	
	// Заполнить отбор построителя по умолчанию
	Если НЕ(ПостроительОтчета.Отбор.Количество() > 0) Тогда
		Если НастройкиИзДокумента Тогда
			ПостроительОтчета.УстановитьНастройки(НастройкиОтбора);
		Иначе
			ЗаполнитьОтборПостроителя(ПостроительОтчета);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить представление полей построителя по именам
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // ИнициироватьПостроительДляОтбораЗаказов()

// Заполняет переменные построителя выбранными в форме значениями.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ЗаполнитьПараметрыПостроителя(ПостроительОтчета)
	
	// Заполним параметры построителя
	ПостроительОтчета.Параметры.Вставить("НаличиеРезервов",       НаличиеРезервов);
	ПостроительОтчета.Параметры.Вставить("РазмещениеРезервов",    РазмещениеРезервов);
	ПостроительОтчета.Параметры.Вставить("СостояниеОплаты",       СостояниеОплаты);
	ПостроительОтчета.Параметры.Вставить("СостояниеОтгрузки",     СостояниеОтгрузки);
	ПостроительОтчета.Параметры.Вставить("СрокОплатыСравнение",   СрокОплатыСравнение);
	ПостроительОтчета.Параметры.Вставить("СрокОтгрузкиСравнение", СрокОтгрузкиСравнение);
	
	ПостроительОтчета.Параметры.Вставить("СтатусТары",   Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач",      ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаКон",      ДатаОкончания);
	ПостроительОтчета.Параметры.Вставить("ДатаОплаты",   ДатаОплаты);
	ПостроительОтчета.Параметры.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	ПостроительОтчета.Параметры.Вставить("ТекущаяДата",  ТекущаяДата());
	ПостроительОтчета.Параметры.Вставить("ПустаяДата",   Дата('00010101'));
	
	ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаОплаты",   НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОплаты));
	ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаОтгрузки", НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОтгрузки));

КонецПроцедуры // ЗаполнитьПараметрыПостроителя()

// Заполняет отбор построителя по умолчанию.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ЗаполнитьОтборПостроителя(ПостроительОтчета)
	
	// Добавим поля отбора по умолчанию
	Поле = ПостроительОтчета.Отбор.Добавить("Контрагент", "Контрагент", "Контрагент");
	
	Поле.Установить(ДокументОбъект.Контрагент);
	
	Поле = ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента", "ДоговорКонтрагента", "Договор");
	
	Поле.Установить(ДокументОбъект.ДоговорКонтрагента);
	
	Поле = ПостроительОтчета.Отбор.Добавить("Организация", "Организация", "Организация");
	
	Поле.Установить(ДокументОбъект.Организация);
	
	Поле = ПостроительОтчета.Отбор.Добавить("ВалютаДокумента", "ВалютаДокумента", "Валюта документа");
	
	Поле.Установить(ДокументОбъект.ВалютаДокумента);
	
	Поле = ПостроительОтчета.Отбор.Добавить("Ответственный", "Ответственный", "Ответственный");
	Поле.Установить(ДокументОбъект.Ответственный.Ссылка);
	Поле.Использование = Ложь;

	Поле = ПостроительОтчета.Отбор.Добавить("СкладГруппа", "СкладГруппа", "Склад/группа");
	Поле.Использование = Ложь;
	
КонецПроцедуры // ЗаполнитьОтборПостроителя()

// Устанавливает видимость указанной страницы.
//
Процедура ПерейтиНаСтраницу(ИмяСтраницы)
	
	Если ИмяСтраницы = "Страница1" Тогда
		Панель.Страницы.Страница1.Видимость = Истина;
		Панель.Страницы.Страница2.Видимость = Ложь;
		Панель.ТекущаяСтраница = Панель.Страницы.Страница1;
		ЭтаФорма.Заголовок = "Отобрать заказы покупателей";
	Иначе
		Панель.Страницы.Страница1.Видимость = Ложь;
		Панель.Страницы.Страница2.Видимость = Истина;
		Панель.ТекущаяСтраница = Панель.Страницы.Страница2;
		ЭтаФорма.Заголовок = "Заполнить по заказам покупателей";
	КонецЕсли;

КонецПроцедуры // ПерейтиНаСтраницу()

// Устанавливает доступность элементов зависимости от режима заполнения.
//
Процедура УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры()
	
	Если НеЗаполнятьТовары Тогда
		ЭлементыФормы.ФлажокТовары.Доступность = Ложь;
		ПоказыватьТовары = Ложь;
	Иначе
		ЭлементыФормы.ФлажокТовары.Доступность = Истина;
	КонецЕсли;
	
	Если НеЗаполнятьУслуги Тогда
		ЭлементыФормы.ФлажокУслуги.Доступность = Ложь;
		ПоказыватьУслуги = Ложь;
	Иначе
		ЭлементыФормы.ФлажокУслуги.Доступность = Истина;
	КонецЕсли;
	
	Если мИспользоватьТару Тогда
		ЭлементыФормы.ФлажокТара.Видимость = Истина;
		Если НеЗаполнятьТару Тогда
			ЭлементыФормы.ФлажокТара.Доступность = Ложь;
			ПоказыватьТару = Ложь;
		Иначе
			ЭлементыФормы.ФлажокТара.Доступность = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ФлажокТара.Видимость = Ложь;
		НеЗаполнятьТару = Истина;
		ПоказыватьТару = Ложь;
	КонецЕсли;
	
	Если мУказаниеСкладовВТЧ 
		И (ПоказыватьТовары ИЛИ ПоказыватьТару) Тогда 
		ЭлементыФормы.ПолеНастройкиЗаполнениеСкладов.Видимость = Истина;
		ЭлементыФормы.НадписьЗаполнениеСкладов.Видимость = Истина;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие5.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие6.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие7.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие8.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие5.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие6.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие7.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие8.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ПолеНастройкиЗаполнениеСкладов.Видимость = Ложь;
		ЭлементыФормы.НадписьЗаполнениеСкладов.Видимость = Ложь;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие5.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие6.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие7.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Действие8.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие5.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие6.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие7.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.Действие8.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры()

// Распределяет номенклатуру заказов в табличных полях Товары, Тара по складам.
//
Процедура РаспределитьНоменклатуруЗаказовПоСкладам(ТабличноеПоле)
	
	ЗапросПоСкладам = Новый Запрос;
    СписокНоменклатуры = ТабличноеПоле.ВыгрузитьКолонку("Номенклатура");
	ЗапросПоСкладам.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	ЗапросПоСкладам.УстановитьПараметр("СкладРеализации",    СкладИзШапки);
	ЗапросПоСкладам.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
	ЗапросПоСкладам.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ЗапросПоСкладам.УстановитьПараметр("ДатаОстатков", ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	ЗапросПоСкладам.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);

	ЗапросПоСкладам.Текст = "
	|ВЫБРАТЬ
	|	Истина                                               КАК Пометка,
	|	Истина                                               КАК МеткаОстаткиПоСкладу,
	|	3                                                    КАК ПриоритетПоСкладам,
	|	ОстаткиНаСкладе.Номенклатура.Код                     КАК Код,
	|	ОстаткиНаСкладе.Номенклатура.Артикул                 КАК Артикул,
	|	ОстаткиНаСкладе.Номенклатура                         КАК Номенклатура,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,"
	+ ?(ТабличноеПоле = Товары, "
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,", "") + "
	|	ОстаткиНаСкладе.Склад                                КАК Склад,
	|	0                                                    КАК Запланировано,
	|	0                                                    КАК Заполнено,
	|	0                                                    КАК ЗаполненоИзРезерва,
	|	0                                                    КАК ФлагЗаполнено,
	|	0                                                    КАК ОсталосьОтгрузить,
	|	РезервыПоЗаказам.ДокументРезерва                     КАК ЗаказПокупателя,
	|	РезервыПоЗаказам.КоличествоОстаток                   КАК РезервПоЗаказу,
	|	0                                                    КАК ОстатокПоОрганизации,
	|	ОстаткиНаСкладе.КоличествоОстаток
	|	- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
	|	- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК СвободныйОстаток,
	|	0 КАК МожноОтгрузить,
	|	0 КАК ДобавитьВДокумент
	|
	|ИЗ (ВЫБРАТЬ 
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,
	|       Склад,
	|       КоличествоОстаток
	|   ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,Номенклатура в (&СписокНоменклатуры)) 
	|	Объединить все
	|   ВЫБРАТЬ 
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,
	|       Склад,
	|       КоличествоОстаток
	|   ИЗ
	|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков,Номенклатура в (&СписокНоменклатуры)) 
	|   ) КАК ОстаткиНаСкладе
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва В (&СписокЗаказов)) КАК РезервыПоЗаказам
	|ПО
	|	ОстаткиНаСкладе.Номенклатура                 = РезервыПоЗаказам.Номенклатура"
	+ ?(ТабличноеПоле = Товары, "
	|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыПоЗаказам.ХарактеристикаНоменклатуры", "") + "
	|	И ОстаткиНаСкладе.Склад                      = РезервыПоЗаказам.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков) КАК ОстаткиВРезерве
	|ПО
	|	ОстаткиНаСкладе.Номенклатура                 = ОстаткиВРезерве.Номенклатура"
	+ ?(ТабличноеПоле = Товары, "
	|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиВРезерве.ХарактеристикаНоменклатуры", "") + "
	|	И ОстаткиНаСкладе.Склад                      = ОстаткиВРезерве.Склад
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков) КАК ОстаткиКПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура                 = ОстаткиКПередаче.Номенклатура"
	+ ?(ТабличноеПоле = Товары, "
	|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиКПередаче.ХарактеристикаНоменклатуры", "") + "
	|	И ОстаткиНаСкладе.Склад                      = ОстаткиКПередаче.Склад
	|
	|ПРАВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &ДоговорКонтрагента 
	|	                                              И ЗаказПокупателя В (&СписокЗаказов)"
	+ ?(ТабличноеПоле = Товары, "
	|	                                              И СтатусПартии <> &СтатусТары И Номенклатура.Услуга <> Истина", "
	|	                                              И СтатусПартии = &СтатусТары") + "
	|	                                              ) КАК ОстаткиЗаказ
	|ПО
	|	ОстаткиНаСкладе.Номенклатура                 = ОстаткиЗаказ.Номенклатура"
	+ ?(ТабличноеПоле = Товары, "
	|	И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиЗаказ.ХарактеристикаНоменклатуры", "") + "
	|
	|ГДЕ
	|	НЕ ОстаткиНаСкладе.Номенклатура ЕСТЬ NULL
	|
	|";

	ТоварыНаСкладе = ЗапросПоСкладам.Выполнить().Выгрузить();
	
	ЗаполнитьСтолбецДобавитьВДокументПоСкладам(ТабличноеПоле, ТоварыНаСкладе);
	
КонецПроцедуры // РаспределитьНоменклатуруЗаказовПоСкладам()

// Заполняет табличное поля Товары номенклатурой отобранных заказов.
//
Процедура ЗаполнитьКоличествоВТабличномПоле(ТабличноеПоле)

	Для Каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл

		СтрокаТабличнойЧасти.Запланировано        = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),        0, СтрокаТабличнойЧасти.Запланировано);
		СтрокаТабличнойЧасти.Заполнено            = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),            0, СтрокаТабличнойЧасти.Заполнено);
		СтрокаТабличнойЧасти.ЗаполненоИзРезерва   = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаполненоИзРезерва),   0, СтрокаТабличнойЧасти.ЗаполненоИзРезерва);
		СтрокаТабличнойЧасти.ОсталосьОтгрузить    = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьОтгрузить),    0, СтрокаТабличнойЧасти.ОсталосьОтгрузить);
		СтрокаТабличнойЧасти.СвободныйОстаток     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СвободныйОстаток),     0, СтрокаТабличнойЧасти.СвободныйОстаток);
		СтрокаТабличнойЧасти.РезервПоЗаказу       = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.РезервПоЗаказу),       0, СтрокаТабличнойЧасти.РезервПоЗаказу);
		СтрокаТабличнойЧасти.ОстатокПоОрганизации = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОстатокПоОрганизации), 0, СтрокаТабличнойЧасти.ОстатокПоОрганизации);
		СтрокаТабличнойЧасти.МожноОтгрузить       = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.МожноОтгрузить),       0, СтрокаТабличнойЧасти.МожноОтгрузить);
		СтрокаТабличнойЧасти.ДобавитьВДокумент    = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент),    0, СтрокаТабличнойЧасти.ДобавитьВДокумент);
		
	КонецЦикла;
		
	Если мЧастичноеЗаполнение Тогда
		СтрокаЗаполнено = ", Заполнено Убыв";
	Иначе
		СтрокаЗаполнено = "";
	КонецЕсли;
	
	Если ТабличноеПоле = Товары Тогда
		СтрокаХарактеристика = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика = "";
	КонецЕсли;

	ТабличноеПоле.Сортировать("Номенклатура" + СтрокаХарактеристика + СтрокаЗаполнено + ", ЗаказПокупателя");
			
	ТаблицаОстатков = ТабличноеПоле.Скопировать();
	ТаблицаОстатков.Свернуть("Номенклатура" + СтрокаХарактеристика + ", СвободныйОстаток, ОстатокПоОрганизации");
			
	ТаблицаОтгрузки = ТабличноеПоле.Скопировать();
	ТаблицаОтгрузки.Свернуть("Номенклатура" + СтрокаХарактеристика, "ОсталосьОтгрузить");
			
	ТаблицаПоРезервам = ТабличноеПоле.Скопировать();
	ТаблицаПоРезервам.Свернуть("Номенклатура" + СтрокаХарактеристика, "РезервПоЗаказу");
			
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		НоменклатураСсылка   = СтрокаОстатков.Номенклатура;
		СвободныйОстаток     = СтрокаОстатков.СвободныйОстаток;
		ОстатокПоОрганизации = СтрокаОстатков.ОстатокПоОрганизации;
		
		ПараметрыОтбора = Новый Структура("Номенклатура" + СтрокаХарактеристика);
		ПараметрыОтбора.Номенклатура = НоменклатураСсылка;
		Если ТабличноеПоле = Товары Тогда
			ПараметрыОтбора.ХарактеристикаНоменклатуры = СтрокаОстатков.ХарактеристикаНоменклатуры;
		КонецЕсли;
				
		НайденныеСтроки = ТаблицаПоРезервам.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ВсегоПоРезервам = 0;
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ВсегоПоРезервам = Макс(НайденнаяСтрока.РезервПоЗаказу,0);
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		ДоступныйОстаток = СвободныйОстаток + ВсегоПоРезервам;
		
		Если НЕ ПревышатьОстаткиОрганизации Тогда
			ДоступныйОстаток = Мин(ОстатокПоОрганизации, ДоступныйОстаток);
		КонецЕсли;
		
		Если НЕ ДоступныйОстаток > 0 Тогда
			Продолжить;
		Иначе
			НайденныеСтроки = ТаблицаОтгрузки.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ВсегоПоРезервам = 0;
			Иначе
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ВсегоОсталосьОтгрузить = НайденнаяСтрока.ОсталосьОтгрузить;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			Если НЕ ВсегоОсталосьОтгрузить > 0 Тогда
				Продолжить;
			Иначе
				СтрокиЗаказов = ТабличноеПоле.НайтиСтроки(ПараметрыОтбора);
						
				Для Каждого Строка Из СтрокиЗаказов Цикл
					ВсегоТребуется = Строка.ОсталосьОтгрузить;
					Если мЧастичноеЗаполнение Тогда
						Заполнено  = Строка.Заполнено;
						ДоступныйОстаток = ДоступныйОстаток - Заполнено;
					Иначе
						Заполнено = 0;
					КонецЕсли;
					МожноОтгрузить = Мин(ДоступныйОстаток, ВсегоТребуется);
					КДобавлению    = МожноОтгрузить - ?(Заполнено > 0, Заполнено, 0);
					Добавлено      = ?(КДобавлению > 0, КДобавлению, 0);
							
					Строка.МожноОтгрузить    = МожноОтгрузить;
					Строка.ДобавитьВДокумент = Добавлено;
							
					ДоступныйОстаток = Макс(ДоступныйОстаток - Добавлено,0);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет табличное поля Товары номенклатурой отобранных заказов.
//
Процедура ЗаполнитьТабличноеПолеТовары()
	
	Если НеЗаполнятьТовары Тогда
		Предупреждение("Табличную часть ""Товары"" заполнить нельзя.");
		Возврат;
	КонецЕсли;
		
	ЗапросПоТоварам = Новый Запрос;

	Если мЧастичноеЗаполнение Тогда
		ЗапросПоТоварам.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	КонецЕсли;
    мОптРозница = новый Структура("Опт, Розница",ложь,ложь);
	Если мУказаниеСкладовВТЧ Тогда
		СписокСкладов = Новый СписокЗначений;
		Если ЗаполнениеСкладов <> 3 Тогда // По складу из шапки документа реализации
			СписокСкладов.Добавить(СкладИзШапки);
		КонецЕсли;
		Если ЗаполнениеСкладов <> 2 Тогда // По складам из шапок заказов
			Для Каждого Заказ Из СписокЗаказов Цикл
				Если СписокСкладов.НайтиПоЗначению(Заказ.Значение.СкладГруппа) = Неопределено Тогда
					Если ТипЗнч(Заказ.Значение.СкладГруппа)=Тип("СправочникСсылка.Склады") Тогда
						СписокСкладов.Добавить(Заказ.Значение.СкладГруппа);
					Иначе
						ДобавитьВСписокСкладыИзГруппыДоступности(Заказ.Значение.СкладГруппа,СписокСкладов);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для каждого текСклад из СписокСкладов цикл
			Если текСклад.Значение.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				мОптРозница.Вставить("Розница",истина);
			ИначеЕсли текСклад.Значение.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
                 мОптРозница.Вставить("Опт",истина);
			КонецЕсли;
			Если мОптРозница.Розница и мОптРозница.Опт Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ЗапросПоТоварам.УстановитьПараметр("СписокСкладов",      СписокСкладов);
		УсловиеСклад = "Склад В (&СписокСкладов)";
	Иначе
		ЗапросПоТоварам.УстановитьПараметр("Склад",              СкладИзШапки);
		Если СкладИзШапки.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			мОптРозница.Вставить("Розница",истина);
		КонецЕсли;
		Если СкладИзШапки.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			мОптРозница.Вставить("Опт",истина);
		КонецЕсли;
		УсловиеСклад = "Склад = &Склад";
	КонецЕсли;
	
	//подзапрос для получения остатков на складе
	Если мОптРозница.Опт и мОптРозница.Розница Тогда
		//остатки по двум регистрам
		ПодзапросОстатки = "(ВЫБРАТЬ
		|Номенклатура,
		|ХарактеристикаНоменклатуры,
		|Сумма(КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|(ВЫБРАТЬ
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	КоличествоОстаток КАК КоличествоОстаток
        |ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, " + УсловиеСклад + ") 
        |ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	КоличествоОстаток КАК КоличествоОстаток
        |ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, " + УсловиеСклад + ") 
		|) КАК ВнутреннийЗапросОстаткиНаСкладе
		|СГРУППИРОВАТЬ ПО Номенклатура, ХарактеристикаНоменклатуры
		|) КАК ОстаткиНаСкладе";
	Иначе
		если мОптРозница.Опт Тогда
			//только опт
			мИмяРегистра = "ТоварыНаСкладах";
		Иначе
			//только розница
			мИмяРегистра = "ТоварыВРознице";
		КонецЕсли;
		ПодзапросОстатки = "
		|		РегистрНакопления."+мИмяРегистра+".Остатки(&ДатаОстатков, " + УсловиеСклад + ") КАК ОстаткиНаСкладе
		|";
	КонецЕсли;
		
    ТекстКоличествоРеализация = "ДокументРеализация.Количество * ДокументРеализация.Коэффициент/ДокументРеализация.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент";
	ЗапросПоТоварам.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	ЗапросПоТоварам.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
	ЗапросПоТоварам.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ЗапросПоТоварам.УстановитьПараметр("Организация",        ДокументОбъект.Организация);
	ЗапросПоТоварам.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	ЗапросПоТоварам.УстановитьПараметр("ДатаОстатков", 		 ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросПоТоварам.Текст = "
	|ВЫБРАТЬ
	|	Истина                                                КАК Пометка,
	|	Ложь                                                  КАК МеткаОстаткиПоСкладу,
	|	3                                                     КАК ПриоритетПоСкладам,
	|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
	|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
	|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
	|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ВнутреннийЗапрос.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
	|	ВнутреннийЗапрос.ЗаказПокупателя                      КАК ЗаказПокупателя,
	|	ВнутреннийЗапрос.ЗаказПокупателя.СкладГруппа   		  КАК Склад,
	|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,"
	+ ?(мЧастичноеЗаполнение, "                               
	|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.Заполнено) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ФлагЗаполнено,
	|	СУММА(ВнутреннийЗапрос.Заполнено)                     КАК Заполнено,
	|	СУММА(ВнутреннийЗапрос.ЗаполненоИзРезерва)            КАК ЗаполненоИзРезерва,", "
	|	0                                                     КАК ФлагЗаполнено,
	|	0                                                     КАК Заполнено,
	|	0 													  КАК ЗаполненоИзРезерва,") + "
	|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ОсталосьОтгрузить,
	|	СУММА(ОстаткиРезерв.КоличествоОстаток)                КАК РезервПоЗаказу," 
	+ ?(ПревышатьОстаткиОрганизации, "
	|	0                                                     КАК ОстатокПоОрганизации,", "
	|	СУММА(ОстаткиОрганизаций.КоличествоОстаток)           КАК ОстатокПоОрганизации,") + "
	|	СУММА(ОстаткиНаСкладе.КоличествоОстаток)              КАК СвободныйОстаток,
	|	0                                                     КАК МожноОтгрузить,
	|	0                                                     КАК ДобавитьВДокумент
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ОстаткиЗаказ.ЗаказПокупателя            КАК ЗаказПокупателя,
	|		ОстаткиЗаказ.Номенклатура               КАК Номенклатура,
	|		ОстаткиЗаказ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)КАК ОсталосьОтгрузить,"
	+ ?(мЧастичноеЗаполнение, "                               
	|		СУММА("+ТекстКоличествоРеализация+") КАК Заполнено,
	|		СУММА(ВЫБОР КОГДА ДокументРеализация.СпособСписанияОстаткаТоваров=ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.ИзРезерва) ТОГДА "+ТекстКоличествоРеализация+" ИНАЧЕ 0 КОНЕЦ) КАК ЗаполненоИзРезерва,", "") + "
	|		МАКСИМУМ(ОстаткиЗаказ.КоличествоПриход) КАК Запланировано
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,&ДатаОстатков,,, ДоговорКонтрагента = &ДоговорКонтрагента 
	|		                                              И ЗаказПокупателя В (&СписокЗаказов)
	|		                                              И СтатусПартии <> &СтатусТары
	|		                                              И Номенклатура.Услуга <> Истина) КАК ОстаткиЗаказ
	|
	|" + ?(мЧастичноеЗаполнение, "
	|ЛЕВОЕ СОЕДИНЕНИЕ // заполнено
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокументРеализация
	|ПО
	|	ДокументРеализация.Ссылка      = &ДокументСсылка
	|	И ОстаткиЗаказ.ЗаказПокупателя = ДокументРеализация.ЗаказПокупателя
	|	И ОстаткиЗаказ.Номенклатура    = ДокументРеализация.Номенклатура
	|	И ОстаткиЗаказ.ХарактеристикаНоменклатуры = ДокументРеализация.ХарактеристикаНоменклатуры", "") + "
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОстаткиЗаказ.ЗаказПокупателя,
	|		ОстаткиЗаказ.Номенклатура,
	|		ОстаткиЗаказ.ХарактеристикаНоменклатуры
	|
	|	) КАК ВнутреннийЗапрос
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков, ДокументРезерва В (&СписокЗаказов) "+?(НЕ мУказаниеСкладовВТЧ, " И Склад = &Склад","") +") КАК ОстаткиРезерв
	|ПО
	|	ВнутреннийЗапрос.ЗаказПокупателя              = ОстаткиРезерв.ДокументРезерва
	|	И ВнутреннийЗапрос.Номенклатура                 = ОстаткиРезерв.Номенклатура
	|	И ВнутреннийЗапрос.ХарактеристикаНоменклатуры = ОстаткиРезерв.ХарактеристикаНоменклатуры
	|"
	+ ?(НЕ ПревышатьОстаткиОрганизации, "
	|ЛЕВОЕ СОЕДИНЕНИЕ // остатки организаций
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, Организация = &Организация) КАК ОстаткиОрганизаций
	|ПО
	|	ВнутреннийЗапрос.Номенклатура                 = ОстаткиОрганизаций.Номенклатура
	|	И ВнутреннийЗапрос.ХарактеристикаНоменклатуры = ОстаткиОрганизаций.ХарактеристикаНоменклатуры", "") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ // реальные товары на складе за вычетом резервов и товаров к передаче
	|	(
	|	ВЫБРАТЬ
	|		ОстаткиНаСкладе.Номенклатура,
	|		ОстаткиНаСкладе.ХарактеристикаНоменклатуры,
	|		ОстаткиНаСкладе.КоличествоОстаток
	|		- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
	|		- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК КоличествоОстаток
	|
	|	ИЗ  "+ПодзапросОстатки+"
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеСклад + ") КАК ОстаткиВРезерве
	|	ПО
	|		ОстаткиНаСкладе.Номенклатура                 = ОстаткиВРезерве.Номенклатура
	|		И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиВРезерве.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков," + УсловиеСклад + ") КАК ОстаткиКПередаче
	|	ПО
	|		ОстаткиНаСкладе.Номенклатура                 = ОстаткиКПередаче.Номенклатура
	|		И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = ОстаткиКПередаче.ХарактеристикаНоменклатуры
	|
	|	) КАК ОстаткиНаСкладе
	|ПО
	|	ВнутреннийЗапрос.Номенклатура                 = ОстаткиНаСкладе.Номенклатура
	|	И ВнутреннийЗапрос.ХарактеристикаНоменклатуры = ОстаткиНаСкладе.ХарактеристикаНоменклатуры
	|ГДЕ
	|	Запланировано > 0
	|	И ОсталосьОтгрузить >= 0
	|
	|	СГРУППИРОВАТЬ ПО
	|	ВнутреннийЗапрос.ЗаказПокупателя,
	|	ВнутреннийЗапрос.ЗаказПокупателя.СкладГруппа,
	|	ВнутреннийЗапрос.Номенклатура,
	|	ВнутреннийЗапрос.ХарактеристикаНоменклатуры
	|";

	Товары = ЗапросПоТоварам.Выполнить().Выгрузить();

	ЗаполнитьКоличествоВТабличномПоле(Товары);
	
КонецПроцедуры // ЗаполнитьТабличноеПолеТовары()

// Заполняет табличное поля Тара номенклатурой отобранных заказов.
//
Процедура ЗаполнитьТабличноеПолеВозвратнаяТара()
	
	Если НеЗаполнятьТару Тогда
		Предупреждение("Табличную часть ""Тара"" заполнить нельзя.");
		Возврат;
	КонецЕсли;
		
	ЗапросПоТаре = Новый Запрос;

	Если мЧастичноеЗаполнение Тогда
		ЗапросПоТаре.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	КонецЕсли;
    мОптРозница = новый Структура("Опт, Розница",ложь,ложь);

	Если мУказаниеСкладовВТЧ Тогда
		СписокСкладов = Новый СписокЗначений;
		Если ЗаполнениеСкладов <> 3 Тогда // По складу из шапки документа реализации
			СписокСкладов.Добавить(СкладИзШапки);
		КонецЕсли;
		Если ЗаполнениеСкладов <> 2 Тогда // По складам из шапок заказов
			Для Каждого Заказ Из СписокЗаказов Цикл
				Если СписокСкладов.НайтиПоЗначению(Заказ.Значение.СкладГруппа) = Неопределено Тогда
					Если ТипЗнч(Заказ.Значение.СкладГруппа)=Тип("СправочникСсылка.Склады") Тогда
						СписокСкладов.Добавить(Заказ.Значение.СкладГруппа);
					Иначе
						ДобавитьВСписокСкладыИзГруппыДоступности(Заказ.Значение.СкладГруппа,СписокСкладов);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Для каждого текСклад из СписокСкладов цикл
			Если текСклад.Значение.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				мОптРозница.Вставить("Розница",истина);
			ИначеЕсли текСклад.Значение.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
                 мОптРозница.Вставить("Опт",истина);
			КонецЕсли;
			Если мОптРозница.Розница и мОптРозница.Опт Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ЗапросПоТаре.УстановитьПараметр("СписокСкладов",      СписокСкладов);
		УсловиеСклад = "Склад В (&СписокСкладов)";
	Иначе
		ЗапросПоТаре.УстановитьПараметр("Склад",              СкладИзШапки);
		Если СкладИзШапки.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			мОптРозница.Вставить("Розница",истина);
		КонецЕсли;
		Если СкладИзШапки.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			мОптРозница.Вставить("Опт",истина);
		КонецЕсли;
		УсловиеСклад = "Склад = &Склад";
	КонецЕсли;

		//подзапрос для получения остатков на складе
	Если мОптРозница.Опт и мОптРозница.Розница Тогда
		//остатки по двум регистрам
		ПодзапросОстатки = "(ВЫБРАТЬ
		|Номенклатура,
		|Сумма(КоличествоОстаток) КАК КоличествоОстаток
		|ИЗ
		|(ВЫБРАТЬ
		|	Номенклатура,
		|	КоличествоОстаток КАК КоличествоОстаток
        |ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, " + УсловиеСклад + ") 
        |ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|	Номенклатура,
		|	КоличествоОстаток КАК КоличествоОстаток
        |ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(&ДатаОстатков, " + УсловиеСклад + ") 
		|) КАК ВнутреннийЗапросОстаткиНаСкладе
		|СГРУППИРОВАТЬ ПО Номенклатура
		|) КАК ОстаткиНаСкладе";
	Иначе
		если мОптРозница.Опт Тогда
			//только опт
			мИмяРегистра = "ТоварыНаСкладах";
		Иначе
			//только розница
			мИмяРегистра = "ТоварыВРознице";
		КонецЕсли;
		ПодзапросОстатки = "
		|		РегистрНакопления."+мИмяРегистра+".Остатки(&ДатаОстатков, " + УсловиеСклад + ") КАК ОстаткиНаСкладе
		|";
	КонецЕсли;

	
	ЗапросПоТаре.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	ЗапросПоТаре.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
	ЗапросПоТаре.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	ЗапросПоТаре.УстановитьПараметр("Организация",        ДокументОбъект.Организация);
	ЗапросПоТаре.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	ЗапросПоТаре.УстановитьПараметр("ДатаОстатков", 	  ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЗапросПоТаре.Текст = "
	|ВЫБРАТЬ
	|	Истина                                                КАК Пометка,
	|	Ложь                                                  КАК МеткаОстаткиПоСкладу,
	|	3                                                     КАК ПриоритетПоСкладам,
	|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
	|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
	|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
	|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	ВнутреннийЗапрос.ЗаказПокупателя                      КАК ЗаказПокупателя,
	|	ВнутреннийЗапрос.ЗаказПокупателя.СкладГруппа 		  КАК Склад,
	|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,"
	+ ?(мЧастичноеЗаполнение, "                               
	|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.Заполнено) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ФлагЗаполнено,
	|	СУММА(ВнутреннийЗапрос.Заполнено)                     КАК Заполнено,
	|	СУММА(ВнутреннийЗапрос.ЗаполненоИзРезерва)            КАК ЗаполненоИзРезерва,", "
	|	0                                                     КАК ФлагЗаполнено,
	|	0                                                     КАК Заполнено,
	|   0 													  КАК ЗаполненоИзРезерва,") + "
	|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ОсталосьОтгрузить,"
	+ ?(ПревышатьОстаткиОрганизации, "
	|	0                                                     КАК ОстатокПоОрганизации,", "
	|	СУММА(ОстаткиОрганизаций.КоличествоОстаток)           КАК ОстатокПоОрганизации,") + "
	|	СУММА(ОстаткиРезерв.КоличествоОстаток)                КАК РезервПоЗаказу,
	|	СУММА(ОстаткиНаСкладе.КоличествоОстаток)              КАК СвободныйОстаток,
	|	0                                                     КАК МожноОтгрузить,
	|	0                                                     КАК ДобавитьВДокумент
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ОстаткиЗаказ.ЗаказПокупателя            КАК ЗаказПокупателя,
	|		ОстаткиЗаказ.Номенклатура               КАК Номенклатура,
	|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)КАК ОсталосьОтгрузить,"
	+ ?(мЧастичноеЗаполнение, "  
	|		СУММА(ДокументРеализация.Количество) КАК Заполнено,
	|		СУММА(ВЫБОР КОГДА ДокументРеализация.СпособСписанияОстаткаТоваров=ЗНАЧЕНИЕ(Перечисление.СпособыСписанияОстаткаТоваров.ИзРезерва) ТОГДА ДокументРеализация.Количество ИНАЧЕ 0 КОНЕЦ) КАК ЗаполненоИзРезерва,", "") + "
	|		МАКСИМУМ(ОстаткиЗаказ.КоличествоПриход) КАК Запланировано
	|	ИЗ
	|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
	|		                                              И ЗаказПокупателя В (&СписокЗаказов)
	|		                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
	|
	|" + ?(мЧастичноеЗаполнение, "
	|ЛЕВОЕ СОЕДИНЕНИЕ // заполнено
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК ДокументРеализация
	|ПО
	|	ДокументРеализация.Ссылка      = &ДокументСсылка
	|	И ОстаткиЗаказ.ЗаказПокупателя = ДокументРеализация.ЗаказПокупателя
	|	И ОстаткиЗаказ.Номенклатура    = ДокументРеализация.Номенклатура", "") + "
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОстаткиЗаказ.ЗаказПокупателя,
	|		ОстаткиЗаказ.Номенклатура
	|
	|	) КАК ВнутреннийЗапрос
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + ?(НЕ мУказаниеСкладовВТЧ, " Склад = &Склад И ","") + "
	|	                                                  ДокументРезерва В (&СписокЗаказов)) КАК ОстаткиРезерв
	|ПО
	|	ВнутреннийЗапрос.ЗаказПокупателя = ОстаткиРезерв.ДокументРезерва
	|	И ВнутреннийЗапрос.Номенклатура  = ОстаткиРезерв.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ // остатки организаций
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, Организация = &Организация) КАК ОстаткиОрганизаций
	|ПО
	|	ВнутреннийЗапрос.Номенклатура = ОстаткиОрганизаций.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ // реальные товары на складе за вычетом резервов и товаров к передаче
	|	(
	|	ВЫБРАТЬ
	|		ОстаткиНаСкладе.Номенклатура,
	|		ОстаткиНаСкладе.КоличествоОстаток
	|		- ВЫБОР КОГДА ОстаткиВРезерве.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиВРезерве.КоличествоОстаток КОНЕЦ
	|		- ВЫБОР КОГДА ОстаткиКПередаче.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиКПередаче.КоличествоОстаток КОНЕЦ КАК КоличествоОстаток
	|
	|	ИЗ "+ПодзапросОстатки+"
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков," + УсловиеСклад + ") КАК ОстаткиВРезерве
	|	ПО
	|		ОстаткиНаСкладе.Номенклатура = ОстаткиВРезерве.Номенклатура
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков," + УсловиеСклад + ") КАК ОстаткиКПередаче
	|	ПО
	|		ОстаткиНаСкладе.Номенклатура = ОстаткиКПередаче.Номенклатура
	|
	|	) КАК ОстаткиНаСкладе
	|ПО
	|	ВнутреннийЗапрос.Номенклатура    = ОстаткиНаСкладе.Номенклатура
	|ГДЕ
	|	Запланировано > 0
	|	И ОсталосьОтгрузить >= 0
	|
	|	СГРУППИРОВАТЬ ПО
	|	ВнутреннийЗапрос.ЗаказПокупателя,
	|	ВнутреннийЗапрос.ЗаказПокупателя.СкладГруппа,
	|	ВнутреннийЗапрос.Номенклатура
	|";

	ВозвратнаяТара = ЗапросПоТаре.Выполнить().Выгрузить();
	
	ЗаполнитьКоличествоВТабличномПоле(ВозвратнаяТара);
	
КонецПроцедуры // ЗаполнитьТабличноеПолеВозвратнаяТара()

// Заполняет табличные поля Товары, Тара, Услуги номенклатурой отобранных заказов.
//
Процедура ЗаполнитьПанельОтбораНоменклатуры()

	// Заполнить табличные поля:
	// Товары:

	Если НеЗаполнятьТовары <> Истина Тогда

		ЗаполнитьТабличноеПолеТовары();

		Если мУказаниеСкладовВТЧ Тогда

			РаспределитьНоменклатуруЗаказовПоСкладам(Товары);

		КонецЕсли;
	КонецЕсли;

	// Возвратная тара:

	Если НеЗаполнятьТару <> Истина Тогда
	
		ЗаполнитьТабличноеПолеВозвратнаяТара();

		Если мУказаниеСкладовВТЧ Тогда

			РаспределитьНоменклатуруЗаказовПоСкладам(ВозвратнаяТара);

		КонецЕсли;
	КонецЕсли;

	// Услуги:

	Если НеЗаполнятьУслуги <> Истина Тогда
	
		ЗапросПоУслугам = Новый Запрос;

		Если мЧастичноеЗаполнение Тогда
			ЗапросПоУслугам.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
		КонецЕсли;

		ЗапросПоУслугам.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		ЗапросПоУслугам.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);

		ЗапросПоУслугам.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВнутреннийЗапрос.ЗаказПокупателя                      КАК ЗаказПокупателя,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,"
		+ ?(мЧастичноеЗаполнение, "                               
		|	СУММА(ВнутреннийЗапрос.Заполнено)                     КАК Заполнено,", "") + "
		|	СУММА(ВнутреннийЗапрос.ОсталосьОтгрузить)             КАК ОсталосьОтгрузить,
		|	0                                                     КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,
		|		ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)  КАК ОсталосьОтгрузить,"
		+ ?(мЧастичноеЗаполнение, "                               
		|		СУММА(ДокументРеализация.Количество)              КАК Заполнено,", "") + "
		|		СУММА(ОстаткиЗаказ.КоличествоПриход)              КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПокупателей.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПокупателя В (&СписокЗаказов)
		|		                                              И Номенклатура.Услуга = Истина) КАК ОстаткиЗаказ
		|" + ?(мЧастичноеЗаполнение, "
		|ЛЕВОЕ СОЕДИНЕНИЕ // колонка заполнено
		|	Документ.РеализацияТоваровУслуг.Услуги КАК ДокументРеализация
		|ПО
		|	ДокументРеализация.Ссылка      = &ДокументСсылка
		|	И ОстаткиЗаказ.ЗаказПокупателя = ДокументРеализация.ЗаказПокупателя
		|	И ОстаткиЗаказ.Номенклатура    = ДокументРеализация.Номенклатура", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиЗаказ.ЗаказПокупателя,
		|		ОстаткиЗаказ.Номенклатура
		|
		|	) КАК ВнутреннийЗапрос
		|ГДЕ
		|	Запланировано > 0
		|	И ОсталосьОтгрузить >= 0
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.ЗаказПокупателя,
		|	ВнутреннийЗапрос.Номенклатура
		|";

		Услуги = ЗапросПоУслугам.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл

			СтрокаТабличнойЧасти.Запланировано     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),     0, СтрокаТабличнойЧасти.Запланировано);
			Если мЧастичноеЗаполнение Тогда
				СтрокаТабличнойЧасти.Заполнено     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),         0, СтрокаТабличнойЧасти.Заполнено);
			КонецЕсли;
			СтрокаТабличнойЧасти.ОсталосьОтгрузить = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьОтгрузить), 0, СтрокаТабличнойЧасти.ОсталосьОтгрузить);
			СтрокаТабличнойЧасти.ДобавитьВДокумент = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент), 0, СтрокаТабличнойЧасти.ДобавитьВДокумент);

		КонецЦикла;
		
		ЗаполнитьСтолбецДобавитьВДокумент(Услуги, "ОсталосьОтгрузить");
		
	КонецЕсли;

	// Установить видимость закладок
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = ПоказыватьТовары;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ПоказыватьУслуги;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость   = ПоказыватьТару;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Товары.Колонки);

	// Установить видимость колонок "Склад"
	ЭлементыФормы.Товары.Колонки.Склад.Видимость         = мУказаниеСкладовВТЧ;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Склад.Видимость = мУказаниеСкладовВТЧ;

	// Установить видимость колонок "Заполнено"
	ЭлементыФормы.Товары.Колонки.Заполнено.Видимость         = мЧастичноеЗаполнение;
	ЭлементыФормы.Услуги.Колонки.Заполнено.Видимость         = мЧастичноеЗаполнение;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Заполнено.Видимость = мЧастичноеЗаполнение;

	// Установить видимость колонок "ОстатокПоОрганизации"
	ЭлементыФормы.Товары.Колонки.ОстатокПоОрганизации.Видимость         = НЕ ПревышатьОстаткиОрганизации;
	ЭлементыФормы.ВозвратнаяТара.Колонки.ОстатокПоОрганизации.Видимость = НЕ ПревышатьОстаткиОрганизации;

КонецПроцедуры // ЗаполнитьПанельОтбораНоменклатуры()

// Выполняет перенос отобранных позиций номенклатуры в документ реализации (в режиме заполнения)
//
Процедура ЗаполнитьТабличныеЧастиДокумента()

	СтруктураВозвращаемыхЗначений = Новый Структура();

	СтруктураВозвращаемыхЗначений.Вставить("Команда",            "ЗаполнениеТабличныхЧастей");

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьТовары",    ПоказыватьТовары);
	Если ПоказыватьТовары Тогда
		КопияТовары = Товары.Скопировать();
		КопияТовары.Колонки.ДобавитьВДокумент.Имя = "Количество";
		КопияТовары.Колонки.Добавить("СпособСписанияОстаткаТоваров");
		КопияТовары.ЗаполнитьЗначения(Перечисления.СпособыСписанияОстаткаТоваров.СоСклада, "СпособСписанияОстаткаТоваров");

		Если мУказаниеСкладовВТЧ Тогда
			НомерСтрокиТаблицы = 0;
			Пока НомерСтрокиТаблицы < КопияТовары.Количество() Цикл
				СтрокаТаблицы = КопияТовары.Получить(НомерСтрокиТаблицы);
				
				Если НЕ СтрокаТаблицы.МеткаОстаткиПоСкладу Тогда
					КопияТовары.Удалить(СтрокаТаблицы);
				Иначе
					НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияТовары.Количество() Цикл

			СтрокаТаблицы = КопияТовары.Получить(НомерСтрокиТаблицы);

			СтрокаКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество), 0, СтрокаТаблицы.Количество);
			
			Если НЕ СтрокаТаблицы.Пометка
				ИЛИ СтрокаКоличество <= 0 Тогда
				КопияТовары.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
            Если не мУказаниеСкладовВТЧ Тогда
				СтрокаТаблицы.Склад = неопределено;
			КонецЕсли;

			Если СтрокаТаблицы.РезервПоЗаказу <> NULL
			   И (СтрокаТаблицы.РезервПоЗаказу - СтрокаТаблицы.ЗаполненоИзРезерва) > 0 Тогда
			    РезервПоЗаказу = СтрокаТаблицы.РезервПоЗаказу - СтрокаТаблицы.ЗаполненоИзРезерва;
				Если СтрокаТаблицы.Количество <= РезервПоЗаказу Тогда

					// Поменяем способ списания
					СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
				Иначе

					// Разобьем на две строки
					КопияСтроки = КопияТовары.Вставить(КопияТовары.Индекс(СтрокаТаблицы));

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из КопияТовары.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					КопияСтроки.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

					КопияСтроки.Количество       = РезервПоЗаказу;
					СтрокаТаблицы.Количество     = СтрокаТаблицы.Количество - РезервПоЗаказу;
					СтрокаТаблицы.РезервПоЗаказу = 0;
					
				КонецЕсли;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;
		СтруктураВозвращаемыхЗначений.Вставить("Товары",         КопияТовары);
	КонецЕсли;

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьТару",      ПоказыватьТару);
	Если ПоказыватьТару Тогда
		КопияВозвратнаяТара = ВозвратнаяТара.Скопировать();
		КопияВозвратнаяТара.Колонки.ДобавитьВДокумент.Имя = "Количество";
		КопияВозвратнаяТара.Колонки.Добавить("СпособСписанияОстаткаТоваров");
		КопияВозвратнаяТара.ЗаполнитьЗначения(Перечисления.СпособыСписанияОстаткаТоваров.СоСклада, "СпособСписанияОстаткаТоваров");

		Если мУказаниеСкладовВТЧ Тогда
			НомерСтрокиТаблицы = 0;
			Пока НомерСтрокиТаблицы < КопияВозвратнаяТара.Количество() Цикл
				СтрокаТаблицы = КопияВозвратнаяТара.Получить(НомерСтрокиТаблицы);
				
				Если НЕ СтрокаТаблицы.МеткаОстаткиПоСкладу Тогда
					КопияВозвратнаяТара.Удалить(СтрокаТаблицы);
				Иначе
					НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияВозвратнаяТара.Количество() Цикл

			СтрокаТаблицы = КопияВозвратнаяТара.Получить(НомерСтрокиТаблицы);

			СтрокаКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество), 0, СтрокаТаблицы.Количество);
			
			Если НЕ СтрокаТаблицы.Пометка
				ИЛИ СтрокаКоличество <= 0 Тогда
				КопияВозвратнаяТара.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			Если не мУказаниеСкладовВТЧ Тогда
				СтрокаТаблицы.Склад = неопределено;
			КонецЕсли;

			Если СтрокаТаблицы.РезервПоЗаказу <> NULL
			   И (СтрокаТаблицы.РезервПоЗаказу - СтрокаТаблицы.ЗаполненоИзРезерва) > 0 Тогда
			   РезервПоЗаказу = СтрокаТаблицы.РезервПоЗаказу - СтрокаТаблицы.ЗаполненоИзРезерва;

				Если СтрокаТаблицы.Количество <= СтрокаТаблицы.РезервПоЗаказу Тогда

					// Поменяем способ списания
					СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
                Иначе

					// Разобьем на две строки
					КопияСтроки = КопияВозвратнаяТара.Вставить(КопияВозвратнаяТара.Индекс(СтрокаТаблицы));

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из КопияВозвратнаяТара.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					КопияСтроки.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;

					КопияСтроки.Количество = РезервПоЗаказу;
					
					СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - РезервПоЗаказу;
					СтрокаТаблицы.РезервПоЗаказу = 0;

				КонецЕсли;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;
		СтруктураВозвращаемыхЗначений.Вставить("ВозвратнаяТара", КопияВозвратнаяТара);
	КонецЕсли;

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьУслуги",    ПоказыватьУслуги);
	Если ПоказыватьУслуги Тогда
		КопияУслуги = Услуги.Скопировать();
		КопияУслуги.Колонки.ДобавитьВДокумент.Имя = "Количество";

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияУслуги.Количество() Цикл

			СтрокаТаблицы = КопияУслуги.Получить(НомерСтрокиТаблицы);
			
			СтрокаКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество), 0, СтрокаТаблицы.Количество);
			
			Если НЕ СтрокаТаблицы.Пометка
				ИЛИ СтрокаКоличество <= 0 Тогда
				КопияУслуги.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;

		СтруктураВозвращаемыхЗначений.Вставить("Услуги",         КопияУслуги);
	КонецЕсли;

	ОповеститьОВыборе(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // ЗаполнитьТабличныеЧастиДокумента()

Процедура ДобавитьВСписокСкладыИзГруппыДоступности(ГруппаДоступности,СписокСкладов)
	Если не ЗначениеЗаполнено(ГруппаДоступности) Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ГруппаДоступности)<>Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
		Возврат;
	КонецЕсли;
	МассивСкладов = мСоответствиеГруппыДоступностиСкладов.Получить(ГруппаДоступности);
	Если МассивСкладов=неопределено Тогда
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ Склад ИЗ РегистрСведений.СоставГруппДоступностиСкладов
		|ГДЕ ГруппаДоступности=&ГруппаДоступности";
		Запрос.УстановитьПараметр("ГруппаДоступности",ГруппаДоступности);
		Выборка = Запрос.Выполнить().Выбрать();
		МассивСкладов = новый Массив;
		Пока Выборка.Следующий() цикл
			МассивСкладов.Добавить(Выборка.Склад);
		КонецЦикла;
		мСоответствиеГруппыДоступностиСкладов.Вставить(ГруппаДоступности,МассивСкладов);
	КонецЕсли;
	Для каждого Элемент из МассивСкладов цикл
		Если СписокСкладов.НайтиПоЗначению(Элемент)=неопределено Тогда
			СписокСкладов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		// Или форма открыта некорректно, или документ еще не был записан
		ОбщегоНазначения.СообщитьОбОшибке("Документ не записан. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли ДокументОбъект.Проведен И ДокументОбъект.Модифицированность() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не записан. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран контрагент. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран договор. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация. Заполнение невозможно!", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(ДокументОбъект.Организация);
	
	СкладИзШапки = ДокументОбъект.Склад;
	
	мСоответствиеГруппыДоступностиСкладов = новый Соответствие;

	// Заполнить список доступных вариантов отбора
	УстановитьСтруктуруВариантовОтбора();
	
	// Создать и заполнить построитель для отбора
	ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета);
	
	// Установить доступность кнопок командной панели таблицы Заказов
	УстановитьДоступностьКнопокПанелиЗаказов();
	
	// Задать имя табличной части
	ЭлементыФормы.ФлажокТовары.Заголовок = "Товары";
	
	// Установим конец периода на конец дня, предшествующего дате документа закрытия
	ДатаКон = КонецДня(ДокументОбъект.Дата);
	ДатаКонПриИзменении(ЭлементыФормы.ДатаКон);

	ПерейтиНаСтраницу("Страница1");
	
	ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеЗаполнить.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события ПриИзменении элемента формы ДатаНач.
//
Процедура ДатаНачПриИзменении(Элемент)

	// Установка даты начала периода по умолчанию
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры // ДатаНачПриИзменении()

// Обработчик события ПриИзменении элемента формы ДатаКон.
//
Процедура ДатаКонПриИзменении(Элемент)

	// Установка даты конца периода по умолчанию
	Если КонецДня(ДатаКон) > КонецДня(ДокументОбъект.Дата) Тогда
		// Установим конец периода на конец дня даты документа реализации
		ДатаКон = КонецДня(ДокументОбъект.Дата);
		Предупреждение("Дата окончания периода не должна быть больше даты документа!",,ЭтаФорма.Заголовок);
	Иначе
		ДатаКон = КонецДня(ДатаКон);
	КонецЕсли;
	
	НП.УстановитьПериод(ДатаНач, ДатаКон, Истина);
	
КонецПроцедуры	// ДатаКонПриИзменении()

// Обработчик события Нажатие кнопки настройки периода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	// Установка периода отбора
	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Обработчик события Выбор поля ВариантОтбора.
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ПолеНастройкиВариантОтбораПриИзменении(Элемент)

	// Установить настройки диалога по варианту отбора
	Если Элемент.Значение = 1 Тогда 
		УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора();
	ИначеЕсли Элемент.Значение = 2 Тогда 
		УстановитьНастройкиПоУмолчаниюДляНеисполненныхЗаказов();
	КонецЕсли;
	
	ПриИзмененииНастроекПоУмолчанию();
	
КонецПроцедуры // ПолеНастройкиВариантОтбораПриИзменении()

// Обработчик события Выбор поля ЗаполнениеСкладов.
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ПолеНастройкиЗаполнениеСкладовПриИзменении(Элемент)
	
	Если НЕ ПоказыватьТовары И НЕ ПоказыватьТару Тогда
		Возврат;
	КонецЕсли;

	ТекстВопроса = "Перед заполнением выбранные табличные части будут очищены. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, ЭтаФорма.Заголовок);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ОпределитьЧастичноеЗаполнение();
	
	Если ПоказыватьТовары Тогда
		Товары.Очистить();
		// Перераспределение номенклатуры по складам 
		ЗаполнитьТабличноеПолеТовары();
		РаспределитьНоменклатуруЗаказовПоСкладам(Товары);
	КонецЕсли;
	Если ПоказыватьТару Тогда
		ВозвратнаяТара.Очистить();
		// Перераспределение номенклатуры по складам 
		ЗаполнитьТабличноеПолеВозвратнаяТара();
		РаспределитьНоменклатуруЗаказовПоСкладам(ВозвратнаяТара);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеНастройкиНаличиеРезервов.
//
Процедура ПолеНастройкиНаличиеРезервовПриИзменении(Элемент)
	
	// Если с резервами, то доступен отбор по местоположение резервов
	Если Элемент.Значение = 3 Тогда 
		ФлагВидимостиРазмещениеРезервов = Истина;
	Иначе
		ФлагВидимостиРазмещениеРезервов = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
	
КонецПроцедуры // ПолеНастройкиНаличиеРезервовПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСрокОплатыСравнение.
//
Процедура ПолеНастройкиСрокОплатыСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = 1 ИЛИ Элемент.Значение = 6 Тогда 
		// По значению Не важно и Не заполнена скроем поля настройки отбора 
		ФлагВидимостиПросроченоДнейОплаты = Ложь;
		ФлагВидимостиДатыОплаты = Ложь;
	ИначеЕсли Элемент.Значение = 2 Тогда 
		// По значению Просрочен доступен отбор по Количеству дней
		ФлагВидимостиПросроченоДнейОплаты = Истина;
		ФлагВидимостиДатыОплаты = Ложь;
	Иначе
		// Доступен отбор по Дате оплаты
		ФлагВидимостиПросроченоДнейОплаты = Ложь;
		ФлагВидимостиДатыОплаты = Истина;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
			
КонецПроцедуры // ПолеНастройкиСрокОплатыСравнениеПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСрокОтгрузкиСравнение.
//
Процедура ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = 1 ИЛИ Элемент.Значение = 6 Тогда 
		// По значению Не важно и Не заполнена скроем поля настройки отбора 
		ФлагВидимостиПросроченоДнейОтгрузки = Ложь;
		ФлагВидимостиДатыОтгрузки = Ложь;
	ИначеЕсли Элемент.Значение = 2 Тогда 
		// По значению Просрочен доступен отбор по Количеству дней
		ФлагВидимостиПросроченоДнейОтгрузки = Истина;
		ФлагВидимостиДатыОтгрузки = Ложь;
	Иначе
		// Доступен отбор по Дате отгрузки
		ФлагВидимостиПросроченоДнейОтгрузки = Ложь;
		ФлагВидимостиДатыОтгрузки = Истина;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
			
КонецПроцедуры // ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеПросроченоДнейОтгрузки.
//
Процедура ПолеПросроченоДнейОтгрузкиПриИзменении(Элемент)

	// Сохраним значение поля данного ВидаЗаполнения
	СохранитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВариантОтбора), ПросроченоДнейОтгрузки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеПросроченоДнейОплаты.
//
Процедура ПолеПросроченоДнейОплатыПриИзменении(Элемент)
	
	// Сохраним значение поля для данного ВидаЗаполнения
	СохранитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВариантОтбора), ПросроченоДнейОплаты);
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	СтраницаПанели.Товары.Заголовок = "Товары (" + Товары.Количество() + " поз.)";
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + Услуги.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Обработчик события Выбор, открывает Документ по двойному щелчку в списке.
//
Процедура ТабличноеПолеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	Если (Колонка.Имя <> "Переносить") Тогда
		Если ВыбраннаяСтрока.Ссылка <> Неопределено Тогда
			ВыбраннаяСтрока.Ссылка.ПолучитьФорму(, ЭтаФорма).Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеЗаказыВыбор()

// Обработчик события НачалоВыбора элемента формы ТабличноеПолеОтбор.Значение.
//
Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "категории") Тогда
		// Ограничение списка категорий
		Назначение = СоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);
	ИначеЕсли Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "св-во") Тогда
		Свойство = СоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИспользоватьСвойстваИКатегории.
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)
	
	// Заполнить построитель для отбора
	ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета);
	
КонецПроцедуры

// Обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Отключим стандартную обработку для этой формы
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ФлажокТовары
//
Процедура ФлажокТоварыПриИзменении(Элемент)

	// Установим видимость таблицы Товары по значению флажка
	Если ПоказыватьТовары Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
	ИначеЕсли ПоказыватьТару ИЛИ ПоказыватьУслуги Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
		ПоказыватьТовары = Истина;
	КонецЕсли;

	УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ФлажокУслуги
//
Процедура ФлажокУслугиПриИзменении(Элемент)

	// Установим видимость таблицы Услуги по значению флажка
	Если ПоказыватьУслуги Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;
	ИначеЕсли ПоказыватьТовары ИЛИ ПоказыватьТару Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;
		ПоказыватьУслуги = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ФлажокТара
//
Процедура ФлажокТараПриИзменении(Элемент)

	// Установим видимость таблицы Тара по значению флажка
	Если ПоказыватьТару Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
	ИначеЕсли ПоказыватьТовары ИЛИ ПоказыватьУслуги Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
		ПоказыватьТару = Истина;
	КонецЕсли;

	УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Заказы".
//
Процедура ТабличноеПолеЗаказыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.НеЗаполнять Тогда
		ОформлениеСтроки.Ячейки.Переносить.ТолькоПросмотр = Истина;
		ОформлениеСтроки.ЦветФона = мЦветГруппы;
	Иначе
		ОформлениеСтроки.Ячейки.Переносить.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Отбор".
//
Процедура ТабличноеПолеОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.Имя = "Контрагент" 
	 ИЛИ ДанныеСтроки.Имя = "ДоговорКонтрагента" 
	 ИЛИ ДанныеСтроки.Имя = "Организация"
	 ИЛИ ДанныеСтроки.Имя = "ВалютаДокумента" Тогда
		ОформлениеСтроки.Ячейки.Использование.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Имя.ТолькоПросмотр           = Истина;
		ОформлениеСтроки.Ячейки.ВидСравнения.ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр      = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличного поля "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МеткаОстаткиПоСкладу = ДанныеСтроки.МеткаОстаткиПоСкладу;
    ДобавитьВДокумент = ДанныеСтроки.ДобавитьВДокумент;
	ОсталосьОтгрузить = ДанныеСтроки.ОсталосьОтгрузить;
	МожноОтгрузить = ДанныеСтроки.МожноОтгрузить;
	Заполнено = ?(мЧастичноеЗаполнение, ДанныеСтроки.Заполнено, 0);

	Если НЕ МеткаОстаткиПоСкладу И ДобавитьВДокумент > Мин(МожноОтгрузить - Заполнено, ОсталосьОтгрузить - Заполнено) Тогда
		
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.Шрифт = мЖирныйШрифт;
		
		Если мКонтролироватьПревышениеОбъемаЗаказа Тогда
			ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мКрасныйЦвет;
		Иначе
			ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мСинийЦвет;
		КонецЕсли;
	КонецЕсли;

	Если НЕ МеткаОстаткиПоСкладу И МожноОтгрузить < ОсталосьОтгрузить Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если НЕ МеткаОстаткиПоСкладу И ДобавитьВДокумент < (ОсталосьОтгрузить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ОсталосьОтгрузить.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если мУказаниеСкладовВТЧ И НЕ МеткаОстаткиПоСкладу Тогда
		ОформлениеСтроки.ЦветФона = мЦветГруппы;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗаказПокупателя) Тогда
		ДанныеСтроки.Пометка = Ложь;
		ДанныеСтроки.ДобавитьВДокумент = 0;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	ИначеЕсли мУказаниеСкладовВТЧ Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = НЕ МеткаОстаткиПоСкладу;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части "Товары".
//
Процедура ТоварыДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;

	Если мУказаниеСкладовВТЧ
	   И ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
		ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, Товары);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличного поля "Товары".
//
Процедура ТоварыПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;

	Если мУказаниеСкладовВТЧ Тогда
		Если ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
			УстановитьСнятьФлажкиГруппы(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары)
		Иначе
			УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ВозвратнаяТараПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ВозвратнаяТараПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МеткаОстаткиПоСкладу = ДанныеСтроки.МеткаОстаткиПоСкладу;
    ДобавитьВДокумент = ДанныеСтроки.ДобавитьВДокумент;
	ОсталосьОтгрузить = ДанныеСтроки.ОсталосьОтгрузить;
	МожноОтгрузить = ДанныеСтроки.МожноОтгрузить;
	Заполнено = ?(мЧастичноеЗаполнение, ДанныеСтроки.Заполнено, 0);

	Если НЕ МеткаОстаткиПоСкладу И ДобавитьВДокумент > Мин(МожноОтгрузить - Заполнено, ОсталосьОтгрузить - Заполнено) Тогда
		
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.Шрифт = мЖирныйШрифт;
		
		Если мКонтролироватьПревышениеОбъемаЗаказа Тогда
			ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мКрасныйЦвет;
		Иначе
			ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мСинийЦвет;
		КонецЕсли;
	КонецЕсли;

	Если НЕ МеткаОстаткиПоСкладу И МожноОтгрузить < ОсталосьОтгрузить Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если НЕ МеткаОстаткиПоСкладу И ДобавитьВДокумент < (ОсталосьОтгрузить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ОсталосьОтгрузить.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если мУказаниеСкладовВТЧ И НЕ МеткаОстаткиПоСкладу Тогда
		ОформлениеСтроки.ЦветФона = мЦветГруппы;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗаказПокупателя) Тогда
		ДанныеСтроки.Пометка = Ложь;
		ДанныеСтроки.ДобавитьВДокумент = 0;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	ИначеЕсли мУказаниеСкладовВТЧ Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = НЕ МеткаОстаткиПоСкладу;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока;

	Если мУказаниеСкладовВТЧ
	   И ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
		ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ВозвратнаяТара);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;

	Если мУказаниеСкладовВТЧ Тогда
		Если ТекущаяСтрока.МеткаОстаткиПоСкладу Тогда
			УстановитьСнятьФлажкиГруппы(ТекущаяСтрока.Пометка, ТекущаяСтрока, ВозвратнаяТара)
		Иначе
			УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, ВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Услуги".
//
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // УслугиПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Услуги".
//
Процедура УслугиПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // УслугиПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Услуги".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
    ДобавитьВДокумент = ДанныеСтроки.ДобавитьВДокумент;
	ОсталосьОтгрузить = ДанныеСтроки.ОсталосьОтгрузить;
	Заполнено = ?(мЧастичноеЗаполнение, ДанныеСтроки.Заполнено, 0);
	
	Если ДобавитьВДокумент > (ОсталосьОтгрузить - Заполнено) Тогда
		
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.Шрифт = мЖирныйШрифт;
		
		Если мКонтролироватьПревышениеОбъемаЗаказа Тогда
			ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мКрасныйЦвет;
		Иначе
			ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мСинийЦвет;
		КонецЕсли;
	КонецЕсли;

	Если ДобавитьВДокумент < (ОсталосьОтгрузить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ОсталосьОтгрузить.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗаказПокупателя) Тогда
		ДанныеСтроки.Пометка = Ложь;
		ДанныеСтроки.ДобавитьВДокумент = 0;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // УслугиПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ ЗАКАЗЫ

// Обработчик события Нажатие кнопки ВключитьВсе командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеВключитьВсе(Кнопка)
	
	// Установим все отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = Истина;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗаказыДействиеВключитьВсе()

// Обработчик события Нажатие кнопки ВыключитьВсе командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеВыключитьВсе(Кнопка)
	
	// Сбросим все отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗаказыДействиеВыключитьВсе()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеИнвертировать(Кнопка)

	// Инвертиртируем отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = НЕ Строка.Переносить;
	КонецЦикла;

КонецПроцедуры

// Обработчик события Нажатие кнопки Анализ командной панели табличного поля Заказы.
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.ТабличноеПолеЗаказы.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.ТабличноеПолеЗаказы.ТекущаяСтрока.Ссылка);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеАнализ()

// Обработчик события Нажатие кнопки Заполнить командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеЗаполнить(Кнопка)

	//Произведем отбор заказов по условиям отбора
	Если (ДатаНач > ДатаКон) И (ДатаКон <> Дата('00010101')) Тогда
		Предупреждение("Дата начала периода не может быть больше даты окончания периода!",,ЭтаФорма.Заголовок);
		Возврат;
	КонецЕсли;
	
	// Заполним Построитель параметрами из полей формы и выполним отбор
	ДатаНачала = НачалоДня(ДатаНач);
	ДатаОкончания = КонецДня(ДатаКон);
	ЗаполнитьПараметрыПостроителя(ПостроительОтчета);
	ПостроительОтчета.Выполнить();
	
	// Заполним список отобранных заказов
	ТабличноеПолеЗаказы.Очистить();
	ТабличноеПолеЗаказы = ПостроительОтчета.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	УстановитьДоступностьКнопокПанелиЗаказов();

	Если ТабличноеПолеЗаказы.Количество() > 0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеДалее.КнопкаПоУмолчанию = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеЗаполнить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельЗаказыДействиеЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ ТОВАРЫ

// Обработчик события Нажатие кнопки "Установить все флажки" командной панели табличного поля Товары. 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеУстановитьФлажки()

// Обработчик события Нажатие кнопки "Снять все флажки" командной панели табличного поля Товары. 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСнятьФлажки()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля Товары.
//
Процедура КоманднаяПанельТоварыДействиеИнвертировать(Кнопка)

	// Инвертиртируем отметки в таблице Товары формы.
	Для Каждого Строка Из Товары Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;

КонецПроцедуры

// Обработчик события Нажатие кнопки Анализ командной панели табличного поля Товары.
// вызывает анализ текущего состояния заказа.
//
Процедура КоманднаяПанельТоварыДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.Товары.ТекущаяСтрока.ЗаказПокупателя);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Товары);

КонецПроцедуры // КоманднаяПанельТоварыОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(Товары, "МожноОтгрузить");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ ВОЗВРАТНАЯ ТАРА

// Обработчик события Нажатие кнопки "Установить все флажки" командной панели табличного поля ВозвратнаяТара.
// командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеУстановитьФлажки()

// Обработчик события Нажатие кнопки "Снять все флажки" командной панели табличного поля ВозвратнаяТара.
// командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеСнятьФлажки()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля ВозвратнаяТара.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеИнвертировать(Кнопка)

	// Инвертиртируем отметки в таблице ВозвратнаяТара формы.
	Для Каждого Строка Из ВозвратнаяТара Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;

КонецПроцедуры

// Обработчик события Нажатие кнопки Анализ командной панели табличного поля ВозвратнаяТара.
// вызывает анализ текущего состояния заказа.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока <> Неопределено Тогда
		
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока.ЗаказПокупателя);
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(ВозвратнаяТара, "МожноОтгрузить");

КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ УСЛУГИ

// Обработчик события Нажатие кнопки "Установить все флажки" командной панели табличного поля Услуги.
// командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеУстановитьФлажки()

// Обработчик события Нажатие кнопки "Снять все флажки" командной панели табличного поля Услуги.
// командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеСнятьФлажки()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля Услуги.
//
Процедура КоманднаяПанельУслугиДействиеИнвертировать(Кнопка)

	// Инвертиртируем отметки в таблице Услуги формы.
	Для Каждого Строка Из Услуги Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;

КонецПроцедуры

// Обработчик события Нажатие кнопки Анализ командной панели табличного поля Услуги.
// вызывает анализ текущего состояния заказа.
//
Процедура КоманднаяПанельУслугиДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.Услуги.ТекущаяСтрока <> Неопределено Тогда
		
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.Услуги.ТекущаяСтрока.ЗаказПокупателя);
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(Услуги, "ОсталосьОтгрузить");

КонецПроцедуры // КоманднаяПанельУслугиЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОСНОВНЫЕ ДЕЙСТВИЯ ФОРМЫ

// Обработчик события Нажатие кнопки Далее.
//
Процедура ОсновныеДействияФормыДействиеДалее(Кнопка)
	
	// Проверим наличие строк в таблице.
	Если ТабличноеПолеЗаказы.Количество() = 0 Тогда
		Предупреждение("Не выбраны документы!");
		Возврат;
	КонецЕсли;
	
	//Перенесем заказы в таблицу заполнения
	
	// Выберем отмеченные
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Переносить", Истина);
	НайденныеСтроки = ТабличноеПолеЗаказы.НайтиСтроки(СтруктураОтбора);
	
	// Если есть отмеченные 
	Если НайденныеСтроки.Количество() = 0 Тогда
		Предупреждение("Не выбраны документы!");
		Возврат;
	КонецЕсли;
	
	СписокЗаказов.Очистить();
	Для Каждого Строка Из НайденныеСтроки Цикл
		СписокЗаказов.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	// Установить доступные способы заполнения документа реализации
	УстановитьСпособЗаполнения();
	
	// Заполнить табличные поля номенклатурой
	ЗаполнитьПанельОтбораНоменклатуры();
	
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ВозвратнаяТара.Количество() = 0 Тогда
		// Заполнять нечем
		Предупреждение("По выбранным заказам покупателей отсутствует номенклатура для заполнения.");
		Возврат;
		
	КонецЕсли;
	
	ПерейтиНаСтраницу("Страница2");
	
	// Установить режим доступности и видимости для элементов страницы
	УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры();
	
	// Установить доступность кнопок командных панелей
	УстановитьДоступностьКнопокПанелейТабЧастей();
	
	ЭлементыФормы.ОсновныеДействияФормы1.Кнопки.ДействиеПеренести.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ОсновныеДействияФормыДействиеДалее()

// Обработчик события Нажатие кнопки Назад.
//
Процедура ОсновныеДействияФормыДействиеНазад(Кнопка)
	
	ПерейтиНаСтраницу("Страница1");
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеДалее.КнопкаПоУмолчанию = Истина;

КонецПроцедуры // ОсновныеДействияФормыДействиеНазад()

// Обработчик события Нажатие кнопки Перенести.
//
Процедура ОсновныеДействияФормыДействиеПеренести(Кнопка)

	// Проверим наличие строк в таблице Товары.
	ЕстьТовары = Ложь;
	Если ПоказыватьТовары И НЕ Товары.Количество() = 0 Тогда
		Таблица = Товары.Скопировать();
		Таблица.Свернуть("Пометка", "ДобавитьВДокумент");
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ДобавитьВДокумент > 0 Тогда
				ЕстьТовары = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим наличие строк в таблице Услуги.
	ЕстьУслуги = Ложь;
	Если ПоказыватьУслуги И НЕ Услуги.Количество() = 0 Тогда
		Таблица = Услуги.Скопировать();
		Таблица.Свернуть("Пометка", "ДобавитьВДокумент");
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ДобавитьВДокумент > 0 Тогда
				ЕстьУслуги = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим наличие строк в таблице Тара.
	ЕстьТара   = Ложь;
	Если ПоказыватьТару И НЕ ВозвратнаяТара.Количество() = 0 Тогда
		Таблица = ВозвратнаяТара.Скопировать();
		Таблица.Свернуть("Пометка", "ДобавитьВДокумент");
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ДобавитьВДокумент > 0 Тогда
				ЕстьТара = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЕстьТовары И НЕ ЕстьУслуги И НЕ ЕстьТара Тогда
		Предупреждение("Нет номенклатуры для добавления!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиДокумента();

КонецПроцедуры // ОсновныеДействияФормыДействиеПеренести()

НП = Новый НастройкаПериода;

мКрасныйЦвет  = ЦветаСтиля.ЦветОтрицательногоЧисла;
мСинийЦвет    = ЦветаСтиля.ТекстИнформационнойНадписи;
мЦветГруппы   = ЦветаСтиля.ЦветФонаФормы;
мЦветТекста   = ЦветаСтиля.ЦветТекстаПоля;
мОбычныйШрифт = Новый Шрифт(,,);
мЖирныйШрифт  = Новый Шрифт(,, Истина);

мИспользоватьТару = глЗначениеПеременной("ИспользоватьВозвратнуюТару");

мЧастичноеЗаполнение = Ложь;
мКонтролироватьПревышениеОбъемаЗаказа = НЕ УправлениеДопПравамиПользователей.РазрешеноПревышениеОбъемаЗаказаПриОтгрузке();


