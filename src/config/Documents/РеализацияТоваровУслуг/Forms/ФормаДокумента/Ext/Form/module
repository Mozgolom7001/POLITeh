////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОповещатьВладельцаОЗакрытии Экспорт;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мСклад;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, мКолонкиТаблицаАвтоСкидок;

Перем мКоличествоПредыдущее;
Перем мЦенаПредыдущая;

Перем мРазрешитьНулевыеЦеныВОпте, мРазрешитьНулевыеЦеныВРознице;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСклада;

Перем мФормаСоставНабора, мТекущаяСтрокаНабор;

Перем мТерминалы;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСделки, мСтароеЗначениеСклада;

Перем мОтражатьВРегламентированномУчете;
Перем мПоДокументамРасчетов;

Перем мКурсСтрокиДокументаРасчетов;

Перем мКартинкаСерийныеНомера, мКартинкаНаборКомплект;
Перем мКачество;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Флаги наличия реквизитов и табличных частей
Перем мИспользоватьТару;

Перем мНоваяСтрока;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
													 УчетНДС.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураВыданный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Процедура вызывается для обработки программного изменения строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", изменение которой нужно обработать.
//  ИзмененнаяКолонка - название колонки, обработчик изменения которой необходимо вызвать.
//
Процедура ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, ИзмененнаяКолонка) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	Если ИзмененнаяКолонка = "Номенклатура" Тогда
		ПриИзмененииНоменклатурыТовары(ЭлементыФормы.Товары);
	ИначеЕсли ИзмененнаяКолонка = "Количество" Тогда
		ПриИзмененииКоличестваТовары(ЭлементыФормы.Товары);
	КонецЕсли;

КонецПроцедуры // ИзменениеСтрокиПрограммное()

// Процедура вызывается для обработки программного удалениия строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", которую нужно удалить.
//
Процедура УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	ПередУдалениемТовары(ЭлементыФормы.Товары, Ложь);

	Товары.Удалить(СтрокаТабличнойЧасти);

	ПослеУдаленияТовары(ЭлементыФормы.Товары);

КонецПроцедуры // УдалениеСтрокиПрограммное()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// <Процедура ОбработчикИзмененияДанных обслуживает подключенные обработчики изменения данных>
//
// Параметры
//  <ИмяЭлемента>  – <Строка> – <Путь к данным>
//
Процедура ОбработчикИзмененияДанных(ИмяЭлемента)

	Если ИмяЭлемента = "ДокументОбъект.ОтражатьВУправленческомУчете" ИЛИ ИмяЭлемента = "ДокументОбъект.ВидПередачи" Тогда
		мФормаОформитьДокументы = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
		Если НЕ мФормаОформитьДокументы.мОткрыта = Неопределено Тогда
			мФормаОформитьДокументы.УстановитьДоступность();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработчикИзмененияДанных()


//Обновить данные строки
//Процедура ОбновитьДанныеСтроки(ТекущаяСтрока,СтруктураНовыхЗначений)
//	Перем ПоляДляОбновления;
//	СтруктураНовыхЗначений.Свойство("ПоляДляОбновления",ПоляДляОбновления);
//	Для Каждого ЭлементСтруктуры Из ПоляДляОбновления Цикл
//		ТекущаяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
//	КонецЦикла;
//	ПриИзмененииНоменклатурыТоваров(ТекущаяСтрока);
//	ТоварыПриНачалеРедактирования(ЭлементыФормы.Товары, мНоваяСтрока);
//КонецПроцедуры

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()

	СуммаВзаиморасчетов = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + 
	                      УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
						  
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
	КонецЕсли;

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении контрагента.
//
Процедура ПриИзмененииКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура выполняет необходимые действия при изменении дисконтной карты.
//
Процедура ПриИзмененииДисконтнойКарты()

	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Если ЗначениеЗаполнено(ДисконтнаяКарта.ВладелецКарты)
		   И ДисконтнаяКарта.ВладелецКарты <> Контрагент Тогда
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Ответ = КодВозвратаДиалога.Да;
			Иначе
				Ответ = Вопрос("У выбранной дисконтной карты владелец " + СокрЛП(ДисконтнаяКарта.ВладелецКарты) + "."
				   + Символы.ПС + "Изменить контрагента в документе?", РежимДиалогаВопрос.ДаНет);
			КонецЕсли;

			Если Ответ = КодВозвратаДиалога.Да Тогда
				Контрагент = ДисконтнаяКарта.ВладелецКарты;
				ПриИзмененииКонтрагента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииНоменклатурыТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД(СтрокаТабличнойЧасти);

	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

// Процедура выполняет необходимые действия при изменении количества в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииКоличестваТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииКоличестваТовары()

// Процедура выполняет необходимые действия перед удалением строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//  Отказ - флаг отказа.
//
Процедура ПередУдалениемТовары(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
		мФормаСоставНабора.Закрыть();
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
		Поиск = Новый Структура();
		Поиск.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		Строки = СерийныеНомера.НайтиСтроки(Поиск);
		Для Каждого СерийныйНомер Из Строки Цикл
			СерийныеНомера.Удалить(СерийныйНомер);
		КонецЦикла;
	КонецЕсли;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПередУдалениемТовары()

// Процедура выполняет необходимые действия после удаления строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПослеУдаленияТовары(Элемент)

	УстановитьАвтоотметкуСклада();

	ПересчитатьАвтоматическиеСкидки();

	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;

КонецПроцедуры // ПослеУдаленияТовары()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Реализация");
	Если ЕстьКолонкаЗаказ Тогда
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Товары, "ЗаказПокупателя");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, ВозвратнаяТара, "ЗаказПокупателя");
        УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Услуги, "ЗаказПокупателя");
	КонецЕсли;

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	ПересчитатьАвтоматическиеСкидки();
	
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект = ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	//установка автоотметки незаполненного для заказа в табличной части
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, ЭлементыФормы.Сделка);
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	ВидСклада = Склад.ВидСклада;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	ИначеЕсли ВидСклада = Перечисления.ВидыСкладов.Розничный И мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка)
		  или (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		          И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя (счет на оплату).
							  |Заполнение невозможно.";
	
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя + " не проведен.
							  |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги();
		КонецЕсли;
	Иначе
		Если ТабличнаяЧасть = Товары 
		 Или ТабличнаяЧасть = ВозвратнаяТара Тогда

			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, Сделка);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			ЗаполнитьУслугиПоОстаткамУпр();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;

		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
				СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
			РазворачиватьДоКачества = ТабличнаяЧасть = Товары;
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги",        "По услугам предприятия");

		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	РазворачиватьДоКачества = Ложь;
	ЕстьЦена                = мМожноМенятьЦенуВДокументе;
	ЕстьСерия               = Истина;
	СкрыватьХарактеристику  = Ложь;
	Валюта                  = ВалютаДокумента;
	СпособЗаполненияЦен     = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Качество                = ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, Справочники.Качество.Новый, Неопределено);
	ПодбиратьУслуги         = Ложь;

	ЕстьСкладВТабличнойЧасти = мУказаниеСкладовВТЧ;

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда                  = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия                = Ложь;
		ИмяТабличнойЧасти        = "Услуги";
		Качество                 = Неопределено;
		ЕстьСкладВТабличнойЧасти = Ложь;
		СкрыватьХарактеристику   = Истина;
		ПодбиратьУслуги          = Истина;

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"                 , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("КачествоПоУмолчанию"          , ПолучитьКачествоНоменклатуры());
	СтруктураПараметровПодбора.Вставить("Склад"                        , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                       , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"           , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"                   , Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"                       , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"                  , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"                     , Качество);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"          , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"                     , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"                    , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"              , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества"      , РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику"       , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("ИспользоватьГруппуДоступности", Истина);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"              , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"                , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти"     , ЕстьСкладВТабличнойЧасти);
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"             , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "Сделка"));

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Функция получает качество для подстановки значения качества при построчном вводе в табличную часть "Товары"
// или при подборе номенклатуры с помощью обработки "Подбор номенклатуры" или обработки ввод серийных номеров
// Рассчитывает качество только для вида операции "Брак", для других случаев качество по умолчанию новое.
//
// Параметры:
// Качество                  - СправочникСсылка.Качество, необязательный параметр, если параметр заполнен он же возвращается,
//                             ситуация возможна при варианте подбора через обработку подбор номенклатуры или обработку ввода серийных номеров.
//
// Возвращаемое значение:
// СправочникСсылка.Качество - для вида операции "Брак" возвращается качество отличное от Нового и если количество таких элементов равное одному,
//                             в остальных случаях пустая ссылка справочника качество.
//                           - для остальных видов операций качество по умолчанию новое.
//
Функция ПолучитьКачествоНоменклатуры(Качество = Неопределено)
	Перем Результат;

	Если ЗначениеЗаполнено(Качество) Тогда
		возврат Качество;
	КонецЕсли;

	Если НЕ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		// Для отличного вида операции от Брак, качество новое.
		возврат Справочники.Качество.Новый;
	КонецЕсли;

	Если НЕ мКачество = Неопределено Тогда
		возврат мКачество;
	КонецЕсли;
	Результат = Справочники.Качество.ПустаяСсылка();

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Качество.Ссылка КАК Качество
	|ИЗ
	|	Справочник.Качество КАК Качество
	|ГДЕ
	|	НЕ Качество.Ссылка = ЗНАЧЕНИЕ(Справочник.Качество.Новый)
	|";
	таблицаКачество = Запрос.Выполнить().Выгрузить();
	Если таблицаКачество.Количество() = 1 Тогда
		Результат = таблицаКачество[0]["Качество"];
	КонецЕсли;
	мКачество = Результат;
	Возврат Результат;
КонецФункции // ПолучитьКачествоНоменклатуры()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество, ВыборИзСправочника;
	
	ЗначениеВыбора.Свойство("ВыборИзСправочника", ВыборИзСправочника);
	ВыборИзСправочника = ВыборИзСправочника = Истина;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   (ТабличнаяЧасть <> Товары Или ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия)) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен,
	                                      СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);

	ЗначениеВыбора.Свойство("Серия"   , Серия);
	ЗначениеВыбора.Свойство("Качество", Качество);

	Если НЕ ЗначениеВыбора.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти) Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	Если ВыборИзСправочника Тогда
		
		СтрокаТабличнойЧасти = Неопределено;
		ЗначениеВыбора.Свойство("ТекущиеДанные",СтрокаТабличнойЧасти);
		
	Иначе
		
		СтруктураОтбора = Новый Структура();

		Если ТабличнаяЧасть = Товары Тогда
			Качество = ПолучитьКачествоНоменклатуры(Качество);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
			СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
			Если ЗначениеЗаполнено(Качество) Тогда
				СтруктураОтбора.Вставить("Качество"         , Качество);
			КонецЕсли;
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
				СтруктураОтбора.Вставить("Цена", Цена);
			КонецЕсли;
		Иначе
			СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		КонецЕсли;

		Если ЕстьСкладВТабличнойЧасти
		   И ТабличнаяЧасть <> Услуги
		   И ЗначениеЗаполнено(Склад) Тогда
			СтруктураОтбора.Вставить("Склад", Склад);
		КонецЕсли;
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
			Если ВыборИзСправочника Тогда
				ОбработкаТабличныхЧастей.ОбновитьДанныеСтроки(СтрокаТабличнойЧасти,ЗначениеВыбора);
				ТоварыПриНачалеРедактирования(ЭлементыФормы.Товары, мНоваяСтрока);
				ТоварыНоменклатураПриИзменении(ЗначениеВыбора["ВладельцыФормы"]["Элемент"]);
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			Если Цена <> Неопределено Тогда
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 СпособЗаполненияЦен,
				                                                 ТипЦен.ЦенаВключаетНДС,
				                                                 УчитыватьНДС,
				                                                 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
			КонецЕсли;

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД(СтрокаТабличнойЧасти);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Цена;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
				                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;

			Если Цена <> Неопределено Тогда

				// Пересчитаем цену в валюту документа.
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 СпособЗаполненияЦен,
				                                                 ТипЦен.ЦенаВключаетНДС,
				                                                 УчитыватьНДС,
				                                                 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	Если НЕ ВыборИзСправочника Тогда
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	КонецЕсли;
	
	

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЕстьКолонкаЗаказ Тогда
		ТаблицаЗаказов = ТаблицаИсточник.Скопировать();
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		СписокЗаказов = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаЗаказов Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) Тогда
				СписокЗаказов.Добавить(Строка.ЗаказПокупателя.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокЗаказов.Количество() > 0 Тогда
			СписокЗаказов.Добавить(Сделка);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокЗаказов",   СписокЗаказов);
	Иначе
		Запрос.УстановитьПараметр("ЗаказПокупателя", Сделка);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента" 
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");
	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();
	СтрокаИндекса = "Номенклатура";
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаИндекса = СтрокаИндекса + ",ХарактеристикаНоменклатуры";
	КонецЕсли;
	ТаблицаЦенСкидок.Индексы.Добавить(СтрокаИндекса);

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	ТаблицаИсточникКоличество = ТаблицаИсточник.Количество();
	Пока НомерСтроки < ТаблицаИсточникКоличество Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;

		Если ЕстьКолонкаЗаказ И ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		ИначеЕсли ЕстьКолонкаЗаказ И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", Сделка);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл

			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда

				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда

					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
						СтрокаТаблицы.УсловиеАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.УсловиеАвтоматическойСкидки;
						СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.ЗначениеУсловияАвтоматическойСкидки;

						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;

						Если ТабличнаяЧасть = Товары Тогда

							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);
						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];

				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Добавить();
                    КопияСтроки[ИмяРеквизитаКоличества] = СтрокаТаблицы[ИмяРеквизитаКоличества];


					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

						КонецЕсли;
					КонецЕсли;
                    ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаТаблицы,,ИмяРеквизитаКоличества);

					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обработанную таблицу
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОрганизацияЗаказа                   = Сделка.Организация;
		ДатаЗаказа                          = Сделка.Дата;
		ОрганизацияЯвляетсяПлательщикомЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ОрганизацияЗаказа, ДатаЗаказа);
	КонецЕсли;
	
	КопияТабличнойЧасти = ТабличнаяЧасть.Выгрузить();
    ТабличнаяЧасть.Загрузить(ТаблицаИсточник);

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ЕстьКолонкаЗаказ И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;

		Если ТабличнаяЧасть = Товары Тогда

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
            Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			// Заполнение цены зависит от розничности операции.
			//Заказ для получения курса и кратности извлекается либо из таб. части либо из шапки
			Если ЕстьКолонкаЗаказ Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
					текЗаказ = СтрокаТабличнойЧасти.ЗаказПокупателя;
				Иначе
					текЗаказ = Сделка;
				КонецЕсли;
			Иначе
				текЗаказ = Сделка;
			КонецЕсли;
			Если ЗначениеЗаполнено(текЗаказ) Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
												МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
												текЗаказ.ВалютаДокумента, ВалютаДокумента,
												ЗаполнениеДокументов.КурсДокумента(текЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
												ЗаполнениеДокументов.КратностьДокумента(текЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
												Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
												текЗаказ.СуммаВключаетНДС,
												УчитыватьНДС,
												СуммаВключаетНДС,
												УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            КонецЕсли;
			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
            Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
				СтрокаТабличнойЧасти.Склад = Склад;
			КонецЕсли;

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Заполняем реквизиты табличной части.
			Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, ОрганизацияЗаказа, ДатаЗаказа, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;

	КонецЦикла;
	
	Если КопияТабличнойЧасти.Количество()>0 Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТабличнойЧасти, ТабличнаяЧасть);
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаХарактеристика       = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика       = "";
	КонецЕсли;
	
	Если ЕстьКолонкаЗаказ Тогда
		СтрокаЗаказ = ", ЗаказПокупателя";
	Иначе
		СтрокаЗаказ = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Услуги Тогда
		СтрокаСпособСписания = ", СпособСписанияОстаткаТоваров";
	Иначе
		СтрокаСпособСписания = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Услуги И мУказаниеСкладовВТЧ Тогда
		СтрокаСклад = ", Склад";
	Иначе
		СтрокаСклад = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары И мЕстьКолонкаСерии Тогда
		СтрокаСерия = ", СерияНоменклатуры";
	Иначе
		СтрокаСерия = "";
	КонецЕсли;
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	Для каждого Колонка из КопияТабличнойЧасти.Колонки цикл
		ИмяКолонки = Колонка.Имя;
		Если ИмяКолонки = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "Количество" или ИмяКолонки = "Сумма" или ИмяКолонки = "КоличествоМест" или ИмяКолонки = "СуммаНДС" Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(КолонкиСуммирования="","",",") + ИмяКолонки ;
			Продолжить;
		КонецЕсли;
		КолонкиГруппировок = КолонкиГруппировок + ?(КолонкиГруппировок="","",",") + ИмяКолонки ;
	КонецЦикла;

	ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	ТабличнаяЧасть.Сортировать("Номенклатура" + СтрокаХарактеристика + СтрокаЗаказ + СтрокаСклад + СтрокаСерия + СтрокаСпособСписания + ", Цена");


КонецПроцедуры // ОбработкаЗаполнения()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		мОрганизацияЯвляетсяПлательщикомЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", Организация, Дата);
		мТекущаяОрганизация                  = Организация;
	Иначе
		РаботаСДиалогами.ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Очищает значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита, КромеУслуг = Ложь)
	
	// Очистим значения в строках
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

	Если мИспользоватьТару Тогда
		Для Каждого Строка Из ВозвратнаяТара Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;

	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заменяет значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение, КромеУслуг = Ложь)
	
	// Заменим значения в строках
	Для Каждого Строка Из Товары Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;

	Для Каждого Строка Из ВозвратнаяТара Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;

	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет значение реквизита "Заказ покупателя" в табличных частях при изменении "Сделки".
//
Процедура ИзменитьЗаказВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() + Услуги.Количество() + ВозвратнаяТара.Количество()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если колонка заказ недоступна - очистим заказ в табличных частях и выходим
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);
	
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
		Возврат;
	КонецЕсли;

	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Сделка) И НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ТипЗнч(мСтароеЗначениеСделки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка <> мСтароеЗначениеСделки Тогда // Изменен заказ в шапке
		
		// Получим список заказов из табличных частей документа
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "ЗаказПокупателя");
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Услуги, "ЗаказПокупателя", СписокЗаказов);
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "ЗаказПокупателя", СписокЗаказов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) Тогда
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокЗаказов.Количество() = 0 И ЗначениеЗаполнено(Сделка) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение заказа в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокЗаказов.НайтиПоЗначению(мСтароеЗначениеСделки) = Неопределено Тогда
			// В табличных частях есть строки со старым значением сделки
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				ТекстВопроса = "Очистить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение заказа");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСделки = Сделка;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗаказВТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = Ложь;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.КодТНВЭД, Дата >= '20160701'); // учет НДС по ФЗ-150
	
	ВидимостьСпособаСписания = Ложь;
	Если НЕ (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак) Тогда

		//видимость колонки ЗаказПокупателя определили ранее с помощью процедуры УстановитьВидимостьКолонкиЗаказ 
		ВидимостьКолонкиЗаказ = мКолонкиТовары.ЗаказПокупателя.Видимость;
		Если ВидимостьКолонкиЗаказ Тогда
			ВидимостьСпособаСписания = Истина;
		Иначе
			Если ЗначениеЗаполнено(Сделка) Тогда
				ВидимостьСпособаСписания = (Сделка.Метаданные().Имя = "ЗаказПокупателя");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Если ВидимостьСпособаСписания <> мКолонкиТовары.СпособСписанияОстаткаТоваров.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
	КонецЕсли;

	// Видимость страниц
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭтоАктВыполненныхРабот = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот);
	ЭтоАктНаПередачуПрав   = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = НЕ (ЭтоКомиссия ИЛИ ЭтоАктНаПередачуПрав);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость   = НЕ (ЭтоАктВыполненныхРабот ИЛИ ЭтоАктНаПередачуПрав);

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.Подразделение.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделение.Видимость = ОтражатьВУправленческомУчете;

	// Качество указывается только для брака
	ВидимостьКолонкиКачества = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Качество, ВидимостьКолонкиКачества);
	
	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);

	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	ЭлементыФормы.НадписьГрузоотправитель.Видимость 		 = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.Грузоотправитель.Видимость        		 = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.НадписьГрузополучатель.Видимость  		 = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.Грузополучатель.Видимость         		 = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.НадписьАдресДоставки.Видимость             = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.АдресДоставки.Видимость                    = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.НадписьДополнениеКАдресуДоставки.Видимость = НЕ ЭтоАктВыполненныхРабот;
	ЭлементыФормы.ДополнениеКАдресуДоставки.Видимость        = НЕ ЭтоАктВыполненныхРабот;
	
	РаботаСДиалогами.УстановитьСвойстваЭлементовОтправкиЭлектронногоЧека(ЭлементыФормы, Истина);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает видимость реквизитов, управления контролем взаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьКонтроляВзаиморасчетов()

	ФлагВидимости = УправлениеВзаиморасчетами.ЕстьРазрешениеПроводитьБезКонтроляВзаиморасчетов();

	ЭлементыФормы.РамкаКонтрольВзаиморасчетов.Видимость     = ФлагВидимости;
	ЭлементыФормы.ОтключитьКонтрольВзаиморасчетов.Видимость = ФлагВидимости;

КонецПроцедуры // УстановитьВидимостьКонтроляВзаиморасчетов()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для Склада
//
Процедура УстановитьАвтоотметкуСклада()

	Автоотметка = мАвтоОтметкаСклада 
	              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);

	ЭлементыФормы.Склад.АвтоотметкаНезаполненного = Автоотметка;
	
	Если ЭлементыФормы.Склад.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Склад) Тогда
		ЭлементыФормы.Склад.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

	ПересчетСуммВзаиморасчетов();

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый()
	   И ЗначениеЗаполнено(ПараметрОснование)
	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	   И НЕ ПараметрОснование.Проведен Тогда
	   
		ТекстВопроса = "Заказ покупателя не проведен, документ не будет заполнен, продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//Видимость автоматических скидок.
	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();
	мКолонкиУслуги.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = МожноРассчитыватьАвтоматическиеСкидки();

	// Начало ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда
	
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);
	
		Если ЗначениеЗаполнено(ДоговорКонтрагента)
		   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			ОтражатьВНалоговомУчете = Ложь;
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	
	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	
	СтруктураКолонок = Новый Структура();
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");
	
	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	СтруктураКолонок.Вставить("Качество");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ПриИзмененииОблагаетсяЕНВД();
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТаблицаАвтоСкидок);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);
	
	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.Склад, "Склад", мУказаниеСкладовВТЧ);
	
	//Запомним автоотметку поля шапки Склад
	мАвтоОтметкаСклада = ЭлементыФормы.Склад.АвтоОтметкаНезаполненного;
	
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы, ЭлементыФормы.Сделка);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьВидимостьКонтроляВзаиморасчетов();
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьАвтоотметкуСклада();

	ПриИзмененииВидаСклада();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();
	
	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;
	
	мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;
	
	мКолонкиУслуги.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",                         "Товары");
	Страницы.Добавить("Тара",                           "ВозвратнаяТара");
	Страницы.Добавить("Услуги",                         "Услуги");
	Страницы.Добавить("ДокументыРасчетовСКонтрагентом", "ДокументыРасчетовСКонтрагентом");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	мСклад = Склад;

	// Сохраним текущее значение сделки
	мСтароеЗначениеСделки = Сделка;
	мСтароеЗначениеСклада = Склад;

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	РаботаСДиалогами.УстановитьДоступностьМенюПроверить(ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

	ЭтаФорма.ПодключитьОбработчикИзмененияДанных("ВидПередачи"                 , "ОбработчикИзмененияДанных");
	ЭтаФорма.ПодключитьОбработчикИзмененияДанных("ОтражатьВУправленческомУчете", "ОбработчикИзмененияДанных");

	// Начало ЭлектронныеДокументы
	ЭлектронныеДокументыКлиент.ПриОткрытии(ЭтаФорма);
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

	Если ЭтоНовый() И ПараметрОбъектКопирования = Неопределено Тогда
		РаботаСДиалогами.УстановитьАдресЭПДляОтправкиЧека(ЭтотОбъект, Справочники.Контрагенты.ПустаяСсылка(), Контрагент, 
			ЭлементыФормы.АдресЭП.Видимость);
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = "Товары (";
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьТару Тогда
				ОбработкаЗаполнения(ВозвратнаяТара, ЗначениеВыбора.ВозвратнаяТара);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьУслуги Тогда
				ОбработкаЗаполнения(Услуги, ЗначениеВыбора.Услуги);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Ценообразование.ПроверитьВозможностьЗаменыДисконтнойКарты(ЭтотОбъект, ПолучитьЗначениеУчетнойПолитики());

	// Начало ЭлектронныеДокументы
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПослеЗаписи()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Начало ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	Иначе // ИмяСобытия = "ОбновитьОСобытияхЭДО"
		ЭлектронныеДокументыКлиентПереопределяемый.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	КонецЕсли;	
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[Кнопка.Имя];
		Если НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот
			ИЛИ НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав Тогда
			
			Если НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
				ИмяТЧ1 = "Товары";
				СинонимТЧ1 = "Товары";
			ИначеЕсли НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав Тогда
				ИмяТЧ1 = "Услуги";
				СинонимТЧ1 = "Услуги";
			КонецЕсли;
			ИмяТЧ2 = "ВозвратнаяТара";
			СинонимТЧ2 = "Тара";

			ТекстВопроса = "";
			ТабличныеЧастиДляОчистки = Новый Массив;
			
			Если ЭтотОбъект[ИмяТЧ1].Количество() > 0 И ЭтотОбъект[ИмяТЧ2].Количество() > 0 Тогда
				
				ТекстВопроса = "При изменении вида операции табличные части <"+СинонимТЧ1+"> и <"+СинонимТЧ2+"> будут очищены. Продолжить?";
				ТабличныеЧастиДляОчистки.Добавить(ИмяТЧ1);
				ТабличныеЧастиДляОчистки.Добавить(ИмяТЧ2);
				
			ИначеЕсли ЭтотОбъект[ИмяТЧ1].Количество() > 0 Тогда
				
				ТекстВопроса = "При изменении вида операции табличная часть <"+СинонимТЧ1+"> будет очищена. Продолжить?";
				ТабличныеЧастиДляОчистки.Добавить(ИмяТЧ1);
				
			ИначеЕсли ЭтотОбъект[ИмяТЧ2].Количество() > 0 Тогда
				
				ТекстВопроса = "При изменении вида операции табличная часть <"+СинонимТЧ2+"> будет очищена. Продолжить?";
				ТабличныеЧастиДляОчистки.Добавить(ИмяТЧ2);
				
			КонецЕсли;
			
			Если ТабличныеЧастиДляОчистки.Количество() > 0  Тогда
				
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Изменение вида операции");
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот И 
				ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
				ТекстВопроса = "Для данного вида операции недопустимо использовать договор вида ""С комиссионером"". Договор будет очищен. Продолжить?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Изменение вида операции");
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			// Если дошли до этой строки значит пользователь на все вопросы ответил утвердительно.
			Если ТабличныеЧастиДляОчистки.Количество() > 0  Тогда
				Для каждого ИмяТабличнойЧасти Из ТабличныеЧастиДляОчистки Цикл
					ЭтотОбъект[ИмяТабличнойЧасти].Очистить();
				КонецЦикла;
				ПересчитатьАвтоматическиеСкидки();
			КонецЕсли;
			Если НовыйВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот И 
				ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				ПриИзмененииДоговора();
			КонецЕсли;
		КонецЕсли;
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[Кнопка.Имя];
		РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоПоступлениюТоваровУпр(Поступление);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки.
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены           = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров            = мСписокФильтров;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);
	СтруктураПараметров.Вставить("ЗаголовокФормы",    "Состав набора-комплекта");

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению(Кнопка)
	
	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Поступление);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном устройстве.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)
	
	Перем ФУ;

	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном устройстве!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляПробитияЧека(ФУ, Истина, Организация, Истина) Тогда
		Возврат;
	КонецЕсли;

	ОбъектДрайвера = Неопределено;
	ОбработкаОбслуживания = Неопределено;
	ПолучитьСерверТО().ПолучитьОбъектДрайвера(ФУ, ОбработкаОбслуживания, ОбъектДрайвера);
	
	ОбработкаОбслуживания.ПолучитьПараметрыККТ(ОбъектДрайвера);
	ВерсияФормата = МенеджерОборудованияКлиентСервер.ВерсияФФД(ОбъектДрайвера.ВыходныеПараметры);
	Если ВерсияФормата <= "1.0" Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("При использовании ФФД 1.0 фискализация чека из товарных документов не поддерживается");
		Возврат;
	КонецЕсли;
	
	Если (НЕ Проведен) ИЛИ Модифицированность Тогда
		Ответ = Вопрос("Провести документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Предупреждение("Операция не выполнена!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	
	Если (НЕ Проведен) ИЛИ Модифицированность Тогда
		Предупреждение("Операция не выполнена!");
		Возврат;
	КонецЕсли;

	ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФУ);
	Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Кассовая смена не открыта");
		Возврат;
	КонецЕсли;
	
	ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ПараметрыЧека.Вставить("ОписаниеПКС", ОписаниеПКС);
	МенеджероборудованияВызовСервера.ПодготовитьДанныеДляФискализацииЧека(Ссылка, ПараметрыЧека, ВерсияФормата, 
		ПолучитьСерверТО().ПолучитьМодель(ФУ), "", "");
	
	ОшибкаТО = ОбработкаОбслуживания.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
	Если ЗначениеЗаполнено(ОшибкаТО) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОбъектДрайвера.ОписаниеОшибки);
		Возврат;
	Иначе
		ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
		ЭтотОбъект.ККМ = ОписаниеПКС.КассаККМ;
		ЭтотОбъект.ТекстЭлектронногоЧека = ПараметрыЧека.ТекстЭлектронногоЧека;
	КонецЕсли;

	ПриЗаписиПерепроводить = Ложь;
	ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	ПриЗаписиПерепроводить = Истина;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Записать();
		НаборТоварыВРезервеНаСкладах = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыВРезервеНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыВРезервеНаСкладах.Записать();
		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Записать();
		НаборВзаиморасчетыПоДокументам = РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.СоздатьНаборЗаписей();
		НаборВзаиморасчетыПоДокументам.Отбор.Регистратор.Установить(Ссылка);
		НаборВзаиморасчетыПоДокументам.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Товары".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельТоварыДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Истина;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Истина;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Ложь;
			
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктНаПередачуПрав Тогда
				Форма.НеЗаполнятьУслуги = Истина;
				Форма.НеЗаполнятьТару = Истина;
			КонецЕсли;
			
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Возвратная тара".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельВозвратнаяТараДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Услуги".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельУслугиДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Истина;
			Форма.ПоказыватьТару   = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Истина;
			Форма.ФлажокТара     = Ложь;
			
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
				Форма.НеЗаполнятьТовары = Истина;
				Форма.НеЗаполнятьТару = Истина;
			КонецЕсли;
			
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ОтражатьВНалоговомУчете = Ложь;
	Иначе
		ОтражатьВНалоговомУчете = Элемент.Значение;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;

	ПриИзмененииОблагаетсяЕНВД("Организация");
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	ПриИзмененииКонтрагента();

КонецПроцедуры // КонтрагентПриИзменении()

Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьАдресЭПДляОтправкиЧека(ЭтотОбъект, Контрагент, ВыбранноеЗначение, ЭлементыФормы.АдресЭП.Видимость);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.АктВыполненныхРабот Тогда
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСделки = Сделка;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		СтрокаТипа = "СчетНаОплатуПокупателю";
	Иначе
		СтрокаТипа = "ЗаказПокупателя";
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, СтрокаТипа);

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)

	ПересчитатьАвтоматическиеСкидки();

	УстановитьВидимость();
	
	ИзменитьЗаказВТабличнойЧасти();

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	мСтароеЗначениеСклада = Склад;

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "Склад".
//
Процедура СкладПриИзменении(Элемент)

	ПриИзмененииВидаСклада();

	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			Склад,
			мСтароеЗначениеСклада,
			"Товары, ВозвратнаяТара",
			"Склад");
	Иначе
		ОчиститьРеквизитВТабличныхЧастях("Склад", Истина);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтрагентАдресаДоставки = ?(Грузополучатель.Пустая(), Контрагент, Грузополучатель);
	
	Если НЕ ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ВвестиЗначение(КонтрагентАдресаДоставки, "Выберите контрагента");
	КонецЕсли;

	Если ЗначениеЗаполнено(КонтрагентАдресаДоставки) Тогда
		ФормаВыбора = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка("ФормаСписка", ЭтаФорма);
		ФормаВыбора.РежимВыбора = Истина;

		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Значение = КонтрагентАдресаДоставки;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Объект.Использование = Истина;

		СтруктураОтбораАдресов = Новый СписокЗначений;
		СтруктураОтбораАдресов.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Значение = СтруктураОтбораАдресов;
		ФормаВыбора.РегистрСведенийСписок.Отбор.Тип.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.РегистрСведенийСписок.Колонки.Тип.Видимость = Ложь;

		ВыбАдресДоставки = ФормаВыбора.ОткрытьМодально();

		Если ЗначениеЗаполнено(ВыбАдресДоставки) Тогда
			АдресДоставки = ВыбАдресДоставки;
		КонецЕсли;

	КонецЕсли;


КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы АдресДоставки
//
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)

	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;

	ФормаВыбора = Справочники.ИнформационныеКарты.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Значение = Перечисления.ТипыИнформационныхКарт.Дисконтная;
	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.Использование = Истина;

	ФормаВыбора.СправочникСписок.Отбор.ТипКарты.ВидСравнения = ВидСравнения.Равно;

	ФормаВыбора.Открыть();

КонецПроцедуры // ДисконтнаяКартаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта"
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	ПриИзмененииДисконтнойКарты();

КонецПроцедуры // ДисконтнаяКартаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Грузополучатель"
//
Процедура ГрузополучательПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);
	КонецЕсли;

КонецПроцедуры // ГрузополучательПриИзменении()

Процедура ОтправитьПоЭПНажатие(Элемент)
	
	РаботаСДиалогами.ВыполнитьОтправкуЭлектронногоЧека(ЭтотОбъект);
	
КонецПроцедуры

Процедура АдресЭПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьАдресЭПКонтрагента(ЭтотОбъект, ЭтаФорма, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	мНоваяСтрока = НоваяСтрока;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	
	Если НоваяСтрока  Тогда

		СтрокаТабличнойЧасти.Качество = ПолучитьКачествоНоменклатуры(СтрокаТабличнойЧасти.Качество);

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    = Склад;
		КонецЕсли;
	КонецЕсли;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

	мКоличествоПредыдущее = СтрокаТабличнойЧасти.Количество;
	мЦенаПредыдущая = СтрокаТабличнойЧасти.Цена;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
	КонецЕсли;	

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		УстановитьАвтоотметкуСклада();

		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;
КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ПередУдалениемТовары(Элемент, Отказ);

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	ПослеУдаленияТовары(Элемент);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТовары(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличестваТовары(Элемент);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), РассчитыватьАвтоматическиеСкидки(),истина, ,истина,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры //ТоварыСкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		СтрокаТабличнойЧасти.Склад = Склад;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
		   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "Склад"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры //ВозвратнаяТараСкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя(Кнопка)

	ЗаполнитьТабличнуюЧасть(Услуги);

КонецПроцедуры  // КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата,
		                               мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	КонецЕсли;

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура УслугиПроцентРучнойСкидкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина,"Услуги");
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "ЗаказПокупателя" ,СтруктураОтбора);		
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

КонецПроцедуры


// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Услуги".
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Услуги".
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // УслугиПеретаскивание()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//При проведении документа проверим возможность получения бонусов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
		ТолькоСерые = Неопределено;
		
		Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
			Если Не(ТолькоСерые И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеПредлагатьНеполныеСпецПредложения")) Тогда
				Ответ = Вопрос("В документе можно составить спец. предложения." + Символы.ПС + "Открыть форму подбора спец. предложений?", РежимДиалогаВопрос.ДаНет);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Ценообразование.РассчитатьНатуральныеСкидки("Товары", ЭтотОбъект, ЭтаФорма, Перечисления.ВидыСкидок.Оптовая);
					
					// Если пользователь отказался от выбора спец. предложения - вернемся к редактированию документа.
					Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток
		 Или Вид = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                мУказаниеСкладовВТЧ,
	                                                ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
	Если мОповещатьВладельцаОЗакрытии Тогда
		Оповестить("ЗакрытаПодчиненнаяФормаДляРабочегоМестаМенеджераПоПродажам", ЭтотОбъект);
	КонецЕсли;
	
	мФормаСоставНабора = Неопределено;
	
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПослеУдаления" ТЧ "Услуги".
//
Процедура УслугиПослеУдаления(Элемент)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // УслугиПослеУдаления()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ "Услуги".
//
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // УслугиПриОкончанииРедактирования()

// Процедура - обработчик события "ПриСменеСтраницы" основной панели.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "АвтоматическиеСкидки" Тогда
		ТаблицаАвтоСкидок.Очистить();

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары, ТаблицаАвтоСкидок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Услуги, ТаблицаАвтоСкидок);

		КоличествоСтрок = ТаблицаАвтоСкидок.Количество() - 1;
		Для Тмп = 0 По КоличествоСтрок Цикл
			ТекСтрока = ТаблицаАвтоСкидок[КоличествоСтрок - Тмп];

			Если ТекСтрока.ПроцентАвтоматическихСкидок = 0 Тогда
				ТаблицаАвтоСкидок.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровВзаиморасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные.Сделка,
	                          СтандартнаяОбработка, "ЗаказПокупателя");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Обработчик события "Нажатие" кнопки "ОформитьДокументы" в верхней командной панели.
//
Процедура ДействияФормыОформитьДокументы(Кнопка)

	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОформитьДокументы()

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиОформленияПакетаДокументов" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиОформленияПакетаДокументов(Кнопка)

	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма, ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.мПоказыватьФормуПринудительно = Истина;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиОформленияПакетаДокументов()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLФайлПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLФайлПанель(Кнопка)

	ЗаполнениеДокументов.ВыгрузитьДокументВФайлCommerceML(Ссылка);
    	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLЭлПочтаПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLЭлПочтаПанель(Кнопка)

	ЗаполнениеДокументов.ОтправитьДокументПоПочтеCommerceML(Ссылка);

КонецПроцедуры

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтруктураВыборСХарактеристикой = Новый Структура("мУказаниеСкладовВТЧ, ПоляДляОбновления, ВладельцыФормы, СтрокаТабличнойЧасти, МетаданныеДокумента"
									, мУказаниеСкладовВТЧ
									, Новый Структура("Склад,ХарактеристикаНоменклатуры,Номенклатура", ЭлементыФормы.Товары.ТекущиеДанные["Склад"])
									, Новый Структура("ЭтаФорма,Элемент", ЭтаФорма,Элемент)
									, СтрокаТабличнойЧасти
									, Метаданные());
	ОбработкаТабличныхЧастей.ОткрытьФормуСправочникаНоменклатурыДляВыбора(СтруктураВыборСХарактеристикой);
КонецПроцедуры

// Процедура отправки документа через 1С:Сеть
Процедура ДействияФормыОтправитьЧерез1ССеть(Кнопка)
	
	ЭлектронныеДокументы.ОтправитьДокументЧерез1ССеть(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура показа прикрепленных к документу файлов
Процедура ДействияФормыФайлы(Кнопка)
	
	ЭлектронныеДокументы.ПоказатьФайлыКСсылкеНаОбъект(ЭтаФорма, Ссылка);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с электронными документами

Процедура ДействияФормыПодписатьИОтправить(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСформироватьНовый(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.СформироватьНовыйЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ТекстСостоянияЭДНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ЭлектронныеДокументыКлиентПереопределяемый.Подключаемый_ОбработчикОжиданияЭДО(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мОповещатьВладельцаОЗакрытии  = Ложь;

мКолонкиТовары                = ЭлементыФормы.Товары.Колонки;
мКолонкиТаблицаАвтоСкидок     = ЭлементыФормы.ТаблицаАвтоСкидок.Колонки;
мКолонкиУслуги                = ЭлементыФормы.Услуги.Колонки;
мКолонкиВозвратнаяТара        = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиДокументы             = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;
мРазрешитьНулевыеЦеныВОпте    = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();
мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
мИспользоватьТару             = глЗначениеПеременной("ИспользоватьВозвратнуюТару");

мТерминалы                    = ПолучитьСерверТО().ПолучитьСписокУстройств(
									Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);
