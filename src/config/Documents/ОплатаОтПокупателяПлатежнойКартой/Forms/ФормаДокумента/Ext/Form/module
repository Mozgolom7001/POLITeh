////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем ИнвертироватьСуммы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

// Хранит валюту по договору
Перем мВалютаВзаиморасчетовПоДоговору;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьДоступностьДокументаРасчетов()

	РасчетыПоДокументам = СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность        = РасчетыПоДокументам;
	ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Доступность = РасчетыПоДокументам;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;

КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если Список Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
	КонецЕсли;

	УстановитьДоступностьДокументаРасчетов();
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, 
		"НадписьПроект,Проект,РасшифровкаПлатежа.Проект");

	ЭлементыФормы.НадписьВалютаТорговойУступки.Заголовок = СокрЛП(ВалютаДокумента);

	РаботаСДиалогами.УстановитьСвойстваЭлементовОтправкиЭлектронногоЧека(ЭлементыФормы, Истина);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		ПриИзмененииОрганизации();
	КонецЕсли;

	СтрокаПлатеж.Сделка                        = Неопределено;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено;

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	мВалютаВзаиморасчетовПоДоговору = ОбщегоНазначения.ПолучитьРеквизитОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");

	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииОрганизации()

	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);

	ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	Если ЗначениеЗаполнено(ВалютаДокумента) И ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		
		Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
			
			СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаПлатежа, 
				ВалютаДокумента, ВалютаВзаиморасчетов,
				КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) 
		И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) 
		И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) 
		И (НЕ (НЕ ЗначениеЗаполнено(ВалютаДокумента) или НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов))) 
		Тогда
		СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетов, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];

	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	УстановитьКурсДокумента();

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорЭквайринга) Тогда
			ДокументОбъект.ДоговорЭквайринга = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойДоговорЭквайринга");
			ПриИзмененииДоговораЭквайринга();
		КонецЕсли;

		Иначе
			УстановитьКурсДокумента();
		КонецЕсли;

		НомерЧекаККМ = 0;

		Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл
			МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(СтрокаРасшифровки, ВидОперации, ДокументОснование);
		КонецЦикла;
		
	Иначе
		УстановитьКурсДокумента();		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	ЕстьРасчетыСКонтрагентами = Истина;
	ЕстьРасчетыПоКредитам     = Ложь;

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
										
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список=Истина;
	Иначе
		Список=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();

	мВалютаВзаиморасчетовПоДоговору = ОбщегоНазначения.ПолучитьРеквизитОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");

	РаботаСДиалогами.УстановитьДоступностьКнопкиОплатитьКартой(ЭлементыФормы.ОсновныеДействияФормы.Кнопки);
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

	Если ЭтоНовый() И ПараметрОбъектКопирования = Неопределено Тогда
		РаботаСДиалогами.УстановитьАдресЭПДляОтправкиЧека(ЭтотОбъект, Справочники.Контрагенты.ПустаяСсылка(), Контрагент, 
			ЭлементыФормы.АдресЭП.Видимость);
	КонецЕсли;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мВалютаВзаиморасчетовПоДоговору, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);

	// Установим заголовки по значению поля "Контрагент" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(мВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(мВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "
									+ Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")
									+ " " + СокрЛП(ВалютаДокумента);

	НадписьНомерЧека = ?(НомерЧекаККМ = 0,"",
	                   ?(НомерЧекаККМ > 0,"Номер чека на ККМ: " + СокрЛП(НомерЧекаККМ),
	                                      "Чек на ККМ пробит"));

	Если ЭлементыФормы.НадписьСделка.Заголовок="Сделка:" Тогда
		
		ЭлементыФормы.НадписьСделка.Высота=19;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=19;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=24;
		
	Иначе
		
		ЭлементыФормы.НадписьСделка.Высота=27;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=15;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=29;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
			мВалютаВзаиморасчетовПоДоговору = ОбщегоНазначения.ПолучитьРеквизитОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			УстановитьФокус();
			
			УстановитьВидимость();
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
				
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		мВалютаВзаиморасчетовПоДоговору = ОбщегоНазначения.ПолучитьРеквизитОбъекта(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФокус();
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СтараяСуммаДокумента = СуммаДокумента;
	
	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если СуммаДокумента <> СтараяСуммаДокумента Тогда
		ПересчитатьТорговуюУступку();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы. 
// Вызывается при смене или перечитывании объекта.
Процедура ПриИзмененииДанных()
	
	Если ТипЗнч(СтрокаПлатеж) = Тип("ДокументТабличнаяЧастьСтрока.ОплатаОтПокупателяПлатежнойКартой.РасшифровкаПлатежа")
		И РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = -1 Тогда
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ККТ	
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном регистраторе.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)

	Перем ФУ;

	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном устройстве!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляПробитияЧека(ФУ, Истина, Организация) Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ Проведен) ИЛИ Модифицированность Тогда
		Ответ = Вопрос("Провести документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Предупреждение("Операция не выполнена!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	
	Если (НЕ Проведен) ИЛИ Модифицированность Тогда
		Предупреждение("Операция не выполнена!");
		Возврат;
	КонецЕсли;
	
	ВидФУ = ПолучитьСерверТО().ПолучитьВид(ФУ);
	Если ВидФУ = ПредопределенноеЗначение("Перечисление.ВидыТорговогоОборудования.ФискальныйРегистратор") Тогда
		Позиция         = Неопределено;
		НомерСмены      = Неопределено;
		ТаблицаПлатежей = Новый ТаблицаЗначений();
		ТаблицаПлатежей.Колонки.Добавить("Заголовок");
		ТаблицаПлатежей.Колонки.Добавить("Сумма");
		ТаблицаПлатежей.Колонки.Добавить("НДС");
		
		Для Каждого Позиция Из РасшифровкаПлатежа Цикл
			СтрокаТаблицы           = ТаблицаПлатежей.Добавить();
			СтрокаТаблицы.Заголовок = "Принято от " + СокрЛП(Контрагент)
			+ "
			|Основание: " + СокрЛП(ЭтотОбъект);
			СтрокаТаблицы.Сумма     = Позиция.СуммаПлатежа;
			СтрокаТаблицы.НДС       = УчетНДС.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
		КонецЦикла;

		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
			Результат = ПолучитьСерверТО().ПечатьЧекаПКО(ФУ,
		   		ПолучитьСерверТО().ПолучитьПарольКассираККМ(),
		   		НомерЧекаККМ,
		   		НомерСмены,
		   		ТаблицаПлатежей,
		   		0,
		   		СуммаДокумента);
		Иначе
			Результат = ПолучитьСерверТО().ПечатьЧекаРКО(ФУ,
		   		ПолучитьСерверТО().ПолучитьПарольКассираККМ(),
		   		НомерЧекаККМ,
		   		НомерСмены,
		   		ТаблицаПлатежей,
		   		0,
		   		СуммаДокумента);
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат) Тогда
			ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
			Предупреждение(ТекстОшибки);
			Возврат;
		КонецЕсли;
	Иначе
		
		ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФУ);
		Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Кассовая смена не открыта");
			Возврат;
		КонецЕсли;
		
		ОбъектДрайвера = Неопределено;
		ОбработкаОбслуживания = Неопределено;
		ПолучитьСерверТО().ПолучитьОбъектДрайвера(ФУ, ОбработкаОбслуживания, ОбъектДрайвера);
		
		ОбработкаОбслуживания.ПолучитьПараметрыККТ(ОбъектДрайвера);
		ВерсияФормата = МенеджерОборудованияКлиентСервер.ВерсияФФД(ОбъектДрайвера.ВыходныеПараметры);
		
		ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
		ПараметрыЧека.Вставить("ОписаниеПКС", ОписаниеПКС);
		МенеджерОборудованияВызовСервера.ПодготовитьДанныеДляФискализацииЧека(Ссылка, ПараметрыЧека, ВерсияФормата, 
			ПолучитьСерверТО().ПолучитьМодель(ФУ), СокрЛП(Контрагент), СокрЛП(Ссылка));
		
		Результат = ОбработкаОбслуживания.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
		Если Не ЗначениеЗаполнено(Результат) Тогда
			ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
			ЭтотОбъект.ККМ = ОписаниеПКС.КассаККМ;
			ЭтотОбъект.ТекстЭлектронногоЧека = ПараметрыЧека.ТекстЭлектронногоЧека;
			Оплачено = Истина;
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке(ОбъектДрайвера.ОписаниеОшибки);
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ПриЗаписиПерепроводить = Ложь;
	ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	ПриЗаписиПерепроводить = Истина;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой[Кнопка.Имя];
	Иначе
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Список = Ложь;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	УстановитьФокус();

	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете=ОтражатьВБухгалтерскомУчете;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации();
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	УстановитьФокус();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьАдресЭПДляОтправкиЧека(ЭтотОбъект, Контрагент, ВыбранноеЗначение, ЭлементыФормы.АдресЭП.Видимость);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	ТекущиеДанные = РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа);
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекущиеДанные.ДоговорКонтрагента,
				СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
	
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении суммы взаиморасчетов с контрагентом.
//
Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	ПересчитатьТорговуюУступку();
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры // СуммаВзаиморасчетовПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не Элемент.Значение Тогда
		ОтраженоВОперУчете=Ложь;
		Оплачено=Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()

	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;

		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();
		Иначе
			СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьТорговуюУступку();
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);

КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока				= РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		РассчитатьСуммуВзаиморасчетов();
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока				= РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа);
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	РассчитатьСуммуВзаиморасчетов();
	ПересчитатьТорговуюУступку();
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
	
		// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
			Возврат;
		КонецЕсли;
		
		_Валюта = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = _Валюта;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	ПересчитатьТорговуюУступку();
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж = Элемент.ТекущиеДанные;
	УстановитьДоступностьДокументаРасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Неопределено);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"    ,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПоЗадолженностям(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Неопределено);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"    ,Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);

	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,">0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Неопределено);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 
 
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Обработчик события "ПриИзменении" реквизита "ДоговорЭквайринга".
//
Процедура ДоговорЭквайрингаПриИзменении(Элемент)

	ПриИзмененииДоговораЭквайринга();

	Если НЕ ЗначениеЗаполнено(ВидОплаты) Тогда
		Ответ = КодВозвратаДиалога.Да;
	Иначе
		Ответ = Вопрос("Пересчитать значение торговой уступки?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПроцентТорговойУступки = УправлениеРозничнойТорговлей.ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты);
		ПересчитатьТорговуюУступку();
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ДоговорЭквайрингаПриИзменении()

// Процедура выполняет необходимые действия при изменении реквизита "ДоговорЭквайринга".
//
Процедура ПриИзмененииДоговораЭквайринга()

	Эквайрер = ДоговорЭквайринга.Эквайрер;
	ДоговорВзаиморасчетовЭквайрера = ДоговорЭквайринга.ДоговорВзаиморасчетов;
	ВалютаДокумента = ДоговорВзаиморасчетовЭквайрера.ВалютаВзаиморасчетов;
	УстановитьКурсДокумента();
	
	Если РасшифровкаПлатежа.Количество() > 0 Тогда
	
		Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
			РассчитатьСуммуПлатежа();
		КонецЦикла;
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	
	КонецЕсли;

КонецПроцедуры // ПриИзмененииДоговораЭквайринга()

// Обработчик события "Нажатие" гиперссылки "Эквайрер".
//
Процедура ЭквайрерНажатие(Элемент)

	Если ЗначениеЗаполнено(Эквайрер) Тогда
		Эквайрер.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;

КонецПроцедуры // ЭквайрерНажатие()

// Обработчик события "Нажатие" гиперссылки "ДоговорВзаиморасчетовЭквайрера".
//
Процедура ДоговорВзаиморасчетовЭквайрераНажатие(Элемент)

	Если ЗначениеЗаполнено(ДоговорВзаиморасчетовЭквайрера) Тогда
		ДоговорВзаиморасчетовЭквайрера.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;

КонецПроцедуры // ДоговорВзаиморасчетовЭквайрераНажатие()

// Обработчик события "ПриИзменении" реквизита "ВидОплаты".
//
Процедура ВидОплатыПриИзменении(Элемент)

	ПроцентТорговойУступки = УправлениеРозничнойТорговлей.ПолучитьПроцентТорговойУступки(ДоговорЭквайринга, ВидОплаты);
	ПересчитатьТорговуюУступку();

КонецПроцедуры // ВидОплатыПриИзменении()

// Процедура пересчитывает значение торговой уступки.
//
// Параметры:
//  ТекущаяСтрока - строка, в которой необходимо выполнить пересчет.
//
Процедура ПересчитатьТорговуюУступку()

	СуммаТорговойУступки = СуммаДокумента * ПроцентТорговойУступки / 100;

КонецПроцедуры // ПересчитатьТорговуюУступку()

// Обработчик события "ПриИзменении" реквизита "ПроцентТорговойУступки".
//
Процедура ПроцентТорговойУступкиПриИзменении(Элемент)

	ПересчитатьТорговуюУступку();

КонецПроцедуры // ПроцентТорговойУступкиПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ВидОплаты".
//
Процедура ВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораВидаОплатыЧекаККМ(Элемент, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, СтандартнаяОбработка);

КонецПроцедуры // ВидОплатыНачалоВыбора()

Процедура ОсновныеДействияФормыОплатитьКартой(Кнопка)

	Перем ЭС;
	Перем ФР;

	Если РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляОплатыКартой(ЭС, ФР) Тогда
		КодRRN = Неопределено;

		Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
			Результат = ПолучитьСерверТО().ОплатитьПлатежнойКартой(ЭС, СуммаДокумента, КодRRN, ФР);
		Иначе
			Результат = ПолучитьСерверТО().ВернутьПлатежПоПлатежнойКарте(ЭС, СуммаДокумента, КодRRN, ФР);
		КонецЕсли;

		Если ЗначениеЗаполнено(Результат) Тогда
			Ошибка = ПолучитьСерверТО().ПолучитьТекстОшибкиТО(Результат);
			Предупреждение(Ошибка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОсновныеДействияФормыОплатитьКартой()

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ВидОперации = Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя Тогда
		СтрокаВидаДвижения = "Расход";
	Иначе
		СтрокаВидаДвижения = "Приход";
	КонецЕсли;
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, 
		СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, СтрокаВидаДвижения);
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаПриИзменении(Элемент)
	
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура СделкаПриИзменении(Элемент)
	
	МенеджерОборудованияКлиентСервер.ЗаполнитьПризнакСпособаРасчета(РаботаСДиалогами.ТекущиеДанныеРасшифровки(ЭлементыФормы.РасшифровкаПлатежа), ВидОперации, ДокументОснование);
	
КонецПроцедуры

Процедура ОтправитьПоЭПНажатие(Элемент)
	
	РаботаСДиалогами.ВыполнитьОтправкуЭлектронногоЧека(ЭтотОбъект);
	
КонецПроцедуры

Процедура АдресЭПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьАдресЭПКонтрагента(ЭтотОбъект, ЭтаФорма, СтандартнаяОбработка);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

