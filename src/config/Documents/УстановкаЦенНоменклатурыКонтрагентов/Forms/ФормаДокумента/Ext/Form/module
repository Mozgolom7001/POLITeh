////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период.
Перем мТекущаяДатаДокумента;

Перем мСтруктураПоложенийКолонок;
Перем мКолонкиТовары;
Перем мПоказыватьКод, мПоказыватьАртикул;

// Флаги показа колонок.
Перем ПоказыватьЦену Экспорт;
Перем ПоказыватьВалюту Экспорт;
Перем ПоказыватьЕдиницуИзмерения Экспорт;
Перем ПоказыватьХарактеристику Экспорт;

// Хранит соответствие номеров колонок и типов цен.
Перем мСоответствиеТиповЦен Экспорт;

// Хранит дерево кнопок подменю заполнение ТЧ.
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТаблицаЦен, ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Функция получает положение колонки для заданного имени сохраненного значения.
//
// Параметры:
//  ИмяСохраненногоЗначения - имя значения, под которым было сохранено строковое представление положения колонки.
//
// Возвращаемое значение:
//  Положение колонки - Элемент системного перечисления ПоложениеКолонки.
//
Функция ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения)

	ПоложениеКолонкиСтрока = ВосстановитьЗначение(ИмяСохраненногоЗначения);

	Если ПоложениеКолонкиСтрока = "На следующей строке" Тогда
		Возврат ПоложениеКолонки.НаСледующейСтроке;
	ИначеЕсли ПоложениеКолонкиСтрока = "В той же колонке" Тогда
		Возврат ПоложениеКолонки.ВТойЖеКолонке;
	ИначеЕсли ПоложениеКолонкиСтрока = "Новая колонка" Тогда
		Возврат ПоложениеКолонки.НоваяКолонка;
	Иначе

		// Значение еще не было сохранено
		// Надо взять настройку по умолчанию и сохранить ее для последующей работы
		Если Прав(ИмяСохраненногоЗначения, 1) = "0" Тогда
			// Цена на новой колонке
			ПоложениеКолонкиСтрока = "Новая колонка";
		ИначеЕсли Прав(ИмяСохраненногоЗначения, 1) = "1" Тогда
			// Валюта на следующей строке
			ПоложениеКолонкиСтрока = "На следующей строке";
		Иначе
			// Основная единица измерения и процент скидки/наценки в той же колонке
			ПоложениеКолонкиСтрока = "В той же колонке";
		КонецЕсли;
		СохранитьЗначение(ИмяСохраненногоЗначения, ПоложениеКолонкиСтрока);

		Возврат ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения);
	КонецЕсли;

КонецФункции // ПолучитьПоложениеКолонки()

// Процедура создает и заполняет структуру, содержащую в себе варианты положения колонок в форме
//
Процедура ПолучитьСтруктуруПоложенийКолонок()

	мСтруктураПоложенийКолонок = Новый Структура();
	СтруктураКолонок           = Новый Структура();
	Если мИспользоватьХарактеристики Тогда
		СтруктураКолонок.Вставить("ПоказыватьХарактеристику", "ХарактеристикаНоменклатуры");
	КонецЕсли;
	СтруктураКолонок.Вставить("ПоказыватьЦену"             , "Цена");
	СтруктураКолонок.Вставить("ПоказыватьВалюту"           , "Валюта");
	СтруктураКолонок.Вставить("ПоказыватьЕдиницуИзмерения" , "ЕдиницаИзмерения");

	ИмяСохраненныхЗначений = Метаданные().Имя;
	Для Каждого ЭлементСтруктуры Из СтруктураКолонок Цикл
		ИмяСохраненныхЗначений = ИмяСохраненныхЗначений + "_" + ЭтаФорма[ЭлементСтруктуры.Ключ];
	КонецЦикла;

	х = 0;
	Для Каждого ЭлементСтруктуры Из СтруктураКолонок Цикл
		мСтруктураПоложенийКолонок.Вставить(ЭлементСтруктуры.Значение, ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений + "_" + х));
		х = х + 1;
	КонецЦикла;

КонецПроцедуры // ПолучитьСтруктуруПоложенийКолонок()

// Процедура заполняет реквизит СписокЦен на форме из табличной части ТипыЦен
//
Процедура ЗаполнитьСписокТиповЦен()

	СписокТиповЦен.Очистить();
	Для Каждого СтрокаТиповЦен Из ТипыЦен Цикл
		СписокТиповЦен.Добавить(СтрокаТиповЦен.ТипЦен);
	КонецЦИкла;
	Если СписокТиповЦен.Количество() = 0 Тогда
		ЭлементыФормы.СписокТиповЦен.Значение = "";
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСписокТиповЦен()

// Процедура сдвигает колонку на требуемое количество колонок в позицию ОчередногоНомераКолонки 
// и увеличивает ОчередногоНомераКолонки на единицу
//
// Параметры:
//  Колонка               - сдвигаемая колонка
//  ОчереднойНомерКолонки - положение, которое должна занять колонка после сдвига
//
Процедура СдвинутьКолонку(Колонка, ОчереднойНомерКолонки)

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	ТекущийНомерКолонки = КолонкиТаблицыЦен.Индекс(Колонка);
	Если ТекущийНомерКолонки <> ОчереднойНомерКолонки Тогда
		// сдвинем колонку
		КолонкиТаблицыЦен.Сдвинуть(ТекущийНомерКолонки, ОчереднойНомерКолонки - ТекущийНомерКолонки);
	КонецЕсли;

	ВсегоКолонок          = КолонкиТаблицыЦен.Количество();
	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
	ОчереднойНомерКолонки = ?(ОчереднойНомерКолонки > ВсегоКолонок, ВсегоКолонок, ОчереднойНомерКолонки);

КонецПроцедуры // СдвинутьКолонку()

// Устанавливает в табличной части цен на форме недостающие параметры
//
Процедура УстановитьНедостающиеПараметры()

	мКолонкиТовары.Код.Видимость = мПоказыватьКод;
	мКолонкиТовары.Артикул.Видимость = мПоказыватьАртикул;

	мКолонкиТовары.ИндексСтрокиТаблицыЦен.ТолькоПросмотр = Истина;
	мКолонкиТовары.Код.ТолькоПросмотр = Истина;
	мКолонкиТовары.Артикул.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры.
	мКолонкиТовары.Номенклатура.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенНоменклатураПриИзменении"));
	мКолонкиТовары.Номенклатура.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	мКолонкиТовары.Номенклатура.АвтоОтметкаНезаполненного = Истина;
	мКолонкиТовары.Номенклатура.ЭлементУправления.АвтоОтметкаНезаполненного = Истина;
	мКолонкиТовары.Номенклатура.ЭлементУправления.АвтоВыборНезаполненного = Истина;
	мКолонкиТовары.Номенклатура.ЭлементУправления.КнопкаОткрытия = Истина;

	// Установим необходимые параметры характеристики номенклатуры.
	Если мИспользоватьХарактеристики Тогда
		мКолонкиТовары.ХарактеристикаНоменклатуры.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенХарактеристикаНоменклатурыПриИзменении"));
		мКолонкиТовары.ХарактеристикаНоменклатуры.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	КонецЕсли;

	// АвтоотметкаНезаполненного для валюты.
	Для каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];
		КолонкаВалюты = мКолонкиТовары.Найти("Валюта" + НомерСоответствияТекущейКолонки);

		Если КолонкаВалюты <> Неопределено Тогда
			КолонкаВалюты.АвтоОтметкаНезаполненного = Истина;
			КолонкаВалюты.ЭлементУправления.АвтоОтметкаНезаполненного = Истина;
			КолонкаВалюты.ЭлементУправления.АвтоВыборНезаполненного = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьНедостающиеПараметры()

// Процедура устанавливает колонки табличной часи в требуемом порядке, добавляет недостающие колонки, 
// убирает ненужные
//
Процедура ОбновитьСоставКолонок()

	// надо расположить все нужные колонки в правильном порядке
	// сначала должна идти колонка номенклатуры
	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;
	ОчереднойНомерКолонки = 1;

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Код");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Артикул");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Номенклатура");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("ХарактеристикаНоменклатуры");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		// цены
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Количество();
			мСоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, мСоответствиеТиповЦен.Количество());
		КонецЕсли;
		
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "цена"+НомерСоответствияТекущейКолонки, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2, ДопустимыйЗнак.Неотрицательный), СокрЛП(СтрокаТипаЦен.ТипЦен), 10);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// валюта
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "валюта"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// единица измерения
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда
			// надо вставить
			ТаблицаЦен.Колонки.Вставить(ОчереднойНомерКолонки, "единица"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "Единица", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

	КонецЦикла;
	
	// все, что за пределами, надо удалить
	Для НомерУдаляемойКолонки = ОчереднойНомерКолонки По КолонкиТаблицыЦен.Количество()-1 Цикл
		КолонкиТаблицыЦен.Удалить(ОчереднойНомерКолонки);
	КонецЦикла;

	ЭлементыФормы.ТаблицаЦен.СоздатьКолонки();

	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

КонецПроцедуры // ОбновитьСоставКолонок()

// Производит перезаполнение и установку необходимых полей в строке табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо перезаполнить.
//
Процедура ПерезаполнитьСтроку(СтрокаТабличнойЧасти)

	Если СписокТиповЦен.Количество() = 0 Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипыЦен", СписокТиповЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЦенСправочник.Ссылка КАК ТипЦен,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыБезХарактеристики.Цена ЕСТЬ NULL 
	|				И ЦеныНоменклатурыСХарактеристикой.Цена ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Цена, ЦеныНоменклатурыБезХарактеристики.Цена)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыБезХарактеристики.Валюта ЕСТЬ NULL 
	|				И ЦеныНоменклатурыСХарактеристикой.Валюта ЕСТЬ NULL 
	|			ТОГДА ТипыЦенСправочник.ВалютаЦены
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Валюта, ЦеныНоменклатурыБезХарактеристики.Валюта)
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения ЕСТЬ NULL 
	|				И ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения ЕСТЬ NULL 
	|			ТОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения, ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ТипыЦенНоменклатурыКонтрагентов КАК ТипыЦенСправочник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				&ДатаЦен,
	|				ТипЦен В (&ТипыЦен)
	|					И Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыБезХарактеристики
	|		ПО ЦеныНоменклатурыБезХарактеристики.ТипЦен = ТипыЦенСправочник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
	|				&ДатаЦен,
	|				ТипЦен В (&ТипыЦен)
	|					И Номенклатура = &Номенклатура
	|					И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыСХарактеристикой
	|		ПО ЦеныНоменклатурыСХарактеристикой.ТипЦен = ТипыЦенСправочник.Ссылка
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка В(&ТипыЦен)";

	Выборка = Запрос.Выполнить().Выбрать();

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	Пока Выборка.Следующий() Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(Выборка.ТипЦен);
		Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьСтроку()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииНоменклатуры()

// Производит заполнение и установку необходимых полей при изменении характеристики номенклатуры в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти)

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатуры()

// Производит заполнение и установку необходимых полей при добавлении новых типов цен.
//
// Параметры:
//  СписокДобавленныхТиповЦен - список добавленных типов цен.
//
Процедура ЗаполнитьПоНовымТипамЦен(СписокДобавленныхТиповЦен)

	Если СписокДобавленныхТиповЦен.Количество() = 0 Тогда

		// Ничего делать не надо
		Возврат;

	КонецЕсли;

	// Заполним все требуемые реквизиты
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипыЦен", СписокДобавленныхТиповЦен);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", ТаблицаЦен.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"));

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
	|	      ТОГДА НоменклатураСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура КОНЕЦ                 КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.Ссылка                                            КАК ХарактеристикаНоменклатуры,
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен КОНЕЦ                       КАК ТипЦен,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
	|	         ТОГДА 0
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена КОНЕЦ)                     КАК Цена,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Валюта ЕСТЬ NULL
	|	         ТОГДА ТипыЦенСправочник.ВалютаЦены
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Валюта КОНЕЦ)                   КАК Валюта,
	|	МАКСИМУМ(ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения ЕСТЬ NULL
	|	         ТОГДА НоменклатураСправочник.ЕдиницаХраненияОстатков
	|	         ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения КОНЕЦ)         КАК ЕдиницаИзмерения
	|ИЗ 
	| (ВЫБРАТЬ
	|		Характеристики.Ссылка   КАК Ссылка,
	|		Характеристики.Владелец КАК Владелец
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|	ГДЕ
	|		Характеристики.Ссылка В (&ХарактеристикиНоменклатуры)

	|	ОБЪЕДИНИТЬ ВСЕ

	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Ссылка,
	|		Номенклатура.Ссылка               КАК Владелец
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура

	|	) КАК ХарактеристикиНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.Номенклатура КАК НоменклатураСправочник
	|ПО 
	|	ХарактеристикиНоменклатуры.Владелец = НоменклатураСправочник.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатурыКонтрагентов КАК ТипыЦенСправочник
	|	ПО ИСТИНА
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен)
	|                                                                          И Номенклатура В (&Номенклатура)
	|                                                                          И (ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
	|                                                                             ИЛИ ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))) КАК ЦеныНоменклатурыСрезПоследних
	|	ПО ЦеныНоменклатурыСрезПоследних.ТипЦен = ТипыЦенСправочник.Ссылка
	|	   И ЦеныНоменклатурыСрезПоследних.Номенклатура = НоменклатураСправочник.Ссылка
	|	   И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.Ссылка
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка В (&ТипыЦен)
	|	И НоменклатураСправочник.Ссылка В (&Номенклатура)
	|	И НЕ НоменклатураСправочник.ЭтоГруппа
	|	И (ХарактеристикиНоменклатуры.Ссылка В (&ХарактеристикиНоменклатуры)
	|	   ИЛИ ХарактеристикиНоменклатуры.Ссылка  = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL
	|	      ТОГДА НоменклатураСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Номенклатура КОНЕЦ,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.ТипЦен ЕСТЬ NULL
	|	      ТОГДА ТипыЦенСправочник.Ссылка 
	|	      ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ТипЦен КОНЕЦ
    |";

	Выборка = Запрос.Выполнить().Выбрать();

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаНоменклатуры") Цикл

			СтруктураПоиска = Новый Структура();

			СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураПоиска);

			Если СтрокаТабличнойЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Пока Выборка.Следующий() Цикл
				НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(Выборка.ТипЦен);

				Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоНовымТипамЦен()

// Производит заполнение таблицы цен на форме.
//
Процедура ЗаполнитьТаблицуЦенФормы()

	Если ТипыЦен.Количество() = 0 Тогда

		// Документ пуст
		Возврат;

	КонецЕсли;

	ТаблицаТоваров = Товары.Выгрузить();
	ТаблицаТоваров.Сортировать("ИндексСтрокиТаблицыЦен, Номенклатура, ХарактеристикаНоменклатуры, ТипЦен");

	// Заполним все требуемые реквизиты

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	ТекущийИндексСтрокиТаблицыЦен = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл

		Если ТекущийИндексСтрокиТаблицыЦен <> СтрокаТаблицыТоваров.ИндексСтрокиТаблицыЦен
		 Или НоваяСтрока.Номенклатура <> СтрокаТаблицыТоваров.Номенклатура
		 Или НоваяСтрока.ХарактеристикаНоменклатуры <> СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры Тогда
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Номенклатура               = СтрокаТаблицыТоваров.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры;
			ТекущийИндексСтрокиТаблицыЦен = СтрокаТаблицыТоваров.ИндексСтрокиТаблицыЦен;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(СтрокаТаблицыТоваров.ТипЦен);

		НоваяСтрока["цена"+НомерСоответствияТекущейКолонки]    = СтрокаТаблицыТоваров.Цена;
		НоваяСтрока["валюта"+НомерСоответствияТекущейКолонки]  = СтрокаТаблицыТоваров.Валюта;
		НоваяСтрока["единица"+НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.ЕдиницаИзмерения;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуЦенФормы()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьКоличество = Ложь;
	ЕстьЦена       = Ложь;

	Команда = "ПодборВТабличнуюЧастьТовары";

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СписокВидовПодбора.Добавить("ПриходНоменклатураКонтрагентаБезЦенИОстатков", "По номенклатуре контрагента");
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	СтруктураПараметровПодбора.Вставить("Контрагент"             , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорВзаиморасчетов"  , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"         , ЕстьКоличество);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);

	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
	                                                              ПредставлениеДок + " № " + Номер );

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Цена, ВалютаЦены, ЗапрашиватьЦену;

	Модифицированность = Истина;
	Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти" Тогда

		КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

		Выборка = ЗначениеВыбора.Результат.Выбрать();

		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЦен <> Null
			   И Выборка.Номенклатура <> Null
			   И Не Выборка.ЭтоГруппа Тогда

				Если ТипыЦен.Найти(Выборка.ТипЦен) = Неопределено Тогда

					СтрокаТиповЦен = ТипыЦен.Добавить();
					СтрокаТиповЦен.ТипЦен = Выборка.ТипЦен;

					// Обновим список типов цен
					ЗаполнитьСписокТиповЦен();

					// обновим состав колонок
					ОбновитьСоставКолонок();
					ПолучитьСтруктуруПоложенийКолонок();
					ВидимостьКолонок();

				КонецЕсли;

				Номенклатура               = Выборка.Номенклатура;
				ХарактеристикаНоменклатуры = ?(Выборка.ХарактеристикаНоменклатуры = Null, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Выборка.ХарактеристикаНоменклатуры);

				СтруктураОтбора = Новый Структура();
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);

				СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
					СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				КОнецЕсли;

				НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(Выборка.ТипЦен);
				Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Выборка.Валюта) и НЕ ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
					Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.ТипЦен.ВалютаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Номенклатура.ЕдиницаХраненияОстатков;
					КонецЕсли;
				Иначе
					Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	ИначеЕсли ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда
		Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
		   Ложь) Тогда
			Возврат;
		КонецЕсли;

		ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
		ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
		ЗначениеВыбора.Свойство("ЗапрашиватьЦену" , ЗапрашиватьЦену);

		Если ЗапрашиватьЦену = Неопределено Тогда
			ЗапрашиватьЦену = Ложь
		КонецЕсли;

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда

			// Надо добавить
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Номенклатура               = Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;
			Если ЗапрашиватьЦену Тогда

				ЗначениеВыбора.Свойство("ЕдиницаИзмерения" , ЕдиницаИзмерения);
				ЗначениеВыбора.Свойство("Цена" ,             Цена);
				ЗначениеВыбора.Свойство("ВалютаЦены" ,       ВалютаЦены);

				КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

				Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл

					НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
					Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["цена"+НомерСоответствияТекущейКолонки] = Цена;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["валюта"+НомерСоответствияТекущейКолонки] = ВалютаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["единица"+НомерСоответствияТекущейКолонки] = ЕдиницаИзмерения;
					КонецЕсли;

				КонецЦикла;

			Иначе
				ПриИзмененииНоменклатуры(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;

	КонецЕслИ;

КонецПроцедуры // ОбработкаПодбора()

// Осуществляет вызов формы заполнения табличной части документа
//
// Параметры:
//  Очистить    - Истина - заполнить с предворительной очисткой, Ложь - добавить      
//  Обновить    - Истина - обновить строки, Ложь - добавить строки
//
Процедура ЗаполнитьТовары(Очистить, Обновить)

	Если ТаблицаЦен.Количество() > 0 И Очистить Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТаблицаЦен.Очистить();

	КонецЕсли;

	ФормированиеЦен = Обработки.ФормированиеЦен.Создать();
	ФормаЗаполнения = ФормированиеЦен.ПолучитьФорму("ФормаЗаполнения", ЭтаФорма);

	ТаблицаТиповЦен = ТипыЦен.Выгрузить();
	ТаблицаТиповЦен.Колонки.ТипЦен.Имя = "ТипЦенСкидок";

	ФормированиеЦен.ТипыЦенСкидок.Загрузить(ТаблицаТиповЦен);
	ФормированиеЦен.мКоманда    = "Изменить";
	ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатурыКонтрагентов";

	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаЗаполнения.мКонтрагент = Контрагент;
	КОнецЕсли;

	Если Обновить Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
		ФормаЗаполнения.мСписокНоменклатуры = СписокНоменклатуры;
	КонецЕсли;

	ФормаЗаполнения.ОткрытьМодально();

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа Поступления.
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//  ЧиститьТипыЦен      - Признак необходимости очистки типов цен перед заполнением.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, ЧиститьТипыЦен = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументПоступление.ТипЦен) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе "+СокрЛП(ДокументПоступление)+" не установлен тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	Если ТипыЦен.Найти(ДокументПоступление.ТипЦен) = Неопределено Тогда

		Если ЧиститьТипыЦен Тогда
			ТипыЦен.Очистить();
		КонецЕсли;
		СтрокаТабличнойЧасти = ТипыЦен.Добавить();
		СтрокаТабличнойЧасти.ТипЦен = ДокументПоступление.ТипЦен;

		// Обновим список типов цен
		ЗаполнитьСписокТиповЦен();

		// обновим состав колонок
		ОбновитьСоставКолонок();
		ПолучитьСтруктуруПоложенийКолонок();
		ВидимостьКолонок();

	КОнецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.СуммаВключаетНДС,
	|	Док.ВалютаДокумента,
	|	Док.Контрагент,
	|	Док.ТипЦен,
	|	Док.ТипЦен.Код КАК КодТипаЦен,
	|	Док.Товары.(
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,
	|		СРЕДНЕЕ(Цена) КАК Цена,
	|		ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТовары
	|	),
	|	Док.Услуги.(
	|		Номенклатура,
	|		СРЕДНЕЕ(Цена) КАК Цена,
	|		Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиУслуги
	|	)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Товары.(Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	ЕдиницаИзмерения,
	|	СтавкаНДС),
	|	Док.Услуги.(Номенклатура,
	|	Номенклатура.ЕдиницаХраненияОстатков,
	|	СтавкаНДС)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТовары,
	|	НомерСтрокиУслуги
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Контрагент = Шапка.Контрагент; // чтобы точно был правильный контрагент

	НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(Шапка.ТипЦен);

	// Товары
	Выборка = Шапка.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
		СтруктураОтбора.Вставить("Номенклатура",               Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;

		КонецЕсли;

		СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                        Выборка.Цена,
		                                        Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                        Шапка.СуммаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));

		СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки]  = Шапка.ВалютаДокумента;
		СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЦикла;

	// Услуги
	Выборка = Шапка.Услуги.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда

			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура = Выборка.Номенклатура;

		КонецЕсли;

		СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		                                        Выборка.Цена,
		                                        Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                        Шапка.СуммаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));

		СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки]  = Шапка.ВалютаДокумента;
		СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

// Очищает все типы цен
//
// Параметры:
//  Нет
//
Процедура ОчиститьТипыЦен()

	НомерСтроки = 0;
	Пока НомерСтроки < ТипыЦен.Количество() Цикл
		СтрокаТабличнойЧасти = ТипыЦен[НомерСтроки];
		Если СтрокаТабличнойЧасти.ТипЦен.Владелец <> Контрагент Тогда
			ТипыЦен.Удалить(СтрокаТабличнойЧасти);
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;

	// Обновим список типов цен
	ЗаполнитьСписокТиповЦен();

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

КонецПроцедуры // ОчиститьТипыЦен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость колонок в зависимости от параметров документа
// и делает недоступной единицу хранения остатков
//
Процедура ВидимостьКолонок()

	БылаНоваяКолонка = Ложь;
	Для Каждого КолонкаТиповЦен Из мКолонкиТовары Цикл
		ПризнакКолонки = Лев(КолонкаТиповЦен.Имя, 4);
		Если ПризнакКолонки = "цена" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьЦену;
			КолонкаТиповЦен.Положение = мСтруктураПоложенийКолонок.Цена;
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "валю" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьВалюту;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.Валюта, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "един" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьЕдиницуИзмерения;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ЕдиницаИзмерения, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "Хара" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьХарактеристику;
			КолонкаТиповЦен.Положение = ?(мСтруктураПоложенийКолонок.Свойство("ХарактеристикаНоменклатуры"),мСтруктураПоложенийКолонок.ХарактеристикаНоменклатуры, ПоложениеКолонки.НоваяКолонка);
		КонецЕсли;
	КонецЦикла;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиТовары, Новый Структура("ХарактеристикаНоменклатуры"), мИспользоватьХарактеристики);

КонецПроцедуры // ВидимостьКолонок()

// Процедура устанавливает доступность кнопки Настройка. Кнопка должна
// быть доступна только для операции "цены номенклатуры".
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	мПоказыватьКод                 = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьКод");
	мПоказыватьАртикул             = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьАртикул");
	ПоказыватьЦену                 = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЦену");
	ПоказыватьВалюту               = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьВалюту");
	ПоказыватьЕдиницуИзмерения     = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЕдиницуИзмерения");
	ПоказыватьХарактеристику       = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьХарактеристику");

	мПоказыватьКод                 = ?(мПоказыватьКод = Неопределено, Ложь, мПоказыватьКод);
	мПоказыватьАртикул             = ?(мПоказыватьАртикул = Неопределено, Ложь, мПоказыватьАртикул);
	ПоказыватьЦену                 = ?(ПоказыватьЦену = Неопределено, Истина, ПоказыватьЦену);
	ПоказыватьВалюту               = ?(ПоказыватьВалюту = Неопределено, Истина, ПоказыватьВалюту);
	ПоказыватьХарактеристику       = ?(мИспользоватьХарактеристики, ?(ПоказыватьХарактеристику = Неопределено, Истина, ПоказыватьХарактеристику), Ложь);
	ПоказыватьЕдиницуИзмерения     = ?(ПоказыватьЕдиницуИзмерения = Неопределено, Истина, ПоказыватьЕдиницуИзмерения);

	мСоответствиеТиповЦен = Новый Соответствие;

	// сформируем и заполним таблицу цен
	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = ТипыЦен.Индекс(СтрокаТипаЦен);
		мСоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, НомерСоответствияТекущейКолонки);

		Если ТаблицаЦен.Колонки.Найти("цена"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("цена"+НомерСоответствияТекущейКолонки, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2, ДопустимыйЗнак.Неотрицательный), СокрЛП(СтрокаТипаЦен.ТипЦен), 10);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("валюта"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("валюта"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("единица"+НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("единица"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "Единица", 8);
		КонецЕсли;
	КонецЦикла;

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

		НеПроводитьНулевыеЗначения = Истина;

		// быть может, это ввод на основании поступления
		Если ЗначениеЗаполнено(ПараметрОснование) 
		   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ЗаполнитьТабличнуюЧастьПоПоступлению(ПараметрОснование);
		КонецЕсли;
		
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	// Проверим корректность записанного документа, если он некорректен, исправим его
	Если ТипыЦен.Количество() = 0 И Товары.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о ценах очищена.");
		Товары.Очистить();
	КонецЕсли;

	// обновим список типов цен
	ЗаполнитьСписокТиповЦен();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	// "ТаблицаЦен".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	ЗаполнитьТаблицуЦенФормы();

	ЭлементыФормы.ТаблицаЦен.СоздатьКолонки();

	// Установим недостающие параметры
	УстановитьНедостающиеПараметры();

	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);


КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьКод"             , мКолонкиТовары.Код.Видимость);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьАртикул"         , мКолонкиТовары.Артикул.Видимость);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЦену"            , ПоказыватьЦену);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьВалюту"          , ПоказыватьВалюту);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЕдиницуИзмерения", ПоказыватьЕдиницуИзмерения);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьХарактеристику"  , ПоказыватьХарактеристику);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	СписокДобавленныхТиповЦен = Новый СписокЗначений;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеТиповЦенСкидок" Тогда

			ТипыЦен.Очистить();
			Для Каждого ЭлементСпискаТиповЦен Из ЗначениеВыбора.СписокТиповЦенСкидок Цикл
				СтрокаТиповЦен = ТипыЦен.Добавить();
				СтрокаТиповЦен.ТипЦен = ЭлементСпискаТиповЦен.Значение;
				Если СписокТиповЦен.НайтиПоЗначению(СтрокаТиповЦен.ТипЦен) = Неопределено Тогда
					СписокДобавленныхТиповЦен.Добавить(СтрокаТиповЦен.ТипЦен);
				КонецЕсли;
			КонецЦикла;

			// Обновим список типов цен
			ЗаполнитьСписокТиповЦен();

		ИначеЕсли ЗначениеВыбора.Команда = "НастройкаПараметров" Тогда

			ДеревоКолонок = ЗначениеВыбора.ДеревоКолонок;
			Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
				ЭтаФорма[СтрокаДерева.КолонкаИмя] = СтрокаДерева.Пометка;
			КонецЦикла;

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		      ИЛИ ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда

			ОбработкаПодбора("Товары", ЗначениеВыбора);

		КОнецЕсли;
	КонецЕсли;

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

	// Если надо, заполним строки по новым типам цен
	ЗаполнитьПоНовымТипамЦен(СписокДобавленныхТиповЦен);

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// сохраним таблицу значений в табличную часть товаров
	Товары.Очистить();
	Для Каждого СтрокаТаблицыТиповЦен Из ТаблицаЦен Цикл
		Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
			НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыЦен     = ТаблицаЦен.Индекс(СтрокаТаблицыТиповЦен);
			НоваяСтрока.Номенклатура               = СтрокаТаблицыТиповЦен.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыТиповЦен.ХарактеристикаНоменклатуры;
			НоваяСтрока.ТипЦен                     = СтрокаТипаЦен.ТипЦен;
			НоваяСтрока.Цена                       = СтрокаТаблицыТиповЦен["цена"+НомерСоответствияТекущейКолонки];
			НоваяСтрока.Валюта                     = СтрокаТаблицыТиповЦен["валюта"+НомерСоответствияТекущейКолонки];
			НоваяСтрока.ЕдиницаИзмерения            = СтрокаТаблицыТиповЦен["единица"+НомерСоответствияТекущейКолонки];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Так как изменение таблицы цен не влечет с собой изменение объекта,
	// то при изменении формы надо установить и признак модифицированности объекта
	Если Модифицированность и Не Модифицированность() Тогда

		// Установим признак модифицированности объекта
		Комментарий = Комментарий;

	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "НачалоВыбора" поля ввода типа цен.
//
Процедура СписокТиповЦенНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран контрагент!");
		Возврат;
	КонецЕсли;

	ФормаВыбораЦен = Обработки.ФормированиеЦен.Создать().ПолучитьФорму("ФормаВыбораТипаЦен", ЭтаФорма);

	ФормаВыбораЦен.СписокТиповЦенСкидок.ЗагрузитьЗначения(ТипыЦен.ВыгрузитьКолонку("ТипЦен"));
	ФормаВыбораЦен.ВладелецЦенСкидок         = Контрагент;
	ФормаВыбораЦен.ИмяСправочникаВыбора      = "ТипыЦенНоменклатурыКонтрагентов";
	ФормаВыбораЦен.ИмяКолонкиТиповЦенСкидок  = "ТипЦен";

	ФормаВыбораЦен.ОткрытьМодально();

КонецПроцедуры // СписокТиповЦенНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода типа цен.
//
Процедура СписокТиповЦенОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТипыЦен.Очистить();
	СписокТиповЦен.Очистить();

	// Обновим список типов цен
	ЗаполнитьСписокТиповЦен();

	// обновим состав колонок
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

КонецПроцедуры // СписокТиповЦенОчистка()

// Процедура - обработчик события "ПриАктивизацииЯчейки" таблицы ТаблицаЦен
//
Процедура ТаблицаЦенПриАктивизацииЯчейки(Элемент)

	Если Элемент.ТекущаяКолонка <> Неопределено
	   И ЭлементыФормы.ТаблицаЦен.ТекущиеДанные <> Неопределено Тогда

		Если (Лев(Элемент.ТекущаяКолонка.Имя, 4) = "един")
		 Или (Элемент.ТекущаяКолонка.Имя = "ХарактеристикаНоменклатуры") Тогда
			мКолонкиТовары[Элемент.ТекущаяКолонка.Имя].ЭлементУправления.ВыборПоВладельцу = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные.Номенклатура;
		КонецЕсли;

		Если (Лев(Элемент.ТекущаяКолонка.Имя, 7) = "единица")
		 Или (Лев(Элемент.ТекущаяКолонка.Имя, 6) = "валюта") 
		 Или Элемент.ТекущаяКолонка = мКолонкиТовары["Номенклатура"] Тогда
			мКолонкиТовары[Элемент.ТекущаяКолонка.Имя].ЭлементУправления.КнопкаОчистки   = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТаблицаЦенПриАктивизацииЯчейки()

// Процедура - обработчик события "ПриВыводеСтроки" таблицы ТаблицаЦен
//
Процедура ТаблицаЦенПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Найти("ИндексСтрокиТаблицыЦен") <> Неопределено
	   И мКолонкиТовары.ИндексСтрокиТаблицыЦен.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыЦен.УстановитьТекст(Формат(ТаблицаЦен.Индекс(ДанныеСтроки) + 1,"ЧРГ="));
	КонецЕсли;

	Если мКолонкиТовары.Найти("Код") <> Неопределено
	   И мКолонкиТовары.Найти("Артикул") <> Неопределено Тогда
		РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	КонецЕсли;

	// Поставим автоотметку незаполненного.
	ЭтоНеУслуга = Не ДанныеСтроки.Номенклатура.Услуга;
	Для каждого СтрокаТипаЦен Из ТипыЦен Цикл

		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Получить(СтрокаТипаЦен.ТипЦен);
		КолонкаЕдиницыТипаЦен = "единица" + НомерСоответствияТекущейКолонки;
		
		Если мКолонкиТовары.Найти(КолонкаЕдиницыТипаЦен) <> Неопределено
		   И мКолонкиТовары[КолонкаЕдиницыТипаЦен].Видимость Тогда
			ЯчейкаЕдиницы = ОформлениеСтроки.Ячейки[КолонкаЕдиницыТипаЦен];
			Если ЯчейкаЕдиницы <> Неопределено
			   И ЯчейкаЕдиницы.Видимость Тогда

				ЯчейкаЕдиницы.ОтметкаНезаполненного = ЭтоНеУслуга
													 И НЕ ЗначениеЗаполнено(ДанныеСтроки[КолонкаЕдиницыТипаЦен]);
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ТаблицаЦенПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы
//
Процедура ДействияФормыНастройка(Кнопка)

	ФормаНастройки = Обработки.ФормированиеЦен.Создать().ПолучитьФорму("ФормаНастройкиКолонок", ЭтаФорма);
	ФормаНастройки.ЗаполнитьДерево();

	Если мИспользоватьХарактеристики Тогда
		ФормаНастройки.ДобавитьВДеревоСтроку("Показывать характеристику номенклатуры" , "ПоказыватьХарактеристику", ПоказыватьХарактеристику);
	КонецЕсли;

	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать цену",              "ПоказыватьЦену",             ПоказыватьЦену);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать валюту",            "ПоказыватьВалюту",           ПоказыватьВалюту);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать единицу измерения", "ПоказыватьЕдиницуИзмерения", ПоказыватьЕдиницуИзмерения);

	ФормаНастройки.ОткрытьМодально();

КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамКонтрагента(Кнопка)

	ЗаполнитьТовары(Истина, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамКонтрагента()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамКонтрагента(Кнопка)

	ЗаполнитьТовары(Ложь, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамКонтрагента()

// Процедура вызывает сервисный механизм для обновления табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамКонтрагента(Кнопка)

	ЗаполнитьТовары(Ложь, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамКонтрагента()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению(Кнопка)

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран Контрагент!");
		Возврат;
	КонецЕсли;
	
	// Если заполняем, то почистим ТЧ
	Если ТаблицаЦен.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТаблицаЦен.Очистить();
	КонецЕсли;
	
	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по контрагенту.
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Значение = Контрагент;
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Использование = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТаблицыТиповЦенПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывает сервисный механизм для заполнения табличной части
// Товары
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению(Кнопка)

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Предупреждение("Не выбран Контрагент!");
		Возврат;
	КонецЕсли;

	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по контрагенту.
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Значение = Контрагент;
	ФормаВыбора.Отбор.ДокументыПоКонтрагенту.Использование = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТаблицыТиповЦенПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенПодбор()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	Если ТипыЦен.Количество() > 0 И ТипыЦен[0].ТипЦен.Владелец <> Контрагент Тогда
		ТекстВопроса = "Типы цен будут очищены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Контрагент = ТипыЦен[0].ТипЦен.Владелец;
			Возврат;
		КонецЕсли; 
	КонецЕсли;

	ОчиститьТипыЦен();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода контрагента.
//
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)

	ОчиститьТипыЦен();

КонецПроцедуры // КонтрагентОчистка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	ОбработкаПодбора(Товары, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ЦЕН

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры таблицы цен.
//
Процедура ТаблицаЦенНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатуры(ЭлементыФормы.ТаблицаЦен.ТекущиеДанные);

КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры таблицы цен.
//
Процедура ТаблицаЦенХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти);

КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

//////////////////////////////

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТаблицаЦенПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТаблицаЦенПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.ТаблицаЦен.Колонки;
