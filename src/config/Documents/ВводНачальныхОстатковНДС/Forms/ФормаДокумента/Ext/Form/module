////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит список числовых колонок документа (Структура)
Перем ЧисловыеКолонки;

Перем СтараяСуммаБезНДС, СтараяСуммаНДС;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

Перем текОрганизация; 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоСФ,                  ЭлементыФормы.КоманднаяПанельПоОстаткам.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДополнительныеСведения,      ЭлементыФормы.КоманднаяПанельПоОстаткам1.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетыСКонтрагентами,       ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентами.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетыСКонтрагентамиАвансы, ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентамиАвансы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

Процедура ЗаполнитьСписокКодовВидовОпераций()
	
	ЭлементыФормы.ДанныеПоСФ.Колонки.КодВидаОперации.ЭлементУправления.СписокВыбора.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей
		ИЛИ ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда 
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры, 
			ЭлементыФормы.ДанныеПоСФ.Колонки.КодВидаОперации.ЭлементУправления.СписокВыбора,
			Дата);
	Иначе
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры, 
			ЭлементыФормы.ДанныеПоСФ.Колонки.КодВидаОперации.ЭлементУправления.СписокВыбора,
			Дата);
	КонецЕсли;
				
КонецПроцедуры

// Рассчитывает сумму взаиморасчетов в строке ТЧ "Данные по СФ".
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти = Неопределено)

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
									мВалютаРегламентированногоУчета,
	                                СтрокаТабличнойЧасти.ВалютаВзаиморасчетов, 
	                                1, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                1,СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Рассчитывает сумму расчетов в валюте регламентированного учета в строке ТЧ "Данные по СФ".
Процедура РассчитатьРубСуммуРасчетов(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезНДС+СтрокаТабличнойЧасти.НДС 
			- ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным,0,СтрокаТабличнойЧасти.СуммаБезНДСОплата+СтрокаТабличнойЧасти.НДСОплата);

КонецПроцедуры

// Выполняет необходимые действия при изменении договора в строке ТЧ "Оплата поставщикам".
//
Процедура ПриИзмененииДоговора(СтрокаТабличнойЧасти = Неопределено, ИзменятьКурс = Истина)

	Если СтрокаТабличнойЧасти = Неопределено тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено тогда
	 	Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	Если ВидОперации = перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда 
		Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Или НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаАванса = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаАванса = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли; 
		
		Если ВалютаАванса = мВалютаРегламентированногоУчета Тогда
			СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
			//Зачищаем валютную сумму в строках расшифровки
			СтрокиРасшифровки = ДополнительныеСведения.НайтиСтроки(Новый структура("КлючСтроки",СтрокаТабличнойЧасти.КлючСтроки));
			Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				СтрокаРасшифровки.ВалютнаяСуммаСНДС = СтрокаРасшифровки.СуммаБезНДС+СтрокаРасшифровки.НДС;
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС + СтрокаРасшифровки.ВалютнаяСуммаСНДС;
			КонецЦикла;
			
		ИначеЕсли не СтрокаТабличнойЧасти.ВалютаАванса = ВалютаАванса Тогда
			СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
			//Зачищаем валютныую сумму в строках расшифровки
			СтрокиРасшифровки = ДополнительныеСведения.НайтиСтроки(Новый структура("КлючСтроки",СтрокаТабличнойЧасти.КлючСтроки));
			Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				СтрокаРасшифровки.ВалютнаяСуммаСНДС = 0;
			КонецЦикла; 
		КонецЕсли; 
		СтрокаТабличнойЧасти.ВалютаАванса = ВалютаАванса;
		ЭлементыФормы.ДополнительныеСведения.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (СтрокаТабличнойЧасти.ВалютаАванса=мВалютаРегламентированногоУчета);
	Иначе
		СтрокаТабличнойЧасти.ВалютаАванса = Справочники.Валюты.ПустаяСсылка();
		//СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
	КонецЕсли; 
	
	//Если не ОтразитьРасчетыСКонтрагентами Тогда
	//	Возврат;
	//КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТабличнойЧасти.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	КонецЕсли; 
	
	Если ИзменятьКурс или НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) или не СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс),1,СтруктураКурсаВзаиморасчетов.Курс);
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов      = ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность),1,СтруктураКурсаВзаиморасчетов.Кратность);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РассчитатьРубСуммуРасчетов(СтрокаТабличнойЧасти);
	РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПриИзмененииДоговора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки     = ЭлементыФормы.ДанныеПоСФ.Колонки;

	ЭтоВводОстатковПоАвансам = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, Истина, Ложь);
	ЭтоВводОстатковПоНДСПокупателей = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей, Истина, Ложь);
	ЭтоВводОстатковПоПоставщикам = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям, Истина, Ложь);
	
	//Название колонок даты и номера документа по видам операции
	Если ЭтоВводОстатковПоПоставщикам Тогда
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата документа поступления";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер документа поступления";
	ИначеЕсли ЭтоВводОстатковПоНДСПокупателей тогда
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата документа реализации";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер документа реализации";
	Иначе	
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата расчетного документа";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер расч. документа";
	КонецЕсли; 
	
	Колонки.ДатаПлатежноРасчетногоДокумента.АвтоОтметкаНезаполненного = ЭтоВводОстатковПоАвансам;
	Колонки.НомерПлатежноРасчетногоДокумента.АвтоОтметкаНезаполненного = ЭтоВводОстатковПоАвансам;
		
	// Доступность колонки счет-фактура для редактирования
	//Колонки.СчетФактура.ЭлементУправления.ТолькоПросмотр = Истина;
	
	//Видимость колонок табличной части "Данные по СФ".
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВалютаАванса,  					 ЭтоВводОстатковПоАвансам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВалютнаяСуммаСНДС, 				 ЭтоВводОстатковПоАвансам);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ПредъявленСФ, 					ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявлено,			ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявлено, 					ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСВключеноВСтоимость,	ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСВключеноВСтоимость, 			ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДССтавка0,				ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДССтавка0, 						ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявлено0,			Не ЭтоВводОстатковПоНДСПокупателей);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявлено0, 				Не ЭтоВводОстатковПоНДСПокупателей);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявленоНеПодтверждено0, ЭтоВводОстатковПоПоставщикам Или ЭтоВводОстатковПоАвансам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявленоНеПодтверждено0, Не ЭтоВводОстатковПоНДСПокупателей);
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	ВидимостьИсправления = ВерсияПостановления = 2;	
	ВидимостьКорректировки = ВерсияПостановления = 2 И (ЭтоВводОстатковПоПоставщикам ИЛИ ЭтоВводОстатковПоНДСПокупателей);
	ВидимостьИсправленияКорректировки = ВерсияПостановления = 2 И ВидимостьКорректировки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Исправление,				            ВидимостьИсправления);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерИсправления,			            ВидимостьИсправления);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаИсправления,			            ВидимостьИсправления);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.КорректировочныйСчетФактура,            ВидимостьКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерИсходногоДокумента,	            ВидимостьКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаИсходногоДокумента,		            ВидимостьКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерИсправленияИсходногоДокумента,     ВидимостьИсправленияКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаИсправленияИсходногоДокумента,	    ВидимостьИсправленияКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.УчитыватьИсправлениеИсходногоДокумента, ВидимостьИсправленияКорректировки);

	//Видимость колонок табличной части "Дополнительные сведения".
	Колонки     = ЭлементыФормы.ДополнительныеСведения.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВалютнаяСуммаСНДС, 				ЭтоВводОстатковПоАвансам);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявлено,			ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявлено, 					ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСВключеноВСтоимость,	ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСВключеноВСтоимость, 			ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДССтавка0,				ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДССтавка0, 						ЭтоВводОстатковПоПоставщикам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявлено0,			Не ЭтоВводОстатковПоНДСПокупателей);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявлено0, 				Не ЭтоВводОстатковПоНДСПокупателей);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаБезНДСПредъявленоНеПодтверждено0, ЭтоВводОстатковПоПоставщикам Или ЭтоВводОстатковПоАвансам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НДСПредъявленоНеПодтверждено0, 	Не ЭтоВводОстатковПоНДСПокупателей);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Номенклатура,		не ЭтоВводОстатковПоАвансам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДокументОплаты,		не ЭтоВводОстатковПоАвансам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДокументОтгрузки, 	Не ЭтоВводОстатковПоНДСПокупателей);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СтавкаНДСНеПодтверждена0, ЭтоВводОстатковПоНДСПокупателей);
	
	Если ЭтоВводОстатковПоАвансам Тогда
	    ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СтранаПроисхождения, не ЭтоВводОстатковПоАвансам);
	    ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерГТД,		 	не ЭтоВводОстатковПоАвансам);
	КонецЕсли; 
	
	Если ЭтоВводОстатковПоПоставщикам Тогда
		ОтобразитьДополнительныеСведения();
	КонецЕсли; 
	
	Колонки = ЭлементыФормы.РасчетыСКонтрагентами.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.РасчетыСБюджетом, 		ЭтоВводОстатковПоПоставщикам);
	
	Колонки = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.Колонки;
	
	ЭлементыФормы.Панель.Страницы.РасчетыСКонтрагентами.Видимость = Не ЭтоВводОстатковПоАвансам и ОтразитьРасчетыСКонтрагентами;
	ЭлементыФормы.Панель.Страницы.Авансы.Видимость = Не ЭтоВводОстатковПоНДСПокупателей и ОтразитьРасчетыСКонтрагентами;
	ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентамиАвансы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоОсновнымДанным.Доступность = ЭтоВводОстатковПоАвансам;
	ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентамиАвансы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСФ.Доступность = ЭтоВводОстатковПоАвансам;
	
	ЭлементыФормы.КоманднаяПанельПоОстаткам.Кнопки.ПодменюЗаполнить.Кнопки.СформироватьСФРасчеты.Доступность = ОтразитьРасчетыСКонтрагентами;
	
	ЭлементыФормы.ОтразитьРасчетыСКонтрагентами.Доступность = Истина;
	
КонецПроцедуры //УстановитьВидимость()

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьДополнительныеСведения(ТекСтрокаОстатков = Неопределено)

	Если ТекСтрокаОстатков = Неопределено и не ЭлементыФормы.ДанныеПоСФ.ТекущаяСтрока = Неопределено Тогда
		ТекСтрокаОстатков = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли; 
	
	
	// Включаем отбор тех дополнительных сведений, которые относятся к текущей строке,
	// выбранной в табличной части "ДанныеПоСФ"
	Если ТекСтрокаОстатков <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "ДополнительныеСведения"
		ЭлементыФормы.ДополнительныеСведения.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаОстатков.КлючСтроки;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.ДополнительныеСведения.ТолькоПросмотр = Истина;
		Если ДанныеПоСФ.Количество() = 0 Тогда
			ДополнительныеСведения.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьДополнительныеСведения()

// Функция анализирует таблицу ДополнительныеСведения и рассчитывает сумму 
// без НДС или сумму НДС по определенному событию.
Функция РассчитатьСуммуСобытия(КлючСтроки, Параметр = "СуммаБезНДС") //, ТекСобытие

	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	СтруктураПоиска   = Новый Структура("КлючСтроки", КлючСтроки);//,УдалитьСобытие, ТекСобытие
	Строки            = ДополнительныеСведения.НайтиСтроки(СтруктураПоиска);

	Счетчик = 0;
	
	Если Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Строки Цикл
			Счетчик = Счетчик + Строка[Параметр];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Счетчик;
	
КонецФункции // РассчитатьСуммуСобытия()

Процедура ОбновлениеОтображения()
	
	СтраницаПанели  = ЭлементыФормы.Панель.Страницы;
	
	СтраницаПанели.ДанныеПоНДС.Заголовок = ВидОперации;
	
	ЭлементыФормы.ДанныеПоСФ.Колонки.СуммаБезНДСОплата.ТекстШапки 	= ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, "Сумма без НДС зачтено", "Сумма без НДС оплата");
	ЭлементыФормы.ДанныеПоСФ.Колонки.НДСОплата.ТекстШапки 			= ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, "НДС зачтено", "НДС оплата");
	
	ЭлементыФормы.ДополнительныеСведения.Колонки.СуммаБезНДСОплата.ТекстШапки 	= ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, "Сумма без НДС зачтено", "Сумма без НДС оплата");
	ЭлементыФормы.ДополнительныеСведения.Колонки.НДСОплата.ТекстШапки 			= ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным, "НДС зачтено", "НДС оплата");

КонецПроцедуры

Процедура ОпределениеСпискаВидовДоступныхДоговоров()
	мСписокВидовДоговоров = Новый СписокЗначений;

	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;	

	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя] Тогда
			
			Если (ДанныеПоСФ.Количество() > 0) Или (РасчетыСКонтрагентами.Количество() > 0) Тогда
				// При смене вида операции табличная часть документа должна быть очищена
				Ответ = Вопрос("При изменении вида операции табличные части будут очищены. Продолжить?", РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.Отмена, "Изменение вида операции");
				Если Ответ = КодВозвратаДиалога.ОК Тогда
					ДанныеПоСФ.Очистить();
					РасчетыСКонтрагентами.Очистить();
					ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя];
				КонецЕсли;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя];
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	ОпределениеСпискаВидовДоступныхДоговоров();
	
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура КоманднаяПанельПоОстаткамСформироватьСФ(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		
		СформироватьСчетаФактуры();
		
	КонецЕсли;

	
КонецПроцедуры

Процедура КоманднаяПанельПоОстаткамСформироватьСФРасчеты(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
	
		ЭтоАвансы = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
		
		Если ЭтоАвансы Тогда
			СтрокиТЧ = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Истина));
		Иначе
			СтрокиТЧ = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Ложь));
		КонецЕсли;
		
		Если СтрокиТЧ <> Неопределено Тогда
			Если СтрокиТЧ.Количество() > 0 Тогда
				ОтветНаВопрос = Вопрос("Табличное поле " + ?(ЭтоАвансы, "авансов", "расчетов с контрагентами") + " будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
				Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьСчетаФактуры();
	
		ЗаполнитьРасчетыСКонтрагентами();	

	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетыСКонтрагентамиЗаполнитьПоОсновнымДанным(Кнопка)
	
	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Перед заполнением расчетов рекомендуется записать документ. Записать?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	
	СтрокиТЧ = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	
	Если СтрокиТЧ <> Неопределено Тогда
		Если СтрокиТЧ.Количество() > 0 Тогда
			ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеСФ() Тогда
		ОтветНаВопрос = Вопрос("В табличной части ""Данные по остаткам"" найдены строки с незаполненным " + ?(ЭтоАванс, "документом оплаты", "счетом-фактурой")+ ". Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРасчетыСКонтрагентами();
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетыСКонтрагентамиЗаполнитьСФ(Кнопка)

	ЗаполнитьСФРасчетыСКонтрагентами();	
	
КонецПроцедуры

Функция ПроверитьЗаполнениеСФ()
	
	Результат = Истина;
	
	Для Каждого СтрокаТЧ Из ДанныеПоСФ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
										  
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ОпределениеСпискаВидовДоступныхДоговоров();
	
	// Предполагается использовать отбор по таблице "ДополнительныеСведения"
	ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение = 0;

	// Требуется установить отбор по авансам в ТЧ "Расчеты с контрагентами"
	ЭлементыФормы.РасчетыСКонтрагентами.ОтборСтрок.Аванс.Использование = Истина;
	ЭлементыФормы.РасчетыСКонтрагентами.ОтборСтрок.Аванс.Значение = Ложь;
	ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ОтборСтрок.Аванс.Использование = Истина;
	ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ОтборСтрок.Аванс.Значение = Истина;

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("ДанныеПоНДС",           "ДанныеПоСФ");
	Страницы.Добавить("РасчетыСКонтрагентами", "РасчетыСКонтрагентами");
	Страницы.Добавить("Авансы",                "РасчетыСКонтрагентами");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.Панель, Страницы);

	ЗаполнитьСписокКодовВидовОпераций();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для каждого СтрокаРасшифровки Из ДополнительныеСведения Цикл
	    Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументОплаты) и не СтрокаРасшифровки.ДокументОплаты = Неопределено Тогда
			СтрокаРасшифровки.ДокументОплаты = Неопределено;
		КонецЕсли; 
	    Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументОтгрузки) и не СтрокаРасшифровки.ДокументОтгрузки = Неопределено Тогда
			СтрокаРасшифровки.ДокументОтгрузки = Неопределено;
		КонецЕсли; 
	
	КонецЦикла; 

	 СформироватьСчетаФактуры(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	ЗаполнитьСписокКодовВидовОпераций();
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если текОрганизация = Организация Тогда
		Возврат
	КонецЕсли;
	
	Если  РасчетыСКонтрагентами.Количество()+ДанныеПоСФ.Количество()>0 Тогда
				  
		Ответ = Вопрос("При изменении организации договоры контрагентов в табличных частях будут перезаполнены. Продолжить?", 
			РежимДиалогаВопрос.ОКОтмена, , , "При изменении организации");
		
		Если Ответ = КодВозвратаДиалога.Ок тогда
					
			Для Каждого Строка Из РасчетыСКонтрагентами Цикл
				Если Строка.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация 
					И мСписокВидовДоговоров.НайтиПоЗначению(Строка.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено Тогда
					Строка.ДоговорКонтрагента = Строка.Контрагент.ОсновнойДоговорКонтрагента;
					ПриИзмененииДоговораРасчетов(Строка); 
				КонецЕсли;
				
			КонецЦикла;	
			Для Каждого Строка Из ДанныеПоСФ Цикл
				Если Строка.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация 
					И мСписокВидовДоговоров.НайтиПоЗначению(Строка.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено Тогда
					Строка.ДоговорКонтрагента = Строка.Контрагент.ОсновнойДоговорКонтрагента;
					ПриИзмененииДоговора(Строка); 
				КонецЕсли;
			КонецЦикла;	
					
		Иначе
			Организация = текОрганизация;
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
    текОрганизация = Организация;
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДополнительныеСведенияСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    Если Найти(Колонка.Ключ,"СуммаБезНДС")>0 Тогда
			КолонкаНДС = СтрЗаменить(Колонка.Ключ,"СуммаБезНДС","НДС");
			Если не ЭлементыФормы.ДополнительныеСведения.Колонки.Найти(КолонкаНДС)= Неопределено Тогда
				СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные[Колонка.Ключ],
								Истина,
								Ложь,
								УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
			    ТекущиеДанные[КолонкаНДС] = СуммаНДС;
				Если ЧисловыеКолонки.Свойство(КолонкаНДС) тогда
					ТекСтрокаСФ[КолонкаНДС] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, КолонкаНДС);
				КонецЕсли;				
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ДанныеПоСФСтавкаНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля договора
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Контрагент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
											
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриАктивизацииСтроки(Элемент)
	
    ПодключитьОбработчикОжидания("ОбработчикОжиданияПриАктивизацииСтроки", 0.1, Истина);	 	 
    
КонецПроцедуры // ДанныеПоСФПриАктивизацииСтроки

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ДанныеПоСФ
//
Процедура ОбработчикОжиданияПриАктивизацииСтроки()
    
    ОтобразитьДополнительныеСведения();
	//Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным И
	//	ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные <> Неопределено тогда
	//	ЭлементыФормы.ДополнительныеСведения.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ВалютаАванса = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ВалютаАванса));
	//КонецЕсли;
    
КонецПроцедуры // ОбработчикОжиданияПриАктивизацииСтроки

 
// Процедура - обработчик события "ПередНачалоИзменения" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПередНачаломИзменения(Элемент, Отказ)
	
	Если ЧисловыеКолонки.Свойство(Элемент.ТекущаяКолонка.Имя) Тогда
		Предупреждение("Значение данного реквизита следует редактировать в таблице ""Дополнительные сведения"".");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактированияСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
		// "ДанныеПоСФ".
		// Значение должно быть уникальным в пределах таблицы ДополнительныеСведения
		НеУстановлено = Истина;
		Кандидат = ДанныеПоСФ.Количество();

		Пока НеУстановлено Цикл
			Если ДанныеПоСФ.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
	    Для каждого Колонка Из ЧисловыеКолонки Цикл
			ТекущаяСтрока[Колонка.Ключ] = 0;
		КонецЦикла; 
		Если не Элемент.Колонки.Найти("СчетФактура")=Неопределено Тогда
			ТекущаяСтрока.СчетФактура = Неопределено;
		КонецЕсли; 
		Если не Элемент.Колонки.Найти("Сумма")=Неопределено Тогда
			ТекущаяСтрока.Сумма = Неопределено;
		КонецЕсли; 
		Если не Элемент.Колонки.Найти("СуммаВзаиморасчетов")=Неопределено Тогда
			ТекущаяСтрока.СуммаВзаиморасчетов = Неопределено;
		КонецЕсли; 

		ОтобразитьДополнительныеСведения();

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// строки табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = ДополнительныеСведения.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДополнительныеСведения.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	ОтобразитьДополнительныеСведения();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаБезНДС
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияСумма_ПриИзменении(ИзменяемаяКолонка)
	
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	Если ЧисловыеКолонки.Свойство(ИзменяемаяКолонка) Тогда
		ТекСтрокаСФ[ИзменяемаяКолонка] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, ИзменяемаяКолонка); // , ТекСобытие
	КонецЕсли; 
	//КонецЕсли;
	
	Если не Найти(ИзменяемаяКолонка,"СуммаБезНДС") = 0 Тогда
		КолонкаНДС = СтрЗаменить(ИзменяемаяКолонка, "СуммаБезНДС", "НДС");
		
		Если Не ЭлементыФормы.ДополнительныеСведения.Колонки.Найти(КолонкаНДС) = Неопределено Тогда
		
			СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные[ИзменяемаяКолонка],
								Истина,
								Ложь,
								УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.СтавкаНДС));
		
			ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные[КолонкаНДС] = СуммаНДС;
			
			Если ЧисловыеКолонки.Свойство(ИзменяемаяКолонка) Тогда
				//ТекСтрокаСФ[КолонкаНДС] = СуммаНДС;
				ДополнительныеСведенияСумма_ПриИзменении(КолонкаНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение;
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
		СтараяСуммаБезНДС = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.СуммаБезНДС;
		СтараяСуммаНДС = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.НДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтобразитьДополнительныеСведения(Элемент.ТекущиеДанные);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПриИзменении(Элемент)
	
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
	
	//Определение валютной суммы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТД = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
		ТДСФ = ДанныеПоСФ.Найти(ТД.КлючСтроки, "КлючСтроки");
		Если ТДСФ.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
			ТД.ВалютнаяСуммаСНДС = ТД.СуммаБезНДС + ТД.НДС;
		ИначеЕсли (НЕ ЗначениеЗаполнено(ТД.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
			// Расчет по курсу на дату документа
			ДатаОпределенияКурса = Дата;
			КурсНаДатуДокумента = Ложь;
			Если ЗначениеЗаполнено(ТДСФ.ДатаПлатежноРасчетногоДокумента) Тогда
				ДатаОпределенияКурса = ТДСФ.ДатаПлатежноРасчетногоДокумента;
				КурсНаДатуДокумента = Истина;
			ИначеЕсли ЗначениеЗаполнено(ТДСФ.ДатаСФ) Тогда
				ДатаОпределенияКурса = ТДСФ.ДатаСФ;
				КурсНаДатуДокумента = Истина;
			КонецЕсли; 
	
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТДСФ.ВалютаАванса, ДатаОпределенияКурса);
			
			Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТДСФ.ВалютаАванса, Дата);
			КонецЕсли; 
			
			ТД.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТД.СуммаБезНДС + ТД.НДС,
									мВалютаРегламентированногоУчета, ТДСФ.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
									1, СтруктураКурсаВзаиморасчетов.Кратность); 
			
		Иначе
			// Пересчет исходя из указанной ранее суммы
			ТД.ВалютнаяСуммаСНДС = ТД.ВалютнаяСуммаСНДС*(ТД.СуммаБезНДС + ТД.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
		КонецЕсли;
		СтараяСуммаБезНДС = ТД.СуммаБезНДС;
		СтараяСуммаНДС = 	ТД.НДС;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
	
	//Определение валютной суммы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
		ТД = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
		ТДСФ = ДанныеПоСФ.Найти(ТД.КлючСтроки, "КлючСтроки");
		Если ТДСФ.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
			ТД.ВалютнаяСуммаСНДС = ТД.СуммаБезНДС + ТД.НДС;
		ИначеЕсли (НЕ ЗначениеЗаполнено(ТД.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
			// Расчет по курсу на дату документа
			ДатаОпределенияКурса = Дата;
			КурсНаДатуДокумента = Ложь;
			Если ЗначениеЗаполнено(ТДСФ.ДатаПлатежноРасчетногоДокумента) Тогда
				ДатаОпределенияКурса = ТДСФ.ДатаПлатежноРасчетногоДокумента;
				КурсНаДатуДокумента = Истина;
			ИначеЕсли ЗначениеЗаполнено(ТДСФ.ДатаСФ) Тогда
				ДатаОпределенияКурса = ТДСФ.ДатаСФ;
				КурсНаДатуДокумента = Истина;
			КонецЕсли; 
	
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТДСФ.ВалютаАванса, ДатаОпределенияКурса);
			
			Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
				СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТДСФ.ВалютаАванса, Дата);
			КонецЕсли; 
			
			ТД.ВалютнаяСуммаСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТД.СуммаБезНДС + ТД.НДС,
									мВалютаРегламентированногоУчета, ТДСФ.ВалютаАванса, 1, СтруктураКурсаВзаиморасчетов.Курс, 
									1, СтруктураКурсаВзаиморасчетов.Кратность); 
			
		Иначе
			// Пересчет исходя из указанной ранее суммы
			ТД.ВалютнаяСуммаСНДС = ТД.ВалютнаяСуммаСНДС*(ТД.СуммаБезНДС + ТД.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
		КонецЕсли;
		СтараяСуммаБезНДС = ТД.СуммаБезНДС;
		СтараяСуммаНДС = 	ТД.НДС;
	КонецЕсли; 

КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСОплатаПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСОплатаПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСВключеноВСтоимостьПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСВключеноВСтоимостьПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДССтавка0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДССтавка0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПредъявленоПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПредъявленоПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПредъявлено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПредъявлено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСНеПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСНеПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияПослеУдаления(Элемент)
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    ТекСтрокаСФ[Колонка.Ключ] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, Колонка.Ключ);
	КонецЦикла; 
КонецПроцедуры

Процедура ДополнительныеСведенияВидЦенностиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
		
	КонецЕсли;
КонецПроцедуры

Процедура ДополнительныеСведенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		СтруктураПоиска   = Новый Структура("КлючСтроки", ТекущаяСтрока.КлючСтроки);//,УдалитьСобытие, ТекСобытие
		Строки            = ДополнительныеСведения.НайтиСтроки(СтруктураПоиска);
		
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка Из Строки Цикл
				Если не (Строка.СтавкаНДС = ТекущаяСтрока.СтавкаНДС и
					Строка.ВидЦенности = ТекущаяСтрока.ВидЦенности)
					Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При расшифровке записей по авансам ставка НДС и вид ценности во всех строках расшифровки должны совпадать!", Отказ,);	
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПредъявленоНеПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Организация, ТекущаяСтрокаСФ.Контрагент, ТекущаяСтрокаСФ.ДоговорКонтрагента);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураПараметров, "ДополнительныеСведения");

КонецПроцедуры

Процедура ДополнительныеСведенияДокументОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущаяСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Отбор = Новый Структура("Организация", Организация);

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДополнительныеСведения");

КонецПроцедуры

Процедура ДанныеПоСФДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
		
	Если ЗначениеЗаполнено(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента) Тогда
		ЗаказПокупателя = Истина;
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
			ЗаказПокупателя = Ложь;
		КонецЕсли;
			
		ЗаполнениеДокументов.УстановитьТипСделки(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные, ЗаказПокупателя);
			
	КонецЕсли;

КонецПроцедуры

Процедура ДанныеПоСФСуммаПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов();
КонецПроцедуры

Процедура ДанныеПоСФКурсВзаиморасчетовПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов();
КонецПроцедуры

Процедура ДанныеПоСФСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;

	Отбор = Новый Структура("Организация, Контрагент, ДоговорКонтрагента", Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДанныеПоСФ");
	
КонецПроцедуры

Процедура ОтразитьРасчетыСКонтрагентамиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ДополнительныеСведенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    ТекСтрокаСФ[Колонка.Ключ] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, Колонка.Ключ);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДополнительныеСведенияВалютнаяСуммаСНДСПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСтавкаНДСНеПодтверждена0ПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
	
	СуммаНеПодтверждено = ТекущиеДанные.СуммаБезНДСНеПодтверждено0 + ТекущиеДанные.НДСНеПодтверждено0;
	
	Если СуммаНеПодтверждено = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДСНеПодтверждено0 = УчетНДС.РассчитатьСуммуНДС(СуммаНеПодтверждено, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДСНеПодтверждена0));
	ТекущиеДанные.СуммаБезНДСНеПодтверждено0 = СуммаНеПодтверждено - ТекущиеДанные.НДСНеПодтверждено0;
	
КонецПроцедуры

Процедура ДополнительныеСведенияНоменклатураПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
		
	ВидДокумента = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям, "Приобретение",
					?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей, "Реализация", ""));
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект, ВидДокумента); 
	
КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элемент.ТекущиеДанные.Аванс = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "КурсВзаиморасчетов"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элемент.ТекущиеДанные.Аванс = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораРасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "КурсВзаиморасчетов"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
		РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент);
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
		РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагентаРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.Контрагент <> СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец Тогда
		
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация 
			И мСписокВидовДоговоров.НайтиПоЗначению(СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
		ПриИзмененииДоговораРасчетов(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДоговораРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТабличнойЧасти.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) Или Не СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		ДатаОпределенияКурса = Дата;
		КурсНаДатуДокумента = Ложь;
		Если СтрокаТабличнойЧасти.Аванс И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			ДатаОпределенияКурса = СтрокаТабличнойЧасти.ДокументОплаты.Дата;
			КурсНаДатуДокумента = Истина;
		ИначеЕсли не СтрокаТабличнойЧасти.Аванс И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
			ДатаОпределенияКурса = СтрокаТабличнойЧасти.СчетФактура.Дата;
			КурсНаДатуДокумента = Истина;
		КонецЕсли; 
		
		СтруктураКурсаВзаиморасчетов 				= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаОпределенияКурса);
		
		Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
			СтруктураКурсаВзаиморасчетов 			= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.КурсВзаиморасчетов     = ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов= ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
		
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

Процедура ПересчитатьВалютнуюСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов, 
									мВалютаРегламентированногоУчета,
	                                СтрокаТабличнойЧасти.ВалютаВзаиморасчетов, 
	                                1, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                1, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры

Процедура ДанныеПоСФКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.Организация = Организация 
		И мСписокВидовДоговоров.НайтиПоЗначению(СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;
	КонецЕсли;
	ДанныеПоСФДоговорКонтрагентаПриИзменении("");

КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные.Аванс = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоСФСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	Сделка = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Сделка;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТипЗаказа = "СчетНаОплатуПоставщика";
		Иначе
			ТипЗаказа = "ЗаказПоставщику";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

	КонецЕсли;
		
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Сделка, СтандартнаяОбработка, ТипЗаказа);

КонецПроцедуры

Процедура РасчетыСКонтрагентамиСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	Сделка = ТекущиеДанные.Сделка;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТипЗаказа = "СчетНаОплатуПоставщика";
		Иначе
			ТипЗаказа = "ЗаказПоставщику";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

	КонецЕсли;
		
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Сделка, СтандартнаяОбработка, ТипЗаказа, );

КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные;
	Сделка = ТекущиеДанные.Сделка;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			ТипЗаказа = "СчетНаОплатуПоставщика";
		Иначе
			ТипЗаказа = "ЗаказПоставщику";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			ТипЗаказа = "СчетНаОплатуПокупателю";
		Иначе
			ТипЗаказа = "ЗаказПокупателя";
		КонецЕсли;

	КонецЕсли;
		
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Сделка, СтандартнаяОбработка, ТипЗаказа, );

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

Процедура РасчетыСКонтрагентамиСчетФактураПриИзменении(Элемент)
	
	ОпределениеКурсаРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	 
КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыДокументОплатыПриИзменении(Элемент)
	
	ОпределениеКурсаРасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

Процедура ОпределениеКурсаРасчетов(СтрокаТабличнойЧасти)
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	ДатаОпределенияКурса = Дата;
	КурсНаДатуДокумента = Ложь;
	Если СтрокаТабличнойЧасти.Аванс И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
		ДатаОпределенияКурса = СтрокаТабличнойЧасти.ДокументОплаты.Дата;
		КурсНаДатуДокумента = Истина;
	ИначеЕсли не СтрокаТабличнойЧасти.Аванс И ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетФактура) Тогда
		ДатаОпределенияКурса = СтрокаТабличнойЧасти.СчетФактура.Дата;
		КурсНаДатуДокумента = Истина;
	КонецЕсли; 
	
	СтруктураКурсаВзаиморасчетов 				= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаОпределенияКурса);
	
	Если КурсНаДатуДокумента И Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс) Тогда
		СтруктураКурсаВзаиморасчетов 			= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.КурсВзаиморасчетов     = ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
	СтрокаТабличнойЧасти.КратностьВзаиморасчетов= ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);

	ПересчитатьВалютнуюСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
КонецПроцедуры

ЧисловыеКолонки = новый Структура();

Для каждого Колонка из ЭлементыФормы.ДанныеПоСФ.Колонки Цикл
	Если Колонка.Имя = "КлючСтроки" или Колонка.Имя = "НомерСтроки" Тогда
		Продолжить;
	ИначеЕсли не ЭлементыФормы.ДополнительныеСведения.Колонки.Найти(Колонка.Имя)= Неопределено Тогда	
		Если ЭлементыФормы.ДополнительныеСведения.Колонки[Колонка.Имя].ЭлементУправления.ТипЗначения.Типы()[0] = Тип("Число")  Тогда
			ЧисловыеКолонки.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЕсли;
КонецЦикла; 

СтараяСуммаБезНДС = 0;
СтараяСуммаНДС 	  = 0;

текОрганизация = Организация;

