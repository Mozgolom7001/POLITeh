////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период.
Перем мТекущаяДатаДокумента;

Перем мСтруктураПоложенийКолонок;
Перем мКолонкиТовары;

// Флаги показа колонок.
Перем ПоказыватьЦену Экспорт;
Перем ПоказыватьВалюту Экспорт;
Перем ПоказыватьЕдиницуИзмерения Экспорт;
Перем ПоказыватьПроцентСкидкиНаценки Экспорт;
Перем ПоказыватьСпособРасчета Экспорт;
Перем ПоказыватьХарактеристику Экспорт;
Перем мПоказыватьКод;
Перем мПоказыватьАртикул;

// Хранит соответствие номеров колонок и типов цен.
Перем мСоответствиеТиповЦен Экспорт;

// Хранит дерево кнопок подменю заполнение ТЧ.
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости.
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()

	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТаблицаЦен, ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ПодменюЗаполнить);

	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);

КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Получает тип цен из соответствия по номеру колонки.
//
// Параметры:
//  НомерКолонки - Число, номер колонки, для которой необходимо получить соответствующий тип цен.
//
Функция ПолучитьТипЦенПоНомеруКолонки(НомерКолонки)

	Для Каждого КлючИЗначение Из мСоответствиеТиповЦен Цикл
		Если КлючИЗначение.Значение = НомерКолонки Тогда
			ТипЦен = КлючИЗначение.Ключ;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ТипЦен;

КонецФункции // ПолучитьТипЦенПоНомеруКолонки()

// Проверяет модифицированность документа и предлагает его записать
//
Функция ПроверитьМодифицированностьФормы(ТекстСообщения)

	Результат = Ложь;

	Если Модифицированность Тогда
		СтрПроведен = ?(Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. " + ТекстСообщения + " его необходимо записать" + СтрПроведен +".
		               |Записать" + СтрПроведен + "?", РежимДиалогаВопрос.ДаНет, , , "Документ изменен");

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если Проведен Тогда
				Попытка
					ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
				Исключение
					Предупреждение("Операция не выполнена!");
					Возврат Результат;
				КонецПопытки;
			Иначе
				ЗаписатьВФорме();
			КонецЕсли;

			Результат = Истина;
		КонецЕсли;
	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // РаботаСДиалогами.ПроверитьМодифицированность()

// Функция получает положение колонки для заданного имени сохраненного значения.
//
// Параметры:
//  ИмяСохраненногоЗначения - имя значения, под которым было сохранено строковое
//  представление положения колонки.
//
// Возвращаемое значение:
//  Положение колонки - Элемент системного перечисления ПоложениеКолонки.
//
Функция ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения)

	Результат = Неопределено;

	ПоложениеКолонкиСтрока = ВосстановитьЗначение(ИмяСохраненногоЗначения);

	Если ПоложениеКолонкиСтрока = "На следующей строке" Тогда
		Результат = ПоложениеКолонки.НаСледующейСтроке;
	ИначеЕсли ПоложениеКолонкиСтрока = "В той же колонке" Тогда
		Результат = ПоложениеКолонки.ВТойЖеКолонке;
	ИначеЕсли ПоложениеКолонкиСтрока = "Новая колонка" Тогда
		Результат = ПоложениеКолонки.НоваяКолонка;
	Иначе // значение еще не было сохранено.
		НомерКолонки = Число(Прав(ИмяСохраненногоЗначения, 1));

		// Надо взять настройку по умолчанию и сохранить ее для последующей работы.
		Если НомерКолонки = 0 Тогда // цена в новой колонке
			ПоложениеКолонкиСтрока = "Новая колонка";
		ИначеЕсли НомерКолонки = 1 Или НомерКолонки = 4 Тогда // валюта на следующей строке
			ПоложениеКолонкиСтрока = "На следующей строке";
		Иначе
			// Основная единица измерения и процент скидки/наценки в той же колонке
			ПоложениеКолонкиСтрока = "В той же колонке";
		КонецЕсли;

		СохранитьЗначение(ИмяСохраненногоЗначения, ПоложениеКолонкиСтрока);

		Результат = ПолучитьПоложениеКолонки(ИмяСохраненногоЗначения);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПоложениеКолонки()

// Функция открывает форму выбора типа цен.
//
// Возвращаемое значение:
//  Команда закрытия формы - тип значения произвольный.
//
Функция ОткрытьФормуВыбораТипаЦен()

	ФормаВыбораЦен = Обработки.ФормированиеЦен.ПолучитьФорму("ФормаВыбораТипаЦен", ЭтаФорма);

	ФормаВыбораЦен.СписокТиповЦенСкидок     = СписокТиповЦен.Скопировать();
	ФормаВыбораЦен.ИмяСправочникаВыбора     = "ТипыЦенНоменклатуры";
	ФормаВыбораЦен.ИмяКолонкиТиповЦенСкидок = "ТипЦен";

	Результат = ФормаВыбораЦен.ОткрытьМодально();

	Возврат Результат;

КонецФункции // ОткрытьФормуВыбораТипаЦен()

// Процедура создает и заполняет структуру, содержащую в себе варианты положения колонок в форме.
//
Процедура ПолучитьСтруктуруПоложенийКолонок()

	мСтруктураПоложенийКолонок = Новый Структура();
	СтруктураКолонок           = Новый Структура();
	Если мИспользоватьХарактеристики Тогда
		СтруктураКолонок.Вставить("ПоказыватьХарактеристику", "ХарактеристикаНоменклатуры");
	КонецЕсли;
	СтруктураКолонок.Вставить("ПоказыватьЦену"                , "Цена");
	СтруктураКолонок.Вставить("ПоказыватьСпособРасчета"       , "СпособРасчета");
	СтруктураКолонок.Вставить("ПоказыватьВалюту"              , "Валюта");
	СтруктураКолонок.Вставить("ПоказыватьЕдиницуИзмерения"    , "ЕдиницаИзмерения");
	СтруктураКолонок.Вставить("ПоказыватьПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	
	ИмяСохраненныхЗначений = Метаданные().Имя;
	Для Каждого ЭлементСтруктуры Из СтруктураКолонок Цикл
		ИмяСохраненныхЗначений = ИмяСохраненныхЗначений + "_" + ЭтаФорма[ЭлементСтруктуры.Ключ];
	КонецЦикла;

	х = 0;
	Для Каждого ЭлементСтруктуры Из СтруктураКолонок Цикл
		мСтруктураПоложенийКолонок.Вставить(ЭлементСтруктуры.Значение, ПолучитьПоложениеКолонки(ИмяСохраненныхЗначений + "_" + х));
		х = х + 1;
	КонецЦикла;

КонецПроцедуры // ПолучитьСтруктуруПоложенийКолонок()

// Процедура заполняет реквизит СписокЦен на форме из ТЧ "ТипыЦен".
//
Процедура ЗаполнитьСписокТиповЦен()

	СписокТиповЦен.Очистить();
	Для Каждого СтрокаТиповЦен Из ТипыЦен Цикл
		Если ЗначениеЗаполнено(СтрокаТиповЦен.ТипЦен) Тогда
			СписокТиповЦен.Добавить(СтрокаТиповЦен.ТипЦен);
		КонецЕсли;
	КонецЦИкла;

КонецПроцедуры // ЗаполнитьСписокТиповЦен()

// Процедура сдвигает колонку на требуемое количество колонок в позицию ОчередногоНомераКолонки
// и увеличивает ОчередногоНомераКолонки на единицу.
//
// Параметры:
//  Колонка - сдвигаемая колонка.
//  ОчереднойНомерКолонки - положение, которое должна занять колонка после сдвига.
//
Процедура СдвинутьКолонку(Колонка, ОчереднойНомерКолонки)

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	ТекущийНомерКолонки = КолонкиТаблицыЦен.Индекс(Колонка);
	Если ТекущийНомерКолонки <> ОчереднойНомерКолонки Тогда // сдвинем колонку
		КолонкиТаблицыЦен.Сдвинуть(ТекущийНомерКолонки, ОчереднойНомерКолонки - ТекущийНомерКолонки);
	КонецЕсли;

	ВсегоКолонок = КолонкиТаблицыЦен.Количество();
	ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
	ОчереднойНомерКолонки = ?(ОчереднойНомерКолонки > ВсегоКолонок, ВсегоКолонок, ОчереднойНомерКолонки);

КонецПроцедуры // СдвинутьКолонку()

// Устанавливает в табличной части цен на форме недостающие параметры.
//
Процедура УстановитьНедостающиеПараметры()

	мКолонкиТовары.Код.Видимость = мПоказыватьКод;
	мКолонкиТовары.Артикул.Видимость = мПоказыватьАртикул;

	мКолонкиТовары.ИндексСтрокиТаблицыЦен.ТолькоПросмотр = Истина;
	мКолонкиТовары.Код.ТолькоПросмотр = Истина;
	мКолонкиТовары.Артикул.ТолькоПросмотр = Истина;

	// Установим необходимые параметры номенклатуры.
	мКолонкиТовары.Номенклатура.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенНоменклатураПриИзменении"));
	мКолонкиТовары.Номенклатура.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	мКолонкиТовары.Номенклатура.АвтоОтметкаНезаполненного = Истина;
	мКолонкиТовары.Номенклатура.ЭлементУправления.АвтоОтметкаНезаполненного = Истина;
	мКолонкиТовары.Номенклатура.ЭлементУправления.АвтоВыборНезаполненного = Истина;
	мКолонкиТовары.Номенклатура.ЭлементУправления.КнопкаОткрытия = Истина;

	// Установим необходимые параметры характеристики номенклатуры.
	Если мИспользоватьХарактеристики Тогда
		мКолонкиТовары.ХарактеристикаНоменклатуры.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенХарактеристикаНоменклатурыПриИзменении"));
		мКолонкиТовары.ХарактеристикаНоменклатуры.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	КонецЕсли;

	// АвтоотметкаНезаполненного для валюты.
	Для каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];
		КолонкаВалюты = мКолонкиТовары.Найти("Валюта" + НомерСоответствияТекущейКолонки);

		Если КолонкаВалюты <> Неопределено Тогда
			КолонкаВалюты.АвтоОтметкаНезаполненного = Истина;
			КолонкаВалюты.ЭлементУправления.АвтоОтметкаНезаполненного = Истина;
			КолонкаВалюты.ЭлементУправления.АвтоВыборНезаполненного = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьНедостающиеПараметры()

// Процедура устанавливает колонки табличной часи в требуемом порядке,
// добавляет недостающие колонки, убирает ненужные.
//
Процедура ОбновитьСоставКолонок()

	// Надо расположить все нужные колонки в правильном порядке.
	// Сначала должна идти колонка "Код".
	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;
	ОчереднойНомерКолонки = 1;

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Код");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Артикул");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("Номенклатура");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	ТекущаяКолонка = КолонкиТаблицыЦен.Найти("ХарактеристикаНоменклатуры");
	СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТипаЦен.ТипЦен) Тогда
			Продолжить;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];
		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Количество();
			мСоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, мСоответствиеТиповЦен.Количество());
		КонецЕсли;

		// Цена.
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("цена" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда // надо вставить
			КолонкиТаблицыЦен.Вставить(ОчереднойНомерКолонки, "цена" + НомерСоответствияТекущейКолонки, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2, ДопустимыйЗнак.Неотрицательный), СокрЛП(СтрокаТипаЦен.ТипЦен), 10);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// Способ расчета.
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда // надо вставить
			КолонкиТаблицыЦен.Вставить(ОчереднойНомерКолонки, "СпособРасчета" + НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаЦены"), "Способ расчета", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// Валюта.
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("валюта" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда // надо вставить
			КолонкиТаблицыЦен.Вставить(ОчереднойНомерКолонки, "валюта" + НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// Единица измерения.
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("единица" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда // надо вставить
			КолонкиТаблицыЦен.Вставить(ОчереднойНомерКолонки, "единица"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "Единица", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

		// Процент скидки/наценки.
		ТекущаяКолонка = КолонкиТаблицыЦен.Найти("процент" + НомерСоответствияТекущейКолонки);
		Если ТекущаяКолонка = Неопределено Тогда // надо вставить
			КолонкиТаблицыЦен.Вставить(ОчереднойНомерКолонки, "процент"+НомерСоответствияТекущейКолонки, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2), "% скидки (наценки)", 8);
			ОчереднойНомерКолонки = ОчереднойНомерКолонки + 1;
		Иначе
			СдвинутьКолонку(ТекущаяКолонка, ОчереднойНомерКолонки);
		КонецЕсли;

	КонецЦикла;

	// Все, что за пределами, надо удалить.
	Для НомерУдаляемойКолонки = ОчереднойНомерКолонки По КолонкиТаблицыЦен.Количество() - 1 Цикл
		КолонкиТаблицыЦен.Удалить(ОчереднойНомерКолонки);
	КонецЦикла;

	ЭлементыФормы.ТаблицаЦен.СоздатьКолонки();

	// Установим недостающие параметры.
	УстановитьНедостающиеПараметры();

КонецПроцедуры // ОбновитьСоставКолонок()

// Производит перезаполнение и установку необходимых полей в строке табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо перезаполнить.
//
Процедура ПерезаполнитьСтроку(СтрокаТабличнойЧасти)

	Если СписокТиповЦен.Количество() = 0 Тогда // ничего делать не надо.
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипыЦен", СписокТиповЦен);
	Запрос.УстановитьПараметр("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипыЦенСправочник.Ссылка КАК ТипЦен,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.Цена ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.Цена ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Цена, ЦеныНоменклатурыБезХарактеристики.Цена)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.Валюта ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.Валюта ЕСТЬ NULL ТОГДА
	|		ТипыЦенСправочник.ВалютаЦены
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.Валюта, ЦеныНоменклатурыБезХарактеристики.Валюта)
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА
	|		ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаХраненияОстатков
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.ЕдиницаИзмерения, ЦеныНоменклатурыБезХарактеристики.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.ПроцентСкидкиНаценки ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки ЕСТЬ NULL ТОГДА
	|		ТипыЦенСправочник.ПроцентСкидкиНаценки
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.ПроцентСкидкиНаценки, ЦеныНоменклатурыБезХарактеристики.ПроцентСкидкиНаценки)
	|	КОНЕЦ КАК ПроцентСкидкиНаценки,
	|	ВЫБОР КОГДА ЦеныНоменклатурыБезХарактеристики.СпособРасчетаЦены ЕСТЬ NULL И ЦеныНоменклатурыСХарактеристикой.СпособРасчетаЦены ЕСТЬ NULL ТОГДА
	|		ТипыЦенСправочник.СпособРасчетаЦены
	|	ИНАЧЕ
	|		ЕСТЬNULL(ЦеныНоменклатурыСХарактеристикой.СпособРасчетаЦены, ЦеныНоменклатурыБезХарактеристики.СпособРасчетаЦены)
	|	КОНЕЦ КАК СпособРасчетаЦены
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыБезХарактеристики
	|ПО 
	|	ТипыЦенСправочник.Ссылка = ЦеныНоменклатурыБезХарактеристики.ТипЦен
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен) И Номенклатура = &Номенклатура И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры) КАК ЦеныНоменклатурыСХарактеристикой
	|ПО
	|	ТипыЦенСправочник.Ссылка = ЦеныНоменклатурыСХарактеристикой.ТипЦен
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка В (&ТипыЦен)
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	Пока Выборка.Следующий() Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[Выборка.ТипЦен];

		Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["цена"+НомерСоответствияТекущейКолонки] = Выборка.Цена;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["валюта"+НомерСоответствияТекущейКолонки] = Выборка.Валюта;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["единица"+НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("процент"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["процент"+НомерСоответствияТекущейКолонки] = Выборка.ПроцентСкидкиНаценки;
		КонецЕсли;
		Если КолонкиТаблицыЦен.Найти("СпособРасчета"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
			СтрокаТабличнойЧасти["СпособРасчета"+НомерСоответствияТекущейКолонки] = Выборка.СпособРасчетаЦены;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьСтроку()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти) Экспорт

	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииНоменклатуры()

// Производит заполнение и установку необходимых полей при изменении
// характеристики номенклатуры в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, которую необходимо заполнить.
//
Процедура ПриИзмененииХарактеристикиНоменклатуры(СтрокаТабличнойЧасти)

	ПерезаполнитьСтроку(СтрокаТабличнойЧасти);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатуры()

// Производит заполнение и установку необходимых полей при добавлении новых типов цен.
//
// Параметры:
//  СписокДобавленныхТиповЦен - список добавленных типов цен.
//
Процедура ЗаполнитьПоНовымТипамЦен(СписокДобавленныхТиповЦен)

	Если СписокДобавленныхТиповЦен.Количество() = 0 Тогда // ничего делать не надо
		Возврат;
	КонецЕсли;

	МассивХарактеристик = ТаблицаЦен.ВыгрузитьКолонку("ХарактеристикаНоменклатуры");
	МассивХарактеристик.Добавить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен", Дата);
	Запрос.УстановитьПараметр("ТипыЦен", СписокДобавленныхТиповЦен);
	Запрос.УстановитьПараметр("Номенклатура", ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ХарактеристикиНоменклатуры", МассивХарактеристик);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипыЦенСправочник.Ссылка КАК ТипЦен,
	|	ХарактеристикиНоменклатуры.Номенклатура КАК Номенклатура,
	|	ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ТипыЦенСправочник.ВалютаЦены)) КАК Валюта,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения, ХарактеристикиНоменклатуры.Номенклатура.ЕдиницаХраненияОстатков)) КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки, ТипыЦенСправочник.ПроцентСкидкиНаценки)) КАК ПроцентСкидкиНаценки,
	|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены, ТипыЦенСправочник.СпособРасчетаЦены)) КАК СпособРасчетаЦены
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенСправочник
	|СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ
	|		Характеристики.Ссылка КАК ХарактеристикаНоменклатуры,
	|		Характеристики.Владелец КАК Номенклатура
	|	ИЗ
	|		Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|	ГДЕ
	|		Характеристики.Ссылка В (&ХарактеристикиНоменклатуры)
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНоменклатуры,
	|		Номенклатура.Ссылка КАК Номенклатура
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|	) КАК ХарактеристикиНоменклатуры
	|ПО
	|	ИСТИНА
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, ТипЦен В(&ТипыЦен)
	|                                                  И Номенклатура В (&Номенклатура)
	|                                                  И ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
	|	) КАК ЦеныНоменклатурыСрезПоследних
	|ПО
	|	ТипыЦенСправочник.Ссылка = ЦеныНоменклатурыСрезПоследних.ТипЦен
	|	И ЦеныНоменклатурыСрезПоследних.Номенклатура = ХарактеристикиНоменклатуры.Номенклатура
	|	И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	|ГДЕ
	|	ТипыЦенСправочник.Ссылка В (&ТипыЦен)
	|	И ХарактеристикиНоменклатуры.Номенклатура В (&Номенклатура)
	|	И Не ХарактеристикиНоменклатуры.Номенклатура.ЭтоГруппа
	|	И ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры В (&ХарактеристикиНоменклатуры)
	|СГРУППИРОВАТЬ ПО
	|	ТипыЦенСправочник.Ссылка,
	|	ХарактеристикиНоменклатуры.Номенклатура,
	|	ХарактеристикиНоменклатуры.ХарактеристикаНоменклатуры
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;
	СтруктураПоиска = Новый Структура;

	Пока Выборка.СледующийПоЗначениюПоля("Номенклатура") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("ХарактеристикаНоменклатуры") Цикл
			СтруктураПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураПоиска);

			Если СтрокаТабличнойЧасти = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Пока Выборка.Следующий() Цикл
				НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[Выборка.ТипЦен];

				Если КолонкиТаблицыЦен.Найти("цена" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонки] = Выборка.Цена;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("валюта" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки] = Выборка.Валюта;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("единица" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("процент" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] = Выборка.ПроцентСкидкиНаценки;
				КонецЕсли;
				Если КолонкиТаблицыЦен.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки] = Выборка.СпособРасчетаЦены;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоНовымТипамЦен()

// Производит заполнение таблицы цен на форме.
//
Процедура ЗаполнитьТаблицуЦенФормы()

	Если ТипыЦен.Количество() = 0 Тогда // ничего делать не надо
		Возврат;
	КонецЕсли;

	ТаблицаТоваров = Товары.Выгрузить();
	ТаблицаТоваров.Сортировать("ИндексСтрокиТаблицыЦен, Номенклатура, ХарактеристикаНоменклатуры");

	ТекущийИндексСтрокиТаблицыЦен = Неопределено;
	НоваяСтрока = Неопределено;
	Для Каждого СтрокаТаблицыТоваров Из ТаблицаТоваров Цикл
		Если ТекущийИндексСтрокиТаблицыЦен <> СтрокаТаблицыТоваров.ИндексСтрокиТаблицыЦен
		 Или НоваяСтрока.Номенклатура <> СтрокаТаблицыТоваров.Номенклатура
		 Или НоваяСтрока.ХарактеристикаНоменклатуры <> СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры Тогда
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Номенклатура = СтрокаТаблицыТоваров.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыТоваров.ХарактеристикаНоменклатуры;
			ТекущийИндексСтрокиТаблицыЦен = СтрокаТаблицыТоваров.ИндексСтрокиТаблицыЦен;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТаблицыТоваров.ТипЦен];

		НоваяСтрока["цена" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.Цена;
		НоваяСтрока["СпособРасчета" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.СпособРасчетаЦены;
		НоваяСтрока["валюта" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.Валюта;
		НоваяСтрока["единица" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.ЕдиницаИзмерения;
		НоваяСтрока["процент" + НомерСоответствияТекущейКолонки] = СтрокаТаблицыТоваров.ПроцентСкидкиНаценки;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТаблицуЦенФормы()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Команда = "ПодборВТабличнуюЧастьТовары";

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура;
	СтруктураПараметровПодбора.Вставить("Команда"               , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"    , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("Контрагент"             , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорВзаиморасчетов"  , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"         , Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , Ложь);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " +
	                                                             ПредставлениеДок + " № " + Номер );

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Цена, ВалютаЦены, ЗапрашиватьЦену;

	КолонкиТаблицыЦен = ТаблицаЦен.Колонки;

	Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти" Тогда
		Выборка = ЗначениеВыбора.Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЦен <> Null
			   И Выборка.Номенклатура <> Null
			   И Не Выборка.ЭтоГруппа Тогда
				ТипЦен = Выборка.ТипЦен;

				Если ТипЗнч(Выборка.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
					ТипЦен = ТипЦен.ТипЦеныНоменклатуры;

					Если Не ЗначениеЗаполнено(ТипЦен) Тогда
						Продолжить;
					КонецЕсли;

					ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				Иначе
					ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
				КонецЕсли;

				Если ТипыЦен.Найти(ТипЦен) = Неопределено Тогда
					СтрокаТиповЦен = ТипыЦен.Добавить();
					СтрокаТиповЦен.ТипЦен = ТипЦен;

					// Обновим список типов цен.
					ЗаполнитьСписокТиповЦен();

					// Обновим состав колонок.
					ОбновитьСоставКолонок();
					ПолучитьСтруктуруПоложенийКолонок();
					ВидимостьКолонок();
				КонецЕсли;

				Номенклатура = Выборка.Номенклатура;
				ХарактеристикаНоменклатуры = ?(Выборка.ХарактеристикаНоменклатуры = Null, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), Выборка.ХарактеристикаНоменклатуры);

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);

				СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);
				Если СтрокаТабличнойЧасти = Неопределено Тогда
					СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
					СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
					СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
				КОнецЕсли;

				НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[ТипЦен];

				Если КолонкиТаблицыЦен.Найти("цена" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
					СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонки] = Выборка.Цена;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Выборка.Валюта) И НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					Если КолонкиТаблицыЦен.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки] = ТипЦен.СпособРасчетаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("валюта" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки] = ТипЦен.ВалютаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки] = Номенклатура.ЕдиницаХраненияОстатков;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("процент" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] = ТипЦен.ПроцентСкидкиНаценки;
					КонецЕсли;
				Иначе
					Если КолонкиТаблицыЦен.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки] = Выборка.СпособРасчетаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("валюта" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки] = Выборка.Валюта;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки] = ЕдиницаИзмерения;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("процент" + НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] = Выборка.ПроцентСкидкиНаценки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда
		Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
		   Ложь) Тогда
			Возврат;
		КонецЕсли;

		ЗначениеВыбора.Свойство("Номенклатура"   , Номенклатура);
		ЗначениеВыбора.Свойство("Характеристика" , Характеристика);
		ЗначениеВыбора.Свойство("ЗапрашиватьЦену", ЗапрашиватьЦену);

		ЗапрашиватьЦену = ?(ЗапрашиватьЦену = Неопределено, Ложь, ЗапрашиватьЦену);

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если найдем - увеличим количество, не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);
		Если СтрокаТабличнойЧасти = Неопределено Тогда // надо добавить
			НоваяСтрока = ТаблицаЦен.Добавить();
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Характеристика;

			Если ЗапрашиватьЦену Тогда
				ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
				ЗначениеВыбора.Свойство("Цена"            , Цена);
				ЗначениеВыбора.Свойство("ВалютаЦены"      , ВалютаЦены);

				Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
					НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];
					Если КолонкиТаблицыЦен.Найти("цена"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["цена" + НомерСоответствияТекущейКолонки] = Цена;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("валюта"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["валюта" + НомерСоответствияТекущейКолонки] = ВалютаЦены;
					КонецЕсли;
					Если КолонкиТаблицыЦен.Найти("единица"+НомерСоответствияТекущейКолонки) <> Неопределено Тогда
						НоваяСтрока["единица" + НомерСоответствияТекущейКолонки] = ЕдиницаИзмерения;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПриИзмененииНоменклатуры(НоваяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПодбора()

// Осуществляет вызов формы заполнения табличной части документа.
//
// Параметры:
//  Очистить - Истина - заполнить с предварительной очисткой, Ложь - добавить.
//  Обновить - Истина - обновить строки, Ложь - добавить строки.
//  ПоЦенамКонтрагентов - Истина - заполнять по ценам контрагентов,
//   Ложь - заполнять по ценам номенклатуры.
//
Процедура ЗаполнитьТовары(Очистить, Обновить, ПоЦенамКонтрагентов)

	Если ТаблицаЦен.Количество() > 0 И Очистить Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ТаблицаЦен.Очистить();
	КонецЕсли;

	Если Очистить И НЕ ТипЗнч(ПоЦенамКонтрагентов) = Тип("Строка") И ПоЦенамКонтрагентов Тогда
		ТипыЦен.Очистить();
		СписокТиповЦен.Очистить();
	КонецЕсли;

	ФормированиеЦен = Обработки.ФормированиеЦен.Создать();
	ФормаЗаполнения = ФормированиеЦен.ПолучитьФорму("ФормаЗаполнения", ЭтаФорма);

	ФормированиеЦен.мКоманда = "Изменить";

	Если ПоЦенамКонтрагентов Тогда
		
		ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатурыКонтрагентов";
		
	Иначе
		
		ФормаЗаполнения.ИмяРегистра = "ЦеныНоменклатуры";

		ТаблицаТиповЦен = ТипыЦен.Выгрузить();
		ТаблицаТиповЦен.Колонки.ТипЦен.Имя = "ТипЦенСкидок";
		ФормированиеЦен.ТипыЦенСкидок.Загрузить(ТаблицаТиповЦен);
		
	КонецЕсли;

	Если Обновить Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
		ФормаЗаполнения.мСписокНоменклатуры = СписокНоменклатуры;
	КонецЕсли;

	ФормаЗаполнения.ОткрытьМодально();

	УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

КонецПроцедуры // ЗаполнитьТовары()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа Поступления.
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//  ЧиститьТипыЦен      - Признак необходимости очистки типов цен перед заполнением.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ДокументПоступление, ЧиститьТипыЦен = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументПоступление.ТипЦен) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе "+СокрЛП(ДокументПоступление)+" не установлен тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ТипЦен = ДокументПоступление.ТипЦен.ТипЦеныНоменклатуры;

	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("для типа цен "+СокрЛП(ДокументПоступление.ТипЦен)+" не установлен базовый тип цен! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	Если ТипыЦен.Найти(ТипЦен) = Неопределено Тогда
		Если ЧиститьТипыЦен Тогда
			ТипыЦен.Очистить();
		КонецЕсли;

		СтрокаТабличнойЧасти = ТипыЦен.Добавить();
		СтрокаТабличнойЧасти.ТипЦен = ТипЦен;

		// Обновим список типов цен
		ЗаполнитьСписокТиповЦен();

		// обновим состав колонок
		ОбновитьСоставКолонок();
		ПолучитьСтруктуруПоложенийКолонок();
		ВидимостьКолонок();
	КонецЕсли;

	ПроцентСкидкиНаценки = ТипЦен.ПроцентСкидкиНаценки;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Док.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Док.ВалютаДокумента КАК ВалютаДокумента,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ТипЦен.ТипЦеныНоменклатуры КАК ТипЦен,
	|	Док.ТипЦен.ТипЦеныНоменклатуры.Код КАК КодТипаЦен,
	|	Док.Товары.(
	|		Номенклатура,
	|		ХарактеристикаНоменклатуры,
	|		Цена,
	|		ЕдиницаИзмерения,
	|		СтавкаНДС,
	|		СУММА(НомерСтроки) // для того, чтобы работала группировка
	|	)
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	Док.Товары.(Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Цена,
	|	ЕдиницаИзмерения,
	|	СтавкаНДС)
	|";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Контрагент = Шапка.Контрагент; // чтобы точно был правильный контрагент

	СтруктураОтбора = Новый Структура;
	НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[Шапка.ТипЦен];

	Выборка = Шапка.Товары.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;

		СтруктураОтбора.Вставить("Номенклатура"              , Выборка.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураОтбора);

		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;

		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
		                                        Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		                                        Шапка.СуммаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        Шапка.ТипЦен.ЦенаВключаетНДС,
		                                        УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));
		
		СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонки]    = Цена;
		СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки]  = Шапка.ВалютаДокумента;
		СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки] = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] = ПроцентСкидкиНаценки;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

// Функция получает список типов цен подчиненных базовому типу цен.
//
// Параметры:
//  БазовыйТипЦен - базовый тип цен, ссылка на справочник "ТипыЦенНоменклатуры".
//
// Возвращаемое значение:
//  Массив, содержащий подчиненные хранимые типы цен.
//
Функция ПолучитьПодчиненныеТипыЦен(БазовыйТипЦен)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БазовыйТипЦен", БазовыйТипЦен);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	ТипыЦенНоменклатуры.БазовыйТипЦен.Ссылка = &БазовыйТипЦен
	|	И Не ТипыЦенНоменклатуры.Рассчитывается
	|УПОРЯДОЧИТЬ ПО
	|	ТипыЦенНоменклатуры.Представление
	|";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипЦен");

КонецФункции // ПолучитьПодчиненныеТипыЦен()

// Процедура выполняет заполнение табличной части на основании документа Поступления
// с расчетом новых цен "Цена + Наценка" в качестве базовой цены документа Поступления.
//
// Параметры:
//  ДокументПоступление - Документ поступления, данными которого надо заполнить табличную часть.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании(ДокументПоступление,Перезаполнение=Ложь)
	Перем Отказ;
	Отказ = Ложь;
	ТипЦенБазовый = ДокументПоступление.ТипЦен.ТипЦеныНоменклатуры;
	Если ЗначениеЗаполнено(ТипЦенБазовый) И ТипЦенБазовый.Рассчитывается Тогда
		ОбщегоНазначения.СообщитьОбОшибке("В документе поступления для типа цены контрагента выбран динамический тип цен номенклатуры." + Символы.ПС+ "Расчет цен номенклатуры на основании цен контрагента выполнить невозможно!", Отказ);
	КонецЕсли;
	Если Отказ Тогда
		возврат;
	КонецЕсли;

	Если Не Перезаполнение Тогда
	
		// Получим подчиненные типы цен.
		ПодчиненныеТипыЦен = ПолучитьПодчиненныеТипыЦен(ТипЦенБазовый);
		ПодчиненныеТипыЦен.Добавить(ТипЦенБазовый);

		//Обойдем массив в обратном порядке.
		КоличествоПодчиненныхТипов = ПодчиненныеТипыЦен.Количество();
		Для Тмп = 1 По КоличествоПодчиненныхТипов Цикл
			СтрокаТабличнойЧасти = ТипыЦен.Добавить();
			СтрокаТабличнойЧасти.ТипЦен = ПодчиненныеТипыЦен[КоличествоПодчиненныхТипов - Тмп];
		КонецЦикла;

	Иначе
		ПодчиненныеТипыЦен = ТипыЦен.ВыгрузитьКолонку("ТипЦен");
	КонецЕсли;	
		
	ЗаполнитьСписокТиповЦен();

	// Обновим состав колонок.
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Дата", РабочаяДата);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументПоступление);
	Запрос.УстановитьПараметр("ПодчиненныеТипыЦен", ПодчиненныеТипыЦен);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТоварыИзДокумента.*,
	|	СпрТипыЦен.Ссылка КАК ТипЦен,
	|	СпрТипыЦен.ВалютаЦены КАК ВалютаТипаЦены,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки, СпрТипыЦен.ПроцентСкидкиНаценки) КАК ПроцентСкидкиНаценки,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены, СпрТипыЦен.СпособРасчетаЦены) КАК СпособРасчетаЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Ссылка.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|		Док.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|		Док.Номенклатура КАК Номенклатура,
	|		Док.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СРЕДНЕЕ(Док.Цена) КАК Цена,
	|		Док.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Док.СтавкаНДС КАК СтавкаНДС,
	|		МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК Док
	|	ГДЕ
	|		Док.Ссылка = &ДокументОснование
	|	СГРУППИРОВАТЬ ПО
	|		Док.Ссылка.СуммаВключаетНДС,
	|		Док.Ссылка.ВалютаДокумента,
	|		Док.Номенклатура,
	|		Док.ХарактеристикаНоменклатуры,
	|		Док.ЕдиницаИзмерения,
	|		Док.СтавкаНДС
	|	) КАК ТоварыИзДокумента
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	Справочник.ТипыЦенНоменклатуры КАК СпрТипыЦен
	|ПО
	|	СпрТипыЦен.Ссылка В (&ПодчиненныеТипыЦен)
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ТипЦен В (&ПодчиненныеТипыЦен)) КАК ЦеныНоменклатурыСрезПоследних
	|ПО
	|	СпрТипыЦен.Ссылка = ЦеныНоменклатурыСрезПоследних.ТипЦен
	|	И ТоварыИзДокумента.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|	И ТоварыИзДокумента.ХарактеристикаНоменклатуры = ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыИзДокумента.НомерСтроки
	|";

	СтруктураПоиска = Новый Структура;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПоиска.Вставить("Номенклатура"              , Выборка.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТаблицаЦен, СтруктураПоиска);

		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ТаблицаЦен.Добавить();
			СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		КонецЕсли;

		ТипЦенНоменклатуры = Выборка.ТипЦен;

		СтрокаТипаЦен = ТипыЦен.Найти(ТипЦенНоменклатуры);
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[ТипЦенНоменклатуры];

		ОкруглятьВБольшуюСторону = ТипЦенНоменклатуры.ОкруглятьВБольшуюСторону;
		ПорядокОкругления = ТипЦенНоменклатуры.ПорядокОкругления;

		БазоваяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Выборка.Цена,
		              Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
		              Выборка.СуммаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              ТипЦенБазовый.ЦенаВключаетНДС,
		              УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС));

		СпособРасчетаЦены = Выборка.СпособРасчетаЦены;
		НовыйПроцент      = Выборка.ПроцентСкидкиНаценки;
		ВалютаДокумента   = Выборка.ВалютаТипаЦены;
		ЕдиницаИзмерения  = Выборка.ЕдиницаИзмерения;
		Если (НЕ ЗначениеЗаполнено(ТипЦенНоменклатуры.БазовыйТипЦен)) 
			ИЛИ ТипЦенБазовый = ТипЦенНоменклатуры Тогда
			НоваяЦена = БазоваяЦена;
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаТипаЦены, Дата);
			НоваяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(НоваяЦена, Выборка.ВалютаДокумента, Выборка.ВалютаТипаЦены, СтруктураКурсаВзаиморасчетов.Курс, СтруктураКурсаВзаиморасчетов.Кратность);
		Иначе
			Если СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
				НоваяЦена = БазоваяЦена * (1 + НовыйПроцент / 100);
			ИначеЕсли СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
				НоваяЦена = Ценообразование.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦенНоменклатуры, Дата, БазоваяЦена, ВалютаДокумента, ВалютаДокумента);
				НовыйПроцент = 0;
			Иначе
				НоваяЦена = 0;
			КонецЕсли;
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(Выборка.ВалютаТипаЦены, Дата);
			НоваяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(НоваяЦена, Выборка.ВалютаДокумента, Выборка.ВалютаТипаЦены, СтруктураКурсаВзаиморасчетов.Курс, СтруктураКурсаВзаиморасчетов.Кратность);

			НоваяЦена = Ценообразование.ОкруглитьЦену(НоваяЦена, ПорядокОкругления, ОкруглятьВБольшуюСторону);
		КонецЕсли;

		СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонки]          = НоваяЦена;
		СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки] = СпособРасчетаЦены;
		СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки]        = ВалютаДокумента;
		СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки]       = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки]       = НовыйПроцент;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании()

// Заполняет список пунктов подменю "Изменить".
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню - кнопка командной панели формы соответственного подменю.
//  ОбъектОбработкиВыбора - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементМеню, ОбъектОбработкиВыбора) Экспорт

	Кнопки = ЭлементМеню.Кнопки;
	Кнопки.Очистить();

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];

		Если НомерСоответствияТекущейКолонки = Неопределено Тогда
			НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен.Количество();
			мСоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, НомерСоответствияТекущейКолонки);
		КонецЕсли;
		Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
			Кнопки.Добавить("Кнопка_" + НомерСоответствияТекущейКолонки, ТипКнопкиКоманднойПанели.Действие,
			                СокрЛП(СтрокаТипаЦен.ТипЦен), ОбъектОбработкиВыбора);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораИзмененияПоТипуЦен()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость колонок в зависимости от параметров документа
// и делает недоступной единицу хранения остатков.
//
Процедура ВидимостьКолонок()

	БылаНоваяКолонка = Ложь;

	Для Каждого КолонкаТиповЦен Из мКолонкиТовары Цикл
		ПризнакКолонки = Лев(КолонкаТиповЦен.Имя, 4);
		Если ПризнакКолонки = "цена" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьЦену;
			КолонкаТиповЦен.Положение = мСтруктураПоложенийКолонок.Цена;
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "Спос" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьСпособРасчета;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.СпособРасчета, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "валю" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьВалюту;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.Валюта, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "един" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьЕдиницуИзмерения;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ЕдиницаИзмерения, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "проц" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьПроцентСкидкиНаценки;
			КолонкаТиповЦен.Положение = ?(БылаНоваяКолонка, мСтруктураПоложенийКолонок.ПроцентСкидкиНаценки, ПоложениеКолонки.НоваяКолонка);
			БылаНоваяКолонка = Истина;
		ИначеЕсли ПризнакКолонки = "Хара" Тогда
			КолонкаТиповЦен.Видимость = ПоказыватьХарактеристику И мИспользоватьХарактеристики;
			КолонкаТиповЦен.Положение = ?(мСтруктураПоложенийКолонок.Свойство("ХарактеристикаНоменклатуры"),мСтруктураПоложенийКолонок.ХарактеристикаНоменклатуры, ПоложениеКолонки.НоваяКолонка);
		КонецЕсли;
	КонецЦикла;

	// Установить видимость колонок "ХарактеристикаНоменклатуры".
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиТовары, Новый Структура("ХарактеристикаНоменклатуры"), мИспользоватьХарактеристики);

КонецПроцедуры // ВидимостьКолонок()

// Процедура устанавливает доступность колонок.
//
Процедура ДоступностьКолонок()

	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];
		ТекКолонка = мКолонкиТовары.Найти("цена" + НомерСоответствияТекущейКолонки);

		Если СтрокаТипаЦен.ТипЦен.Рассчитывается Тогда
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.ТолькоПросмотр = Истина;
			КонецЕсли;
			ТекКолонка = мКолонкиТовары.Найти("валюта" + НомерСоответствияТекущейКолонки);
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.ТолькоПросмотр = Истина;
			КонецЕсли;
			ТекКолонка = мКолонкиТовары.Найти("единица" + НомерСоответствияТекущейКолонки);
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.ТолькоПросмотр = Истина;
			КонецЕсли;
			ТекКолонка = мКолонкиТовары.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки);
			Если ТекКолонка <> Неопределено Тогда
				ТекКолонка.АвтоОтметкаНезаполненного = Истина;
			КонецЕсли;
		Иначе
			Если СтрокаТипаЦен.ТипЦен.БазовыйТипЦен.Пустая() Тогда
				ТекКолонка = мКолонкиТовары.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки);
				Если ТекКолонка <> Неопределено Тогда
					ТекКолонка.ТолькоПросмотр = Истина;
				КонецЕсли;
			Иначе
				ТекКолонка = мКолонкиТовары.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки);
				Если ТекКолонка <> Неопределено Тогда
					ТекКолонка.АвтоОтметкаНезаполненного = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		мКолонкиТовары["СпособРасчета" + НомерСоответствияТекущейКолонки].ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ТаблицаЦенСпособРасчетаПриИзменении"));
	КонецЦикла;

КонецПроцедуры // ДоступностьКолонок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	мПоказыватьКод                 = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьКод");
	мПоказыватьАртикул             = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьАртикул");
	ПоказыватьЦену                 = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЦену");
	ПоказыватьВалюту               = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьВалюту");
	ПоказыватьЕдиницуИзмерения     = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЕдиницуИзмерения");
	ПоказыватьПроцентСкидкиНаценки = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьПроцентСкидкиНаценки");
	ПоказыватьСпособРасчета        = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьСпособРасчета");
	ПоказыватьХарактеристику       = ВосстановитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьХарактеристику");

	мПоказыватьКод                 = ?(мПоказыватьКод = Неопределено, Ложь, мПоказыватьКод);
	мПоказыватьАртикул             = ?(мПоказыватьАртикул = Неопределено, Ложь, мПоказыватьАртикул);
	ПоказыватьЦену                 = ?(ПоказыватьЦену = Неопределено, Истина, ПоказыватьЦену);
	ПоказыватьВалюту               = ?(ПоказыватьВалюту = Неопределено, Истина, ПоказыватьВалюту);
	ПоказыватьЕдиницуИзмерения     = ?(ПоказыватьЕдиницуИзмерения = Неопределено, Истина, ПоказыватьЕдиницуИзмерения);
	ПоказыватьПроцентСкидкиНаценки = ?(ПоказыватьПроцентСкидкиНаценки = Неопределено, Истина, ПоказыватьПроцентСкидкиНаценки);
	ПоказыватьСпособРасчета        = ?(ПоказыватьСпособРасчета = Неопределено, Истина, ПоказыватьСпособРасчета);
	ПоказыватьХарактеристику       = ?(мИспользоватьХарактеристики, ?(ПоказыватьХарактеристику = Неопределено, Истина, ПоказыватьХарактеристику), Ложь);

	мСоответствиеТиповЦен = Новый Соответствие;

	Если ЗначениеЗаполнено(ПараметрОснование)
	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрОснование.ТипЦен) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В документе " + СокрЛП(ПараметрОснование) + " не установлен тип цен! Заполнение невозможно.", Отказ);
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ПараметрОснование.ТипЦен.ТипЦеныНоменклатуры) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В документе "  + СокрЛП(ПараметрОснование) + " для типа цен " + СокрЛП(ПараметрОснование.ТипЦен) + " не установлен базовый тип цен! Заполнение невозможно.", Отказ);
			Возврат;
		КонецЕсли;

		ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании(ПараметрОснование);
	КонецЕсли;

	// Сформируем и заполним таблицу цен.
	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = ТипыЦен.Индекс(СтрокаТипаЦен);
		мСоответствиеТиповЦен.Вставить(СтрокаТипаЦен.ТипЦен, НомерСоответствияТекущейКолонки);

		Если ТаблицаЦен.Колонки.Найти("цена" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("цена" + НомерСоответствияТекущейКолонки, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2, ДопустимыйЗнак.Неотрицательный), СокрЛП(СтрокаТипаЦен.ТипЦен), 10);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("СпособРасчета" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("СпособРасчета"+НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаЦены"), "Способ расчета", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("валюта" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("валюта" + НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Валюта", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("единица" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("единица" + НомерСоответствияТекущейКолонки, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"), "Единица", 8);
		КонецЕсли;
		Если ТаблицаЦен.Колонки.Найти("процент" + НомерСоответствияТекущейКолонки) = Неопределено Тогда
			ТаблицаЦен.Колонки.Добавить("процент" + НомерСоответствияТекущейКолонки, ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2), "% скидки (наценки)", 8);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования,ПараметрОснование);

		НеПроводитьНулевыеЗначения = Истина;

	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;

	// Проверим корректность записанного документа, если он некорректен, исправим его.
	Если ТипыЦен.Количество() = 0 И Товары.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Ссылка) + " был записан некорректно! Информация о ценах очищена.");
		Товары.Очистить();
	КонецЕсли;

	// Обновим список типов цен.
	ЗаполнитьСписокТиповЦен();

	СтруктураКолонок = Новый Структура;

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");

	// Установить ограничение - изменять видимоть колонок для таличного поля "ТаблицаЦен".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	ЗаполнитьТаблицуЦенФормы();

	ЭлементыФормы.ТаблицаЦен.СоздатьКолонки();

	// Установим недостающие параметры.
	УстановитьНедостающиеПараметры();

	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	ДоступностьКолонок();

	УстановитьДоступностьТабличнойЧастиТовары();
	
	УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьКод"                 , мКолонкиТовары.Код.Видимость);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьАртикул"             , мКолонкиТовары.Артикул.Видимость);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЦену"                , ПоказыватьЦену);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьВалюту"              , ПоказыватьВалюту);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьЕдиницуИзмерения"    , ПоказыватьЕдиницуИзмерения);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьПроцентСкидкиНаценки", ПоказыватьПроцентСкидкиНаценки);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьСпособРасчета"       , ПоказыватьСпособРасчета);
	СохранитьЗначение("УстановкаЦенНоменклатуры_ПоказыватьХарактеристику"      , ПоказыватьХарактеристику);
	

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	СписокДобавленныхТиповЦен = Новый СписокЗначений;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ИзменениеТиповЦенСкидок" Тогда
			ТипыЦен.Очистить();

			Для Каждого ЭлементСпискаТиповЦен Из ЗначениеВыбора.СписокТиповЦенСкидок Цикл
				СтрокаТиповЦен = ТипыЦен.Добавить();
				СтрокаТиповЦен.ТипЦен = ЭлементСпискаТиповЦен.Значение;
				Если СписокТиповЦен.НайтиПоЗначению(СтрокаТиповЦен.ТипЦен) = Неопределено Тогда
					СписокДобавленныхТиповЦен.Добавить(СтрокаТиповЦен.ТипЦен);
				КонецЕсли;
			КонецЦикла;

			// Обновим список типов цен.
			ЗаполнитьСписокТиповЦен();

			// Установим кнопки подменю "Изменить"
			УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
													  Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

		ИначеЕсли ЗначениеВыбора.Команда = "НастройкаПараметров" Тогда
			ДеревоКолонок = ЗначениеВыбора.ДеревоКолонок;
			Для Каждого СтрокаДерева Из ДеревоКолонок.Строки Цикл
				ЭтаФорма[СтрокаДерева.КолонкаИмя] = СтрокаДерева.Пометка;
			КонецЦикла;

		ИначеЕсли ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
			  Или ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда

			ОбработкаПодбора("Товары",ЗначениеВыбора);
		КОнецЕсли;
	КонецЕсли;

	// Обновим состав колонок.
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();
	ДоступностьКолонок();

	// Если надо, заполним строки по новым типам цен.
	ЗаполнитьПоНовымТипамЦен(СписокДобавленныхТиповЦен);

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	// Сохраним таблицу значений в табличную часть товаров.
	Товары.Очистить();
	КоличествоСтрок = ТаблицаЦен.Количество() - 1;
	Для Тмп = 0 По КоличествоСтрок Цикл
		СтрокаТаблицыТиповЦен = ТаблицаЦен[Тмп];

		Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
			НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];

			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ИндексСтрокиТаблицыЦен     = Тмп;
			НоваяСтрока.Номенклатура               = СтрокаТаблицыТиповЦен.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТаблицыТиповЦен.ХарактеристикаНоменклатуры;
			НоваяСтрока.ТипЦен                     = СтрокаТипаЦен.ТипЦен;
			НоваяСтрока.Цена                       = СтрокаТаблицыТиповЦен["цена" + НомерСоответствияТекущейКолонки];
			НоваяСтрока.Валюта                     = СтрокаТаблицыТиповЦен["валюта" + НомерСоответствияТекущейКолонки];
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаТаблицыТиповЦен["единица" + НомерСоответствияТекущейКолонки];
			НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТаблицыТиповЦен["процент" + НомерСоответствияТекущейКолонки];
			НоваяСтрока.СпособРасчетаЦены          = СтрокаТаблицыТиповЦен["СпособРасчета" + НомерСоответствияТекущейКолонки];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

Процедура УстановитьДоступностьТабличнойЧастиТовары()

	// Если Типов цен больше нет, но товары существуют
	Если ТипыЦен.Количество() = 0
		И ТаблицаЦен.Количество() > 0 Тогда
	
		ОтветПользователя = Вопрос("Не осталось ни одного выбранного типа цен. Вернуться к редактированию типов цен?
		                           |При отказе от редактирования (ответ ""Нет"") табличная часть товаров будет очищена.", РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			ТаблицаЦен.Очистить();
		Иначе
			ОткрытьФормуВыбораТипаЦен();
			УстановитьДоступностьТабличнойЧастиТовары();
		КонецЕсли;
	
	КонецЕсли;

	Если ТипыЦен.Количество() = 0 Тогда
		ЭлементыФормы.ТаблицаЦен.ТолькоПросмотр = Истина;
	Иначе
		ЭлементыФормы.ТаблицаЦен.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Для каждого Кнопка Из ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		Кнопка.Доступность = НЕ ЭлементыФормы.ТаблицаЦен.ТолькоПросмотр;
	КонецЦикла;
	Для каждого Кнопка Из ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить.Кнопки Цикл
		Кнопка.Доступность = НЕ ЭлементыФормы.ТаблицаЦен.ТолькоПросмотр;
	КонецЦикла;
	ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.Подбор.Доступность = НЕ ЭлементыФормы.ТаблицаЦен.ТолькоПросмотр;
	ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ПоискПоШтрихКоду.Доступность = НЕ ЭлементыФормы.ТаблицаЦен.ТолькоПросмотр;
	
КонецПроцедуры // УстановитьДоступностьТабличнойЧастиТовары()

// Процедура - обработчик события "НачалоВыбора" поля ввода типа цен.
//
Процедура СписокТиповЦенНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОткрытьФормуВыбораТипаЦен();
	
	УстановитьДоступностьТабличнойЧастиТовары();
	
КонецПроцедуры // СписокТиповЦенНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода типа цен.
//
Процедура СписокТиповЦенОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТипыЦен.Очистить();

	// Обновим список типов цен
	ЗаполнитьСписокТиповЦен();

	УстановитьПодменюВыбораИзмененияПоТипуЦен(ЭлементыФормы.КоманднаяПанельТаблицыТиповЦен.Кнопки.ДействиеИзменить,
	                                          Новый Действие("КоманднаяПанельТаблицыТиповЦенДействиеИзменить"));

	// Обновим состав колонок.
	ОбновитьСоставКолонок();
	ПолучитьСтруктуруПоложенийКолонок();
	ВидимостьКолонок();

	УстановитьДоступностьТабличнойЧастиТовары();
	
КонецПроцедуры // СписокТиповЦенОчистка()

// Процедура - обработчик события "ПриАктивизацииЯчейки" ТЧ "ТаблицаЦен".
//
Процедура ТаблицаЦенПриАктивизацииЯчейки(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные;
	ТекущаяКолонка = Элемент.ТекущаяКолонка;

	Если ТекущаяСтрока = Неопределено Или ТекущаяКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяКолонкаИмя = ТекущаяКолонка.Имя;

	Если Лев(ТекущаяКолонкаИмя, 4) = "един" Или ТекущаяКолонкаИмя = "ХарактеристикаНоменклатуры" Тогда
		ТекущаяКолонка.ЭлементУправления.ВыборПоВладельцу = ТекущаяСтрока.Номенклатура;
	КонецЕсли;

	Если Лев(ТекущаяКолонкаИмя, 7) = "единица"
	 Или Лев(ТекущаяКолонкаИмя, 6) = "валюта"
	 Или Лев(ТекущаяКолонкаИмя,6)="Способ"
	 Или ТекущаяКолонка = мКолонкиТовары["Номенклатура"] Тогда
		ТекущаяКолонка.ЭлементУправления.КнопкаОчистки = Ложь;
	КонецЕсли;

	Если Лев(ТекущаяКолонкаИмя, 7) = "процент" Тогда
		Если ТекущаяСтрока["СпособРасчета" + Прав(ТекущаяКолонкаИмя, 1)] = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
			ТекущаяКолонка.ТолькоПросмотр = Истина;
		Иначе
			ТекущаяКолонка.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТаблицаЦенПриАктивизацииЯчейки()

// Процедура - обработчик события "ПриВыводеСтроки" таблицы ТаблицаЦен.
//
Процедура ТаблицаЦенПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Найти("ИндексСтрокиТаблицыЦен") <> Неопределено
	   И мКолонкиТовары.ИндексСтрокиТаблицыЦен.Видимость Тогда
		ОформлениеСтроки.Ячейки.ИндексСтрокиТаблицыЦен.УстановитьТекст(Формат(ТаблицаЦен.Индекс(ДанныеСтроки) + 1, "ЧРГ="));
	КонецЕсли;

	Если мКолонкиТовары.Найти("Код") <> Неопределено
	   И мКолонкиТовары.Найти("Артикул") <> Неопределено Тогда
		РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	КонецЕсли;

	ЭтоНеУслуга = Не ДанныеСтроки.Номенклатура.Услуга;

	// Поставим отметку незаполненного.
	Для Каждого СтрокаТипаЦен Из ТипыЦен Цикл
		НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен];
		КолонкаЕдиницыТипаЦен = "единица" + НомерСоответствияТекущейКолонки;

		Если мКолонкиТовары.Найти(КолонкаЕдиницыТипаЦен) <> Неопределено
		   И мКолонкиТовары[КолонкаЕдиницыТипаЦен].Видимость Тогда
			ЯчейкаЕдиницы = ОформлениеСтроки.Ячейки[КолонкаЕдиницыТипаЦен];

			Если ЯчейкаЕдиницы <> Неопределено И ЯчейкаЕдиницы.Видимость Тогда
				ЯчейкаЕдиницы.ОтметкаНезаполненного = ЭтоНеУслуга
													  И НЕ ЗначениеЗаполнено(ДанныеСтроки[КолонкаЕдиницыТипаЦен]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ТаблицаЦенПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)

	ФормаНастройки = Обработки.ФормированиеЦен.Создать().ПолучитьФорму("ФормаНастройкиКолонок", ЭтаФорма);
	ФормаНастройки.ЗаполнитьДерево();

	Если мИспользоватьХарактеристики Тогда
		ФормаНастройки.ДобавитьВДеревоСтроку("Показывать характеристику номенклатуры" , "ПоказыватьХарактеристику", ПоказыватьХарактеристику);
	КонецЕсли;
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать цену"                        , "ПоказыватьЦену",                 ПоказыватьЦену);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать способ расчета"              , "ПоказыватьСпособРасчета",        ПоказыватьСпособРасчета);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать валюту"                      , "ПоказыватьВалюту",               ПоказыватьВалюту);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать единицу измерения"           , "ПоказыватьЕдиницуИзмерения",     ПоказыватьЕдиницуИзмерения);
	ФормаНастройки.ДобавитьВДеревоСтроку("Показывать процент скидки/наценки"      , "ПоказыватьПроцентСкидкиНаценки", ПоказыватьПроцентСкидкиНаценки);

	ФормаНастройки.ОткрытьМодально();
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Истина, Ложь, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Ложь, Ложь, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатуры(Кнопка)

	ЗаполнитьТовары(Ложь, Истина, Ложь);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатуры()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатурыКонтрагентов(Кнопка)

	ЗаполнитьТовары(Истина, Ложь, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеЗаполнитьПоЦенамНоменклатурыКонтрагентов()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатурыКонтрагентов(Кнопка)

	ЗаполнитьТовары(Ложь, Ложь, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеДобавитьПоЦенамНоменклатурыКонтрагентов()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатурыКонтрагентов(Кнопка)

	ЗаполнитьТовары(Ложь, Истина, Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенОбновитьПоЦенамНоменклатурыКонтрагентов()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению(Кнопка)

	Если ТаблицаЦен.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Метаданные().Представление());
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

		ТаблицаЦен.Очистить();
	КонецЕсли;
	
	// Теперь нужно выбрать документ, по которому будем заполнять.
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда // ничего не выбрали
		Возврат;
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании(ДокументПоступление,Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенЗаполнитьПоПоступлению()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению(Кнопка)

	// Теперь нужно выбрать документ, по которому будем заполнять.
	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ ""Поступление товаров и услуг"" для заполнения документа установки цен";
	ФормаВыбора.РежимВыбора = Истина;

	ДокументПоступление = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументПоступление) Тогда // ничего не выбрали
		Возврат;
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоПоступлениюНаОсновании(ДокументПоступление,Истина);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДобавитьПоПоступлению()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывает печать прайса.
//
Процедура КоманднаяПанельТаблицыТиповЦенПрайс(Кнопка)

	Если Не Проведен Тогда
		Предупреждение("Прайс можно распечатать только после проведения документа");
		Возврат;
	КонецЕсли;

	Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	ФормаПрайса = Обработки.ПечатьПрайсЛиста.ПолучитьФорму("ФормаЗаполнения");

	Если ТаблицаЦен.Количество() > 0 Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.ЗагрузитьЗначения(ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"));
		ФормаПрайса.мСписокНоменклатуры = СписокНоменклатуры;
	КонецЕсли;

	Если СписокТиповЦен.Количество() > 0 Тогда
		ФормаПрайса.мСписокТиповЦен = СписокТиповЦен;
	КонецЕсли;

	ФормаПрайса.Открыть();
	ФормаПрайса.ОбновитьОтчет();

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенПрайс()

// Процедура вызывает сервисный механизм для изменения ТЧ "Товары".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенДействиеИзменить(Кнопка)

	Если Кнопка <> Неопределено Тогда
		Если НЕ ПроверитьМодифицированностьФормы("Перед вызовом обработки ""Формирование цен""") Тогда
			Возврат;
		КонецЕсли;

		НомерСоответствияТекущейКолонки = Число(СтрЗаменить(Кнопка.Имя, "Кнопка_", ""));
		Для каждого СтрокаТипаЦен Из ТипыЦен Цикл
			Если мСоответствиеТиповЦен[СтрокаТипаЦен.ТипЦен] = НомерСоответствияТекущейКолонки Тогда
				ТекСтрокаТипаЦен = СтрокаТипаЦен;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ТипЦен = ТекСтрокаТипаЦен.ТипЦен;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			ВалютаТипаЦен = ТипЦен.БазовыйТипЦен.ВалютаЦены;
			ЗаполненБазовыйТипЦен = ЗначениеЗаполнено(ТипЦен.БазовыйТипЦен);

			ФормированиеЦен = Обработки.ФормированиеЦен.Создать();

			// Установим реквизиты обработки
			ФормированиеЦен.ДатаЦенСкидок = Дата;

			ФормаФормированиеЦен = ФормированиеЦен.ПолучитьФорму();

			//Установим реквизиты формы
			ФормаФормированиеЦен.ТипЦен               = ТипЦен;
			ФормаФормированиеЦен.ДокументОбъект       = ЭтотОбъект;
			ФормаФормированиеЦен.ФормаДокументОбъекта = ЭтаФорма;

			Если ЗаполненБазовыйТипЦен Тогда
				СтрокаТипаЦен = ТипыЦен.Найти(ТипЦен.БазовыйТипЦен);

				//Если в документе есть колонка с базовым типом цен, то запомним номер этой колонки,
				//иначе - сформируем запрос по ценам базового типа.
				Если СтрокаТипаЦен <> Неопределено Тогда
					НомерСоответствияТекущейКолонкиБазовый = мСоответствиеТиповЦен[ТипЦен.БазовыйТипЦен];
				Иначе
					НомерСоответствияТекущейКолонкиБазовый = Неопределено;
					ВалютаЦены = ВалютаТипаЦен;

					СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦены, Дата);
					КурсВалюты      = СтруктураВалюты.Курс;
					КратностьВалюты = СтруктураВалюты.Кратность;

					// Надо будет получать цену. Сформируем запрос по ценам
					СтруктураЗначений = Новый Структура;
					СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен.БазовыйТипЦен);
					СтруктураЗначений.Вставить("НовыйВалютаДокумента", ВалютаЦены);
					СтруктураЗначений.Вставить("НовыйКурсДокумента", КурсВалюты);
					СтруктураЗначений.Вставить("НовыйКратностьДокумента", КратностьВалюты);

					СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

					// Получить нужные цены запросом
					РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений, 
					                                                СпособЗаполненияЦен, 
					                                                ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"),
					                                                Дата, Неопределено);

					ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();

					СтруктураПоиска = Новый Структура; // стркутура для поиска в результате запроса
				КонецЕсли;
			КонецЕсли;

			//Перенесем табличную часть
			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЦен Цикл
				НоваяСтрока = ФормированиеЦен.Товары.Добавить();
				НоваяСтрока.Пометка                    = Истина;
				НоваяСтрока.Номенклатура               = СтрокаТабличнойЧасти.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры;
				НоваяСтрока.Валюта                     = СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки];
				НоваяСтрока.ЕдиницаИзмерения           = СтрокаТабличнойЧасти["единица" + НомерСоответствияТекущейКолонки];
				НоваяСтрока.ПроцентСкидкиНаценки       = СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки];
				НоваяСтрока.Цена                       = СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонки];
				НоваяСтрока.СпособРасчетаЦены          = СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки];
				Если ЗаполненБазовыйТипЦен Тогда

					//Если в документе есть колонка с базовым типом цен, то цены возьмем из нее,
					//иначе - из выборки по регистру.
					Если НомерСоответствияТекущейКолонкиБазовый <> Неопределено Тогда
						НоваяСтрока.ЦенаБазовая = СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонкиБазовый];
						НоваяСтрока.ВалютаБазовая = СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонкиБазовый];
					Иначе
						СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТабличнойЧасти.Номенклатура);
						СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

						ВыборкаИзРезультатаЗапроса.Сбросить();
						Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // Нашли запись
							Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
								НоваяСтрока.ЦенаБазовая = 0;
								НоваяСтрока.ВалютаБазовая = ВалютаТипаЦен;
							Иначе
								НоваяСтрока.ЦенаБазовая = ВыборкаИзРезультатаЗапроса.Цена;

								// Пересчитываем цену в единицу документа.
								НоваяСтрока.ЦенаБазовая = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(НоваяСтрока.ЦенаБазовая, ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены, НоваяСтрока.ЕдиницаИзмерения);

								НоваяСтрока.ВалютаБазовая = ВыборкаИзРезультатаЗапроса.ВалютаЦены;
							КонецЕсли;
						Иначе
							НоваяСтрока.ВалютаБазовая = ВалютаТипаЦен;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			// Открываем форму обработки
			ФормаФормированиеЦен.Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенДействиеИзменить()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТаблицыТиповЦенПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТаблицыТиповЦенПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенПодбор()

// Процедура - обработчик действия элемента "ПереоценкаТоваровВРознице" панели "ДействияФормы".
//
Процедура ДействияФормыПереоценкаТоваровВРознице(Кнопка)

	РаботаСБизнесПроцессами.ОткрытьСписокПереоценкаТоваровРозницаПоДокументу(Ссылка);

КонецПроцедуры // ДействияФормыПереоценкаТоваровВРознице()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа.
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа.
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ЦЕН

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры таблицы цен.
//
Процедура ТаблицаЦенНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатуры(ЭлементыФормы.ТаблицаЦен.ТекущиеДанные);

КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры таблицы цен.
//
Процедура ТаблицаЦенХарактеристикаНоменклатурыПриИзменении(Элемент)

	ПриИзмененииХарактеристикиНоменклатуры(ЭлементыФормы.ТаблицаЦен.ТекущиеДанные);

КонецПроцедуры // ТаблицаЦенНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода способа расчета таблицы цен.
//
Процедура ТаблицаЦенСпособРасчетаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТаблицаЦен.ТекущиеДанные;
	ИмяКолонки = ЭлементыФормы.ТаблицаЦен.ТекущаяКолонка.Имя;

	НомерКолонки = Число(Прав(ИмяКолонки, 1));
	ИмяКолонкиПроцент = "процент" + НомерКолонки;

	Если Элемент.Значение = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
		СтрокаТабличнойЧасти[ИмяКолонкиПроцент] = 0;
	ИначеЕсли Элемент.Значение = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонкиПроцент]) Тогда
			ТипЦен = ПолучитьТипЦенПоНомеруКолонки(НомерКолонки);

			СтрокаТабличнойЧасти[ИмяКолонкиПроцент] = Ценообразование.ПолучитьПроцентСкидкиНаценкиЦеныНоменклатуры(СтрокаТабличнойЧасти["Номенклатура"],
			   СтрокаТабличнойЧасти["ХарактеристикаНоменклатуры"], ТипЦен, Дата, , , Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТаблицаЦенСпособРасчетаПриИзменении()

// Процедура - обработчик события "ПередОкончаниемРедактирования" поля ввода таблицы цен.
//
Процедура ТаблицаЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если Лев(Элемент.ТекущаяКолонка.Имя, 4) = "цена" Тогда
		НомерКолонки             = Число(Сред(Элемент.ТекущаяКолонка.Имя, 5));
		ТекущийТипЦен            = ПолучитьТипЦенПоНомеруКолонки(НомерКолонки);
		ПорядокОкругления        = ТекущийТипЦен.ПорядокОкругления;
		ОкруглятьВБольшуюСторону = ТекущийТипЦен.ОкруглятьВБольшуюСторону;

		ЭлементыФормы.ТаблицаЦен.ТекущиеДанные[Элемент.ТекущаяКолонка.Имя] = Ценообразование.ОкруглитьЦену(ЭлементыФормы.ТаблицаЦен.ТекущиеДанные[Элемент.ТекущаяКолонка.Имя], ПорядокОкругления, ОкруглятьВБольшуюСторону);
	КонецЕсли;

КонецПроцедуры // ТаблицаЦенПередОкончаниемРедактирования()

// Процедура вызова структуры подчиненности документа.
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);

КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ.
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)

	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);

КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "РассчитатьПоБазовымЦенам".
//
Процедура КоманднаяПанельТаблицыТиповЦенРассчитатьПоБазовымЦенам(Кнопка)

	СтруктураПоиска = Новый Структура;

	Для Каждого СтрокаТипЦен Из ТипыЦен Цикл
		ТипЦен = СтрокаТипЦен.ТипЦен;

		Если Не (НЕ ЗначениеЗаполнено(ТипЦен.БазовыйТипЦен) Или ТипЦен.Рассчитывается) Тогда
			ВалютаТипаЦен = ТипЦен.БазовыйТипЦен.ВалютаЦены;

			СтрокаТипаЦенБазовый = ТипыЦен.Найти(ТипЦен.БазовыйТипЦен);

			//Если в документе есть колонка с базовым типом цен, то запомним номер этой колонки,
			//иначе - сформируем запрос по ценам базового типа.
			Если СтрокаТипаЦенБазовый <> Неопределено Тогда
				НомерСоответствияТекущейКолонкиБазовый = мСоответствиеТиповЦен[СтрокаТипаЦенБазовый.ТипЦен];
			Иначе
				НомерСоответствияТекущейКолонкиБазовый = Неопределено;

				ВалютаЦены = ВалютаТипаЦен;

				СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсВалюты      = СтруктураВалюты.Курс;
				КратностьВалюты = СтруктураВалюты.Кратность;

				// Надо будет получать цену. Сформируем запрос по ценам
				СтруктураЗначений = Новый Структура;
				СтруктураЗначений.Вставить("НовыйТипЦен", ТипЦен.БазовыйТипЦен);
				СтруктураЗначений.Вставить("НовыйВалютаДокумента", ВалютаЦены);
				СтруктураЗначений.Вставить("НовыйКурсДокумента", КурсВалюты);
				СтруктураЗначений.Вставить("НовыйКратностьДокумента", КратностьВалюты);

				СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

				// Получить нужные цены запросом
				РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен,
				                                                ТаблицаЦен.ВыгрузитьКолонку("Номенклатура"),
				                                                Дата, Неопределено);

				ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();
			КонецЕсли;

			Для Каждого СтрокаТабличнойЧасти Из ТаблицаЦен Цикл
				НомерСоответствияТекущейКолонки = мСоответствиеТиповЦен[ТипЦен];
				ВалютаТекущая = ТипЦен.ВалютаЦены;

				Если НомерСоответствияТекущейКолонкиБазовый <> Неопределено Тогда
					ЦенаБазовая = СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонкиБазовый];
					ЦенаБазовая = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ЦенаБазовая, СтрокаТабличнойЧасти["Единица" + НомерСоответствияТекущейКолонкиБазовый], СтрокаТабличнойЧасти["Единица" + НомерСоответствияТекущейКолонки]);

					ВалютаБазовая = СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонкиБазовый];
				Иначе
					СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
					СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

					ВыборкаИзРезультатаЗапроса.Сбросить();
					Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // нашли запись
						Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
							ЦенаБазовая = 0;
							ВалютаБазовая = ВалютаТипаЦен;
						Иначе
							ЦенаБазовая = ВыборкаИзРезультатаЗапроса.Цена;

							// Пересчитываем цену в единицу документа.
							ЦенаБазовая = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ЦенаБазовая, ВыборкаИзРезультатаЗапроса.ЕдиницаИзмеренияЦены, СтрокаТабличнойЧасти["Единица" + НомерСоответствияТекущейКолонки]);

							ВалютаБазовая = ВыборкаИзРезультатаЗапроса.ВалютаЦены;
						КонецЕсли;
					Иначе
						ЦенаБазовая = 0;
						ВалютаБазовая = ВалютаТипаЦен;
					КонецЕсли;
				КонецЕсли;

				ВалютаТекущая = ТипЦен.ВалютаЦены;

				Если СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки] = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ЦенаБазовая * (1 + СтрокаТабличнойЧасти["процент" + НомерСоответствияТекущейКолонки] / 100);
					ВалютаТекущая = ВалютаБазовая;
				ИначеЕсли СтрокаТабличнойЧасти["СпособРасчета" + НомерСоответствияТекущейКолонки] = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = Ценообразование.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, Дата, ЦенаБазовая, ВалютаТекущая, ВалютаБазовая);

					СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки] = ВалютаТекущая;
				Иначе
					ПолученнаяЦена = 0;
				КонецЕсли;

				ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, СтрокаТабличнойЧасти["валюта" + НомерСоответствияТекущейКолонки], 0, 1, Дата);
				ПолученнаяЦена = Ценообразование.ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);

				СтрокаТабличнойЧасти["цена" + НомерСоответствияТекущейКолонки] = ПолученнаяЦена;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТаблицыТиповЦенРассчитатьПоБазовымЦенам()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	ОбработкаПодбора(Товары, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТаблицаЦенПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТаблицаЦенПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.ТаблицаЦен.Колонки;

