////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;

	КонецЕсли;

КонецПроцедуры // УстановитьФокус()

Процедура УстановитьДоступностьДокументаРасчетов()

	РасчетыПоДокументам = СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность        = РасчетыПоДокументам;
	ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Доступность = РасчетыПоДокументам;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;

КонецПроцедуры

Процедура УстановитьДоступностьСделки()
	
	СделкаДоступна = ЕстьРасчетыСКонтрагентами
		И (ВидОперации <> Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам)
		И (ВидОперации <> Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами)
		И (СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЭлементыФормы.Сделка.Доступность = СделкаДоступна;
	ЭлементыФормы.НадписьСделка.Доступность = СделкаДоступна;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ТолькоПросмотр = НЕ СделкаДоступна;

КонецПроцедуры

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	Если ЕстьРасчетыСКонтрагентами Тогда
	 
		Если Список Тогда
			ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница = ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"];
		Иначе
			ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница = ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"];
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПрочееСписаниеБезналичныхДенежныхСредств
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеНалога Тогда
		
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница = ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПрочие"];
						
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница = ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"];
				
	КонецЕсли;
	
	ЭлементыФормы.НадписьСписок.Видимость = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	ЭлементыФормы.Список.Видимость        = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	ЭлементыФормы.Список1.Видимость       = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
	Если ЧастичнаяОплата Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаЧастичнаяОплата", ЭлементыФормы.ПанельОплата);
	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаОплата", ЭлементыФормы.ПанельОплата);
	КонецЕсли;
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность                        = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КнопкаПодбор.Доступность                                                    = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить.Кнопки.Заполнить.Доступность = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность                            = НЕ ЧастичнаяОплата;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	ПоказатьРеквизитыПлан = (НЕ Список) И ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа);
	ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость        = ПоказатьРеквизитыПлан;
	ЭлементыФормы.СуммаПлатежаПлан.Видимость              = ПоказатьРеквизитыПлан;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость = ПоказатьРеквизитыПлан;
	ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость       = ПоказатьРеквизитыПлан;
	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость         = ПоказатьРеквизитыПлан;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы,
		"НадписьПроект,Проект,НадписьПроект1,Проект1,РасшифровкаПлатежа.Проект");

КонецПроцедуры // УстановитьВидимость()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		
		ПриИзмененииОрганизации();
		
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	СтрокаПлатеж.ДокументПланированияПлатежа   = Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка                        = Неопределено;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	ИННПолучателя = Контрагент.ИНН;
	КПППолучателя = Контрагент.КПП;

КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииОрганизации()

	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СчетОрганизации=Организация.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаОрганизации();
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		ТекстПлательщика = "";
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	СтараяСуммаДокумента=СуммаДокумента;
	
	ПересчитыватьСумму=Истина;
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)), СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств, ПересчитыватьСумму);
	
	КоэффициентПересчета=?(СтараяСуммаДокумента=0,0,СуммаДокумента/СтараяСуммаДокумента);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			
			Если ПересчитыватьСумму Тогда
				Строка.СуммаПлатежа=Строка.СуммаПлатежа*КоэффициентПересчета;
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(Строка);
			КонецЕсли;
							
			мТекущаяВалютаВзаиморасчетов = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Строка.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, ВалютаДокумента,
				мТекущаяВалютаВзаиморасчетов,
				КурсДокумента, Строка.КурсВзаиморасчетов,
				КратностьДокумента, Строка.КратностьВзаиморасчетов);
							
			Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					Строка.ДокументПланированияПлатежа="";
					Строка.КурсВзаиморасчетовПлан=0;
					Строка.СуммаПлатежаПлан=0;
				ИначеЕсли Строка.КурсВзаиморасчетовПлан>0 Тогда
					
					Если мТекущаяВалютаВзаиморасчетов=ВалютаДокумента Тогда
						Строка.СуммаПлатежаПлан=Строка.СуммаВзаиморасчетов;
						
					ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетовПлан <> 0) Тогда
						Строка.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, мТекущаяВалютаВзаиморасчетов,
						ВалютаДокумента,
						Строка.КурсВзаиморасчетовПлан,КурсДокумента,
						Строка.КратностьВзаиморасчетов,КратностьДокумента);	
					Иначе
						Строка.СуммаПлатежаПлан = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;
			
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли
				
		КонецЕсли;
		
		СуммаДокументаПриИзменении();
						
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();
		
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
	КонецЕсли;	
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок = СокрЛП(СчетОрганизации.ВалютаДенежныхСредств);
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
	Иначе	
		ТекстПлательщика  = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
			
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
	СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
									мТекущаяВалютаВзаиморасчетов,
									КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
									КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя = "";
		Возврат;
	КонецЕсли;
		
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
		ПриИзмененииДоговора();
		УстановитьФокус();
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
		Возврат;
	КонецЕсли;	
	
	Если НЕ СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
	Иначе	
		ТекстПолучателя   = "";
	КонецЕсли;	

КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

Процедура НачальноеЗаполнениеПриВыбореКонтрагента()

	Если НЕ Контрагент.Пустая() Тогда
		
		ИННПолучателя = Контрагент.ИНН;
		КПППолучателя = Контрагент.КПП;
		
		Если НЕ СчетКонтрагента.Пустая() Тогда
			ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
		Иначе	
			ТекстПолучателя   = "";
		КонецЕсли;
		
	Иначе
		
		ИННПолучателя = "";
		КПППолучателя = "";
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;


КонецПроцедуры

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()

	Если НЕ Организация.Пустая() Тогда

		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		
		Если НЕ СчетОрганизации.Пустая() Тогда
			ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
		Иначе	
			ТекстПлательщика  = "";
		КонецЕсли;
	
	Иначе	
		
		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;	

КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			НачальноеЗаполнениеПриВыбореОрганизации();
			НачальноеЗаполнениеПриВыбореКонтрагента();			
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(РасшифровкаПлатежа[0], ВидОперации);
			
		КонецЕсли;

	Иначе

		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		ЭтаФорма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр ИЛИ ЧастичнаяОплата;

	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	УстановитьКурсДокумента();
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
			
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	МассивВидовОпераций = Новый Массив;
	Для каждого Элемент Из ВидОперации.Метаданные().ЗначенияПеречисления Цикл
		Если Элемент.Имя <> "ПереводНаДругойСчет" 
			И Элемент.Имя <> "ПеречислениеДенежныхСредствПодотчетнику" 
			Тогда
			МассивВидовОпераций.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	МассивВидовОпераций, 
	Новый Действие("ДействияФормыДействиеУстановитьОперацию"));



	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;

	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.НадписьЧастичнаяОплата.Заголовок = УправлениеДенежнымиСредствами.СформироватьТекстЧастичнаяОплата(Ссылка,"ДенежныеСредстваКСписанию","ДокументСписания");
	КонецЕсли;

	//Установка меню Клиент-Банк
	РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;

	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	Если СтрокаПлатеж <> Неопределено Тогда
	
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору, 
																						СтрокаПлатеж.КурсВзаиморасчетов,
																						СтрокаПлатеж.КратностьВзаиморасчетов,
																						мВалютаРегламентированногоУчета,
																						Истина);
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок = Строка(СчетОрганизации.ВалютаДенежныхСредств);
		
		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
		
		ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
										Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
										" "+СокрЛП(ВалютаДокумента);
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПоДоговору;
			КонецЕсли;
			
			
			ТекстКурсаЗаявки= РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, 
											СтрокаПлатеж.КурсВзаиморасчетовПлан,
											СтрокаПлатеж.КратностьВзаиморасчетов,
											мВалютаРегламентированногоУчета,
											Истина);
			
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЭлементыФормы.НадписьСделка.Заголовок="Сделка:" Тогда
		
		ЭлементыФормы.НадписьСделка.Высота=19;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=19;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=24;
		
	Иначе
		
		ЭлементыФормы.НадписьСделка.Высота=27;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=15;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=29;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРеглУчета(ЭтотОбъект,СтрокаПлатеж, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
		
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы. 
// Вызывается при смене или перечитывании объекта.
Процедура ПриИзмененииДанных()
	
	Если ТипЗнч(СтрокаПлатеж) = Тип("ДокументТабличнаяЧастьСтрока.ИнкассовоеПоручениеПолученное.РасшифровкаПлатежа")
		И РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = -1 Тогда
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств[Кнопка.Имя];
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Список = Ложь;
		
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		УстановитьФокус();
		
		ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		УстановитьВидимость();
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            			=НовыйКонтрагент;
		СчетКонтрагента					=НовыйКонтрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.ДоговорКонтрагента =НовыйКонтрагент.ОсновнойДоговорКонтрагента;
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()

//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=Лев(РеквизитыКонтрагента[0].Реквизит,10);
	
	СтрокаИНН=РеквизитыКонтрагента.Найти(ТипКонтрагента+"ИНН","Реквизит");
	
	Если НЕ СтрокаИНН=Неопределено Тогда
		
		ИННКраткий=СтрокаИНН.Значение;
		НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
			Предупреждение("Контрагент с ИНН "+ИННКраткий+" уже был создан ранее.")
			
		Иначе                         
			
			Если РеквизитыКонтрагента.Количество()>0 Тогда
				                            
				ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
				ФормаКонтрагентов.СформироватьИЗагрузитьДеревоПоТаблицеЗначений(РеквизитыКонтрагента);
				ФормаКонтрагентов.ОткрытьМодально();
				
				//Проверяем, не был ли создан контрагент в сеансе работы с обработкой
				НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
				
				Если НЕ НовыйКонтрагент.Пустая() Тогда
					
					ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации();
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	УстановитьФокус();

КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)

	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);

КонецПроцедуры // СтавкаНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)

	ПроверкаКурсовВалют();
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;

КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();

	Если ЗначениеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;

	ПриИзмененииСчетаКонтрагента();

	ПриИзмененииДоговора();
	УстановитьФокус();

КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	ДоговорСтрокаПлатеж = СтрокаПлатеж.ДоговорКонтрагента;
	Если НЕ ДоговорСтрокаПлатеж.РасчетыВУсловныхЕдиницах
		И ДоговорСтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();
			
		Иначе
			
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Значение=Ссылка;
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Использование=Истина;
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если НЕ ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Ложь);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Ложь);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
 	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"					,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуПлатежа();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
			
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
			
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
										
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, ?(Оплачено,ДатаОплаты,Дата));
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
														СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

