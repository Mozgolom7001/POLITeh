////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера.
Перем мТекущаяДатаДокумента;

// Устанавливается в значение "Истина", если пользователю можно менять цену в документе.
Перем мМожноМенятьЦенуВДокументе;

// Коллекция колонок табличного поля "Товары".
Перем мКолонкиТовары;

// Хранит дерево кнопок подменю заполнение ТЧ.
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура управляет видимостью и доступностью элементов формы.
//
Процедура УстановитьВидимость()

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	мКолонкиТовары.Количество.Видимость = мВидОперацииНТТ;
	мКолонкиТовары.ЦенаВРозницеСтарая.Видимость = мВидОперацииНТТ;

	Если мВидОперацииРозница Тогда
		мКолонкиТовары.СерияНоменклатуры.Видимость = Ложь;
	ИначеЕсли мВидОперацииНТТ Тогда
		Если мКолонкиТовары.СерияНоменклатуры.ИзменятьВидимость Тогда
			мКолонкиТовары.СерияНоменклатуры.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.ДокументУстановкаЦен.Видимость = мВидОперацииРозница;
	ЭлементыФормы.НадписьДокументУстановкаЦен.Видимость = мВидОперацииРозница;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости.
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()

	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);

	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);

КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(, "По справочнику");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СписокЗапросов.Добавить("ОстаткиНТТ", "По остаткам и ценам номенклатуры в торговой точке");
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		СписокЗапросов.Добавить("РасходОстаткиЦеныРозничнаяТочка", "По остаткам и ценам номенклатуры в розничной точке");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена                = мМожноМенятьЦенуВДокументе;
	ЕстьСерия               = мВидОперацииНТТ;
	ЕстьКоличество          = мВидОперацииНТТ;
	ПодбиратьУслуги         = Ложь;
	ОтборУслугПоСправочнику = Истина;

	Если мВидОперацииНТТ Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура;
	СтруктураПараметровПодбора.Вставить("Команда"           , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"              , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , Склад.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент"         , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента" , Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"          , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ЕстьКоличество"     , ЕстьКоличество);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"    , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	СтруктураПараметровПодбора.Вставить("Заголовок"          , "Подбор номенклатуры в документ "
	                                    + ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую надо добавлять подобранную позицию номенклатуры.
//  ЗначениеВыбора - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, ЕдиницаИзмерения, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Ложь) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"       , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения"   , ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"         , Количество);
	ЗначениеВыбора.Свойство("Цена"               , Цена);
	ЗначениеВыбора.Свойство("Характеристика"     , Характеристика);
	ЗначениеВыбора.Свойство("Серия"              , Серия);

	Если ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВНТТ И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Пересчитываем цену в единицу хранения.
	Если ЗначениеЗаполнено(Номенклатура.ЕдиницаХраненияОстатков) И ЗначениеЗаполнено(ЕдиницаИзмерения)
	   И Номенклатура.ЕдиницаХраненияОстатков.Коэффициент <> 0 И ЕдиницаИзмерения.Коэффициент <> 0 Тогда
		Количество = Количество * ЕдиницаИзмерения.Коэффициент;
		Цена = Окр((Цена * Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ЕдиницаИзмерения.Коэффициент), 2);
	КонецЕсли;

	// Пересчитаем цену в валюту регламентированного учета.
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	СтруктураОтбора.Вставить("ЦенаВРозницеСтарая"        , Цена);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	Иначе // не нашли - добавляем новую строку
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЦенаВРозницеСтарая         = Цена;
		СтрокаТабличнойЧасти.ЦенаВРознице               = СтрокаТабличнойЧасти.ЦенаВРозницеСтарая;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;

КонецПроцедуры // ТоварыОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЦенаВРозницеСтарая = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура,
	                                                    СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                    Склад, мВалютаРегламентированногоУчета, Дата);

	СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
	                                                    СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                    Склад.ТипЦенРозничнойТорговли,
	                                                    Дата, СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
	                                                    мВалютаРегламентированногоУчета);

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Если это ввод на основании и ничего не заполнилось, то не стоит открывать форму.
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Предупреждение("Не выбран розничный склад.");
			Отказ = Истина;
		ИначеЕсли Товары.Количество() = 0 Тогда
			Предупреждение("Для всех товаров, которые приходуются на розничный склад, уже заданы цены АТТ.");
			Отказ = Истина;
		КонецЕсли;

		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Установка кнопок заполнение ТЧ.
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование);

	Иначе

		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	СтруктураКолонок = Новый Структура;

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЦенаВРозницеСтарая");
	СтруктураКолонок.Вставить("ЦенаВРознице");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры".
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установим доступность колонки "Цена" для редактирования.
	мКолонкиТовары.ЦенаВРознице.ТолькоПросмотр = Не мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ЦенаВРозницеСтарая.ТолькоПросмотр = Не мМожноМенятьЦенуВДокументе;

	мКолонкиТовары.ЦенаВРознице.АвтоОтметкаНезаполненного  = НЕ мРазрешитьНулевыеЦеныВРознице;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	УстановитьФлагиВидаОперации();

	УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	УстановитьВидимость();

КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	ОбработкаПодбора(Товары, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице[Кнопка.Имя];
	КонецЕсли;

	УстановитьФлагиВидаОперации();

	Если мВидОперацииНТТ И Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
		Склад = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли мВидОперацииРозница И Склад.ВидСклада <> Перечисления.ВидыСкладов.Розничный Тогда
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары".
//
// Параметры:
//  РежимЗаполнения - режим заполнения.
//
Процедура ДействиеЗаполнитьТовары(РежимЗаполнения)

	Если Товары.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТовары(РежимЗаполнения);

КонецПроцедуры // ДействиеЗаполнитьТовары()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары" по остаткам.
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам(Кнопка)

	Если ВидОперации <> Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВНТТ Тогда
		Предупреждение("Заполнение по остаткам предназначено только для вида операции ""переоценка в НТТ""!");
		Возврат;
	КонецЕсли;

	ДействиеЗаполнитьТовары("ЗаполнитьПоОстаткам");

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары" по измененным ценам.
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоЦенам(Кнопка)

	Если ВидОперации <> Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВНТТ Тогда
		Предупреждение("Заполнение по измененным ценам предназначено только для вида операции ""переоценка в НТТ""!");
		Возврат;
	КонецЕсли;

	ДействиеЗаполнитьТовары("ЗаполнитьПоЦенам");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоЦенам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура обработчик действия элемента "СписокЗадач" панели "ДействияФормы".
//
Процедура ДействияФормыСписокЗадач(Кнопка)

	РаботаСДиалогами.ОткрытьЗадачиТекущегоПользователя(Ссылка);

КонецПроцедуры // ДействияФормыСписокЗадач()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа.
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа.
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад.
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если мВидОперацииНТТ Тогда
		РаботаСДиалогами.НачалоВыбораСклада(Элемент, Перечисления.ВидыСкладов.НТТ, СтандартнаяОбработка);
	ИначеЕсли мВидОперацииРозница Тогда
		РаботаСДиалогами.НачалоВыбораСклада(Элемент, Перечисления.ВидыСкладов.Розничный, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // СкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке ТЧ "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ВидОперации = Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВНТТ И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно.");
			СтрокаТабличнойЧасти.Номенклатура = Неопределено;
			Возврат;
		ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
			Предупреждение("Наборов-комплектов в этом документе быть не должно.");
			СтрокаТабличнойЧасти.Номенклатура = Неопределено;
			Возврат;
		ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.Набор Тогда
			Предупреждение("Наборов-пакетов в этом документе быть не должно.");
			СтрокаТабличнойЧасти.Номенклатура = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода старой цены в рознице
// в строке ТЧ "Товары".
//
Процедура ТоварыЦенаВРозницеСтараяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!");
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора = УправлениеРозничнойТорговлей.СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                      СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков,
	                                                      СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                      Склад,
	                                                      мВалютаРегламентированногоУчета,
	                                                      Дата);

КонецПроцедуры // ТоварыЦенаВРозницеСтараяНачалоВыбораИзСписка()

// Процедура вызова структуры подчиненности документа.
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);

КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ.
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)

	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);

КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывает сервисный механизм для заполнения ТЧ "Товары" из документа "УстановкаЦен".
//
// Параметры:
//  Кнопка - кнопка командной панели табличной части, которую нажал пользователь.
//
Процедура КоманднаяПанельТоварыЗаполнитьИзУстановкиЦен(Кнопка)

	Если ВидОперации <> Перечисления.ВидыОперацийПереоценкаТоваровВРознице.ПереоценкаВРознице Тогда
		Предупреждение("Заполнение из установки цен предназначено только для вида операции ""переоценка в рознице""!");
		Возврат;
	КонецЕсли;

	ДействиеЗаполнитьТовары("ЗаполнитьИзУстановкиЦен");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьИзУстановкиЦен()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();
мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
