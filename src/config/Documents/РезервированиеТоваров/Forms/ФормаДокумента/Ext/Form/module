////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мИспользоватьТару;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мИспользоватьВнутренниеЗаказы;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	((НачалоДня(Дата) = НачалоДня(ТекущаяДата())));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		
		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"                 , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                        , Неопределено);
	СтруктураПараметровПодбора.Вставить("Заказ"                        , Заказ);
	СтруктураПараметровПодбора.Вставить("Организация"                  , Организация);
	СтруктураПараметровПодбора.Вставить("ИспользоватьГруппуДоступности", Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"                     , Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"                    , ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
										ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"             , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма));

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры", Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ТабличнаяЧастьИмя = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);

	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Серия;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

		Иначе

			СтрокаТабличнойЧасти.Количество = Количество;

		КонецЕсли;

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Размешает в табличной части "Товары" комплекты в качестве комплектующих
//
// Параметры:
//  Нет
//
Процедура РазместитьКомплектыКакКомплектующие()

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если не ЗначениеЗаполнено(Заказ) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, 60, Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед размещением комплектующих табличная часть товаров будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		Товары.Очистить();

	КонецЕсли;

	// Вызовем диалог размещения
	ФормаРаспределения = ПолучитьФорму("ФормаРаспределения", ЭтаФорма);
	ТаблицаНераспределенныхКомплектов = ФормаРаспределения.ТаблицаНераспределенныхКомплектов;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТоварТара", Перечисления.ТоварТара.Товар);
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.Текст = "ВЫБРАТЬ
		|	РегЗаказыОст.Номенклатура КАК Номенклатура,
		|	РегЗаказыОст.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	РегЗаказыОст.КоличествоОстаток - ВЫБОР КОГДА (ТоварыВРезервеОстатки.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТоварыВРезервеОстатки.КоличествоОстаток КОНЕЦ - ВЫБОР КОГДА (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, ВнутреннийЗаказ = &Заказ) КАК РегЗаказыОст
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Заказ) КАК ТоварыВРезервеОстатки
		|		ПО РегЗаказыОст.Номенклатура = ТоварыВРезервеОстатки.Номенклатура И РегЗаказыОст.ХарактеристикаНоменклатуры = ТоварыВРезервеОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &Заказ И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
		|		ПО РегЗаказыОст.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура И РегЗаказыОст.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО РегЗаказыОст.Номенклатура = КомплектующиеНоменклатуры.Номенклатура И РегЗаказыОст.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
		|
		|ИТОГИ МАКСИМУМ(Количество) ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры";
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда 
		Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Заказ.ДоговорКонтрагента);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура               КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.КоличествоОстаток
		|	 - ВЫБОР КОГДА ТоварыВРезервеОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТоварыВРезервеОстатки.КоличествоОстаток КОНЕЦ
		|	 - ВЫБОР КОГДА РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток КОНЕЦ КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента И ЗаказПокупателя = &ЗаказПокупателя) КАК ЗаказыПокупателейОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя) КАК ТоварыВРезервеОстатки
		|		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеОстатки.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя = &ЗаказПокупателя И ТоварТара = &ТоварТара) КАК РазмещениеЗаказовПокупателейОстатки
		|		ПО ЗаказыПокупателейОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
		|		СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
		|		ПО ЗаказыПокупателейОстатки.Номенклатура = КомплектующиеНоменклатуры.Номенклатура И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры
		|ИТОГИ МАКСИМУМ (Количество) ПО Номенклатура, ХарактеристикаНоменклатуры
		|";
	КонецЕсли;


	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			Если ВыборкаПоХарактеристикам.Количество > 0 Тогда
				СтрокаТаблицы = ТаблицаНераспределенныхКомплектов.Добавить();
				СтрокаТаблицы.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
				СтрокаТаблицы.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
				СтрокаТаблицы.НеРазмещено                = ВыборкаПоХарактеристикам.Количество;
				СтрокаТаблицы.Размещаем                  = ВыборкаПоХарактеристикам.Количество;
			КонецЕсли;
		КОнецЦикла;
	КОнецЦикла;

	Если ТаблицаНераспределенныхКомплектов.Количество()=0 Тогда
		Предупреждение("Неразмещенные комплекты отсутствуют!");
		Возврат;
	КонецЕсли;

	ФормаРаспределения.Открыть();

КонецПроцедуры // РазместитьКомплектыКакКомплектующие()

// Процедура обрабатывает выбор размещения в табличной части.
//
// Параметры:
//  Элемент      - Элемент формы, из которого был вызван выбор.
//  СтандартнаяОбработка - Признак стандартной обработки события
//
Процедура ВыборРазмещения(Элемент, СтандартнаяОбработка, ИмяТабЧасти, ЕстьСерия = Ложь)

	Если ЕстьСерия Тогда
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);
		Возврат;		
	КонецЕсли;	
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладамИЗаказам Тогда

		СтандартнаяОбработка = Ложь;

		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Справочники.Склады, Метаданные.Справочники.Склады.Синоним);
		СписокТипов.Добавить(Документы.ЗаказПоставщику, Метаданные.Документы.ЗаказПоставщику.Синоним);
		Если мИспользоватьВнутренниеЗаказы Тогда
			СписокТипов.Добавить(Документы.ВнутреннийЗаказ, Метаданные.Документы.ВнутреннийЗаказ.Синоним);	
		КонецЕсли; 
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если ВыбранныйЭлемент.Значение = Справочники.Склады Тогда
			РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);
		Иначе
			// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
			// значение было присвоено стандартно.
			ФормаВыбора = ВыбранныйЭлемент.Значение.ПолучитьФормуВыбора(,Элемент,);

			ФормаВыбора.РежимВыбора = Истина;
			ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
			ФормаВыбора.Открыть();
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда
	
		СтандартнаяОбработка = Ложь;

		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Документы.ЗаказПоставщику, Метаданные.Документы.ЗаказПоставщику.Синоним);
		Если мИспользоватьВнутренниеЗаказы Тогда
			СписокТипов.Добавить(Документы.ВнутреннийЗаказ, Метаданные.Документы.ВнутреннийЗаказ.Синоним);	
		КонецЕсли; 
		Если СписокТипов.Количество() = 1 Тогда
			ВыбранныйЭлемент = СписокТипов.Получить(0);
		Иначе	
			ВыбранныйЭлемент = ВыбратьИзСписка(СписокТипов, Элемент);
		КонецЕсли;
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = ВыбранныйЭлемент.Значение.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.РежимВыбора = Истина;
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
		ФормаВыбора.Открыть();
		
	КонецЕсли;

КонецПроцедуры // ВыборРазмещения()

// Процедура обрабатывает очистку размещения в табличной части.
//
// Параметры:
//  Элемент      - Элемент формы, из которого была вызвана очистка.
//  СтандартнаяОбработка - Признак стандартной обработки события
//
Процедура ОчисткаРазмещения(ИмяТЧ, ИмяКолонки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		ЭлементыФормы[ИмяТЧ].ТекущиеДанные[ИмяКолонки] = Справочники.Склады.ПустаяСсылка();

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда

		ЭлементыФормы[ИмяТЧ].ТекущиеДанные[ИмяКолонки] = Документы.ЗаказПоставщику.ПустаяСсылка();

	Иначе

		ЭлементыФормы[ИмяТЧ].ТекущиеДанные[ИмяКолонки] = Неопределено;

	КонецЕсли;

КонецПроцедуры // ОчисткаРазмещения()

// Процедура обрабатывает очистку размещения в табличной части.
//
// Параметры:
//  СтрокаТЧ     - Строка табличной части, в которой нужно очистить размещение.
//  ПустоеЗначениеРазмещения - Пустое значение, которое необходимо присвоить 
//                 "неправильным" размещениям.
//
Процедура ОчисткаРазмещенияПриСменеВидаОперации(СтрокаТЧ, ПустоеЗначениеРазмещения)

	Если Не ТипЗнч(СтрокаТЧ.ИсходноеРазмещение) = ТипЗнч(ПустоеЗначениеРазмещения) Тогда
		СтрокаТЧ.ИсходноеРазмещение = ПустоеЗначениеРазмещения;
	КонецЕсли; 

	Если Не ТипЗнч(СтрокаТЧ.НовоеРазмещение) = ТипЗнч(ПустоеЗначениеРазмещения) Тогда
		СтрокаТЧ.НовоеРазмещение = ПустоеЗначениеРазмещения;
	КонецЕсли; 

КонецПроцедуры // ОчисткаРазмещенияПриСменеВидаОперации()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

КонецПроцедуры

// Очищает значение реквизита в табличных частях "Товары", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличнойЧасти(ТабличнаяЧасть, ИмяРеквизита)

	// Очистим значения в строках
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

КонецПроцедуры

// Процедура очищает колонку "Размещение" табличной части.
//
Процедура ОчиститьРазмещениеВТабличнойЧасти(ТабличнаяЧасть)

	ОчиститьРеквизитВТабличнойЧасти(ТабличнаяЧасть, "НовоеРазмещение");
	Если ТабличнаяЧасть = Товары Тогда
		Если ЭлементыФормы.Товары.Колонки.СерияНоменклатуры.Видимость Тогда
			ОчиститьРеквизитВТабличнойЧасти(ТабличнаяЧасть, "СерияНоменклатуры");
		КонецЕсли;
		ТабличнаяЧасть.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, ИсходноеРазмещение", "Количество, КоличествоМест");
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧасть.Свернуть("Номенклатура, ИсходноеРазмещение", "Количество");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость(ИзменятьЗначения = Истина)

	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиТары = ЭлементыФормы.ВозвратнаяТара.Колонки;

	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ")  Тогда
		ЭлементыФормы.Контрагент       .Видимость = Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость = Ложь;
	Иначе
		ЭлементыФормы.Контрагент       .Видимость = Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость = Истина;
	КонецЕсли;

	ОбособленныйУчет = (ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")) И ЗначениеЗаполнено(Заказ.ДоговорКонтрагента) И 
	              Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		
	ВидимостьСерии = мРезервироватьПоСериям И ОбособленныйУчет;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СерияНоменклатуры, ВидимостьСерии);
	ВидимостьТары = мИспользоватьТару;
	Если ВидимостьТары И ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам И 
	   ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И
	   Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
	   ВидимостьТары = ложь;
   КонецЕсли;
   
   ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = ВидимостьТары;
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

	Иначе

		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);


	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ИсходноеРазмещение");
	СтруктураКолонок.Вставить("НовоеРазмещение");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимость колонок для табличной части "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	// Установить ограничение - изменять видимость колонок для табличной части "Товары".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость(Ложь);
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары", "Товары");
	Страницы.Добавить("Тара",   "ВозвратнаяТара");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		
		Если ЗначениеВыбора.Команда = "РазмещениеКомплектующих" Тогда
			Для Каждого ВыгружаемаяСтрока Из ЗначениеВыбора.Товары Цикл
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Номенклатура               = ВыгружаемаяСтрока.Номенклатура;
				НоваяСтрока.ХарактеристикаНоменклатуры = ВыгружаемаяСтрока.ХарактеристикаНоменклатуры;
				НоваяСтрока.ЕдиницаИзмерения           = ВыгружаемаяСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Коэффициент                = ВыгружаемаяСтрока.Коэффициент;
				НоваяСтрока.Количество                 = ВыгружаемаяСтрока.Количество;

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(НоваяСтрока, ЭтотОбъект);

			КонецЦикла;
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПередЗаписью(Отказ)
	
    ОбособленныйУчет = ложь;
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") И НЕ Заказ.Пустая() Тогда
		Контрагент = Заказ.Контрагент;
		// Проверим ведётся ли обособленный учет.
		ОбособленныйУчет = ЗначениеЗаполнено(Заказ.ДоговорКонтрагента) И Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
	КонецЕсли; 
	Если ОбособленныйУчет И ВозвратнаяТара.Количество()>0 И ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда
		ВозвратнаяТара.Очистить();
	КонецЕсли;

	//очистим серии если серии заполнены, а резервировать по сериям не надо
	ТекстСообщения = "";
	
	флОчищатьСерии = истина;
    Если Заказ = Неопределено Тогда
		ТекстСообщения = "Резервирование по сериям номенклатуры возможно только для заказа покупателя. Серия в табличной части будет очищена.";
	ИначеЕсли  ТипЗнч(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ТекстСообщения = "Резервирование по сериям номенклатуры возможно только для заказа покупателя. Серия в табличной части будет очищена.";
	ИначеЕсли НЕ ОбособленныйУчет Тогда
		ТекстСообщения = "По договору не ведется обособленный учет по заказам покупателей! Серия в табличной части будет очищена.";
	Иначе
		флОчищатьСерии = ложь;
	КонецЕсли;	

	Если не флОчищатьСерии Тогда
		Возврат;
	КонецЕсли;
	флНайденаЗаполненнаяСерия = ложь;
	Для каждого Строка из Товары цикл
		Если не ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
			Продолжить;
		КонецЕсли;
		Строка.СерияНоменклатуры = "";
		флНайденаЗаполненнаяСерия = истина;
	КонецЦикла;
	Если флНайденаЗаполненнаяСерия Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		// Определим выбранный вид операции и присвоим нужное значение пустому
		// значению размещения. Потом будем использовать присвоенное значение
		// как признак необходимости очистики ТЧ.
		Если Кнопка.Имя = "РаспределениеПоСкладам" Тогда
			ПустоеЗначениеРазмещения = Справочники.Склады.ПустаяСсылка();
		ИначеЕсли Кнопка.Имя = "РаспределениеПоЗаказам" Тогда
			ПустоеЗначениеРазмещения = Документы.ЗаказПоставщику.ПустаяСсылка();
		Иначе
			ПустоеЗначениеРазмещения = Неопределено;
		КонецЕсли;

		// Выбран вид операции, при котором возможно надо очищать ТЧ
		Если Не ПустоеЗначениеРазмещения = Неопределено Тогда

			// Есть строки ТЧ, значит будем очищать
			Если Не Товары.Количество() = 0 или Не ВозвратнаяТара.Количество() = 0 Тогда

				// Предупредим об очистке и спросим согласия.
				Если Кнопка.Имя = "РаспределениеПоСкладам" Тогда
					Ответ = Вопрос("Данные о размещении в заказах будут очищены.", РежимДиалогаВопрос.ОКОтмена);
				ИначеЕсли Кнопка.Имя = "РаспределениеПоЗаказам" Тогда
					Ответ = Вопрос("Данные о размещении на складах будут очищены.", РежимДиалогаВопрос.ОКОтмена);
				КонецЕсли;

				// Если согласие не дано отказываемся от выбора вида операции.
				Если Не Ответ = КодВозвратаДиалога.ОК Тогда
					Возврат;
				КонецЕсли;

				// В противном случае очищаем "неправильные" размещения в обоих табличных частях.
				Для каждого СтрокаТабличнойЧасти Из Товары Цикл
					ОчисткаРазмещенияПриСменеВидаОперации(СтрокаТабличнойЧасти, ПустоеЗначениеРазмещения);
				КонецЦикла;

				Для каждого СтрокаТары Из ВозвратнаяТара Цикл
					ОчисткаРазмещенияПриСменеВидаОперации(СтрокаТары, ПустоеЗначениеРазмещения);
				КонецЦикла;

			КонецЕсли;

		КонецЕсли; 

		ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров[Кнопка.Имя];

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда
	
		ТипЗаказы = Новый Массив;
		ТипЗаказы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		ТипЗаказы.Добавить(Тип("ДокументСсылка.ВнутреннийЗаказ"));
		
		ТипРазмещ = Новый ОписаниеТипов(ТипЗаказы);
		Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
			СтрокаТЧ.ИсходноеРазмещение = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.ИсходноеРазмещение);
			СтрокаТЧ.НовоеРазмещение    = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.НовоеРазмещение);
		КонецЦикла;
		
		ТипРазмещ = Новый ОписаниеТипов(ТипЗаказы);
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ИсходноеРазмещение = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.ИсходноеРазмещение);
			СтрокаТЧ.НовоеРазмещение    = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.НовоеРазмещение);
		КонецЦикла;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда
	
		ТипРазмещ = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ИсходноеРазмещение = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.ИсходноеРазмещение);
			СтрокаТЧ.НовоеРазмещение    = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.НовоеРазмещение);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ВозвратнаяТара Цикл
			СтрокаТЧ.ИсходноеРазмещение = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.ИсходноеРазмещение);
			СтрокаТЧ.НовоеРазмещение    = ТипРазмещ.ПривестиЗначение(СтрокаТЧ.НовоеРазмещение);
		КонецЦикла;
		
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущей датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Предупреждение("Дата документа отличается от текущей. Оперативное проведение невозможно.
		               |Документ заполнен не будет!");
		Возврат;
	КонецЕсли; 

	// Заполнение документа
	Форма = ПолучитьОбщуюФорму("ФормаВыбораПараметровАвторезервирования", ЭтаФорма, );

	//Установим реквизиты и переменные формы.
	Форма.ФормаДокумента = ЭтаФорма;
	Провести = Форма.ОткрытьМодально();
    //если форму закрыли просто крестом, 
    Если Провести=неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ОчищатьРазмещениеПередЗаполнением Тогда
		ОчиститьРазмещениеВТабличнойЧасти(Товары);
		Если мИспользоватьТару Тогда 
			ОчиститьРазмещениеВТабличнойЧасти(ВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;

	ВидимостьСерии = ЭлементыФормы.Товары.Колонки.СерияНоменклатуры.Видимость;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидимостьСерии",     ВидимостьСерии);
	СтруктураПараметров.Вставить("Авторезервирование", Авторезервирование);
	СтруктураПараметров.Вставить("Авторазмещение",     Авторазмещение);
	СтруктураПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", СтратегияАвторезервированияПоЗаказам);

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборОстаткиТоваров = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Записать();
		НаборЗаказыПоставщикам  = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборЗаказыПоставщикам.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаказыПоставщикам.Записать();
	КонецЕсли;

	ЗаполнитьТабличныеЧастиПередПроведениемУпр(СтруктураПараметров);

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоОстаткам(Кнопка)
	
	Если не ЗначениеЗаполнено(Заказ) Тогда
		Предупреждение("Не выбран заказ. Заполнение невозможно", , Метаданные().Представление());
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		Товары.Очистить();
	КонецЕсли;

	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьТоварыПоОстаткамУпр();
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ЗаполнитьТоварыПоВнутреннемуЗаказуУпр();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Распределить по комплектующим" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыРазместитьПоКомплектующим(Кнопка)

	РазместитьКомплектыКакКомплектующие();

КонецПроцедуры // КоманднаяПанельТоварыРазместитьПоКомплектующим()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)
	
	Если не ЗначениеЗаполнено(Заказ) Тогда
		Предупреждение("Не выбран заказ. Заполнение невозможно", , Метаданные().Представление());
		Возврат;
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ВозвратнаяТара.Очистить();
	КонецЕсли;

	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
	ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		ЗаполнитьВозвратнуюТаруПоВнутреннемуЗаказуУпр();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

 // Процедура вызывается при нажатии кнопки "ОчиститьРазмещение" командной панели ТЧ Товары,
// очищает заполненные поля в графе "Размещение".
//
Процедура КоманднаяПанельТоварыДействиеОчиститьРазмещение(Кнопка)

	СписокРазмещенийТовары = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "НовоеРазмещение");

	Если СписокРазмещенийТовары.Количество() > 0 Тогда
		// Есть заполненные поля
		ТекстВопроса = "Очистить размещения в табличной части?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");
		// Очистим значения в строках
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьРазмещениеВТабличнойЧасти(Товары);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОчиститьРазмещение" командной панели ТЧ Тара,
// очищает заполненные поля в графе "Размещение".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеОчиститьРазмещение(Кнопка)

	СписокРазмещенийТара = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "НовоеРазмещение");

	Если СписокРазмещенийТара.Количество() > 0 Тогда
		// Есть заполненные поля
		ТекстВопроса = "Очистить размещения в табличной части?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");
		// Очистим значения в строках
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьРазмещениеВТабличнойЧасти(ВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗаказПокупателя".
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	Если не ЗначениеЗаполнено(Заказ) Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Если Заказ.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено тогда
			Контрагент = Заказ.Контрагент;
		Иначе
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;

		Если Заказ.Метаданные().Реквизиты.Найти("Организация") <> Неопределено тогда
			Организация = Заказ.Организация;
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимость();

КонецПроцедуры // ЗаказПокупателяПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗаказПокупателя".
//
Процедура ЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивОтборов = Новый Массив;
	
	Если Не Организация.Пустая() Тогда
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Организация", Организация));
	КонецЕсли;
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов);
	
КонецПроцедуры // ЗаказПокупателяНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		МетаДок = Заказ.Метаданные();
		Если МетаДок.Реквизиты.Найти("Организация") <> Неопределено
		И Не Организация = Заказ.Организация Тогда
			Заказ = Неопределено;
			ЗаказПокупателяПриИзменении(ЭлементыФормы.Заказ);
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость(Ложь);

КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику")
		   И Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику")
		   И Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИсходноеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыИсходноеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка,"Товары");

КонецПроцедуры


// Процедура - обработчик события "Очистка" поля ввода "ИсходноеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыИсходноеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("Товары", "ИсходноеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НовоеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыНовоеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка,"Товары");

КонецПроцедуры


// Процедура - обработчик события "Очистка" поля ввода "НовоеРазмещение"
// строки табличной части "Товары".
//
Процедура ТоварыНовоеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("Товары", "НовоеРазмещение", СтандартнаяОбработка);
	
	// Сбросим серию, если размещение не склад.
	РазмещениеСклад = (ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.НовоеРазмещение) = Тип("СправочникСсылка.Склады"));
	Если Не(РазмещениеСклад) Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = Неопределено;	
	КонецЕсли;	

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" поля ввода "ИсходнаяЦена"
// строки табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода СерияНоменклатуры
// в табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Проверим, указан ли заказ под который будет ставиться резерв.
	Если Заказ = Неопределено Тогда
		Предупреждение("Резервирование по сериям номенклатуры возможно только для заказа покупателя.");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Предупреждение("Резервирование по сериям номенклатуры возможно только для заказа покупателя.");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
		
	// Проверим возможность указания серий для резервирования.
	Если Не мРезервироватьПоСериям Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Резервирование серий не предусмотрено!");
		Возврат;
	КонецЕсли;	

	// Проверим ведётся ли учет по сериям.
	СтрокаТабличнойЧасти  = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для номенклатуры """ + СтрокаТабличнойЧасти.Номенклатура + """ не ведется учет по сериям!");
		Возврат;
	КонецЕсли;

	// Проверим ведётся ли обособленный учет.
	ОбособленныйУчет = ЗначениеЗаполнено(Заказ.ДоговорКонтрагента) И Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
	Если Не(ОбособленныйУчет) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("По договору не ведется обособленный учет по заказам покупателей!");
		Возврат;
	КонецЕсли; 

	// Проверим, что в колонке "Размещение" указан склад.
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если Не МожноУказатьСерию(ТекДанные) Тогда
		Предупреждение("Выбор серии для резервирования возможен только при размещении на складе либо снятии размещения со склада.");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры // ТоварыСерияНоменклатурыНачалоВыбора()

 
Процедура ТоварыНовоеРазмещениеПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;

	Если Не МожноУказатьСерию(ТекДанные) Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = Неопределено;	
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура ТоварыИсходноеРазмещениеПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;

	Если Не МожноУказатьСерию(ТекДанные) Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = Неопределено;	
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоСкладам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРезервированиеТоваров.ПоЗаказам Тогда

		Если Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику")
		   И Не ТипЗнч(Элемент.ТекущиеДанные.ИсходноеРазмещение) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Элемент.ТекущиеДанные.ИсходноеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

		Если Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("ДокументСсылка.ЗаказПоставщику")
		   И Не ТипЗнч(Элемент.ТекущиеДанные.НовоеРазмещение) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			Элемент.ТекущиеДанные.НовоеРазмещение = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИсходноеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараИсходноеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка,"ВозвратнаяТара");

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "ИсходноеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараИсходноеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("ВозвратнаяТара", "ИсходноеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НовоеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовоеРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборРазмещения(Элемент, СтандартнаяОбработка,"ВозвратнаяТара");

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода "НовоеРазмещение"
// строки табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовоеРазмещениеОчистка(Элемент, СтандартнаяОбработка)

	ОчисткаРазмещения("ВозвратнаяТара", "НовоеРазмещение", СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Возвратная тара". 
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	КонецЕсли;
КонецПроцедуры

Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

Функция МожноУказатьСерию(ТекДанные)
	ИсходноеРазмещениеСклад = (ТипЗнч(ТекДанные.ИсходноеРазмещение) = Тип("СправочникСсылка.Склады")) И ЗначениеЗаполнено(ТекДанные.ИсходноеРазмещение);
	НовоеРазмещениеСклад = (ТипЗнч(ТекДанные.НовоеРазмещение) = Тип("СправочникСсылка.Склады")) И ЗначениеЗаполнено(ТекДанные.НовоеРазмещение);
	
	МожноУказатьСерию = ((НовоеРазмещениеСклад и НЕ ИсходноеРазмещениеСклад) 
		или (ИсходноеРазмещениеСклад и НЕ НовоеРазмещениеСклад))
		И (НовоеРазмещениеСклад ИЛИ ИсходноеРазмещениеСклад);

	Возврат МожноУказатьСерию;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

мИспользоватьТару      = глЗначениеПеременной("ИспользоватьВозвратнуюТару");
мИспользоватьВнутренниеЗаказы     = УправлениеЗаказами.ИспользоватьВнутренниеЗаказы();

