////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСписокТипов;

Перем мТекущийВидСчетаФактуры;

Перем ВерсияПостановления;

Перем ВерсияКодовВидовОпераций;

// Процедура устанавливает видимость для реквизитов документа 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УказанДокументОснование = ДокументыОснования.Количество() > 0 
		И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование);
		
	АвансКомитента	  = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента;
	НаРеализацию      = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	НаАванс           = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс ИЛИ АвансКомитента;
	Корректировочный  = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	ПоОтчетуКомиссионера = ДокументыОснования.Количество() > 0 И ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах");
		
	ЭлементыФормы.Организация.ТолькоПросмотр		= УказанДокументОснование;
	ЭлементыФормы.Контрагент.ТолькоПросмотр			= УказанДокументОснование;
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр	= (УказанДокументОснование И НаРеализацию) ИЛИ 
													  (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс И ПоОтчетуКомиссионера);
	ЭлементыФормы.ДокументыОснования.ТолькоПросмотр	= ПоОтчетуКомиссионера;
													  
	ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = НаАванс И НЕ ПоОтчетуКомиссионера;
	Если НЕ ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного Тогда
		ЭлементыФормы.ДоговорКонтрагента.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если НаРеализацию Тогда
		ЭлементыФормы.ДанныеСчетаФактуры.ТекущаяСтраница = ЭлементыФормы.ДанныеСчетаФактуры.Страницы.НаРеализацию;
	ИначеЕсли НаАванс Тогда
		ЭлементыФормы.ДанныеСчетаФактуры.ТекущаяСтраница = ЭлементыФормы.ДанныеСчетаФактуры.Страницы.НаАванс;
	ИначеЕсли Корректировочный Тогда
		ЭлементыФормы.ДанныеСчетаФактуры.ТекущаяСтраница = ЭлементыФормы.ДанныеСчетаФактуры.Страницы.Корректировочный;
	Иначе
		ЭлементыФормы.ДанныеСчетаФактуры.ТекущаяСтраница = ЭлементыФормы.ДанныеСчетаФактуры.Страницы.НаРеализацию;
	КонецЕсли;
	
	ЭлементыФормы.Авансы.Колонки.Контрагент.Видимость = НаАванс И СводныйКомиссионный;
	
	ЭлементыФормы.Комитент.АвтоОтметкаНезаполненного = АвансКомитента;	
	ЭлементыФормы.ПолеКомитент.АвтоОтметкаНезаполненного = АвансКомитента;	
	Если НЕ ЭлементыФормы.Комитент.АвтоОтметкаНезаполненного Тогда
		ЭлементыФормы.Комитент.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если НЕ ЭлементыФормы.ПолеКомитент.АвтоОтметкаНезаполненного Тогда
		ЭлементыФормы.ПолеКомитент.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	ЭлементыФормы.Комитент.Видимость = АвансКомитента;
	ЭлементыФормы.ПолеКомитент.Видимость = АвансКомитента;
	ЭлементыФормы.НадписьКомитент.Видимость = АвансКомитента;
	ЭлементыФормы.НадписьПолеВводаКомитент.Видимость = АвансКомитента;
	
	ЭлементыФормы.НадписьСуммаНДСДокумента.Видимость = ВерсияПостановления = 2;
	ЭлементыФормы.СуммаНДСДокумента.Видимость        = ВерсияПостановления = 2;
	
	ЭлементыФормы.ПанельИсправление.Видимость = ВерсияПостановления = 2;
		
	ПанельСведенияОСчетеФактуреРежимСвертки = РежимСверткиЭлементаУправления.Низ;
	
	Если Корректировочный Тогда
		ВидимостьКолонокИсправление = ВерсияПостановления = 2;
		ЭлементыФормы.ДокументыОснованияКорректировка.Колонки.УчитыватьИсправление.Видимость = ВидимостьКолонокИсправление;
		ЭлементыФормы.ДокументыОснованияКорректировка.Колонки.НомерИсправленияИсходногоДокумента.Видимость = ВидимостьКолонокИсправление;
		ЭлементыФормы.ДокументыОснованияКорректировка.Колонки.ДатаИсправленияИсходногоДокумента.Видимость = ВидимостьКолонокИсправление;
	КонецЕсли;

	// Код вида операции корректировочного счета-фактуры на уменьшение стоимости
	ЭлементыФормы.КодВидаОперацииНаУменьшение.Видимость = Корректировочный И ВерсияКодовВидовОпераций > 1;
	ЭлементыФормы.НадписьКодВидаОперацииНаУменьшение.Видимость = Корректировочный И ВерсияКодовВидовОпераций > 1;

	Если Дата < '20111001' Тогда
		ЭлементыФормы.ПанельНомераДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНомераДаты.Страницы.СтраницаОбычный;
	ИначеЕсли ВерсияПостановления = 1 Тогда			
		ЭлементыФормы.ПанельНомераДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНомераДаты.Страницы.СтраницаОбычный;
	Иначе // ВерсияПостановления = 2
		Если Корректировочный И Исправление Тогда
			ЭлементыФормы.ПанельНомераДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНомераДаты.Страницы.СтраницаКорректировочныйИсправленный;
		ИначеЕсли Исправление Тогда
			ЭлементыФормы.ПанельНомераДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНомераДаты.Страницы.СтраницаИсправленный;			
		Иначе				
			ЭлементыФормы.ПанельНомераДаты.ТекущаяСтраница = ЭлементыФормы.ПанельНомераДаты.Страницы.СтраницаОбычный;
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияПостановления = 2 Тогда
		
		ЭлементыФормы.ДатаВыставления.АвтоОтметкаНезаполненного = Выставлен;
		Если НЕ ЭлементыФормы.ДатаВыставления.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.ДатаВыставления.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ПанельСведенияОСчетеФактуреРежимСвертки = РежимСверткиЭлементаУправления.Нет;
		
		ЭлементыФормы.НомерИсправления.Доступность 		         = Исправление;			
		ЭлементыФормы.НомерИсправления.АвтоОтметкаНезаполненного = Исправление;
		Если НЕ ЭлементыФормы.НомерИсправления.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.НомерИсправления.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.НомерИсправляемогоКорректировочногоДокумента.Доступность = Исправление;
		ЭлементыФормы.ДатаИсправляемогоКорректировочногоДокумента.Доступность  = Исправление;
		ЭлементыФормы.НомерИсправляемогоКорректировочногоДокумента.АвтоОтметкаНезаполненного = Исправление;
		Если НЕ ЭлементыФормы.НомерИсправляемогоКорректировочногоДокумента.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.НомерИсправляемогоКорректировочногоДокумента.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		ЭлементыФормы.ДатаИсправляемогоКорректировочногоДокумента.АвтоОтметкаНезаполненного  = Исправление;
		Если НЕ ЭлементыФормы.ДатаИсправляемогоКорректировочногоДокумента.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.ДатаИсправляемогоКорректировочногоДокумента.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.СчетФактураНеВыставляется.Видимость   = НЕ НаАванс;
		
		ЭлементыФормы.Выставлен.Доступность          = НЕ СчетФактураНеВыставляется;
		ЭлементыФормы.ДатаВыставления.Доступность    = НЕ СчетФактураНеВыставляется И Выставлен;
		ЭлементыФормы.НаБумажномНосителе.Доступность = НЕ СчетФактураНеВыставляется И Выставлен;
		ЭлементыФормы.ВЭлектронномВиде.Доступность   = НЕ СчетФактураНеВыставляется И Выставлен;
		
	КонецЕсли;
	
	ВидимостьКомиссионныхСумм = Дата >= '20150101'
		//И НЕ НалоговыйАгент
		//И НЕ НаСуммовуюРазницу
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс;

	Если Корректировочный Тогда
		ЭлементыФормы.ПанельИтоги.ТекущаяСтраница = ЭлементыФормы.ПанельИтоги.Страницы.СтраницаДоплатаУменьшение;
		
		ЭлементыФормы.НадписьСуммаУвеличениеКомиссия.Видимость    = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаУвеличениеКомиссия.Видимость           = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.ВалютаКомиссияУвеличение.Видимость          = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаНДСУвеличениеКомиссия.Видимость = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаНДСУвеличениеКомиссия.Видимость        = ВидимостьКомиссионныхСумм;
		
		ЭлементыФормы.НадписьСуммаУменьшениеКомиссия.Видимость    = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаУменьшениеКомиссия.Видимость           = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.ВалютаКомиссияУменьшение.Видимость          = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаНДСУменьшениеКомиссия.Видимость = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаНДСУменьшениеКомиссия.Видимость        = ВидимостьКомиссионныхСумм;
	Иначе
		ЭлементыФормы.ПанельИтоги.ТекущаяСтраница = ЭлементыФормы.ПанельИтоги.Страницы.СтраницаВсего;
		
		ЭлементыФормы.НадписьСуммаДокументаКомиссия.Видимость    = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаДокументаКомиссия.Видимость           = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.ВалютаКомиссия.Видимость                   = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаНДСДокументаКомиссия.Видимость = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаНДСДокументаКомиссия.Видимость        = ВидимостьКомиссионныхСумм;
		
	КонецЕсли;

	Если СформированПриВводеНачальныхОстатковНДС Тогда
		ПанельСведенияОСчетеФактуреРежимСвертки = РежимСверткиЭлементаУправления.Низ;
	КонецЕсли;
	
	ЭлементыФормы.ПанельСведенияОСчетеФактуре.Свертка = ПанельСведенияОСчетеФактуреРежимСвертки;	
	
	// установим видимость надписи КППКонтрагента и ее значение
	УстановитьНадписьКППКонтрагента();
	
	Если Исправление Тогда 
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
			ДатаДляФЗ56 = ДатаИсправляемогоКорректировочногоДокумента;
		Иначе
			ДатаДляФЗ56 = ДатаИсходногоДокумента;
		КонецЕсли;
	Иначе
		ДатаДляФЗ56 = Дата;
	КонецЕсли;
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(ДатаДляФЗ56);
	ЭлементыФормы.НадписьИдентификаторГосКонтракта.Видимость = ВедетсяУчетНДСПоФЗ56;
	ЭлементыФормы.ИдентификаторГосКонтракта.Видимость		 = ВедетсяУчетНДСПоФЗ56;
	
КонецПроцедуры // УстановитьВидимость()

Процедура ПроверитьЗаполнениеСчетаФактуры()
	
	Если ЭтоНовый() ИЛИ ДокументыОснования.Количество() = 0 ИЛИ Исправление Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = "";
	Если ПроверитьДатуСчетаФактуры(СообщениеПользователю) Тогда
		ТекстВопроса = СообщениеПользователю 
			+ Символы.ПС + "Изменить дату счета-фактуры на дату документа-основания?";
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			Если Год(Дата) <> Год(ДокументыОснования[0].ДокументОснование.Дата) Тогда
				Номер = "";
			КонецЕсли;
			Дата = ДокументыОснования[0].ДокументОснование.Дата;
			ПриИзмененииДаты();
		КонецЕсли;
		
	ИначеЕсли СообщениеПользователю <> "" Тогда
		Предупреждение(СообщениеПользователю 
			+ Символы.ПС + "Внесите изменения в счет-фактуру вручную.");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуДокумента()
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Сумма    = Авансы.Итог("Сумма");
		СуммаНДС = Авансы.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
			мВалютаРегламентированногоУчета, ВалютаДокумента, 
			1, СтруктураКурсаВзаиморасчетов.Курс, 
			1, СтруктураКурсаВзаиморасчетов.Кратность);
		СуммаНДСДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
			мВалютаРегламентированногоУчета, ВалютаДокумента, 
			1, СтруктураКурсаВзаиморасчетов.Курс, 
			1, СтруктураКурсаВзаиморасчетов.Кратность);
	Иначе
		СуммаДокумента    = Сумма;
		СуммаНДСДокумента = СуммаНДС;
		
	КонецЕсли;
	
	Если Дата >= '20150101'
		И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		СуммаДокументаКомиссия 		= СуммаДокумента;
		СуммаНДСДокументаКомиссия 	= СуммаНДСДокумента;
	ИначеЕсли ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		СуммаДокументаКомиссия 		= 0;
		СуммаНДСДокументаКомиссия 	= 0;
	КонецЕсли;	

КонецПроцедуры

Функция МожноИспользоватьДоговорКонтрагента(ВыбранныйДоговорКонтрагента)
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		ИЛИ Исправление Тогда
		
		Если ВыбранныйДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
			И ВыбранныйДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
			
			Если Исправление Тогда
				УточнениеСообщения = "исправленных";				
			Иначе
				УточнениеСообщения = "корректировочных"; 
			КонецЕсли;
			
			Предупреждение("Для договоров в условных единицах выставление " 
				+ УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.");
			
			Возврат Ложь;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, ВыбратьТекущуюКолонку = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление);
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	Отбор.Вставить("ПоставщикуВыставляетсяСчетФактураНаВозврат", Истина);
	Отбор.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	
	Если Исправление Тогда
		Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	КонецЕсли;
	
	Если ВыбратьТекущуюКолонку Тогда
		ЭлементыФормы.ДокументыОснования.ТекущаяКолонка = ЭлементыФормы.ДокументыОснования.Колонки.ДокументОснование;
	КонецЕсли; 
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДокументыОснования", СписокТипов);
	
КонецПроцедуры

Процедура УстановитьНадписьКППКонтрагента()
	
	РеквизитыКонтрагента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент, "ЮрФизЛицо, КПП");
	АктуальноПоВидуСчетаФактуры = (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	
	Если АктуальноПоВидуСчетаФактуры И НЕ РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ЭлементыФормы.ПанельКППКонтрагента.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ПредставлениеКППКонтрагента = ""; 
		Если ЗначениеЗаполнено(КППКонтрагента) Тогда
			ПредставлениеКППКонтрагента = КППКонтрагента;
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			ПредставлениеКППКонтрагента = РеквизитыКонтрагента.КПП;
		КонецЕсли;
		
		ЭлементыФормы.НадписьКППКонтрагента.Заголовок = "КПП: " 
		+ ?(ПустаяСтрока(ПредставлениеКППКонтрагента), "<не задан>", ПредставлениеКППКонтрагента);
		
	Иначе
		ЭлементыФормы.ПанельКППКонтрагента.Свертка = РежимСверткиЭлементаУправления.Право;
	КонецЕсли;
	
КонецПроцедуры  

Процедура ЗаполнитьСписокКодовВидовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
		ЭлементыФормы.КодВидаОперации.СписокВыбора,
		Дата);
		
	Если ВерсияКодовВидовОпераций > 1 Тогда
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры,
			ЭлементыФормы.КодВидаОперацииНаУменьшение.СписокВыбора,
			Дата);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	Если ДокументыОснования.Количество() > 0 Тогда
		
		Для Каждого СтрДокОснования Из ДокументыОснования Цикл
			
			Если ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
				
				Если ЭтоНовый() И СтрДокОснования.ДокументОснование.Метаданные().Имя = "РеализацияТоваровУслуг" Тогда
					Если СтрДокОснования.ДокументОснование.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
						Отказ = Истина;
						Предупреждение("При передаче на комиссию выписка счета-фактуры не требуется.");
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;

	// Начало ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если Не ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	КонецЕсли; 

	Если Не ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		Если НЕ мДокументЗаполнен Тогда
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);
		ИначеЕсли Не ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		КонецЕсли; 
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	мСписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры);
	
	Если ДокументыОснования.Количество() = 0 Тогда
		ДокументыОснования.Добавить();
	КонецЕсли;
	ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс ИЛИ
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Если Авансы.Количество() = 0 Тогда
			Авансы.Добавить();
		КонецЕсли;
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		Если ЭтоНовый() Тогда
			РассчитатьСуммуДокумента();
		КонецЕсли;	
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Если ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			ДатаНомерДокументовОплаты.Добавить();
		КонецЕсли;
		ЭлементыФормы.ДатаНомерДокументовОплаты.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
	КонецЕсли;
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
		
	УстановитьДоступныеВидыСчетаФактуры();
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	
	УстановитьВидимость();
	
	ЗаполнитьСписокКодовВидовОпераций();
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		//По документам сформированным вводом начальных остатков по НДС не допускаются изменения
		
		ЭтаФорма.ТолькоПросмотр = Истина;
		ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.Заполнить.Доступность = Ложь;
		Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.Заполнить.Кнопки Цикл
			КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
		КонецЦикла;
		
	КонецЕсли; 
	
	Если (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный)
		И Не СформированПриВводеНачальныхОстатковНДС И Не ЭтаФорма.ТолькоПросмотр Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	
	// Начало ЭлектронныеДокументы
	ЭлектронныеДокументыКлиент.ПриОткрытии(ЭтаФорма);
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(Отказ);
	
	Если Отказ Тогда
		Предупреждение(СтрокаСообщения);
	КонецЕсли; 
	
	Если НЕ Отказ и не СформированПриВводеНачальныхОстатковНДС тогда
		ПроверитьЗаполнениеСчетаФактуры();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если не ВладелецФормы = Неопределено Тогда

		Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда

			// Надо поменять текст про счет-фактуру в форме-владельце
			ВладелецФормы.ЗаполнитьТекстПроСчетФактуру();
		КонецЕсли;

	КонецЕсли; 

	// Начало ЭлектронныеДокументы
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Свойство("КППКонтрагента") И КППКонтрагента <> ЗначениеВыбора.КППКонтрагента Тогда
			КППКонтрагента = ЗначениеВыбора.КППКонтрагента;
			УстановитьНадписьКППКонтрагента();
			Модифицированность	= Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Начало ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	Иначе // ИмяСобытия = "ОбновитьОСобытияхЭДО"
		ЭлектронныеДокументыКлиентПереопределяемый.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	КонецЕсли;	
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыОснования,ЭлементыФормы.КоманднаяПанельДокументыОснованияНаРеализацию.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДатаНомерДокументовОплаты,ЭлементыФормы.КоманднаяПанельДатаНомерДокументовОплаты.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Авансы,ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.Заполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLФайлПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLФайлПанель(Кнопка)

	ЗаполнениеДокументов.ВыгрузитьДокументВФайлCommerceML(Ссылка);
    	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ВыгрузитьВФорматеCommerceMLЭлПочтаПанель"
// подменю "ВыгрузитьВФорматеCommerceMLПанель" командной панели формы
//
Процедура ДействияФормыВыгрузитьВФорматеCommerceMLЭлПочтаПанель(Кнопка)

	ЗаполнениеДокументов.ОтправитьДокументПоПочтеCommerceML(Ссылка);

КонецПроцедуры

// Процедура отправки документа через 1С:Сеть
Процедура ДействияФормыОтправитьЧерез1ССеть(Кнопка)
	
	ЭлектронныеДокументы.ОтправитьДокументЧерез1ССеть(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура показа прикрепленных к документу файлов
Процедура ДействияФормыФайлы(Кнопка)
	
	ЭлектронныеДокументы.ПоказатьФайлыКСсылкеНаОбъект(ЭтаФорма, Ссылка);
	
КонецПроцедуры

Процедура КоманднаяПанельАвансыПоОснованию(Кнопка)
	
	Авансы.Очистить();
	ОпределениеПараметровСчетаФактурыНаАванс(Неопределено);
	Если Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	СписокАвансы			 = (Авансы.Количество()>1);
	ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	
	УстановитьВидимость();

	Если Авансы.Количество() > 1 Тогда
		УстановитьКодВидаОперации();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельАвансыПоСчетуНаОплату(Кнопка)
	
	ФормаВыбора = Документы.СчетНаОплатуПокупателю.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(	Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	СчетНаОплату = ФормаВыбора.ОткрытьМодально();
	
	ЗаполнитьПоСчетуНаОплату(СчетНаОплату, Ложь);
		
	Если Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	СписокАвансы			 = (Авансы.Количество()>1);
	ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельАвансыПоЗаказу(Кнопка)
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	СчетНаОплату = ФормаВыбора.ОткрытьМодально();
	
	ЗаполнитьПоСчетуНаОплату(СчетНаОплату, Ложь);
		
	Если Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	СписокАвансы			 = (Авансы.Количество()>1);
	ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельАвансыПоСчетуНаОплатуДобавить(Кнопка)
	
	ФормаВыбора = Документы.СчетНаОплатуПокупателю.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	СчетНаОплату = ФормаВыбора.ОткрытьМодально();
	
	ЗаполнитьПоСчетуНаОплату(СчетНаОплату, Истина);
	
	Если Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	СписокАвансы			 = (Авансы.Количество()>1);
	ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоманднаяПанельАвансыПоЗаказуДобавить(Кнопка)
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора();
	ФормаВыбора.Отбор.Организация.Установить(	Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
	СчетНаОплату = ФормаВыбора.ОткрытьМодально();
	
	ЗаполнитьПоСчетуНаОплату(СчетНаОплату, Истина);
	
	Если Авансы.Количество() = 0 Тогда
		Авансы.Добавить();
	КонецЕсли;
	
	СписокАвансы			 = (Авансы.Количество()>1);
	ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплату(СчетНаОплату, РежимДобавления = Ложь)
	
	Если СчетНаОплату <> Неопределено Тогда
	
		Если Не РежимДобавления Тогда
			Авансы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
		КонецЕсли;
		ТаблицаАвансов = Авансы.ВыгрузитьКолонки();
		
		СтрокиКУдаления = Новый Массив;
		
		Для Каждого СтрокаАванса Из Авансы Цикл
			Если Не РежимДобавления
				Или Не ЗначениеЗаполнено(СтрокаАванса.Номенклатура) Тогда
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаАванса.Сумма, 
																									СтрокаАванса.СуммаНДС, 
																									СтрокаАванса.СтавкаНДС, 
																									СчетНаОплату), ТаблицаАвансов);
				Если РежимДобавления Тогда
					СтрокиКУдаления.Добавить(СтрокаАванса);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РежимДобавления Тогда
			Для Каждого СтрокаКУдалению Из СтрокиКУдаления Цикл
				Авансы.Удалить(СтрокаКУдалению);
			КонецЦикла;
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, Авансы);
		Иначе
			Авансы.Загрузить(ТаблицаАвансов);
		КонецЕсли;
		
		Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС"); 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура УстановитьДоступныеВидыСчетаФактуры()

	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Очистить();
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	Если Дата >= '20111001' Тогда	
		ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	КонецЕсли;
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления = 2 Тогда
		ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);	
	КонецЕсли;

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	РассчитатьСуммуДокумента();
	
	ПриИзмененииДаты();
	
КонецПроцедуры

Процедура ПриИзмененииДаты()
	
	УстановитьДоступныеВидыСчетаФактуры();
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	ЗаполнитьСписокКодовВидовОпераций();
	Если ВерсияПостановления = 1 Тогда
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ВидСчетаФактуры = Неопределено;
		КонецЕсли;
		Если Дата < '20111001' Тогда
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
				ВидСчетаФактуры = Неопределено;
			КонецЕсли;
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента  = '00010101';
		КонецЕсли;
		Исправление      = Ложь;
		НомерИсправления = "";
		НомерИсправленияИсходногоДокумента = "";
		ДатаИсправленияИсходногоДокумента  = '00010101';
		НомерИсправляемогоКорректировочногоДокумента = "";
		ДатаИсправляемогоКорректировочногоДокумента  = '00010101';
		УчитыватьИсправлениеИсходногоДокумента = Ложь;
		Выставлен       = Ложь;
		ДатаВыставления = '00010101';
	КонецЕсли;	
	
	УстановитьПризнакВыставлен();
	УстановитьВидимость();
	
КонецПроцедуры


Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(
			ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	КонтрагентПриИзменении(Элемент);
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
	
    ПриИзмененииДоговора();
	УстановитьПризнакВыставлен();
	
	Если ДокументыОснования.Количество() > 0 Тогда
		КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	КонецЕсли;
	УстановитьНадписьКППКонтрагента();
	
КонецПроцедуры

Процедура НадписьКППКонтрагентаНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ТекстСообщения = "Не заполнено значение реквизита ""Контрагент""!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ФормаВыбораКПП = ПолучитьОбщуюФорму("ФормаВыбораКПП", ЭтаФорма);
	ФормаВыбораКПП.Контрагент 		= Контрагент;
	ФормаВыбораКПП.КППКонтрагента 	= КППКонтрагента;
	ФормаВыбораКПП.РольКонтрагента	= "Покупатель";
	ФормаВыбораКПП.ОткрытьМодально();	
	
КонецПроцедуры  

Процедура ПриИзмененииДоговора()
		
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		ВалютаДокумента = ?(ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, 
			мВалютаРегламентированногоУчета, 
			ДоговорКонтрагента.ВалютаВзаиморасчетов);
		РассчитатьСуммуДокумента();

	КонецЕсли;
	
	УстановитьКодВидаОперации();
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента, СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры

Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ МожноИспользоватьДоговорКонтрагента(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура ВидСчетаФактурыПриИзменении(Элемент, ЗначениеКорректировки = Неопределено)
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление);
	
	Если ЗначениеКорректировки = Неопределено Тогда
		ЗначениеКорректировки = Ложь;
		ПроверитьТипыДокументов = Ложь;
	Иначе
		ПроверитьТипыДокументов = Истина;
	КонецЕсли;
		
	Если (мТекущийВидСчетаФактуры <> ВидСчетаФактуры ИЛИ ПроверитьТипыДокументов)
		И ДокументыОснования.Количество() <> 0
		И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование)
		И СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено Тогда
		
		ТекстВопроса = "Выбранный документ-основание не соответствует виду счета-фактуры. 
			|Для продолжения требуется очистить документ-основание. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВидСчетаФактуры = мТекущийВидСчетаФактуры;
			ЗначениеКорректировки = НЕ ЗначениеКорректировки;
			Возврат;
		Иначе
			ДокументыОснования.Очистить();
			Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
				ДокументыОснования.Добавить();
				ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
			КонецЕсли;
			ДатаНомерДокументовОплаты.Очистить();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		И ДокументыОснования.Количество() > 1 Тогда
		
		ТекстВопроса = "Несколько документов-оснований может быть указано только для счета-фактуры на реализацию. 
			|Для продолжения требуется очистить все документы-основания, кроме первого. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ЗначениеКорректировки = НЕ ЗначениеКорректировки;
			ВидСчетаФактуры = мТекущийВидСчетаФактуры;
			Возврат;
		Иначе
			ДокументОснованиеПервый = ДокументыОснования[0].ДокументОснование;
			ДокументыОснования.Очистить();
			ДокументыОснования.Добавить();
			ДокументыОснования[0].ДокументОснование = ДокументОснованиеПервый;
			ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		ДокументыОснования.Добавить();
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Если ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			ДатаНомерДокументовОплаты.Добавить();
		КонецЕсли;
		ЭлементыФормы.ДатаНомерДокументовОплаты.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
	Иначе
		ДатаНомерДокументовОплаты.Очистить();
	КонецЕсли;
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Авансы.Очистить();
	КонецЕсли;
	
	мСписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление);
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		НомерИсправляемогоКорректировочногоДокумента = "";
		ДатаИсправляемогоКорректировочногоДокумента  = '00010101';
		Если НЕ Исправление Тогда
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента  = '00010101';
		КонецЕсли;
	КонецЕсли;
		
	РассчитатьСуммуДокумента();
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	
	УстановитьКодВидаОперации();
	УстановитьПризнакВыставлен();
	УстановитьВидимость();

КонецПроцедуры

Процедура ВидСчетаФактурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущийВидСчетаФактуры = ВидСчетаФактуры;
	
КонецПроцедуры

Процедура ВидСчетаФактурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ МожноИспользоватьДоговорКонтрагента(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	Если ВыбранноеЗначение <> ВидСчетаФактуры Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент,Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	Если НЕ Исправление Тогда
		БылНаАванс  = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента;
		СталНаАванс = ВыбранноеЗначение = Перечисления.ВидСчетаФактурыВыставленного.НаАванс ИЛИ ВыбранноеЗначение = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента;
		Если БылНаАванс <> СталНаАванс 
			И НЕ ПустаяСтрока(Номер) Тогда
			Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсправлениеПриИзменении(Элемент)
	
	Если Исправление И НЕ МожноИспользоватьДоговорКонтрагента(ДоговорКонтрагента) Тогда
		Исправление = Ложь;
		Возврат;
	КонецЕсли;
	
	мТекущийВидСчетаФактуры = ВидСчетаФактуры;
	ВидСчетаФактурыПриИзменении(Элемент, Исправление);
	
	Если НЕ Исправление Тогда
		НомерИсправления = "";
		Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
			НомерИсправляемогоКорректировочногоДокумента = "";
			ДатаИсправляемогоКорректировочногоДокумента  = '00010101';
		Иначе
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента  = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		Номер = "";
	КонецЕсли;
	
	УстановитьКодВидаОперации();	
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СчетФактураНеВыставляетсяПриИзменении(Элемент)
	
	УстановитьКодВидаОперации();
	УстановитьПризнакВыставлен();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВыставленПриИзменении(Элемент)
	
	Если НЕ Выставлен Тогда
		ДатаВыставления = '00010101';
	Иначе
		ДатаВыставления = Дата;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДЛЯ ВИДА СЧЕТА-ФАКТУРЫ НаРеализацию

Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.ДокументОснование = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Отказ = ДокументыОснования.Количество() = 1;
	
КонецПроцедуры

Процедура ДокументыОснованияПослеУдаления(Элемент)
	
	ОпределениеПараметровСчетаФактуры();
	УстановитьВидимость();
	УстановитьКодВидаОперации();

КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	ТекущееЗначение = Элемент.Значение;
	
	Если Не ЗначениеЗаполнено(ТекущееЗначение) Тогда
	    Возврат;
	КонецЕсли;
	
	Если Исправление И НЕ МожноИспользоватьДоговорКонтрагента(ТекущееЗначение.ДоговорКонтрагента) Тогда
		Элемент.Значение = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтрокаДокумента = ДокументыОснования.Найти(ТекущееЗначение, "ДокументОснование");
	УжеВыбран = Ложь;
	
	Если СтрокаДокумента <> ЭлементыФормы.ДокументыОснования.ТекущаяСтрока Тогда
		
		Сообщить("Данный документ уже выбран в качестве документа-основания.
			|Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
		
	Иначе
		
		ОпределениеПараметровСчетаФактуры();
		
	КонецЕсли;
	
	Ответ = Вопрос("Перезаполнить данные о платежно-расчетных документах?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаНомерДокументовОплаты.Очистить();
		НовыйПРД = ДатаНомерДокументовОплаты.Добавить();
		Если ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			или ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств") Тогда
			НовыйПРД.НомерПлатежноРасчетногоДокумента = ТекущееЗначение.НомерВходящегоДокумента;
			НовыйПРД.ДатаПлатежноРасчетногоДокумента =  ТекущееЗначение.ДатаВходящегоДокумента;
		Иначе
			НовыйПРД.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекущееЗначение);
			НовыйПРД.ДатаПлатежноРасчетногоДокумента =  ТекущееЗначение.Дата;
		КонецЕсли;
		
	КонецЕсли;  
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДЛЯ ВИДА СЧЕТА-ФАКТУРЫ НаАванс

Процедура ДокументОснованиеНаАвансНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

Процедура ДокументОснованиеНаАвансПриИзменении(Элемент)
	
	ТекОснование = ДокументыОснования[0].ДокументОснование;
	
	Если ЗначениеЗаполнено(ТекОснование) Тогда 
	
		ДокументЗаполнен = Ложь;
		Авансы.Очистить();
		ДатаНомерДокументовОплаты.Очистить();
		ОпределениеПараметровСчетаФактурыНаАванс(ДокументЗаполнен);
		
		Если НЕ ДокументЗаполнен Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не обнаружены данные для регистрации счета-фактуры на предварительную оплату.");
			Возврат;
		КонецЕсли; 
		
		ТипОснования = ТипЗнч(ТекОснование);
		Если ТипОснования = Тип("ДокументСсылка.ПлатежноеПоручениеВходящее")
			ИЛИ ТипОснования = Тип("ДокументСсылка.ПлатежныйОрдерПоступлениеДенежныхСредств")
			ИЛИ ТипОснования = Тип("ДокументСсылка.АккредитивПолученный") Тогда
			НомерПлатежноРасчетногоДокумента = ТекОснование.НомерВходящегоДокумента;
			ДатаПлатежноРасчетногоДокумента  = ТекОснование.ДатаВходящегоДокумента;
		Иначе
			НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(ТекОснование);
			ДатаПлатежноРасчетногоДокумента  = ТекОснование.Дата;
		КонецЕсли;
		
		СтрокаПРД = ДатаНомерДокументовОплаты.Добавить();
		СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= ДатаПлатежноРасчетногоДокумента;
		СтрокаПРД.НомерПлатежноРасчетногоДокумента	= НомерПлатежноРасчетногоДокумента;

		ЭлементыФормы.ДатаНомерДокументовОплаты.ТекущаяСтрока = ДатаНомерДокументовОплаты[0];
		
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры

Процедура АвансыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Авансы.Количество() = 2 Тогда
		УстановитьКодВидаОперации();
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура АвансыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;

	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) 
		И ТекущиеДанные.Номенклатура.Услуга Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура АвансыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
	КонецПроцедуры
	
Процедура АвансыПередУдалением(Элемент, Отказ)
	
	Отказ = Авансы.Количество() = 1;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ДЛЯ ВИДА СЧЕТА-ФАКТУРЫ Корректировочный

Процедура ДокументыОснованияКорректировкаДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление);
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	Если Исправление Тогда
		Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	КонецЕсли;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	КонецЕсли;	
	
	ЭлементыФормы.ДокументыОснованияКорректировка.ТекущаяКолонка = ЭлементыФормы.ДокументыОснования.Колонки.ДокументОснование;
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы.КорректировкаРеализации.ПолучитьФормуВыбора(,Элемент,);

	Попытка
		// Отфильтруем список документов.
		Для каждого ЭлементСтруктуры Из Отбор Цикл
            Если не ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = неопределено тогда
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
					ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
				Иначе
					Если НЕ ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ТипЗначения.СодержитТип(ТипЗнч(ЭлементСтруктуры.Значение)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
        	КонецЕсли;
		КонецЦикла;

	Исключение
		// нет таких отборов как заявлено в структуре.
	КонецПопытки;

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаДокументОснованиеПриИзменении(Элемент)
	
	ТекЗначение = Элемент.Значение;
	
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
	    Возврат;
	КонецЕсли; 
	
	УжеВыбран = Ложь;
	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		Если (СтрДокОснования.ДокументОснование = ТекЗначение)
		   и (СтрДокОснования.НомерСтроки <> ЭлементыФормы.ДокументыОснованияКорректировка.ТекущаяСтрока.НомерСтроки) Тогда
			УжеВыбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеВыбран Тогда
		Сообщить("Данный документ уже выбран в качестве документа-основания! Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
	Иначе
		ОпределениеПараметровСчетаФактуры(Истина);
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьКодВидаОперации();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
		И ДанныеСтроки.УчитыватьИсправлениеИсходногоДокумента Тогда
		
		ОформлениеСтроки.Ячейки.НомерИсправленияИсходногоДокумента.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.ДатаИсправленияИсходногоДокумента.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.НомерИсправленияИсходногоДокумента.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерИсправленияИсходногоДокумента);
		ОформлениеСтроки.Ячейки.ДатаИсправленияИсходногоДокумента.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаИсправленияИсходногоДокумента);
	Иначе
		ОформлениеСтроки.Ячейки.НомерИсправленияИсходногоДокумента.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ДатаИсправленияИсходногоДокумента.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.НомерИсправленияИсходногоДокумента.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.ДатаИсправленияИсходногоДокумента.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка = ЭлементыФормы.ДокументыОснованияКорректировка.Колонки.УчитыватьИсправление Тогда
		ТекущаяСтрока = ЭлементыФормы.ДокументыОснованияКорректировка.ТекущаяСтрока;
		Если ТекущаяСтрока<>Неопределено Тогда
			
			Если НЕ ТекущаяСтрока.УчитыватьИсправлениеИсходногоДокумента Тогда
				ТекущаяСтрока.НомерИсправленияИсходногоДокумента = "";
				ТекущаяСтрока.ДатаИсправленияИсходногоДокумента = '00010101';
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПередУдалением(Элемент, Отказ)
	
	Отказ = ДокументыОснования.Количество() = 1;
	
КонецПроцедуры

Процедура КодВидаОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперации);
	ВыбранныйКод = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущийКод);
	Если ВыбранныйКод <> Неопределено Тогда
		КодВидаОперации = ВыбранныйКод.Значение;
	КонецЕсли;

КонецПроцедуры

Процедура КодВидаОперацииНаУменьшениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперацииНаУменьшение);
	ВыбранныйКод = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущийКод);
	Если ВыбранныйКод <> Неопределено Тогда
		КодВидаОперацииНаУменьшение = ВыбранныйКод.Значение;
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с электронными документами

Процедура ДействияФормыПодписатьИОтправить(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСформироватьНовый(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.СформироватьНовыйЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ТекстСостоянияЭДНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ЭлектронныеДокументыКлиентПереопределяемый.Подключаемый_ОбработчикОжиданияЭДО(ЭтаФорма);
	
КонецПроцедуры

мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
