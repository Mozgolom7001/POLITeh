// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит валюту документа основания
Перем мВалютаДокумента;

Перем мВидимостьЗакладкиУслуг;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары, мКолонкиУслуги, мКолонкиВозвратнаяТара,мИспользоватьТару;

Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мСписокФильтров Экспорт;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мРазрешитьНулевыеЦеныВОпте, мРазрешитьНулевыеЦеныВРознице;
Перем мИспользоватьВнутренниеЗаказы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата());

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Заполняет текст надписи на форме по данным реквизита шапки, который есть в форме документа.
// Источник - <рекзит документа> - Имя ревизита шапки текущего документа
// ИмяПолучателя - <строка> - имя надписи на форме
// ИмяРеквизитаИзИсточника - <строка> - значение реквизита, которое мы хотим получить в тексте надписи из источника
// ТекстЗаголовкаПриНезаполненномИсточнике - <Строка> - текст, который будет отбражён, если Источник не выбран
//
Процедура ЗаполнитьТекстПоРеквизиту(Источник, ИмяПолучателя, ИмяРеквизитаИзИсточника, ТекстЗаголовкаПриНезаполненномИсточнике)
    Если НЕ ЗначениеЗаполнено(Источник) Тогда
		ЭлементыФормы[ИмяПолучателя].Заголовок = "Не выбран заказ";
		ЭлементыФормы[ИмяПолучателя].Гиперссылка = ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(Источник[ИмяРеквизитаИзИсточника]) Тогда
		ЭлементыФормы[ИмяПолучателя].Заголовок = ТекстЗаголовкаПриНезаполненномИсточнике;
		ЭлементыФормы[ИмяПолучателя].Гиперссылка = ложь;
	Иначе
		ЭлементыФормы[ИмяПолучателя].Заголовок = Строка(Источник[ИмяРеквизитаИзИсточника]);
		ЭлементыФормы[ИмяПолучателя].Гиперссылка = истина;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПоРеквизиту()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	Если (ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара) И ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

		Если ТабличнаяЧасть = Товары Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;
	КонецЕсли;
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	// Параметры запросов.
	ЕстьСерия = ТабличнаяЧасть = Товары
		И ЗначениеЗаполнено(ЗаказПокупателя)
		И ЗаказПокупателя.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено
		И ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента)
		И ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей
		И мРезервироватьПоСериям;
		
	ЕстьЦена          = мМожноМенятьЦенуВДокументе;
	Валюта            = ЗаказПокупателя.ВалютаДокумента;
	ПодбиратьУслуги   = Ложь;
	Если ТабличнаяЧасть = Товары Тогда
		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда           = "ПодборВТабличнуюЧастьУслуги";
		ИмяТабличнойЧасти = "Услуги";
		ПодбиратьУслуги   = Истина;
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СкладДляЗапроса       = ?(ТипЗнч(ЗаказПокупателя.СкладГруппа) = Тип("СправочникСсылка.Склады"), ЗаказПокупателя.СкладГруппа, Справочники.Склады.ПустаяСсылка());
	КонтрагентДляЗапроса  = ЗаказПокупателя.Контрагент;
	ДоговорДляЗапроса     = ЗаказПокупателя.ДоговорКонтрагента;
	ОрганизацияДляЗапроса = ЗаказПокупателя.Организация;
	СписокВидовПодбора    = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	ПредставлениеДок      = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"                      , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"           , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"                 , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                        , СкладДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Сделка"                       , ЗаказПокупателя);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                       , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"           , ДоговорДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Контрагент"                   , КонтрагентДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация"                  , ОрганизацияДляЗапроса);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"          , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ИспользоватьГруппуДоступности", Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"                     , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"                    , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"              , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"              , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"                 , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"              , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма));

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры", Серия);
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара ИЛИ ТабличнаяЧасть = Услуги Тогда
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда

			Если ТабличнаяЧасть = Услуги Тогда
				СтрокаТабличнойЧасти.Количество       = Количество;
			Иначе
				СтрокаТабличнойЧасти.Количество       = Количество;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
				СтрокаТабличнойЧасти.СерияНоменклатуры = Серия;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
				// Пересчитаем цену в валюту документа.
				КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
				КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ЗаказПокупателя.ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);
				
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					Цена,
					СпособЗаполненияЦен,
					ТипЦен.ЦенаВключаетНДС,
					УчитыватьНДС,
					СуммаВключаетНДС,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
			

			// Рассчитываем реквизиты табличной части.
			Если ТабличнаяЧасть = Услуги Тогда

				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти   (СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Иначе

				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				
				// Рассчитываем плановую себестоимость.
				ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

				// Итоговая информация об отклонение от плановой себестоимости
				РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

            Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда

				// Пересчитаем цену в валюту документа.
				КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
				КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ЗаказПокупателя.ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					Цена,
					СпособЗаполненияЦен,
					ТипЦен.ЦенаВключаетНДС,
					УчитыватьНДС,
					Истина,
					УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			 Иначе
				 СтрокаТабличнойЧасти.Цена = Цена;
			 КонецЕсли;
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ТабличнаяЧастьИмя = ?( ТабличнаяЧасть = Товары,    "Товары",
						?( ТабличнаяЧасть = Услуги,    "Услуги", "ВозвратнаяТара"));
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоОстаткам();
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		ЗаполнитьУслугиПоОстаткам();
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ЗаполнитьТаруПоОстаткам();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть копированием соответствующей заказа покупателя
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура СкопироватьСостав(ТабличнаяЧасть)

	КопироватьТабличнуюЧасть = Ложь;
	Если не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя. Заполнение невозможно.";
	Иначе
		КопироватьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не КопироватьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		СкопироватьТовары();
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СкопироватьУслуги();
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СкопироватьВозвратнуюТару();
		
	КонецЕсли;
	
КонецПроцедуры // СкопироватьСостав()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ВалютаЗаказа = ?(не ЗначениеЗаполнено(ЗаказПокупателя.ВалютаДокумента), Неопределено, ЗаказПокупателя.ВалютаДокумента);

	// Заполняем реквизиты табличной части.
	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, "Реализация"); 
	КонецЕсли;
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, ВалютаЗаказа);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ВалютаЗаказа = ?(не ЗначениеЗаполнено(ЗаказПокупателя.ВалютаДокумента), Неопределено, ЗаказПокупателя.ВалютаДокумента);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, ВалютаЗаказа);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если не ЗначениеЗаполнено(РежимВызова) Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			мОрганизацияЯвляетсяПлательщикомЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ЗаказПокупателя.Организация, Дата);
			мТекущаяОрганизация                  = ЗаказПокупателя.Организация;
		КонецЕсли;
	Иначе
		РаботаСДиалогами.ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Очищает значение реквизита в табличных частях "Товары", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличнойЧасти(ТабличнаяЧасть, ИмяРеквизита,ОчищатьДляОтрицательныхКоличеств)

	// Очистим значения в строках
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если не ОчищатьДляОтрицательныхКоличеств И Строка.Количество<0 Тогда
			Продолжить;
		КонецЕсли; 			

		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;

КонецПроцедуры

// Процедура очищает колонку "Размещение" табличной части.
//
Процедура ОчиститьРазмещениеВТабличнойЧасти(ТабличнаяЧасть,ОчищатьДляОтрицательныхКоличеств=ложь)

	ОчиститьРеквизитВТабличнойЧасти(ТабличнаяЧасть, "Размещение",ОчищатьДляОтрицательныхКоличеств);
	Если ТабличнаяЧасть = Товары Тогда
		Если мКолонкиТовары.СерияНоменклатуры.Видимость Тогда
			ОчиститьРеквизитВТабличнойЧасти(ТабличнаяЧасть, "СерияНоменклатуры",ОчищатьДляОтрицательныхКоличеств);
		КонецЕсли;
		ТабличнаяЧасть.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, Цена, СтавкаНДС, ЕдиницаИзмерения, ЕдиницаИзмеренияМест, Коэффициент, ПроцентСкидкиНаценки, ПроцентАвтоматическихСкидок, УсловиеАвтоматическойСкидки, ЗначениеУсловияАвтоматическойСкидки, ПлановаяСебестоимость,Размещение", "Количество, КоличествоМест, Сумма, СуммаНДС");
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧасть.Свернуть("Номенклатура, Цена,Размещение", "Количество, Сумма");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура - обработчик события "Нажатие" надписи о контрагенте.
//   Процедура открывает форму элемента справочника "Контрагенты"
// для реквизита Контрагент документа заказа.
//
Процедура ГиперссылкаКонтрагентаНажатие(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если ЗначениеЗаполнено(ЗаказПокупателя.Контрагент) Тогда
			ЗаказПокупателя.Контрагент.ПолучитьФорму( , ЭтаФорма, ).Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ГиперссылкаКонтрагентаНажатие()

// Процедура - обработчик события "Нажатие" надписи о контрагенте.
//   Процедура открывает форму элемента справочника "Контрагенты"
// для реквизита Контрагент документа заказа.
//
Процедура ГиперссылкаОрганизацииНажатие(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Если ЗначениеЗаполнено(ЗаказПокупателя.Организация) Тогда
			ЗаказПокупателя.Организация.ПолучитьФорму( , ЭтаФорма, ).Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ГиперссылкаОрганизацииНажатие()

Процедура ГиперссылкаСтруктурнаяЕдиницаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		СтруктурнаяЕдиница.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ГиперссылкаДисконтнаяКартаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		ДисконтнаяКарта.ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи о подразделении.
Процедура ГиперссылкаПодразделенияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ЗаказПокупателя.Подразделение) Тогда
		ЗаказПокупателя.Подразделение.ПолучитьФорму( , ЭтаФорма, ).Открыть();
	КонецЕсли;
	
КонецПроцедуры // ГиперссылкаПодразделениеНажатие(Элемент)

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидимостьЭлементов = Истина;
	Иначе
		ВидимостьЭлементов = Ложь;
	КонецЕсли;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если (УчитыватьНДС И ВидимостьЭлементов) <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС И ВидимостьЭлементов);
	КонецЕсли;

	Если (УчитыватьНДС И ВидимостьЭлементов) <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС И ВидимостьЭлементов);
	КонецЕсли;
	
		// Колонки налога показываем только тогда, когда его учитываем.
	Если (УчитыватьНДС И ВидимостьЭлементов) <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС И ВидимостьЭлементов);
	КонецЕсли;

	Если (УчитыватьНДС И ВидимостьЭлементов) <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС И ВидимостьЭлементов);
	КонецЕсли;


	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Сумма, ВидимостьЭлементов);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Всего, ВидимостьЭлементов);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПроцентСкидкиНаценки, ВидимостьЭлементов);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.Сумма, ВидимостьЭлементов);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.Всего, ВидимостьЭлементов);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.ПроцентСкидкиНаценки, ВидимостьЭлементов);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.Цена,  ВидимостьЭлементов);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.Сумма, ВидимостьЭлементов);
	
	// Колонки плановой себестоимости показываем только тогда, когда с ней работаем.
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПлановаяСебестоимость,                         ИспользоватьПлановуюСебестоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаПлановойСебестоимости,                    ИспользоватьПлановуюСебестоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаОтклоненияОтСуммыПлановойСебестоимости,   ИспользоватьПлановуюСебестоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПроцентОтклоненияОтСуммыПлановойСебестоимости, ИспользоватьПлановуюСебестоимость);
	ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости.Видимость = ИспользоватьПлановуюСебестоимость;

	ЭлементыФормы.НадписьВсегоНДС.Видимость                       = ВидимостьЭлементов;
	ЭлементыФормы.НадписьВсего.Видимость                          = ВидимостьЭлементов;
	ЭлементыФормы.ВсегоНДС.Видимость                              = ВидимостьЭлементов;
	ЭлементыФормы.Всего.Видимость                                 = ВидимостьЭлементов;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительно.Видимость = ВидимостьЭлементов;
	ЭлементыФормы.НадписьКонтрагент.Видимость                     = ВидимостьЭлементов;
	ЭлементыФормы.ГиперСсылкаКонтрагента.Видимость                = ВидимостьЭлементов;

	ЭлементыФормы.НадписьСтруктурнаяЕдиница.Видимость             = ВидимостьЭлементов;
	ЭлементыФормы.ГиперссылкаСтруктурнаяЕдиница.Видимость             = ВидимостьЭлементов;

	// Видимость закладок
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Доступность Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость  = Истина;
	КонецЕсли;

	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = мВидимостьЗакладкиУслуг;
	
	ОбособленныйУчет = ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) И 
	              ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
		
	ВидимостьСерии = мРезервироватьПоСериям И ОбособленныйУчет;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СерияНоменклатуры, ВидимостьСерии);

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает заголовки по выбранному договору для:
// - колонок табличной части "Возвратная тара";
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	// Установить заголовки колонок ТЧ "Возвратная тара".
	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда

		Если не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			ЭлементыФормы.ИнфНадписьКурса.Заголовок = "Заказ не выбран. Информация о взаиморасчетах отсутствует.";
		Иначе
			ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
			                                                                                 КурсВзаиморасчетов,
			                                                                                 КратностьВзаиморасчетов,
			                                                                                 мВалютаРегламентированногоУчета,
			                                                                                 Истина);
		КонецЕсли;

    Иначе
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = "";
		мКолонкиВозвратнаяТара.Цена.ТекстШапки = "Цена";
		мКолонкиВозвратнаяТара.Сумма.ТекстШапки = "Сумма";

	КонецЕсли;

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	
	// При изменении данных обновим суммы в подвале.
	СумДок = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	ЭлементыФормы.Всего   .Значение = ОбщегоНазначения.ФорматСумм(СумДок);
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(мВалютаДокумента))
	   И (мВалютаДокумента <> мВалютаРегламентированногоУчетаОрганизаций) Тогда

		КурсДокумента      = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
		КратностьДокумента = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
		
		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента	+ " " 
		                +  мВалютаДокумента
		                + " = " + КурсДокумента
		                + мВалютаРегламентированногоУчетаОрганизаций + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если не ЗначениеЗаполнено(мВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура обновляет информацию в форме по выбранному заказу
//
// Параметры:
//  Нет.
//
Процедура ОбновитьИнформациюПоЗаказу()

	ЗаполнитьТекстПоРеквизиту(ЗаказПокупателя,"ГиперссылкаКонтрагента","Контрагент","Не выбран контрагент в заказе");
	ЗаполнитьТекстПоРеквизиту(ЗаказПокупателя,"ГиперссылкаПодразделения","Подразделение","Не выбрано подразделение в заказе");
	ЗаполнитьТекстПоРеквизиту(ЗаказПокупателя,"ГиперссылкаОрганизации","Организация","Не выбрана организация в заказе");
    ЗаполнитьТекстПоРеквизиту(ЗаказПокупателя,"ГиперссылкаСтруктурнаяЕдиница","СтруктурнаяЕдиница","Не выбран Б/счет, касса в заказе");
    ЗаполнитьТекстПоРеквизиту(ЗаказПокупателя,"ГиперссылкаДисконтнаяКарта","ДисконтнаяКарта","Не выбрана дисконтная карта в заказе");

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		мТекущаяВалютаВзаиморасчетов = ЗаказПокупателя.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ВалютаДокумента              = ЗаказПокупателя.ВалютаДокумента;
		мВалютаДокумента             = ВалютаДокумента;

		// Итоговая информация об отклонение от плановой себестоимости
		РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	Иначе
		мТекущаяВалютаВзаиморасчетов = Неопределено;
		мВалютаДокумента             = Неопределено;
		ВалютаДокумента              = мВалютаРегламентированногоУчета;
	КонецЕсли;

	// Определим текущий вид склада
	СкладГруппа = ЗаказПокупателя.СкладГруппа;
	Если ЗначениеЗаполнено(СкладГруппа) 
	   И ТипЗнч(СкладГруппа) = Тип("СправочникСсылка.Склады") Тогда
		ВидСклада = СкладГруппа.ВидСклада;
	Иначе
		ВидСклада = Перечисления.ВидыСкладов.Оптовый;
	КонецЕсли;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ не ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	ИначеЕсли ВидСклада = Перечисления.ВидыСкладов.Розничный И мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ОбновитьИнформациюПоЗаказу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ДокументОбъект.Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	Если Не мРассчитыватьАвтоматическиеСкидки Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.ПересчитатьСкидки);
	КонецЕсли;

	// Услуги на комиссию не отдаем.
	мВидимостьЗакладкиУслуг = ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);
		Если не ЗначениеЗаполнено(ЗаказПокупателя) Тогда
			СтруктурнаяЕдиница = неопределено;
		КонецЕсли;
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ПлановаяСебестоимость");
	СтруктураКолонок.Вставить("СуммаПлановойСебестоимости");
	СтруктураКолонок.Вставить("СуммаОтклоненияОтСуммыПлановойСебестоимости");
	СтруктураКолонок.Вставить("ПроцентОтклоненияОтСуммыПлановойСебестоимости");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	ОбновитьИнформациюПоЗаказу();

	УстановитьЗаголовкиПоДоговору();

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);	

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Услуги на комиссию не отдаем.
	мВидимостьЗакладкиУслуг = ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
    УстановитьДоступностьКнопкиЗаполнитьИПровести();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();
	
	мКолонкиТовары.Цена                .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма               .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС            .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары", "Товары");
	Страницы.Добавить("Тара",   "ВозвратнаяТара");
	Страницы.Добавить("Услуги", "Услуги");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваДляТекущегоПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
			КурсДокумента      = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
			КратностьДокумента = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
			ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
						мВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
						КурсДокумента, КурсВзаиморасчетов,
						КратностьДокумента, КратностьВзаиморасчетов));
		КонецЕсли;
	КонецЕсли;

	ОбновитьПодвал();
	УстановитьВидимость();
	УстановитьЗаголовкиПоДоговору();

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

	// Надпись НадписьСуммаВзаиморасчетов

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		Если не ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(мТекущаяВалютаВзаиморасчетов) + ":";
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен, , ЗаказПокупателя.ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)

    УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ЗаказПокупателя,ложь, истина);

КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущей датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Предупреждение("Дата документа отличается от текущей. Оперативное проведение невозможно.
		               |Документ заполнен не будет!");
		Возврат;
	КонецЕсли; 

	// Заполнение документа
	Форма = ПолучитьОбщуюФорму("ФормаВыбораПараметровАвторезервирования", ЭтаФорма, );

	//Установим реквизиты и переменные формы.
	Форма.ФормаДокумента = ЭтаФорма;
	Провести = Форма.ОткрытьМодально();
	//если форму закрыли просто крестом, 
    Если Провести=неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ОчищатьРазмещениеПередЗаполнением Тогда
		ОчиститьРазмещениеВТабличнойЧасти(Товары,ложь);
		Если мИспользоватьТару Тогда 
			ОчиститьРазмещениеВТабличнойЧасти(ВозвратнаяТара,ложь);
		КонецЕсли;
	КонецЕсли;

	ВидимостьСерии = мКолонкиТовары.СерияНоменклатуры.Видимость;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВидимостьСерии",     ВидимостьСерии);
	СтруктураПараметров.Вставить("Авторезервирование", Авторезервирование);
	СтруктураПараметров.Вставить("Авторазмещение",     Авторазмещение);
	СтруктураПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", СтратегияАвторезервированияПоЗаказам);

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборОстаткиТоваров = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Записать();
		НаборЗаказыПоставщикам  = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборЗаказыПоставщикам.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаказыПоставщикам.Записать();
	КонецЕсли;

	ЗаполнитьТабличныеЧастиПередПроведениемУпр(СтруктураПараметров);

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

Процедура КоманднаяПанельТоварыПересчитатьСкидки(Кнопка)

	Если РаботаСДиалогами.ПроверитьМодифицированностьВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ПересчитатьСкидки();
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	КурсДокумента      = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
	КратностьДокумента = ?(ЗаказПокупателя.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);

	// Заполнить набор реквизитов, которые берутся не из текущего документа
	СтруктураРеквизитовДокумента.Вставить("Контрагент", ЗаказПокупателя.Контрагент);
	СтруктураРеквизитовДокумента.Вставить("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента", ЗаказПокупателя.ВалютаДокумента);
	СтруктураРеквизитовДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураРеквизитовДокумента.Вставить("КратностьДокумента", КратностьДокумента);
	СтруктураРеквизитовДокумента.Вставить("ВызовКорректировкаЗаказа");

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ИспользоватьПлановуюСебестоимость);
	
	СтруктураТолькоЧтение = Новый Структура;
	СтруктураТолькоЧтение.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураТолькоЧтение.Вставить("ВалютаДокумента");
	СтруктураТолькоЧтение.Вставить("КурсДокумента");
	СтруктураТолькоЧтение.Вставить("КурсВзаиморасчетов");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураТолькоЧтение, "Товары");

	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	СтруктураРеквизитовДокумента.Вставить( "ИспользоватьПлановуюСебестоимость", ИспользоватьПлановуюСебестоимость);
	
	// Выполнить стандартные действия при изменении режима использования плановой себестоимости
	РаботаСДиалогами.ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СтруктураРеквизитовДокумента.ИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ОбработкаТабличныхЧастей.ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоОстаткам(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)
	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараСкопироватьСостав(Кнопка)
	СкопироватьСостав(ВозвратнаяТара);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели УСЛУГИ.
//
Процедура КоманднаяПанельУслугиЗаполнитьПоОстаткам(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели УСЛУГИ.
//
Процедура КоманднаяПанельУслугиСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ОчиститьРазмещение" командной панели ТЧ Товары,
// очищает заполненные поля в графе "Размещение".
//
Процедура КоманднаяПанельТоварыДействиеОчиститьРазмещение(Кнопка)

	СписокРазмещенийТовары = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "Размещение");

	Если СписокРазмещенийТовары.Количество() > 0 Тогда
		// Есть заполненные поля
		ТекстВопроса = "Очистить размещения в табличной части?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");
		// Очистим значения в строках
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьРазмещениеВТабличнойЧасти(Товары,истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ОчиститьРазмещение" командной панели ТЧ Тара,
// очищает заполненные поля в графе "Размещение".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеОчиститьРазмещение(Кнопка)

	СписокРазмещенийТара = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "Размещение");

	Если СписокРазмещенийТара.Количество() > 0 Тогда
		// Есть заполненные поля
		ТекстВопроса = "Очистить размещения в табличной части?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");
		// Очистим значения в строках
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьРазмещениеВТабличнойЧасти(ВозвратнаяТара,истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗаказПокупателя".
// Процедура выполняет действия при изменении Заказа покупателя.
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	Если ЗаказПокупателя.КурсВзаиморасчетов = 0 Тогда
		КурсВзаиморасчетов      = 1;
		КратностьВзаиморасчетов = 1;
	Иначе
		КурсВзаиморасчетов      = ЗаказПокупателя.КурсВзаиморасчетов; 
		КратностьВзаиморасчетов = ЗаказПокупателя.КратностьВзаиморасчетов; 
	КонецЕсли;
	
	Контрагент = ЗаказПокупателя.Контрагент;
	Организация = ЗаказПокупателя.Организация;
	СтруктурнаяЕдиница = ЗаказПокупателя.СтруктурнаяЕдиница;
	ТипЦен = ЗаказПокупателя.ТипЦен;
	
	УчитыватьНДС                      = ЗаказПокупателя.УчитыватьНДС;
	СуммаВключаетНДС                  = ЗаказПокупателя.СуммаВключаетНДС;
	ИспользоватьПлановуюСебестоимость = ЗаказПокупателя.ИспользоватьПлановуюСебестоимость;
	ДисконтнаяКарта                   = ЗаказПокупателя.ДисконтнаяКарта;
	
	ПриИзмененииОблагаетсяЕНВД("Организация");

	ОбновитьИнформациюПоЗаказу();
	
	// Услуги на комиссию не отдаем.
	мВидимостьЗакладкиУслуг = ЗаказПокупателя.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);

	// Рассчитать и показать в колонках информацию о сумме и отклонении от плановой себестоимости
	ОбработкаТабличныхЧастей.ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Товары" и "Возвратная тара"
//
Процедура ТоварыРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка,мИспользоватьВнутренниеЗаказы);

КонецПроцедуры // ТоварыРазмещениеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные; 

	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Ссылка);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

		// Рассчитываем плановую себестоимость.
		ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

		// Рассчитываем плановую себестоимость.
		ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Выполнить действия при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(СтрокаТабличнойЧасти, ЭтотОбъект, СтароеЗначениеКоэффициента);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
	// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
		// Выполнить общие действия для всех документов при изменении Суммы.
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина,"Товары");

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода СерияНоменклатуры
// в табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Если не указан заказ покупателя, выбор серий не возможен.
	Если ЗаказПокупателя.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Пока не указан заказ покупателя выбор серий не возможен.");
		Возврат;
	КонецЕсли;	
		
	// Проверим возможность указания серий для резервирования.
	Если Не мРезервироватьПоСериям Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Резервирование серий не предусмотрено!");
		Возврат;
	КонецЕсли;	

	// Проверим ведётся ли учет по сериям.
	СтрокаТабличнойЧасти  = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти.Номенклатура.ВестиУчетПоСериям Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для номенклатуры """ + СтрокаТабличнойЧасти.Номенклатура + """ не ведется учет по сериям!");
		Возврат;
	КонецЕсли;

	// Проверим ведётся ли обособленный учет.
	ОбособленныйУчет = ЗначениеЗаполнено(ЗаказПокупателя.ДоговорКонтрагента) И ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей;
	Если Не(ОбособленныйУчет) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("По договору не ведется обособленный учет по заказам покупателей!");
		Возврат;
	КонецЕсли; 

	// Проверим, что в колонке "Размещение" указан склад.
	РазмещениеСклад = (ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.Размещение) = Тип("СправочникСсылка.Склады"));
	Если Не(РазмещениеСклад) Тогда
		Предупреждение("Выбор серии для резервирования возможно только при размещении на складе.");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры // ТоварыСерияНоменклатурыНачалоВыбора()

Процедура ТоварыРазмещениеПриИзменении(Элемент)
	
	// Сбросим серию, если размещение не склад.
	РазмещениеСклад = (ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.Размещение) = Тип("СправочникСсылка.Склады"));
	Если Не(РазмещениеСклад) Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = Неопределено;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА
// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ТипЗнч(ЗаказПокупателя) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект, ЗаказПокупателя.ДоговорКонтрагента, мВалютаРегламентированногоУчета);
	КонецЕсли;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка,мИспользоватьВнутренниеЗаказы);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара");
	КонецЕсли;

КонецПроцедуры

Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// заполнение поля содержание в табличной части
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,ложь,"Услуги");
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()


Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик события "ПриВыводеСтроки" в ТЧ "Услуги".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиУслуги.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
	КонецЕсли;

КонецПроцедуры // УслугиПриВыводеСтроки()

Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Услуги");
	Иначе
		УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	КонецЕсли;

КонецПроцедуры

Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги         = ЭлементыФормы.Услуги.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

мИспользоватьТару      = глЗначениеПеременной("ИспользоватьВозвратнуюТару");
мРазрешитьНулевыеЦеныВОпте    = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();
мРазрешитьНулевыеЦеныВРознице = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВРознице();
мИспользоватьВнутренниеЗаказы     = УправлениеЗаказами.ИспользоватьВнутренниеЗаказы();

