////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мТерминалы;

Перем мСтароеЗначениеДокЕГАИС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заменяет значение реквизита в табличных частях "Товары", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ТабличнаяЧасть)
	// Заменим значения в строках
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
				Строка.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры


// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(, "По справочнику");

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СписокЗапросов.Добавить("ОстаткиНТТ", "По остаткам и ценам номенклатуры в торговой точке");
	Иначе
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

		Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры",         "По ценам номенклатуры");
			СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда;

	ЕстьСерия               = Истина;
	ТипЦен                  = Неопределено;
	РазворачиватьДоКачества = Истина;

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СпособЗаполненияЦен     = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ЕстьЦена                = мМожноМенятьЦенуВДокументе;
		РазворачиватьДоКачества = Ложь;
	ИначеЕсли СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда 
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	Иначе
		СпособЗаполненияЦен = Неопределено;
		ЕстьЦена            = Ложь;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		Команда                 = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти       = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда                 = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьЦена                = Ложь;
		ЕстьСерия               = Ложь;
		ИмяТабличнойЧасти       = "Тара";
		РазворачиватьДоКачества = Ложь;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда",            Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , СкладОтправитель);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);

	// Тип цен устанавливает склад получатель.
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , СкладПолучатель.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Сделка"                 , ВнутреннийЗаказ);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент"             , Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"     , Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"    , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
//
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"       , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "ВнутреннийЗаказ", "ТоварыВРезервеНаСкладах", "ДокументРезерва", "ДокументРезерва", Ложь));

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   (ТабличнаяЧасть <> Товары)) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Расчет цены по валюте документа
	ВалютаДокумента      = мВалютаРегламентированногоУчета;
	КурсДокумента        = 1;
	КратностьДокумента   = 1;
	ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена,
	                                                         ВалютаЦены,
	                                                         ВалютаДокумента,
	                                                         КурсДокумента,
	                                                         КратностьДокумента,
	                                                         Дата);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если НЕ ЗначениеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);

		Если (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ)
		 ИЛИ (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ) Тогда
			СтруктураОтбора.Вставить("Цена", ЦенаВВалютеДокумента);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;

			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Цена                       = ЦенаВВалютеДокумента;
			СтрокаТабличнойЧасти.Качество                   = Качество;
			
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			Если НЕ ЗначениеЗаполнено(Качество) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;

		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти)

	Если Не (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
		     или СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (Не СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ) 
		    И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ) Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		// Тип цен устанавливает склад получатель.
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                              СкладПолучатель.ТипЦенРозничнойТорговли, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                              ВалютаДокумента, КурсДокумента, КратностьДокумента);
	ИначеЕсли СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		СтрокаТабличнойЧасти.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура,, СкладОтправитель,
		                                                  мВалютаРегламентированногоУчета, Дата,
		                                                  СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                  ВалютаДокумента, КурсДокумента, КратностьДокумента);
	КонецЕсли;

КонецПроцедуры

//Процедура обрабатывает изменение внутреннего заказа в шапке или в табличной части
Процедура ПриИзмененииВнутреннегоЗаказа(ВнутреннийЗаказ)
	Если ЗначениеЗаполнено(ВнутреннийЗаказ) и НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = ВнутреннийЗаказ.Заказчик;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

//Процедура обрабатывает начало выбора внутреннего заказа в шапке или в табличной части
Процедура НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка,ИмяТЧ="")
	
	МассивОтборов = Новый Массив;

	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.НаСклад));
	Иначе
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.НаСклад));
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Заказчик", СкладПолучатель));
	КонецЕсли;
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов, ИмяТЧ);
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ОтправительНТТ = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ  = (СкладПолучатель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);

	// Если в перемещении участвует НТТ, то надо сделать видимыми колонки формирования
	// розничной цены.
	Если ОтправительНТТ
	 ИЛИ ПолучательНТТ Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Цена,                Истина);
		мКолонкиТовары.Цена.ТекстШапки = "Розн. цена (" + мВалютаРегламентированногоУчета + ")";

		мКолонкиТовары.Цена.АвтоОтметкаНезаполненного  = НЕ мРазрешитьНулевыеЦеныВРознице;

	Иначе
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Цена,                Ложь);
	КонецЕсли;

	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьЦенуНТТ.Доступность = (ОтправительНТТ ИЛИ ПолучательНТТ);

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	ДоступностьПолучателя = истина;
    ДоступностьВнутреннийЗаказ = ложь;
	Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы(Ложь) Тогда
		ДоступностьВнутреннийЗаказ = истина;
		Для каждого Строка из Товары цикл
			Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
				ДоступностьПолучателя = ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДоступностьПолучателя Тогда
			Для каждого Строка из ВозвратнаяТара цикл
				Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
					ДоступностьПолучателя = ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ВнутреннийЗаказ       .Доступность = ДоступностьВнутреннийЗаказ;
	ЭлементыФормы.НадписьВнутреннийЗаказ.Доступность = ДоступностьВнутреннийЗаказ;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( мКолонкиВозвратнаяТара.ВнутреннийЗаказ, ДоступностьВнутреннийЗаказ);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( мКолонкиТовары.ВнутреннийЗаказ, ДоступностьВнутреннийЗаказ);
    мКолонкиТовары.ВнутреннийЗаказ.ИзменятьВидимость = ДоступностьВнутреннийЗаказ;
	мКолонкиВозвратнаяТара.ВнутреннийЗаказ.ИзменятьВидимость = ДоступностьВнутреннийЗаказ;

	ЭлементыФормы.СкладПолучатель.АвтоОтметкаНезаполненного = ДоступностьПолучателя;
	ЭлементыФормы.НадписьСкладПолучатель.Доступность        = ДоступностьПолучателя;
	ЭлементыФормы.СкладПолучатель.Доступность               = ДоступностьПолучателя;

	ВидимостьАналитикаСписанияНДС = НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = мСложныйУчетНДС И ОтражатьВБухгалтерскомУчете;
	
	ИнтеграцияЕГАИСПереопределяемый.УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНеПолучены = Ложь;
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация, "Нал");
	мСложныйУчетНДС = Не ПараметрыНеПолучены И ПараметрыНУ.СложныйУчетНДС и Не ПараметрыНУ.ОрганизацияНеЯвляетсяПлательщикомНДС;

КонецПроцедуры // ОпределитьСложныйУчетНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
				Сообщить("Перемещение товаров нельзя вводить на основании заказа от подразделения", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ИнициализироватьНовыйДокумент(ПараметрОбъектКопирования, ПараметрОснование);                                      		
	Иначе		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	//СтруктураКолонок.Вставить("ДокументРезерва");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	СтруктураКолонок.Вставить("Цена");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Определим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары", "Товары");
	Страницы.Добавить("Тара",   "ВозвратнаяТара");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = "Товары (";
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары  + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	ИнтеграцияЕГАИСПереопределяемый.ПослеЗаписиДокументаИзФормы(Этаформа, ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ИнтеграцияЕГАИСПереопределяемый.ОбработатьОповещения(ЭтаФорма, ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                Неопределено, Номер,
	                                                Ложь, Неопределено);

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Если Не ИнтеграцияЕГАИСПереопределяемый.ДопустимыйВидОперацииДляЕГАИС(Кнопка.Имя, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

//Функция осуществляет выбор внутреннего заказа для заполнения табличной части
Функция ВыбратьВнутреннийЗаказ()
	ФормаЗаказы = Документы.ВнутреннийЗаказ.ПолучитьФормуВыбора();
	ФормаЗаказы.Заголовок = "Выберите внутренний заказ для заполнения перемещения";
	ФормаЗаказы.РежимВыбора = Истина;
	
	ФормаЗаказы.Отбор.ВидЗаказа.Значение  = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
	ФормаЗаказы.Отбор.ВидЗаказа.Использование = Истина;
	ФормаЗаказы.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидЗаказа.Доступность = ложь;
	
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда
		ФормаЗаказы.Отбор.Заказчик.Значение  = СкладПолучатель;
		ФормаЗаказы.Отбор.Заказчик.Использование = Истина;
		ФормаЗаказы.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Заказчик.Доступность = ложь;
	КонецЕсли;
	ТекВнутреннийЗаказ = ФормаЗаказы.ОткрытьМодально();
	Если НЕ ЗначениеЗаполнено(ТекВнутреннийЗаказ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = ТекВнутреннийЗаказ.Заказчик;
	КонецЕсли;
	Возврат ТекВнутреннийЗаказ;
КонецФункции

//Процедура осуществляет заполнение табличной части по внутреннему заказу
Процедура ЗаполнитьПоВНутреннемуЗаказу(ТабЧасть, ИмяТабЧасти, флОчищать = истина)
	Если флОчищать Тогда
		Если ТабЧасть.Количество() > 0 Тогда
		
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			ТабЧасть.Очистить();
		КонецЕсли;

	КонецЕсли;
	
	ТекВнутреннийЗаказ = ВнутреннийЗаказ;
	Если НЕ ЗначениеЗаполнено(ТекВнутреннийЗаказ) ИЛИ НЕ флОчищать Тогда
		ТекВнутреннийЗаказ = ВыбратьВнутреннийЗаказ();
		Если НЕ ЗначениеЗаполнено(ТекВнутреннийЗаказ) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;


	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, ТекВнутреннийЗаказ, ТабЧасть, СкладОтправитель, ДатаОстатков,?(ИмяТабЧасти="ВозвратнаяТара",Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено));

    УстановитьВидимость();

Конецпроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьПоВНутреннемуЗаказу(Товары, "Товары");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыДобавитьПоВнутреннемуЗаказу(Кнопка)
	ЗаполнитьПоВНутреннемуЗаказу(Товары, "Товары",ложь);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ
															   ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Неопределено;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по внутреннему заказу" подменю 
// "Заполнить" командной панели "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	ЗаполнитьПоВНутреннемуЗаказу(ВозвратнаяТара, "ВозвратнаяТара");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьПоВнутреннемуЗаказу(Кнопка)
	ЗаполнитьПоВНутреннемуЗаказу(ВозвратнаяТара, "ВозвратнаяТара",ложь);
КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТовары = РегистрыНакопления.ТоварыВРознице.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
		
		НаборТовары = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
		
		НаборТовары = РегистрыНакопления.ТоварыКПередачеСоСкладов.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьЦенуНТТ" командной панели
//
Процедура КоманднаяПанельТоварыЗаполнитьЦенуНТТ(Кнопка)

	ЗаполнитьРозничнуюЦену();

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "ЗаполнитьОстаткамиПоСкладуОтправителю"
//
Процедура КоманднаяПанельТоварыЗаполнитьОстаткамиПоСкладуОтправителю(Кнопка)

	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		Сообщить("Укажите склад-отправитель", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;

	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
		|	ТоварыНаСкладахОстатки.Качество,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	NULL КАК ЦенаВРознице
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыВНТТОстатки.Номенклатура,
		|	ТоварыВНТТОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВНТТОстатки.СерияНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.Качество.Новый),
		|	ТоварыВНТТОстатки.КоличествоОстаток,
		|	ТоварыВНТТОстатки.ЦенаВРознице
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&КонДата, Склад = &Склад) КАК ТоварыВНТТОстатки
		|ГДЕ
		|	ТоварыВНТТОстатки.КоличествоОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыВРозницеОстатки.Номенклатура,
		|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВРозницеОстатки.СерияНоменклатуры,
		|	ТоварыВРозницеОстатки.Качество,
		|	ТоварыВРозницеОстатки.КоличествоОстаток,
		|	NULL
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(&КонДата, Склад = &Склад) КАК ТоварыВРозницеОстатки
		|ГДЕ
		|	ТоварыВРозницеОстатки.КоличествоОстаток > 0";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата", ?(ЭтоНовый(), КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр("Склад",   СкладОтправитель);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("Нет данных для заполнения!");
		Возврат;
	Иначе
		Товары.Очистить();
	КонецЕсли;

	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл

		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура               = Обход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры          = Обход.СерияНоменклатуры;
		НоваяСтрока.Количество                 = Обход.КоличествоОстаток;
		НоваяСтрока.Цена                       = Обход.ЦенаВРознице;
		НоваяСтрока.Качество                   = Обход.Качество;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;

	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьОстаткамиПоСкладуОтправителю()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Если НачалоМесяца(Дата) <> НачалоМесяца(мТекущаяДатаДокумента) Тогда
		// Определим параметры сложного учета НДС.
		ОпределитьСложныйУчетНДС();
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ПриИзмененииОтражатьВБухгалтерскомУчете();
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();

	РаботаСДиалогами.ОбработатьПризнакОтраженияВреглУчетеДляФормы(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОтправитель.
//
Процедура СкладОтправительПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(, ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	ПриИзмененииСклада();

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ПриИзмененииВидаСклада();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СкладПолучатель.
//
Процедура СкладПолучательПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	ПриИзмененииСклада();

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ПриИзмененииВидаСклада();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров.
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // НДСвСтоимостиТоваровПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары". 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
    Если НоваяСтрока Тогда
    	СтрокаТабличнойЧасти.ВнутреннийЗаказ = ВнутреннийЗаказ;
	КонецЕсли;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти);

	// Поменяем способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = УправлениеРозничнойТорговлей.СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                        СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                        СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                        СкладОтправитель, мВалютаРегламентированногоУчета, Дата);

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля Заказ покупателя
// в строке табличной части "Товары".
//
Процедура ТоварыДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
			ответ = Вопрос("Списывать товар из резерва?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
			Если ответ = КодВозвратаДиалога.Да Тогда
				ТекДанные.ДокументРезерва = ТекДанные.ВнутреннийЗаказ;
			Иначе
				ТекДанные.ДокументРезерва = Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
			СтандартнаяОбработка = ложь;
			ТекДанные.ДокументРезерва = ТекДанные.ВнутреннийЗаказ;
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" поля ввода "ВнутреннийЗаказ" табличной части Товары
Процедура ТоварыВнутреннийЗаказПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	ПриИзмененииВнутреннегоЗаказа(ТекДанные.ВнутреннийЗаказ);
	Если ЗначениеЗаполнено(ТекДанные.ДокументРезерва) И ТекДанные.ДокументРезерва <> ТекДанные.ВнутреннийЗаказ 
		и ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
		ТекДанные.ДокументРезерва = неопределено;
	КонецЕсли;	

КонецПроцедуры

//Процедура-обработчик события "Очистка" поля ввода "ВнутреннийЗаказ" табличной части Товары
Процедура ТоварыВнутреннийЗаказОчистка(Элемент, СтандартнаяОбработка)
	УстановитьВидимость();
	Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.ДокументРезерва = Неопределено;
	КонецЕсли;
КонецПроцедуры

//Процедура-обработчик события "НачалоВыбора" поля ввода "ВнутреннийЗаказ" табличной части Товары
Процедура ТоварыВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка,"Товары")
КонецПроцедуры



// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ВозвратнаяТараНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ покупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)
    ТекДанные = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
		СтандартнаяОбработка = ложь;
		ТекДанные.ДокументРезерва = ТекДанные.ВнутреннийЗаказ;
	Иначе	

		РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "ВозвратнаяТара");
    КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()


//Процедура-обработчик события "НачалоВыбора" поля ввода "ВнутреннийЗаказ" табличной части ВозвратнаяТара
Процедура ВозвратнаяТараВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка,"ВозвратнаяТара")
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" поля ввода "ВнутреннийЗаказ" табличной части ВозвратнаяТара
Процедура ВозвратнаяТараВнутреннийЗаказПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	ПриИзмененииВнутреннегоЗаказа(ТекДанные.ВнутреннийЗаказ);
	Если ЗначениеЗаполнено(ТекДанные.ДокументРезерва) И ТекДанные.ДокументРезерва <> ТекДанные.ВнутреннийЗаказ
		И ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
		ТекДанные.ДокументРезерва = неопределено;
	КонецЕсли;	
КонецПроцедуры

//Процедура-обработчик события "Очистка" поля ввода "ВнутреннийЗаказ" табличной части ВозвратнаяТара
Процедура ВозвратнаяТараВнутреннийЗаказОчистка(Элемент, СтандартнаяОбработка)
	УстановитьВидимость();
КонецПроцедуры



// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ВнутреннийЗаказПриИзменении(Элемент)
	
	ПриИзмененииВнутреннегоЗаказа(ВнутреннийЗаказ);

КонецПроцедуры // ЗаказПриИзменении()

Процедура ВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка)
	
КонецПроцедуры // ЗаказНачалоВыбора()

Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.ВнутреннийЗаказ = ВнутреннийЗаказ;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Обработчик события "Нажатие" кнопки "Переоценка" в командной панели ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПереоценка(Кнопка)

	УправлениеРозничнойТорговлей.ВвестиПереоценкуНаОснованииПрихода(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // КоманднаяПанельТоварыПереоценка()

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Процедура выполняет действия при изменении реквизитов "СкладОтправитель" и "СкладПолучатель"
Процедура ПриИзмененииСклада()

	ОтправительНТТ = (СкладОтправитель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ  = (СкладПолучатель.ВидСклада   = Перечисления.ВидыСкладов.НТТ);

	Если ОтправительНТТ Или ПолучательНТТ Тогда

		Если Товары.Количество() > 0 Тогда

			Текст = "Заполнить цены для товаров в соответствии с ";

			Если ОтправительНТТ Тогда
				Текст = Текст + "остатками склада " + СкладОтправитель + ".";
			Иначе
				Текст = Текст + "установленным типом цен для склада " + СкладПолучатель + ".";
			КонецЕсли;

			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаполнитьРозничнуюЦену();
			КонецЕсли;
		КонецЕсли;
		Если ПолучательНТТ Тогда
			ЗаменитьЗначениеРеквизитаВТабличныхЧастях(Товары);
			ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Ложь;

	Если ЕстьНТТ() И НЕ мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Истина;
	КонецЕсли;

	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с ЕГАИС

Процедура ДействияФормыСоздатьПерезаполнитьДокЕГАИС(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.СоздатьПерезаполнитьДокументЕГАИС(Кнопка, ЭтаФорма, ДокументОбъект);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьДокЕГАИС(Кнопка)
	
	Если Кнопка.Имя = "ОткрытьТТНИ" Тогда
		СсылкаНаДокЕГАИС = ТТНИсходящая;
	ИначеЕсли Кнопка.Имя = "ОткрытьТТНВ" Тогда
		СсылкаНаДокЕГАИС = ТТНВходящая;
	КонецЕсли;
	ИнтеграцияЕГАИСПереопределяемый.ОткрытьДокументЕГАИС(СсылкаНаДокЕГАИС);
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыСопоставитьНоменклатуру(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.ОткрытьФормуСопоставленияНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыПередатьДанныеВЕГАИС(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.ПередатьДанныеВЕГАИС(Кнопка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ДокЕГАИСПриИзменении(Элемент)
	
	ИнтеграцияЕГАИСПереопределяемый.ДокЕГАИСПриИзменении(Элемент, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ДокЕГАИСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСПереопределяемый.ДокЕГАИСНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ДокЕГАИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСПереопределяемый.ДокЕГАИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура СоздатьДокументТорговогоЗала(Кнопка)
	ИнтеграцияЕГАИСПереопределяемый.СоздатьДокументТорговогоЗала(Кнопка, ЭтотОбъект);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

мТерминалы                    = ПолучитьСерверТО().ПолучитьСписокУстройств(
									Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);
