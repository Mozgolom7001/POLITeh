////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

Перем мПоискПоСтрокеКонтрагента;
Перем мТекстПоискаПоСтрокеКонтрагента;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент;

Перем мПоискПоСтрокеКонтактногоЛица;
Перем мТекстПоискаПоСтрокеКонтактногоЛица;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо;

Перем мПоискПоСтрокеКонтактногоЛицаТЧ;
Перем мТекстПоискаПоСтрокеКонтактногоЛицаТЧ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицоТЧ;

Перем мТекущееОписаниеСобытия;
Перем мНачалоСобытия;

Перем мЧас;
Перем мМинута;

Перем мПериодРегистрации;
Перем мПериодАктуальности;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СторонниеЛица,ЭлементыФормы.КоманднаяПанельСторонниеЛица);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура изменяет окончание контакта при изменении начала
//
// Параметры
//  Элемент - Элемент управления, начало контакта
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ИзменениеНачалаСобытия(Элемент)

	ОкончаниеСобытия = Элемент.Значение + (ОкончаниеСобытия - мНачалоСобытия);
	мНачалоСобытия = Элемент.Значение;

КонецПроцедуры

// Функция определяет получателей электронного письма, при использовании встроенного почтового клиента.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   ТаблицаЗначений, получатели электронного письма
//
Функция ОпределитьПолучателейВстроенногоКлиента()

	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Объект");
	ТаблицаПолучателей.Колонки.Добавить("Адрес");
	
	// Контактное лицо
	Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтактногоЛица) Тогда
		
			ЗаписиКонтактногоЛица = Новый ТаблицаЗначений;
			ЗаписиКонтактногоЛица.Колонки.Добавить("Объект");
			ЗаписиКонтактногоЛица.Колонки.Добавить("Представление");
			ЗаписиКонтактногоЛица.Индексы.Добавить("ЗначениеПоУмолчанию");
			
			НоваяСтрока = ЗаписиКонтактногоЛица.Добавить();
			НоваяСтрока.Объект              = КонтактноеЛицо;
			НоваяСтрока.Представление       = ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтактногоЛица;
			НоваяСтрока.ЗначениеПоУмолчанию = Истина;
		
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект", КонтактноеЛицо);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|";
		
		ЗаписиКонтактногоЛица = Запрос.Выполнить().Выгрузить();
		Если ЗаписиКонтактногоЛица.Количество() = 0 Тогда
			ЗаписиКонтактногоЛица = Неопределено;
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Контрагент
	Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтрагента) Тогда
		
			ЗаписиКонтрагента = Новый ТаблицаЗначений;
			ЗаписиКонтрагента.Колонки.Добавить("Объект");
			ЗаписиКонтрагента.Колонки.Добавить("Представление");
			ЗаписиКонтрагента.Колонки.Добавить("ЗначениеПоУмолчанию");
			
			НоваяСтрока = ЗаписиКонтрагента.Добавить();
			НоваяСтрока.Объект              = Контрагент;
			НоваяСтрока.Представление       = ДанныеНезарегистрированногоКонтрагента.АдресЭлектроннойПочтыКонтрагента;
			НоваяСтрока.ЗначениеПоУмолчанию = Истина;
		
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Контрагент) И ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект", Контрагент);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|";
		
		ЗаписиКонтрагента = Запрос.Выполнить().Выгрузить();
		Если ЗаписиКонтрагента.Количество() = 0 Тогда
			ЗаписиКонтрагента = Неопределено;
		КонецЕсли; 
		
	КонецЕсли;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		
		Запрос = Новый Запрос;
		
		СписокОбъектов = Новый СписокЗначений;
		
		Для каждого Лицо Из СторонниеЛица Цикл
			Если НЕ ЗначениеЗаполнено(Лицо.Контрагент) Тогда
				СписокОбъектов.Добавить(Лицо.Контрагент);
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(Лицо.Лицо) Тогда
				СписокОбъектов.Добавить(Лицо.Лицо);
			КонецЕсли; 
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Объект,
		|	КонтактнаяИнформация.Представление       КАК Представление,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект В(&СписокОбъектов)
		|
		|ИТОГИ ПО
		|	Объект
		|";
		
		ЗаписиПрочихУчастников = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ЗаписиПрочихУчастников.Строки.Количество() = 0 Тогда
			ЗаписиПрочихУчастников = Неопределено;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗаписиКонтактногоЛица <> Неопределено Тогда
		СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
		СтрокаПоУмолчанию = ЗаписиКонтактногоЛица.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
			СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
		Иначе
			СтрокаТаблицыПолучателей.Объект = ЗаписиКонтактногоЛица[0].Объект;
			СтрокаТаблицыПолучателей.Адрес  = ЗаписиКонтактногоЛица[0].Представление;
		КонецЕсли; 
	ИначеЕсли ЗаписиКонтрагента <> Неопределено Тогда
		СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
		СтрокаПоУмолчанию = ЗаписиКонтрагента.Найти(Истина, "ЗначениеПоУмолчанию");
		Если СтрокаПоУмолчанию <> Неопределено Тогда
			СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
			СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
		Иначе
			СтрокаТаблицыПолучателей.Объект = ЗаписиКонтрагента[0].Объект;
			СтрокаТаблицыПолучателей.Адрес  = ЗаписиКонтрагента[0].Представление;
		КонецЕсли; 
	КонецЕсли; 

	Если ЗаписиПрочихУчастников <> Неопределено Тогда
		Для каждого СтрокаОбъекта Из ЗаписиПрочихУчастников.Строки Цикл
			Если СтрокаОбъекта.Строки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицыПолучателей = ТаблицаПолучателей.Добавить();
			СтрокаПоУмолчанию = СтрокаОбъекта.Строки.Найти(Истина, "ЗначениеПоУмолчанию");
			Если СтрокаПоУмолчанию <> Неопределено Тогда
				СтрокаТаблицыПолучателей.Объект = СтрокаПоУмолчанию.Объект;
				СтрокаТаблицыПолучателей.Адрес  = СтрокаПоУмолчанию.Представление;
			Иначе
				СтрокаТаблицыПолучателей.Объект = СтрокаОбъекта.Строки[0].Объект;
				СтрокаТаблицыПолучателей.Адрес  = СтрокаОбъекта.Строки[0].Представление;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ТаблицаПолучателей;

КонецФункции // ОпределитьПолучателейВстроенногоКлиента()

// Функция возвращает имя типа контактной информации по его значению
//
// Параметры
//  Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//   Строка
//
Функция ПолучитьПредставлениеТипа(Тип)

	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат "Адрес";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат "E-mail";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат "Телефон";
	Иначе
		Возврат "";
	КонецЕсли; 

КонецФункции // ПолучитьПредставлениеТипа()

// Функция в зависимости от вида и типа контакта, определяет типы контаткной информации
//  которые необходимо отображать
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура
//
Функция ОпределитьТипКонтактнойИнформации()

	СписокТиповКонтрагента = Новый СписокЗначений;
	СписокТиповКонтактногоЛица = Новый СписокЗначений;
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ПочтовоеПисьмо Тогда
		СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
		СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Адрес);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		КонецЕсли;
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок
		  ИЛИ ВидСобытия = Перечисления.ВидыСобытий.Прочее Тогда
		СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
		ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			СписокТиповКонтрагента.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
			СписокТиповКонтактногоЛица.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Контрагент, КонтактноеЛицо", СписокТиповКонтрагента, СписокТиповКонтактногоЛица);
	
КонецФункции

// Процедура отображает контактную информацию объектов на форме
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ОбновитьКонтактнуюИнформацию()

	Если ТипЗнч(Контрагент) = Тип("Строка") И ТипЗнч(КонтактноеЛицо) = Тип("Строка") Тогда
		
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента) Тогда
			ТелефонКонтрагента = ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтрагента), ("(" + ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтрагента + ") "), "") + СокрЛП(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента) + ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента), (", доб. " + СокрЛП(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента)), "");
		Иначе
			ТелефонКонтрагента = "";
		КонецЕсли; 
		ЭлементыФормы.КонтактнаяИнформацияКонтрагента.Значение = "Телефон: " + ?(ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента), "нет информации", ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтрагента);
		Если НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица) Тогда
			ТелефонКонтактногоЛица = ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтактногоЛица), ("(" + ДанныеНезарегистрированногоКонтрагента.КодГородаТелефонаКонтактногоЛица + ") "), "") + СокрЛП(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица) + ?(НЕ ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтрагента), (", доб. " + СокрЛП(ДанныеНезарегистрированногоКонтрагента.ДобавочныйНомерТелефонаКонтактногоЛица)), "");
		Иначе
			ТелефонКонтактногоЛица = "";
		КонецЕсли;
		ЭлементыФормы.КонтактнаяИнформацияКонтактногоЛица.Значение = "Телефон: " + ?(ПустаяСтрока(ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица), "нет информации", ДанныеНезарегистрированногоКонтрагента.НомерТелефонаКонтактногоЛица);
		
	Иначе
		
		ТипыКонтактнойИнформации = ОпределитьТипКонтактнойИнформации();
		
		СписокТиповКонтрагента = ТипыКонтактнойИнформации.Контрагент;
		СписокТиповКонтактногоЛица = ТипыКонтактнойИнформации.КонтактноеЛицо;
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект        КАК Объект,
		|	КонтактнаяИнформация.Тип           КАК Тип,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &КонтактноеЛицо
		|	И
		|	КонтактнаяИнформация.Тип В(&СписокТиповКонтактногоЛица)
		|";
		
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Объект        КАК Объект,
			|	КонтактнаяИнформация.Тип           КАК Тип,
			|	КонтактнаяИнформация.Представление КАК Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Контрагент
			|	И
			|	КонтактнаяИнформация.Тип В(&СписокТиповКонтрагента)
			|
			|";
			
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ТекущаяДата"               , ТекущаяДата());
		Запрос.УстановитьПараметр("Контрагент"                , Контрагент);
		Запрос.УстановитьПараметр("КонтактноеЛицо"            , ?(ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент, КонтактноеЛицо, КонтактноеЛицоБезКонтрагента));
		Запрос.УстановитьПараметр("СписокТиповКонтрагента"    , СписокТиповКонтрагента);
		Запрос.УстановитьПараметр("СписокТиповКонтактногоЛица", СписокТиповКонтактногоЛица);
		
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		
		СтрокаДанныхКонтрагента = "";
		СтрокаДанныхКонтактногоЛица = "";
		
		Для каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
		
			ИзмененноеПредставление = СтрЗаменить(СтрокаТаблицы.Представление, Символы.ВК, " ");
			ИзмененноеПредставление = СтрЗаменить(ИзмененноеПредставление, Символы.ПС, " ");
			ИзмененноеПредставление = СтрЗаменить(ИзмененноеПредставление, Символы.НПП, " ");
			
			Если ТипЗнч(СтрокаТаблицы.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если НЕ ПустаяСтрока(СтрокаДанныхКонтрагента) Тогда
					СтрокаДанныхКонтрагента = СтрокаДанныхКонтрагента + "; ";
				КонецЕсли; 
				СтрокаДанныхКонтрагента = СтрокаДанныхКонтрагента + ИзмененноеПредставление;
			Иначе
				Если НЕ ПустаяСтрока(СтрокаДанныхКонтактногоЛица) Тогда
					СтрокаДанныхКонтактногоЛица = СтрокаДанныхКонтактногоЛица + "; ";
				КонецЕсли; 
				СтрокаДанныхКонтактногоЛица = СтрокаДанныхКонтактногоЛица + ИзмененноеПредставление;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокТиповКонтрагента.Количество() > 0 Тогда
			ЭлементыФормы.КонтактнаяИнформацияКонтрагента.Значение = ПолучитьПредставлениеТипа(СписокТиповКонтрагента[0].Значение) + ": " + ?(ПустаяСтрока(СтрокаДанныхКонтрагента), "нет информации", СтрокаДанныхКонтрагента);
		Иначе
			ЭлементыФормы.КонтактнаяИнформацияКонтрагента.Значение = "";
		КонецЕсли;
		
		Если СписокТиповКонтактногоЛица.Количество() > 0 Тогда
			ЭлементыФормы.КонтактнаяИнформацияКонтактногоЛица.Значение = ПолучитьПредставлениеТипа(СписокТиповКонтактногоЛица[0].Значение) + ": " + ?(ПустаяСтрока(СтрокаДанныхКонтактногоЛица), "нет информации", СтрокаДанныхКонтактногоЛица);
		Иначе
			ЭлементыФормы.КонтактнаяИнформацияКонтактногоЛица.Значение = "";
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры // ОбновитьКонтактнуюИнформацию()

// Процедура формирует представление комбинации реквиитов ТипСобытия и ВидСобытия.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура СформироватьСтрокуТипаВида()

	Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		СтрокаТипа = " (входящ";
	Иначе
		СтрокаТипа = " (исходящ";
	КонецЕсли;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча Тогда
		СтрокаТипа = СтрокаТипа + "ая)";

	ИначеЕсли ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок Тогда
		СтрокаТипа = СтрокаТипа + "ий)";

	Иначе
		СтрокаТипа = СтрокаТипа + "ее)";

	КонецЕсли;

	// Отобразить в заголовке формы тип и вид конаткта.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидСобытия) + СтрокаТипа, ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Текст = Строка(ВидСобытия);
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюТиповСобытия.Текст = СтрокаТипа;

КонецПроцедуры

// Функция возвращает адрес эл.почты выбранного контрагента или контактного лица.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  Строка – электронный адрес
//
Функция ОпределитьПолучателей()

	Адрес = Новый Массив;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
	
		Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Предупреждение("Выберите контрагента или контактное лицо");
			Возврат Неопределено;
		КонецЕсли; 

		СписокОбъектов= Новый СписокЗначений;
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокОбъектов.Добавить(Контрагент);
		КонецЕсли; 
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			СписокОбъектов.Добавить(КонтактноеЛицо);
		КонецЕсли; 

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("ТипМейл"       , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
		Запрос.УстановитьПараметр("ТекущаяДата"   , Дата);
		Запрос.УстановитьПараметр("ПустаяСтрока"  , "");
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Получатель,
		|	КонтактнаяИнформация.Вид                 КАК Вид,
		|	КонтактнаяИнформация.Представление       КАК Адрес,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	КонтактнаяИнформация.Объект.Наименование КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &ТипМейл
		|	И
		|	КонтактнаяИнформация.Объект В (&СписокОбъектов)
		|";

		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Колонки.Получатель.Ширина = 25;
		ТаблицаЗапроса.Колонки.Вид.Ширина = 25;
		ТаблицаЗапроса.Колонки.Адрес.Ширина = 25;

		Если ТаблицаЗапроса.Количество() = 0 Тогда
			Адрес.Добавить("");
			Адрес.Добавить("");
			Возврат Адрес;
		ИначеЕсли ТаблицаЗапроса.Количество() = 1 Тогда
			СтрокаТаблицыЗапроса = ТаблицаЗапроса[0];
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Представление));
			Возврат Адрес;
		Иначе
			
			СтрокиПоУмолчанию = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию", Истина));
			Если СтрокиПоУмолчанию.Количество() = 1 Тогда
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Адрес));
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Представление));
				Возврат Адрес;
			ИначеЕсли НЕ КонтактноеЛицо.Пустая() Тогда
				СтрокиПоУмолчаниюКонтактногоЛица = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию, Получатель", Истина, КонтактноеЛицо));
				Если СтрокиПоУмолчаниюКонтактногоЛица.Количество() = 1 Тогда
					Адрес.Добавить(СокрЛП(СтрокиПоУмолчаниюКонтактногоЛица[0].Адрес));
					Адрес.Добавить(СокрЛП(СтрокиПоУмолчаниюКонтактногоЛица[0].Представление));
					Возврат Адрес;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НЕ Контрагент.Пустая() И НЕ КонтактноеЛицо.Пустая() Тогда
			
				РезультатПоискаКонтактногоЛица = ТаблицаЗапроса.НайтиСтроки(Новый Структура("Получатель", КонтактноеЛицо));

				Если РезультатПоискаКонтактногоЛица.Количество() > 0 Тогда

					Если РезультатПоискаКонтактногоЛица.Количество() = 1 Тогда
						
						Адрес.Добавить(СокрЛП(РезультатПоискаКонтактногоЛица[0].Адрес));
						Адрес.Добавить(СокрЛП(РезультатПоискаКонтактногоЛица[0].Представление));
						Возврат Адрес;
						
					Иначе

						ТаблицаВыбораАдресаКонтактногоЛица = ТаблицаЗапроса.Скопировать();

						Индекс = 0;
						Пока Истина Цикл
						
							Если Индекс > ТаблицаВыбораАдресаКонтактногоЛица.Количество() - 1 Тогда
								Прервать;
							КонецЕсли; 

							Если ТипЗнч(ТаблицаВыбораАдресаКонтактногоЛица[Индекс].Получатель) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
								ТаблицаВыбораАдресаКонтактногоЛица.Удалить(Индекс);
								Продолжить;
							КонецЕсли; 

							Индекс = Индекс + 1;

						КонецЦикла; 
						
						ТаблицаВыбораАдресаКонтактногоЛица.Колонки.Удалить(ТаблицаВыбораАдресаКонтактногоЛица.Колонки.ЗначениеПоУмолчанию);
						ТаблицаВыбораАдресаКонтактногоЛица.Колонки.Удалить(ТаблицаВыбораАдресаКонтактногоЛица.Колонки.Представление);
						СтрокаТаблицыАдресовКонтактногоЛица = ТаблицаВыбораАдресаКонтактногоЛица.ВыбратьСтроку("Выберите получателя");
						Если СтрокаТаблицыАдресовКонтактногоЛица <> Неопределено Тогда
							Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресовКонтактногоЛица.Адрес));
							Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресовКонтактногоЛица.Получатель));
							Возврат Адрес;
						Иначе
							Возврат Неопределено;
						КонецЕсли;
					
					КонецЕсли; 

				Иначе

					ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
					ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
					СтрокаТаблицыЗапроса = ТаблицаЗапроса.ВыбратьСтроку("Выберите получателя");
					Если СтрокаТаблицыЗапроса <> Неопределено Тогда
						Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
						Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Получатель));
						Возврат Адрес;
					Иначе
						Возврат Неопределено;
					КонецЕсли;
					
				КонецЕсли; 
				
			Иначе
				
				ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
				ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
				СтрокаТаблицыЗапроса = ТаблицаЗапроса.ВыбратьСтроку("Выберите получателя");
				Если СтрокаТаблицыЗапроса <> Неопределено Тогда
					Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
					Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Получатель));
					Возврат Адрес;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе // прочее контактное лицо
	
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Предупреждение("Выберите контактное лицо!");
			Возврат Неопределено;
		КонецЕсли; 

		Запрос = Новый Запрос;

		Запрос.УстановитьПараметр("ТипМейл"     , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Запрос.УстановитьПараметр("Объект"      , КонтактноеЛицо);
		Запрос.УстановитьПараметр("ТекущаяДата" , Дата);
		Запрос.УстановитьПараметр("ПустаяСтрока", "");
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Объект              КАК Получатель,
		|	КонтактнаяИнформация.Вид                 КАК Вид,
		|	КонтактнаяИнформация.Представление       КАК Адрес,
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	КонтактнаяИнформация.Объект.Наименование КАК Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &ТипМейл
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|";

		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		ТаблицаЗапроса.Колонки.Получатель.Ширина = 25;
		ТаблицаЗапроса.Колонки.Вид.Ширина = 25;
		ТаблицаЗапроса.Колонки.Адрес.Ширина = 25;

		Если ТаблицаЗапроса.Количество() = 0 Тогда
			Адрес.Добавить("");
			Адрес.Добавить("");
			Возврат Адрес;
		ИначеЕсли ТаблицаЗапроса.Количество() = 1 Тогда
			СтрокаТаблицыЗапроса = ТаблицаЗапроса[0];
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Адрес));
			Адрес.Добавить(СокрЛП(СтрокаТаблицыЗапроса.Представление));
			Возврат Адрес;
		Иначе
			СтрокиПоУмолчанию = ТаблицаЗапроса.НайтиСтроки(Новый Структура("ЗначениеПоУмолчанию", Истина));
			Если СтрокиПоУмолчанию.Количество() = 1 Тогда
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Адрес));
				Адрес.Добавить(СокрЛП(СтрокиПоУмолчанию[0].Представление));
				Возврат Адрес;
			КонецЕсли;
			ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.ЗначениеПоУмолчанию);
			ТаблицаЗапроса.Колонки.Удалить(ТаблицаЗапроса.Колонки.Представление);
			СтрокаТаблицыАдресов = ТаблицаЗапроса.ВыбратьСтроку("Выберите адрес получателя");
			Если СтрокаТаблицыАдресов <> Неопределено Тогда
				Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресов.Адрес));
				Адрес.Добавить(СокрЛП(СтрокаТаблицыАдресов.Получатель));
				Возврат Адрес;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции // ОпределитьПолучателей()

// Процедура устанавливает доступность элемента верхней командной панели
// формы НаписатьПисьмо.
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьКнопокПочты() Экспорт

	Если ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо Тогда
		Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Истина;
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Истина;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.НаписатьПисьмо.Доступность = Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить();
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НаписатьПисьмо.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры // ДоступностьКнопокПочты()

// Процедура устанавливает доступность элементов формы НадписьИсточникИнформации
// и ИсточникИнформацииПриОбращении
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ДоступностьИсточникаИнформации()

	ФлагДоступности = Истина;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ФлагДоступности = Ложь;
	Иначе
		
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент
			И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
			И ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее
			И Контрагент.Покупатель Тогда
			
			ПроверитьРегистрИсточникИнформации();
			
			Если ЗначениеЗаполнено(мПериодРегистрации) Тогда
				
				Если НЕ ЗначениеЗаполнено(мПериодАктуальности) Тогда
					ФлагДоступности = Ложь;
				ИначеЕсли мПериодАктуальности >= Дата Тогда
					ФлагДоступности = Ложь;
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе
			ФлагДоступности = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.НадписьИсточникИнформации.Доступность = ФлагДоступности;
	ЭлементыФормы.ИсточникИнформацииПриОбращении.Доступность = ФлагДоступности;

КонецПроцедуры // ДоступностьИсточникаИнформации()

// Процедура управляет видимостью элементов управления формы в зависимости от
// вида объекта события
//
Процедура ВидимостьЭлементовФормы()

	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		
		ЭлементыФормы.ПанельКонтрагента.Страницы.Контрагенты.Видимость = Истина;
		ЭлементыФормы.ПанельИсточника.Доступность = Истина;
		ЭлементыФормы.ПанельКонтрагента.ТекущаяСтраница = ЭлементыФормы.ПанельКонтрагента.Страницы.Контрагенты;
		ЭлементыФормы.ПанельКонтрагента.Страницы.Прочие.Видимость = Ложь;
		
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
			Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		
		ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок         = "Контрагенты, контактные лица";
		ЭлементыФормы.СторонниеЛица.Колонки.Лицо.ТекстШапки      = "Контактное лицо контрагента";
		ЭлементыФормы.СторонниеЛица.Колонки.Контрагент.Видимость = Истина;
		
	Иначе
		
		ЭлементыФормы.ПанельКонтрагента.Страницы.Прочие.Видимость = Истина;
		ЭлементыФормы.ПанельИсточника.Доступность = Ложь;
		ЭлементыФормы.ПанельКонтрагента.ТекущаяСтраница = ЭлементыФормы.ПанельКонтрагента.Страницы.Прочие;
		ЭлементыФормы.ПанельКонтрагента.Страницы.Контрагенты.Видимость = Ложь;
		
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
		ЭлементыФормы.СторонниеЛица.Колонки.Лицо.ТекстШапки = "Контактное лицо";
		ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок    = "Прочие контактные лица";
		
		ЭлементыФормы.СторонниеЛица.Колонки.Контрагент.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры // ВидимостьЭлементовФормы()

// Процедура управляет составом закладок панели ПанельФормы.
// 
Процедура СоставЗакладокГлавнойПанелиФормы()
	
	ЭлементыФормы.ПанельФормы.Страницы.Участники.Видимость = (ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча);
	
КонецПроцедуры // СоставЗакладокГлавнойПанелиФормы()

// Процедура управляет формой документа при изменении вида объекта
//
Процедура ПриИзмененииВидаОбъекта()
	
	Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча И СторонниеЛица.Количество() <> 0 Тогда
		
		НадоСпрашивать = Ложь;
		
		Если (ТипЗнч(СторонниеЛица[0].Лицо) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") И ВидОбъекта <> Перечисления.ВидыОбъектовСобытия.Контрагент) Тогда
			НадоСпрашивать = Истина;
		КонецЕсли;
		
		Если НадоСпрашивать Тогда
			
			ТекстВопроса = "При изменении вида объекта будет очищена таблица " + """" + ЭлементыФормы.РамкаГруппыСторонниеЛица.Заголовок + """" + ". Продолжить?";
			
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				
				Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
					ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
				ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
					ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица;
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли; 
		
		КонецЕсли; 
		
		СторонниеЛица.Очистить();
		
	КонецЕсли;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") И ТипЗнч(Контрагент) <> Тип("Строка") Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
			Если ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
				КонтактноеЛицо = "";
			КонецЕсли; 
		Иначе
			Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			ИначеЕсли КонтактноеЛицо.Владелец <> Контрагент Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ТипЗнч(КонтактноеЛицо) <> Тип("СправочникСсылка.КонтактныеЛица") Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 
	
	ВидимостьЭлементовФормы();
	ОбновитьКонтактнуюИнформацию();

	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо = КонтактноеЛицо;
	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент     = Контрагент;
	
КонецПроцедуры // ПриИзмененииВидаОбъекта()

// Процедура обрабатывает данные об источниках информации при обращении
//
Процедура ПроверитьРегистрИсточникИнформации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИсточникСрезПоследних.Период                                                      КАК ПериодРегистрации,
	|	ИсточникСрезПоследних.ИсточникИнформации.ПериодАктуальностиИнформацииПослеСобытия КАК ПериодАктуальности
	|ИЗ
	|	РегистрСведений.ИсточникИнформацииПриОбращении.СрезПоследних(&АктДата, Контрагент = &Контрагент) КАК ИсточникСрезПоследних
	|";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("АктДата"   , Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		мПериодРегистрации  = Выборка.ПериодРегистрации;
		мПериодАктуальности = мПериодРегистрации + Выборка.ПериодАктуальности*24*60*60;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если НЕ ЭтоНовый() Тогда
		УправлениеКонтактами.ПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента);
	КонецЕсли; 
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	мСписокСтарыхПользователей  = ПолучитьСписокПользователейДляКалендаря();
	мСтараяДатаНачалаСобытия    = НачалоСобытия;
	мСтараяДатаОкончанияСобытия = ОкончаниеСобытия;

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ДанныеКонтрагента = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьМенеджерЗаписи();
			УправлениеКонтактами.ПрочитатьДанныеНезарегистрированногоКонтрагента(ПараметрОбъектКопирования, ДанныеКонтрагента);
			Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Реквизиты Цикл
				ДанныеНезарегистрированногоКонтрагента[Реквизит.Имя] = ДанныеКонтрагента[Реквизит.Имя];
			КонецЦикла; 
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ВидОбъекта) Тогда
			ВидОбъекта = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнойВидОбъектаСобытия");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОбъекта) Тогда
			ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
			ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
				КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидСобытия) Тогда
			ВидСобытия = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ВидСобытияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ВидСобытия) Тогда
				ВидСобытия = Перечисления.ВидыСобытий.ТелефонныйЗвонок;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипСобытия) Тогда
			ТипСобытия = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТипСобытияПоУмолчанию");
			Если НЕ ЗначениеЗаполнено(ТипСобытия) Тогда
				ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее;
			КонецЕсли;
		КонецЕсли;
		
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;
		
		СтруктураРабочегоВремени = УправлениеКонтактами.ОпределитьНачалоИОкончениеРабочегоДняПользователя();
		
		НачалоРабочегоДня    = СтруктураРабочегоВремени.ДатаНачала;
		ОкончаниеРабочегоДня = СтруктураРабочегоВремени.ДатаОкончания;
	
		Если НЕ ЗначениеЗаполнено(НачалоСобытия) Тогда
			НачалоСобытия    = НачалоДня(Дата) + Час(НачалоРабочегоДня)*60*60 + Минута(НачалоРабочегоДня)*60;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОкончаниеСобытия) Тогда
			ОкончаниеСобытия = НачалоДня(Дата) + Час(ОкончаниеРабочегоДня)*60*60 + Минута(ОкончаниеРабочегоДня)*60;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СостояниеСобытия) Тогда
			Если ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
				СостояниеСобытия = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "СостояниеНовогоВходящегоСобытия");
			ИначеЕсли ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
				СостояниеСобытия = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "СостояниеНовогоИсходящегоСобытия");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СостояниеСобытия) Тогда
				СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано;
			КонецЕсли;
		КонецЕсли;
		
		Важность = Перечисления.Важность.Средняя;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия,
	                                      ВидСобытия.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьВидСобытия"));

	Для каждого Пункт Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Кнопки Цикл
		Пункт.Картинка = УправлениеКонтактами.ПолучитьКартинкуНапоминания(Перечисления.ВидыСобытий[Пункт.Имя]);
	КонецЦикла;

	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = УправлениеКонтактами.ПолучитьКартинкуНапоминания(ВидСобытия);

	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюТиповСобытия,
	                                      ТипСобытия.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьТипСобытия"));

	ДоступностьКнопокПочты();
	СформироватьСтрокуТипаВида();

	// Установка видимости реквизита "Проект".
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	ОбновитьКонтактнуюИнформацию();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВидимостьЭлементовФормы();

	мНачалоСобытия = НачалоСобытия;

	СоставЗакладокГлавнойПанелиФормы();
	ДоступностьИсточникаИнформации();

	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент     = Контрагент;
	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо = КонтактноеЛицо;
	мТекущаяДатаДокумента                                  = Дата;

	Модифицированность = Ложь;

КонецПроцедуры  // ПриОткрытии()

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НачалоСобытия > ОкончаниеСобытия Тогда
		
		Предупреждение("Дата начала события должна быть меньше окончания.");
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли (ОкончаниеСобытия - НачалоСобытия) > 60*60*24 Тогда
		
		ОтветНаВопрос = Вопрос("Длительность события слишком велика! Вы уверены, что даты начала и окончания введены правильно?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсточникИнформацииПриОбращении)
		И ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты")
		И ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее
		И Контрагент.Покупатель Тогда
		
		// определим период регистрации источника информации в регистре и период его актуальности
		ПроверитьРегистрИсточникИнформации();
		
		// если период регистрации не заполнен - значит введены события без указания источника инфомации,
		// либо впервые регистрируется событие с текущим контрагентом
		Если НЕ ЗначениеЗаполнено(мПериодРегистрации) Тогда
			
			Запрос = Новый Запрос;
			
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Запрос.УстановитьПараметр("АктДата"   , Дата);
			
			Запрос.Текст = "
			|ВЫБРАТЬ ПЕРВЫЕ 1 *
			|ИЗ
			|	Документ.Событие
			|ГДЕ
			|	Документ.Событие.Контрагент              = &Контрагент
			|	И Документ.Событие.Контрагент.Покупатель = ИСТИНА
			|	И Документ.Событие.Проведен              = ИСТИНА
			|	И Документ.Событие.Дата                  < &АктДата
			|	И Документ.Событие.ТипСобытия            = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
			|	И Документ.Событие.ВидОбъекта            = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовСобытия.Контрагент)
			|";
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			Если Результат.Количество() = 0 Тогда
				Предупреждение("Первый контакт с клиентом.
				|Не забудьте указать источник информации при обращении!");
			Иначе
				Предупреждение("Повторный контакт с клиентом без указания источника информации.
				|Не забудьте указать источник информации при обращении!");
			КонецЕсли
			
		// если учитывается период актуальности и данные не актуальны - предупредим пользователя
		ИначеЕсли ЗначениеЗаполнено(мПериодАктуальности) Тогда
			
			Если мПериодАктуальности <= Дата Тогда
				Предупреждение("Источник обращения контрагента зафиксирован " + Формат(мПериодРегистрации, "ДФ = ""дд.ММ.гггг""") + " 
				|" + Формат(мПериодАктуальности, "ДФ = ""дд.ММ.гггг""") + " истёк срок актуальности указанного источника!
				|Не забудьте указать источник информации при обращении!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
		УправлениеКонтактами.ЗаписатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента, Отказ);
	КонецЕсли; 
	
	ДоступностьИсточникаИнформации();
	
	Если НЕ Отказ Тогда
		Оповестить("ЗаписаноСобытиеДляКалендаря", Ссылка);
	КонецЕсли; 

КонецПроцедуры // ПриЗаписи()

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	СформироватьСтрокуТипаВида();

КонецПроцедуры // ПослеЗаписи()

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
		
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	КонецЕсли; 

КонецПроцедуры // ОбработкаВыбора()

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ДействияФормы.Кнопки.Перечитать.Доступность = НЕ ЭтоНовый();
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭлементыФормы.Контрагент, мПоискПоСтрокеКонтрагента, мТекстПоискаПоСтрокеКонтрагента);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриПоискеПоСтроке(ЭтаФорма, ЭлементыФормы.КонтактноеЛицо, мПоискПоСтрокеКонтактногоЛица, мТекстПоискаПоСтрокеКонтактногоЛица);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаСобытия" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
// Вызов процедуры назначается программно
//
Процедура ДействияФормыДействиеУстановитьВидСобытия(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидСобытия = Перечисления.ВидыСобытий.ЛичнаяВстреча и Кнопка.Имя<>"ЛичнаяВстреча" Тогда
			Если СторонниеЛица.Количество()>0 Тогда
				Ответ = Вопрос("На закладке ""Участники"" указаны участники встречи. 
								|При смене вида события табличные части будут очищены. 
								|Продолжить?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				Иначе
					СторонниеЛица.Очистить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
			
		ВидСобытия = Перечисления.ВидыСобытий[Кнопка.Имя];
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = УправлениеКонтактами.ПолучитьКартинкуНапоминания(ВидСобытия,ТипСобытия);
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	СформироватьСтрокуТипаВида();
	ДоступностьКнопокПочты();
	СоставЗакладокГлавнойПанелиФормы();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "ПодменюТипаСобытия" командной панели
// формы. Процедура устанавливает значение реквизита ТипСобытия.
// Вызов процедуры назначается программно
//
Процедура ДействияФормыДействиеУстановитьТипСобытия(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ТипСобытия = Перечисления.ВходящееИсходящееСобытие[Кнопка.Имя];
	КонецЕсли;
	
	Для каждого Пункт Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Кнопки Цикл
		Пункт.Картинка = УправлениеКонтактами.ПолучитьКартинкуНапоминания(Перечисления.ВидыСобытий[Пункт.Имя],ТипСобытия);
	КонецЦикла;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидовСобытия.Картинка = УправлениеКонтактами.ПолучитьКартинкуНапоминания(ВидСобытия,ТипСобытия);
	
	// Отобразить в заголовке формы вид операции.
	СформироватьСтрокуТипаВида();
	ДоступностьКнопокПочты();
	ДоступностьИсточникаИнформации();
	ОбновитьКонтактнуюИнформацию();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

// Обработчик события элемента 
// ДействияФормы.Файлы.
Процедура ДействияФормыФайлы(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;
	
	ОбязательныеОтборы = Новый Структура;

	Если ВидСобытия = Перечисления.ВидыСобытий.ЭлектронноеПисьмо И ТипСобытия = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
	
		ФормаФайлов.ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ФормаФайлов.ЭлементыФормы.ПанельЗакладок.Страницы.Файлы;
		ФормаФайлов.ЭлементыФормы.ПанельЗакладок.Страницы.Изображения.Видимость = Ложь;
		ОбязательныеОтборы.Вставить("ВидДанных",Перечисления.ВидыДополнительнойИнформацииОбъектов.Файл);
	
	Иначе

		ФормаФайлов.Изображения.Отбор.Объект.Использование                       = Истина;
		ФормаФайлов.Изображения.Отбор.Объект.Значение                            = Ссылка;
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = Ложь;
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость           = Ложь;
				
	КонецЕсли; 

	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры // ДействияФормыФайлы()

// Обработчик события элемента 
// ДействияФормы.НаписатьПисьмо.
Процедура ДействияФормыНаписатьПисьмо(Кнопка) Экспорт

	Перем ЗаписиКонтрагента;
	Перем ЗаписиКонтактногоЛица;
	Перем ЗаписиПрочихУчастников;
	
	Если НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить() Тогда
		
		Адрес = ОпределитьПолучателей();

		Если Адрес = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Адрес", Адрес[0]);
		СтруктураПараметров.Вставить("Представление", Адрес[1]);
		СтруктураПараметров.Вставить("Тема", ОписаниеСобытия);
		СтруктураПараметров.Вставить("Текст", СодержаниеСобытия);
		
		УправлениеЭлектроннойПочтой.ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(СтруктураПараметров);

	Иначе
		
		Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли; 
		
		ТаблицаПолучателей = ОпределитьПолучателейВстроенногоКлиента();
		
		СтруктураНовогоПисьма = Новый Структура("Основание", Ссылка);
		Если НЕ ПустаяСтрока(ОписаниеСобытия) Тогда
			СтруктураНовогоПисьма.Вставить("Тема", ОписаниеСобытия);
		КонецЕсли;
		
		Если ТаблицаПолучателей.Количество() = 1 Тогда
			СписокКому = Новый СписокЗначений;
			СписокКому.Добавить(ТаблицаПолучателей[0].Адрес, ?(ТипЗнч(ТаблицаПолучателей[0].Объект) = Тип("Строка"), ТаблицаПолучателей[0].Объект, ТаблицаПолучателей[0].Объект.Наименование));
			СтруктураНовогоПисьма.Вставить("Кому", СписокКому);
			АдрКнига = Неопределено;
		ИначеЕсли ТаблицаПолучателей.Количество() > 1 Тогда
			АдрКнига = Обработки.АдреснаяКнига.Создать();
			Для каждого СтрокаТаблицы Из ТаблицаПолучателей Цикл
				НоваяСтрока = АдрКнига.Кому.Добавить();
				НоваяСтрока.АдресЭлектроннойПочты = СтрокаТаблицы.Адрес;
				НоваяСтрока.Объект = СтрокаТаблицы.Объект;
				НоваяСтрока.ПредставлениеОбъекта = СтрокаТаблицы.Объект.Наименование;
			КонецЦикла; 
		КонецЕсли; 
		
		СтруктураПисьма = УправлениеЭлектроннойПочтой.НаписатьПисьмо(глЗначениеПеременной("глТекущийПользователь"),СтруктураНовогоПисьма,,, (ТаблицаПолучателей.Количество() > 0),,, Истина);
		Если ТипЗнч(СтруктураПисьма) = Тип("Структура") Тогда
			ФормаПисьма = СтруктураПисьма.Форма;
			Если АдрКнига <> Неопределено Тогда
				ФормаПисьма.ОткрытьАдреснуюКнигу("Кому", АдрКнига);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ДействияФормыНаписатьПисьмо()

// Обработчик события элемента ДействияФормы.СписокСобытийКонтрагента.
//
Процедура ДействияФормыСписокСобытийКонтрагента(Кнопка)
	
	ФормаСобытий = Документы.Событие.ПолучитьФорму("ФормаСписка", ЭтаФорма);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		ФормаСобытий.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		ФормаСобытий.Отбор.ДокументыПоКонтрагенту.Значение      = Контрагент;
		
		ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;
		
		ФормаСобытий.Открыть();
	
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Строка") Тогда
		
		ФормаСобытий.Отбор.Контрагент.Использование = Истина;
		ФормаСобытий.Отбор.Контрагент.Значение      = Контрагент;
		
		ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		
		ФормаСобытий.Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры // ДействияФормыСписокСобытийКонтрагента()

// Обработчик события элемента ДействияФормы.ДокументыКонтрагента.
//
Процедура ДействияФормыДокументыКонтрагента(Кнопка)
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму("ФормаСписка", ЭтаФорма);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение      = Контрагент;
		
		ФормаЖурнала.ЭлементыФормы.ЖурналДокументовСписок.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;
		
		ФормаЖурнала.Открыть();
		
	ИначеЕсли ТипЗнч(Контрагент) = Тип("Строка") Тогда
		
		ФормаЖурнала.Отбор.Контрагент.Использование = Истина;
		ФормаЖурнала.Отбор.Контрагент.Значение      = Контрагент;
		
		ФормаЖурнала.ЭлементыФормы.ЖурналДокументовСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		
		ФормаЖурнала.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДокументыКонтрагента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента формы ВидОбъекта.
//
Процедура ВидОбъектаПриИзменении(Элемент)
	
	ПриИзмененииВидаОбъекта();
	
КонецПроцедуры // ВидОбъектаПриИзменении()

// Обработчик события Очистка элемента формы ВидОбъекта.
//
Процедура ВидОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидОбъектаОчистка()

// Обработчик события НачалоВыбора элемента формы Основание.
//
Процедура ОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Элемент.Значение = Неопределено Тогда
		
		СписокТиповДокументов = Новый СписокЗначений;

		Для каждого ТипДокумента Из Элемент.ТипЗначения.Типы() Цикл
			ДокументСсылка = Новый(ТипДокумента);
			СписокТиповДокументов.Добавить(ДокументСсылка.Метаданные().Имя, ДокументСсылка.Метаданные().Синоним);
		КонецЦикла;

		Если Элемент.Значение <> Неопределено Тогда
			НачальноеЗначениеСписка = СписокТиповДокументов.НайтиПоЗначению(Элемент.Значение.Метаданные().Имя);
		КонецЕсли; 

		СписокТиповДокументов.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
		
		ВыбранноеЗначение = ЭтаФорма.ВыбратьИзСписка(СписокТиповДокументов, Элемент, НачальноеЗначениеСписка);
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ФормаВыбора = Документы[ВыбранноеЗначение.Значение].ПолучитьФормуВыбора(, Элемент);

	Иначе

		ФормаВыбора = Документы[Элемент.Значение.Метаданные().Имя].ПолучитьФормуВыбора(, Элемент);
		
	КонецЕсли; 
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ОснованиеНачалоВыбора()

// Обработчик события ПриИзменении элемента формы Территория.
//
Процедура ТерриторияПриИзменении(Элемент)
	
	Если НЕ Территория.Пустая() И Не Помещение.Пустая() И Помещение.Владелец <> Территория Тогда
		Помещение = Справочники.Помещения.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры // ТерриторияПриИзменении()

// Обработчик события НачалоВыбора элемента формы Помещение.
//
Процедура ПомещениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Территория.Пустая() Тогда
		ВвестиЗначение(Территория, "Выберите территорию");
	КонецЕсли;
	
	Если НЕ Территория.Пустая() Тогда
		
		ФормаВыбораПомещения = Справочники.Помещения.ПолучитьФормуСписка("ФормаВыбора", ЭтаФорма);
		
		ФормаВыбораПомещения.РежимВыбора                                                         = Истина;
		ФормаВыбораПомещения.СправочникСписок.Отбор.Владелец.Значение                            = Территория;
		ФормаВыбораПомещения.СправочникСписок.Отбор.Владелец.Использование                       = Истина;
		ФормаВыбораПомещения.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
		
		ПолученноеЗначение = ФормаВыбораПомещения.ОткрытьМодально();

		Если ТипЗнч(ПолученноеЗначение) = Тип("СправочникСсылка.Помещения") И НЕ ПолученноеЗначение.Пустая() Тогда
			Помещение = ПолученноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПомещениеНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ ВРЕМЁН СОБЫТИЯ

// Обработчик события ПриИзменении элемента формы НачалоСобытия.
//
Процедура НачалоСобытияПриИзменении(Элемент)
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры // НачалоСобытияПриИзменении()

// Обработчик события НачалоВыбора элемента формы НачалоСобытия.
//
Процедура НачалоСобытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // НачалоСобытияНачалоВыбора()

// Обработчик события НачалоВыбора элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ОкончаниеСобытияНачалоВыбора()

// Обработчик события ОбработкаВыбора элемента формы НачалоСобытия.
//
Процедура НачалоСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры // НачалоСобытияОбработкаВыбора()

// Обработчик события ОбработкаВыбора элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ОкончаниеСобытияОбработкаВыбора()

// Обработчик события НачалоВыбораИзСписка элемента формы НачалоСобытия.
//
Процедура НачалоСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактами.ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
	ИзменениеНачалаСобытия(Элемент);
	
КонецПроцедуры // НачалоСобытияНачалоВыбораИзСписка()

// Обработчик события НачалоВыбораИзСписка элемента формы ОкончаниеСобытия.
//
Процедура ОкончаниеСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактами.ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ОкончаниеСобытияНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ КОНТРАГЕНТА СОБЫТИЯ

// Обработчик события ПриИзменении элемента формы Контрагент.
//
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			КонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		Иначе
			Если ТипЗнч(КонтактноеЛицо) = Тип("Строка") ИЛИ (ТипЗнч(КонтактноеЛицо) <> Тип("Строка") И (НЕ ЗначениеЗаполнено(КонтактноеЛицо) ИЛИ КонтактноеЛицо.Владелец <> Контрагент)) Тогда
				КонтактноеЛицо = Контрагент.ОсновноеКонтактноеЛицо;
			КонецЕсли; 
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсточникИнформацииПриОбращении) И ЗначениеЗаполнено(Контрагент.ИсточникИнформацииПриОбращении) Тогда
			ИсточникИнформацииПриОбращении = Справочники.ИсточникиИнформацииПриОбращенииПокупателей.ПустаяСсылка();
		КонецЕсли; 
	Иначе
		Если ТипЗнч(КонтактноеЛицо) <> Тип("Строка") Тогда
			КонтактноеЛицо = "";
		КонецЕсли;
		ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента = Контрагент;
	КонецЕсли; 
	
	ДоступностьИсточникаИнформации();
	
	ОбновитьКонтактнуюИнформацию();
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент = Элемент.Значение;
	
КонецПроцедуры // КонтрагентПриИзменении()

// Обработчик события НачалоВыбора элемента формы Контрагент.
//
Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Открыть();
	
	КонецЕсли; 
	
КонецПроцедуры // КонтрагентНачалоВыбора()

// Обработчик события Открытие элемента формы Контрагент.
//
Процедура КонтрагентОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
		ОбновлятьДанные = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма).ОткрытьМодально();
		Если ОбновлятьДанные = Истина Тогда
			Модифицированность = Истина;
			Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
			КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
		КонецЕсли; 
		ОбновитьКонтактнуюИнформацию();
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ФормаКонтрагента = Элемент.Значение.ПолучитьФорму();
		ФормаКонтрагента.ЭлементыФормы.Панель.ТекущаяСтраница = ФормаКонтрагента.ЭлементыФормы.Панель.Страницы.Контакты;
		ФормаКонтрагента.Открыть();
				
	КонецЕсли; 
	
КонецПроцедуры // КонтрагентОткрытие()

// Обработчик события ОкончаниеВводаТекста элемента формы Контрагент.
//
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РезультатЗапроса = ПроцедурыПоискаПоСтроке.ПолучитьРезультатЗапросаАвтоподбора(Текст, Новый Структура, Тип("СправочникСсылка.Контрагенты"), 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.Контрагенты"), мПоискПоСтрокеКонтрагента, мТекстПоискаПоСтрокеКонтрагента, мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент, Ложь);
		Возврат;
	КонецЕсли; 
	
	УправлениеКонтактами.РегистрироватьНовогоКонтрагента(Элемент, Текст, Значение, СтандартнаяОбработка, мПоискПоСтрокеКонтрагента, мТекстПоискаПоСтрокеКонтрагента, мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент, ЭтаФорма, Контрагент, КонтактноеЛицо, Модифицированность, ДанныеНезарегистрированногоКонтрагента);
			
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры // КонтрагентОкончаниеВводаТекста()

// Обработчик события АвтоПодборТекста элемента формы СторонниеЛица.Контрагент.
//
Процедура КонтрагентАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура, Тип("СправочникСсылка.Контрагенты"));
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры // КонтрагентАвтоПодборТекста()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ КОНТАКТНОЕ ЛИЦО СОБЫТИЯ

// Обработчик события НачалоВыбора элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		УправлениеКонтактами.НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Контрагент);
	КонецЕсли; 
	
КонецПроцедуры // КонтактноеЛицоКонтрагентаНачалоВыбора()

// Обработчик события ПриИзменении элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаПриИзменении(Элемент)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
					Элемент.Значение = "";
				Иначе
					Элемент.Значение = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
				КонецЕсли;
				ОбновитьКонтактнуюИнформацию();
				Возврат;
			КонецЕсли; 
		ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
			Элемент.Значение = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		Иначе
			Элемент.Значение = Справочники.ФизическиеЛица.ПустаяСсылка();
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов") Тогда
			
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Контрагент = Элемент.Значение.Владелец;
			КонецЕсли;
			
		Иначе
			Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
				Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
					Элемент.Значение = "";
					ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = "";
				Иначе
					ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица = Элемент.Значение;
				КонецЕсли; 
			Иначе
				Элемент.Значение = Контрагент.ОсновноеКонтактноеЛицо;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	ОбновитьКонтактнуюИнформацию();
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо = Элемент.Значение;
	
КонецПроцедуры // КонтактноеЛицоКонтрагентаПриИзменении()

// Обработчик события Очистка элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элемент.Значение = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		Иначе
			Элемент.Значение = "";
			ФИОКонтактногоЛица = "";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // КонтактноеЛицоКонтрагентаОчистка()

// Обработчик события Открытие элемента формы КонтактноеЛицоКонтрагента.
//
Процедура КонтактноеЛицоКонтрагентаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			СтандартнаяОбработка = Ложь;
			ОбработкаРедактирования = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
			ОбработкаРедактирования.Запись = ДанныеНезарегистрированногоКонтрагента;
			ОбновлятьДанные = ОбработкаРедактирования.ПолучитьФорму(, ЭтаФорма).ОткрытьМодально();
			Если ОбновлятьДанные = Истина Тогда
				Модифицированность = Истина;
				Контрагент     = ДанныеНезарегистрированногоКонтрагента.НаименованиеКонтрагента;
				КонтактноеЛицо = ДанныеНезарегистрированногоКонтрагента.ФИОКонтактногоЛица;
			КонецЕсли; 
			ОбновитьКонтактнуюИнформацию();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // КонтактноеЛицоКонтрагентаОткрытие()

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактноеЛицо.
//
Процедура КонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мПоискПоСтрокеКонтактногоЛица, мТекстПоискаПоСтрокеКонтактногоЛица, мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо, Ложь);
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") ИЛИ ТипЗнч(Контрагент) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли; 
	
	СтруктураПараметров = Новый Структура;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтруктураПараметров.Вставить("Владелец", Контрагент);
	КонецЕсли; 
	РезультатЗапроса = ПроцедурыПоискаПоСтроке.ПолучитьРезультатЗапросаАвтоподбора(Текст, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов"), 1);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов"), мПоискПоСтрокеКонтактногоЛица, мТекстПоискаПоСтрокеКонтактногоЛица, мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо, Ложь);
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.Значение) <> Тип("Строка") Тогда
	
		ТекстВопроса = "Контактное лицо не найдено." + Символы.ПС + "Зарегистрировать новое контактное лицо?";
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				мПоискПоСтрокеКонтактногоЛица = Истина;
				мТекстПоискаПоСтрокеКонтактногоЛица = Текст;
			Иначе
				Значение = мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо;
			КонецЕсли; 
			Возврат;
		КонецЕсли;
		
		НовоеКонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.СоздатьЭлемент();
		НовоеКонтактноеЛицо.Наименование       = Текст;
		НовоеКонтактноеЛицо.Владелец = Контрагент;
		ФормаКонтактногоЛица = НовоеКонтактноеЛицо.ПолучитьФорму(, ЭтаФорма);
		ФормаКонтактногоЛица.ОткрытьМодально();
		
		Если НовоеКонтактноеЛицо.ЭтоНовый() Тогда
			мПоискПоСтрокеКонтактногоЛица = Истина;
			мТекстПоискаПоСтрокеКонтактногоЛица = Текст;
			Возврат;
		КонецЕсли;
		
		Значение = НовоеКонтактноеЛицо.Ссылка;
		
	Иначе
		
		Значение = Текст;
		
	КонецЕсли;
	
	ОбновитьКонтактнуюИнформацию();
	
КонецПроцедуры // КонтактноеЛицоОкончаниеВводаТекста()

// Обработчик события АвтоПодборТекста элемента формы СторонниеЛица.КонтактноеЛицо.
//
Процедура КонтактноеЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураПараметров = Новый Структура;
			Если ЗначениеЗаполнено(Контрагент) Тогда
				СтруктураПараметров.Вставить("Владелец", Контрагент);
			КонецЕсли; 
			ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов"));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры // КонтактноеЛицоАвтоПодборТекста()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ ОБСЛУЖИВАНИЯ СТОРОННИХ ЛИЦ СОБЫТИЯ

// Обработчик события НачалоВыбора элемента формы СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		УправлениеКонтактами.НачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент);
	КонецЕсли; 
	
КонецПроцедуры // СторонниеЛицаЛицоНачалоВыбора()

// Обработчик события ПриИзменении элемента формы СторонниеЛица.Контрагент.
//
Процедура СторонниеЛицаКонтрагентПриИзменении(Элемент)

	Если НЕ Элемент.Значение.Пустая() И ЭлементыФормы.СторонниеЛица.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо) И ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо.ОбъектВладелец <> Элемент.Значение Тогда
		ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры // СторонниеЛицаКонтрагентПриИзменении()

// Обработчик события Очистка элемента формы СторонниеЛица.Контрагент.
//
Процедура СторонниеЛицаКонтрагентОчистка(Элемент, СтандартнаяОбработка)

	Если ЭлементыФормы.СторонниеЛица.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Лицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры // СторонниеЛицаКонтрагентОчистка()

// Обработчик события ПриНачалеРедактирования элемента формы СторонниеЛица.
//
Процедура СторонниеЛицаПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И Элемент.ТекущиеДанные <> Неопределено Тогда
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
            Элемент.ТекущиеДанные.Лицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		Иначе
			Элемент.ТекущиеДанные.Лицо = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент И НЕ Контрагент.Пустая() И Элемент.ТекущиеДанные.Контрагент.Пустая() Тогда
			Элемент.ТекущиеДанные.Контрагент = Контрагент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СторонниеЛицаПриНачалеРедактирования()

// Обработчик события ПриИзменении элемента формы СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			Элемент.Значение = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		Иначе
			Элемент.Значение = Справочники.КонтактныеЛица.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ЗначениеЗаполнено(Элемент.Значение) И ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент <> Элемент.Значение.Владелец Тогда
			ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент = Элемент.Значение.Владелец;
		КонецЕсли;
	КонецЕсли;
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицоТЧ = Элемент.Значение;
	
КонецПроцедуры // СторонниеЛицаЛицоПриИзменении()

// Обработчик события АвтоПодборТекста элемента формы СторонниеЛица.СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
		Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
			Если ЗначениеЗаполнено(ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент) Тогда
				СтруктураПараметров.Вставить("Владелец", ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент);
			КонецЕсли; 
		КонецЕсли; 
		
		Если ВидОбъекта <> Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
			ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СтруктураПараметров, Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов"));
		КонецЕсли;
	
КонецПроцедуры // СторонниеЛицаЛицоАвтоПодборТекста()

// Обработчик события ОкончаниеВводаТекста элемента формы СторонниеЛица.СторонниеЛица.Лицо.
//
Процедура СторонниеЛицаЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтруктураПараметров = Новый Структура;
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Если ЗначениеЗаполнено(ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент) Тогда
			СтруктураПараметров.Вставить("Владелец", ЭлементыФормы.СторонниеЛица.ТекущиеДанные.Контрагент);
		КонецЕсли; 
	КонецЕсли; 
	
	Если ВидОбъекта = Перечисления.ВидыОбъектовСобытия.ПрочиеКонтактныеЛица Тогда
		ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛица"), мПоискПоСтрокеКонтактногоЛицаТЧ, мТекстПоискаПоСтрокеКонтактногоЛицаТЧ, мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицоТЧ, Ложь)
	Иначе
		ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СтруктураПараметров, ЭтаФорма, Тип("СправочникСсылка.КонтактныеЛицаКонтрагентов"), мПоискПоСтрокеКонтактногоЛицаТЧ, мТекстПоискаПоСтрокеКонтактногоЛицаТЧ, мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицоТЧ, Ложь)
	КонецЕсли;
		
КонецПроцедуры // СторонниеЛицаЛицоОкончаниеВводаТекста()

// Обработчик события ПередНачаломИзменения элемента формы СторонниеЛица.СторонниеЛица.
//
Процедура СторонниеЛицаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицоТЧ = Элемент.ТекущиеДанные.Лицо;
	КонецЕсли; 
	
КонецПроцедуры // СторонниеЛицаПередНачаломИзменения()

// Обработчик события "ВыборИзСписка" элемента формы "ОписаниеСобытия"
// "Тема"
//
Процедура ОписаниеСобытияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мТекущееОписаниеСобытия = ОписаниеСобытия;
	Запрос = Новый Запрос;    
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
	|	Событие.ОписаниеСобытия,
	|	КОЛИЧЕСТВО(Событие.Ссылка) КАК Количество
	|ИЗ
	|	Документ.Событие КАК Событие
	|
	|СГРУППИРОВАТЬ ПО
	|	Событие.ОписаниеСобытия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОписаниеСобытия");
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	ОписаниеСобытия = ВыбратьИзСписка(Список,Элемент);
	
	Если (мТекущееОписаниеСобытия <> "")
		И (СтрДлина(СокрЛП(ОписаниеСобытия)) = 0) Тогда
		
		ОписаниеСобытия = мТекущееОписаниеСобытия;
		мТекущееОписаниеСобытия = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОписаниеСобытияНачалоВыбораИзСписка()

// Процедура обработчик изменения значения "ОписаниеСобытия"
// "Тема"
//
Процедура ОписаниеСобытияПриИзменении(Элемент)
	
	Если (мТекущееОписаниеСобытия <> "")
		И (ОписаниеСобытия = "") Тогда
		
		ОписаниеСобытия = мТекущееОписаниеСобытия;
		мТекущееОписаниеСобытия = "";
		
	КонецЕсли;
	
КонецПроцедуры // ОписаниеСобытияПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура вызывается при выборе пункта подменю "Источники информации по контрагенту" меню "Перейти".
// командной панели формы. Процедура показывает список источников информации по контрагенту события.
//
Процедура ДействияФормыИсточникиИнформацииПоКонтрагенту(Кнопка)
	
	Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма = РегистрыСведений.ИсточникИнформацииПриОбращении.ПолучитьФормуСписка();
		Форма.Отбор.Контрагент.Значение = Контрагент;
		Форма.Отбор.Контрагент.Использование = Истина;
		Форма.Открыть();
	ИначеЕсли ВидОбъекта = Перечисления.ВидыОбъектовСобытия.Контрагент Тогда
		Предупреждение("Не выбран контрагент");
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыИсточникиИнформацииПоКонтрагенту()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура обработчик нажатия на кнопку "Перечитать"
//
Процедура ДействияФормыПеречитать(Кнопка)
	
	Если НЕ ЭтоНовый() Тогда
		// Контактная информация
		Если Модифицированность Тогда
			ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
				
				УправлениеКонтактами.ПрочитатьДанныеНезарегистрированногоКонтрагента(Ссылка, ДанныеНезарегистрированногоКонтрагента);
				ЭтотОбъект.Прочитать();
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьКонтактнуюИнформацию();
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик изменения значения "ГруппаСобытия"
//
Процедура ГруппаСобытияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ГруппаСобытия) Тогда
		
		Если НЕ ЗначениеЗаполнено(ОписаниеСобытия) И ЗначениеЗаполнено(ГруппаСобытия.ОписаниеСобытия) Тогда
			ОписаниеСобытия = ГруппаСобытия.ОписаниеСобытия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГруппаСобытия.ВидОбъекта) Тогда
			ВидОбъекта = ГруппаСобытия.ВидОбъекта;
			ПриИзмененииВидаОбъекта();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ГруппаСобытияПриИзменении()

Процедура ДействияФормыНоваяЗадача(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		РаботаСДиалогами.ПроверитьЗадачиПоОбъекту(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСписокЗадач(Кнопка)
	
	РаботаСДиалогами.ОткрытьЗадачиТекущегоПользователя(Ссылка);
	
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры
 
мЧас = 0;
мМинута = 0;

мТекущееОписаниеСобытия = "";

мНачалоСобытия = Неопределено;

мПоискПоСтрокеКонтрагента = Ложь;
мТекстПоискаПоСтрокеКонтрагента = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтрагент = Неопределено;

мПоискПоСтрокеКонтактногоЛица = Ложь;
мТекстПоискаПоСтрокеКонтактногоЛица = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицо = Неопределено;

мПоискПоСтрокеКонтактногоЛицаТЧ = Ложь;
мТекстПоискаПоСтрокеКонтактногоЛицаТЧ = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеКонтактноеЛицоТЧ = Неопределено;
