////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мКартинкаСерийныеНомера, мКартинкаНаборКомплект;

Перем мТерминалы;

Перем мНоваяСтрока;

Перем мСтароеЗначениеДокЕГАИС Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении количества в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииКоличестваТовары(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииКоличестваТовары()

// Процедура выполняет необходимые действия перед удалением строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//  Отказ - флаг отказа.
//
Процедура ПередУдалениемТовары(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПередУдалениемТовары()

// Процедура выполняет необходимые действия после удаления строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПослеУдаленияТовары(Элемент)

	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;

КонецПроцедуры // ПослеУдаленияТовары()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СписокЗапросов.Добавить("ОстаткиНТТ", "По остаткам и ценам номенклатуры в торговой точке");
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		// Склад - розничная торговая точка
		СписокЗапросов.Добавить("РасходОстаткиЦеныРозничнаяТочка", "По остаткам и ценам номенклатуры в розничной точке");
		СписокЗапросов.Добавить("РасходЦеныРозничнаяТочка", "По ценам номенклатуры в розничной точке");
	Иначе // Склад - оптовая торговая точка
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ТипЦенДляЗапроса    = Склад.ТипЦенРозничнойТорговли;
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
		ТипЦенДляЗапроса    = ТипЦен;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ТипЦенДляЗапроса    = ТипЦен;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",             ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",                    Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен",                   ТипЦенДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация",              Организация);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",       Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",               Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен",      СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",                 ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику",  Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",                ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",          мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги",          Истина);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж",            УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия, ВыборИзСправочника;
	
	ЗначениеВыбора.Свойство("ВыборИзСправочника", ВыборИзСправочника);
	ВыборИзСправочника = ВыборИзСправочника = Истина;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Характеристика",      Характеристика);
	ЗначениеВыбора.Свойство("Серия",               Серия);

	Если НЕ ЗначениеВыбора.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти) Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	Если ВыборИзСправочника Тогда
		СтрокаТабличнойЧасти = Неопределено;
		ЗначениеВыбора.Свойство("ТекущиеДанные",СтрокаТабличнойЧасти);
	Иначе
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры",          Серия);

		// Пересчитаем цену в валюту регламентированного учета
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
		Цена           = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

		Если Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СтруктураОтбора.Вставить("Цена",       Цена);
		КонецЕсли;
		Если ЕстьСкладВТабличнойЧасти
		   И ЗначениеЗаполнено(Склад) Тогда
			СтруктураОтбора.Вставить("Склад", Склад);
		КонецЕсли;

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Если ВыборИзСправочника Тогда
			ОбработкаТабличныхЧастей.ОбновитьДанныеСтроки(СтрокаТабличнойЧасти,ЗначениеВыбора);
			ТоварыПриНачалеРедактирования(ЭлементыФормы.Товары, мНоваяСтрока);
			ТоварыНоменклатураПриИзменении(ЗначениеВыбора["ВладельцыФормы"]["Элемент"]);
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Склад                      = Склад;
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.Цена                       = Цена;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		Если ЗначениеЗаполнено(Цена) Тогда
			Если СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
				Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(СтрокаТабличнойЧасти.Номенклатура, Организация, Дата, мОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
				КонецЕсли;
			Иначе
				Если мРозничнаяТорговляОблагаетсяЕНВД <> Неопределено
				   И мРозничнаяТорговляОблагаетсяЕНВД Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Иначе
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
				КонецЕсли;
			КонецЕсли;

			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
				ЦенаВключаетНДС = ТипЦен.ЦенаВключаетНДС;
			Иначе
				ЦенаВключаетНДС = Истина;
			КонецЕсли;

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
							Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
							ЦенаВключаетНДС,
							УчитыватьНДС,
							СуммаВключаетНДС,
							УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		// Ввод состава набора
		СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	
	Если НЕ ВыборИзСправочника Тогда
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	КонецЕсли;
	
	
	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	Если НЕ мУказаниеСкладовВТЧ Тогда
		ТекСклад = Склад;
	Иначе
		ТекСклад = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекСклад) Тогда
		Если ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТипЦен);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекСклад,
												мВалютаРегламентированногоУчета);
		ИначеЕсли ТекСклад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
												мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета,
												ТекСклад.ТипЦенРозничнойТорговли);
		КонецЕсли;
	КонецЕсли;

	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);


КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении склада 
// или номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для Товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Склад        - ссылка на справочник, выбранный склад.
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Склад, Номенклатура)

	РозничныйСпособВыбораЦены = (ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
	                             И (Не Номенклатура.Услуга)
	                             И (ЗначениеЗаполнено(Номенклатура)));

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;

	ЭлементУправления.КнопкаСпискаВыбора = РозничныйСпособВыбораЦены;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	ВидимостьКассыККМ = (ВидОперации        = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах);
	ЭлементыФормы.КассаККМ.Видимость        = ВидимостьКассыККМ;
	ЭлементыФормы.НадписьКассаККМ.Видимость = ВидимостьКассыККМ;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Склад, мУказаниеСкладовВТЧ);

	// Установка видимости реквизита "Проект".
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");

	ИнтеграцияЕГАИСПереопределяемый.УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));

	ЭлементыФормы.ВсегоОплатаПлатежнымиКартами.Значение = ОбщегоНазначения.ФорматСумм(ОплатаПлатежнымиКартами.Итог("Сумма"));
	ЭлементыФормы.НадписьВсегоОплатаПлатежнымиКартами.Заголовок = "Всего, " + СокрЛП(мВалютаРегламентированногоУчета) +":";

	ЭлементыФормы.ВсегоТорговаяУступка.Значение = ОбщегоНазначения.ФорматСумм(ОплатаПлатежнымиКартами.Итог("СуммаТорговойУступки"));
	ЭлементыФормы.НадписьВсегоТорговаяУступка.Заголовок = "Торговая уступка, " + СокрЛП(мВалютаРегламентированногоУчета) +":";

	ЭлементыФормы.ВсегоОплатаБанковскимиКредитами.Значение = ОбщегоНазначения.ФорматСумм(ОплатаБанковскимиКредитами.Итог("Сумма"));
	ЭлементыФормы.НадписьВсегоОплатаБанковскимиКредитами.Заголовок = "Всего, " + СокрЛП(мВалютаРегламентированногоУчета) +":";

	ЭлементыФормы.ВсегоСуммаКомиссии.Значение = ОбщегоНазначения.ФорматСумм(ОплатаБанковскимиКредитами.Итог("СуммаБанковскойКомиссии"));
	ЭлементыФормы.НадписьВсегоСуммаКомиссии.Заголовок = "Сумма комиссии, " + СокрЛП(мВалютаРегламентированногоУчета) +":";

	ВременнаяСтрока = "";

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Цены АТТ: " + Склад +".";
	Иначе
		Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ТипЦен +".";
		Иначе
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;
	ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаРегламентированногоУчета) +"):";

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	Если ЗначениеЗаполнено(ПараметрОснование)
	   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ИнвентаризацияТоваровНаСкладе") Тогда

		ФлагСкладНТТ = (ЗначениеЗаполнено(ПараметрОснование.Склад)
		                И ПараметрОснование.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ);

		Если НЕ ФлагСкладНТТ Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Документ может быть введен по инвентаризации проведенной в НТТ! Заполнение невозможно.",);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	//Видимость автоматических скидок.
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
	 Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		РассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		РассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = РассчитыватьАвтоматическиеСкидки;
	мКолонкиТовары.УсловиеАвтоматическойСкидки.Видимость = РассчитыватьАвтоматическиеСкидки;
	мКолонкиТовары.ЗначениеУсловияАвтоматическойСкидки.Видимость = РассчитыватьАвтоматическиеСкидки;

	ЭлементыФормы.ОсновнаяПанель.Страницы.ПродажиПоДисконтнымКартам.Видимость = ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте;

	ИспользоватьЭквайринг = Константы.ИспользоватьОплатуПлатежнымиКартами.Получить();
	ИспользоватьБанковскиеКредиты = Константы.ИспользоватьОплатуБанковскимиКредитами.Получить();

	ЭлементыФормы.ОсновнаяПанель.Страницы.ОплатаПлатежнымиКартами.Видимость = ИспользоватьЭквайринг;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ОплатаБанковскимиКредитами.Видимость = ИспользоватьБанковскиеКредиты;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПродажиПоДисконтнымКартам.Видимость = ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	ИнициализироватьДокумент(ПараметрОбъектКопирования, ПараметрОснование);
	
	Если Не ЭтоНовый() Тогда

		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	РаботаСДиалогами.ОбработатьПризнакОтраженияВреглУчетеДляФормы(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Склад");
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;	

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, , ЭлементыФормы.Склад, "Склад", мУказаниеСкладовВТЧ);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",                     "Товары");
	Страницы.Добавить("ОплатаПлатежнымиКартами",    "ОплатаПлатежнымиКартами");
	Страницы.Добавить("ОплатаБанковскимиКредитами", "ОплатаБанковскимиКредитами");
	Страницы.Добавить("ПродажиПоДисконтнымКартам",  "ПродажиПоДисконтнымКартам");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	РаботаСДиалогами.УстановитьДоступностьМенюПроверить(ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);
	
	ИнформацияОПрочейБезналичнойОплате = "";
	Если ЗначениеЗаполнено(ПрочаяБезналичнаяОплата)  Тогда
		ИнформацияОПрочейБезналичнойОплате = "Прочая безналичная оплата - " + ОбщегоНазначения.ФорматСумм(ПрочаяБезналичнаяОплата, мВалютаРегламентированногоУчета);
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	Если ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ЭлементыФормы.ДоговорЭквайринга.АвтоОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.ДоговорЭквайринга.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ДоговорЭквайринга.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ИнтеграцияЕГАИСПереопределяемый.ОбработатьОповещения(ЭтаФорма, ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

//Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры //ТоварыПеретаскивание()

//Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры //ТоварыПроверкаПеретаскивания()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, мВалютаРегламентированногоУчета,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, , , УсловиеПродаж, Склад);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                мВалютаРегламентированногоУчета, Номер,
	                                                мУказаниеСкладовВТЧ,
	                                                ТипЦен, , , УсловиеПродаж, Склад);

	Если ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах[Кнопка.Имя];
	КонецЕсли;

	ОчищатьСклад = Ложь;
	МассивСтрокДляИзменения = Новый Массив;
	СпрашиватьПроСклад = Ложь;
	Если НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		Если ЗначениеЗаполнено(Склад) И Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СпрашиватьПроСклад = Истина;
		КонецЕсли;

		Если мУказаниеСкладовВТЧ Тогда
			Для каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.Склад)
				   И СтрокаТоваров.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
					МассивСтрокДляИзменения.Добавить(СтрокаТоваров);

					СпрашиватьПроСклад = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НачалоВопроса = "При данном виде операции в качестве склада не может быть выбрана НТТ!"
	Иначе
		Если ЗначениеЗаполнено(Склад) И Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
			СпрашиватьПроСклад = Истина;
		КонецЕсли;

		Если мУказаниеСкладовВТЧ Тогда
			Для каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.Склад)
				   И СтрокаТоваров.Склад.ВидСклада <> Перечисления.ВидыСкладов.НТТ Тогда
					МассивСтрокДляИзменения.Добавить(СтрокаТоваров);

					СпрашиватьПроСклад = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		НачалоВопроса = "При данном виде операции в качестве склада может быть выбрана только НТТ!"
	КонецЕсли;

	Если СпрашиватьПроСклад Тогда
		Ответ = Вопрос(НачалоВопроса + Символы.ПС + "Очистить склад?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчищатьСклад = Истина;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах
	   И УчитыватьНДС
	   И Не СуммаВключаетНДС Тогда
		Если Товары.Итог("Сумма") = 0 Тогда
			СуммаВключаетНДС = Истина;
		Иначе
			Ответ = Вопрос("Для вида операции ""НТТ"" должен быть установлен флаг ""Сумма вкл. НДС""." + Символы.ПС + "Установить флаг и пересчитать цены?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если Не ОткрытьФормуЦеныИВалюта(Истина) Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОчищатьСклад Тогда
		Склад = Неопределено;
	КонецЕсли;

	Если МассивСтрокДляИзменения.Количество() > 0 Тогда
		Для каждого СтрокаМассива из МассивСтрокДляИзменения Цикл
			СтрокаМассива.Склад = Неопределено;
		КонецЦикла;
	КонецЕсли;

	Если НовыйВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		ИнвентаризацияТоваровНаСкладе = Неопределено;
	Иначе
		КассаККМ = Неопределено;
	КонецЕсли;

	ВидОперации = НовыйВидОперации;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации(Кнопка)

	ДействиеЗаполнитьПоИнвентаризации();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	ОткрытьФормуЦеныИВалюта(Ложь);

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМожноМенятьЦенуВДокументе = мМожноМенятьЦенуВДокументе;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Записать();
		
		НаборТовары = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
		
		НаборТовары = РегистрыНакопления.ТоварыВРознице.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
		
		НаборТовары = РегистрыНакопления.ТоварыВНТТ.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
	   И ЗначениеЗаполнено(Организация)
	   И КассаККМ.Владелец <> Организация Тогда
		КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	КонецЕсли;

	УстановитьВидимость();
	РаботаСДиалогами.ОбработатьПризнакОтраженияВреглУчетеДляФормы(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Склад) Тогда
		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Документы.ИнвентаризацияТоваровНаСкладе.ПолучитьФормуВыбора(,Элемент,);

		ФормаВыбора.ДокументСписок.Отбор.Склад.Значение = Склад;
		ФормаВыбора.ДокументСписок.Отбор.Склад.Использование = Истина;

		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ИнвентаризацияТоваровНаСкладе".
//
Процедура ИнвентаризацияТоваровНаСкладеПриИзменении(Элемент)

	ПриИзмененииИнвентаризацииТоваровНаСкладе();
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Склад".
//
Процедура СкладПриИзменении(Элемент)

	ПриИзмененииСклада();	
	УстановитьВидимость();

КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	мСтароеЗначениеСклада = Склад;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах Тогда
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары". Заполняет колонку "склад" значением по умолчанию.
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	мНоваяСтрока = НоваяСтрока;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// В новой строке будем заполнять склад.
	Если НоваяСтрока Тогда               
		ЗаполнитьСкладВПозицииТЧТовары(СтрокаТабличнойЧасти);
	КонецЕсли;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Склад, СтрокаТабличнойЧасти.Номенклатура);
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ПередУдалениемТовары(Элемент, Отказ);

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	ПослеУдаленияТовары(Элемент);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

	Если ДанныеСтроки.Номенклатура.Услуга Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода склада
// в строке табличной части "Товары".
//
Процедура ТоварыСкладПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		Если СтрокаТабличнойЧасти.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			Предупреждение("НТТ не может быть выбрана, если НДС не включается в сумму!");
			СтрокаТабличнойЧасти.Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	ПриИзмененииНоменклатурыТоваровВнутр(СтрокаТабличнойЧасти);
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Склад, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода склада
// в строке табличной части "Товары".
//
Процедура ТоварыСкладОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	// Если выбрали склад, то сделаем его текущим для подстановки в новые строки.
	// Склад все таки надо выбрать.
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Предупреждение("Не выбран склад");
		СтандартнаяОбработка = Ложь; // отказ от выбора.
	Иначе

		УстановитьСвойстваПоляВводаЦены(ВыбранноеЗначение, ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;

КонецПроцедуры // ТоварыСкладКомпанииОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Склад, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Не выбран склад!"); 
			Возврат;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Не выбрана позиция номенклатуры!"); 
			Возврат;
		КонецЕсли;

		Элемент.СписокВыбора = УправлениеРозничнойТорговлей.СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
		                                                      СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                      СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                                      Склад, мВалютаРегламентированногоУчета,
		                                                      Дата, мВалютаРегламентированногоУчета,
		                                                      1, 1, УчитыватьНДС, СуммаВключаетНДС,
		                                                      УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличестваТовары(Элемент);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина, ,истина,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "УсловиеАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыУсловиеАвтоматическойСкидкиПриИзменении(Элемент)

	Если Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ВидыОплатЧекаККМ") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ИнформационныеКарты.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ВидыДисконтныхКарт") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ВидыДисконтныхКарт.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("Число") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыУсловиеАвтоматическойСкидкиПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "ЗначениеУсловияАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыЗначениеУсловияАвтоматическойСкидкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		УправлениеРозничнойТорговлей.НачалоВыбораИнформационнойКарты(Элемент, Перечисления.ТипыИнформационныхКарт.Дисконтная, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыЗначениеУсловияАвтоматическойСкидкиНачалоВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля "УсловиеАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыУсловиеАвтоматическойСкидкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт);

КонецПроцедуры // ТоварыУсловиеАвтоматическойСкидкиНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля процента автоматических скидок
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентАвтоматическихСкидокПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события "ПриИзменении" реквизита "ДоговорЭквайринга".
//
Процедура ДоговорЭквайрингаПриИзменении(Элемент)

	ПриИзмененииДоговораЭквайринга();

КонецПроцедуры // ДоговорЭквайрингаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ВидОплаты" в ТЧ "ОплатаПлатежнымиКартами".
//
Процедура ОплатаПлатежнымиКартамиВидОплатыПриИзменении(Элемент)
	
	ПриИзмененииВидаОплатыПлатежнымиКартами(ЭлементыФормы.ОплатаПлатежнымиКартами.ТекущиеДанные);

КонецПроцедуры // ОплатаПлатежнымиКартамиВидОплатыПриИзменении()

// Обработчик события "ПриИзменении" реквизита "Сумма" в ТЧ "ОплатаПлатежнымиКартами".
//
Процедура ОплатаПлатежнымиКартамиСуммаПриИзменении(Элемент)

	ПересчитатьТорговуюУступку(ЭлементыФормы.ОплатаПлатежнымиКартами.ТекущиеДанные);

КонецПроцедуры // ОплатаПлатежнымиКартамиСуммаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ПроцентТорговойУступки" в ТЧ "ОплатаПлатежнымиКартами".
//
Процедура ОплатаПлатежнымиКартамиПроцентТорговойУступкиПриИзменении(Элемент)

	ПересчитатьТорговуюУступку(ЭлементыФормы.ОплатаПлатежнымиКартами.ТекущиеДанные);

КонецПроцедуры // ОплатаПлатежнымиКартамиПроцентТорговойУступкиПриИзменении()

// Обработчик события "Нажатие" гиперссылки "Эквайрер".
//
Процедура ЭквайрерНажатие(Элемент)

	Если ЗначениеЗаполнено(Эквайрер) Тогда
		Эквайрер.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;

КонецПроцедуры // ЭквайрерНажатие()

// Обработчик события "Нажатие" гиперссылки "ДоговорВзаиморасчетовЭквайрера".
//
Процедура ДоговорВзаиморасчетовЭквайрераНажатие(Элемент)

	Если ЗначениеЗаполнено(ДоговорВзаиморасчетовЭквайрера) Тогда
		ДоговорВзаиморасчетовЭквайрера.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;

КонецПроцедуры // ДоговорВзаиморасчетовЭквайрераНажатие()

// Обработчик события "ПриИзменении" реквизита "Сумма" в ТЧ "ОплатаБанковскимиКредитами".
//
Процедура ОплатаБанковскимиКредитамиСуммаПриИзменении(Элемент)

	ПересчитатьСуммуКомиссии(ЭлементыФормы.ОплатаБанковскимиКредитами.ТекущиеДанные);

КонецПроцедуры // ОплатаБанковскимиКредитамиСуммаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ПроцентБанковскойКомиссии" в ТЧ "ОплатаБанковскимиКредитами".
//
Процедура ОплатаБанковскимиКредитамиПроцентБанковскойКомиссииПриИзменении(Элемент)

	ПересчитатьСуммуКомиссии(ЭлементыФормы.ОплатаБанковскимиКредитами.ТекущиеДанные);

КонецПроцедуры // ОплатаБанковскимиКредитамиПроцентБанковскойКомиссииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
Процедура ОплатаБанковскимиКредитамиВидОплатыПриИзменении(Элемент)

	ПриИзмененииВидаОплатыБанковскимКредитом(ЭлементыФормы.ОплатаБанковскимиКредитами.ТекущиеДанные);

КонецПроцедуры // ОплатаБанковскимиКредитамиВидОплатыПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ВидОплаты" в ТЧ "ОплатаПлатежнымиКартами".
//
Процедура ОплатаПлатежнымиКартамиВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораВидаОплатыЧекаККМ(Элемент, Перечисления.ТипыОплатЧекаККМ.ПлатежнаяКарта, СтандартнаяОбработка);

КонецПроцедуры // ОплатаПлатежнымиКартамиВидОплатыНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "ВидОплаты" в ТЧ "ОплатаБанковскимиКредитами".
//
Процедура ОплатаБанковскимиКредитамиВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораВидаОплатыЧекаККМ(Элемент, Перечисления.ТипыОплатЧекаККМ.БанковскийКредит, СтандартнаяОбработка);

КонецПроцедуры // ОплатаБанковскимиКредитамиВидОплатыНачалоВыбора()

// Обработчик события "НачалоВыбора" реквизита "ДисконтнаяКарта" в ТЧ "ПродажиПоДисконтнымКартам".
//
Процедура ПродажиПоДисконтнымКартамДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораИнформационнойКарты(Элемент, Перечисления.ТипыИнформационныхКарт.Дисконтная, СтандартнаяОбработка);

КонецПроцедуры // ПродажиПоДисконтнымКартамДисконтнаяКартаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "ДисконтнаяКарта" в ТЧ "ПродажиПоДисконтнымКартам".
//
Процедура ПродажиПоДисконтнымКартамДисконтнаяКартаПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ПродажиПоДисконтнымКартам.ТекущиеДанные;

	УправлениеРозничнойТорговлей.ПроверитьКорректностьИнформационнойКарты(ТекущаяСтрока.ДисконтнаяКарта, Перечисления.ТипыИнформационныхКарт.Дисконтная);

	ПриИзмененииДисконтнойКарты(ТекущаяСтрока);

КонецПроцедуры // ПродажиПоДисконтнымКартамДисконтнаяКартаПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Функция открывает форму "Цены и валюта".
//
// Параметры:
//  УстановитьСуммаВключаетНДС
//
// Возвращаемое значение:
//  Булево - Ложь, если пользователь закрыл форму "Цены и валюта" без сохранения.
//
Функция ОткрытьФормуЦеныИВалюта(УстановитьСуммаВключаетНДС)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураВалюты              = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента",    мВалютаРегламентированногоУчета);
	СтруктураРеквизитовДокумента.Вставить("КурсДокумента",      СтруктураВалюты.Курс);
	СтруктураРеквизитовДокумента.Вставить("КратностьДокумента", СтруктураВалюты.Кратность);

	Если УстановитьСуммаВключаетНДС Тогда
		СтруктураРеквизитовДокумента.Вставить("УстановитьСуммаВключаетНДС");
	КонецЕсли;

	СтруктураНередактируемыхРеквизитов = Новый Структура;

	СтруктураНередактируемыхРеквизитов.Вставить("ВалютаДокумента");
	СтруктураНередактируемыхРеквизитов.Вставить("КурсДокумента");

	Если ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
		Если СуммаВключаетНДС Тогда
			СтруктураНередактируемыхРеквизитов.Вставить("СуммаВключаетНДС");
		КонецЕсли;
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары");

	НужноИзменитьЦеныВалюту = СтруктураЗначений <> Неопределено;
	Если НужноИзменитьЦеныВалюту Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, ,СтруктураЗначений);

		УстановитьВидимость();
	КонецЕсли;

	Возврат НужноИзменитьЦеныВалюту;

КонецФункции // ОткрытьФормуЦеныИВалюта()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтруктураВыборСХарактеристикой = Новый Структура("мУказаниеСкладовВТЧ, ПоляДляОбновления, ВладельцыФормы, СтрокаТабличнойЧасти, МетаданныеДокумента"
									, мУказаниеСкладовВТЧ
									, Новый Структура("Склад,ХарактеристикаНоменклатуры,Номенклатура", ЭлементыФормы.Товары.ТекущиеДанные["Склад"])
									, Новый Структура("ЭтаФорма,Элемент", ЭтаФорма,Элемент)
									, СтрокаТабличнойЧасти
									, Метаданные());

	ОбработкаТабличныхЧастей.ОткрытьФормуСправочникаНоменклатурыДляВыбора(СтруктураВыборСХарактеристикой);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с ЕГАИС

Процедура ДействияФормыСоздатьПерезаполнитьДокЕГАИС(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.СоздатьПерезаполнитьДокументЕГАИС(Кнопка, ЭтаФорма, ДокументОбъект);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьДокЕГАИС(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.ОткрытьДокументЕГАИС(ЭтотОбъект.ДокЕГАИС);
	
КонецПроцедуры

Процедура ДокЕГАИСПриИзменении(Элемент)
	
	ИнтеграцияЕГАИСПереопределяемый.ДокЕГАИСПриИзменении(Элемент, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ДокЕГАИСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСПереопределяемый.ДокЕГАИСНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ДокЕГАИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСПереопределяемый.ДокЕГАИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыСопоставитьНоменклатуру(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.ОткрытьФормуСопоставленияНоменклатуры(ЭтаФорма);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары      = ЭлементыФормы.Товары.Колонки;

мТерминалы                 = ПолучитьСерверТО().ПолучитьСписокУстройств(
   Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);

