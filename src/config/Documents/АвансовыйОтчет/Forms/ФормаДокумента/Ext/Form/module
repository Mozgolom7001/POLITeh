////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиОплата, мКолонкиВыданныеАвансы, мКолонкиПрочее;
Перем мРазрешитьНулевыеЦеныВОпте;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСкладОрдера;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСклада;

Перем мОтражатьВРегламентированномУчете;

Перем мКартинкаСерийныеНомера;

Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВыданныеАвансы,ЭлементыФормы.КоманднаяПанельВыданныеАвансы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Прочее,ЭлементыФормы.КоманднаяПанельПрочее.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОплатаПоставщикам,ЭлементыФормы.КоманднаяПанельОплатаПоставщикам);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Рассчитывает сумму взаиморасчетов в строке ТЧ "Оплата поставщикам".
//
Процедура РассчитатьСуммуВзаиморасчетов()

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;

	ВалютаВзаиморасчетов = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, ВалютаДокумента,
	                                ВалютаВзаиморасчетов, 
	                                КурсДокумента, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                КратностьДокумента,СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Выполняет необходимые действия при изменении договора в строке ТЧ "Оплата поставщикам".
//
Процедура ПриИзмененииДоговора()

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаТабличнойЧасти.Проект = СтрокаТабличнойЧасти.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ВидСклада = СкладОрдер.ВидСклада;
	Иначе
		ВидСклада = СкладОрдер.Склад.ВидСклада;
	КонецЕсли;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		Команда = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "Тара";
	КонецЕсли;

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("Склад"              , СкладОрдер);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"       , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ТипЦен"             , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Организация"        , Организация);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"          , ТабличнаяЧасть = Товары);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"           , Истина);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"    , ВалютаДокумента);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                     ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", мУказаниеСкладовВТЧ);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если НЕ ЗначениеВыбора.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти) Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти
	   И ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И ЗначениеЗаполнено(СкладОрдер) Тогда
		СтруктураОтбора.Вставить("Склад", СкладОрдер);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура        = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти.Количество          = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения    = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент         = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС,
			// ставки берутся из номенклатуры. Здесь цена тары в валюте документа
			СтрокаТабличнойЧасти.Количество          = Количество;
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура в зависимости от вида поступления определяет тип для выбора СкладаОрдера
//
Процедура УстановитьТипСкладаОрдера()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать склад, на который необходимо оформить поступление товаров.";
	Иначе
		Если ТипЗнч(СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.";
	КонецЕсли;

КонецПроцедуры // УстановитьТипСкладаОрдера()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимостьДоступность()

	// Колонки налога показываем только тогда, когда его учитываем.
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПредъявленСФ, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ДатаСФ, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.НомерСФ, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СчетФактура, УчитыватьНДС);
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСчетФактуру.Доступность = УчитыватьНДС;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.ПредъявленСФ, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.ДатаСФ, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.НомерСФ, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.СчетФактура, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.СтавкаНДС, УчитыватьНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиПрочее.СуммаНДС, УчитыватьНДС);
	ЭлементыФормы.КоманднаяПанельПрочее.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСчетФактуру.Доступность = УчитыватьНДС;
	
	ВидимостьПриходногоОрдера = (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);
	Если ВидимостьПриходногоОрдера <> мКолонкиТовары.ПриходныйОрдер.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПриходныйОрдер, ВидимостьПриходногоОрдера);
	КонецЕсли;
	Если ВидимостьПриходногоОрдера <> мКолонкиВозвратнаяТара.ПриходныйОрдер.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.ПриходныйОрдер, ВидимостьПриходногоОрдера);
	КонецЕсли;

	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоПриходномуОрдеру.Доступность = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоПриходномуОрдеру.Доступность          = ВидимостьПриходногоОрдера;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,ОплатаПоставщикам.Проект");

КонецПроцедуры

Процедура УстановитьАвтоотметку()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если Не мУказаниеСкладовВТЧ Тогда
			Автоотметка = мАвтоОтметкаСкладОрдера;
		Иначе
			Автоотметка = мАвтоОтметкаСкладОрдера
			              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);
		КонецЕсли;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	Иначе
		Автоотметка = Ложь;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	Перем ВсегоТовары;

	// Итого по отчету:
	ЭлементыФормы.ВсегоАвансов.Значение         = ОбщегоНазначения.ФорматСумм(ВыданныеАвансы.Итог("Сумма"));
	ЭлементыФормы.НадписьВсегоАвансов.Заголовок = "Израсходовано авансов, " + СокрЛП(ВалютаДокумента) + ":";

	// Вычислим,сумму по закупке.
	ВсегоТовары    = Товары.Итог("Сумма");
	ВсегоТоварыНДС = Товары.Итог("СуммаНДС");
	Если УчитыватьНДС 
	   И Не СуммаВключаетНДС Тогда
		ВсегоТовары = ВсегоТовары + ВсегоТоварыНДС;
	КонецЕсли;

	ВсегоПоОтчету = ВсегоТовары;

	// При изменении данных обновим суммы в подвале.
	// Суммы на невидимых страницах считать не будем.
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Товары"] Тогда
		
		// При изменении данных обновим суммы в подвале.
		ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(ВсегоТоварыНДС);

		ВременнаяСтрока = "";

		Если (ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента))
			И (ЭтотОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

			ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента + ВалютаДокумента
			+ " = " + КурсДокумента
			+ мВалютаРегламентированногоУчета + ", ";

		КонецЕсли;

		Если ЗначениеЗаполнено(ЭтотОбъект.ТипЦен) Тогда
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ЭтотОбъект.ТипЦен;
		Иначе
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
		КонецЕсли;

		ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		Иначе
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ЭтотОбъект.ВалютаДокумента) +"):";
		КонецЕсли;

		Если УчитыватьНДС Тогда

			ЭлементыФормы.НадписьВсегоНДС.Видимость = Истина;
			ЭлементыФормы.ВсегоНДС       .Видимость = Истина;
			
			Если СуммаВключаетНДС Тогда
				ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
			Иначе
				ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
				ВсегоПоОтчету = ВсегоПоОтчету; 
			КонецЕсли;
		Иначе
			ЭлементыФормы.НадписьВсегоНДС.Видимость = Ложь;
			ЭлементыФормы.ВсегоНДС       .Видимость = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.Всего.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("Сумма"));

	КонецЕсли;

	ЭлементыФормы.ВсегоПоОтчету.Значение         = ОбщегоНазначения.ФорматСумм(ВсегоПоОтчету + ОплатаПоставщикам.Итог("Сумма")
	                                              + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Прочее"));
	ЭлементыФормы.НадписьВсегоПоОтчету.Заголовок = "По отчету, " + СокрЛП(ВалютаДокумента) + ":";
	

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ПриИзмененииСерии()
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры

// Процедура очищает Сделку в табличной части "ВозвратнаяТара".
//
Процедура ОчиститьСделкуВТабЧастиВозвратнаяТара(СтрокаТабличнойЧасти)

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Сделка) Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		ВедениеВзаиморасчетов = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВедениеВзаиморасчетов;
		ТипЗначенияСделки     = ТипЗнч(СтрокаТабличнойЧасти.Сделка);

		Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			И ТипЗначенияСделки <> Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
			СтрокаТабличнойЧасти.Сделка = Неопределено;
		ИначеЕсли ТипЗначенияСделки <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.Сделка = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Сделка = Неопределено;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	Если ЗначениеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда
				Предупреждение("Авансовый отчет можно вводить только на основании приходного ордера от подотчетника!");
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
				Предупреждение("Авансовый отчет можно вводить на  основании расходного кассового ордера 
				                |только с видом операции ""выдача денежных средств подотчетнику""!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование);

		Если ЗначениеЗаполнено(ПараметрОснование)
		   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	// ТЧ Возвратная тара
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	// ТЧ Товары
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	//ТЧ Авансы 
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("ДокументАванса");
	СтруктураКолонок.Вставить("Сумма");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВыданныеАвансы, СтруктураКолонок);

	// ТЧ Оплата поставщикам
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("Контрагент");
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиОплата, СтруктураКолонок);

	// ТЧ прочее
	СтруктураКолонок.Очистить();
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиПрочее, СтруктураКолонок);

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	УстановитьТипСкладаОрдера();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер,
	                         "Склад", мУказаниеСкладовВТЧ Или ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	//Запомним автоотметку поля шапки СкладОрдер
	мАвтоОтметкаСкладОрдера = ЭлементыФормы.СкладОрдер.АвтоОтметкаНезаполненного;

	// Сохраним текущее значение сделки и склада
	мСтароеЗначениеСклада = СкладОрдер;

	УстановитьВидимостьДоступность();
	ПриИзмененииВидаСклада();
	УстановитьАвтоотметку();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	РаботаСДиалогами.УстановитьДоступностьМенюПроверить(ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Авансы",            "ВыданныеАвансы");
	Страницы.Добавить("Товары",            "Товары");
	Страницы.Добавить("Тара",              "ВозвратнаяТара");
	Страницы.Добавить("ОплатаПоставщикам", "ОплатаПоставщикам");
	Страницы.Добавить("Прочее",            "Прочее");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ЭтотОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ЭтотОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Авансы" Тогда
			СтраницаПанели.Заголовок = "Авансы (" + ЭтотОбъект.ВыданныеАвансы.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ОплатаПоставщикам" Тогда
			СтраницаПанели.Заголовок = "Оплата (" + ЭтотОбъект.ОплатаПоставщикам.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Прочее" Тогда
			СтраницаПанели.Заголовок = "Прочее (" + ЭтотОбъект.Прочее.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                мУказаниеСкладовВТЧ, ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

// Процедура вызывается сразу перед записью документа.
// выполняется поиск существующего счета-фактуры  по заданным 
// параметрам.
Функция НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДокумента, УстановитьПризнакИспользования = Истина)
	
	ДокСФ = Неопределено;
	Если ЗначениеЗаполнено(СтрокаДокумента.СчетФактура)
		и не ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура,"Ссылка") = неопределено Тогда
	    СтрокаСФ = ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура,"Ссылка");
		
		Если (Врег(СокрЛП(СтрокаСФ.НомерВходящегоДокумента)) = Врег(СокрЛП(СтрокаДокумента.НомерСФ)))
		   и (СтрокаСФ.Поставщик = СтрокаДокумента.Поставщик или Не ЗначениеЗаполнено(СтрокаСФ.Поставщик)) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено и УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			Возврат ДокСФ;
		КонецЕсли;
	КонецЕсли; 
	
	
	Для Каждого СтрокаСФ Из ТаблицаСФ Цикл
		// Поиск существующего счета-фактуры выполняется по его номеру дате и контрагенту.
		Если (Врег(СокрЛП(СтрокаСФ.НомерВходящегоДокумента)) = Врег(СокрЛП(СтрокаДокумента.НомерСФ)))
		   и (СтрокаСФ.Поставщик = СтрокаДокумента.Поставщик или Не ЗначениеЗаполнено(СтрокаСФ.Поставщик)) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено и УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокСФ;
		
КонецФункции // НайтиСчетФактуруВСписке()

// Процедура вызывается сразу же после записи документа.
// Формирует перечень документов счет-фактура полученный, введенных на 
// основании текущего документа "Авансовый отчет".
//
Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Ссылка,
	|	СчетФактураПолученный.Ссылка.НомерВходящегоДокумента,
	|	СчетФактураПолученный.Ссылка.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.Ссылка.Контрагент КАК Поставщик,
	|	СчетФактураПолученный.Ссылка.Проведен,
	|	СчетФактураПолученный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
	|	И СчетФактураПолученный.Ссылка.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыПолученного.НаПоступление)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.Ссылка.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";
	
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// полученных счетов - факутр. Результаты данного сопоставления
// фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьСчетаФактурыПолученныеДляСтрокДокумента(ТабЧасть = "")
	
	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Регистрация счетов-фактур может быть выполнена только в записанном документе. Записать документ?", РежимДиалогаВопрос.ДаНет);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Попытка

				// выполняем запись документа
				Если НЕ ЗаписатьВФорме(РежимЗаписиДокумента.Запись) Тогда
					Возврат;
				КонецЕсли;

			Исключение
				Возврат;
			КонецПопытки;

		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	Если ТабЧасть = "Прочее" Тогда
		// Проверяем на наличие строк с одним поставщиком, номером и датой счета-фактуры,
		// но разными значениями флажка "Бланк строгой отчетности"
		ТаблицаСФ = Прочее.Выгрузить(Новый Структура("ПредъявленСФ", Истина), "Поставщик,ДатаСФ,НомерСФ,БланкСтрогойОтчетности");
		ТаблицаСФ.Свернуть("Поставщик,ДатаСФ,НомерСФ,БланкСтрогойОтчетности");
		ТаблицаСФ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5,0)));
		ТаблицаСФ.ЗаполнитьЗначения(1, "Количество");
		ТаблицаСФ.Свернуть("Поставщик,ДатаСФ,НомерСФ", "Количество");
		Для каждого СтрокаТаблицы Из ТаблицаСФ Цикл
			Если СтрокаТаблицы.Количество > 1 Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Для счета-фактуры № %1 от %2 (поставщик: %3) 
					|в табличной части ""Прочее"" указаны разные значения флажка ""Бланк строгой отчетности"".'"),
					СтрокаТаблицы.НомерСФ,
					Формат(СтрокаТаблицы.ДатаСФ, "ДЛФ=D"),
					СтрокаТаблицы.Поставщик);
				ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ);
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	//ТаблицаСФ.ЗаполнитьЗначения(Ложь, "Использован");
	
	СписокТабЧастей = Новый СписокЗначений;
	Если ПустаяСтрока(ТабЧасть) Тогда
		СписокТабЧастей.Добавить("Товары");
		СписокТабЧастей.Добавить("Прочее");
	Иначе
		СписокТабЧастей.Добавить(ТабЧасть);
	КонецЕсли;  
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Поставщик");
		ТаблицаДокумента.Колонки.Добавить("НомерСФ");
		ТаблицаДокумента.Колонки.Добавить("ДатаСФ");
		ТаблицаДокумента.Колонки.Добавить("СчетФактура");
		//ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");
		ТаблицаДокумента.Колонки.Добавить("СуммаБезНДС");
		ТаблицаДокумента.Колонки.Добавить("НДС");
		ТаблицаДокумента.Колонки.Добавить("БланкСтрогойОтчетности", Новый ОписаниеТипов("Булево"));
			
		// подготовим таблицу документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если не СтрокаДок.ПредъявленСФ Тогда
				// СФ не предъявлен.
				Продолжить;
			КонецЕсли; 
			СтрокаТаблицыДок = ТаблицаДокумента.Добавить();
			СтрокаТаблицыДок.Поставщик	= СтрокаДок.Поставщик;
			СтрокаТаблицыДок.НомерСФ	= СокрЛП(СтрокаДок.НомерСФ);
			СтрокаТаблицыДок.ДатаСФ		= СтрокаДок.ДатаСФ;
			СтрокаТаблицыДок.СчетФактура= СтрокаДок.СчетФактура;
			//СтрокаТаблицыДок.СтавкаНДС	= СтрокаДок.СтавкаНДС;
			
			СтрокаТаблицыДок.СуммаБезНДС= СтрокаДок.Сумма - ?(СуммаВключаетНДС,СтрокаДок.СуммаНДС,0);
			СтрокаТаблицыДок.НДС		= СтрокаДок.СуммаНДС;
			
			Если ТабЧасть.Значение = "Прочее" Тогда
				СтрокаТаблицыДок.БланкСтрогойОтчетности = СтрокаДок.БланкСтрогойОтчетности;
			КонецЕсли;
			
		КонецЦикла;
			
		// В данной таблице содержится информация о том, какие счета-фактуры необходимо выписать
		ТаблицаДокумента.Свернуть("Поставщик, НомерСФ, ДатаСФ, СчетФактура, БланкСтрогойОтчетности", "СуммаБезНДС, НДС");// , СтавкаНДС
			
		Для Каждого СтрокаТаблицыДок Из ТаблицаДокумента Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицыДок.Поставщик)
			 или (ПустаяСтрока(СтрокаТаблицыДок.НомерСФ)) Тогда
			    // В строке авансового отчета не указаны параметры для создания счета-фактуры
				Продолжить;
			КонецЕсли;
			
			// Поиск существующего документа счет-фактура полученный
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаТаблицыДок);
			
			Если ДокСФ = Неопределено Тогда
				// Если существующий счет-фактура не найден, нужно создать новый счет-фактуру
				ДокСФ = Документы.СчетФактураПолученный.СоздатьДокумент();
				
				ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
				//ДокСФ.ДокументОснование = Ссылка;
				
				ДокСФ.Дата = Дата;
				ДокСФ.Организация = Организация;
				ДокСФ.Контрагент = СтрокаТаблицыДок.Поставщик;
				
				ДокСФ.ДатаВходящегоДокумента =  СтрокаТаблицыДок.ДатаСФ;
				ДокСФ.НомерВходящегоДокумента = СтрокаТаблицыДок.НомерСФ;
				
				ДокСФ.ВидСчетаФактуры    = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
				
				ДокСФ.БланкСтрогойОтчетности = СтрокаТаблицыДок.БланкСтрогойОтчетности;
				
				Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 И НЕ СтрокаТаблицыДок.БланкСтрогойОтчетности Тогда
					ДокСФ.КодВидаОперации     = "01";
					ДокСФ.КодСпособаПолучения = 1;
				КонецЕсли;
				
				ДокСФ.Комментарий = "Создан автоматически на основании авансового отчета";
				ДокСФ.Записать();
				
				Сообщить("Сформирован документ «"+СокрЛП(ДокСФ.Ссылка)+"» (поставщик «"+СокрЛП(СтрокаТаблицыДок.Поставщик)+"», с.-ф. № "+СокрЛП(СтрокаТаблицыДок.НомерСФ)+" от "+Формат(СтрокаТаблицыДок.ДатаСФ, "ДФ=dd.MM.yyyy") +")."); 
				
				//НовыйСФ = Истина;
				// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Добавить();
				СтрокаСФ.Поставщик = СтрокаТаблицыДок.Поставщик;
				СтрокаСФ.НомерВходящегоДокумента =  ДокСФ.НомерВходящегоДокумента;
				СтрокаСФ.ДатаВходящегоДокумента = ДокСФ.ДатаВходящегоДокумента;
				СтрокаСФ.Ссылка = ДокСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
				
			Иначе
				//НовыйСФ = Ложь;
				// Информацию об этом счете-фактуре нужно обновить в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Найти(ДокСФ.Ссылка, "Ссылка");
				Если ДокСФ.ДокументыОснования.Найти(Ссылка,"ДокументОснование") = Неопределено Тогда
					ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
				КонецЕсли; 
				
			КонецЕсли;
			
			Если ДокСФ.БланкСтрогойОтчетности <> СтрокаТаблицыДок.БланкСтрогойОтчетности Тогда
				ДокСФ.БланкСтрогойОтчетности = СтрокаТаблицыДок.БланкСтрогойОтчетности;
			КонецЕсли;
			
			Если ПустаяСтрока(ДокСФ.КодВидаОперации) 
				И НЕ ДокСФ.БланкСтрогойОтчетности Тогда
				ДокСФ.КодВидаОперации     = "01";
				ДокСФ.КодСпособаПолучения = 1;
			КонецЕсли;
			
			Если ДокСФ.ПометкаУдаления Тогда
				ДокСФ.ПометкаУдаления = Ложь;
			КонецЕсли; 
			
			Если ДокСФ.Модифицированность() Тогда
				ДокСФ.Записать();
			КонецЕсли; 
			
		КонецЦикла;
			
		// далее необходимо прописать ссылки на созданные счета-фактуры на аванс в строки документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			
			Если не СтрокаДок.ПредъявленСФ тогда
				// Для строки не нужен счет-фактура
				Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
					СтрокаДок.СчетФактура = Неопределено;
				КонецЕсли; 
				Продолжить;
			КонецЕсли;
			
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДок, Ложь);	
			Если ДокСФ <> Неопределено Тогда
				// Если есть счет-фактура - регистрируем его в строке табличной части
				Если не СтрокаДок.СчетФактура = ДокСФ.Ссылка Тогда
					Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
						Сообщить("Изменен счет-фактура по строке "+СтрокаДок.НомерСтроки+" """+ТабЧасть.Значение+""" (дата, номер входящего счета-фактуры или контрагент - изменены).",СтатусСообщения.Информация); 
					КонецЕсли; 
					СтрокаДок.СчетФактура = ДокСФ.Ссылка;
				КонецЕсли; 
			Иначе
				Если Не ЗначениеЗаполнено(СтрокаДок.Поставщик)
				 или ПустаяСтрока(СтрокаДок.НомерСФ) 
				 Тогда
					Сообщить("В строке "+СтрокаДок.НомерСтроки+" """+ТабЧасть.Значение+""" "+
					?(Не ЗначениеЗаполнено(СтрокаДок.Поставщик),"не указан поставщик, ","")+
					?(ПустаяСтрока(СтрокаДок.НомерСФ),"не указан номер счета-фактуры, ","")+
					" счет-фактура по строке не зарегистрирован!",СтатусСообщения.Важное);
				КонецЕсли;
					
				// Для строки не создан счет-фактура
				СтрокаДок.СчетФактура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры // СформироватьСчетаФактурыНаАвансДляСтрокДокумента()

// Процедура "просматривает" строки табличных частей документа.
// и для тех строк, в которых указан счет-фактура полученый,
// обновляет ссылку на текущий документ "Авансовый отчет"
// в этом счете-фактуре.
//
Процедура ОбновитьСсылкиСчетовФактур()
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	СписокТабЧастей = Новый СписокЗначений;
	СписокТабЧастей.Добавить("Товары");
	СписокТабЧастей.Добавить("Прочее");
	
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если СтрокаДок.ПредъявленСФ и НЕ СтрокаДок.СчетФактура.Пустая() тогда 
				ДокСФ = СтрокаДок.СчетФактура.ПолучитьОбъект();
				Если ДокСФ.ДокументыОснования.Найти(Ссылка,"ДокументОснование")= Неопределено Тогда
					// Необходимо модифицировать ссылку в счете-фактуре
					ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
				КонецЕсли;
				ДокСФ.ОпределениеПараметровСчетаФактуры();
				
				Если ДокСФ.Модифицированность() тогда
					ДокСФ.Записать();
				КонецЕсли;
				
				СтрокиСФ = ТаблицаСФ.НайтиСтроки(Новый Структура("Ссылка, Использован",СтрокаДок.СчетФактура,Ложь));
				Для каждого СтрокаТаблицыСФ Из СтрокиСФ  Цикл
				    СтрокаТаблицыСФ.Использован = Истина;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// удаляем незадействованные счета-фактуры
	Для Каждого СтрокаСчета Из ТаблицаСФ Цикл
		Если НЕ СтрокаСчета.Использован Тогда
			ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
			//Проверим - только ли текущий документ зарегистрирован в счете-фактуре
			Если ТекСФ.ДокументыОснования.Количество()>1 Тогда
				//Удалим строки, относящиеся к текущему счету-фактуре
				СтрокаАО = ТекСФ.ДокументыОснования.Найти(Ссылка,"ДокументОснование");
				Если не СтрокаАО = неопределено Тогда
					ТекСФ.ДокументыОснования.удалить(СтрокаАО);
					ТекСФ.Записать();
					Сообщить("Из документа «"+СокрЛП(ТекСФ.Ссылка)+"» удалена ссылка на текущий авансовый отчет 
					|(поставщик «"+СокрЛП(СтрокаСчета.Поставщик)+"», с.-ф. № <"+СокрЛП(СтрокаСчета.НомерВходящегоДокумента)+"> от "+Формат(СтрокаСчета.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")+")"); 
				КонецЕсли; 
			Иначе
				Если ТекСФ.ПометкаУдаления = Ложь Тогда
					ТекСФ.УстановитьПометкуУдаления(Истина);
					ТекСФ.Записать();
					Сообщить("Документ «"+СокрЛП(ТекСФ.Ссылка)+"» 
					|(поставщик «"+СокрЛП(СтрокаСчета.Поставщик)+"», с.-ф. № <"+СокрЛП(СтрокаСчета.НомерВходящегоДокумента)+"> от "+Формат(СтрокаСчета.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy")+") не используется. 
					|Счет-фактура помечен на удаление."); 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // ОбновитьСсылкиСчетовФактур()

Процедура КоманднаяПанельТоварыЗаполнитьСчетФактуру(Кнопка)
	СформироватьСчетаФактурыПолученныеДляСтрокДокумента("Товары");
КонецПроцедуры

Процедура КоманднаяПанельПрочееЗаполнитьСчетФактуру(Кнопка)
	СформироватьСчетаФактурыПолученныеДляСтрокДокумента("Прочее");
КонецПроцедуры

Процедура ПроверитьОбновитьВыбираемыйСчетФактуру(ТД,ВыбранноеЗначение)

		ОбновитьРеквизитыСтроки = Ложь;
		ОбновитьСФ = Ложь;
		
		Если не (ТД.ДатаСФ = ВыбранноеЗначение.ДатаВходящегоДокумента и ТД.НомерСФ = ВыбранноеЗначение.НомерВходящегоДокумента) Тогда
			Если ВыбранноеЗначение.ДокументыОснования.Найти(Ссылка,"ДокументОснование") = Неопределено Тогда
				Ответ = Вопрос("Дата и номер счета-фактуры, указанные в текущей строке, не соответствуют вх. дате и номеру выбранного счета-фактуры.
					|В выбранном счете-фактуре отсутствует ссылка на текущий авансовый отчет. 
					|Обновить дату и номер счета-фактуры в текущей строке и добавить документ в качестве документа-основания в счет-фактуру?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да тогда
					ОбновитьРеквизитыСтроки = Истина;
					ОбновитьСФ = Истина;
			    КонецЕсли;
			Иначе
				Ответ = Вопрос("Дата и номер счета-фактуры, указанные в текущей строке, не соответствуют вх. дате и номеру выбранного счета-фактуры.
					|Обновить дату и номер счета-фактуры в текущей строке?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да тогда
					ОбновитьРеквизитыСтроки = Истина;
			    КонецЕсли;
			
			КонецЕсли; 
		
		ИначеЕсли ВыбранноеЗначение.ДокументыОснования.Найти(Ссылка,"ДокументОснование") = Неопределено Тогда
			//Обновим данные по СФ и добавим ссылку на текущий АО
			Ответ = Вопрос("В выбранном счете-фактуре отсутствует ссылка на текущий авансовый отчет.
				|Добавить документ в качестве документа-основания в счет-фактуру?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да тогда
				ОбновитьСФ = Истина;
		    КонецЕсли;
		КонецЕсли;
		Если ОбновитьРеквизитыСтроки Тогда
			ТД.ДатаСФ = ВыбранноеЗначение.ДатаВходящегоДокумента;
			ТД.НомерСФ = ВыбранноеЗначение.НомерВходящегоДокумента;
		КонецЕсли; 
		
		Если ОбновитьСФ Тогда
			ДокСФ = ВыбранноеЗначение.ПолучитьОбъект();
			ДокСФ.ДокументыОснования.Добавить().ДокументОснование = Ссылка;
			ДокСФ.Записать();
		КонецЕсли;
		
		Если не ТД.ПредъявленСФ Тогда
			ТД.ПредъявленСФ = Истина;	
		КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетФактура
// в строке табличной части "Товары".
//
Процедура ТоварыСчетФактураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") и ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		// проверим наличие АО в списке документов СФ
		ТД = ЭлементыФормы.Товары.ТекущиеДанные;
		ПроверитьОбновитьВыбираемыйСчетФактуру(ТД,ВыбранноеЗначение);
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетФактура
// в строке табличной части "Товары".
//
Процедура ТоварыСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбораСчетФактуры = Документы.СчетФактураПолученный.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбораСчетФактуры.ДокументСписок.Отбор.Организация.Установить(Организация);
	Если ЗначениеЗаполнено(ЭлементыФормы.Товары.ТекущиеДанные.Поставщик) Тогда
		ФормаВыбораСчетФактуры.ДокументСписок.Отбор.Контрагент.Установить(ЭлементыФормы.Товары.ТекущиеДанные.Поставщик);
	КонецЕсли;
	ФормаВыбораСчетФактуры.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетФактура
// в строке табличной части "Прочее".
//
Процедура ПрочееСчетФактураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") и ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		// проверим наличие АО в списке документов СФ
		ТД = ЭлементыФормы.Прочее.ТекущиеДанные;
		ПроверитьОбновитьВыбираемыйСчетФактуру(ТД,ВыбранноеЗначение);
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетФактура
// в строке табличной части "Прочее".
//
Процедура ПрочееСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбораСчетФактуры = Документы.СчетФактураПолученный.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбораСчетФактуры.ДокументСписок.Отбор.Организация.Установить(Организация);
	Если ЗначениеЗаполнено(ЭлементыФормы.Прочее.ТекущиеДанные.Поставщик) Тогда
		ФормаВыбораСчетФактуры.ДокументСписок.Отбор.Контрагент.Установить(ЭлементыФормы.Прочее.ТекущиеДанные.Поставщик);
	КонецЕсли;
	ФормаВыбораСчетФактуры.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "ПриСменеСтраницы" основной панели формы.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	ОбновитьПодвал();
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам"по кнопке "Заполнить" командной панели 
// табличного поля "ВыданныеАвансы", вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВыданныеАвансыЗаполнитьПоОстаткам(Кнопка)

	Если ВыданныеАвансы.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ВыданныеАвансы.Очистить();
	КонецЕсли;

	ЗаполнитьВыданныеАвансы();

КонецПроцедуры // КоманднаяПанельВыданныеАвансыЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Распределить сумму по документам аванса" в подменю "Заполнить" командной панели 
// табличного поля "ВыданныеАвансы", вызывает сервисный механизм для распределения суммы.
//
Процедура КоманднаяПанельВыданныеАвансыРаспределитьСуммуПоДокументамАванса(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Операция может выполняться только для непроведенного документа!");
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ФизЛицо",         ФизЛицо);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ДокументыАванса", ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.РасчетныйДокумент,
	|	Остатки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(
	|			,
	|			ФизЛицо = &ФизЛицо
	|				И Организация = &Организация
	|				И РасчетныйДокумент В (&ДокументыАванса)
	|				И Валюта = &ВалютаДокумента) КАК Остатки";

	ТаблицаОстатковВзаиморасчетов = Запрос.Выполнить().Выгрузить();

	СуммаПогашения = Товары.Итог("Сумма") + ОплатаПоставщикам.Итог("Сумма") + Прочее.Итог("Сумма") 
		+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, Товары.Итог("СуммаНДС") + Прочее.Итог("СуммаНДС"), 0);
	
	Для Каждого СтрокаВыданныеАвансы Из ВыданныеАвансы Цикл
			
		Если СуммаПогашения = 0 Тогда
			СтрокаВыданныеАвансы.Сумма = 0;
		Иначе
			СтрокаТаблицыОстатковВзаиморасчетов = ТаблицаОстатковВзаиморасчетов.Найти(СтрокаВыданныеАвансы.ДокументАванса, "РасчетныйДокумент");
			Если СтрокаТаблицыОстатковВзаиморасчетов = Неопределено Тогда
				СтрокаВыданныеАвансы.Сумма = 0;
			Иначе
				СтрокаВыданныеАвансы.Сумма = Мин(СуммаПогашения, СтрокаТаблицыОстатковВзаиморасчетов.СуммаВзаиморасчетовОстаток);
				СуммаПогашения = СуммаПогашения - СтрокаВыданныеАвансы.Сумма;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если СуммаПогашения > 0 Тогда
		Предупреждение("Сумма в " + СуммаПогашения + СокрЛП(ВалютаДокумента) + " осталась нераспределенной!");
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельВыданныеАвансыРаспределитьСуммуПоДокументамАванса()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");

	ТекущаяВалютаДокумента = ВалютаДокумента;

	СтруктураНередактируемыхРеквизитов = Новый Структура;
	СтруктураНередактируемыхРеквизитов.Вставить("УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураНередактируемыхРеквизитов
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		НовыйСуммаВключаетНДС  = СтруктураЗначений.НовыйСуммаВключаетНДС;
		СтарыйСуммаВключаетНДС = СтруктураЗначений.ТекущийСуммаВключаетНДС;
		ПересчитатьСумму       = НЕ (НовыйСуммаВключаетНДС = СтарыйСуммаВключаетНДС);

		Для каждого СтрокаТабличнойЧасти Из Прочее Цикл

			Если ПересчитатьСумму Тогда
				Если НовыйСуммаВключаетНДС Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
				Иначе
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаНДС;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если (ТекущаяВалютаДокумента <> ВалютаДокумента) И (ВыданныеАвансы.Количество() > 0) Тогда
		Ответ = Вопрос("Изменилась валюта документа. Погашаемые данным документом авансы должны быть выписаны в той же валюте.
		|Очистить табличную часть ""Авансы""?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыданныеАвансы.Очистить();

		КонецЕсли;
	КонецЕсли;

	УстановитьВидимостьДоступность();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при пункта "Заполнить по приходному ордеру" подменю
// кнопки "Заполнить" командной панели табличного поля "Товары", вызывает 
// сервисный механизм заполнения ТЧ по приходному ордеру
//
Процедура КоманднаяПанельТоварыЗаполитьПоПриходномуОрдеру(Кнопка)

	Если ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Предупреждение("Заполнять на основании приходного ордера можно только авансовый отчет по ордеру!");
		Возврат;
	КонецЕсли;	

	ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите приходный ордер для заполнения таблицы закупок";
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.Отбор.ФизЛицо.Значение          = ФизЛицо;
	ФормаВыбора.Отбор.ФизЛицо.Использование     = Истина;
	
	ПриходныйОрдерНаТовары = ФормаВыбора.ОткрытьМодально();
   	Если НЕ ЗначениеЗаполнено(ПриходныйОрдерНаТовары) Тогда
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Товары.Очистить();
	КонецЕсли;
	
	ЗаполнитьТоварыПоОснованию(ПриходныйОрдерНаТовары);

КонецПроцедуры

// Процедура вызывается при пункта "Заполнить по приходному ордеру" подменю
// кнопки "Заполнить" командной панели табличного поля "Товары", вызывает 
// сервисный механизм заполнения ТЧ по приходному ордеру
//
Процедура КоманднаяПанельТоварыДобавитьПоПриходномуОрдеру(Кнопка)

	Если ВидПоступления <> Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Предупреждение("Заполнять на основании приходного ордера можно только авансовый отчет по ордеру!");
		Возврат;
	КонецЕсли;	

	ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите приходный ордер для заполнения таблицы закупок";
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.Отбор.ФизЛицо.Значение          = ФизЛицо;
	ФормаВыбора.Отбор.ФизЛицо.Использование     = Истина;
	
	ПриходныйОрдерНаТовары = ФормаВыбора.ОткрытьМодально();
   	Если НЕ ЗначениеЗаполнено(ПриходныйОрдерНаТовары) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоОснованию(ПриходныйОрдерНаТовары);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Обработка нажатия кнопки "ВедомостьПоВзаиморасчетам"
//
Процедура ДействияФормыВедомостьПоВзаиморасчетам(Кнопка)

	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Предупреждение("Не выбрано подотчетное лицо в документе!");
		Возврат;
	КонецЕсли;

	Отчет = Отчеты.ВедомостьВзаиморасчетыСПодотчетнымиЛицами.Создать();
	Отчет.УстановитьНачальныеНастройки();
	Отчет.УниверсальныйОтчет.ОчиститьНастройкиПостроителя();
	
	// Период отчета - с основной даты отчета.
	Отчет.УниверсальныйОтчет.ДатаНач = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяДатаНачалаОтчетов");
	
	// Группировки - Организация и валюта взаиморасчетов.
	Отчет.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Организация");
	Отчет.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Валюта");
	
	//Установим отбор по подотчетнику.
	Отчет.УниверсальныйОтчет.ДобавитьОтбор("ФизЛицо", Истина, ВидСравнения.Равно, ФизЛицо);
	
	Отчет.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	ФормаОтчета.ОбновитьОтчет();
	ФормаОтчета.Открыть();
	
КонецПроцедуры // ДействияФормыВедомостьПоВзаиморасчетам()

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)

	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);

	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект", Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	Перем ФлагИзмененияКурса;

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета, ФлагИзмененияКурса);

	// Если изменился курс пересчитаем оплату
	Если ФлагИзмененияКурса Тогда
		Для каждого СтрокаТаблицы Из ОплатаПоставщикам Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
				ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				СтруктураВалюты                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
				СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
				СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
				СтрокаТаблицы.СуммаВзаиморасчетов     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				                                        ВалютаДокумента, ВалютаДоговора,
				                                        КурсДокумента, СтрокаТаблицы.КурсВзаиморасчетов,
				                                        КратностьДокумента,СтрокаТаблицы.КратностьВзаиморасчетов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	ОтражатьВНалоговомУчете = Элемент.Значение;

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ФизЛицо".
// Процедура очищает все табличные части при изменении ФизЛица.
//
Процедура ФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение <> ФизЛицо Тогда

		// Проверим, заполены ли табличные части документа.
		ДокументЗаполнен = (ВыданныеАвансы.Количество() > 0);

		// При изменении подотчетника надо почистить ТЧ "", это были данные другого лица.
		Если ДокументЗаполнен Тогда

			Ответ = Вопрос("При изменении подотчетника табличная часть ""Авансы"" документа будет очищена."
			               + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

			Если Ответ = КодВозвратаДиалога.Да Тогда
				ВыданныеАвансы.Очистить();
			Иначе
				СтандартнаяОбработка = Ложь; // отказ от выбора
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ФизЛицоОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОрдер
//
Процедура СкладОрдерПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Установить тип реквизита для ввода (если, например, поле очистили)
	УстановитьТипСкладаОрдера();

	УстановитьВидимостьДоступность();
	ПриИзмененииВидаСклада();
	
	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			СкладОрдер,
			мСтароеЗначениеСклада,
			"Товары, ВозвратнаяТара",
			?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, "ПриходныйОрдер", "Склад"));
	КонецЕсли;

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	мСтароеЗначениеСклада = СкладОрдер;

	// Определить в зависимости от вида поступления тип для выбора СкладаОрдера
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);

	Иначе

		СтандартнаяОбработка = Ложь;

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,Элемент,);

		// Оставим для выбора только нужные ордера
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

		ФормаВыбора.Открыть();

	КонецЕсли;

КонецПроцедуры // СкладОрдерНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)

	РаботаСдиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер,
		"Склад", мУказаниеСкладовВТЧ Или ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	УстановитьТипСкладаОрдера();
	ПриИзмененииВидаСклада();
	УстановитьАвтоотметку();
	УстановитьВидимостьДоступность();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВЫДАННЫЕ АВАНСЫ

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "ВыданныеАвансы". Формирует данные в колонках ТЧ "Сумма РКО", "Валюта РКО", "Выдано".
//
Процедура ВыданныеАвансыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ВидимостьСуммыДокумента  = ЭлементыФормы.ВыданныеАвансы.Колонки.СуммаДокументаАванса.Видимость;
	ВидимостьВалютыДокумента = ЭлементыФормы.ВыданныеАвансы.Колонки.ВалютаДокументаАванса.Видимость;
	ВидимостьВыдано          = ЭлементыФормы.ВыданныеАвансы.Колонки.Выдано.Видимость;
	
	Если НЕ (ВидимостьСуммыДокумента ИЛИ ВидимостьВалютыДокумента ИЛИ ВидимостьВыдано) Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = ВыданныеАвансы.ВыгрузитьКолонку("ДокументАванса");
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК ДокументАванса,
	|	Док.Ссылка.СуммаДокумента КАК СуммаДокументаАванса,
	|	ПРЕДСТАВЛЕНИЕ(Док.Ссылка.ВалютаДокумента) КАК ВалютаДокументаАванса,
	|	СУММА(Док.СуммаВзаиморасчетов) КАК Выдано
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивДокументов)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Ссылка.СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Док.Ссылка.ВалютаДокумента),
	|	СУММА(Док.СуммаВзаиморасчетов)
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивДокументов)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Ссылка.СуммаДокумента,
	|	ПРЕДСТАВЛЕНИЕ(Док.Ссылка.ВалютаДокумента),
	|	СУММА(Док.СуммаВзаиморасчетов)
	|ИЗ
	|	Документ.ПлатежныйОрдерСписаниеДенежныхСредств.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	Док.Ссылка В (&МассивДокументов)
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	ТаблицаДокументовАванса = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументовАванса.Индексы.Добавить("ДокументАванса");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ДокументАванса) Тогда
			
			СтрокаДокументаАванса = ТаблицаДокументовАванса.Найти(ДанныеСтроки.ДокументАванса, "ДокументАванса");
			
			Если ВидимостьСуммыДокумента Тогда
				ОформлениеСтроки.Ячейки.СуммаДокументаАванса.УстановитьТекст(ОбщегоНазначения.ФорматСумм(СтрокаДокументаАванса.СуммаДокументаАванса));
			КонецЕсли;
			
			Если ВидимостьВалютыДокумента Тогда
				ОформлениеСтроки.Ячейки.ВалютаДокументаАванса.УстановитьТекст(СтрокаДокументаАванса.ВалютаДокументаАванса);
			КонецЕсли;
			
			Если ВидимостьВыдано Тогда
				ОформлениеСтроки.Ячейки.Выдано.УстановитьТекст(ОбщегоНазначения.ФорматСумм(СтрокаДокументаАванса.Выдано));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ВыданныеАвансыПриПолученииДанных()

// Процедура - обработчик события "НачалоВыбора" поля ввода документа аванса
// в строке табличной части "ВыданныеАвансы".
//
Процедура ВыданныеАвансыДокументАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Надо отфильтровать список документов по организации, физ. лицу и валюте взаиморасчетов.
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Предупреждение("Не выбрано подотчетное лицо!");
		Возврат;
	КонецЕсли;
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("РасходныйКассовыйОрдер",                "Расходный кассовый ордер");
	СписокТипов.Добавить("ПлатежноеПоручениеИсходящее",           "Платежное поручение исходящее");
	СписокТипов.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств", "Платежный ордер на списание денежных средств");
	
	ВыбранныйЭлемент = ВыбратьИзСписка(СписокТипов, Элемент);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйТип = ВыбранныйЭлемент.Значение;
	ФормаВыбора  = Документы[ВыбранныйТип].ПолучитьФормуВыбора(, Элемент);

	ФормаВыбора.Отбор.Организация.Установить(Организация);
	Если ВыбранныйТип = "РасходныйКассовыйОрдер" Тогда
		ФормаВыбора.Отбор.Контрагент.Установить(ФизЛицо);
	Иначе
		ФормаВыбора.Отбор.ФизЛицо.Установить(ФизЛицо);
	КонецЕсли;
	ФормаВыбора.Отбор.ВалютаВзаиморасчетовРаботника.Установить(ВалютаДокумента);
	
	Если ЗначениеЗаполнено(Элемент.Значение) 
		И ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка." + ВыбранныйТип) 
		Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // ВыданныеАвансыДокументАвансаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода документа аванса
// в строке табличной части "ВыданныеАвансы".
//
Процедура ВыданныеАвансыДокументАвансаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВыданныеАвансы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.ДокументАванса.СуммаДокумента;

	// Если ФизЛицо еще не было выбрано, заполним его 
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументАванса) И НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
	   	Если ТипЗнч(СтрокаТабличнойЧасти.ДокументАванса) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ФизЛицо = СтрокаТабличнойЧасти.ДокументАванса.Контрагент;
		Иначе
			ФизЛицо = СтрокаТабличнойЧасти.ДокументАванса.ФизЛицо;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВыданныеАвансыДокументАвансаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАКУПКА ТОВАРОВ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, Неопределено, Истина, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметку();
КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	
	УстановитьАвтоотметку();
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры //ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	ПриИзмененииСерии();

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказа
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка,, "Товары");

КонецПроцедуры //ТоварыЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода ПриходныйОрдер
// в строке табличной части "Товары".
//
Процедура ТоварыПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника);

КонецПроцедуры // ТоварыПриходныйОрдерНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОПЛАТА

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти       = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	ОсновнойДоговорКонтрагента = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;

	Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента)
	   И ОсновнойДоговорКонтрагента.Организация = Организация Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
	Иначе
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
	КонецЕсли;

	ПриИзмененииДоговора();

КонецПроцедуры // ОплатаПоставщикамКонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода договора контрагента
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры // ОплатаПоставщикамДоговорКонтрагентаПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента   = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные.ДоговорКонтрагента;
	Сделка               = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные.Сделка;
	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.ОплатаПоставщикам.ТекущаяКолонка = ЭлементыФормы.ОплатаПоставщикам.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли;

	// Тип выбираемого значения зависит от договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		Предупреждение("По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!");
		ЭлементыФормы.ОплатаПоставщикам.ТекущаяКолонка = ЭлементыФормы.ОплатаПоставщикам.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, "ЗаказПоставщику");

КонецПроцедуры // ОплатаПоставщикамСделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамСуммаПриИзменении(Элемент)

	// Надо пересчичать сумму взаиморасчетов.
	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ОплатаПоставщикамСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов"
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаТабличнойЧасти.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаТабличнойЧасти.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаТабличнойЧасти.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ОплатаПоставщикамКурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов"
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамКурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ОплатаПоставщикамКурсВзаиморасчетовПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
// в строке табличной части "Оплата поставщикам".
//
Процедура ОплатаПоставщикамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент,
	                                        СтрокаТабличнойЧасти.ДоговорКонтрагента, Неопределено, СтандартнаяОбработка);

КонецПроцедуры // ОплатаПоставщикамДоговорКонтрагентаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	СделкаАвтоОтметка    =Ложь;
	Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
			СделкаАвтоОтметка = (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		КонецЕсли;
	КонецЕсли;

	ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = СделкаАвтоОтметка;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметку();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметку();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить цену
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета);
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКонтрагентПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	ДоговорКонтрагента   = СтрокаТабличнойЧасти.Контрагент.ОсновнойДоговорКонтрагента;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
		Иначе
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	ИначеЕсли ДоговорКонтрагента.Организация = Организация Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТабличнойЧасти.ДоговорКонтрагента = ДоговорКонтрагента;
		Иначе
			СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
	КонецЕсли;

	ОчиститьСделкуВТабЧастиВозвратнаяТара(СтрокаТабличнойЧасти);

КонецПроцедуры // ВозвратнаяТараКонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ покупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка,, "ВозвратнаяТара");

КонецПроцедуры // ВозвратнаяТараЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, СтандартнаяОбработка);
	ОчиститьСделкуВТабЧастиВозвратнаяТара(СтрокаТабличнойЧасти);

КонецПроцедуры // ВозвратнаяТараДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода Контрагент
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараКонтрагентОчистка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти                    = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	СтрокаТабличнойЧасти.ДоговорКонтрагента = Неопределено;
	СтрокаТабличнойЧасти.Сделка             = Неопределено;

КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода ДоговорКонтрагента
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараДоговорКонтрагентаОчистка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти        = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	СтрокаТабличнойЧасти.Сделка = Неопределено;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сделка
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента   = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные.ДоговорКонтрагента;
	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.ВозвратнаяТара.ТекущаяКолонка = ЭлементыФормы.ВозвратнаяТара.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли;

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());

		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда

			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());

		Иначе

			СписокТипов.Добавить(Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить(Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());

		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если СписокТипов.Количество() = 1 Тогда
		ТипДокументаСделки = СписокТипов[0].Значение;
	Иначе
		// Пользователь выбирает тип расчетного документа
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат; // пользователь отказался от выбора
		КонецЕсли;

		ТипДокументаСделки = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);

	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ФормаВыбора.Открыть();

КонецПроцедуры // ВозвратнаяТараСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода ПриходныйОрдер
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника);

КонецПроцедуры // ВозвратнаяТараПриходныйОрдерНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОЧЕЕ

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Причее".
//
Процедура ПрочееНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Прочее.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПрочееНоменклатураПриИзменении()

Процедура ПрочееСуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Прочее.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

Процедура ПрочееСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Прочее.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// в строке табличной части "Прочее".
//
Процедура ПрочееЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка,, "Прочее");

КонецПроцедуры

Процедура ПрочееПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.БланкСтрогойОтчетности.ТолькоПросмотр = НЕ ДанныеСтроки.ПредъявленСФ;
КонецПроцедуры

Процедура ПрочееПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.Прочее.ТекущиеДанные;
	Если Колонка.Имя = "ПредъявленСФ" Тогда
		Если НЕ ТекущиеДанные.ПредъявленСФ Тогда
			ТекущиеДанные.БланкСтрогойОтчетности = Ложь;
			ТекущиеДанные.ДатаСФ      = '00010101';
			ТекущиеДанные.НомерСФ     = "";
			ТекущиеДанные.СчетФактура = Неопределено;
		КонецЕсли;
	ИначеЕсли Колонка.Имя = "БланкСтрогойОтчетности" Тогда
		Если ТекущиеДанные.БланкСтрогойОтчетности Тогда
			ТекущиеДанные.ДатаСФ      = ТекущиеДанные.ДатаВходящегоДокумента;
			ТекущиеДанные.НомерСФ     = ТекущиеДанные.НомерВходящегоДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Документ расчетов с контрагентом"
// табличного поля "Оплата поставщикам"
//
Процедура ОплатаПоставщикамДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ОплатаПоставщикам.ТекущиеДанные;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента,
														СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ОбновитьСсылкиСчетовФактур();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиВыданныеАвансы = ЭлементыФормы.ВыданныеАвансы.Колонки;
мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиОплата         = ЭлементыФормы.ОплатаПоставщикам.Колонки;
мКолонкиПрочее         = ЭлементыФормы.Прочее.Колонки;

мРазрешитьНулевыеЦеныВОпте = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();

мТерминалы                 = ПолучитьСерверТО().ПолучитьСписокУстройств(
   Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);

