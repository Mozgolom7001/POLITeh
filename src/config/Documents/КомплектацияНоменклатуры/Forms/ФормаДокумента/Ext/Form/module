////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мКолонкиКомплектующие;

Перем мОтражатьВРегламентированномУчете;

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Комплектующие,ЭлементыФормы.КоманднаяПанельКомплектующие.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  Нет
//
Процедура ДействиеПодбор()

	Перем Команда;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	ИмяТабличнойЧасти = "Комплектующие";

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов" , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"       , Склад);
	СтруктураПараметровПодбора.Вставить("Организация" , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);

	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры" , Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"          , Серия);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура                = Номенклатура;
		СтрокаТабличнойЧасти.Количество                  = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения            = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                 = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры  = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры           = Серия;
		ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ЭлементыФормы.Комплектующие.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Комплектующие.ТекущаяКолонка = ЭлементыФормы.Комплектующие.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаКомплектующихТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

//Процедура заполняет реквизиты формы НомераГТД и СтраныПроисхождения
//
Процедура ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения()

	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		ЭлементыФормы.НомерГТД.Значение                     = СерияНоменклатуры.НомерГТД;
		ЭлементыФормы.СтранаПроисхождения.Значение          = СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		ЭлементыФормы.НомерГТД.Значение                     = Справочники.НомераГТД.ПустаяСсылка();
		ЭлементыФормы.СтранаПроисхождения.Значение          = Справочники.КлассификаторСтранМира.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры //ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если его дата совпадает с текущей и вид операции документа = Комплектация.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	((НачалоДня(Дата) = НачалоДня(ТекущаяДата())) И (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость для тех колонок, видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	КолонкиКомплектующие              = ЭлементыФормы.Комплектующие.Колонки;
	ВидОперацииРазукомплектация       = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ВидОперацииКомплектация           = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ВидимостьСпособаСписанияКомплекта = (ВидОперацииРазукомплектация И ЗначениеЗаполнено(Заказ));

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.ДоляСтоимости,  ВидОперацииРазукомплектация);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СпособСписанияОстаткаТоваров, ВидОперацииКомплектация И ЗначениеЗаполнено(Заказ));

	КолонкиКомплектующие.ДоляСтоимости.АвтоОтметкаНезаполненного = ВидОперацииРазукомплектация;
	ЭлементыФормы.НадписьСпособСписанияОстаткаТоваров.Видимость  = ВидимостьСпособаСписанияКомплекта;
	ЭлементыФормы.СпособСписанияОстаткаТоваров.Видимость         = ВидимостьСпособаСписанияКомплекта;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность            = ОтражатьВБухгалтерскомУчете;

	ЭлементыФормы.НадписьНДСвСтоимостиТоваров.Видимость			 = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НДСвСтоимостиТоваров.Видимость				 = ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность для тех элементов формы, доступность которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступность()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // УстановитьДоступность()

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНеПолучены = Ложь;
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация, "Нал");
	мСложныйУчетНДС = Не ПараметрыНеПолучены И ПараметрыНУ.СложныйУчетНДС и Не ПараметрыНУ.ОрганизацияНеЯвляетсяПлательщикомНДС;

КонецПроцедуры // ОпределитьСложныйУчетНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	// быть может, это ввод на основании заказа покупателя
	Если ЭтоНовый() и ЗначениеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		 ИЛИ ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ")
		 ИЛИ ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			// определим, сколько в нем комплектов
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ПараметрОснование);
			Запрос.УстановитьПараметр("Товар", Перечисления.ТоварТара.Товар);

			Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыПокупателей.Номенклатура,
				|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
				|	ЗаказыПокупателей.КоличествоОстаток
				|	- ВЫБОР КОГДА Резервы.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Резервы.КоличествоОстаток КОНЕЦ
				|	- ВЫБОР КОГДА Размещения.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Размещения.КоличествоОстаток КОНЕЦ
				|	КАК КоличествоОстаток
				|
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки(, (ДоговорКонтрагента = ЗаказПокупателя.ДоговорКонтрагента)
				|													И (ЗаказПокупателя = &Ссылка)
				|													И (СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный))
				|													И (НЕ Номенклатура.Набор)
				|													И (НЕ Номенклатура.Комплект)
				|												) КАК ЗаказыПокупателей
				|
				|СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура               = ЗаказыПокупателей.Номенклатура
				| И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки зарезервированного товара
				|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Ссылка) КАК Резервы
				|ПО
				|	Резервы.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Резервы.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки размещенного товара
				|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя  = &Ссылка И ТоварТара = &Товар) КАК Размещения
				|ПО
				|	Размещения.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Размещения.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|ИТОГИ СУММА(КоличествоОстаток) ПО ЗаказыПокупателей.Номенклатура, ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|";
			ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыПокупателей.Номенклатура,
				|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
				|	ЗаказыПокупателей.КоличествоОстаток
				|	- ВЫБОР КОГДА Резервы.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Резервы.КоличествоОстаток КОНЕЦ
				|	- ВЫБОР КОГДА Размещения.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Размещения.КоличествоОстаток КОНЕЦ
				|	КАК КоличествоОстаток
				|
				|ИЗ
				|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, (ВнутреннийЗаказ = &Ссылка)
				|												И (СтатусПартии = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийТоваров.Купленный))
				|												И (НЕ Номенклатура.Набор)
				|												И (НЕ Номенклатура.Комплект)
				|											) КАК ЗаказыПокупателей
				|
				|СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура               = ЗаказыПокупателей.Номенклатура
				| И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки зарезервированного товара
				|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Ссылка) КАК Резервы
				|ПО
				|	Резервы.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Резервы.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки размещенного товара
				|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя  = &Ссылка И ТоварТара = &Товар) КАК Размещения
				|ПО
				|	Размещения.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Размещения.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|ИТОГИ СУММА(КоличествоОстаток) ПО ЗаказыПокупателей.Номенклатура, ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|";
			ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	СчетНаОплатуПокупателюТовары.Номенклатура,
				|	СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры,
				|	МАКСИМУМ(СчетНаОплатуПокупателюТовары.Количество) КАК КоличествоОстаток
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура = СчетНаОплатуПокупателюТовары.Номенклатура
				|	И
				|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
				|	И НЕ СчетНаОплатуПокупателюТовары.Номенклатура.Набор
				|	И НЕ СчетНаОплатуПокупателюТовары.Номенклатура.Комплект
				|
				|СГРУППИРОВАТЬ ПО
				|
				|	СчетНаОплатуПокупателюТовары.Номенклатура,
				|	СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|
				|ИТОГИ СУММА(КоличествоОстаток) ПО СчетНаОплатуПокупателюТовары.Номенклатура, СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|";
			КонецЕсли;

			ТаблицаКомплектов = Новый ТаблицаЗначений;
			ТаблицаКомплектов.Колонки.Добавить("Номенклатура",,,10);
			ТаблицаКомплектов.Колонки.Добавить("ХарактеристикаНоменклатуры",,"Характеристика номенклатуры",10);
			ТаблицаКомплектов.Колонки.Добавить("Количество",,,5);
			ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					Если ВыборкаПоХарактеристикам.КоличествоОстаток>0 Тогда
						НоваяСтрока = ТаблицаКомплектов.Добавить();
						НоваяСтрока.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
						НоваяСтрока.Количество                 = ВыборкаПоХарактеристикам.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ТаблицаКомплектов.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В документе "+СокрЛП(ПараметрОснование)+" комплекты отсутствуют!");
				Возврат;
			ИначеЕсли ТаблицаКомплектов.Количество() = 1 Тогда
				ВыбраннаяСтрока = ТаблицаКомплектов[0];
			Иначе
				ВыбраннаяСтрока = ТаблицаКомплектов.ВыбратьСтроку();
			КонецЕсли;
			Если ВыбраннаяСтрока <> Неопределено Тогда
				Заказ                        = ПараметрОснование;
				ВидОперации                  = Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация;
				Номенклатура                 = ВыбраннаяСтрока.Номенклатура;
				ХарактеристикаНоменклатуры   = ВыбраннаяСтрока.ХарактеристикаНоменклатуры;
				Количество                   = ВыбраннаяСтрока.Количество;
				ЕдиницаИзмерения             = Номенклатура.ЕдиницаХраненияОстатков;
				Коэффициент                  = ЕдиницаИзмерения.Коэффициент;
				Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					Склад                        = ПараметрОснование.СкладГруппа;
				ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
					Если ТипЗнч(Заказ.Заказчик) = Тип("СправочникСсылка.Склады") Тогда
						Склад                        = ПараметрОснование.Заказчик;
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнитьКомплектующие();

				// Заполнение документа
				ЗаполнитьТабличныеЧастиПередПроведением();

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СпособСписанияОстаткаТоваров) Тогда
			СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ДоляСтоимости");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Комплектующие".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Комплектующие.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиКомплектующие);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиКомплектующие);

	// Установить видимость/доступность реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьДоступность();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Комплектующие" Тогда
			СтраницаПанели.Заголовок = "Комплектующие (" + ДокументОбъект.Комплектующие.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ОбработкаПодбора(Комплектующие, ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

//Процедура - обработчик события "ПриИзмененииДанных" формы.
//
Процедура ПриИзмененииДанных()

	ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним + ", "+СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость/доступность реквизитов по виду операции.
	УстановитьВидимость();
	УстановитьДоступность();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Комплектующие", вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельКомплектующиеЗаполнить(Кнопка)

	Если Количество = 0 Тогда
		Предупреждение("Количество "+СокрЛП(Номенклатура)+" равно нулю! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ЗаполнитьКомплектующие();

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Комплектующие", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Комплектующие".
//
Процедура КоманднаяПанельКомплектующиеДействиеПодбор(Кнопка)

	ДействиеПодбор();

КонецПроцедуры // КоманднаяПанельКомплектующиеДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборОстаткиТоваровКомпании = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваровКомпании.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровКомпании.Прочитать();
		НаборОстаткиТоваровКомпании.Очистить();
		НаборОстаткиТоваровКомпании.Записать();
		НаборОстаткиТоваровОрганизаций = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваровОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровОрганизаций.Прочитать();
		НаборОстаткиТоваровОрганизаций.Очистить();
		НаборОстаткиТоваровОрганизаций.Записать();
		НаборОстаткиТоваровОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборОстаткиТоваровОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровОрганизаций.Прочитать();
		НаборОстаткиТоваровОрганизаций.Очистить();
		НаборОстаткиТоваровОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Если НачалоМесяца(Дата) <> НачалоМесяца(мТекущаяДатаДокумента) Тогда
		// Определим параметры сложного учета НДС.
		ОпределитьСложныйУчетНДС();
		УстановитьВидимость();
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода заказа покупателя.
//
Процедура ЗаказПриИзменении(Элемент)

	УстановитьВидимость();
	Если ЗначениеЗаполнено(Заказ) Тогда
		СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
	Иначе
		СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЕсли;

КонецПроцедуры // ЗаказПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ".
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивОтборов = Новый Массив;
	
	Если Не Организация.Пустая() Тогда
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Организация", Организация));
	КонецЕсли;
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов,);
	
КонецПроцедуры // ЗаказПокупателяНачалоВыбора()

// Процедура - обработчик события "Очистка" поля ввода заказа покупателя.
//
Процедура ЗаказОчистка(Элемент, СтандартнаяОбработка)

	УстановитьВидимость();
	Для каждого СтрокаКомплектующие из Комплектующие Цикл
		СтрокаКомплектующие.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	Конеццикла;	

КонецПроцедуры // ЗаказОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры.
//
Процедура НоменклатураПриИзменении(Элемент)

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если Номенклатура <> ЕдиницаИзмерения.Владелец Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		Коэффициент      = ЕдиницаИзмерения.Коэффициент;
	КонецЕсли; 

	Если Номенклатура <> СерияНоменклатуры.Владелец Тогда
		СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если Номенклатура <> ХарактеристикаНоменклатуры.Владелец Тогда
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения();
КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество комплектов.
//
Процедура КоличествоПриИзменении(Элемент)

	Если Количество <> 0 Тогда
		ТекстВопроса = "Заполнить табличную часть комплектующих?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьКомплектующие();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // КоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля едницы измерения.
//
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)

	// Установить коэффициент
	Коэффициент = ЕдиницаИзмерения.Коэффициент; 

	Если Количество <> 0 Тогда
		ТекстВопроса = "Заполнить табличную часть комплектующих?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьКомплектующие();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СкладКомпании.
//
Процедура СкладКомпанииНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладКомпанииНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров.
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // НДСвСтоимостиТоваровПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ КОМПЛЕКТУЮЩИЕ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Комплектующие.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТЧ.Коэффициент      = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;

	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

КонецПроцедуры // КомплектующиеНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеЕдиницаИзмеренияПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 

КонецПроцедуры // КомплектующиеЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Комплектующие".
//
Процедура КомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиКомплектующие, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Комплектующие.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если ЭлементыФормы.Комплектующие.Колонки.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Комплектующие" Тогда
		ОбработкаПодбора(Комплектующие, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

Процедура СерияНоменклатурыПриИзменении(Элемент)

	ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения();

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Комплектующие".
//
Процедура КомплектующиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Комплектующие".
//
Процедура КомплектующиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельКомплектующиеПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиКомплектующие = ЭлементыФормы.Комплектующие.Колонки;

