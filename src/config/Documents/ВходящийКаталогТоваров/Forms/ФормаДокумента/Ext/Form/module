
Перем ТекущиеЗначенияСвойств;
Перем ТекущиеЗначенияШтрихКодов;
Перем СтруктураСвойствЭлектронногоОбмена;
Перем ПоказатьТолькоНеопределенные;

Перем мВидНоменклатурыПоУмолчанию;
Перем мПроверкаНаличияСвойствНеНужна; 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗагрузитьСвойстваНоменклатуры(СтрокиСвойств, ОбъектНоменклатура, ЗаписыватьНоменклатуру = Истина, Отказ = Ложь, Сообщение = "")
	
	Попытка
	
		Номенклатура = ОбъектНоменклатура.Ссылка;	
		
		Для каждого СтрокаСвойствТовара Из СтрокиСвойств Цикл
				
			СвойствоЭлектронногоОбмена = Неопределено;
				
			Если СтруктураСвойствЭлектронногоОбмена.Свойство(СтрокаСвойствТовара.НаименованиеСвойства, СвойствоЭлектронногоОбмена) Тогда
				
				Если НЕ ЗначениеЗаполнено(СвойствоЭлектронногоОбмена.СвойствоНоменклатуры) Тогда
					Продолжить;
				КонецЕсли;
					
				НаборЗаписейСвойствЗначений = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
				НаборЗаписейСвойствЗначений.Отбор.Объект.Установить(Номенклатура);
				НаборЗаписейСвойствЗначений.Отбор.Свойство.Установить(СвойствоЭлектронногоОбмена.СвойствоНоменклатуры);
				
				СтрокаСвойствОбработки = НаборЗаписейСвойствЗначений.Добавить();
				СтрокаСвойствОбработки.Объект = Номенклатура;
				СтрокаСвойствОбработки.Свойство = СвойствоЭлектронногоОбмена.СвойствоНоменклатуры;				
					
				Если СвойствоЭлектронногоОбмена.СвойствоНоменклатуры.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
					
					СтрокаСвойствОбработки.Значение = СтрокаСвойствТовара.ЗначениеСвойства;
					
				ИначеЕсли СвойствоЭлектронногоОбмена.СвойствоНоменклатуры.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
					
					Если ЗначениеЗаполнено(СтрокаСвойствТовара.ЗначениеСвойства) Тогда
					
						ЗначениеСвойства = Неопределено;
						Запрос = Новый Запрос();
						Запрос.Текст = "ВЫБРАТЬ Первые 1
									   |	ЗначенияСвойствОбъектов.Ссылка
									   |ИЗ
									   |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
									   |ГДЕ
									   |	ЗначенияСвойствОбъектов.Владелец = &Владелец
									   |	И ЗначенияСвойствОбъектов.Наименование = &Наименование";
									   
						Запрос.УстановитьПараметр("Владелец", СвойствоЭлектронногоОбмена.СвойствоНоменклатуры);
						Запрос.УстановитьПараметр("Наименование", СтрокаСвойствТовара.ЗначениеСвойства);
						
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							
							ЗначениеСвойства = Выборка.Ссылка;
							
						Иначе
							
							ОбъектСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
							ОбъектСвойства.Владелец = СвойствоЭлектронногоОбмена.СвойствоНоменклатуры;
							ОбъектСвойства.Наименование = СтрокаСвойствТовара.ЗначениеСвойства;
							ОбъектСвойства.Записать();
							
							ЗначениеСвойства = ОбъектСвойства.Ссылка;
							
						КонецЕсли;
						
					Иначе
						ЗначениеСвойства = СтрокаСвойствТовара.ЗначениеСвойства;
					КонецЕсли;
					
					СтрокаСвойствОбработки.Значение = ЗначениеСвойства;
					
				Иначе
					СтрокаСвойствОбработки.Значение = СтрокаСвойствТовара.ЗначениеСвойства;
				КонецЕсли;
				
				НаборЗаписейСвойствЗначений.Записать();							
							
			ИначеЕсли СтрокаСвойствТовара.НаименованиеСвойства = "ИСО3166" Тогда
				
				ЗначениеСвойстваИСО3166 = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтрокаСвойствТовара.ЗначениеСвойства);
				Если Не ОбъектНоменклатура.СтранаПроисхождения = ЗначениеСвойстваИСО3166 Тогда
					ОбъектНоменклатура.СтранаПроисхождения = ЗначениеСвойстваИСО3166;
				КонецЕсли;
				ЗаписыватьНоменклатуру = Истина;
				
			КонецЕсли;
				
		КонецЦикла;	
				
		Если ЗаписыватьНоменклатуру
			И Не Отказ и ОбъектНоменклатура.Модифицированность() Тогда
			
			ОбъектНоменклатура.Записать();								
					
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		Сообщение = ОписаниеОшибки();
		Сообщить("При записи свойств номенклатуры: """ + Номенклатура + """ обнаружены ошибки. " + Сообщение);
	КонецПопытки;	
	
	
КонецПроцедуры 

Процедура ЗагрузитьШтрихКодыНоменклатуры(СтрокиШтрихКодов, Номенклатура, ХарактеристикаНоменклатуры, ЕдиницаИзмерения, НеЗагружатьЕслиШтрихКодУстановленДляДругойНоменклатуры = Неопределено, Отказ = Ложь, Сообщение = "")
	
	БылиОшибки = Ложь;
	НачатьТранзакцию();
	
	Для каждого СтрокаШтрихКода Из СтрокиШтрихКодов Цикл
		
		ШтрихКод = Сред(СтрокаШтрихКода.ШтрихКодКонтрагента,2);
		
		ШтрихКодЗагружен           = Ложь;
		ШтрихКодДругойНоменклатуры = Ложь;
		НайденныеЗаписи = ПроверитьУникальностьШтрихКода(ШтрихКод);
		Для каждого НайденныйШтрихКод Из НайденныеЗаписи Цикл
			
			Если НайденныйШтрихКод.Владелец = Номенклатура и НайденныйШтрихКод.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры Тогда
				ШтрихКодЗагружен           = Истина;
			Иначе
				ШтрихКодДругойНоменклатуры = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ШтрихКодЗагружен Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШтрихКодДругойНоменклатуры Тогда
			ТекстОшибки = "" + ШтрихКод + ". Штрих код установлен для объекта: " + Строка(НайденныеЗаписи[0].Владелец.Код) + " " + Строка(НайденныеЗаписи[0].Владелец.Наименование);
			
			Если НеЗагружатьЕслиШтрихКодУстановленДляДругойНоменклатуры = Неопределено Тогда
				Ответ = Вопрос(ТекстОшибки + Символы.ПС + "Показать записи с таким штрихкодом?", РежимДиалогаВопрос.ДаНетОтмена);
				
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					ОтменитьТранзакцию();
					Предупреждение("Операция не выполнена!");
					Возврат;
				ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
					НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
					НаборЗаписей.Прочитать();
					ФормаНаборЗаписей = НаборЗаписей.ПолучитьФорму("ФормаНабораЗаписей");
					ФормаНаборЗаписей.ЭлементыФормы.РегистрСведенийНаборЗаписей.ОтборСтрок.Штрихкод.Значение = ШтрихКод;
					ФормаНаборЗаписей.ЭлементыФормы.РегистрСведенийНаборЗаписей.ОтборСтрок.Штрихкод.Использование = Истина;
					ФормаНаборЗаписей.ОткрытьМодально();
					
					НайденныеЗаписи = ПроверитьУникальностьШтрихКода(ШтрихКод);
					Если Не НайденныеЗаписи.Количество() Тогда //Найдены неуникальные записи.
						ШтрихКодДругойНоменклатуры = Ложь;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли НеЗагружатьЕслиШтрихКодУстановленДляДругойНоменклатуры = Истина Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если ШтрихКодДругойНоменклатуры Тогда
				Сообщение = Сообщение + Символы.ПС + ТекстОшибки;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
				
		МенеджерЗаписи.ШтрихКод                   = ШтрихКод;
		МенеджерЗаписи.ТипШтрихкода               = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
		МенеджерЗаписи.Владелец                   = Номенклатура;
		МенеджерЗаписи.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		МенеджерЗаписи.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		МенеджерЗаписи.Качество           		  = Справочники.Качество.Новый;
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			Сообщение = Сообщение + Символы.ПС + ОписаниеОшибки();
			Отказ = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры 

Функция ЗагрузитьСтрокуКаталога(СтрокаКаталога, НастройкиЗагрузки)
	
	Отказ = Ложь;
	НачатьТранзакцию();
	СообщениеСтроки = "";
	
	Если Не ЗначениеЗаполнено(мВидНоменклатурыПоУмолчанию) Тогда
		мВидНоменклатурыПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидНоменклатуры");
	КонецЕсли;
	
	НовыйОбъект = Не ЗначениеЗаполнено(СтрокаКаталога.Номенклатура);
	Если НовыйОбъект Тогда
		
		ОбъектНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
		ОбъектНоменклатура.Наименование            = СтрокаКаталога.НаименованиеНоменклатурыКонтрагента;
		ОбъектНоменклатура.НаименованиеПолное      = СтрокаКаталога.НаименованиеНоменклатурыКонтрагента;
		ОбъектНоменклатура.БазоваяЕдиницаИзмерения = СтрокаКаталога.ОКЕИ;
		ОбъектНоменклатура.ВидНоменклатуры = мВидНоменклатурыПоУмолчанию;
		
		Если Не ЗначениеЗаполнено(мВидНоменклатурыПоУмолчанию) Тогда
			
			Отказ = Истина;
			СообщениеСтроки = "В настройках пользователя не указан вид номенклатуры по умолчанию. Задайте вид номенклатуры и повторите операцию.";
			
		Иначе
			
			Попытка
				ОбъектНоменклатура.Записать();
			Исключение
				Отказ = Истина;
				СообщениеСтроки = ОписаниеОшибки();
			КонецПопытки;			
			
		КонецЕсли;		
				
		Если Не Отказ Тогда
			
			Номенклатура = ОбъектНоменклатура.Ссылка;
			
			ЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЕдиницаОбъект.Наименование            = Номенклатура.БазоваяЕдиницаИзмерения.Наименование;
			ЕдиницаОбъект.ЕдиницаПоКлассификатору = Номенклатура.БазоваяЕдиницаИзмерения;
			ЕдиницаОбъект.Коэффициент             = 1;
			ЕдиницаОбъект.Владелец                = Номенклатура;
			
			Попытка
				ЕдиницаОбъект.Записать();
			Исключение
				Отказ = Истина;
				СообщениеСтроки = ОписаниеОшибки();
			КонецПопытки;
				
			ЕдиницаСсылка = ЕдиницаОбъект.Ссылка;
			ОбъектНоменклатура.ЕдиницаХраненияОстатков = ЕдиницаСсылка;
			ОбъектНоменклатура.ЕдиницаДляОтчетов        = ЕдиницаСсылка;
			
		КонецЕсли; 
		
	Иначе
		
		Номенклатура = СтрокаКаталога.Номенклатура;
		ЕдиницаСсылка = СтрокаКаталога.ЕдиницаИзмерения;
		ОбъектНоменклатура = Номенклатура.ПолучитьОбъект();
		
	КонецЕсли;
	
	Если НовыйОбъект или НастройкиЗагрузки.ПеремещатьСуществующиеЭлементыВГруппу Тогда
		Если Не ОбъектНоменклатура.Родитель = НастройкиЗагрузки.ГруппаНоменклатуры Тогда
			ОбъектНоменклатура.Родитель = НастройкиЗагрузки.ГруппаНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("СтрокаТаблицыТовары", СтрокаКаталога.НомерСтроки);
	
	Если Не Отказ и (НовыйОбъект или НастройкиЗагрузки.ОбновлятьСвойстваСуществующимЭлементам) Тогда
		ЗагрузитьСвойстваНоменклатуры(СвойстваНоменклатуры.НайтиСтроки(СтруктураОтбора), ОбъектНоменклатура, Ложь, Отказ, СообщениеСтроки);
	КонецЕсли;
	
	Если Не Отказ и (НовыйОбъект или НастройкиЗагрузки.ОбновлятьШтрихКодыСуществующимЭлементам) Тогда
		ЗагрузитьШтрихКодыНоменклатуры(ШтрихКодыНоменклатуры.НайтиСтроки(СтруктураОтбора), Номенклатура, СтрокаКаталога.ХарактеристикаНоменклатуры, ЕдиницаСсылка, НастройкиЗагрузки.НеЗагружатьЕслиШтрихКодУстановленДляДругойНоменклатуры, Отказ, СообщениеСтроки);
	КонецЕсли;
	
	Если Не Отказ и ОбъектНоменклатура.Модифицированность() Тогда
		Попытка
			ОбъектНоменклатура.Записать();
		Исключение
			Отказ = Истина;
			СообщениеСтроки = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщить("Не удалось загрузить строку каталога: " + СтрокаКаталога.НомерСтроки + " . " + СообщениеСтроки);
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		
		Если Не ПустаяСтрока(СообщениеСтроки) Тогда
			Сообщить("При загрузке строки каталога: " + СтрокаКаталога.НомерСтроки + " обнаружены ошибки. " + СообщениеСтроки);
		КонецЕсли; 
		
		Если НовыйОбъект Тогда
			СтрокаКаталога.Номенклатура = Номенклатура;
			СтрокаКаталога.ЕдиницаИзмерения = ЕдиницаСсылка;
		КонецЕсли;
		
	КонецЕсли;
	СтрокаКаталога.Пометка = Не Отказ;
	
	Возврат Не Отказ;
	
КонецФункции

Процедура ПроизвестиПроверкуНаличиеНесопоставленныхСвойств()
		
	// определим все свойска которые не сопоставлены
	ВременнаяТаблицаВсехСвойств = СвойстваНоменклатуры.Выгрузить(, "НаименованиеСвойства");
	ВременнаяТаблицаВсехСвойств.Свернуть("НаименованиеСвойства");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СвойстваНоменклатурыЭлектронногоОбмена.Ссылка
	               |ИЗ
	               |	Справочник.СвойстваНоменклатурыЭлектронногоОбмена КАК СвойстваНоменклатурыЭлектронногоОбмена
				   |ГДЕ
				   |	СвойстваНоменклатурыЭлектронногоОбмена.Код В (&МассивКодов)
				   |	И СвойстваНоменклатурыЭлектронногоОбмена.СвойствоНоменклатуры = &ПустоеСвойство";
				   
	Запрос.УстановитьПараметр("МассивКодов", ВременнаяТаблицаВсехСвойств.ВыгрузитьКолонку("НаименованиеСвойства"));
	Запрос.УстановитьПараметр("ПустоеСвойство", ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка());
	ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
		
	мПроверкаНаличияСвойствНеНужна = Истина;
	
	Если ТаблицаСвойств.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтветПользователя = Вопрос("Обнаружены свойства которым не заданы сопоставления для обмена. Установить сопоставление свойств?", 
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСпискаСвойств = Справочники.СвойстваНоменклатурыЭлектронногоОбмена.ПолучитьФормуСписка();
	ФормаСпискаСвойств.мМассивСвойствДляОбменаНоменклатурой = ТаблицаСвойств.ВыгрузитьКолонку("Ссылка");
	ФормаСпискаСвойств.ОткрытьМодально();
	
	СтруктураСвойствЭлектронногоОбмена = ЭлектронныеДокументы.ПолучитьСтруктуруСвойствНоменклатурыЭлектронногоОбмена();
	ЭлементыФормы.СвойстваНоменклатуры.ОбновитьСтроки();	
	
КонецПроцедуры

Функция ЗагрузитьСтрокиКаталога(СтрокиКаталога)
	
	ПроизвестиПроверкуНаличиеНесопоставленныхСвойств();
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройкиЗагрузкиНоменклатуры");
	ФормаНастройки.СтрокиКаталога = СтрокиКаталога;	
	
	Если ФормаНастройки.ОткрытьМодально() = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого СтрокаКаталога Из СтрокиКаталога Цикл
		
		ЗагрузитьСтрокуКаталога(СтрокаКаталога, ФормаНастройки);		
		
	КонецЦикла;	
	
	ОбновитьТекущиеЗначенияСвойств(ЭлементыФормы.КаталогТоваров.ТекущиеДанные);
	ОбновитьТекущиеЗначенияШтрихКодов(ЭлементыФормы.КаталогТоваров.ТекущиеДанные);
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьТекущиеЗначенияСвойств(СтрокаТовара)

	Если СтрокаТовара = Неопределено или Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		ТекущиеЗначенияСвойств    = Неопределено;
	Иначе
		ТекущиеЗначенияСвойств = Новый Структура;
		
		СтруктураОтбора = Новый Структура("СтрокаТаблицыТовары", СтрокаТовара.НомерСтроки);
		
		ЗначенияСвойствОбъектов = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьНаборЗаписей();
		ЗначенияСвойствОбъектов.Отбор.Объект.Установить(СтрокаТовара.Номенклатура);
		
		СвойстваТовара = СвойстваНоменклатуры.НайтиСтроки(СтруктураОтбора);
		
		Для каждого СтрокаСвойствТовара Из СвойстваТовара Цикл
			
			СвойствоЭлектронногоОбмена = Неопределено;
			
			Если СтруктураСвойствЭлектронногоОбмена.Свойство(СтрокаСвойствТовара.НаименованиеСвойства, СвойствоЭлектронногоОбмена) Тогда
				
				ЗначенияСвойствОбъектов.Отбор.Свойство.Установить(СвойствоЭлектронногоОбмена.СвойствоНоменклатуры);
				ЗначенияСвойствОбъектов.Прочитать();
				Если ЗначенияСвойствОбъектов.Количество() Тогда
					ТекущиеЗначенияСвойств.Вставить(СтрокаСвойствТовара.НаименованиеСвойства, Новый Структура("Значение,Представление", ЗначенияСвойствОбъектов[0].Значение, Формат(ЗначенияСвойствОбъектов[0].Значение, "ЧГ=")));
				КонецЕсли;
				
			ИначеЕсли СтрокаСвойствТовара.НаименованиеСвойства = "ИСО3166" Тогда
				Если ЗначениеЗаполнено(СтрокаТовара.Номенклатура.СтранаПроисхождения) Тогда
					ТекущиеЗначенияСвойств.Вставить(СтрокаСвойствТовара.НаименованиеСвойства, Новый Структура("Значение,Представление", 
						СтрокаТовара.Номенклатура.СтранаПроисхождения, Формат(СтрокаТовара.Номенклатура.СтранаПроисхождения.Код, "ЧГ=")));
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЭлементыФормы.СвойстваНоменклатуры.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ОбновитьТекущиеЗначенияШтрихКодов(СтрокаТовара)

	Если СтрокаТовара = Неопределено или Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		ТекущиеЗначенияШтрихКодов = Неопределено;
	Иначе
		
		ТекущиеЗначенияШтрихКодов = Новый Структура;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Штрихкоды.Штрихкод,
		|	Штрихкоды.ТипШтрихкода,
		|	Штрихкоды.ЕдиницаИзмерения
		|	
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|ГДЕ
		|	Штрихкоды.Штрихкод В(&Штрихкоды)
		|	И Штрихкоды.Владелец = &Номенклатура
		|	И Штрихкоды.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
		
		Запрос.УстановитьПараметр("Номенклатура", СтрокаТовара.Номенклатура);
		Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТовара.ХарактеристикаНоменклатуры);
		
		ШтрихКодыТовара = Новый Массив;
		Для каждого СтрокаШтрихКода Из ШтрихКодыНоменклатуры.НайтиСтроки(Новый Структура("СтрокаТаблицыТовары", СтрокаТовара.НомерСтроки)) Цикл
			ШтрихКодыТовара.Добавить(Сред(СтрокаШтрихКода.ШтрихКодКонтрагента,2))
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("Штрихкоды", ШтрихКодыТовара);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекущиеЗначенияШтрихКодов.Вставить("Ш" + Выборка.Штрихкод, Новый Структура("ТипШтрихкода, ЕдиницаИзмерения", 
				Выборка.ТипШтрихкода, Выборка.ЕдиницаИзмерения));
		КонецЦикла;
		
	КонецЕсли;
	ЭлементыФормы.ШтрихКодыНоменклатуры.ОбновитьСтроки();
	
КонецПроцедуры

Процедура УстановитьОтборСвязныхТаблиц(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.СвойстваНоменклатуры. ОтборСтрок.СтрокаТаблицыТовары.Установить(-1);
		ЭлементыФормы.ШтрихКодыНоменклатуры.ОтборСтрок.СтрокаТаблицыТовары.Установить(-1);
	Иначе
		ЭлементыФормы.СвойстваНоменклатуры. ОтборСтрок.СтрокаТаблицыТовары.Установить(ТекущиеДанные.НомерСтроки);
		ЭлементыФормы.ШтрихКодыНоменклатуры.ОтборСтрок.СтрокаТаблицыТовары.Установить(ТекущиеДанные.НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры // () 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ПередОткрытием" Формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПередОткрытиемВходящегоДокументаВФорме(Отказ, СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма);
	
	СтруктураСвойствЭлектронногоОбмена = ЭлектронныеДокументы.ПолучитьСтруктуруСвойствНоменклатурыЭлектронногоОбмена();
	ПоказатьТолькоНеопределенные = Ложь;		
	мВидНоменклатурыПоУмолчанию = Неопределено;
		
КонецПроцедуры

// Процедура - обаботчик события "ПослеЗаписи" Формы
//
Процедура ПослеЗаписи() Экспорт
	
	ЭлектронныеДокументы.ПослеЗаписиФормыДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обаботчик события, при нажатии на кнопку "Структура подчиненности документа" Командной панели "ДействияФормы"
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Принять к работе" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыПринятьКРаботе(Кнопка)
	
	Если Товары.Найти(Истина, "Пометка") = Неопределено Тогда
		Ответ = Вопрос("Не обработана ни одна строка входящего каталога товаров. Загрузить все строки каталога?", РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена 
			Или Не ЗагрузитьСтрокиКаталога(Товары) Тогда
			
			Возврат;
			
		КонецЕсли;		
				
	КонецЕсли;
	
	Сообщение = "";
	Отказ = Ложь;
	ДокументТоварКРаботе = Неопределено;
	ПринятьКРаботе(Отказ, Сообщение, ДокументТоварКРаботе);
	
	Если Отказ Тогда
		Сообщить("Прием товара к работе не произведен:"+Сообщение);
		Предупреждение("Операция не выполнена!")
	Иначе
		ДокументТоварКРаботе.ПолучитьФорму(, ВладелецФормы).Открыть();
		ПослеЗаписи();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриАктивизацииСтроки"  табличного поля "КаталогТоваров"
//
Процедура КаталогТоваровПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборСвязныхТаблиц     (Элемент.ТекущиеДанные);
	ОбновитьТекущиеЗначенияСвойств   (Элемент.ТекущиеДанные);
	ОбновитьТекущиеЗначенияШтрихКодов(Элемент.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "Номенклатура" табличного поля "КаталогТоваров"
//
Процедура КаталогТоваровНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.КаталогТоваров.ТекущиеДанные;
	
	Если Не ТекущиеДанные.Номенклатура = ТекущиеДанные.ХарактеристикаНоменклатуры.Владелец Тогда
		ТекущиеДанные.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли; 
	
	Если Не ТекущиеДанные.Номенклатура = ТекущиеДанные.ЕдиницаИзмерения.Владелец Тогда
		ТекущиеДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		ТекущиеДанные.ЕдиницаИзмерения = ЭлектронныеДокументы.ПолучитьЕдиницуИзмеренияНоменклатурыПоКлассификатору(ТекущиеДанные.Номенклатура, ТекущиеДанные.ОКЕИ);
	КонецЕсли; 
	
	ТекущиеДанные.Пометка = Ложь;
	ОбновитьТекущиеЗначенияСвойств(ТекущиеДанные);
	ОбновитьТекущиеЗначенияШтрихКодов(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Отбор по неопределенным строкам" Командной панели "КоманднаяПанельКаталогТоваров"
//
Процедура КоманднаяПанельКаталогТоваровПоказатьТолькоНеопределенные(Кнопка)
	
	Отбор = ЭлементыФормы.КаталогТоваров.ОтборСтрок.Номенклатура;
	ПоказатьТолькоНеопределенные = Не ПоказатьТолькоНеопределенные;
	Если ПоказатьТолькоНеопределенные Тогда
		Отбор.Установить(Справочники.Номенклатура.ПустаяСсылка());
	Иначе
		Отбор.Использование = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.КаталогТоваров.НастройкаОтбораСтрок.Номенклатура.Доступность = Не ПоказатьТолькоНеопределенные;
	ЭлементыФормы.КоманднаяПанельКаталогТоваров.Кнопки.ПоказатьТолькоНеопределенные.Пометка = ПоказатьТолькоНеопределенные;
	ЭлементыФормы.КоманднаяПанельКаталогТоваров.Кнопки.Действия.Кнопки.ПоказатьТолькоНеопределенные.Пометка = ПоказатьТолькоНеопределенные;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриПолученииДанных"  табличного поля "СвойстваНоменклатуры"
//
Процедура СвойстваНоменклатурыПриПолученииДанных(Элемент, ОформленияСтрок)
		
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		СвойствоЭлектронногоОбмена = Неопределено;
		Если СтруктураСвойствЭлектронногоОбмена.Свойство(ДанныеСтроки.НаименованиеСвойства, СвойствоЭлектронногоОбмена) Тогда
			Если Не ЗначениеЗаполнено(СвойствоЭлектронногоОбмена.СвойствоНоменклатуры) Тогда
				ОформлениеСтроки.ЦветТекста = 	WebЦвета.Серый;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущиеЗначенияСвойств = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойства = Неопределено;
		Если ТекущиеЗначенияСвойств.Свойство(ДанныеСтроки.НаименованиеСвойства, ЗначениеСвойства) Тогда
			ОформлениеСтроки.Ячейки.ТекущееЗначение.Текст = "" + ЗначениеСвойства.Представление;
			ОформлениеСтроки.Ячейки.ТекущееЗначение.ОтображатьТекст = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриПолученииДанных"  табличного поля "ШтрихКодыНоменклатуры"
//
Процедура ШтрихКодыНоменклатурыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если ТекущиеЗначенияШтрихКодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ЗначениеШтрихКода = Неопределено;
		Если ТекущиеЗначенияШтрихКодов.Свойство("Ш" + Сред(ДанныеСтроки.ШтрихКодКонтрагента,2), ЗначениеШтрихКода) Тогда
			
			Для каждого КлючИЗначение Из ЗначениеШтрихКода Цикл
				ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ].Текст = КлючИЗначение.Значение;
				ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ].ОтображатьТекст = Истина;				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Загрузить выбранные строки каталога" Командной панели "КоманднаяПанельКаталогТоваров"
//
Процедура КоманднаяПанельКаталогТоваровЗагрузитьВыбранныеСтрокиКаталога(Кнопка)
	
	ЗагрузитьСтрокиКаталога(ЭлементыФормы.КаталогТоваров.ВыделенныеСтроки)
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Загрузить все строки каталога" Командной панели "КоманднаяПанельКаталогТоваров"
//
Процедура КоманднаяПанельКаталогТоваровЗагрузитьВсеСтрокиКаталога(Кнопка)
	
	ЗагрузитьСтрокиКаталога(Товары)
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Установить выбранные свойства" Командной панели "КоманднаяПанельСвойстваНоменклатуры"
//
Процедура КоманднаяПанельСвойстваНоменклатурыУстановитьВыбранныеСвойства(Кнопка)
	
	Если ЭлементыФормы.КаталогТоваров.ТекущиеДанные = Неопределено или Не ЗначениеЗаполнено(ЭлементыФормы.КаталогТоваров.ТекущиеДанные.Номенклатура) Тогда
		Предупреждение("Не задан товар для установки свойств!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСвойстваНоменклатуры(ЭлементыФормы.СвойстваНоменклатуры.ВыделенныеСтроки, ЭлементыФормы.КаталогТоваров.ТекущиеДанные.Номенклатура.ПолучитьОбъект());
	ОбновитьТекущиеЗначенияСвойств(ЭлементыФормы.КаталогТоваров.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Установить все свойства текущей номенклатуры" Командной панели "КоманднаяПанельСвойстваНоменклатуры"
//
Процедура КоманднаяПанельСвойстваНоменклатурыУстановитьВсеСвойстваТекущейНоменклатуры(Кнопка)
	
	СтрокаТовара = ЭлементыФормы.КаталогТоваров.ТекущиеДанные;
	Если СтрокаТовара = Неопределено или Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		Предупреждение("Не задан товар для установки свойств!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСвойстваНоменклатуры(СвойстваНоменклатуры.НайтиСтроки(Новый Структура("СтрокаТаблицыТовары", СтрокаТовара.НомерСтроки)), СтрокаТовара.Номенклатура.ПолучитьОбъект());
	ОбновитьТекущиеЗначенияСвойств(ЭлементыФормы.КаталогТоваров.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Установить выбранные штрихкоды" Командной панели "КоманднаяПанельШтрихКодыНоменклатуры"
//
Процедура КоманднаяПанельШтрихКодыНоменклатурыУстановитьВыбранныеШтрихкоды(Кнопка)
	
	СтрокаТовара = ЭлементыФормы.КаталогТоваров.ТекущиеДанные;
	Если СтрокаТовара = Неопределено или Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		Предупреждение("Не задан товар для обновления штрикодов!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьШтрихКодыНоменклатуры(ЭлементыФормы.ШтрихКодыНоменклатуры.ВыделенныеСтроки, СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры, СтрокаТовара.ЕдиницаИзмерения);
	ОбновитьТекущиеЗначенияШтрихКодов(ЭлементыФормы.КаталогТоваров.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Установить все штрихкоды текущей номенклатуры" Командной панели "КоманднаяПанельШтрихКодыНоменклатуры"
//
Процедура КоманднаяПанельШтрихКодыНоменклатурыУстановитьВсеШтрихКодыТекущейНоменклатуры(Кнопка)
	
	СтрокаТовара = ЭлементыФормы.КаталогТоваров.ТекущиеДанные;
	Если СтрокаТовара = Неопределено или Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		Предупреждение("Не задан товар для обновления штрикодов!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьШтрихКодыНоменклатуры(ШтрихКодыНоменклатуры.НайтиСтроки(Новый Структура("СтрокаТаблицыТовары", СтрокаТовара.НомерСтроки)), СтрокаТовара.Номенклатура, СтрокаТовара.ХарактеристикаНоменклатуры, СтрокаТовара.ЕдиницаИзмерения);
	ОбновитьТекущиеЗначенияШтрихКодов(ЭлементыФормы.КаталогТоваров.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "ЕдиницаИзмерения1" табличного поля "КаталогТоваров"
//
Процедура КаталогТоваровЕдиницаИзмерения1ПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.КаталогТоваров.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) и Не ТекущиеДанные.ЕдиницаИзмерения.ЕдиницаПоКлассификатору = ТекущиеДанные.ОКЕИ Тогда
		Предупреждение("Выбранная единица измерения """ + ТекущиеДанные.ЕдиницаИзмерения + """ не соответствует классификатору контрагента """ + ТекущиеДанные.ОКЕИ + """!");
		ТекущиеДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьСвойстваСопоставленияНоменклатуры()
	
	// показать учетные записи обмена данными
	ФормаСпискаСвойств = Справочники.СвойстваНоменклатурыЭлектронногоОбмена.ПолучитьФормуСписка();
	ФормаСпискаСвойств.ОткрытьМодально();
	
	СтруктураСвойствЭлектронногоОбмена = ЭлектронныеДокументы.ПолучитьСтруктуруСвойствНоменклатурыЭлектронногоОбмена();
	ЭлементыФормы.СвойстваНоменклатуры.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельСвойстваНоменклатурыСвойстваНоменклатурыДляОбмена(Кнопка)
	
	ОтобразитьСвойстваСопоставленияНоменклатуры();	
	
КонецПроцедуры

// обработчик показа состава файла обмена
Процедура ДействияФормыПоказатьДанныеОбмена(Кнопка)
	
	ЭлектронныеДокументы.ПоказатьДанныеОбмена(ЭтотОбъект);	
	
КонецПроцедуры

// форма параметров электронного обмена документами
Процедура ДействияФормыПараметрыЭлектронногоОбменаДокументами(Кнопка)
	
	ЭлектронныеДокументы.ПоказатьПараметрыВходящегоДокумента(ЭтотОбъект);	
	
КонецПроцедуры

// показ примечания
Процедура ПримечаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПоказатьДлинныеСтроковыеДанные(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриОткрытии()
	Если НЕ ЭтоНовый() Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

мПроверкаНаличияСвойствНеНужна = Ложь;
