Перем СтруктураНачальныхНастроек;

Перем мВалютаРегламентированногоУчета;
Перем мУказаниеСкладовВТЧ;
Перем мМногоЗаказов;
Перем мЕстьКасса;
Перем мКартинкиСПометками;

Перем мСписокДеревоМакетов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция преобразует дерево в список
//
// Параметры
//
// Возвращаемое значение:
//
Функция ПреобразоватьДеревоВСписок(ИсходноеДерево)

	СЗ = Новый СписокЗначений;

	Для Каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл
		СЗ.Добавить(СтрокаДерева.Имя, СтрокаДерева.Текст);
		СЗ.СортироватьПоПредставлению();
	КонецЦикла;

	Возврат СЗ;

КонецФункции // ПреобразоватьДеревоВСписок()

// Функция производит поиск значения в списке по Представлению
//
Функция НайтиПоПредставлению(Список, Представление)
	
	Для каждого Значение Из Список Цикл
		Если Значение.Представление = Представление Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// <Процедура получает доступные макты для печати документа и востанвливает настройку>
//
// Параметры
//  <ВосстанавливатьЗначения>  – <Булево> – <Восстаналивать сохраненные значения настроек>
//  <ПоУмолчаниюНомерВСписке>  – <Числа> – <Номер (по умолчанию) позиции в списке макетов для печати>
//  <ВидДокумента>             – <Строка> – <Имя документа для которого необходимо получить макеты печати>
//  <Макеты>                   – <Строка> – <Имя которое соответствует имени списка значений и переменной которая будет хранить текущий макет>
//
Процедура ЗаполнитьВостановитьСписокМакетов(ВосстанавливатьЗначения, ПоУмолчаниюНомерВСписке, ВидДокумента, Макеты)
	Перем СоответствиеМакетов;

	ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы[ВидДокумента].СоздатьДокумент().Ссылка, Документы[ВидДокумента].СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	Если мСписокДеревоМакетов = Неопределено Тогда
		мСписокДеревоМакетов = Новый Структура;
	КонецЕсли;
	мСписокДеревоМакетов.Вставить(ВидДокумента, ДеревоМакетов);
	
	ЭлементыФормы[Макеты].СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетов);
	
	Если ВосстанавливатьЗначения Тогда
		ВосстановленноеЗначение = ВосстановитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_" + Макеты);
		
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы[Макеты].СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы[Макеты].СписокВыбора.Получить(ПоУмолчаниюНомерВСписке), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы[Макеты].СписокВыбора.Получить(ПоУмолчаниюНомерВСписке);
	КонецЕсли;
	ЭтаФорма[Макеты] = ТекущийМакет.Значение;

КонецПроцедуры // ЗаполнитьВостановитьСписокМакетов()

// Процедура заполняет настройки, с которыми была закрыта форма при
// предыдущем запуске.
//
// Параметры:
//  ВосстанавливатьЗначения - булево, флаг попытки восстановить сохраненные значения.
//
Процедура ЗаполнитьНачальныеНастройки(ВосстанавливатьЗначения = Истина)

	Для Каждого ЭлементСтруктуры Из СтруктураНачальныхНастроек Цикл

		КлючЭлемента = ЭлементСтруктуры.Ключ;

		Если НЕ мЕстьКасса
		   И Найти(КлючЭлемента, "ПКО") > 0 Тогда
			ЭлементыФормы[КлючЭлемента].Значение = Ложь;
			Продолжить;
		КонецЕсли;

		Если ВосстанавливатьЗначения Тогда
			ВосстановленноеЗначение = ВосстановитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_"+КлючЭлемента);
			ВосстановленноеЗначение = ?(ВосстановленноеЗначение = Неопределено,ЭлементСтруктуры.Значение, ВосстановленноеЗначение);
		Иначе
			ВосстановленноеЗначение = ЭлементСтруктуры.Значение;
		КонецЕсли;

		ЭлементыФормы[КлючЭлемента].Значение = ВосстановленноеЗначение;

	КонецЦикла;

	КнопкаПоказыватьФорму             = ЭлементыФормы.ДействияФормы.Кнопки.ПоказыватьФорму;
	КнопкаПоказыватьФорму.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КнопкаПоказыватьФорму.Пометка     = ПоказыватьФорму;
	КнопкаПоказыватьФорму.Картинка    = мКартинкиСПометками[ПоказыватьФорму];

	ЗаполнитьВостановитьСписокМакетов(ВосстанавливатьЗначения, 2, "РеализацияТоваровУслуг", "МакетРеализации");

	ЗаполнитьВостановитьСписокМакетов(ВосстанавливатьЗначения, 2, "РасходныйОрдерНаТовары", "МакетРасходныйОрдерНаТовары");


КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура устанавливает доступность эдементов формы
//
Процедура УстановитьДоступность()

	ЭлементыФормы.ПроводитьРеализацию.Доступность                            = ЗаписыватьРеализацию;
	ЭлементыФормы.ПечататьРеализацию.Доступность                             = ЗаписыватьРеализацию;
	ЭлементыФормы.ФормироватьСФ.Доступность                                  = ЗаписыватьРеализацию И ПроводитьРеализацию;
	ЭлементыФормы.КоличествоЭкземпляровРеализации.Доступность                = ПечататьРеализацию;
	ЭлементыФормы.НадписьКоличествоЭкземпляровРеализации.Доступность         = ПечататьРеализацию;

	ЭлементыФормы.МакетРеализации.Доступность                                = ПечататьРеализацию;
	ЭлементыФормы.НадписьМакетРеализации.Доступность                         = ПечататьРеализацию;

	ЭлементыФормы.ПроводитьСФ.Доступность                                    = ФормироватьСФ;
	ЭлементыФормы.ОткрыватьСФ.Доступность                                    = ФормироватьСФ;
	ЭлементыФормы.ПечататьСФ.Доступность                                     = ФормироватьСФ;
	ЭлементыФормы.КоличествоЭкземпляровСФ.Доступность                        = ПечататьСФ;

	ЭлементыФормы.ПечататьСФНаПринтер.Доступность                            = ПечататьСФ;
	ЭлементыФормы.ПечататьСФНаЭкран.Доступность                              = ПечататьСФ;
	ЭлементыФормы.НадписьПечататьСФНаПринтер.Доступность                     = ПечататьСФ;
	ЭлементыФормы.НадписьКоличествоЭкземпляровСФ.Доступность                 = ПечататьСФ;
	ЭлементыФормы.ПечататьРеализациюНаПринтер.Доступность                    = ПечататьРеализацию;
	ЭлементыФормы.ПечататьРеализациюНаЭкран.Доступность                      = ПечататьРеализацию;
	ЭлементыФормы.НадписьПечататьРеализациюНаПринтер.Доступность             = ПечататьРеализацию;

	ЭлементыФормы.ЗаписыватьПКО.Доступность                                  = мЕстьКасса;
	ЭлементыФормы.ОткрыватьПКО.Доступность                                   = мЕстьКасса;
	ЭлементыФормы.ОплаченПКО.Доступность                                     = мЕстьКасса;
	ЭлементыФормы.ПроводитьПКО.Доступность                                   = ЗаписыватьПКО;
	ЭлементыФормы.ПечататьПКО.Доступность                                    = ЗаписыватьПКО;
	ЭлементыФормы.ПечататьПКОНаПринтер.Доступность                           = ПечататьПКО;
	ЭлементыФормы.ПечататьПКОНаЭкран.Доступность                             = ПечататьПКО;
	ЭлементыФормы.НадписьПечататьПКОНаПринтер.Доступность                    = ПечататьПКО;
	ЭлементыФормы.КоличествоЭкземпляровПКО.Доступность                       = ПечататьПКО;
	ЭлементыФормы.НадписьКоличествоЭкземпляровПКО.Доступность                = ПечататьПКО;

	ЭлементыФормы.ФормироватьДокументыОрдера.Доступность                     = ЗаписыватьРеализацию И ПроводитьРеализацию И НЕ ВидПередачиПоСкладу;
	ЭлементыФормы.ОткрыватьРасходныеТоварныеОрдера.Доступность               = ФормироватьДокументыОрдера;
	ЭлементыФормы.ПечататьРасходныйОрдерНаТовары.Доступность                 = ФормироватьДокументыОрдера;
	ЭлементыФормы.ПечататьРасходныйОрдерНаТоварыНаПринтер.Доступность        = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;
	ЭлементыФормы.ПечататьРасходныйОрдерНаТоварыНаЭкран.Доступность          = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;
	ЭлементыФормы.МакетРасходныйОрдерНаТовары.Доступность                    = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;
	ЭлементыФормы.НадписьМакетРасходныйОрдерНаТовары.Доступность             = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;
	ЭлементыФормы.КоличествоЭкземпляровДокументаОрдер.Доступность            = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;
	ЭлементыФормы.НадписьКоличествоЭкземпляровДокументаОрдер.Доступность     = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;
	ЭлементыФормы.НадписьПечататьРасходныйОрдерНаТоварыНаПринтер.Доступность = ПечататьРасходныйОрдерНаТовары И ФормироватьДокументыОрдера;

КонецПроцедуры // УстановитьДоступность()

// Процедура проверяет значения реквизитов формы и, в случае необходимости, корректирует их
//
Процедура ПроверитьЗначенияРеквизитов()

	Если Не ЗаписыватьРеализацию Тогда
		ФормироватьСФ              = Ложь;
		ПроводитьРеализацию        = Ложь;
		ПечататьРеализацию         = Ложь;
		ФормироватьДокументыОрдера = Ложь;
	ИначеЕсли Не ПроводитьРеализацию Тогда
		ФормироватьСФ       = Ложь;
		ФормироватьДокументыОрдера = Ложь;
	КонецЕсли;

	Если НЕ ФормироватьДокументыОрдера Тогда
		ОткрыватьРасходныеТоварныеОрдера = Ложь;
		ПечататьРасходныйОрдерНаТовары   = Ложь;
	КонецЕсли;

	Если НЕ ФормироватьСФ Тогда
		ПроводитьСФ = Ложь;
		ОткрыватьСФ = Ложь;
		ПечататьСФ  = Ложь;
	КонецЕсли;

	Если НЕ мЕстьКасса Тогда
		ЗаписыватьПКО = Ложь;
		ОткрыватьПКО  = Ложь;
		ОплаченоПКО   = Ложь;
	КонецЕсли;

	Если Не ЗаписыватьПКО Тогда
		ПроводитьПКО = Ложь;
		ПечататьПКО  = Ложь;
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры // ПроверитьЗначенияРеквизитов()

// Функция возвращает документ-объект для данного склада
//
Функция ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, Склад)

	Реализация = Неопределено;
	ИмяКлюча   = "Склад_" + СтрЗаменить(Строка(Склад.УникальныйИдентификатор()), "-", "_");

	Если Не СтруктураДокументовРеализацияТоваровУслуг.Свойство(ИмяКлюча, Реализация) Тогда

		Реализация      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Реализация.Дата = РабочаяДата;
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Реализация, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(Реализация, ЗаказПокупателя);
		ЗаполнениеДокументов.ЗаполнитьДанныеДоставкиПоОснованию(Реализация, ЗаказПокупателя);

		Реализация.Склад  = Склад;
		Реализация.Сделка = ЗаказПокупателя;
		Если Реализация.ОтражатьВУправленческомУчете Тогда
			Реализация.ВидПередачи = ?(ЭлементыФормы.ВидПередачиПоСкладу.Значение, Перечисления.ВидыПередачиТоваров.СоСклада, Перечисления.ВидыПередачиТоваров.ПоОрдеру);
		КонецЕсли;

		СтруктураДокументовРеализацияТоваровУслуг.Вставить(ИмяКлюча, Реализация);

	КонецЕсли;

	Возврат Реализация;

КонецФункции

// Процедура формирует требуемые документы и выполняет требуемые действия в зависимости от настроек
//
Процедура СформироватьДокументы()

	Если мУказаниеСкладовВТЧ Тогда
		ИспользоватьОбработкуЗаполнения = Истина;
	Иначе
		ИспользоватьОбработкуЗаполнения = Ложь;
	КонецЕсли;
	
	// Получим необходимые нам для выполнения заказа товары, тару и услуги
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ЗаказПокупателя",    ЗаказПокупателя);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ЗаказПокупателя.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура                                     КАК Номенклатура,
	|	ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	Цена                                             КАК Цена,
	|	ЕдиницаИзмерения                                 КАК ЕдиницаИзмерения,
	|	СтавкаНДС                                        КАК СтавкаНДС,
	|	ЕдиницаИзмерения.Коэффициент                     КАК Коэффициент,
	|	Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Номенклатура.ЕдиницаИзмеренияМест                КАК ЕдиницаИзмеренияМест,
	|	ПроцентСкидкиНаценки                             КАК ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок                      КАК ПроцентАвтоматическихСкидок,
	|   УсловиеАвтоматическойСкидки                      КАК УсловиеАвтоматическойСкидки,
	|	ЗначениеУсловияАвтоматическойСкидки              КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ВЫБОР КОГДА СтатусПартии = &СтатусТары
	|	      ТОГДА ""ВозвратнаяТара""
	|	      ИНАЧЕ ВЫБОР КОГДА Номенклатура.Услуга
	|	                  ТОГДА ""Услуги""
	|	                  ИНАЧЕ ""Товары"" КОНЕЦ КОНЕЦ   КАК ИмяТабличнойЧасти,
	|	СУММА(КоличествоОстаток)                         КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента
	|		                                          И ЗаказПокупателя = &ЗаказПокупателя) КАК ОстаткиЗаказ
	|
	|ГДЕ
	|	НЕ Номенклатура.Комплект
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА СтатусПартии = &СтатусТары
	|	      ТОГДА ""ВозвратнаяТара""
	|	      ИНАЧЕ ВЫБОР КОГДА Номенклатура.Услуга
	|	                  ТОГДА ""Услуги""
	|	                  ИНАЧЕ ""Товары"" КОНЕЦ КОНЕЦ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Цена,
	|	ЕдиницаИзмерения,
	|	СтавкаНДС,
	|	ЕдиницаИзмерения.Коэффициент,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок,
	|   УсловиеАвтоматическойСкидки,
	|   ЗначениеУсловияАвтоматическойСкидки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР КОГДА СтатусПартии = &СтатусТары
	|	      ТОГДА ""ВозвратнаяТара""
	|	      ИНАЧЕ ВЫБОР КОГДА Номенклатура.Услуга
	|	                  ТОГДА ""Услуги""
	|	                  ИНАЧЕ ""Товары"" КОНЕЦ КОНЕЦ,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Цена,
	|	ПроцентСкидкиНаценки,
	|	ПроцентАвтоматическихСкидок
	|АВТОУПОРЯДОЧИВАНИЕ
	|
	|ИТОГИ ПО
	|	ИмяТабличнойЧасти,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗАпроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Невозможно сформировать реализацию по документу """ + СокрЛП(ЗаказПокупателя) + """: заказ выполнен");
		Возврат;
	КонецЕсли;

	Если ИспользоватьОбработкуЗаполнения Тогда
		СтруктураДокументовРеализацияТоваровУслуг = Новый Структура;
		
		мСклад = ?(ЗаказПокупателя.СкладГруппа = Неопределено, Справочники.Склады.ПустаяСсылка(), ЗаказПокупателя.СкладГруппа);
		ИмяКлюча   = "Склад_" + СтрЗаменить(Строка(мСклад.УникальныйИдентификатор()), "-", "_");
		Реализация      = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Реализация.Дата = РабочаяДата;
		
		СтруктураДокументовРеализацияТоваровУслуг.Вставить(ИмяКлюча, Реализация);
		
		Реализация.Заполнить(ЗаказПокупателя.Ссылка);
		
		Если Реализация.ОтражатьВУправленческомУчете Тогда
			Реализация.ВидПередачи = ?(ЭлементыФормы.ВидПередачиПоСкладу.Значение, Перечисления.ВидыПередачиТоваров.СоСклада, Перечисления.ВидыПередачиТоваров.ПоОрдеру);
		КонецЕсли;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();

		ПревышатьОстаткиОрганизации = УправлениеДопПравамиПользователей.РазрешеноПревышениеОстаткаТоваровОрганизации(ЗаказПокупателя.Организация);

		// Получим остатки по резервам и остатки на складах
		Запрос = Новый Запрос;

		ТекстФильтраПоСкладам = "
		|(
		|	ВЫБРАТЬ
		|		ГруппыДоступности.Склад
		|	ИЗ
		|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
		|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
		Если ЗначениеЗаполнено(ЗаказПокупателя.СкладГруппа)
			И ТипЗнч(ЗаказПокупателя.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
			ГруппаДоступностиСкладов = ЗаказПокупателя.СкладГруппа;
		Иначе
			ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
		КонецЕсли;

		СкладРеализации                     = ?(ТипЗнч(ЗаказПокупателя.СкладГруппа) = Тип("СправочникСсылка.Склады"), ЗаказПокупателя.СкладГруппа, Справочники.Склады.ПустаяСсылка());
		Если НЕ ЗначениеЗаполнено(СкладРеализации) Тогда
			СкладРеализации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		Запрос.УстановитьПараметр("СкладРеализации",          СкладРеализации);
		Запрос.УстановитьПараметр("ЗаказПокупателя",          ЗаказПокупателя);
		Запрос.УстановитьПараметр("Организация",              ЗаказПокупателя.Организация);
		Запрос.УстановитьПараметр("Номенклатура",             РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
		Запрос.УстановитьПараметр("ПустаяСерия",              Справочники.СерииНоменклатуры.ПустаяСсылка());

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТоварыВРезервеНаСкладахОстатки.Склад                      КАК Склад,
		|	ТоварыВРезервеНаСкладахОстатки.Номенклатура               КАК Номенклатура,
		|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры          КАК СерияНоменклатуры,
		|	ВЫБОР КОГДА ТоварыВРезервеНаСкладахОстатки.Склад = &СкладРеализации
		|	      ТОГДА ИСТИНА
		|	      ИНАЧЕ ЛОЖЬ КОНЕЦ     КАК СкладРеализации,
		|	ВЫБОР КОГДА ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры = &ПустаяСерия
		|	      ТОГДА ЛОЖЬ
		|	      ИНАЧЕ ИСТИНА КОНЕЦ   КАК ПризнакСерии,
		|	ИСТИНА                     КАК ПризнакРезерва,
		|	СУММА(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток)   КАК Резерв,"
		+ ?(ПревышатьОстаткиОрганизации, "
		|	0                                                         КАК ОстатокПоОрганизации,", "
		|	СУММА(ВЫБОР КОГДА ТоварыОрганизаций.КоличествоОстаток ЕСТЬ NULL 
		|	      ТОГДА 0 
		|	      ИНАЧЕ ТоварыОрганизаций.КоличествоОстаток КОНЕЦ)    КАК ОстатокПоОрганизации,") + "
		|	СУММА(0)                   КАК Остаток
		|ИЗ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &ЗаказПокупателя
		|	                                                    И Номенклатура В (&Номенклатура)
		|" + ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "И Склад В " + ТекстФильтраПоСкладам) + "
		|	                                                 ) КАК ТоварыВРезервеНаСкладахОстатки
		|"
		+ ?(НЕ ПревышатьОстаткиОрганизации, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(,Номенклатура В (&Номенклатура)
		|	                                             И Организация = &Организация
		|	                                                  ) КАК ТоварыОрганизаций
		|
		|ПО
		|	ТоварыОрганизаций.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
		|	И
		|	ТоварыОрганизаций.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
		|	И
		|	ТоварыОрганизаций.СерияНоменклатуры = ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ТоварыВРезервеНаСкладахОстатки.Склад = &СкладРеализации
		|	      ТОГДА ИСТИНА
		|	      ИНАЧЕ ЛОЖЬ КОНЕЦ,
		|	ТоварыВРезервеНаСкладахОстатки.Склад,
		|	ТоварыВРезервеНаСкладахОстатки.Номенклатура,
		|	ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры,
		|	ВЫБОР КОГДА ТоварыВРезервеНаСкладахОстатки.СерияНоменклатуры = &ПустаяСерия
		|	      ТОГДА ЛОЖЬ
		|	      ИНАЧЕ ИСТИНА КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Склад                      КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура               КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры          КАК СерияНоменклатуры,
		|	ВЫБОР КОГДА ТоварыНаСкладахОстатки.Склад = &СкладРеализации
		|	      ТОГДА ИСТИНА
		|	      ИНАЧЕ ЛОЖЬ КОНЕЦ                            КАК СкладРеализации,
		|	ВЫБОР КОГДА ТоварыНаСкладахОстатки.СерияНоменклатуры = &ПустаяСерия
		|	      ТОГДА ЛОЖЬ
		|	      ИНАЧЕ ИСТИНА КОНЕЦ                          КАК ПризнакСерии,
		|	ЛОЖЬ                                              КАК ПризнакРезерва,
		|	СУММА(0)                                          КАК Резерв,"
		+ ?(ПревышатьОстаткиОрганизации, "
		|	0                                                 КАК ОстатокПоОрганизации,", "
		|	СУММА(ВЫБОР КОГДА ТоварыОрганизаций.КоличествоОстаток ЕСТЬ NULL 
		|	      ТОГДА 0 
		|	      ИНАЧЕ ТоварыОрганизаций.КоличествоОстаток КОНЕЦ)        КАК ОстатокПоОрганизации,") + "
		|	СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток
		|	      - ВЫБОР КОГДА СоединениеСРезервами.КоличествоОстаток ЕСТЬ NULL 
		|	              ТОГДА 0 
		|	              ИНАЧЕ СоединениеСРезервами.КоличествоОстаток КОНЕЦ
		|	      - ВЫБОР КОГДА ТоварыКПередаче.КоличествоОстаток ЕСТЬ NULL 
		|	              ТОГДА 0 
		|	              ИНАЧЕ ТоварыКПередаче.КоличествоОстаток КОНЕЦ) КАК Остаток
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (&Номенклатура)
		|" + ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "И Склад В " + ТекстФильтраПоСкладам) + "
		|                                            ) КАК ТоварыНаСкладахОстатки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(,Номенклатура В (&Номенклатура)
		|" + ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "И Склад В " + ТекстФильтраПоСкладам) + "
		|	                                                 ) КАК СоединениеСРезервами
		|
		|ПО
		|	СоединениеСРезервами.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|	И
		|	СоединениеСРезервами.Склад = ТоварыНаСкладахОстатки.Склад
		|	И
		|	СоединениеСРезервами.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
		|	И
		|	СоединениеСРезервами.СерияНоменклатуры = ТоварыНаСкладахОстатки.СерияНоменклатуры
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(,Номенклатура В (&Номенклатура)
		|" + ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "И Склад В " + ТекстФильтраПоСкладам) + "
		|	                                                  ) КАК ТоварыКПередаче
		|
		|ПО
		|	ТоварыКПередаче.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|	И
		|	ТоварыКПередаче.Склад = ТоварыНаСкладахОстатки.Склад
		|	И
		|	ТоварыКПередаче.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
		|	И
		|	ТоварыКПередаче.СерияНоменклатуры = ТоварыНаСкладахОстатки.СерияНоменклатуры
		|"
		+ ?(НЕ ПревышатьОстаткиОрганизации, "
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(,Номенклатура В (&Номенклатура)
		|	                                             И Организация = &Организация
		|	                                                  ) КАК ТоварыОрганизаций
		|
		|ПО
		|	ТоварыОрганизаций.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|	И
		|	ТоварыОрганизаций.ХарактеристикаНоменклатуры = ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры
		|	И
		|	ТоварыОрганизаций.СерияНоменклатуры = ТоварыНаСкладахОстатки.СерияНоменклатуры", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР КОГДА ТоварыНаСкладахОстатки.Склад = &СкладРеализации
		|	      ТОГДА ИСТИНА
		|	      ИНАЧЕ ЛОЖЬ КОНЕЦ,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
		|	ВЫБОР КОГДА ТоварыНаСкладахОстатки.СерияНоменклатуры = &ПустаяСерия
		|	      ТОГДА ЛОЖЬ
		|	      ИНАЧЕ ИСТИНА КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры,
		|	ПризнакРезерва УБЫВ,
		|	ПризнакСерии УБЫВ,
		|	СерияНоменклатуры,
		|	СкладРеализации УБЫВ,
		|	Склад
		|АВТОУПОРЯДОЧИВАНИЕ
		|";

		ТаблицаОстатков = Запрос.Выполнить().Выгрузить();

		СтруктураДокументовРеализацияТоваровУслуг = Новый Структура;

		ОрганизацияЗаказа                   = ЗаказПокупателя.Организация;
		ДатаЗаказа                          = ЗаказПокупателя.Дата;
		ОрганизацияЯвляетсяПлательщикомЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("ОрганизацияЯвляетсяПлательщикомЕНВД", ОрганизацияЗаказа, ДатаЗаказа);

		КоличествоБезУчетаЦен = 0;
		Пока Выборка.Следующий() Цикл

			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда
				КоличествоБезУчетаЦен = Выборка.Количество;
				Продолжить;
			КонецЕсли;

			КоличествоОстаток = Мин(Выборка.Количество, КоличествоБезУчетаЦен);

			Если КоличествоОстаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			КоличествоБезУчетаЦен = КоличествоБезУчетаЦен - КоличествоОстаток;

			Если Выборка.ИмяТабличнойЧасти = "Товары" Тогда

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
				СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);

				СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаТаблицыОстатков Из СтрокиТаблицыОстатков Цикл

					Если КоличествоОстаток <= 0 Тогда
						Прервать;
					КонецЕсли;

					ОстатокПоОрганизации = ?(СтрокаТаблицыОстатков.ОстатокПоОрганизации > 0, СтрокаТаблицыОстатков.ОстатокПоОрганизации, 0);

					Если СтрокаТаблицыОстатков.Резерв > 0 Тогда
						СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
						Количество                   = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Резерв);
						Если НЕ ПревышатьОстаткиОрганизации Тогда
							Количество = Мин(ОстатокПоОрганизации, Количество);
						КонецЕсли;
						СтрокаТаблицыОстатков.Резерв = СтрокаТаблицыОстатков.Резерв - Количество;
					ИначеЕсли СтрокаТаблицыОстатков.Остаток > 0 Тогда
						СпособСписанияОстаткаТоваров  = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
						Количество                    = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Остаток);
						Если НЕ ПревышатьОстаткиОрганизации Тогда
							Количество = Мин(ОстатокПоОрганизации, Количество);
						КонецЕсли;
						СтрокаТаблицыОстатков.Остаток = СтрокаТаблицыОстатков.Остаток - Количество;
					Иначе
						Продолжить;
					КонецЕсли;

					Если Количество > 0 Тогда

						Если мУказаниеСкладовВТЧ Тогда
							РеализацияСклад = СкладРеализации;
						Иначе
							РеализацияСклад = СтрокаТаблицыОстатков.Склад;
						КонецЕсли;

						Реализация = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, РеализацияСклад);

						СтрокаТабличнойЧасти = Реализация.Товары.Добавить();

						СтрокаТабличнойЧасти.Номенклатура                = Выборка.Номенклатура;
						СтрокаТабличнойЧасти.ЕдиницаИзмерения            = Выборка.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест        = Выборка.ЕдиницаИзмеренияМест;
						СтрокаТабличнойЧасти.Коэффициент                 = Выборка.Коэффициент;
						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки        = Выборка.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок = Выборка.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры  = Выборка.ХарактеристикаНоменклатуры;
						СтрокаТабличнойЧасти.Цена                        = Выборка.Цена;
						СтрокаТабличнойЧасти.СтавкаНДС                   = Выборка.СтавкаНДС;
						СтрокаТабличнойЧасти.Количество                  = ?(НЕ ЗначениеЗаполнено(Выборка.Коэффициент), 0,
						                                                   Количество * Выборка.КоэффициентЕдиницыХранения / Выборка.Коэффициент);

						СтрокаТабличнойЧасти.СерияНоменклатуры           = СтрокаТаблицыОстатков.СерияНоменклатуры;
						Если мУказаниеСкладовВТЧ Тогда
							СтрокаТабличнойЧасти.Склад                   = СтрокаТаблицыОстатков.Склад;
						КонецЕсли;
						
						Если мМногоЗаказов Тогда
							СтрокаТабличнойЧасти.ЗаказПокупателя                   = ЗаказПокупателя;
						КонецЕсли;

						ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Реализация);
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, Реализация);

						// Заполняем реквизиты табличной части.
						Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
							ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация, "Реализация");
						КонецЕсли;
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;

						// Рассчитываем реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    Реализация);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);

						ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, Реализация);

						КоличествоОстаток = КоличествоОстаток - Количество;

					КонецЕсли;

				КонецЦикла;

			ИначеЕсли Выборка.ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда

				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);

				СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаТаблицыОстатков Из СтрокиТаблицыОстатков Цикл

					Если КоличествоОстаток <= 0 Тогда
						Прервать;
					КонецЕсли;

					Если СтрокаТаблицыОстатков.Резерв > 0 Тогда
						СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
						Количество                   = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Резерв);
						СтрокаТаблицыОстатков.Резерв = СтрокаТаблицыОстатков.Резерв - Количество;
					ИначеЕсли СтрокаТаблицыОстатков.Остаток > 0 Тогда
						СпособСписанияОстаткаТоваров  = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
						Количество                    = Мин(КоличествоОстаток, СтрокаТаблицыОстатков.Остаток);
						СтрокаТаблицыОстатков.Остаток = СтрокаТаблицыОстатков.Остаток - Количество;
					Иначе
						Продолжить;
					КонецЕсли;

					Если Количество > 0 Тогда

						Если мУказаниеСкладовВТЧ Тогда
							РеализацияСклад = СкладРеализации;
						Иначе
							РеализацияСклад = СтрокаТаблицыОстатков.Склад;
						КонецЕсли;

						Реализация = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, РеализацияСклад);

						СтрокаТабличнойЧасти = Реализация.ВозвратнаяТара.Добавить();

						СтрокаТабличнойЧасти.Номенклатура                 = Выборка.Номенклатура;
						СтрокаТабличнойЧасти.Цена                         = Выборка.Цена;
						СтрокаТабличнойЧасти.Количество                   = Количество;
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = СпособСписанияОстаткаТоваров;

						Если мУказаниеСкладовВТЧ Тогда
							СтрокаТабличнойЧасти.Склад                    = СтрокаТаблицыОстатков.Склад;
						КонецЕсли;

						// Выполнить общие действия для всех документов при изменении возвратной тары.
						ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, Реализация);

						// Рассчитать реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, Реализация);

						КоличествоОстаток = КоличествоОстаток - Количество;

						Если мМногоЗаказов Тогда
							СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;

			ИначеЕсли Выборка.ИмяТабличнойЧасти = "Услуги" Тогда

				Реализация = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, СкладРеализации);
				СтрокаТабличнойЧасти = Реализация.Услуги.Добавить();

				СтрокаТабличнойЧасти.Номенклатура         = Выборка.Номенклатура;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
				СтрокаТабличнойЧасти.Количество           = КоличествоОстаток;
				СтрокаТабличнойЧасти.Цена                 = Выборка.Цена;
				СтрокаТабличнойЧасти.СтавкаНДС            = Выборка.СтавкаНДС;
				СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок 		 = Выборка.ПроцентАвтоматическихСкидок;
				СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
				СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;

				// Заполняем реквизиты табличной части.
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
					Если НалоговыйУчет.ПроверитьУслугаОблагаетсяЕНВД(Выборка.Номенклатура, ОрганизацияЗаказа, ДатаЗаказа, ОрганизацияЯвляетсяПлательщикомЕНВД) Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					Иначе
						ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация, "Реализация");
					КонецЕсли;
				КонецЕсли;
				СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    Реализация);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);

				Если мМногоЗаказов Тогда
					СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		// Заполнение табличной части СоставНабора
		Если ЗаказПокупателя.СоставНабора.Количество() > 0 Тогда

			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ПарДокумент", ЗаказПокупателя);

			Запрос.Текст ="
			|ВЫБРАТЬ
			|	Док.Номенклатура,
			|	Док.ХарактеристикаНоменклатуры,
			|	Док.ЕдиницаИзмеренияМест,
			|	Док.КоличествоМест,
			|	Док.ЕдиницаИзмерения,
			|	Док.Количество,
			|	Док.Коэффициент,
			|	Док.Цена,
			|	Док.СтавкаНДС,
			|	ВЫБОР 
			|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
			|		ИНАЧЕ Док.Ссылка.СкладГруппа
			|	КОНЕЦ                              КАК Склад,
			|	ВЫБОР 
			|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
			|		ИНАЧЕ Остатки.КоличествоОстаток
			|	КОНЕЦ                              КАК Остаток,
			|	Док.КлючСтроки
			|
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК Док
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &ПарДокумент) КАК Остатки
			|		ПО Остатки.Номенклатура               = Док.Номенклатура
			|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
			|
			|ГДЕ
			|	Док.Ссылка = &ПарДокумент
			|	И Док.Номенклатура.Комплект
			|";

			РезультатЗапроса = Запрос.Выполнить();

			Если НЕ РезультатЗапроса.Пустой() Тогда
				ТаблицаКомплектов = РезультатЗапроса.Выгрузить();

				Если мУказаниеСкладовВТЧ Тогда
					Реализация       = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, СкладРеализации);
					ДобавленКомплект = Ложь;

					Для Каждого Строка Из ТаблицаКомплектов Цикл
						ОстатокКоличестваПоЗаказу = Мин(Строка.Количество, Строка.Остаток);

						Если ОстатокКоличестваПоЗаказу = 0 Тогда
							Продолжить;
						КонецЕсли;

						СтрокаТабличнойЧасти = Реализация.Товары.Добавить();

						СтрокаТабличнойЧасти.Номенклатура                 = Строка.Номенклатура;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры   = Строка.ХарактеристикаНоменклатуры;
						СтрокаТабличнойЧасти.ЕдиницаИзмерения             = Строка.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест         = Строка.ЕдиницаИзмеренияМест;
						СтрокаТабличнойЧасти.Коэффициент                  = Строка.Коэффициент;
						СтрокаТабличнойЧасти.Количество                   = ОстатокКоличестваПоЗаказу;
						СтрокаТабличнойЧасти.КоличествоМест               = Строка.КоличествоМест;
						СтрокаТабличнойЧасти.СтавкаНДС                    = Строка.СтавкаНДС;
						СтрокаТабличнойЧасти.Цена                         = Строка.Цена;
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
						СтрокаТабличнойЧасти.Качество                     = Справочники.Качество.Новый;
						СтрокаТабличнойЧасти.Склад                        = Строка.Склад;
						СтрокаТабличнойЧасти.КлючСтроки                   = Строка.КлючСтроки;
						ДобавленКомплект                                  = Истина;

						// Рассчитываем реквизиты табличной части.
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    Реализация);
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);
					КонецЦикла;

					Если ДобавленКомплект Тогда
						УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(Реализация, ЗаказПокупателя, Истина);
					КонецЕсли;
				Иначе
					ТаблицаСкладов = ТаблицаКомплектов.Скопировать();
					ТаблицаСкладов.Свернуть("Склад", "Количество");

					Для Каждого СтрокаСклада Из ТаблицаСкладов Цикл
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Склад", СтрокаСклада.Склад);

						МассивСтрок      = ТаблицаКомплектов.НайтиСтроки(СтруктураПоиска);
						Реализация       = ПолучитьРеализациюДляСклада(СтруктураДокументовРеализацияТоваровУслуг, СтрокаСклада.Склад);
						ДобавленКомплект = Ложь;

						Для каждого Строка Из МассивСтрок Цикл
							ОстатокКоличестваПоЗаказу = Мин(Строка.Количество, Строка.Остаток);

							Если ОстатокКоличестваПоЗаказу = 0 Тогда
								Продолжить;
							КонецЕсли;

							СтрокаТабличнойЧасти = Реализация.Товары.Добавить();

							СтрокаТабличнойЧасти.Номенклатура                 = Строка.Номенклатура;
							СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры   = Строка.ХарактеристикаНоменклатуры;
							СтрокаТабличнойЧасти.ЕдиницаИзмерения             = Строка.ЕдиницаИзмерения;
							СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест         = Строка.ЕдиницаИзмеренияМест;
							СтрокаТабличнойЧасти.Коэффициент                  = Строка.Коэффициент;
							СтрокаТабличнойЧасти.Количество                   = ОстатокКоличестваПоЗаказу;
							СтрокаТабличнойЧасти.КоличествоМест               = Строка.КоличествоМест;
							СтрокаТабличнойЧасти.СтавкаНДС                    = Строка.СтавкаНДС;
							СтрокаТабличнойЧасти.Цена                         = Строка.Цена;
							СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
							СтрокаТабличнойЧасти.Качество                     = Справочники.Качество.Новый;
							СтрокаТабличнойЧасти.Склад                        = Строка.Склад;
							СтрокаТабличнойЧасти.КлючСтроки                   = Строка.КлючСтроки;
							ДобавленКомплект                                  = Истина;

							// Рассчитываем реквизиты табличной части.
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти,    Реализация);
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Реализация);
						КонецЦикла;

						Если ДобавленКомплект Тогда
							УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(Реализация, ЗаказПокупателя, Истина);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	НевозможноСформироватьРеализацию = Истина;

	// Запись и проведение документов реализации
	Для Каждого ЭлементСтруктуры Из СтруктураДокументовРеализацияТоваровУслуг Цикл

		Реализация = ЭлементСтруктуры.Значение;
		НетДанных  = (Реализация.Товары.Количество() + Реализация.ВозвратнаяТара.Количество() + Реализация.Услуги.Количество() = 0);

		Если НетДанных Тогда
			Продолжить;
		КонецЕсли;

		НевозможноСформироватьРеализацию = Ложь;

		Если не ИспользоватьОбработкуЗаполнения Тогда
			//Заполним счета БУ и НУ в документе реализации
			ОтражатьВБУ = Реализация.ОтражатьВБухгалтерскомУчете;
			ОтражатьВНУ = Реализация.ОтражатьВНалоговомУчете;
			Реализация.АдресДоставки = ЗаказПокупателя.АдресДоставки;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Реализация.Ответственный) Тогда
			Реализация.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		КонецЕсли;
		
		Если ЗаписыватьРеализацию Тогда
			Реализация.Записать();
		КонецЕсли;
		Если ПроводитьРеализацию Тогда
			Попытка
				Реализация.ЗаполнитьТабличныеЧастиПередПроведением(Ложь);
				Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести "+СокрЛП(Реализация));
			КонецПопытки;
		КонецЕсли;

		Если НЕ ВидПередачиПоСкладу И ФормироватьДокументыОрдера Тогда
			Если Реализация.Ссылка.Проведен Тогда
				Если Реализация.ОтражатьВУправленческомУчете Тогда
					Если мУказаниеСкладовВТЧ Тогда
						
						СтруктТабЧастей = Новый Структура;
						СтруктТабЧастей.Вставить("Товары",         "Склад");
						СтруктТабЧастей.Вставить("ВозвратнаяТара", "Склад");

						СтруктПараметры = Новый Структура;
						СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
						СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");

						СписокСкладов = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Реализация, СтруктПараметры, Истина);

					Иначе
						СписокСкладов = Новый СписокЗначений();
						СписокСкладов.Добавить(Реализация.Склад);
					КонецЕсли;
					Если НЕ СписокСкладов = Неопределено Тогда
						Для Каждого СкладЭлементСписка Из СписокСкладов Цикл

							РасходныйОрдерНаТовары                     = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
							РасходныйОрдерНаТовары.Дата                = РабочаяДата;
							РасходныйОрдерНаТовары.мУказаниеСкладовВТЧ = Ложь;
							РасходныйОрдерНаТовары.мСклад              = СкладЭлементСписка.Значение;
							РасходныйОрдерНаТовары.Заполнить(Реализация.Ссылка);

							Попытка
								РасходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Запись);
							Исключение
								ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать "+СокрЛП(РасходныйОрдерНаТовары));
							КонецПопытки;
							
							Если ОткрыватьРасходныеТоварныеОрдера Тогда
								ФормаРасходныйОрдерНаТовары = РасходныйОрдерНаТовары.ПолучитьФорму("ФормаДокумента");
								ФормаРасходныйОрдерНаТовары.Открыть();
							КонецЕсли;

							Если РасходныйОрдерНаТовары <> Неопределено И ПечататьРасходныйОрдерНаТовары И РасходныйОрдерНаТовары.Проведен Тогда
								СтрМакета = мСписокДеревоМакетов.РасходныйОрдерНаТовары.Строки.Найти(МакетРасходныйОрдерНаТовары, "Имя");
								Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
									ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(РасходныйОрдерНаТовары.Ссылка, СтрМакета.Расшифровка);
									УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровДокументаОрдер, ПечататьРасходныйОрдерНаТоварыНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(РасходныйОрдерНаТовары, РасходныйОрдерНаТовары.Метаданные().Представление()), РасходныйОрдерНаТовары.Ссылка);
								Иначе
									РасходныйОрдерНаТовары.Печать(МакетРасходныйОрдерНаТовары, КоличествоЭкземпляровДокументаОрдер, ПечататьРасходныйОрдерНаТоварыНаПринтер);
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
					Иначе
						ОбщегоНазначения.СообщитьОбОшибке("Документ ""Расходный ордер на товары"" для документа " + СокрЛП(Реализация) + " не сформирован.");
					КонецЕсли;
				Иначе
					ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Реализация) + " не принадлежит управленческому учету. Документ Расходный ордер на товары не сформирован!");
				КонецЕсли;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Документ " + СокрЛП(Реализация) + " не проведен. Документ Расходный ордер на товары не сформирован!");
			КонецЕсли;
		КонецЕсли;

		Если ФормироватьСФ Тогда
			ОбъектСчетаФактуры = Документы.СчетФактураВыданный.СоздатьДокумент();
			ОбъектСчетаФактуры.Дата = РабочаяДата;
			ОбъектСчетаФактуры.Заполнить(Реализация.Ссылка);
			ОбъектСчетаФактуры.Организация = Реализация.Организация;
			ОбъектСчетаФактуры.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
			Если ОбъектСчетаФактуры.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
				ОбъектСчетаФактуры.ДатаНомерДокументовОплаты.Добавить();
				ОбъектСчетаФактуры.ДатаНомерДокументовОплаты[0].ДатаПлатежноРасчетногоДокумента = ОбъектСчетаФактуры.ДатаПлатежноРасчетногоДокумента;
				ОбъектСчетаФактуры.ДатаНомерДокументовОплаты[0].НомерПлатежноРасчетногоДокумента = ОбъектСчетаФактуры.НомерПлатежноРасчетногоДокумента;
			КонецЕсли;

			ОбъектСчетаФактуры.Записать();
		КонецЕсли;
		Если ПроводитьСФ Тогда
			Попытка
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести "+СокрЛП(ОбъектСчетаФактуры));
			КонецПопытки;
		КонецЕсли;

		Если ОткрыватьРеализацию Тогда
			ФормаРеализации = Реализация.ПолучитьФорму("ФормаДокумента");
			ФормаРеализации.Открыть();
		КонецЕсли;
		Если Реализация <> Неопределено И ПечататьРеализацию Тогда
			СтрМакета = мСписокДеревоМакетов.РеализацияТоваровУслуг.Строки.Найти(МакетРеализации, "Имя");
			Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
				ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
				УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровРеализации, ПечататьРеализациюНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
			Иначе
				Реализация.Печать(МакетРеализации, КоличествоЭкземпляровРеализации, ПечататьРеализациюНаПринтер);
			КонецЕсли;
		КонецЕсли;
		
		Если ОткрыватьСФ Тогда
			ФормаСчетаФактуры = ОбъектСчетаФактуры.ПолучитьФорму("ФормаДокумента");
			ФормаСчетаФактуры.Открыть();
		КонецЕсли;
		Если ПечататьСФ Тогда
			ОбъектСчетаФактуры.Печать("СчетФактура", КоличествоЭкземпляровСФ, ПечататьСФНаПринтер);
		КонецЕсли;

	КонецЦикла;

	// Сформировать ПКО по Заказу покупателя
	Если НЕ НевозможноСформироватьРеализацию
	   И (ЗаписыватьПКО ИЛИ ОткрыватьПКО) Тогда
		ОбъектПКО      = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		ОбъектПКО.Дата = РабочаяДата;
		ОбъектПКО.Заполнить(ЗаказПокупателя);
		ОбъектПКО.Оплачено = ОплаченПКО;

		Если ЗаписыватьПКО Тогда
			Если ОбъектПКО.СуммаДокумента = 0 Тогда
				Предупреждение("Сумма взаиморасчетов по документу равна нулю. ПКО записан не будет!");
				ПроводитьПКО = Ложь;
				ПечататьПКО = Ложь;
				ОткрыватьПКО = Ложь;
			Иначе
				ОбъектПКО.Записать();
			КонецЕсли;
		КонецЕсли;
		Если ПроводитьПКО Тогда
			Попытка
				ОбъектПКО.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести "+СокрЛП(ОбъектПКО));
			КонецПопытки;
		КонецЕсли;

		Если ОткрыватьПКО Тогда
			ФормаПКО = ОбъектПКО.ПолучитьФорму("ФормаДокумента");
			ФормаПКО.Открыть();
			Если НЕ ЗаписыватьПКО
			   И НЕ ОплаченПКО Тогда
				ФормаПКО.Оплачено = ОплаченПКО;
			КонецЕсли;
		КонецЕсли;
		Если ПечататьПКО Тогда
			ОбъектПКО.Печать("ПКО", КоличествоЭкземпляровПКО, ПечататьПКОНаПринтер);
		КонецЕсли;
	КонецЕсли;

	Если НевозможноСформироватьРеализацию Тогда
		СтрокаСообщения = "По всем строкам заказа отсутствуют остатки товара на ";

		Если мУказаниеСкладовВТЧ Тогда
			СтрокаСообщения = СтрокаСообщения + "складах";
		Иначе
			СтрокаСообщения = СтрокаСообщения + "складе """ + СокрЛП(ЗаказПокупателя.СкладГруппа) + """";
		КонецЕсли;

		ОбщегоНазначения.СообщитьОбОшибке("Невозможно сформировать реализацию по документу """ + СокрЛП(ЗаказПокупателя) + """.");
		ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения + " для организации """ + СокрЛП(ЗаказПокупателя.Организация)  + """.");
	КонецЕсли;

КонецПроцедуры // СформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Значения по умолчанию"
// командной панели формы
//
Процедура ДействияФормыЗначенияПоУмолчанию(Кнопка)

	ЗаполнитьНачальныеНастройки(Ложь);

КонецПроцедуры // ДействияФормыЗначенияПоУмолчанию()

// Процедура вызывается при нажатии кнопки "Сформировать документы"
// основной командной панели формы
//
Процедура ОсновныеДействияФормыСформироватьДокументы(Кнопка)

	СформироватьДокументы();
	Закрыть();

КонецПроцедуры // ОсновныеДействияФормыСформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		// Или форма открыта некорректно, или документ еще не был записан
		ОбщегоНазначения.СообщитьОбОшибке("Формирование реализаций по размещениям текущего заказа невозможно!", Отказ);
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗаказПокупателя.СтруктурнаяЕдиница)
	   И ТипЗнч(ЗаказПокупателя.СтруктурнаяЕдиница) = Тип("СправочникСсылка.Кассы") Тогда
		мЕстьКасса = Истина;
	КонецЕсли;

	мКартинкиСПометками = Новый Соответствие();
	мКартинкиСПометками.Вставить(Истина, БиблиотекаКартинок.УстановленаПометка);
	мКартинкиСПометками.Вставить(Ложь  , БиблиотекаКартинок.СнятаПометка);

	// Заполнить начальные настройки
	ЗаполнитьНачальныеНастройки();

	ПроверитьЗначенияРеквизитов();

	Если НЕ ПоказыватьФорму и НЕ ПоказыватьФормуПринудительно Тогда
		СформироватьДокументы();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	УстановитьДоступность();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()

	УстановитьДоступность();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()

	// Сохранить настройки
	Для Каждого ЭлементСтруктуры Из СтруктураНачальныхНастроек Цикл
		КлючЭлемента = ЭлементСтруктуры.Ключ;

		Если НЕ мЕстьКасса
		   И Найти(КлючЭлемента, "ПКО") > 0 Тогда
			Продолжить;
		КонецЕсли;

		СохранитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_"+КлючЭлемента, ЭлементыФормы[КлючЭлемента].Значение);
	КонецЦикла;

	СтрМакета = мСписокДеревоМакетов.РеализацияТоваровУслуг.Строки.Найти(МакетРеализации, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СохранитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_МакетРеализации" , СтрМакета.Текст);
	КонецЕсли;

	СтрМакета = мСписокДеревоМакетов.РасходныйОрдерНаТовары.Строки.Найти(МакетРасходныйОрдерНаТовары, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СохранитьЗначение("ЗаказПокупателя_ФормаФормированияРеализаций_МакетРасходныйОрдерНаТовары", СтрМакета.Текст);
	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" флажка "ПечататьРеализацию".
//
Процедура ПечататьРеализациюПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ПечататьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ФормироватьСФ".
//
Процедура ФормироватьСФПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ФормироватьСФПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ЗаписыватьПКО".
//
Процедура ЗаписыватьПКОПриИзменении(Элемент)

	//ОткрыватьПКО = (ОткрыватьПКО ИЛИ Не ЗаписыватьПКО); // Хотя бы один из флагов должен быть включен, иначе действия не имеют смысла
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ЗаписыватьПКОПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ОткрыватьПКО".
//
Процедура ОткрыватьПКОПриИзменении(Элемент)

	//ЗаписыватьПКО = (ЗаписыватьПКО ИЛИ Не ОткрыватьПКО); // Хотя бы один из флагов должен быть включен, иначе действия не имеют смысла
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ЗаписыватьРеализацию".
//
Процедура ЗаписыватьРеализациюПриИзменении(Элемент)

	ОткрыватьРеализацию = (ОткрыватьРеализацию ИЛИ Не ЗаписыватьРеализацию); // Хотя бы один из флагов должен быть включен, иначе действия не имеют смысла
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ЗаписыватьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ОткрыватьРеализацию".
//
Процедура ОткрыватьРеализациюПриИзменении(Элемент)

	ЗаписыватьРеализацию = (ЗаписыватьРеализацию ИЛИ Не ОткрыватьРеализацию); // Хотя бы один из флагов должен быть включен, иначе действия не имеют смысла
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ОткрыватьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ПроводитьРеализацию".
//
Процедура ПроводитьРеализациюПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры // ПроводитьРеализациюПриИзменении()

Процедура ДействияФормыПоказыватьФорму(Кнопка)

	Кнопка.Пометка  = НЕ Кнопка.Пометка;
	ПоказыватьФорму = Кнопка.Пометка;
	Кнопка.Картинка = мКартинкиСПометками[ПоказыватьФорму];

КонецПроцедуры

Процедура ВидПередачиПоСкладуПриИзменении(Элемент)

	ФормироватьДокументыОрдера = Ложь;
	ПроверитьЗначенияРеквизитов();

КонецПроцедуры

Процедура ФормироватьДокументыОрдераПриИзменении(Элемент)

	ПроверитьЗначенияРеквизитов();

КонецПроцедуры

Процедура ПечататьРасходныйОрдерНаТоварыПриИзменении(Элемент)
	ПроверитьЗначенияРеквизитов();
КонецПроцедуры


мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

УказаниеСкладов    = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
мУказаниеСкладовВТЧ = (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (УказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);
УказаниеЗаказов = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();				   
мМногоЗаказов	= (УказаниеЗаказов      = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                   Или (УказаниеЗаказов = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации);			   
мЕстьКасса      = Ложь;


СтруктураНачальныхНастроек = Новый Структура;
СтруктураНачальныхНастроек.Вставить("ЗаписыватьРеализацию",                    Истина);
СтруктураНачальныхНастроек.Вставить("ОткрыватьРеализацию",                     Истина);
СтруктураНачальныхНастроек.Вставить("ПечататьРеализацию",                      Ложь);
СтруктураНачальныхНастроек.Вставить("ПроводитьРеализацию",                     Истина);
СтруктураНачальныхНастроек.Вставить("ФормироватьСФ",                           Истина);
СтруктураНачальныхНастроек.Вставить("ОткрыватьСФ",                             Ложь);
СтруктураНачальныхНастроек.Вставить("ПечататьСФ",                              Ложь);
СтруктураНачальныхНастроек.Вставить("ПроводитьСФ",                             Истина);
СтруктураНачальныхНастроек.Вставить("ПоказыватьФорму",                         Истина);
СтруктураНачальныхНастроек.Вставить("ПечататьРеализациюНаПринтер",             Ложь);
СтруктураНачальныхНастроек.Вставить("ПечататьСФНаПринтер",                     Ложь);
СтруктураНачальныхНастроек.Вставить("ЗаписыватьПКО",                           Истина);
СтруктураНачальныхНастроек.Вставить("ОткрыватьПКО",                            Истина);
СтруктураНачальныхНастроек.Вставить("ПечататьПКО",                             Ложь);
СтруктураНачальныхНастроек.Вставить("ПроводитьПКО",                            Истина);
СтруктураНачальныхНастроек.Вставить("ПечататьПКОНаПринтер",                    Ложь);
СтруктураНачальныхНастроек.Вставить("ОплаченПКО",                              Ложь);
СтруктураНачальныхНастроек.Вставить("ВидПередачиПоСкладу",                     Истина);
СтруктураНачальныхНастроек.Вставить("ФормироватьДокументыОрдера",              Ложь);
СтруктураНачальныхНастроек.Вставить("ОткрыватьРасходныеТоварныеОрдера",        Ложь);
СтруктураНачальныхНастроек.Вставить("ПечататьРасходныйОрдерНаТовары",          Ложь);
СтруктураНачальныхНастроек.Вставить("ПечататьРасходныйОрдерНаТоварыНаПринтер", Ложь);
СтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровРеализации",         1);
СтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровДокументаОрдер",     1);
СтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровСФ",                 1);
СтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровПКО",                1);
