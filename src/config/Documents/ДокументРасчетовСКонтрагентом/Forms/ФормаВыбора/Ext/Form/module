Перем НП;

Процедура ПриОткрытии()

	// Если даты не заполнены, то период устанавливается по умолчанию
	Если НЕ ЗначениеЗаполнено(КонПериода) и не мПереданИнтервал = Истина Тогда
		КонПериода = КонецМесяца(ТекущаяДата());
	КонецЕсли;

	Если не мПереданИнтервал Тогда
		НачПериода = НачалоМесяца(КонПериода);
	КонецЕсли; 
	
	СохранятьРежимОтбораДокументов = ВосстановитьЗначение("ДокДокументРасчетовСКонтрагентамиПодбор_СохранятьРежимОтбораДокументов");
	ФормироватьСписокПриОткрытии   = ВосстановитьЗначение("ДокДокументРасчетовСКонтрагентамиПодбор_ФормироватьСписокПриОткрытии");
	
	РежимОтбораДокументов = Перечисления.РежимОтбораДокументов.ПоРеквизитам;

	Если НЕ ЗначениеЗаполнено(мТипыДокументов) тогда
		мТипыДокументов = Новый ОписаниеТипов("ДокументСсылка.ДокументРасчетовСКонтрагентом");
		//мТипыДокументов = ЭтаФорма.ВладелецФормы.ОграничениеТипа;
	КонецЕсли;
	
	НП = Новый НастройкаПериода;
	
	Если ФормироватьСписокПриОткрытии тогда
		ОбновитьСписок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение( "ДокДокументРасчетовСКонтрагентамиПодбор_ФормироватьСписокПриОткрытии", 		ФормироватьСписокПриОткрытии);
	
КонецПроцедуры

Процедура РежимОтбораДокументовПриИзменении()

	ТаблицаДокументов.Очистить();
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	НП.УстановитьПериод(НачПериода, КонПериода);

	Если НП.Редактировать() Тогда

		НачПериода = НП.ПолучитьДатуНачала();
		КонПериода = НП.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ОбновитьСписок() Экспорт

	ПодборПоРеквизитам();

КонецПроцедуры

Процедура ПодборПоРеквизитам()

	ТаблицаДокументов.Очистить();
	
	//Формирование текста запроса
	Если ЗначениеЗаполнено(Организация) тогда
		УсловиеЗапросаОрганизация = " и Док.Организация = &Организация ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) тогда
		УсловиеЗапросаКонтрагент = " и Док.Контрагент = &Контрагент ";
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для каждого ТипДокумента Из мТипыДокументов.Типы() Цикл
		МД_Документа = Метаданные.НайтиПоТипу(ТипДокумента);
		Если не ПустаяСтрока(УсловиеЗапросаОрганизация) и МД_Документа.Реквизиты.Найти("Организация")=Неопределено Тогда
			//В документе нет поля "Организация". Отбор по документу не производим.
			Продолжить;
		КонецЕслИ;
		Если не ПустаяСтрока(УсловиеЗапросаКонтрагент) и  МД_Документа.Реквизиты.Найти("Контрагент")=Неопределено Тогда
			//В документе нет поля "Контрагент".  Отбор по документу не производим.
			Продолжить;
		КонецЕсли;
		
		Если не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса +"
			|
			| Объединить 
			|";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса +  "ВЫБРАТЬ
		|	Док.Ссылка КАК Документ
		|ИЗ 	
		|	Документ."+МД_Документа.Имя+" КАК Док 
		| Где
		|	(Док.Дата >= &НачПериода "+?(НЕ ЗначениеЗаполнено(КонПериода),""," И Док.Дата <= &КонПериода")+") ";
		
			
		ТекстЗапроса = ТекстЗапроса +  УсловиеЗапросаОрганизация;
		ТекстЗапроса = ТекстЗапроса +  УсловиеЗапросаКонтрагент;
	
	КонецЦикла; 
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",			НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("КонПериода",			КонПериода);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Контрагент",			Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Свернуть("Документ","");
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		МассивПоДоговору = КритерииОтбора.ДокументыПоДоговоруКонтрагента.Найти(ДоговорКонтрагента);
		ДокументыПоДоговору = Новый СписокЗначений;
		ДокументыПоДоговору.ЗагрузитьЗначения(МассивПоДоговору);
		
		СтрокиКУдалению = Новый Массив;
		Для каждого СтрокаТаблицы Из Результат Цикл
			Если ДокументыПоДоговору.НайтиПоЗначению(СтрокаТаблицы.Документ) = Неопределено Тогда
				СтрокиКУдалению.Добавить(СтрокаТаблицы);
			КонецЕсли; 
		КонецЦикла;
		Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Результат.Удалить(СтрокаКУдалению);
		КонецЦикла; 
	КонецЕсли; 

	ТаблицаДокументов = Результат.Скопировать();

	ЭтаФорма.ЭлементыФормы.ТаблицаДокументов.Колонки.Остаток.Видимость = Ложь;

КонецПроцедуры

Процедура ДокументВыбор(Элемент=Неопределено, ВыбраннаяСтрока, Колонка=Неопределено, СтандартнаяОбработка)

	ОповеститьОВыборе(ВыбраннаяСтрока.Документ);

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)

	Если не ДоговорКонтрагента.Организация = Элемент.Значение тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕслИ;

КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)

	Если не ДоговорКонтрагента.Владелец = Элемент.Значение тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕслИ;

КонецПроцедуры

Процедура КоманднаяПанель1Выбрать(Кнопка)

	Если ЭлементыФормы.ТаблицаДокументов.ТекущаяСтрока	= Неопределено тогда
		Сообщить("Документ расчетов не выбран");
	Иначе
		ОповеститьОВыборе(ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные.Документ);
	КонецЕслИ;

КонецПроцедуры

Процедура КоманднаяПанель1СоздатьИВыбрать(Кнопка)
	Док = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();

	Док.Дата        = НачалоДня(?(НЕ ЗначениеЗаполнено(КонПериода),ТекущаяДата(),КонПериода));
	Док.Организация = Организация;
	Док.Контрагент	= Контрагент;
	Док.ДоговорКонтрагента	= ДоговорКонтрагента;
	Док.ПолучитьФорму("ФормаДокумента").ОткрытьМодально();

	Если НЕ Док.Ссылка.Пустая() Тогда
		ОповеститьОВыборе(Док.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПросмотретьДокумент(Кнопка)
    СтрокаДанных = ЭлементыФормы.ТаблицаДокументов.ТекущиеДанные;
	Если Не СтрокаДанных = Неопределено Тогда
		ФормаДокумента = СтрокаДанных.Документ.ПолучитьФорму();
		ФормаДокумента.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ВладелецФормы) <> Тип("ПолеВвода") Тогда
		Отказ = Истина;
		ФормаСписка = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФормуСписка(, ВладелецФормы);
		ФормаСписка.Открыть();
	КонецЕсли;
	
КонецПроцедуры

