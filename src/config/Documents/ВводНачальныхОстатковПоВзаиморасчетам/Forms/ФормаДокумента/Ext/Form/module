////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОрганизация; // Хранит текущую организацию
Перем мОтражатьВРегламентированномУчете;

// Соответствие: ключ - договор, значение - обязательность заполнения сделки (Булево)
Перем УчетПоСделкам;
 // Соответствие: ключ - договор, значение - обязательность заполнения документа расчетов (Булево)
Перем УчетПоДокументамРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Авансы,ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетыСКонтрагентами,ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентами.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость реквизитов документа.
//
Процедура УстановитьВидимость()

	КолонкиРасчеты = ЭлементыФормы.РасчетыСКонтрагентами.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРасчеты.СуммаРегл, ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРасчеты.СуммаУпр,  ОтражатьВУправленческомУчете);
	
	КолонкиАванс = ЭлементыФормы.Авансы.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиАванс.СуммаРегл, ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиАванс.СуммаУпр,  ОтражатьВУправленческомУчете);
	
	ФлагПрочие = ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям;

	ЭлементыФормы.ОтразитьРасчетыВНДС.Доступность                   = ОтражатьВБухгалтерскомУчете И НЕ ФлагПрочие;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРасчеты.Сделка, НЕ ФлагПрочие);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиАванс  .Сделка, НЕ ФлагПрочие);
	
	КолонкиАванс.ДокументОплаты.ТекстШапки = ?(ФлагПрочие, "Документ расчетов", "Документ оплаты");
	
КонецПроцедуры //УстановитьВидимость()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Страницы = ЭлементыФормы.Панель.Страницы;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
		Страницы.РасчетыСКонтрагентами.Заголовок = "Уменьшение долга (" + РасчетыСКонтрагентами.Количество() + " поз.)";
		Страницы.Авансы               .Заголовок = "Увеличение долга (" + Авансы.Количество() + " поз.)";
	Иначе
		Страницы.РасчетыСКонтрагентами.Заголовок = "Расчеты с контрагентами (" + РасчетыСКонтрагентами.Количество() + " поз.)";
		Страницы.Авансы               .Заголовок = "Авансы (" + Авансы.Количество() + " поз.)";
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации <> Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам[Кнопка.Имя] Тогда
			Если Авансы.Количество() > 0 ИЛИ РасчетыСКонтрагентами.Количество() > 0 Тогда
				// При смене вида операции табличная часть документа должна быть очищена
				Ответ = Вопрос("При изменении вида операции табличные части будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Изменение вида операции");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Авансы.Очистить();
					РасчетыСКонтрагентами.Очистить();
					ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам[Кнопка.Имя];
				КонецЕсли;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам[Кнопка.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
		ОтразитьРасчетыСКонтрагентамиДляЦелейНДС = Ложь;
		ОтразитьВРегистрахРасчетовОрганизации    = Ложь;
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()


	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Если Не ЗначениеЗаполнено(ПараметрОснование) Тогда
		
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

			ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями;
			ОтразитьРасчетыСКонтрагентамиДляЦелейНДС = ОтражатьВБухгалтерскомУчете;
			
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
			
	КонецЕсли;
	
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,"",мОтражатьВРегламентированномУчете);

	Если ЭтоНовый() И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
		ОтражатьВБухгалтерскомУчете = НЕ ПараметрОснование.ОтразитьРасчетыСКонтрагентами;
	КонецЕсли;
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
										  
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	СтруктКолонок = Новый Структура;

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктКолонок.Вставить("Контрагент");
	СтруктКолонок.Вставить("ДоговорКонтрагента");
	СтруктКолонок.Вставить("СуммаВзаиморасчетов");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетыСКонтрагентами.Колонки, СтруктКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Авансы.Колонки, СтруктКолонок);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("РасчетыСКонтрагентами", "РасчетыСКонтрагентами");
	Страницы.Добавить("Авансы",                "Авансы");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.Панель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()


	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Организация <> мОрганизация
	  И (РасчетыСКонтрагентами.Количество() > 0 ИЛИ Авансы.Количество() > 0) Тогда
		Ответ = Вопрос("При смене организации табличные части будут очищены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Организация = мОрганизация;
			Возврат;
		КонецЕсли;
		РасчетыСКонтрагентами.Очистить();
		Авансы.Очистить();
	КонецЕсли;

	Если Не ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
		
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,"",мОтражатьВРегламентированномУчете,истина);
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		ОтразитьРасчетыСКонтрагентамиДляЦелейНДС = Ложь;
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВУправленческомУчете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВУправленческомУчете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		ОтразитьРасчетыСКонтрагентамиДляЦелейНДС = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	ПриИзмененииДоговораРасчетов(ТекДанные);
	
КонецПроцедуры // РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;	
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	ПересчетСуммыУпр(СтрокаТЧ);
	ПересчетСуммыРегл(СтрокаТЧ);
	
КонецПроцедуры // РасчетыСКонтрагентамиСуммаВзаиморасчетовПриИзменении()

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "Авансы"
//
Процедура АвансыКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.Авансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "Авансы"
//
Процедура АвансыДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ПриИзмененииДоговораРасчетов(ТекДанные);
	
КонецПроцедуры // АвансыДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "Авансы"
//
Процедура АвансыДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;	
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.Авансы.ТекущиеДанные.Контрагент, 
		ЭлементыФормы.Авансы.ТекущиеДанные.ДоговорКонтрагента,
		мСписокВидовДоговоров,
		СтандартнаяОбработка);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "Авансы"
//
Процедура АвансыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	ПересчетСуммыУпр(СтрокаТЧ);
	ПересчетСуммыРегл(СтрокаТЧ);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДокументОплаты"
// табличного поля "Авансы"
//
Процедура АвансыДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Авансы.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, Дата, '00010101');
	
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
	КонецЕсли;

КонецПроцедуры

Процедура АвансыКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Контрагент
//
Процедура ПриИзмененииКонтрагентаРасчетов(СтрокаТЧ)
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.Контрагент <> СтрокаТЧ.ДоговорКонтрагента.Владелец Тогда
		
		СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДоговорРасчетов
//
Процедура ПриИзмененииДоговораРасчетов(СтрокаТЧ)
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТЧ.ДоговорКонтрагента;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТЧ.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.КурсВзаиморасчетов) или не СтрокаТЧ.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		СтруктураКурсаВзаиморасчетов 				= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаТЧ.КурсВзаиморасчетов     = ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
		СтрокаТЧ.КратностьВзаиморасчетов= ?(Не ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
	КонецЕсли; 
	
	СтрокаТЧ.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	УчетПоСделкам.Вставить(ДоговорКонтрагента, НЕ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	УчетПоДокументамРасчетов.Вставить(ДоговорКонтрагента, ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Сделка"
//
Процедура РасчетыСКонтрагентамиСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТЧ = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки();
	Попытка
		Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, "ЗаказПоставщику");
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, "ЗаказПокупателя");
		КонецЕсли;
	Исключение
	КонецПопытки;
						 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Сделка"
//
Процедура АвансыСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТЧ = ЭлементыФормы.Авансы.ТекущиеДанные;
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки();
	Попытка
		Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, "ЗаказПоставщику");
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, "ЗаказПокупателя");
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры // АвансыСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Документ"
//
Процедура РасчетыСКонтрагентамиДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктОтбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбор.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		СтруктОтбор.Вставить( "Контрагент", ТекДанные.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента) Тогда
		СтруктОтбор.Вставить( "ДоговорКонтрагента", ТекДанные.ДоговорКонтрагента);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент, 
		СтандартнаяОбработка,
		СтруктОтбор,
		"РасчетыСКонтрагентами");
		
КонецПроцедуры // РасчетыСКонтрагентамиДокументНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Организация"
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОрганизация = Организация;
	
КонецПроцедуры // ОрганизацияНачалоВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетыСКонтрагентамиЗаполнитьДокументыРасчетов(Кнопка)
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
	
		Предупреждение(
			"Расчеты по прочим операциям по документам расчетов не ведутся,
			|заполнение не требуется.");
		Возврат;
	
	КонецЕсли;
	
	ЗаполнитьДокументыРасчетов(РасчетыСКонтрагентами);

КонецПроцедуры

Процедура КоманднаяПанельАвансыЗаполнитьДокументыРасчетов(Кнопка)
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
	
		Предупреждение(
			"Расчеты по прочим операциям по документам расчетов не ведутся,
			|заполнение не требуется.");
		Возврат;
	
	КонецЕсли;
	
	ЗаполнитьДокументыРасчетов(Авансы, "Авансы");
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если НЕ ДанныеСтроки = Неопределено Тогда
		
			Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
				
				Если ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
					ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного   = Ложь;
				Иначе
					ОтметкаСделки = УчетПоСделкам[ДанныеСтроки.ДоговорКонтрагента];
					Если ОтметкаСделки = Неопределено Тогда
						ОтметкаСделки = НЕ ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
						УчетПоСделкам.Вставить(ДанныеСтроки.ДоговорКонтрагента, ОтметкаСделки);
					КонецЕсли;
					ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = ОтметкаСделки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
					ОформлениеСтроки.Ячейки.Документ.ОтметкаНезаполненного = Ложь;
				Иначе
					ОтметкаДокумента = УчетПоДокументамРасчетов[ДанныеСтроки.ДоговорКонтрагента];
					Если ОтметкаДокумента = Неопределено Тогда
						ОтметкаДокумента = ДанныеСтроки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
						УчетПоДокументамРасчетов.Вставить(ДанныеСтроки.ДоговорКонтрагента, ОтметкаДокумента);
					КонецЕсли;
					ОформлениеСтроки.Ячейки.Документ.ОтметкаНезаполненного = ОтметкаДокумента;
				КонецЕсли;
				
			Иначе
			
				ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного   = Ложь;
				ОформлениеСтроки.Ячейки.Документ.ОтметкаНезаполненного = Ложь;
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура АвансыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если НЕ ДанныеСтроки = Неопределено Тогда
		
			Если ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
			
				Если ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
					ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного   = Ложь;
				Иначе
					ОтметкаСделки = УчетПоСделкам[ДанныеСтроки.ДоговорКонтрагента];
					Если ОтметкаСделки = Неопределено Тогда
						ОтметкаСделки = НЕ ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
						УчетПоСделкам.Вставить(ДанныеСтроки.ДоговорКонтрагента, ОтметкаСделки);
					КонецЕсли;
					ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = ОтметкаСделки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеСтроки.ДокументОплаты) Тогда
					ОформлениеСтроки.Ячейки.ДокументОплаты.ОтметкаНезаполненного = Ложь;
				Иначе
					ОтметкаДокумента = УчетПоДокументамРасчетов[ДанныеСтроки.ДоговорКонтрагента];
					Если ОтметкаДокумента = Неопределено Тогда
						ОтметкаДокумента = ДанныеСтроки.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
						УчетПоДокументамРасчетов.Вставить(ДанныеСтроки.ДоговорКонтрагента, ОтметкаДокумента);
					КонецЕсли;
					ОформлениеСтроки.Ячейки.ДокументОплаты.ОтметкаНезаполненного = ОтметкаДокумента;
				КонецЕсли;
				
			Иначе
			
				ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного         = Ложь;
				ОформлениеСтроки.Ячейки.ДокументОплаты.ОтметкаНезаполненного = Ложь;
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

УчетПоСделкам            = Новый Соответствие;
УчетПоДокументамРасчетов = Новый Соответствие;
