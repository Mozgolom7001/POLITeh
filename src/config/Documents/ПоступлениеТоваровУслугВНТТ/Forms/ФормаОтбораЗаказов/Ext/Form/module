Перем НП;
Перем ДатаНачала;
Перем ДатаОкончания;

// Переменные настройки диалога
Перем ФлагВидимостиВидовРазмещений;
Перем ФлагВидимостиПросроченоДнейОплаты;
Перем ФлагВидимостиДатыОплаты;
Перем ФлагВидимостиПросроченоДнейОтгрузки;
Перем ФлагВидимостиДатыПоступления;
Перем ФлагДоступностиИзмененияНастроек;
Перем ФлагДоступностиИзмененияДляОтгрузки;

Перем СоответствиеНазначений;
Перем СтруктураДляОтбораПоКатегориям;
Перем СтруктураПредставлениеПолей;

Перем мКрасныйЦвет, мСинийЦвет, мЦветГруппы, мЦветТекста, мОбычныйШрифт, мЖирныйШрифт;

Перем мИспользоватьТару, мЧастичноеЗаполнение;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура определяет факт частичного заполнения табличных частей по способу заполнения.
//
// Параметры:
//  Пометка       - булево, признак установки/снятия флажков.
//  ТабличноеПоле - табличное поле, флажки которого необходимо установить/снять.
//
Процедура ОпределитьЧастичноеЗаполнение()

	мЧастичноеЗаполнение = Ложь;
	Если СпособЗаполнения = 2 Тогда
		мЧастичноеЗаполнение = Истина;
	КонецЕсли;

КонецПроцедуры // ОпределитьЧастичноеЗаполнение()

// Устанавливает доступные значения поля СпособЗаполнения.
// вызывает анализ текущего состояния заказа.
//
Процедура УстановитьСпособЗаполнения()

	ЧистоТовары = НеЗаполнятьТовары ИЛИ ДокументОбъект.Товары.Количество() = 0;
	ЧистоУслуги = НеЗаполнятьУслуги ИЛИ ДокументОбъект.Услуги.Количество() = 0;
	ЧистоТара   = НеЗаполнятьТару ИЛИ НЕ мИспользоватьТару ИЛИ ДокументОбъект.ВозвратнаяТара.Количество() = 0;
	
	Если ЧистоТовары И ЧистоУслуги И ЧистоТара Тогда
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Очистить();
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Добавить(1, "Заполнить по заказам");
		СпособЗаполнения = 1;
	ИначеЕсли НЕ ДокументОбъект.ЭтоНовый() Тогда
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Очистить();
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Добавить(2, "Добавить по заказам");
		СпособЗаполнения = 2;
	Иначе
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Очистить();
		ЭлементыФормы.ПолеНастройкиСпособЗаполнения.СписокВыбора.Добавить(1, "Заполнить по заказам");
		СпособЗаполнения = 1;
	КонецЕсли;
	
	ОпределитьЧастичноеЗаполнение();

КонецПроцедуры

// Процедура устанавливает/снимает флажки в заданном табличном поле.
//
// Параметры:
//  Пометка       - булево, признак установки/снятия флажков.
//  ТабличноеПоле - табличное поле, флажки которого необходимо установить/снять.
//
Процедура УстановитьСнятьФлажки(Пометка, ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		СтрокаТабличнойЧасти.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажки()

// Процедура устанавливает/снимает флажки для подчинения.
//
Процедура УстановитьСнятьФлажкиПодчинения(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по размещениям
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаРазмещение",                Истина);

	СтрокиПоРазмещению = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

	Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
		СтрокаПоРазмещению.Пометка = Пометка;
	КонецЦикла;

КонецПроцедуры // УстановитьСнятьФлажкиПодчинения()

// Процедура устанавливает/снимает флажки для группы.
//
Процедура УстановитьСнятьФлажкиГруппы(Пометка, ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по размещениям
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаРазмещение",                Истина);

	СтрокиПоРазмещению = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	ПометкаГруппы  = Пометка;

	Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
		Если СтрокаПоРазмещению.Пометка И НЕ Пометка Тогда
			ПометкаГруппы = СтрокаПоРазмещению.Пометка;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаРазмещение",                Ложь);

	СтрокиПоРазмещению = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПоРазмещению.Количество() > 0 Тогда
		СтрокиПоРазмещению[0].Пометка = ПометкаГруппы;
	КонецЕсли;

КонецПроцедуры // УстановитьСнятьФлажкиГруппы()

// Процедура обновляет итог реквизита "ДобавитьВДокумент" в табличной части.
//
Процедура ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по размещениям
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаРазмещение", Истина);

	СтрокиПоРазмещению = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

	ВсегоДобавить  = 0;
	Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
		ВсегоДобавить = ВсегоДобавить + СтрокаПоРазмещению.ДобавитьВДокумент;
	КонецЦикла;

	// Изменение итога
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаРазмещение", Ложь);

	СтрокиПоРазмещению = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Если СтрокиПоРазмещению.Количество() > 0 Тогда
		Если ВсегоДобавить > СтрокиПоРазмещению[0].ДобавитьВДокумент Тогда
			СтрокиПоРазмещению[0].ДобавитьВДокумент = ВсегоДобавить;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обновляет строки реквизита "ДобавитьВДокумент" в табличной части.
//
Процедура ОбновитьВСтрокахДобавитьВДокумент(ТекущаяСтрока, ТабличнаяЧасть)

	// Обработка данных по размещениям
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
	СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
	КонецЕсли;
	СтруктураПоиска.Вставить("МеткаРазмещение",                Истина);

	СтрокиПоРазмещению = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);

	НовоеЗначениеДобавитьВДокумент  = ТекущаяСтрока.ДобавитьВДокумент;
	
	СтароеЗначениеДобавитьВДокумент = 0;
	Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
		СтароеЗначениеДобавитьВДокумент = СтароеЗначениеДобавитьВДокумент + СтрокаПоРазмещению.ДобавитьВДокумент;
	КонецЦикла;
	
	РазницаДобавитьВДокумент = НовоеЗначениеДобавитьВДокумент - СтароеЗначениеДобавитьВДокумент;
	Если РазницаДобавитьВДокумент = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РазницаДобавитьВДокумент > 0 Тогда
		Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
			РазмещенноеКоличество = СтрокаПоРазмещению.РазмещенноеКоличество;
			КоличествоВСтроке = СтрокаПоРазмещению.ДобавитьВДокумент;
			Если КоличествоВСтроке = РазмещенноеКоличество Тогда
				Продолжить;
			КонецЕсли;
			Добавить = 0;
			Если РазмещенноеКоличество - КоличествоВСтроке > 0 Тогда
				Добавить = Мин(РазницаДобавитьВДокумент, РазмещенноеКоличество - КоличествоВСтроке);
			КонецЕсли;
			СтрокаПоРазмещению.ДобавитьВДокумент = КоличествоВСтроке + Добавить;
			РазницаДобавитьВДокумент = РазницаДобавитьВДокумент - Добавить;
			Если РазницаДобавитьВДокумент <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли РазницаДобавитьВДокумент < 0 Тогда
		РазницаДобавитьВДокумент = -РазницаДобавитьВДокумент;
		Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
			РазмещенноеКоличество = СтрокаПоРазмещению.РазмещенноеКоличество;
			КоличествоВСтроке = СтрокаПоРазмещению.ДобавитьВДокумент;
			Если КоличествоВСтроке = РазмещенноеКоличество Тогда
				Продолжить;
			КонецЕсли;
			Вычесть = 0;
			Если КоличествоВСтроке - РазмещенноеКоличество > 0 Тогда
				Вычесть = Мин(РазницаДобавитьВДокумент, КоличествоВСтроке - РазмещенноеКоличество);
			КонецЕсли;
			СтрокаПоРазмещению.ДобавитьВДокумент = КоличествоВСтроке - Вычесть;
			РазницаДобавитьВДокумент = РазницаДобавитьВДокумент - Вычесть;
			Если РазницаДобавитьВДокумент <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если РазницаДобавитьВДокумент > 0 Тогда
			ЧислоСтрок = СтрокиПоРазмещению.Количество();
			Для Сч = 1 По ЧислоСтрок Цикл
				ТекущаяСтрока = ЧислоСтрок - Сч;
				КоличествоВСтроке = СтрокиПоРазмещению[ТекущаяСтрока].ДобавитьВДокумент;
				Вычесть = 0;
				Если КоличествоВСтроке > 0 Тогда
					Вычесть = Мин(РазницаДобавитьВДокумент, КоличествоВСтроке);
				КонецЕсли;
				СтрокиПоРазмещению[ТекущаяСтрока].ДобавитьВДокумент = КоличествоВСтроке - Вычесть;
				РазницаДобавитьВДокумент = РазницаДобавитьВДокумент - Вычесть;
				Если РазницаДобавитьВДокумент <= 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура обнуляет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле - обрабатываемое табличное поле.
//
Процедура ОбнулитьСтолбецДобавитьВДокумент(ТабличноеПоле)

	Для каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.ДобавитьВДокумент = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбнулитьСтолбецДобавитьВДокумент()

// Процедура открывает отчет "Анализ заказа" по значению заказа.
//
// Параметры:
//  ЗаказПоставщику - ссылка на документ заказ.
//
Процедура ОткрытьОтчетАнализЗаказа(ЗаказПоставщику)

    УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ЗаказПоставщику,ложь, истина);

КонецПроцедуры // ОткрытьОтчетАнализЗаказа()

// Процедура заполняет столбец "Добавить в документ" в заданном табличном поле.
//
// Параметры:
//  ТабличноеПоле       - обрабатываемое табличное поле.
//  ИмяСтолбцаИсточника - столбец, данными которого будет заполняться столбец "Добавить в документ".
//
Процедура ЗаполнитьСтолбецДобавитьВДокумент(ТабличноеПоле, ИмяСтолбцаИсточника)

	Для Каждого СтрокаТабличнойЧасти Из ТабличноеПоле Цикл
		Если ТабличноеПоле = Услуги ИЛИ СтрокаТабличнойЧасти.МеткаРазмещение = Ложь Тогда
			Если СтрокаТабличнойЧасти.Пометка Тогда
				Отгрузить = СтрокаТабличнойЧасти[ИмяСтолбцаИсточника];
				Если мЧастичноеЗаполнение Тогда
					Заполнено         = СтрокаТабличнойЧасти.Заполнено;
					Добавить          = Отгрузить - ?(Заполнено > 0, Заполнено, 0);
					СтрокаТабличнойЧасти.ДобавитьВДокумент = ?(Добавить > 0, Добавить, 0);
				Иначе
					СтрокаТабличнойЧасти.ДобавитьВДокумент = Отгрузить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТабличноеПоле <> Услуги Тогда
		ЗаполнитьСтолбецДобавитьВДокументПоРазмещениям(ТабличноеПоле);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтолбецДобавитьВДокумент()

// Устанавливает видимость полей ввода в зависимости от настроек в форме.
//
Процедура УстановитьВидимостьЭлементовНастройки()
	
	// Поле ВидРазмещений видимо когда Наличие размещения установлено как С размещениями
	ЭлементыФормы.ПолеНастройкиВидРазмещений.Видимость = ФлагВидимостиВидовРазмещений;
	
	// Поле ДатаПоступления видимо когда Меньше/Равна/Больше
	ЭлементыФормы.ПолеДатаПоступления.Видимость = ФлагВидимостиДатыПоступления;
	
	// Поле ввода Просрочено дней видимо только когда Просрочен
	ЭлементыФормы.НадписьОтгрузкаДней.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	ЭлементыФормы.ПолеПросроченоДнейОтгрузки.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	ЭлементыФормы.НадписьОтгрузкаНа.Видимость = ФлагВидимостиПросроченоДнейОтгрузки;
	
	// Поле Дата оплаты видимо когда Меньше/Равна/Больше
	ЭлементыФормы.ПолеДатаОплаты.Видимость = ФлагВидимостиДатыОплаты;
	
	// Поле ввода Просрочено дней видимо только когда Просрочен
	ЭлементыФормы.НадписьОплатаДней.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	ЭлементыФормы.ПолеПросроченоДнейОплаты.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	ЭлементыФормы.НадписьОплатаНа.Видимость = ФлагВидимостиПросроченоДнейОплаты;
	
КонецПроцедуры // УстановитьВидимостьЭлементовНастройки()

// Устанавливает доступность полей ввода в зависимости от настроек в форме.
//
Процедура УстановитьДоступностьЭлементовНастройки()
	
	ЭлементыФормы.ПолеНастройкиНаличиеРазмещений.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСостояниеОплаты.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСрокОплатыСравнение.Доступность = ФлагДоступностиИзмененияНастроек;
	ЭлементыФормы.ПолеНастройкиСостояниеОтгрузки.Доступность = ФлагДоступностиИзмененияДляОтгрузки;
	ЭлементыФормы.ПолеНастройкиСрокОтгрузкиСравнение.Доступность = ФлагДоступностиИзмененияНастроек;

КонецПроцедуры // УстановитьДоступностьЭлементовНастройки()

// Устанавливает доступность кнопок в зависимости от наличия документов в таблице.
//
Процедура УстановитьДоступностьКнопокПанелиЗаказов()
	
	// При пустом ТабличноеПолеЗаказы не должны быть доступны кнопки действий над заказами.
	Если ТабличноеПолеЗаказы.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеАнализ.Доступность       = Истина;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВключитьВсе.Доступность  = Истина;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВыключитьВсе.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеАнализ.Доступность       = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВключитьВсе.Доступность  = Ложь;
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеВыключитьВсе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопокПанелиЗаказов()

// Устанавливает доступность кнопок в зависимости от наличия номенклатуры в таблицах.
//
Процедура УстановитьДоступностьКнопокПанелейТабЧастей()

	// При пустом табличное поле не должны быть доступны кнопки действий.
	Если Товары.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельТовары.Доступность = Ложь;
	КонецЕсли;

	Если Услуги.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельУслуги.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельУслуги.Доступность = Ложь;
	КонецЕсли;
	
	Если ВозвратнаяТара.Количество() > 0 Тогда
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьКнопокПанелейТабЧастей()

// Устанавливает список "Вариантов отбора".
//
Процедура УстановитьСтруктуруВариантовОтбора()
	
	// Установить вариант отбора заказов
	ВариантОтбораПоУмолчанию = ЗаполнитьСписокВариантовОтбора();
	
	ВариантОтбора = ВариантОтбораПоУмолчанию;
	
	ПолеНастройкиВариантОтбораПриИзменении(ЭлементыФормы.ПолеНастройкиВариантОтбора);
	
КонецПроцедуры // УстановитьСтруктуруВариантовОтбора()

// Вызывается при изменении настроек отбора в форме.
//
Процедура ПриИзмененииНастроекПоУмолчанию()

	ПолеНастройкиНаличиеРазмещенийПриИзменении(ЭлементыФормы.ПолеНастройкиНаличиеРазмещений);
	ПолеНастройкиСрокОплатыСравнениеПриИзменении(ЭлементыФормы.ПолеНастройкиСрокОплатыСравнение);
	ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении(ЭлементыФормы.ПолеНастройкиСрокОтгрузкиСравнение);
	
	Если ВариантОтбора = 1 Тогда
		// Для данного вида заполнения доступны для изменения настройки условий отгрузки
		ФлагДоступностиИзмененияДляОтгрузки = Истина;
	ИначеЕсли ВариантОтбора = 2 Тогда
		// Для данного вида заполнения недоступны для изменения настройки условий отгрузки
		ФлагДоступностиИзмененияДляОтгрузки = Ложь;
	КонецЕсли;
	
	ФлагДоступностиИзмененияНастроек = Истина;
	
	УстановитьДоступностьЭлементовНастройки();
			
КонецПроцедуры // ПриИзмененииНастроекПоУмолчанию()

// Заполнить список вариантов отбора.
// и вернуть Вид заполнения по умолчанию для данного Вида операции.
//
// Возвращаемое значение:
//  Число - Вид заполнения по умолчанию для данного Вида операции
//
Функция ЗаполнитьСписокВариантовОтбора()
	
	ЭлементыФормы.ПолеНастройкиВариантОтбора.СписокВыбора.Очистить();
	
	ЭлементыФормы.ПолеНастройкиВариантОтбора.СписокВыбора.Добавить(1, "Произвольный отбор");
	ЭлементыФормы.ПолеНастройкиВариантОтбора.СписокВыбора.Добавить(2, "Неисполненные заказы");

	Возврат 2;

КонецФункции // ЗаполнитьСписокВариантовОтбора()

// Заполняет установки по умолчанию для отбора по всем возможным условиям.
//
Процедура УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора()
	
	// Не важно
	НаличиеРазмещений = 1;
	
	// Не важно
	СостояниеОплаты = 1;
	
	// Не важно
	СостояниеОтгрузки = 1;
	
	// Не важно
	СрокОплатыСравнение = 1;
	// Не важно
	СрокОтгрузкиСравнение = 1;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВариантОтбора));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОплаты = ЗначениеПользователя;
	Иначе
		// По умолчанию 1 день
		ПросроченоДнейОплаты = 1;
	КонецЕсли;
	
	ЗначениеПользователя = ВосстановитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВариантОтбора));
	Если НЕ(ЗначениеПользователя = Неопределено) Тогда
		// Восстановим последнее установленное значение данным пользователем
		ПросроченоДнейОтгрузки = ЗначениеПользователя;
	Иначе
		// По умолчанию 1 день
		ПросроченоДнейОтгрузки = 1;
	КонецЕсли;
	
	// По умолчанию Текущая дата
	ДатаОплаты = ТекущаяДата();
	ДатаПоступления = ТекущаяДата();
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора()

// Заполняет установки по умолчанию для отбора "Неисполненных" заказов.
//
Процедура УстановитьНастройкиПоУмолчаниюДляНеисполненныхЗаказов()

	// Без резервов
	НаличиеРазмещений = 1;
	
	// Оплачен полностью
	СостояниеОплаты = 1;
	
	// Отгружен полностью
	СостояниеОтгрузки = 2;
	
	// Срок оплаты Не важно
	СрокОплатыСравнение = 1;
	// Срок отгрузки Меньше
	СрокОтгрузкиСравнение = 3;
	
	// По умолчанию 1 день (в отборе не участвуют)
	ПросроченоДнейОплаты = 1;
	ПросроченоДнейОтгрузки = 1;
	
	// По умолчанию Текущая дата (в отборе не участвуют)
	ДатаОплаты = ТекущаяДата();
	// Дата документа плюс 1 день
	ДатаПоступления = ДокументОбъект.Дата + 24*60*60;
	
КонецПроцедуры // УстановитьНастройкиПоУмолчаниюДляНеисполненныхЗаказов()

// Создает запрос и заполняет начальные установки построителя отбора для заказов.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета)

	// Запрос для отбора
	ТекстЗапроса = "
	|ВЫБРАТЬ //РАЗЛИЧНЫЕ
	|	истина 																			КАК Переносить,
	|	ложь 																			КАК НеЗаполнять,
	|	ВЫБОР КОГДА МАКСИМУМ(ЕстьNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток,0))>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										                КАК ЗаказыКоличество,
	|	ВЫБОР КОГДА МАКСИМУМ(ЕстьNULL(ЗаказыПоставщикамТара.КоличествоОстаток,0))>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										                КАК ТараКоличество,
	|	ВЫБОР КОГДА СУММА(ЕстьNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток,0))>0 ТОГДА
	|		истина ИНАЧЕ ложь КОНЕЦ										                КАК РазмещенияКоличество,
	|	МАКСИМУМ(ЕстьNULL(ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток,0))       КАК ЗаказыОстаток,
	|	-МАКСИМУМ(ЕстьNULL(РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток,0))  КАК РасчетыОстаток,
	|
	|	ДокументыЗаказПоставщику.Ссылка,
	|	ДокументыЗаказПоставщику.Дата,
	|	ДокументыЗаказПоставщику.Номер,
	|	ДокументыЗаказПоставщику.Контрагент,
	|	ДокументыЗаказПоставщику.ДоговорКонтрагента,
	|	ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента,
	|	ДокументыЗаказПоставщику.Организация,
	|	ДокументыЗаказПоставщику.Подразделение,
	|	ДокументыЗаказПоставщику.Склад,
	|	ДокументыЗаказПоставщику.Ответственный,
	|	ДокументыЗаказПоставщику.ВалютаДокумента,
	|	ДокументыЗаказПоставщику.ТипЦен,
	|	ДокументыЗаказПоставщику.ДатаОплаты,
	|	ДокументыЗаказПоставщику.ДатаПоступления,
	|	ДокументыЗаказПоставщику.Проведен,
	|	ДокументыЗаказПоставщику.СуммаДокумента
	|
	|{ ВЫБРАТЬ
	|	 ДокументыЗаказПоставщику.Контрагент.* КАК Контрагент,
	|	 ДокументыЗаказПоставщику.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	 ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента.* КАК КонтактноеЛицоКонтрагента,
	|	 ДокументыЗаказПоставщику.Организация.* КАК Организация,
	|	 ДокументыЗаказПоставщику.Склад.* КАК Склад,
	|	 ДокументыЗаказПоставщику.Подразделение.* КАК Подразделение,
	|	 ДокументыЗаказПоставщику.Ответственный.* КАК Ответственный,
	|	 ДокументыЗаказПоставщику.ТипЦен.* КАК ТипЦен,
	|	 ДокументыЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	 ДокументыЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента
	|//СВОЙСТВА
	|}
	|
	|ИЗ
	|	Документ.ЗаказПоставщику                                    КАК ДокументыЗаказПоставщику
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, СтатусПартии <> &СтатусТары) 
	|		                                                        КАК ЗаказыПоставщикамОстатки
	|		ПО ДокументыЗаказПоставщику.Ссылка = ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, СтатусПартии = &СтатусТары) 
	|		                                                        КАК ЗаказыПоставщикамТара
	|		ПО ДокументыЗаказПоставщику.Ссылка = ЗаказыПоставщикамТара.ЗаказПоставщику
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.РасчетыСКонтрагентами.Остатки         КАК РасчетыСКонтрагентамиОстатки
	|		ПО ДокументыЗаказПоставщику.Ссылка = РасчетыСКонтрагентамиОстатки.Сделка
	|
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки  КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО ДокументыЗаказПоставщику.Ссылка = РазмещениеЗаказовПокупателейОстатки.ЗаказПоставщику
	|
	|//СОЕДИНЕНИЯ
	|
	|	{ ГДЕ 
	|	 ДокументыЗаказПоставщику.Контрагент.* КАК Контрагент,
	|	 ДокументыЗаказПоставщику.ДоговорКонтрагента.* КАК ДоговорКонтрагента,
	|	 ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента.* КАК КонтактноеЛицоКонтрагента,
	|	 ДокументыЗаказПоставщику.Организация.* КАК Организация,
	|	 ДокументыЗаказПоставщику.Склад.* КАК Склад,
	|	 ДокументыЗаказПоставщику.Подразделение.* КАК Подразделение,
	|	 ДокументыЗаказПоставщику.Ответственный.* КАК Ответственный,
	|	 ДокументыЗаказПоставщику.ТипЦен.* КАК ТипЦен,
	|	 ДокументыЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	 ДокументыЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента
	|//СВОЙСТВА
	|//КАТЕГОРИИ
	|	}
	|
	|ГДЕ
	|	(ДокументыЗаказПоставщику.Проведен) И
	|
	|	((ДокументыЗаказПоставщику.Дата >= &ДатаНач) ИЛИ (&ДатаНач = &ПустаяДата)) И
	|	((ДокументыЗаказПоставщику.Дата <= &ДатаКон) ИЛИ (&ДатаКон = &ПустаяДата)) И
	|
	|	(	((&СрокОплатыСравнение = 6) И (ДокументыЗаказПоставщику.ДатаОплаты = &ПустаяДата)) ИЛИ
	|		((&СрокОплатыСравнение = 5) И (ДокументыЗаказПоставщику.ДатаОплаты > &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 4) И (ДокументыЗаказПоставщику.ДатаОплаты = &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 3) И (ДокументыЗаказПоставщику.ДатаОплаты < &ДатаОплаты)) ИЛИ
	|		((&СрокОплатыСравнение = 2) И (ДокументыЗаказПоставщику.ДатаОплаты <= &ТребуемаяДатаОплаты)) ИЛИ
	|		(&СрокОплатыСравнение = 1)
	|	) И
	|
	|	(	((&СрокОтгрузкиСравнение = 6) И (ДокументыЗаказПоставщику.ДатаПоступления = &ПустаяДата)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 5) И (ДокументыЗаказПоставщику.ДатаПоступления > &ДатаПоступления)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 4) И (ДокументыЗаказПоставщику.ДатаПоступления = &ДатаПоступления)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 3) И (ДокументыЗаказПоставщику.ДатаПоступления < &ДатаПоступления)) ИЛИ
	|		((&СрокОтгрузкиСравнение = 2) И (ДокументыЗаказПоставщику.ДатаПоступления <= &ТребуемаяДатаПоступления)) ИЛИ
	|		(&СрокОтгрузкиСравнение = 1)
	|	) И
	|
	|	(	((&СостояниеОплаты = 3) И ((РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток IS NULL) ИЛИ (-РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток < 0))) ИЛИ
	|		((&СостояниеОплаты = 2) И (-РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0)) ИЛИ
	|		(&СостояниеОплаты = 1)
	|	) И
	|
	|	(	((&СостояниеОтгрузки = 3) И ((ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток IS NULL) ИЛИ (ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток < 0)) И ((ЗаказыПоставщикамОстатки.КоличествоОстаток IS NULL) ИЛИ (ЗаказыПоставщикамОстатки.КоличествоОстаток < 0)) И ((ЗаказыПоставщикамТара.КоличествоОстаток IS NULL) ИЛИ (ЗаказыПоставщикамТара.КоличествоОстаток < 0))) ИЛИ
	|		((&СостояниеОтгрузки = 2) И ((ЗаказыПоставщикамОстатки.СуммаВзаиморасчетовОстаток > 0) ИЛИ (ЗаказыПоставщикамОстатки.КоличествоОстаток > 0) ИЛИ (ЗаказыПоставщикамТара.КоличествоОстаток > 0))) ИЛИ
	|		(&СостояниеОтгрузки = 1)
	|	) И
	|
	|	(	((&НаличиеРазмещений = 3) И (&ВидРазмещений = 3) И (РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРазмещений = 3) И (&ВидРазмещений = 2) И (РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРазмещений = 3) И (&ВидРазмещений = 1) И ((РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя) ИЛИ (РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя ССЫЛКА Документ.ВнутреннийЗаказ)) И (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток > 0)) ИЛИ
	|		((&НаличиеРазмещений = 2) И ((РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток IS NULL) ИЛИ (РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток < 0))) ИЛИ
	|		(&НаличиеРазмещений = 1)
	|	)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыЗаказПоставщику.Ссылка,
	|	ДокументыЗаказПоставщику.Дата,
	|	ДокументыЗаказПоставщику.Номер,
	|	ДокументыЗаказПоставщику.Контрагент,
	|	ДокументыЗаказПоставщику.ДоговорКонтрагента,
	|	ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента,
	|	ДокументыЗаказПоставщику.Организация,
	|	ДокументыЗаказПоставщику.Подразделение,
	|	ДокументыЗаказПоставщику.Склад,
	|	ДокументыЗаказПоставщику.Ответственный,
	|	ДокументыЗаказПоставщику.ВалютаДокумента,
	|	ДокументыЗаказПоставщику.ТипЦен,
	|	ДокументыЗаказПоставщику.ДатаОплаты,
	|	ДокументыЗаказПоставщику.ДатаПоступления,
	|	ДокументыЗаказПоставщику.Проведен,
	|	ДокументыЗаказПоставщику.СуммаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыЗаказПоставщику.Дата, ДокументыЗаказПоставщику.Номер
	|";
	
	СтруктураПредставлениеПолей = Новый Структура;
	
	СтруктураПредставлениеПолей.Вставить("Контрагент",                "Контрагент");
	СтруктураПредставлениеПолей.Вставить("ДоговорКонтрагента",        "Договор");
	СтруктураПредставлениеПолей.Вставить("КонтактноеЛицоКонтрагента", "Контактное лицо");
	СтруктураПредставлениеПолей.Вставить("Организация",               "Организация");
	СтруктураПредставлениеПолей.Вставить("Подразделение",             "Подразделение");
	СтруктураПредставлениеПолей.Вставить("Склад",                     "Склад");
	СтруктураПредставлениеПолей.Вставить("Ответственный",             "Ответственный");
	СтруктураПредставлениеПолей.Вставить("СуммаДокумента",            "Сумма документа");
	СтруктураПредставлениеПолей.Вставить("ТипЦен",                    "Тип цен");
	СтруктураПредставлениеПолей.Вставить("ВалютаДокумента",           "Валюта документа");
	
	Если ИспользоватьСвойстваИКатегории Тогда

        СоответствиеНазначений = Новый Соответствие;
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ПутьКДанным");  // описание поля запроса поля, для которого добавляются свойства и категории. Используется в условии соединения с регистром сведений, хранящим значения свойств или категорий
		ТаблицаПолей.Колонки.Добавить("Представление");// представление поля, для которого добавляются свойства и категории. 
		ТаблицаПолей.Колонки.Добавить("Назначение");   // назначение свойств/категорий объектов для данного поля
		//ТаблицаПолей.Колонки.Добавить("ТипЗначения");  // тип значения поля, для которого добавляются свойства и категории. Используется, если не установлено назначение
		ТаблицаПолей.Колонки.Добавить("НетКатегорий"); // признак НЕиспользования категорий для объекта
		
		ТекстПоляКатегорий = "";
		ТекстПоляСвойств = "";
		
		ТаблицаПолей.Очистить();
		
		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПоставщику.Контрагент";
		НоваяСтрока.Представление = "Контрагент";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;

		НоваяСтрока = ТаблицаПолей.Добавить();
		НоваяСтрока.ПутьКДанным = "ДокументыЗаказПоставщику.КонтактноеЛицоКонтрагента";
		НоваяСтрока.Представление = "КонтактноеЛицоКонтрагента";
		НоваяСтрока.Назначение = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_КонтактныеЛицаКонтрагентов;
		
		УправлениеОтчетами.ДобавитьВТекстСвойстваИКатегории(ТаблицаПолей, ТекстЗапроса, СтруктураПредставлениеПолей, СоответствиеНазначений, ПостроительОтчета.Параметры,, ТекстПоляКатегорий, ТекстПоляСвойств,, "//СВОЙСТВА", "//КАТЕГОРИИ", "//СОЕДИНЕНИЯ", , СтруктураДляОтбораПоКатегориям);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) = Ложь Тогда
		ПостроительОтчета.Текст = ТекстЗапроса;
	КонецЕсли;
	
	УправлениеОтчетами.УстановитьТипыЗначенийСвойствИКатегорийДляОтбора(ПостроительОтчета, ТекстПоляКатегорий, ТекстПоляСвойств, СоответствиеНазначений, СтруктураПредставлениеПолей);
	
	// Заполнить отбор построителя по умолчанию
	Если НЕ(ПостроительОтчета.Отбор.Количество() > 0) Тогда
		Если НастройкиИзДокумента Тогда
			ПостроительОтчета.УстановитьНастройки(НастройкиОтбора);
		Иначе
			ЗаполнитьОтборПостроителя(ПостроительОтчета);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнить представление полей построителя по именам
	УправлениеОтчетами.ЗаполнитьПредставленияПолей(СтруктураПредставлениеПолей, ПостроительОтчета);
	
КонецПроцедуры // ИнициироватьПостроительДляОтбораЗаказов()

// Заполняет переменные построителя выбранными в форме значениями.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ЗаполнитьПараметрыПостроителя(ПостроительОтчета)
	
	// Заполним параметры построителя
	ПостроительОтчета.Параметры.Вставить("НаличиеРазмещений",     НаличиеРазмещений);
	ПостроительОтчета.Параметры.Вставить("ВидРазмещений",         ВидРазмещений);
	ПостроительОтчета.Параметры.Вставить("СостояниеОплаты",       СостояниеОплаты);
	ПостроительОтчета.Параметры.Вставить("СостояниеОтгрузки",     СостояниеОтгрузки);
	ПостроительОтчета.Параметры.Вставить("СрокОплатыСравнение",   СрокОплатыСравнение);
	ПостроительОтчета.Параметры.Вставить("СрокОтгрузкиСравнение", СрокОтгрузкиСравнение);
	
	ПостроительОтчета.Параметры.Вставить("СтатусТары",      Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНач",         ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаКон",         ДатаОкончания);
	ПостроительОтчета.Параметры.Вставить("ДатаОплаты",      ДатаОплаты);
	ПостроительОтчета.Параметры.Вставить("ДатаПоступления", ДатаПоступления);
	ПостроительОтчета.Параметры.Вставить("ТекущаяДата",     ТекущаяДата());
	ПостроительОтчета.Параметры.Вставить("ПустаяДата",      Дата('00010101'));
	
	ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаОплаты",      НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОплаты));
	ПостроительОтчета.Параметры.Вставить("ТребуемаяДатаПоступления", НачалоДня(ТекущаяДата()-24*60*60*ПросроченоДнейОтгрузки));

КонецПроцедуры // ЗаполнитьПараметрыПостроителя()

// Заполняет отбор построителя по умолчанию.
//
// Параметры:
//  ПостроительОтчета - ссылка на объект ПостроительОтчета.
//
Процедура ЗаполнитьОтборПостроителя(ПостроительОтчета)
	
	// Добавим поля отбора по умолчанию
	Поле = ПостроительОтчета.Отбор.Добавить("Контрагент", "Контрагент", "Контрагент");
	
	Поле.Установить(ДокументОбъект.Контрагент);
	
	Поле = ПостроительОтчета.Отбор.Добавить("ДоговорКонтрагента", "ДоговорКонтрагента", "Договор");
	
	Поле.Установить(ДокументОбъект.ДоговорКонтрагента);
	
	Поле = ПостроительОтчета.Отбор.Добавить("Организация", "Организация", "Организация");
	
	Поле.Установить(ДокументОбъект.Организация);
	
	Поле = ПостроительОтчета.Отбор.Добавить("ВалютаДокумента", "ВалютаДокумента", "Валюта документа");
	
	Поле.Установить(ДокументОбъект.ВалютаДокумента);
	
	Поле = ПостроительОтчета.Отбор.Добавить("Ответственный", "Ответственный", "Ответственный");
	Поле.Установить(ДокументОбъект.Ответственный.Ссылка);
	Поле.Использование = Ложь;

	Поле = ПостроительОтчета.Отбор.Добавить("Склад", "Склад", "Склад");
	Поле.Использование = Ложь;
	
КонецПроцедуры // ЗаполнитьОтборПостроителя()

// Устанавливает видимость указанной страницы.
//
Процедура ПерейтиНаСтраницу(ИмяСтраницы)
	
	Если ИмяСтраницы = "Страница1" Тогда
		Панель.Страницы.Страница1.Видимость = Истина;
		Панель.Страницы.Страница2.Видимость = Ложь;
		Панель.ТекущаяСтраница = Панель.Страницы.Страница1;
		ЭтаФорма.Заголовок = "Отобрать заказы поставщикам";
	Иначе
		Панель.Страницы.Страница1.Видимость = Ложь;
		Панель.Страницы.Страница2.Видимость = Истина;
		Панель.ТекущаяСтраница = Панель.Страницы.Страница2;
		ЭтаФорма.Заголовок = "Заполнить по заказам поставщикам";
	КонецЕсли;

КонецПроцедуры // ПерейтиНаСтраницу()

// Устанавливает доступность элементов зависимости от режима заполнения.
//
Процедура УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры()
	
	Если НеЗаполнятьТовары Тогда
		ЭлементыФормы.ФлажокТовары.Доступность = Ложь;
		ПоказыватьТовары = Ложь;
	Иначе
		ЭлементыФормы.ФлажокТовары.Доступность = Истина;
	КонецЕсли;
	
	Если НеЗаполнятьУслуги Тогда
		ЭлементыФормы.ФлажокУслуги.Доступность = Ложь;
		ПоказыватьУслуги = Ложь;
	Иначе
		ЭлементыФормы.ФлажокУслуги.Доступность = Истина;
	КонецЕсли;
	
	Если мИспользоватьТару Тогда
		ЭлементыФормы.ФлажокТара.Видимость = Истина;
		Если НеЗаполнятьТару Тогда
			ЭлементыФормы.ФлажокТара.Доступность = Ложь;
			ПоказыватьТару = Ложь;
		Иначе
			ЭлементыФормы.ФлажокТара.Доступность = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ФлажокТара.Видимость = Ложь;
		НеЗаполнятьТару = Истина;
		ПоказыватьТару = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры()

// Заполняет в колонке "Размещенное количество" итоговое значение по Заказу поставщику
// суммарным количеством размещенной номенклатуры
Процедура ЗаполнитьСтолбецРазмещенноеКоличествоИтог(ТабличноеПоле)

	Для Каждого ТекущаяСтрока Из ТабличноеПоле Цикл
		Если НЕ ТекущаяСтрока.МеткаРазмещение Тогда
			// Обработка данных по размещениям
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЗаказПоставщику",                ТекущаяСтрока.ЗаказПоставщику);
			СтруктураПоиска.Вставить("Номенклатура",                   ТекущаяСтрока.Номенклатура);
			Если ТабличноеПоле = Товары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ТекущаяСтрока.ХарактеристикаНоменклатуры);
			КонецЕсли;
			СтруктураПоиска.Вставить("МеткаРазмещение", Истина);

			СтрокиПоРазмещению = ТабличноеПоле.НайтиСтроки(СтруктураПоиска);
			ВсегоРазмещено = 0;

			// Определим общее количество размещенной номенклатуры
			Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
				ВсегоРазмещено = ВсегоРазмещено + СтрокаПоРазмещению.РазмещенноеКоличество;
			КонецЦикла;

			ТекущаяСтрока.РазмещенноеКоличество = ВсегоРазмещено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет колонку ДобавитьВДокумент с учетом приоритетов размещенных заказов.
//
// Параметры:
//  ТабличноеПоле     - обрабатываемое табличное поле.
//  ТаблицаПоРазмещению - таблица размещенных заказов (если не определена, то берется из табличного поля).
//
Процедура ЗаполнитьСтолбецДобавитьВДокументПоРазмещениям(ТабличноеПоле, ТаблицаПоРазмещению = Неопределено)

	Если ТаблицаПоРазмещению = Неопределено Тогда
		
		ТаблицаПоРазмещению = ТабличноеПоле.Скопировать();
		
		// Если таблица размещений не заполнена, берем её из табличного поля
		КолвоСтрок = ТаблицаПоРазмещению.Количество();
		Для Индекс = 1 По КолвоСтрок Цикл
			Если ТаблицаПоРазмещению[КолвоСтрок - Индекс].МеткаРазмещение = Ложь Тогда
				ТаблицаПоРазмещению.Удалить(КолвоСтрок - Индекс);
			КонецЕсли;
		КонецЦикла;
		
		// В этом случае из табличного поля нужно удалить строки таблицы по размещениям
		КолвоСтрок = ТабличноеПоле.Количество();
		Для Индекс = 1 По КолвоСтрок Цикл
			Если ТабличноеПоле[КолвоСтрок - Индекс].МеткаРазмещение = Истина Тогда
				ТабличноеПоле.Удалить(КолвоСтрок - Индекс);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаПоРазмещению Цикл

			СтрокаТабличнойЧасти.Запланировано         = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),         0, СтрокаТабличнойЧасти.Запланировано);
			СтрокаТабличнойЧасти.Заполнено             = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),             0, СтрокаТабличнойЧасти.Заполнено);
			СтрокаТабличнойЧасти.ОсталосьПолучить      = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьПолучить),      0, СтрокаТабличнойЧасти.ОсталосьПолучить);
			СтрокаТабличнойЧасти.РазмещенноеКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.РазмещенноеКоличество), 0, СтрокаТабличнойЧасти.РазмещенноеКоличество);
			СтрокаТабличнойЧасти.ДобавитьВДокумент     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент),     0, СтрокаТабличнойЧасти.ДобавитьВДокумент);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаПоРазмещению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоЗаказам = ТабличноеПоле.Скопировать();
	
	Если ТабличноеПоле = Товары Тогда
		СтрокаХарактеристика = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика = "";
	КонецЕсли;

	ТаблицаПоРазмещению.Свернуть("Номенклатура" + СтрокаХарактеристика + ", ЗаказПоставщику, ПриоритетПоДатам, Размещение, Пометка, МеткаРазмещение, Код, Артикул, ЕдиницаИзмерения, Запланировано, Заполнено, ОсталосьПолучить, РазмещенноеКоличество, ДобавитьВДокумент, ФлагЗаполнено");
	ТаблицаПоРазмещению.Сортировать("Номенклатура" + СтрокаХарактеристика + ", ЗаказПоставщику, ПриоритетПоДатам");

	// Выберем строки из таблицы потребностей по заказу
	Для Каждого СтрокаПоЗаказу ИЗ ТаблицаПоЗаказам Цикл
		Если СтрокаПоЗаказу.Пометка Тогда
			ОсталосьПолучить = СтрокаПоЗаказу.ОсталосьПолучить;
			Если мЧастичноеЗаполнение Тогда
				ОсталосьПолучить = ОсталосьПолучить - СтрокаПоЗаказу.Заполнено;
			КонецЕсли;
			Если ОсталосьПолучить <= 0 Тогда
				Продолжить;
			КонецЕсли;

			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаПоЗаказу.Номенклатура);
			Если ТабличноеПоле = Товары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаПоЗаказу.ХарактеристикаНоменклатуры);
			КонецЕсли;
			СтруктураПоиска.Вставить("ЗаказПоставщику", СтрокаПоЗаказу.ЗаказПоставщику);

			СтрокиПоРазмещению = ТаблицаПоРазмещению.НайтиСтроки(СтруктураПоиска);

			// Переберем строки из таблицы по размещению
			Для Каждого СтрокаПоРазмещению Из СтрокиПоРазмещению Цикл
				Если СтрокаПоРазмещению.Пометка Тогда
					Если ОсталосьПолучить <= 0 Тогда
						Прервать;
					КонецЕсли;
					РазмещенноеКоличество = СтрокаПоРазмещению.РазмещенноеКоличество;
					Если РазмещенноеКоличество <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// Здесь заполним реквизит ДобавитьВДокумент по размещенному количеству
					Если ЗначениеЗаполнено(СтрокаПоРазмещению.Размещение) Тогда
						
						КолвоДобавить    = Мин(ОсталосьПолучить, РазмещенноеКоличество);
						ОсталосьПолучить = ОсталосьПолучить - КолвоДобавить;

						Если КолвоДобавить > 0 Тогда
							СтрокаПоРазмещению.ДобавитьВДокумент = КолвоДобавить;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
			
	// Удалим строки с пустым значением реквизита Размещение
	КолвоСтрок = ТаблицаПоРазмещению.Количество();
	Для Индекс = 1 По КолвоСтрок Цикл
		Если НЕ ЗначениеЗаполнено(ТаблицаПоРазмещению[КолвоСтрок - Индекс].Размещение) Тогда
			ТаблицаПоРазмещению.Удалить(КолвоСтрок - Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим таблицу остатков в табличное поле
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоРазмещению, ТабличноеПоле);
	
	ТабличноеПоле.Сортировать("Номенклатура" + СтрокаХарактеристика + ", ЗаказПоставщику, МеткаРазмещение, ПриоритетПоДатам, Размещение");

КонецПроцедуры // ЗаполнитьСтолбецДобавитьВДокументПоРазмещениям()

// Распределяет номенклатуру заказов в табличных полях Товары, Тара по заказам покупателей.
//
Процедура РаспределитьНоменклатуруПоЗаказамПокупателей(ТабличноеПоле, ИмяТабличногоПоля)
	
	ЗапросПоРазмещению = Новый Запрос;

	Если мЧастичноеЗаполнение Тогда
		ЗапросПоРазмещению.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	КонецЕсли;
	
	ЗапросПоРазмещению.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
	ЗапросПоРазмещению.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
	ЗапросПоРазмещению.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Если ТабличноеПоле = Товары Тогда
		ЗапросПоРазмещению.УстановитьПараметр("ТоварТара",      Перечисления.ТоварТара.Товар);
	ИначеЕсли ТабличноеПоле = ВозвратнаяТара Тогда
		ЗапросПоРазмещению.УстановитьПараметр("ТоварТара",      Перечисления.ТоварТара.Тара);
	КонецЕсли;
	
	ЗапросПоРазмещению.Текст = "
	|ВЫБРАТЬ
	|	Истина                                               КАК Пометка,
	|	Истина                                               КАК МеткаРазмещение,
	|	РазмещениеЗаказов.ЗаказПокупателя.Дата               КАК ПриоритетПоДатам,
	|	РазмещениеЗаказов.ЗаказПоставщику                    КАК ЗаказПоставщику,
	|	РазмещениеЗаказов.Номенклатура.Код                   КАК Код,
	|	РазмещениеЗаказов.Номенклатура.Артикул               КАК Артикул,
	|	РазмещениеЗаказов.Номенклатура                       КАК Номенклатура,
	|	РазмещениеЗаказов.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,"
	+ ?(ТабличноеПоле = Товары, "
	|	РазмещениеЗаказов.ХарактеристикаНоменклатуры         КАК ХарактеристикаНоменклатуры,", "") + "
	|	0                                                    КАК Запланировано,"
	+ ?(мЧастичноеЗаполнение, ?(ТабличноеПоле = Товары, "                               
	|	ВЫБОР КОГДА СУММА(ДокументПоступление.Количество * ДокументПоступление.Коэффициент/ДокументПоступление.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ФлагЗаполнено,
	|	СУММА(ДокументПоступление.Количество * ДокументПоступление.Коэффициент/ДокументПоступление.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Заполнено,", "
	|	ВЫБОР КОГДА СУММА(ДокументПоступление.Количество) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ФлагЗаполнено,
	|	СУММА(ДокументПоступление.Количество)                КАК Заполнено,"), "
	|	0                                                    КАК ФлагЗаполнено,
	|	0                                                    КАК Заполнено,") + "
	|	0                                                    КАК ОсталосьПолучить,
	|	РазмещениеЗаказов.ЗаказПокупателя                    КАК Размещение,
	|	МАКСИМУМ(РазмещениеЗаказов.КоличествоОстаток)        КАК РазмещенноеКоличество,
	|	0                                                    КАК ДобавитьВДокумент
	|
	|ИЗ
	|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПоставщику В (&СписокЗаказов)
	|	                                                         И ТоварТара = &ТоварТара
	|	                                                         ) КАК РазмещениеЗаказов
	|" + ?(мЧастичноеЗаполнение, "
	|ЛЕВОЕ СОЕДИНЕНИЕ // заполнено
	|	Документ.ПоступлениеТоваровУслугВНТТ." + ИмяТабличногоПоля + " КАК ДокументПоступление
	|ПО
	|	ДокументПоступление.Ссылка     = &ДокументСсылка
	|	И РазмещениеЗаказов.ЗаказПокупателя = ДокументПоступление.Заказ
	|	И РазмещениеЗаказов.ЗаказПоставщику = ДокументПоступление.ЗаказПоставщику
	|	И РазмещениеЗаказов.Номенклатура    = ДокументПоступление.Номенклатура"
	+ ?(ТабличноеПоле = Товары, "
	|	И РазмещениеЗаказов.ХарактеристикаНоменклатуры = ДокументПоступление.ХарактеристикаНоменклатуры", ""), "") + "
	|
	|ПРАВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента 
	|	                                              И ЗаказПоставщику В (&СписокЗаказов)"
	+ ?(ТабличноеПоле = Товары, "
	|	                                              И СтатусПартии <> &СтатусТары И Номенклатура.Услуга <> Истина", "
	|	                                              И СтатусПартии = &СтатусТары") + "
	|	                                              ) КАК ОстаткиЗаказ
	|ПО
	|	РазмещениеЗаказов.ЗаказПоставщику              = ОстаткиЗаказ.ЗаказПоставщику
	|	И РазмещениеЗаказов.Номенклатура               = ОстаткиЗаказ.Номенклатура"
	+ ?(ТабличноеПоле = Товары, "
	|	И РазмещениеЗаказов.ХарактеристикаНоменклатуры = ОстаткиЗаказ.ХарактеристикаНоменклатуры", "") + "
	|
	|ГДЕ
	|	НЕ РазмещениеЗаказов.ЗаказПокупателя ЕСТЬ NULL
	|
	|	СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаказов.Номенклатура,
	|	РазмещениеЗаказов.Номенклатура.Код,
	|	РазмещениеЗаказов.Номенклатура.Артикул,
	|	РазмещениеЗаказов.Номенклатура.ЕдиницаХраненияОстатков,"
	+ ?(ТабличноеПоле = Товары, "
	|	РазмещениеЗаказов.ХарактеристикаНоменклатуры,", "") + "
	|	РазмещениеЗаказов.ЗаказПокупателя,
	|	РазмещениеЗаказов.ЗаказПокупателя.Дата,
	|	РазмещениеЗаказов.ЗаказПоставщику
	|";

	ТаблицаПоРазмещению = ЗапросПоРазмещению.Выполнить().Выгрузить();

	ЗаполнитьСтолбецДобавитьВДокументПоРазмещениям(ТабличноеПоле, ТаблицаПоРазмещению);

	ЗаполнитьСтолбецРазмещенноеКоличествоИтог(ТабличноеПоле);

КонецПроцедуры // РаспределитьНоменклатуруПоЗаказамПокупателей()

// Заполняет табличные поля Товары, Тара, Услуги номенклатурой отобранных заказов.
//
Процедура ЗаполнитьПанельОтбораНоменклатуры()

	// Заполнить табличные поля:
	// Товары:

	Если НеЗаполнятьТовары <> Истина Тогда
		
		ЗапросПоТоварам = Новый Запрос;

		Если мЧастичноеЗаполнение Тогда
			ЗапросПоТоварам.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
		КонецЕсли;

		ЗапросПоТоварам.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		ЗапросПоТоварам.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
		ЗапросПоТоварам.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ЗапросПоТоварам.УстановитьПараметр("Организация",        ДокументОбъект.Организация);
		ЗапросПоТоварам.УстановитьПараметр("ПустаяДата",         Дата('00010101'));
		ЗапросПоТоварам.УстановитьПараметр("ПустоеРазмещение",   Неопределено);

		ЗапросПоТоварам.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	Ложь                                                  КАК МеткаРазмещение,
		|	&ПустаяДата                                           КАК ПриоритетПоДатам,
		|	&ПустоеРазмещение                                     КАК Размещение,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВнутреннийЗапрос.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,
		|	ВнутреннийЗапрос.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,"
		+ ?(мЧастичноеЗаполнение, "                               
		|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.Заполнено) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ФлагЗаполнено,
		|	СУММА(ВнутреннийЗапрос.Заполнено)                     КАК Заполнено,", "
		|	0                                                     КАК ФлагЗаполнено,
		|	0                                                     КАК Заполнено,") + "
		|	СУММА(ВнутреннийЗапрос.ОсталосьПолучить)              КАК ОсталосьПолучить,
		|	0                                                     КАК РазмещенноеКоличество,
		|	0                                                     КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиЗаказ.ЗаказПоставщику            КАК ЗаказПоставщику,
		|		ОстаткиЗаказ.Номенклатура               КАК Номенклатура,
		|		ОстаткиЗаказ.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)КАК ОсталосьПолучить,"
		+ ?(мЧастичноеЗаполнение, "                               
		|		СУММА(ДокументПоступление.Количество * ДокументПоступление.Коэффициент/ДокументПоступление.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Заполнено,", "") + "
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоПриход) КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПоставщику В (&СписокЗаказов)
		|		                                              И СтатусПартии <> &СтатусТары
		|		                                              И Номенклатура.Услуга <> Истина) КАК ОстаткиЗаказ
		|
		|" + ?(мЧастичноеЗаполнение, "
		|ЛЕВОЕ СОЕДИНЕНИЕ // заполнено
		|	Документ.ПоступлениеТоваровУслугВНТТ.Товары КАК ДокументПоступление
		|ПО
		|	ДокументПоступление.Ссылка     = &ДокументСсылка
		|	И ОстаткиЗаказ.ЗаказПоставщику = ДокументПоступление.ЗаказПоставщику
		|	И ОстаткиЗаказ.Номенклатура    = ДокументПоступление.Номенклатура
		|	И ОстаткиЗаказ.ХарактеристикаНоменклатуры = ДокументПоступление.ХарактеристикаНоменклатуры", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиЗаказ.ЗаказПоставщику,
		|		ОстаткиЗаказ.Номенклатура,
		|		ОстаткиЗаказ.ХарактеристикаНоменклатуры
		|
		|	) КАК ВнутреннийЗапрос
		|
		|ГДЕ
		|	Запланировано > 0
		|	И ОсталосьПолучить >= 0
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.ЗаказПоставщику,
		|	ВнутреннийЗапрос.Номенклатура,
		|	ВнутреннийЗапрос.ХарактеристикаНоменклатуры
		|";

		Товары = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТабличнойЧасти Из Товары Цикл

			СтрокаТабличнойЧасти.Запланировано     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),     0, СтрокаТабличнойЧасти.Запланировано);
			Если мЧастичноеЗаполнение Тогда
				СтрокаТабличнойЧасти.Заполнено     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),         0, СтрокаТабличнойЧасти.Заполнено);
			КонецЕсли;
			СтрокаТабличнойЧасти.ОсталосьПолучить  = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьПолучить),  0, СтрокаТабличнойЧасти.ОсталосьПолучить);
			СтрокаТабличнойЧасти.ДобавитьВДокумент = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент), 0, СтрокаТабличнойЧасти.ДобавитьВДокумент);

		КонецЦикла;
		
		РаспределитьНоменклатуруПоЗаказамПокупателей(Товары, "Товары");
		
		ЗаполнитьСтолбецДобавитьВДокумент(Товары, "ОсталосьПолучить");
		
	КонецЕсли;
	
	// Возвратная тара:

	Если НеЗаполнятьТару <> Истина Тогда

		ЗапросПоТаре = Новый Запрос;

		Если мЧастичноеЗаполнение Тогда
			ЗапросПоТаре.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
		КонецЕсли;

		ЗапросПоТаре.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		ЗапросПоТаре.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
		ЗапросПоТаре.УстановитьПараметр("СтатусТары",         Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		ЗапросПоТаре.УстановитьПараметр("Организация",        ДокументОбъект.Организация);
		ЗапросПоТаре.УстановитьПараметр("ПустаяДата",         Дата('00010101'));
		ЗапросПоТаре.УстановитьПараметр("ПустоеРазмещение",   Неопределено);

		ЗапросПоТаре.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	Ложь                                                  КАК МеткаРазмещение,
		|	&ПустаяДата                                           КАК ПриоритетПоДатам,
		|	&ПустоеРазмещение                                     КАК Размещение,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВнутреннийЗапрос.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,"
		+ ?(мЧастичноеЗаполнение, "                               
		|	ВЫБОР КОГДА СУММА(ВнутреннийЗапрос.Заполнено) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК ФлагЗаполнено,
		|	СУММА(ВнутреннийЗапрос.Заполнено)                     КАК Заполнено,", "
		|	0                                                     КАК ФлагЗаполнено,
		|	0                                                     КАК Заполнено,") + "
		|	СУММА(ВнутреннийЗапрос.ОсталосьПолучить)              КАК ОсталосьПолучить,
		|	0                                                     КАК РазмещенноеКоличество,
		|	0                                                     КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиЗаказ.ЗаказПоставщику            КАК ЗаказПоставщику,
		|		ОстаткиЗаказ.Номенклатура               КАК Номенклатура,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)КАК ОсталосьПолучить,"
		+ ?(мЧастичноеЗаполнение, "                               
		|		СУММА(ДокументПоступление.Количество)   КАК Заполнено,", "") + "
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоПриход) КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПоставщику В (&СписокЗаказов)
		|		                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|" + ?(мЧастичноеЗаполнение, "
		|ЛЕВОЕ СОЕДИНЕНИЕ // заполнено
		|	Документ.ПоступлениеТоваровУслугВНТТ.ВозвратнаяТара КАК ДокументПоступление
		|ПО
		|	ДокументПоступление.Ссылка     = &ДокументСсылка
		|	И ОстаткиЗаказ.ЗаказПоставщику = ДокументПоступление.ЗаказПоставщику
		|	И ОстаткиЗаказ.Номенклатура    = ДокументПоступление.Номенклатура", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиЗаказ.ЗаказПоставщику,
		|		ОстаткиЗаказ.Номенклатура
		|
		|	) КАК ВнутреннийЗапрос
		|
		|ГДЕ
		|	Запланировано > 0
		|	И ОсталосьПолучить >= 0
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.ЗаказПоставщику,
		|	ВнутреннийЗапрос.Номенклатура
		|";

		ВозвратнаяТара = ЗапросПоТаре.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТабличнойЧасти Из ВозвратнаяТара Цикл

			СтрокаТабличнойЧасти.Запланировано        = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),     0, СтрокаТабличнойЧасти.Запланировано);
			Если мЧастичноеЗаполнение Тогда
				СтрокаТабличнойЧасти.Заполнено        = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),         0, СтрокаТабличнойЧасти.Заполнено);
			КонецЕсли;
			СтрокаТабличнойЧасти.ОсталосьПолучить     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьПолучить),  0, СтрокаТабличнойЧасти.ОсталосьПолучить);
			СтрокаТабличнойЧасти.ДобавитьВДокумент    = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент), 0, СтрокаТабличнойЧасти.ДобавитьВДокумент);

		КонецЦикла;

		РаспределитьНоменклатуруПоЗаказамПокупателей(ВозвратнаяТара, "ВозвратнаяТара");
		
		ЗаполнитьСтолбецДобавитьВДокумент(ВозвратнаяТара, "ОсталосьПолучить");

	КонецЕсли;

	// Услуги:

	Если НеЗаполнятьУслуги <> Истина Тогда
	
		ЗапросПоУслугам = Новый Запрос;

		Если мЧастичноеЗаполнение Тогда
			ЗапросПоУслугам.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
		КонецЕсли;

		ЗапросПоУслугам.УстановитьПараметр("ДоговорКонтрагента", ДокументОбъект.ДоговорКонтрагента);
		ЗапросПоУслугам.УстановитьПараметр("СписокЗаказов",      СписокЗаказов);
		ЗапросПоУслугам.УстановитьПараметр("ПустаяДата",         Дата('00010101'));

		ЗапросПоУслугам.Текст = "
		|ВЫБРАТЬ
		|	Истина                                                КАК Пометка,
		|	Ложь                                                  КАК МеткаРазмещение,
		|	&ПустаяДата                                           КАК ПриоритетПоДатам,
		|	ВнутреннийЗапрос.Номенклатура.Код                     КАК Код,
		|	ВнутреннийЗапрос.Номенклатура.Артикул                 КАК Артикул,
		|	ВнутреннийЗапрос.Номенклатура                         КАК Номенклатура,
		|	ВнутреннийЗапрос.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
		|	ВнутреннийЗапрос.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|	СУММА(ВнутреннийЗапрос.Запланировано)                 КАК Запланировано,"
		+ ?(мЧастичноеЗаполнение, "                               
		|	СУММА(ВнутреннийЗапрос.Заполнено)                     КАК Заполнено,", "") + "
		|	СУММА(ВнутреннийЗапрос.ОсталосьПолучить)              КАК ОсталосьПолучить,
		|	0                                                     КАК ДобавитьВДокумент
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ОстаткиЗаказ.ЗаказПоставщику                      КАК ЗаказПоставщику,
		|		ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|		МАКСИМУМ(ОстаткиЗаказ.КоличествоКонечныйОстаток)  КАК ОсталосьПолучить,"
		+ ?(мЧастичноеЗаполнение, "                               
		|		СУММА(ДокументПоступление.Количество)             КАК Заполнено,", "") + "
		|		СУММА(ОстаткиЗаказ.КоличествоПриход)              КАК Запланировано
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.ОстаткиИОбороты(,,,, ДоговорКонтрагента = &ДоговорКонтрагента 
		|		                                              И ЗаказПоставщику В (&СписокЗаказов)
		|		                                              И Номенклатура.Услуга = Истина) КАК ОстаткиЗаказ
		|" + ?(мЧастичноеЗаполнение, "
		|ЛЕВОЕ СОЕДИНЕНИЕ // колонка заполнено
		|	Документ.ПоступлениеТоваровУслугВНТТ.Услуги КАК ДокументПоступление
		|ПО
		|	ДокументПоступление.Ссылка     = &ДокументСсылка
		|	И ОстаткиЗаказ.ЗаказПоставщику = ДокументПоступление.ЗаказПоставщику
		|	И ОстаткиЗаказ.Номенклатура    = ДокументПоступление.Номенклатура", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		ОстаткиЗаказ.ЗаказПоставщику,
		|		ОстаткиЗаказ.Номенклатура
		|
		|	) КАК ВнутреннийЗапрос
		|ГДЕ
		|	Запланировано > 0
		|	И ОсталосьПолучить >= 0
		|
		|	СГРУППИРОВАТЬ ПО
		|	ВнутреннийЗапрос.ЗаказПоставщику,
		|	ВнутреннийЗапрос.Номенклатура
		|";

		Услуги = ЗапросПоУслугам.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл

			СтрокаТабличнойЧасти.Запланировано     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Запланировано),     0, СтрокаТабличнойЧасти.Запланировано);
			Если мЧастичноеЗаполнение Тогда
				СтрокаТабличнойЧасти.Заполнено     = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заполнено),         0, СтрокаТабличнойЧасти.Заполнено);
			КонецЕсли;
			СтрокаТабличнойЧасти.ОсталосьПолучить  = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОсталосьПолучить),  0, СтрокаТабличнойЧасти.ОсталосьПолучить);
			СтрокаТабличнойЧасти.ДобавитьВДокумент = ?(НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДобавитьВДокумент), 0, СтрокаТабличнойЧасти.ДобавитьВДокумент);

		КонецЦикла;
		
		ЗаполнитьСтолбецДобавитьВДокумент(Услуги, "ОсталосьПолучить");
		
	КонецЕсли;

	// Установить видимость закладок
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = ПоказыватьТовары;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ПоказыватьУслуги;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость   = ПоказыватьТару;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Товары.Колонки);

	// Установить видимость колонок "Заполнено"
	ЭлементыФормы.Товары.Колонки.Заполнено.Видимость         = мЧастичноеЗаполнение;
	ЭлементыФормы.Услуги.Колонки.Заполнено.Видимость         = мЧастичноеЗаполнение;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Заполнено.Видимость = мЧастичноеЗаполнение;

КонецПроцедуры // ЗаполнитьПанельОтбораНоменклатуры()

// Выполняет перенос отобранных позиций номенклатуры в документ поступление (в режиме заполнения)
//
Процедура ЗаполнитьТабличныеЧастиДокумента()

	СтруктураВозвращаемыхЗначений = Новый Структура();

	СтруктураВозвращаемыхЗначений.Вставить("Команда",            "ЗаполнениеТабличныхЧастей");

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьТовары",    ПоказыватьТовары);
	Если ПоказыватьТовары Тогда
		КопияТовары = Товары.Скопировать();
		КопияТовары.Колонки.ДобавитьВДокумент.Имя = "Количество";
		КопияТовары.Колонки.Размещение.Имя        = "Заказ";

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияТовары.Количество() Цикл

			СтрокаТаблицы = КопияТовары.Получить(НомерСтрокиТаблицы);

			СтрокаКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество), 0, СтрокаТаблицы.Количество);
			
			Если НЕ СтрокаТаблицы.Пометка
				ИЛИ СтрокаКоличество <= 0 Тогда
				КопияТовары.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаТаблицы.МеткаРазмещение 
				И СтрокаТаблицы.Количество <= СтрокаТаблицы.РазмещенноеКоличество Тогда
				КопияТовары.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаТаблицы.МеткаРазмещение 
				И СтрокаТаблицы.Количество > СтрокаТаблицы.РазмещенноеКоличество Тогда
	            СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - СтрокаТаблицы.РазмещенноеКоличество;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;
		СтруктураВозвращаемыхЗначений.Вставить("Товары",         КопияТовары);
	КонецЕсли;

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьТару",      ПоказыватьТару);
	Если ПоказыватьТару Тогда
		КопияВозвратнаяТара = ВозвратнаяТара.Скопировать();
		КопияВозвратнаяТара.Колонки.ДобавитьВДокумент.Имя = "Количество";
		КопияВозвратнаяТара.Колонки.Размещение.Имя        = "Заказ";

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияВозвратнаяТара.Количество() Цикл

			СтрокаТаблицы = КопияВозвратнаяТара.Получить(НомерСтрокиТаблицы);

			СтрокаКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество), 0, СтрокаТаблицы.Количество);
			
			Если НЕ СтрокаТаблицы.Пометка
				ИЛИ СтрокаКоличество <= 0 Тогда
				КопияВозвратнаяТара.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаТаблицы.МеткаРазмещение 
				И СтрокаТаблицы.Количество <= СтрокаТаблицы.РазмещенноеКоличество Тогда
				КопияТовары.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			Если НЕ СтрокаТаблицы.МеткаРазмещение 
				И СтрокаТаблицы.Количество > СтрокаТаблицы.РазмещенноеКоличество Тогда
	            СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - СтрокаТаблицы.РазмещенноеКоличество;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;
		СтруктураВозвращаемыхЗначений.Вставить("ВозвратнаяТара", КопияВозвратнаяТара);
	КонецЕсли;

	СтруктураВозвращаемыхЗначений.Вставить("ЗаполнятьУслуги",    ПоказыватьУслуги);
	Если ПоказыватьУслуги Тогда
		КопияУслуги = Услуги.Скопировать();
		КопияУслуги.Колонки.ДобавитьВДокумент.Имя = "Количество";

		НомерСтрокиТаблицы = 0;
		Пока НомерСтрокиТаблицы < КопияУслуги.Количество() Цикл

			СтрокаТаблицы = КопияУслуги.Получить(НомерСтрокиТаблицы);
			
			СтрокаКоличество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество), 0, СтрокаТаблицы.Количество);
			
			Если НЕ СтрокаТаблицы.Пометка
				ИЛИ СтрокаКоличество <= 0 Тогда
				КопияУслуги.Удалить(СтрокаТаблицы);
				Продолжить;
			КонецЕсли;

			НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;

		КонецЦикла;

		СтруктураВозвращаемыхЗначений.Вставить("Услуги",            КопияУслуги);
	КонецЕсли;
	
	ОповеститьОВыборе(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // ЗаполнитьТабличныеЧастиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		// Или форма открыта некорректно, или документ еще не был записан
		ОбщегоНазначения.СообщитьОбОшибке("Документ не записан. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли ДокументОбъект.Проведен И ДокументОбъект.Модифицированность() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не записан. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран контрагент. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран договор. Заполнение невозможно!", Отказ);
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация. Заполнение невозможно!", Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	НеЗаполнятьТару         = ?(НЕ мИспользоватьТару И НЕ НеЗаполнятьТару, Истина,Ложь);
	
	// Заполнить список доступных вариантов отбора
	УстановитьСтруктуруВариантовОтбора();
	
	// Создать и заполнить построитель для отбора
	ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета);
	
	// Установить доступность кнопок командной панели таблицы Заказов
	УстановитьДоступностьКнопокПанелиЗаказов();
	
	// Установим конец периода на конец дня, предшествующего дате документа закрытия
	ДатаКон = КонецДня(ДокументОбъект.Дата);
	ДатаКонПриИзменении(ЭлементыФормы.ДатаКон);

	ПерейтиНаСтраницу("Страница1");
	
	ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеЗаполнить.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события ПриИзменении элемента формы ДатаНач.
//
Процедура ДатаНачПриИзменении(Элемент)

	// Установка даты начала периода по умолчанию
	НП.УстановитьПериод(ДатаНач, КонецДня(ДатаКон), Истина);
	
КонецПроцедуры // ДатаНачПриИзменении()

// Обработчик события ПриИзменении элемента формы ДатаКон.
//
Процедура ДатаКонПриИзменении(Элемент)

	// Установка даты конца периода по умолчанию
	Если КонецДня(ДатаКон) > КонецДня(ДокументОбъект.Дата) Тогда
		// Установим конец периода на конец дня даты документа поступления
		ДатаКон = КонецДня(ДокументОбъект.Дата);
		Предупреждение("Дата окончания периода не должна быть больше даты документа!",,ЭтаФорма.Заголовок);
	Иначе
		ДатаКон = КонецДня(ДатаКон);
	КонецЕсли;
	
	НП.УстановитьПериод(ДатаНач, ДатаКон, Истина);
	
КонецПроцедуры	// ДатаКонПриИзменении()

// Обработчик события Нажатие кнопки настройки периода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	// Установка периода отбора
	Если НП.Редактировать() Тогда
		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

// Обработчик события Выбор поля ВариантОтбора.
// формы. Процедура устанавливает значение реквизита.
//
Процедура ПолеНастройкиВариантОтбораПриИзменении(Элемент)

	// Установить настройки диалога по варианту отбора
	Если Элемент.Значение = 1 Тогда 
		УстановитьНастройкиПоУмолчаниюДляПроизвольногоОтбора();
	ИначеЕсли Элемент.Значение = 2 Тогда 
		УстановитьНастройкиПоУмолчаниюДляНеисполненныхЗаказов();
	КонецЕсли;
	
	ПриИзмененииНастроекПоУмолчанию();
	
КонецПроцедуры // ПолеНастройкиВариантОтбораПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиНаличиеРазмещений.
//
Процедура ПолеНастройкиНаличиеРазмещенийПриИзменении(Элемент)
	
	// Если с резервами, то доступен отбор по местоположение резервов
	Если Элемент.Значение = 3 Тогда 
		ФлагВидимостиВидовРазмещений = Истина;
	Иначе
		ФлагВидимостиВидовРазмещений = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
	
КонецПроцедуры // ПолеНастройкиНаличиеРазмещенийПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСрокОплатыСравнение.
//
Процедура ПолеНастройкиСрокОплатыСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = 1 ИЛИ Элемент.Значение = 6 Тогда 
		// По значению Не важно и Не заполнена скроем поля настройки отбора 
		ФлагВидимостиПросроченоДнейОплаты = Ложь;
		ФлагВидимостиДатыОплаты = Ложь;
	ИначеЕсли Элемент.Значение = 2 Тогда 
		// По значению Просрочен доступен отбор по Количеству дней
		ФлагВидимостиПросроченоДнейОплаты = Истина;
		ФлагВидимостиДатыОплаты = Ложь;
	Иначе
		// Доступен отбор по Дате оплаты
		ФлагВидимостиПросроченоДнейОплаты = Ложь;
		ФлагВидимостиДатыОплаты = Истина;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
			
КонецПроцедуры // ПолеНастройкиСрокОплатыСравнениеПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеНастройкиСрокОтгрузкиСравнение.
//
Процедура ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = 1 ИЛИ Элемент.Значение = 6 Тогда 
		// По значению Не важно и Не заполнена скроем поля настройки отбора 
		ФлагВидимостиПросроченоДнейОтгрузки = Ложь;
		ФлагВидимостиДатыПоступления = Ложь;
	ИначеЕсли Элемент.Значение = 2 Тогда 
		// По значению Просрочен доступен отбор по Количеству дней
		ФлагВидимостиПросроченоДнейОтгрузки = Истина;
		ФлагВидимостиДатыПоступления = Ложь;
	Иначе
		// Доступен отбор по Дате отгрузки
		ФлагВидимостиПросроченоДнейОтгрузки = Ложь;
		ФлагВидимостиДатыПоступления = Истина;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовНастройки();
			
КонецПроцедуры // ПолеНастройкиСрокОтгрузкиСравнениеПриИзменении()

// Обработчик события ПриИзменении элемента формы ПолеПросроченоДнейОтгрузки.
//
Процедура ПолеПросроченоДнейОтгрузкиПриИзменении(Элемент)

	// Сохраним значение поля данного ВидаЗаполнения
	СохранитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОтгрузки_" + Строка(ВариантОтбора), ПросроченоДнейОтгрузки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ПолеПросроченоДнейОплаты.
//
Процедура ПолеПросроченоДнейОплатыПриИзменении(Элемент)
	
	// Сохраним значение поля для данного ВидаЗаполнения
	СохранитьЗначение(ДокументОбъект.Метаданные().Имя + "_ПросроченоДнейОплаты_" + Строка(ВариантОтбора), ПросроченоДнейОплаты);
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	СтраницаПанели.Товары.Заголовок       = "Товары (" + Товары.Количество() + " поз.)";
	СтраницаПанели.Тара.Заголовок         = "Тара ("   + ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок       = "Услуги (" + Услуги.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Обработчик события НачалоВыбора элемента формы ТабличноеПолеОтбор.Значение.
//
Процедура ТабличноеПолеОтборЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "категории") Тогда
		// Ограничение списка категорий
		Назначение = СоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборКатегории(Элемент, Назначение, ЭтаФорма, СтандартнаяОбработка);
	ИначеЕсли Найти(НРег(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление), "св-во") Тогда
		Свойство = СоответствиеНазначений.Получить(ЭлементыФормы.ТабличноеПолеОтбор.ТекущаяСтрока.Представление);
		УправлениеОтчетами.ОсуществитьВыборСвойства(Элемент, Свойство, ЭтаФорма, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИспользоватьСвойстваИКатегории.
//
Процедура ИспользоватьСвойстваИКатегорииПриИзменении(Элемент)
	
	// Заполнить построитель для отбора
	ИнициироватьПостроительДляОтбораЗаказов(ПостроительОтчета);
	
КонецПроцедуры

// Обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// Отключим стандартную обработку для этой формы
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ФлажокТовары
//
Процедура ФлажокТоварыПриИзменении(Элемент)

	// Установим видимость таблицы Товары по значению флажка
	Если ПоказыватьТовары Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
	ИначеЕсли ПоказыватьТару ИЛИ ПоказыватьУслуги Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = Истина;
		ПоказыватьТовары = Истина;
	КонецЕсли;

	УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры();

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ФлажокУслуги
//
Процедура ФлажокУслугиПриИзменении(Элемент)

	// Установим видимость таблицы Услуги по значению флажка
	Если ПоказыватьУслуги Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;
	ИначеЕсли ПоказыватьТовары ИЛИ ПоказыватьТару Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;
		ПоказыватьУслуги = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ФлажокТара
//
Процедура ФлажокТараПриИзменении(Элемент)

	// Установим видимость таблицы Тара по значению флажка
	Если ПоказыватьТару Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
	ИначеЕсли ПоказыватьТовары ИЛИ ПоказыватьУслуги Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
		ПоказыватьТару = Истина;
	КонецЕсли;

	УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Заказы".
//
Процедура ТабличноеПолеЗаказыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.НеЗаполнять Тогда
		ОформлениеСтроки.Ячейки.Переносить.ТолькоПросмотр = Истина;
		ОформлениеСтроки.ЦветФона = мЦветГруппы;
	Иначе
		ОформлениеСтроки.Ячейки.Переносить.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Отбор".
//
Процедура ТабличноеПолеОтборПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеСтроки.Имя = "Контрагент" 
	 ИЛИ ДанныеСтроки.Имя = "ДоговорКонтрагента" 
	 ИЛИ ДанныеСтроки.Имя = "Организация"
	 ИЛИ ДанныеСтроки.Имя = "ВалютаДокумента" Тогда
		ОформлениеСтроки.Ячейки.Использование.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Имя.ТолькоПросмотр           = Истина;
		ОформлениеСтроки.Ячейки.ВидСравнения.ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр      = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события Выбор, открывает Документ по двойному щелчку в списке.
//
Процедура ТабличноеПолеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	Если (Колонка.Имя <> "Переносить") Тогда
		Если ВыбраннаяСтрока.Ссылка <> Неопределено Тогда
			ВыбраннаяСтрока.Ссылка.ПолучитьФорму(, ЭтаФорма).Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТабличноеПолеЗаказыВыбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличного поля "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МеткаРазмещение       = ДанныеСтроки.МеткаРазмещение;
	ДобавитьВДокумент     = ДанныеСтроки.ДобавитьВДокумент;
	ОсталосьПолучить      = ДанныеСтроки.ОсталосьПолучить;
	РазмещенноеКоличество = ДанныеСтроки.РазмещенноеКоличество;
	Заполнено             = ?(мЧастичноеЗаполнение, ДанныеСтроки.Заполнено, 0);

	Если НЕ МеткаРазмещение И ДобавитьВДокумент > (ОсталосьПолучить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.Шрифт      = мЖирныйШрифт;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мСинийЦвет;
	КонецЕсли;

	Если НЕ МеткаРазмещение И ДобавитьВДокумент < (ОсталосьПолучить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ОсталосьПолучить.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если НЕ МеткаРазмещение И ДобавитьВДокумент < (РазмещенноеКоличество - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.РазмещенноеКоличество.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если МеткаРазмещение И ДобавитьВДокумент < (РазмещенноеКоличество - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.РазмещенноеКоличество.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если МеткаРазмещение И ДобавитьВДокумент > (РазмещенноеКоличество - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мКрасныйЦвет;
	КонецЕсли;

	Если НЕ МеткаРазмещение Тогда
		ОформлениеСтроки.ЦветФона = мЦветГруппы;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗаказПоставщику) Тогда
		ДанныеСтроки.Пометка = Ложь;
		ДанныеСтроки.ДобавитьВДокумент = 0;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзмененииФлажка" табличного поля "Товары".
//
Процедура ТоварыПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;

	Если ТекущаяСтрока.МеткаРазмещение Тогда
		УстановитьСнятьФлажкиГруппы(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары)
	Иначе
		УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, Товары);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" табличной части "Товары".
//
Процедура ТоварыДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;

	Если ТекущаяСтрока.МеткаРазмещение Тогда
		ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, Товары);
	Иначе
		ОбновитьВСтрокахДобавитьВДокумент(ТекущаяСтрока, Товары);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // ВозвратнаяТараПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ВозвратнаяТараПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МеткаРазмещение       = ДанныеСтроки.МеткаРазмещение;
	ДобавитьВДокумент     = ДанныеСтроки.ДобавитьВДокумент;
	ОсталосьПолучить      = ДанныеСтроки.ОсталосьПолучить;
	РазмещенноеКоличество = ДанныеСтроки.РазмещенноеКоличество;
	Заполнено             = ?(мЧастичноеЗаполнение, ДанныеСтроки.Заполнено, 0);

	Если НЕ МеткаРазмещение И ДобавитьВДокумент > (ОсталосьПолучить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.Шрифт      = мЖирныйШрифт;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мСинийЦвет;
	КонецЕсли;

	Если НЕ МеткаРазмещение И ДобавитьВДокумент < (ОсталосьПолучить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ОсталосьПолучить.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если НЕ МеткаРазмещение И ДобавитьВДокумент < (РазмещенноеКоличество - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.РазмещенноеКоличество.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если МеткаРазмещение И ДобавитьВДокумент < (РазмещенноеКоличество - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.РазмещенноеКоличество.Шрифт = мЖирныйШрифт;
	КонецЕсли;

	Если МеткаРазмещение И ДобавитьВДокумент > (РазмещенноеКоличество - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мКрасныйЦвет;
	КонецЕсли;

	Если НЕ МеткаРазмещение Тогда
		ОформлениеСтроки.ЦветФона = мЦветГруппы;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗаказПоставщику) Тогда
		ДанныеСтроки.Пометка = Ложь;
		ДанныеСтроки.ДобавитьВДокумент = 0;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура - обработчик события "ПриИзмененииФлажка" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараПриИзмененииФлажка(Элемент, Колонка)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;

	Если ТекущаяСтрока.МеткаРазмещение Тогда
		УстановитьСнятьФлажкиГруппы(ТекущаяСтрока.Пометка, ТекущаяСтрока, ВозвратнаяТара)
	Иначе
		УстановитьСнятьФлажкиПодчинения(ТекущаяСтрока.Пометка, ТекущаяСтрока, ВозвратнаяТара);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараДобавитьВДокументПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока;

	Если ТекущаяСтрока.МеткаРазмещение Тогда
		ОбновитьИтогДобавитьВДокумент(ТекущаяСтрока, ВозвратнаяТара);
	Иначе
		ОбновитьВСтрокахДобавитьВДокумент(ТекущаяСтрока, ВозвратнаяТара);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Услуги".
//
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

КонецПроцедуры // УслугиПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличной части "Услуги".
//
Процедура УслугиПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // УслугиПередУдалением()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Услуги".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
    ДобавитьВДокумент = ДанныеСтроки.ДобавитьВДокумент;
	ОсталосьПолучить = ДанныеСтроки.ОсталосьПолучить;
	Заполнено = ?(мЧастичноеЗаполнение, ДанныеСтроки.Заполнено, 0);
	
	Если ДобавитьВДокумент > (ОсталосьПолучить - Заполнено) Тогда
		
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.Шрифт = мЖирныйШрифт;
		
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ЦветТекста = мСинийЦвет;
	КонецЕсли;

	Если ДобавитьВДокумент < (ОсталосьПолучить - Заполнено) Тогда
		ОформлениеСтроки.Ячейки.ОсталосьПолучить.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗаказПоставщику) Тогда
		ДанныеСтроки.Пометка = Ложь;
		ДанныеСтроки.ДобавитьВДокумент = 0;
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.ДобавитьВДокумент.ТолькоПросмотр = Ложь;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // УслугиПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ ЗАКАЗЫ

// Обработчик события Нажатие кнопки ВключитьВсе командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеВключитьВсе(Кнопка)
	
	// Установим все отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = Истина;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗаказыДействиеВключитьВсе()

// Обработчик события Нажатие кнопки ВыключитьВсе командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеВыключитьВсе(Кнопка)
	
	// Сбросим все отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗаказыДействиеВыключитьВсе()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеИнвертировать(Кнопка)

	// Инвертируем отметки в таблице ТабличноеПолеЗаказы формы.
	Для Каждого Строка Из ТабличноеПолеЗаказы Цикл
		Строка.Переносить = НЕ Строка.Переносить;
	КонецЦикла;

КонецПроцедуры

// Обработчик события нажатие кнопки Анализ командной панели табличного поля Заказы.
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.ТабличноеПолеЗаказы.ТекущаяСтрока <> Неопределено Тогда
		
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.ТабличноеПолеЗаказы.ТекущаяСтрока.Ссылка);
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеАнализ()

// Обработчик события Нажатие кнопки Заполнить командной панели табличного поля Заказы.
//
Процедура КоманднаяПанельЗаказыДействиеЗаполнить(Кнопка)

	//Произведем отбор заказов по условиям отбора
	Если (ДатаНач > ДатаКон) И (ДатаКон <> Дата('00010101')) Тогда
		Предупреждение("Дата начала периода не может быть больше даты окончания периода!",,ЭтаФорма.Заголовок);
		Возврат;
	КонецЕсли;
	
	// Заполним Построитель параметрами из полей формы и выполним отбор
	ДатаНачала = НачалоДня(ДатаНач);
	ДатаОкончания = КонецДня(ДатаКон);
	ЗаполнитьПараметрыПостроителя(ПостроительОтчета);
	ПостроительОтчета.Выполнить();
	
	// Заполним список отобранных заказов
	ТабличноеПолеЗаказы.Очистить();
	ТабличноеПолеЗаказы = ПостроительОтчета.Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	УстановитьДоступностьКнопокПанелиЗаказов();

	Если ТабличноеПолеЗаказы.Количество() > 0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеДалее.КнопкаПоУмолчанию = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанельЗаказы.Кнопки.ДействиеЗаполнить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельЗаказыДействиеЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ ТОВАРЫ

// Обработчик события Нажатие кнопки "Установить все флажки" командной панели табличного поля Товары. 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеУстановитьФлажки()

// Обработчик события Нажатие кнопки "Снять все флажки" командной панели табличного поля Товары. 
// командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСнятьФлажки()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля Товары.
//
Процедура КоманднаяПанельТоварыДействиеИнвертировать(Кнопка)

	// Инвертируем отметки в таблице Товары формы.
	Для Каждого Строка Из Товары Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;

КонецПроцедуры

// Обработчик события нажатие кнопки Анализ командной панели табличного поля Товары.
// вызывает анализ текущего состояния заказа.
//
Процедура КоманднаяПанельТоварыДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.Товары.ТекущаяСтрока.ЗаказПоставщику);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ". 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Товары);

КонецПроцедуры // КоманднаяПанельТоварыОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ". 
// кнопки "Изменить" командной панели табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(Товары, "ОсталосьПолучить");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ ВОЗВРАТНАЯ ТАРА

// Обработчик события Нажатие кнопки "Установить все флажки" командной панели табличного поля ВозвратнаяТара.
// командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеУстановитьФлажки()

// Обработчик события Нажатие кнопки "Снять все флажки" командной панели табличного поля ВозвратнаяТара.
// командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеСнятьФлажки()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля ВозвратнаяТара.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеИнвертировать(Кнопка)

	// Инвертируем отметки в таблице ВозвратнаяТара формы.
	Для Каждого Строка Из ВозвратнаяТара Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;

КонецПроцедуры

// Обработчик события нажатие кнопки Анализ командной панели табличного поля ВозвратнаяТара.
// вызывает анализ текущего состояния заказа.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока.ЗаказПоставщику);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ" 
// кнопки "Изменить" командной панели табличного поля "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(ВозвратнаяТара, "ОсталосьПолучить");

КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТЧ УСЛУГИ

// Обработчик события Нажатие кнопки "Установить все флажки" командной панели табличного поля Услуги.
// командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеУстановитьФлажки(Кнопка)

	УстановитьСнятьФлажки(Истина, Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеУстановитьФлажки()

// Обработчик события Нажатие кнопки "Снять все флажки" командной панели табличного поля Услуги.
// командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеСнятьФлажки(Кнопка)

	УстановитьСнятьФлажки(Ложь, Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеСнятьФлажки()

// Обработчик события Нажатие кнопки Инвертировать командной панели табличного поля Услуги.
//
Процедура КоманднаяПанельУслугиДействиеИнвертировать(Кнопка)

	// Инвертируем отметки в таблице Услуги формы.
	Для Каждого Строка Из Услуги Цикл
		Строка.Пометка = НЕ Строка.Пометка;
	КонецЦикла;

КонецПроцедуры

// Обработчик события нажатие кнопки Анализ командной панели табличного поля Услуги.
// вызывает анализ текущего состояния заказа.
//
Процедура КоманднаяПанельУслугиДействиеАнализ(Кнопка)

	// Открыть форму отчета АнализЗаказа для выбранного таблице документа.
	Если ЭлементыФормы.Услуги.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьОтчетАнализЗаказа(ЭлементыФормы.Услуги.ТекущаяСтрока.ЗаказПоставщику);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Обнулить столбец добавляемых в документ".
// кнопки "Изменить" командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиОбнулить(Кнопка)

	ОбнулитьСтолбецДобавитьВДокумент(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиОбнулить()

// Процедура вызывается при выборе пункта меню "Заполнить столбец добавляемых в документ".
// кнопки "Изменить" командной панели табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиЗаполнить(Кнопка)

	ЗаполнитьСтолбецДобавитьВДокумент(Услуги, "ОсталосьПолучить");

КонецПроцедуры // КоманднаяПанельУслугиЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОСНОВНЫЕ ДЕЙСТВИЯ ФОРМЫ

// Обработчик события Нажатие кнопки Далее.
//
Процедура ОсновныеДействияФормыДействиеДалее(Кнопка)
	
	// Проверим наличие строк в таблице.
	Если ТабличноеПолеЗаказы.Количество() = 0 Тогда
		Предупреждение("Не выбраны документы!");
		Возврат;
	КонецЕсли;
	
	//Перенесем заказы в таблицу заполнения
	
	// Выберем отмеченные
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Переносить", Истина);
	НайденныеСтроки = ТабличноеПолеЗаказы.НайтиСтроки(СтруктураОтбора);
	
	// Если есть отмеченные 
	Если НайденныеСтроки.Количество() = 0 Тогда
		Предупреждение("Не выбраны документы!");
		Возврат;
	КонецЕсли;
	
	СписокЗаказов.Очистить();
	Для Каждого Строка Из НайденныеСтроки Цикл
		СписокЗаказов.Добавить(Строка.Ссылка);
	КонецЦикла;
	
	// Установить доступные способы заполнения документа поступления
	УстановитьСпособЗаполнения();
	
	// Заполнить табличные поля номенклатурой
	ЗаполнитьПанельОтбораНоменклатуры();
	
	Если Товары.Количество() = 0
		И Услуги.Количество() = 0
		И ВозвратнаяТара.Количество() = 0 Тогда
		// Заполнять нечем
		Предупреждение("По выбранным заказам поставщикам отсутствует номенклатура для заполнения.");
		Возврат;
		
	КонецЕсли;
	
	ПерейтиНаСтраницу("Страница2");
	
	// Установить режим доступности и видимости для элементов страницы
	УстановитьДоступностьЭлементовПанелиОтбораНоменклатуры();
	
	// Установить доступность кнопок командных панелей
	УстановитьДоступностьКнопокПанелейТабЧастей();
	
	ЭлементыФормы.ОсновныеДействияФормы1.Кнопки.ДействиеПеренести.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры // ОсновныеДействияФормыДействиеДалее()

// Обработчик события Нажатие кнопки Назад.
//
Процедура ОсновныеДействияФормыДействиеНазад(Кнопка)
	
	ПерейтиНаСтраницу("Страница1");
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ДействиеДалее.КнопкаПоУмолчанию = Истина;

КонецПроцедуры // ОсновныеДействияФормыДействиеНазад()

// Обработчик события Нажатие кнопки Перенести.
//
Процедура ОсновныеДействияФормыДействиеПеренести(Кнопка)

	// Проверим наличие строк в таблице Товары.
	ЕстьТовары = Ложь;
	Если ПоказыватьТовары И НЕ Товары.Количество() = 0 Тогда
		Таблица = Товары.Скопировать();
		Таблица.Свернуть("Пометка", "ДобавитьВДокумент");
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ДобавитьВДокумент > 0 Тогда
				ЕстьТовары = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим наличие строк в таблице Услуги.
	ЕстьУслуги = Ложь;
	Если ПоказыватьУслуги И НЕ Услуги.Количество() = 0 Тогда
		Таблица = Услуги.Скопировать();
		Таблица.Свернуть("Пометка", "ДобавитьВДокумент");
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ДобавитьВДокумент > 0 Тогда
				ЕстьУслуги = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверим наличие строк в таблице Тара.
	ЕстьТара   = Ложь;
	Если ПоказыватьТару И НЕ ВозвратнаяТара.Количество() = 0 Тогда
		Таблица = ВозвратнаяТара.Скопировать();
		Таблица.Свернуть("Пометка", "ДобавитьВДокумент");
		Для Каждого Строка Из Таблица Цикл
			Если Строка.ДобавитьВДокумент > 0 Тогда
				ЕстьТара = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЕстьТовары И НЕ ЕстьУслуги И НЕ ЕстьТара Тогда
		Предупреждение("Нет номенклатуры для добавления!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиДокумента();

КонецПроцедуры // ОсновныеДействияФормыДействиеПеренести()

НП = Новый НастройкаПериода;

мКрасныйЦвет  = ЦветаСтиля.ЦветОтрицательногоЧисла;
мСинийЦвет    = ЦветаСтиля.ТекстИнформационнойНадписи;
мЦветГруппы   = ЦветаСтиля.ЦветФонаФормы;
мЦветТекста   = ЦветаСтиля.ЦветТекстаПоля;
мОбычныйШрифт = Новый Шрифт(,,);
мЖирныйШрифт  = Новый Шрифт(,, Истина);

мИспользоватьТару = глЗначениеПеременной("ИспользоватьВозвратнуюТару");

мЧастичноеЗаполнение = Ложь;
