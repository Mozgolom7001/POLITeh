Процедура ПриОткрытии()
	
	ЗаполнитьЗакупки();
	
	Для каждого Строка из Закупки.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
	ЭлементыФормы.ТабличноеПолеЗакупки.Колонки.ПоставщикДоговорНоменклатура.ТриСостоянияФлажка = Ложь;
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ТабличноеПолеЗакупки.Колонки, Новый Структура("Характеристика"));
	
КонецПроцедуры // ПриОткрытии()

Процедура ТабличноеПолеЗакупкиПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьПометки(Элемент.ТекущаяСтрока);
	
КонецПроцедуры // ТабличноеПолеЗакупкиПриИзмененииФлажка()

Процедура ТабличноеПолеЗакупкиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		
		Если Элемент.ТекущаяСтрока.Строки.Количество() > 0 Тогда
			
			Элемент.Колонки.ЗаказатьКоличество.ТолькоПросмотр = Истина;
			
		Иначе
			
			Элемент.Колонки.ЗаказатьКоличество.ТолькоПросмотр = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеЗакупкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		Если ТипЗнч(ОформлениеСтроки.ДанныеСтроки.ПоставщикДоговорНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Если ОформлениеСтроки.ДанныеСтроки.ЗаказатьКоличество > 0 Тогда
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.Кирпичный;
				
			Иначе
				
				ОформлениеСтроки.ЦветТекста = WebЦвета.ЦианТемный;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ТабличноеПолеЗакупкиПриПолученииДанных()

Процедура УстановитьПометки(ТекущаяСтрока) Экспорт
	
	УстановитьПометкиПодчиненных(ТекущаяСтрока);
	УстановитьПометкиРодителей(ТекущаяСтрока);
	
КонецПроцедуры // УстановитьПометки()

Процедура УстановитьПометкиПодчиненных(СтрокаРодитель) Экспорт

	Пометка = СтрокаРодитель.Пометка;
	Подчиненные = СтрокаРодитель.Строки;

	Если Подчиненные.Количество() > 0 Тогда
		
		Для каждого ТекущаяСтрока из Подчиненные Цикл
			
			ТекущаяСтрока.Пометка = Пометка;
			УстановитьПометкиПодчиненных(ТекущаяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиПодчиненных()

Процедура УстановитьПометкиРодителей(Родитель) Экспорт

	Если Родитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Пометка = Родитель.Пометка;
	
	Если Родитель.Строки.Количество() Тогда

		НайденыВключенные  = Ложь;
		НайденыВыключенные = Ложь;

		Для каждого Строка из Родитель.Строки Цикл
			
			Если Строка.Пометка = 0 Тогда
				
				НайденыВыключенные = Истина;
				
			ИначеЕсли Строка.Пометка = 1 Тогда
				
				НайденыВключенные  = Истина;
				
			КонецЕсли;
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			
			Пометка = 2;
			
		ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
			
			Пометка = 1;
			
		ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
			
			Пометка = 0;
			
		ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
			
			Пометка = 2;
			
		КонецЕсли;

	КонецЕсли; 

	Родитель.Пометка = Пометка;
	УстановитьПометкиРодителей(Родитель.Родитель);
	
КонецПроцедуры // УстановитьПометкиРодителей()

Процедура ЗаполнитьЗакупки()
	
	Закупки.Строки.Очистить();

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПланыЗакупокОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ПланыЗакупокОбороты.Номенклатура.ОсновнойПоставщик
	|		ИНАЧЕ ПланыЗакупокОбороты.Контрагент
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ПланыЗакупокОбороты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ПланыЗакупокОбороты.Номенклатура.ОсновнойПоставщик.ОсновнойДоговорКонтрагента
	|		ИНАЧЕ ПланыЗакупокОбороты.Договор
	|	КОНЕЦ КАК Договор,
	|	ПланыЗакупокОбороты.Номенклатура КАК Номенклатура,
	|	ПланыЗакупокОбороты.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ПланыЗакупокОбороты.Период КАК Период,
	|	(ПланыЗакупокОбороты.СтоимостьОборот + ПланыЗакупокОбороты.НДСОборот) / ВЫБОР
	|		КОГДА ПланыЗакупокОбороты.КоличествоОборот = 0
	|			ТОГДА 1
	|		ИНАЧЕ ПланыЗакупокОбороты.КоличествоОборот
	|	КОНЕЦ * КурсВалютыУправленческогоУчета.Курс * КурсВалютыДоговора.Кратность / (ЕСТЬNULL(КурсВалютыДоговора.Курс, 1) * ЕСТЬNULL(КурсВалютыУправленческогоУчета.Кратность, 1)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ПланыЗакупокОбороты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПланыЗакупокОбороты.Номенклатура.ОсновнойПоставщик.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов, ПланыЗакупокОбороты.ДокументПланирования.ВалютаДокумента)
	|		ИНАЧЕ ПланыЗакупокОбороты.Договор.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|	ПланыЗакупокОбороты.Заказ КАК Заказ,
	|	ПланыЗакупокОбороты.КоличествоОборот КАК ТребуемоеКоличество,
	|	ПланыЗакупокОбороты.КоличествоОборот КАК ЗаказатьКоличество,
	|	ПланыЗакупокОбороты.СтоимостьОборот + ПланыЗакупокОбороты.НДСОборот КАК Стоимость,
	|	ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0) КАК ЗаказанноеКоличествоРазмещениеЗаказовПокупателей,
	|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0) КАК ЗаказанноеКоличествоЗаказыПоставщикам
	|ИЗ
	|	РегистрНакопления.ПланыЗакупок.Обороты(
	|			,
	|			,
	|			День,
	|			Номенклатура ССЫЛКА Справочник.Номенклатура
	|				И ДокументПланирования = &ПланЗакупок) КАК ПланыЗакупокОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(&ДатаОкончанияПлановогоПериода, ) КАК ЗаказыПоставщикамОстатки
	|		ПО (ВЫБОР
	|				КОГДА ПланыЗакупокОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|					ТОГДА ПланыЗакупокОбороты.Номенклатура.ОсновнойПоставщик
	|				ИНАЧЕ ПланыЗакупокОбороты.Контрагент
	|			КОНЕЦ = ЗаказыПоставщикамОстатки.ДоговорКонтрагента.Владелец)
	|			И (ВЫБОР
	|				КОГДА ПланыЗакупокОбороты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА ПланыЗакупокОбороты.Номенклатура.ОсновнойПоставщик.ОсновнойДоговорКонтрагента
	|				ИНАЧЕ ПланыЗакупокОбороты.Договор
	|			КОНЕЦ = ЗаказыПоставщикамОстатки.ДоговорКонтрагента)
	|			И ПланыЗакупокОбороты.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
	|			И ПланыЗакупокОбороты.ХарактеристикаНоменклатуры = ЗаказыПоставщикамОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&ДатаОкончанияПлановогоПериода, ) КАК РазмещениеЗаказовПокупателейОстатки
	|		ПО (ВЫБОР
	|				КОГДА ПланыЗакупокОбороты.Заказ = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ПланыЗакупокОбороты.Заказ = РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя
	|			КОНЕЦ)
	|			И ПланыЗакупокОбороты.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
	|			И ПланыЗакупокОбороты.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОкончанияПлановогоПериода, ) КАК КурсВалютыУправленческогоУчета
	|		ПО (Константы.ВалютаУправленческогоУчета = КурсВалютыУправленческогоУчета.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОкончанияПлановогоПериода, ) КАК КурсВалютыДоговора
	|		ПО (ВЫБОР
	|				КОГДА ПланыЗакупокОбороты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|					ТОГДА ЕСТЬNULL(ПланыЗакупокОбороты.Номенклатура.ОсновнойПоставщик.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов, ПланыЗакупокОбороты.ДокументПланирования.ВалютаДокумента)
	|				ИНАЧЕ ПланыЗакупокОбороты.Договор.ВалютаВзаиморасчетов
	|			КОНЕЦ = КурсВалютыДоговора.Валюта)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поставщик,
	|	Договор,
	|	Номенклатура,
	|	Характеристика,
	|	Период,
	|	Заказ
	|ИТОГИ
	|	ВЫБОР
	|		КОГДА Договор ЕСТЬ НЕ NULL 
	|			ТОГДА МАКСИМУМ(Валюта)
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ТребуемоеКоличество),
	|	СУММА(Стоимость)
	|ПО
	|	Поставщик,
	|	Договор
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	ДатаОкончанияПлановогоПериода = ПланЗакупок.ДатаПланирования;
	УправлениеПланированием.ВыровнятьДатуПоКонцуПериода(ДатаОкончанияПлановогоПериода, ПланЗакупок.Сценарий.Периодичность);
	
	Запрос.УстановитьПараметр("ПланЗакупок", ПланЗакупок);
	Запрос.УстановитьПараметр("ДатаОкончанияПлановогоПериода", ДатаОкончанияПлановогоПериода);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПоставщик = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоставщик.Следующий() Цикл
		
		НовыйПоставщик = Закупки.Строки.Добавить();
		НовыйПоставщик.ПоставщикДоговорНоменклатура = ВыборкаПоставщик.Поставщик;
		
		ВыборкаДоговор = ВыборкаПоставщик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДоговор.Следующий() Цикл
			
			НовыйДоговор = НовыйПоставщик.Строки.Добавить();
			НовыйДоговор.ПоставщикДоговорНоменклатура = ВыборкаДоговор.Договор;
			НовыйДоговор.Валюта = ВыборкаДоговор.Валюта;
			
			ВыборкаНоменклатура = ВыборкаДоговор.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
			Пока ВыборкаНоменклатура.Следующий() Цикл
				
				НоваяНоменклатура = НовыйДоговор.Строки.Добавить();
				
				НоваяНоменклатура.ПоставщикДоговорНоменклатура = ВыборкаНоменклатура.Номенклатура;
				НоваяНоменклатура.Характеристика = ВыборкаНоменклатура.Характеристика;
				НоваяНоменклатура.Период = ВыборкаНоменклатура.Период;
				НоваяНоменклатура.Цена = ВыборкаНоменклатура.Цена;
				НоваяНоменклатура.Валюта = ВыборкаНоменклатура.Валюта;
				НоваяНоменклатура.ТребуемоеКоличество = ВыборкаНоменклатура.ТребуемоеКоличество;
				НоваяНоменклатура.Заказ = ВыборкаНоменклатура.Заказ;
				
				Если НЕ ЗначениеЗаполнено(НоваяНоменклатура.Заказ) Тогда
					
					НоваяНоменклатура.ЗаказанноеКоличество = Макс(ВыборкаНоменклатура.ЗаказанноеКоличествоЗаказыПоставщикам - ВыборкаНоменклатура.ЗаказанноеКоличествоРазмещениеЗаказовПокупателей, 0);
					
				Иначе
					
					НоваяНоменклатура.ЗаказанноеКоличество = ВыборкаНоменклатура.ЗаказанноеКоличествоРазмещениеЗаказовПокупателей;
					
				КонецЕсли;
				
				Если ВыборкаНоменклатура.ЗаказатьКоличество > НоваяНоменклатура.ЗаказанноеКоличество Тогда
					
					НоваяНоменклатура.ЗаказатьКоличество = ВыборкаНоменклатура.ЗаказатьКоличество - НоваяНоменклатура.ЗаказанноеКоличество;
					
				Иначе
					
					НоваяНоменклатура.ЗаказатьКоличество = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗакупки()

Процедура СформироватьЗаказы()
	
	Для каждого Поставщик из Закупки.Строки Цикл
		
		Если Поставщик.Пометка = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Для каждого Договор из Поставщик.Строки Цикл
			
			Если Договор.Пометка = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполняемыйДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
				
			ЗаполняемыйДокумент.Дата = ТекущаяДата();
			ЗаполняемыйДокумент.Контрагент = Поставщик.ПоставщикДоговорНоменклатура;
			ЗаполняемыйДокумент.ДоговорКонтрагента = Договор.ПоставщикДоговорНоменклатура;
			ЗаполняемыйДокумент.Организация = ЗаполняемыйДокумент.ДоговорКонтрагента.Организация;
			ЗаполняемыйДокумент.УчитыватьНДС = Истина;
			ЗаполняемыйДокумент.СуммаВключаетНДС = Истина;
			ЗаполняемыйДокумент.ВалютаДокумента = Договор.Валюта;
				
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗаполняемыйДокумент, глЗначениеПеременной("глТекущийПользователь"), Договор.Валюта, "Покупка");
			
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС", ЗаполняемыйДокумент.Контрагент, ЗаполняемыйДокумент.ТипЦен, ЗаполняемыйДокумент.ДоговорКонтрагента, ЗаполняемыйДокумент.Дата, ЗаполняемыйДокумент.ВалютаДокумента, ЗаполняемыйДокумент.УчитыватьНДС, ЗаполняемыйДокумент.СуммаВключаетНДС);
			
			Для каждого Номенклатура из Договор.Строки Цикл
				
				Если Номенклатура.Пометка = 1 И Номенклатура.ЗаказатьКоличество > 0 Тогда
					
					НоваяСтрокаТовара = ЗаполняемыйДокумент.Товары.Добавить();
					
					НоваяСтрокаТовара.Номенклатура = Номенклатура.ПоставщикДоговорНоменклатура;
					НоваяСтрокаТовара.ХарактеристикаНоменклатуры = Номенклатура.Характеристика;
					НоваяСтрокаТовара.ЕдиницаИзмерения = Номенклатура.ПоставщикДоговорНоменклатура.ЕдиницаХраненияОстатков;
					НоваяСтрокаТовара.Количество = Номенклатура.ЗаказатьКоличество;
					НоваяСтрокаТовара.Коэффициент = НоваяСтрокаТовара.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрокаТовара.СтавкаНДС = НоваяСтрокаТовара.Номенклатура.СтавкаНДС;
					НоваяСтрокаТовара.Цена = Номенклатура.Цена;
					
					Если ЗначениеЗаполнено(Номенклатура.Заказ) Тогда
						
						НоваяСтрокаТовара.Заказ = Номенклатура.Заказ;
						
					КонецЕсли;
					
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
					
					Если НоваяСтрокаТовара.Цена = 0 Тогда
						
						ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент, СтруктураШапкиДокумента, ЗаполняемыйДокумент.ВалютаДокумента);
						
					КонецЕсли;
					
					// Рассчитываем реквизиты табличной части.
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент);
					
					// Рассчитываем плановую себестоимость.
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрокаТовара, ЗаполняемыйДокумент, ЗаполняемыйДокумент.ВалютаДокумента);
				
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаполняемыйДокумент.Записать();
			НоваяСтрока = СформированныеДокументы.Добавить();
			НоваяСтрока.Документ = ЗаполняемыйДокумент.Ссылка;
			НоваяСтрока.Пометка  = Истина;
			
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры // СформироватьЗаказы()

Процедура ОсновныеДействияФормыВыполнить(Кнопка)
	
	СформироватьЗаказы();
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы["ЗаказыПоставщикам"];
	Предупреждение("Формирование заказов поставщикам завершено.");
	
КонецПроцедуры // ОсновныеДействияФормыВыполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьСостоянияДокументов()
	
	Индекс = 0;
	
	Пока Индекс < СформированныеДокументы.Количество() Цикл
		
		СтрокаТаблицы = СформированныеДокументы[Индекс];
		
		Попытка
			
			Если СтрокаТаблицы.Документ.ПолучитьОбъект() = Неопределено Тогда
				
				СформированныеДокументы.Удалить(СтрокаТаблицы);
				Продолжить;
				
			КонецЕсли;
			
		Исключение
			
			СформированныеДокументы.Удалить(СтрокаТаблицы);
			Продолжить;
			
		КонецПопытки;
		
		Если СтрокаТаблицы.Документ.ПометкаУдаления Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Истина;
			СтрокаТаблицы.ДокументПроведен = Ложь;
			
		ИначеЕсли СтрокаТаблицы.Документ.Проведен Тогда
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.ДокументПроведен = Истина;
			
		Иначе
			
			СтрокаТаблицы.ПометкаУдаления  = Ложь;
			СтрокаТаблицы.ДокументПроведен = Ложь;
			
		КонецЕсли; 
		
		Индекс = Индекс + 1;
	
	КонецЦикла; 

КонецПроцедуры // ОбновитьСостоянияДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельЗакупкиУстановитьПометки(Кнопка)
	
	Для каждого Строка из Закупки.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиУстановитьПометки()

Процедура КоманднаяПанельЗакупкиСнятьПометки(Кнопка)
	
	Для каждого Строка из Закупки.Строки Цикл
		
		Строка.Пометка = 0;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиСнятьПометки()

Процедура КоманднаяПанельЗакупкиОбновить(Кнопка)
	
	ЗаполнитьЗакупки();
	
	Для каждого Строка из Закупки.Строки Цикл
		
		Строка.Пометка = 1;
		УстановитьПометки(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗакупкиОбновить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельСформированныеДокументы"

Процедура КоманднаяПанельСформированныеДокументыУстановитьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУстановитьПометки()

Процедура КоманднаяПанельСформированныеДокументыСнятьПометки(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Строка.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыСнятьПометки()

Процедура КоманднаяПанельСформированныеДокументыПровести(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено И НЕ ДокументОбъект.ПометкаУдаления Тогда
				
				Попытка
					
					Строка.Документ.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);
					Строка.Пометка = Ложь;
					
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПровести()

Процедура КоманднаяПанельСформированныеДокументыПометитьНаУдаление(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().УстановитьПометкуУдаления(НЕ Строка.ПометкаУдаления);
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыУдалить(Кнопка)
	
	КодВозврата = Вопрос("Внимание! Выбранные документы будут удалены без возможности восстановления
	|и без проверки ссылочной целостности!", РежимДиалогаВопрос.ОКОтмена,,, "Формирование заказов поставщикам");
	
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			Если Строка.Документ.ПолучитьОбъект() <> Неопределено Тогда
				
				Строка.Документ.ПолучитьОбъект().Удалить();
				Строка.Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСостоянияДокументов();
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыУдалить()

Процедура КоманднаяПанельСформированныеДокументыПечать(Кнопка)
	
	ОбновитьСостоянияДокументов();
	
	Для каждого Строка из СформированныеДокументы Цикл
		
		Если Строка.Пометка Тогда
			
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект <> Неопределено Тогда
				
				Попытка
					
					ДокументОбъект.Печать("Заказ");
					
				Исключение
					
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, (Строка(ДокументОбъект) + ", печать не выполнена"));
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельСформированныеДокументыПечать()

Процедура КоманднаяПанельСформированныеДокументыОбновить(Кнопка)
	
	ОбновитьСостоянияДокументов();

КонецПроцедуры // КоманднаяПанельСформированныеДокументыОбновить()

Процедура СформированныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОбновитьСостоянияДокументов();
	
	Попытка
		
		ОткрытьЗначение(ВыбраннаяСтрока.Документ);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры // СформированныеДокументыВыбор()

Процедура СформированныеДокументыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		
		ОформлениеСтроки.Ячейки.ДокументПроведен.ОтображатьТекст = Ложь;
		ОформлениеСтроки.Ячейки.ДокументПроведен.ОтображатьФлажок = Ложь;
		ОформлениеСтроки.Ячейки.ДокументПроведен.ОтображатьКартинку = Истина;
		
		Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
			
			ОформлениеСтроки.Ячейки.ДокументПроведен.ИндексКартинки = 1;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.ДокументПроведен Тогда
			
			ОформлениеСтроки.Ячейки.ДокументПроведен.ИндексКартинки = 0;
			
		Иначе
			
			ОформлениеСтроки.Ячейки.ДокументПроведен.ИндексКартинки = 2;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформированныеДокументыПриПолученииДанных()
