Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мКолонкиПотребности;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПланыПродаж,ЭлементыФормы.КоманднаяПанельПланыПродаж);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПланыЗакупок,ЭлементыФормы.КоманднаяПанельПланыЗакупок);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ЗаказыПокупателей,ЭлементыФормы.КоманднаяПанельЗаказыПокупателей.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Потребности,ЭлементыФормы.КоманднаяПанельПотребности);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВнутренниеЗаказы,ЭлементыФормы.КоманднаяПанельВнутренниеЗаказы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьВнутренниеЗаказы()
	
	Если ВнутренниеЗаказы.Количество() > 0 Тогда
		
		Ответ = Вопрос("Табличная часть ""Внутренние заказы"" уже содержат строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
					   
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
		
			Отказ = Истина;
			Возврат;
		
		КонецЕсли;
			
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВнутренниеЗаказыОстатки.ВнутреннийЗаказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ВнутренниеЗаказыОстатки.ВнутреннийЗаказ.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВнутренниеЗаказыОстатки.ВнутреннийЗаказ.ДатаОтгрузки
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВнутренниеЗаказыОстатки.ВнутреннийЗаказ.ДатаОтгрузки, ДЕНЬ, -1), ДЕНЬ)
	|	КОНЕЦ КАК ДатаПотребности
	|ИЗ
	|	РегистрНакопления.ВнутренниеЗаказы.Остатки(
	|		КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ),
	|		ВнутреннийЗаказ ССЫЛКА Документ.ВнутреннийЗаказ
	|			И Номенклатура.Услуга = ЛОЖЬ) КАК ВнутренниеЗаказыОстатки");
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВнутренниеЗаказы.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьВнутренниеЗаказы()

Процедура ЗаполнитьТабличнуюЧастьЗаказыПокупателей()
	
	Если ЗаказыПокупателей.Количество() > 0 Тогда
		
		Ответ = Вопрос("Табличная часть ""Заказы покупателей"" уже содержат строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
					   
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
		
			Отказ = Истина;
			Возврат;
		
		КонецЕсли;
			
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ЗаказыПокупателейОстатки.ЗаказПокупателя.ДатаОтгрузки, ДЕНЬ, -1), ДЕНЬ)
	|	КОНЕЦ КАК ДатаПотребности
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(
	|		КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ),
	|		ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|			И Номенклатура.Услуга = ЛОЖЬ) КАК ЗаказыПокупателейОстатки");
	
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаказыПокупателей.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьЗаказыПокупателей()

Процедура ДатаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если РежимВыбораДатПериодом Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		
		МассивВозврата = УправлениеОтчетами.ВвестиПериод(НачалоДня(ТекущиеДанные.ДатаНач), КонецДня(ТекущиеДанные.ДатаКон));
		
		Если ТипЗнч(МассивВозврата) = Тип("Массив") Тогда
			
			ТекущийЭлемент.ТекущиеДанные.ДатаНач = МассивВозврата[0];
			ТекущийЭлемент.ТекущиеДанные.ДатаКон = МассивВозврата[1];
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры // КонечныеПланыДатаНачалоВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "ПланыПродаж.Проект,ПланыЗакупок.Проект,Потребности.Проект");

КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВозможностьИзмененияВидимости()
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура("Заказ, ДатаПотребности");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВнутренниеЗаказы.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ЗаказыПокупателей.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("Сценарий, ДатаНач, ДатаКон");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПланыПродаж.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПланыЗакупок.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("ДатаПотребности, Номенклатура, Количество, ЕдиницаИзмерения, ТоварТара");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиПотребности, СтруктураКолонок);

КонецПроцедуры // УстановитьВозможностьИзмененияВидимости()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЭтоНовый() Тогда

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);
		
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПотребности);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВозможностьИзмененияВидимости();
	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("ПланыПродаж",       "ПланыПродаж");
	Страницы.Добавить("ПланыЗакупок",      "ПланыЗакупок");
	Страницы.Добавить("ВнутренниеЗаказы",  "ВнутренниеЗаказы");
	Страницы.Добавить("ЗаказыПокупателей", "ЗаказыПокупателей");
	Страницы.Добавить("Потребности",       "Потребности");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.Панель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ЭлементыФормы.ДействияФормы.Кнопки.РежимВыбораДатПериодом.Пометка = РежимВыбораДатПериодом;
	
	НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	// Подсчитаем количество строк в табличных частях.
	СтраницыПанели = ЭлементыФормы.Панель.Страницы;
	
	СтраницыПанели.ПланыПродаж.Заголовок = "Планы продаж (" + ДокументОбъект.ПланыПродаж.Количество() + " поз.)";
	СтраницыПанели.ПланыЗакупок.Заголовок = "Планы закупок (" + ДокументОбъект.ПланыЗакупок.Количество() + " поз.)";
	СтраницыПанели.ВнутренниеЗаказы.Заголовок = "Внутренние заказы (" + ДокументОбъект.ВнутренниеЗаказы.Количество() + " поз.)";
	СтраницыПанели.ЗаказыПокупателей.Заголовок = "Заказы покупателей (" + ДокументОбъект.ЗаказыПокупателей.Количество() + " поз.)";
	СтраницыПанели.Потребности.Заголовок = "Потребности (" + ДокументОбъект.Потребности.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = ВнутренниеЗаказы Тогда

		мФормаПодбораЗаказыПокупателей = Документы.ВнутреннийЗаказ.ПолучитьФормуВыбора(, ЭтаФорма);
		мФормаПодбораЗаказыПокупателей.ЗакрыватьПриВыборе = Ложь;
		мФормаПодбораЗаказыПокупателей.Открыть();

	ИначеЕсли ТабличнаяЧасть = ЗаказыПокупателей Тогда

		мФормаПодбораЗаказыПокупателей = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(, ЭтаФорма);
		мФормаПодбораЗаказыПокупателей.ЗакрыватьПриВыборе = Ложь;
		мФормаПодбораЗаказыПокупателей.Открыть();

	ИначеЕсли ТабличнаяЧасть = Потребности Тогда

		СписокВидовПодбора = Новый СписокЗначений();
		СписокВидовПодбора.Добавить(, "По справочнику");

		ПредставлениеДок = Метаданные().Представление();

		СтруктураПараметровПодбора = Новый Структура();
		СтруктураПараметровПодбора.Вставить("Команда"                , "ПодборВТабличнуюЧастьПотребности");
		СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"     , СписокВидовПодбора);
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
		СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);

		// Параметры запросов.
		СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата));
		СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер);

		// Открываем форму подбора.
		РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

	КонецЕсли;

КонецПроцедуры // ДействиеПодбор()

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
			
			НоваяСтрока = ВнутренниеЗаказы.Добавить();
			
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			НоваяСтрока = ЗаказыПокупателей.Добавить();
			
		Иначе
			
			ОбработкаПодбораНоменклатура(Потребности, ЗначениеВыбора);
			Возврат;
			
		КонецЕсли;
		
		НоваяСтрока.Заказ = ЗначениеВыбора;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеВыбора.ДатаОтгрузки) Тогда
			
			НоваяСтрока.ДатаПотребности = Дата;
			
		Иначе
			
			НоваяСтрока.ДатаПотребности = НачалоДня(ЗначениеВыбора.ДатаОтгрузки - 1);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ОбработкаВыбора()

Процедура ОбработкаПодбораНоменклатура(ТабличнаяЧасть, ЗначениеВыбора)

	Перем Номенклатура, Характеристика, ЕдиницаИзмерения, Количество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", Количество);
	
	СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
	СтрокаТабличнойЧасти.ДатаПотребности = Дата;
	СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
	СтрокаТабличнойЧасти.Количество = Количество;
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
	СтрокаТабличнойЧасти.ТоварТара = Перечисления.ТоварТара.Товар;

	Попытка
		
		ЭлементыФормы.Потребности.ТекущаяКолонка = мКолонкиПотребности["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбораНоменклатура()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРежимВыбораДатПериодом(Кнопка)
	
	РежимВыбораДатПериодом = НЕ РежимВыбораДатПериодом;
	Кнопка.Пометка = РежимВыбораДатПериодом;
	
КонецПроцедуры // ДействияФормыРежимВыбораДатПериодом()

Процедура КоманднаяПанельВнутренниеЗаказыПодбор(Кнопка)
	
	ДействиеПодбор(ВнутренниеЗаказы);
	
КонецПроцедуры // КоманднаяПанельВнутренниеЗаказыПодбор()

Процедура КоманднаяПанельЗаказыПокупателейПодбор(Кнопка)
	
	ДействиеПодбор(ЗаказыПокупателей);
	
КонецПроцедуры // КоманднаяПанельЗаказыПокупателейПодбор()

Процедура КоманднаяПанельПотребностиПодбор(Кнопка)
	
	ДействиеПодбор(Потребности);
	
КонецПроцедуры // КоманднаяПанельПотребностиПодбор()

Процедура КоманднаяПанельПотребностиЗаполнитьПотребности(Кнопка)
	
	Отказ = Ложь;
	
	РеквизитыТабПланыПродаж       = "Сценарий, ДатаНач, ДатаКон";
	РеквизитыТабПланыЗакупок      = "Сценарий, ДатаНач, ДатаКон";
	РеквизитыТабВнутренниеЗаказы  = "ДатаПотребности";
	РеквизитыТабЗаказыПокупателей = "ДатаПотребности";
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПланыПродаж", Новый Структура(РеквизитыТабПланыПродаж), Отказ, "");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПланыЗакупок", Новый Структура(РеквизитыТабПланыЗакупок), Отказ, "");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВнутренниеЗаказы", Новый Структура(РеквизитыТабВнутренниеЗаказы), Отказ, "");
	ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗаказыПокупателей", Новый Структура(РеквизитыТабЗаказыПокупателей), Отказ, "");
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = ВыполнитьВыборкуДанных();
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		
		Потребности.Загрузить(Результат);
		
		Для каждого Строка из Потребности Цикл
	
			// Заполняем реквизиты табличной части.
			Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаХраненияОстатков;
			Строка.Коэффициент      = Строка.ЕдиницаИзмерения.Коэффициент;
		
		КонецЦикла;

	Иначе
		
		Потребности.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВНУТРЕННИЕЗАКАЗЫ

Процедура ВнутренниеЗаказыЗаказПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение.ДатаОтгрузки) Тогда
		
		ЭлементыФормы.ВнутренниеЗаказы.ТекущиеДанные.ДатаПотребности = Дата;
		
	Иначе
		
		ЭлементыФормы.ВнутренниеЗаказы.ТекущиеДанные.ДатаПотребности = НачалоДня(Элемент.Значение.ДатаОтгрузки - 1);
		
	КонецЕсли;
	
КонецПроцедуры // ВнутренниеЗаказыЗаказПриИзменении()

Процедура КоманднаяПанельВнутренниеЗаказыЗаполнитьВнутреннимиЗаказами(Кнопка)
	
	ЗаполнитьТабличнуюЧастьВнутренниеЗаказы();
	
КонецПроцедуры // КоманднаяПанельВнутренниеЗаказыЗаполнитьВнутреннимиЗаказами()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАКАЗЫПОКУПАТЕЛЕЙ

Процедура ЗаказыПокупателейЗаказПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение.ДатаОтгрузки) Тогда
		
		ЭлементыФормы.ЗаказыПокупателей.ТекущиеДанные.ДатаПотребности = Дата;
		
	Иначе
		
		ЭлементыФормы.ЗаказыПокупателей.ТекущиеДанные.ДатаПотребности = НачалоДня(Элемент.Значение.ДатаОтгрузки - 1);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаказыПокупателейЗаказПриИзменении()

Процедура КоманднаяПанельЗаказыПокупателейЗаполнитьЗаказамиПокупателей(Кнопка)
	
	ЗаполнитьТабличнуюЧастьЗаказыПокупателей();
	
КонецПроцедуры // КоманднаяПанельЗаказыПокупателейЗаполнитьЗаказамиПокупателей()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПОТРЕБНОСТИ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Потребности".
//
Процедура ПотребностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПотребности, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ПотребностиПриВыводеСтроки()

Процедура ПотребностиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.ДатаПотребности = ?(НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаПотребности), Дата, Элемент.ТекущиеДанные.ДатаПотребности);
		Элемент.ТекущиеДанные.ТоварТара = ?(НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТоварТара), Перечисления.ТоварТара.Товар, Элемент.ТекущиеДанные.ТоварТара);
		
	КонецЕсли;
	
КонецПроцедуры // ПотребностиПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Потребности".
//
Процедура ПотребностиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Потребности.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

КонецПроцедуры // ПотребностиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы измерения
// в строке табличной части "Потребности".
//
Процедура ПотребностиЕдиницаИзмеренияПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Потребности.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ПотребностиЕдиницаИзмеренияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "Потребности".
//
Процедура ПотребностиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Потребности".
//
Процедура ПотребностиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Потребности");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиПотребности = ЭлементыФормы.Потребности.Колонки;
