////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мТекущееРасширениеФайла;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем СтараяВалютаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре

	// Надо поменять валюту и курс взаиморасчетов
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, Дата);
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация=Контрагент.ОсновнойДоговорКонтрагента.Организация;
		ИначеЕсли Контрагент.ОсновнойДоговорКонтрагента.Организация.Пустая()
			ИЛИ Контрагент.ОсновнойДоговорКонтрагента.Организация=Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
КонецПроцедуры // ПриИзмененииКонтрагента

// Очищает реквизиты, относящиеся к платежам: при очистке валюты документа они становятся неопределенными.
//
Процедура ПриОчисткеВалютыДокумента()
	
		СуммаДокумента=0;
		КурсДокумента=0;
		КратностьДокумента=0;
		СтараяВалютаДокумента=Справочники.Валюты.ПустаяСсылка();
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			Платеж.СуммаПлатежа=0;
		КонецЦикла;
		
		БанковскийСчетКасса=Неопределено;
		ВключатьВПлатежныйКалендарь=Ложь;

		УстановитьВидимость();
	
КонецПроцедуры // ПриОчисткеВалютыДокумента()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");


КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

Процедура РассчитатьСуммуПлатежаТаблица()
	
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		
		Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВалютаВзаиморасчетов= Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
	
		ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			Строка.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			Строка.КурсВзаиморасчетов,КурсДокумента,
			Строка.КратностьВзаиморасчетов,КратностьДокумента);	
		Иначе
			Строка.СуммаПлатежа = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СтрокаПлатеж=РасшифровкаПлатежа[0];
	
КонецПроцедуры // РассчитатьСуммуПлатежаТаблица()


// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьДоступностьДокументаРасчетов()

	РасчетыПоДокументам = СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность        = РасчетыПоДокументам;
	ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Доступность = РасчетыПоДокументам;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;

КонецПроцедуры

Процедура УстановитьДоступностьСделки()
	
	СделкаДоступна = ЕстьРасчетыСКонтрагентами
		И (ВидОперации <> Перечисления.ВидыОперацийПланируемоеПоступлениеДС.РасчетыПоКредитамИЗаймам)
		И (ВидОперации <> Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочиеРасчетыСКонтрагентами)
		И (СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЭлементыФормы.Сделка.Доступность = СделкаДоступна;
	ЭлементыФормы.НадписьСделка.Доступность = СделкаДоступна;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ТолькоПросмотр = НЕ СделкаДоступна;

КонецПроцедуры

// Процедура устанавливает видимость ренквизитов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПолучениеИзКассыККМ", ЭлементыФормы.ОсновнаяПанель);
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Расчеты", ЭлементыФормы.ОсновнаяПанель);
		
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
				
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Расчеты", ЭлементыФормы.ОсновнаяПанель);
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПрочееПоступлениеДенежныхСредств Тогда
				
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Расчеты", ЭлементыФормы.ОсновнаяПанель);
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьФормаОплаты.Видимость = (ВидОперации <> Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка);
	ЭлементыФормы.ФормаОплаты.Видимость        = (ВидОперации <> Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка);
	
	ЭлементыФормы.НадписьСписок.Видимость = ЕстьРасчетыСКонтрагентами;
	ЭлементыФормы.Список.Видимость        = ЕстьРасчетыСКонтрагентами;
	ЭлементыФормы.Список1.Видимость       = ЕстьРасчетыСКонтрагентами;
	
	ЭлементыФормы.ВалютаДокумента.Доступность = НЕ ЗначениеЗаполнено(БанковскийСчетКасса);
	
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
		
	ВыбранаВалютаДокумента = ЗначениеЗаполнено(ВалютаДокумента);
	ЭлементыФормы.КурсДокумента.Доступность                           = ВыбранаВалютаДокумента;
	ЭлементыФормы.БанковскийСчетКасса.Доступность                     = ВыбранаВалютаДокумента;
	ЭлементыФормы.ВключатьВПлатежныйКалендарь.Доступность             = ВыбранаВалютаДокумента;
	ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежа.Доступность = ВыбранаВалютаДокумента;
	ЭлементыФормы.СуммаПлатежа.Доступность                            = ВыбранаВалютаДокумента;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, 
		"НадписьПроект,Проект,НадписьПроект1,Проект1,РасшифровкаПлатежа.Проект");

КонецПроцедуры // УстановитьВидимость()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(РасшифровкаПлатежа[0], ВидОперации);
			
			Если НЕ ЗначениеЗаполнено(ВидПриемаРозничнойВыручки) Тогда
				ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы;
				КассаККМ=Справочники.КассыККМ.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ФормаОплаты = Перечисления.ВидыДенежныхСредств.Безналичные Тогда
			НовыйТип = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
			БанковскийСчетКасса = НовыйТип.ПривестиЗначение(БанковскийСчетКасса);
		ИначеЕсли ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные Тогда
			НовыйТип = Новый ОписаниеТипов("СправочникСсылка.Кассы");
			БанковскийСчетКасса = НовыйТип.ПривестиЗначение(БанковскийСчетКасса);
		КонецЕсли;
		
	Иначе

		ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
	КонецЕсли;
		
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список=Истина;
	Иначе
		Список=Ложь;
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
	СтараяВалютаДокумента=ВалютаДокумента;
		
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);
	
	// Надпись НадписьСуммаВзаиморасчетов
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
		ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
	Иначе
		ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Не указана валюта расхода денежных средств!";
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстПредупреждающейНадписи;
		
	Иначе
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Всего по документу: "+
									Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
		
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстИнформационнойНадписи;
		
	КонецЕсли;
	
	ТекстВалюта=Строка(ВалютаДокумента);
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент1.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент2.Заголовок=ТекстВалюта;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента);
					
	УстановитьФокус();
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы. 
// Вызывается при смене или перечитывании объекта.
Процедура ПриИзмененииДанных()
	
	Если ТипЗнч(СтрокаПлатеж) = Тип("ДокументТабличнаяЧастьСтрока.ПланируемоеПоступлениеДенежныхСредств.РасшифровкаПлатежа")
		И РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = -1 Тогда
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС[Кнопка.Имя];
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Список = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
		ФормаОплаты = Перечисления.ВидыДенежныхСредств.Наличные;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	УстановитьФокус();
	
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного=Истина;
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ЭлементыФормы.Контрагент.ОтметкаНезаполненного=Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.Контрагент.ОтметкаНезаполненного=Ложь;

	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	Если НЕ ЗначениеЗаполнено(ДатаПоступления) И НЕ ВалютаДокумента.Пустая() Тогда

		УстановитьКурсДокумента(Дата);
		РассчитатьСуммуПлатежаТаблица();

	КонецЕсли;

	РассчитатьСуммуВзаиморасчетов();

КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента(ДатаКурса)
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаПоступления);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();	
	
	ПриИзмененииДоговора();
	
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаПлатежаПриИзменении(Элемент)

	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсДокумента".
//
Процедура КурсДокументаПриИзменении(Элемент)

	РассчитатьСуммуПлатежаТаблица();

КонецПроцедуры // КурсДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаПоступления='00010101',Дата,ДатаПоступления);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"БанковскийСчетКассаКасса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура БанковскийСчетКассаПриИзменении(Элемент)

	Если (НЕ БанковскийСчетКасса=Неопределено) И (НЕ БанковскийСчетКасса.Пустая()) Тогда
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаПоступления, СуммаДокумента, БанковскийСчетКасса.ВалютаДенежныхСредств);
		ЭлементыФормы.ВалютаДокумента.Доступность=Ложь;
		
		СуммаДокументаПриИзменении();
		
		Если Организация.Пустая() Тогда
			Организация=БанковскийСчетКасса.Владелец;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ВалютаДокумента.Доступность=Истина;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов();
	
	УстановитьВидимость();
	СтараяВалютаДокумента=ВалютаДокумента;
	
КонецПроцедуры // БанковскийСчетКассаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();

КонецПроцедуры

Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	ИначеЕсли ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.Кассы"));
   	Иначе
		БанковскийСчетКасса=Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)

	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда

		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));

	ИначеЕсли ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.Кассы"));

	КонецЕсли;

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		РассчитатьСуммуПлатежа();
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
			
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаПоступления='00010101',Дата,ДатаПоступления);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
			 
	Если ВидОперации=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПриходДенежныхСредствРозничнаяВыручка Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
		
	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьСуммуВзаиморасчетов();
		
	КонецЕсли;
			 
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
						
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");					
						
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
						
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");					
						
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,">0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта поступления денежных средств."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = КратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаПоступления='00010101',Дата,ДатаПоступления);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		КурсДокумента = СтруктураКурсаИКратности.КурсВалюты;
		КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаТаблица();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ПриОчисткеВалютыДокумента();
		
	ИначеЕсли НЕ ВалютаДокумента=СтараяВалютаДокумента Тогда
		
		СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,?(ДатаПоступления='00010101',Дата,ДатаПоступления));
		
		КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

		РассчитатьСуммуПлатежаТаблица();
		
		УстановитьВидимость();
			
	КонецЕсли;
	
	СтараяВалютаДокумента=ВалютаДокумента;
	
КонецПроцедуры

Процедура БанковскийСчетКассаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеВалютыДокумента();	
		
КонецПроцедуры

Процедура ДатаПоступленияПриИзменении(Элемент)
	
	Если НЕ(НЕ ЗначениеЗаполнено(ДатаПоступления) ИЛИ ВалютаДокумента.Пустая()) Тогда
		
		УстановитьКурсДокумента(ДатаПоступления);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СуммаВзаиморасчетовПрочиеПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	БанковскийСчетКасса=Неопределено;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ВидПриемаРозничнойВыручкиПриИзменении(Элемент)
	
	Если ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы Тогда
		Если ТипЗнч(КассаККМ)<>Тип("СправочникСсылка.КассыККМ") Тогда
			КассаККМ = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, из которой осуществляется прием выручки.";
	Иначе
		Если ТипЗнч(КассаККМ)<>Тип("СправочникСсылка.Склады") Тогда
			КассаККМ = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, с которой осуществляется прием выручки.";
	КонецЕсли;
	
КонецПроцедуры

Процедура КассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзНТТ Тогда
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, КассаККМ, ВидСравнения.Равно, СтандартнаяОбработка);
	ИначеЕсли ВидПриемаРозничнойВыручки = Перечисления.ВидПриемаРозничнойВыручки.ИзКассы Тогда
		
		СтандартнаяОбработка=Ложь;
		ФормаВыбора=Справочники.КассыККМ.ПолучитьФормуВыбора(,Элемент,);
		
		ФормаВыбора.Отбор.Владелец.ВидСравнения=ВидСравнения.Равно;
		ФормаВыбора.Отбор.Владелец.Значение      = Организация;
		ФормаВыбора.Отбор.Владелец.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
		
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			
			ФормаВыбора.ПараметрТекущаяСтрока=КассаККМ;
			
		КонецЕсли;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КассаККМПриИзменении(Элемент)
	
	Если ТипЗнч(КассаККМ)=Тип("СправочникСсылка.КассыККМ") И Организация.Пустая() Тогда
		Организация=КассаККМ.Владелец;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, ДатаПоступления);
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств3ПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств2ПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
		РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
														СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Расход");
КонецПроцедуры


