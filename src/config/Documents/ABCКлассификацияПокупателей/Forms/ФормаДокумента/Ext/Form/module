Перем мТекущаяДатаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТаблицаРаспределенияКонтрагентов, ЭлементыФормы.КоманднаяПанельТаблицаРаспределенияКонтрагентов.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция определяет параметр ABC_КлассКлиента контрагента
//
// Параметры
//  ABC_КлассКлиентаСсылка - ПеречислениеСсылка, для которой необходимо
//  определить значение параметра
//
// Возвращаемое значение:
//   ЗначениеПараметраABC_КлассКлиента - Число
//
Функция ПолучитьЗначениеПараметраABC_КлассКлиента(ABC_КлассКлиентаСсылка)

	Если ABC_КлассКлиентаСсылка = Перечисления.ABCКлассификация.AКласс Тогда
		Возврат ПроцентAКласса;
	ИначеЕсли ABC_КлассКлиентаСсылка = Перечисления.ABCКлассификация.BКласс Тогда
		Возврат ПроцентBКласса;
	ИначеЕсли ABC_КлассКлиентаСсылка = Перечисления.ABCКлассификация.CКласс Тогда
		Возврат ПроцентCКласса;
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции // ПолучитьЗначениеПараметраABC_КлассКлиента()

// Процедура сортирует табличную часть
//
Процедура СортироватьТЧ()

	ТаблицаРаспределенияКонтрагентов.Сортировать("ABCКлассификация ВОЗР, ЗначениеПараметра УБЫВ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
// Процедура заполняет значениями поля: ДатаНачала, ДатаОкончания, "А-класс", "В-класс", "С-класс":
// поля примут значения аналогичных полей "ближайшего" по дате существующего документа.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЭтоНовый() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументыКлассификации.ПроцентAКласса,
		|	ДокументыКлассификации.ПроцентBКласса,
		|	ДокументыКлассификации.ПроцентCКласса,
		|	ДокументыКлассификации.ДатаОкончания
		|ИЗ
		|	Документ.ABCКлассификацияПокупателей КАК ДокументыКлассификации
		|ГДЕ
		|	ДокументыКлассификации.Дата < &ДатаДок
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыКлассификации.Дата УБЫВ
		|";
		Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
		
		ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		Если ВыборкаДокументов.Следующий() Тогда
			
			ПроцентAКласса = ВыборкаДокументов.ПроцентAКласса;
			ПроцентBКласса = ВыборкаДокументов.ПроцентBКласса;
			ПроцентCКласса = ВыборкаДокументов.ПроцентCКласса;
			ДатаНачала = НачалоДня(ВыборкаДокументов.ДатаОкончания + 24*60*60);
			ДатаОкончания = КонецМесяца(ДатаНачала);
			
		Иначе
			
			ПроцентAКласса = 70;
			ПроцентBКласса = 20;
			ПроцентCКласса = 10;
			
		КонецЕсли;
		
		Если ДатаНачала = '00010101000000' Тогда
			ДатаНачала = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		
		Если ДатаОкончания = '00010101000000' Тогда
			ДатаОкончания = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		
	КонецЕсли;
	
	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект,  ЭтаФорма);
	КонецЕсли; 

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.Заполнить.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовЗаполнить(Кнопка)
	
	Если (ПроцентAКласса + ПроцентBКласса + ПроцентCКласса) <> 100 Тогда
		Предупреждение("Сумма значений критериев для параметра распределения, указанных на закладке ""Параметры распределения"", должна быть равна 100%.");
		Возврат;
	КонецЕсли; 
	
	Если ТаблицаРаспределенияКонтрагентов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());
	
	ПараметрАВСРаспределения = Неопределено;
	СтруктураЗначенийРегистра.Свойство("ПараметрABCКлассификацииПокупателей", ПараметрАВСРаспределения);
	
	Если ПараметрАВСРаспределения = Неопределено ИЛИ (ТипЗнч(ПараметрАВСРаспределения) = Тип("ПеречислениеСсылка.ПараметрыABCКлассификацииПокупателей") И ПараметрАВСРаспределения.Пустая()) Тогда
		Предупреждение("В учетной политике предприятия не указан параметр для АВС-классификации покупателей. Заполнение невозможно.");
		Возврат;
	КонецЕсли; 
	
	Если ПараметрАВСРаспределения = Перечисления.ПараметрыABCКлассификацииПокупателей.СуммаВаловойПрибыли Тогда
		СтрокаЗапроса = "
		|	ВЫБОР КОГДА ЦенаСебестоимостиНоменклатуры.ЦенаСебестоимости ЕСТЬ NULL ТОГДА
		|		ПродажиКомпанииОбороты.СтоимостьОборот
		|	ИНАЧЕ
		|		ПродажиКомпанииОбороты.СтоимостьОборот - (ПродажиКомпанииОбороты.КоличествоОборот * ЦенаСебестоимостиНоменклатуры.ЦенаСебестоимости)
		|	КОНЕЦ
		|";
	ИначеЕсли ПараметрАВСРаспределения = Перечисления.ПараметрыABCКлассификацииПокупателей.СуммаВыручки Тогда
		СтрокаЗапроса = "
		|		ПродажиКомпанииОбороты.СтоимостьОборот";
	Иначе
		Предупреждение("В учетной политике предприятия не указан параметр для АВС-классификации покупателей. Заполнение невозможно.");
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя ЕСТЬ NULL
	|		ТОГДА &ПустойABCКласс
	|		ИНАЧЕ ABCКлассификацияПокупателей.ABCКлассПокупателя
	|		КОНЕЦ                        КАК ABCКлассПокупателя,
	|	ВЫБОР
	|		КОГДА СтадииВзаимоотношений.Стадия ЕСТЬ NULL
	|		ТОГДА &ПустаяСтадия
	|		ИНАЧЕ СтадииВзаимоотношений.Стадия
	|		КОНЕЦ                        КАК СтадияПокупателя,
	|	ТаблицаКонтрагентов.Контрагент   КАК Контрагент,
	|	ТаблицаКонтрагентов.Менеджер     КАК Менеджер,
	|	СУММА(ТаблицаКонтрагентов.Сумма) КАК Сумма
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец                            КАК Контрагент,
	|		ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец.ОсновнойМенеджерПокупателя КАК Менеджер,
	|		ВЫБОР
	|			КОГДА ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец ЕСТЬ NULL
	|			ТОГДА 0
	|			ИНАЧЕ
	|				" + СтрокаЗапроса + "
	|			КОНЕЦ                                                                     КАК Сумма
	|	ИЗ
	|		РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ДоговорКонтрагента <> &ПустойДоговор) КАК ПродажиКомпанииОбороты
	|";
	
	Если ПараметрАВСРаспределения = Перечисления.ПараметрыABCКлассификацииПокупателей.СуммаВаловойПрибыли Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		(
		|		ВЫБРАТЬ
		|			СебестоимостьНоменклатуры.Номенклатура КАК Номенклатура,
		|			ВЫБОР КОГДА СебестоимостьНоменклатуры.Количество ЕСТЬ NULL ИЛИ СебестоимостьНоменклатуры.Количество = 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				СебестоимостьНоменклатуры.СуммаСебестоимости/СебестоимостьНоменклатуры.Количество
		|			КОНЕЦ КАК ЦенаСебестоимости
		|		ИЗ
		|		
		|			(
		|			ВЫБРАТЬ
		|				ПродажиСебестоимость.Номенклатура            КАК Номенклатура,
		|				СУММА(ПродажиСебестоимость.СтоимостьОборот)  КАК СуммаСебестоимости,
		|				СУММА(ПродажиСебестоимость.КоличествоОборот) КАК Количество
		|			ИЗ
		|				РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНачала, &ДатаКонца) КАК ПродажиСебестоимость
		|				
		|			СГРУППИРОВАТЬ ПО
		|				ПродажиСебестоимость.Номенклатура
		|						
		|			) КАК СебестоимостьНоменклатуры
		|			
		|		) КАК ЦенаСебестоимостиНоменклатуры
		|		
		|	ПО 
		|		ЦенаСебестоимостиНоменклатуры.Номенклатура = ПродажиКомпанииОбороты.Номенклатура
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КонтрагентыСпр.Ссылка,
	|		КонтрагентыСпр.ОсновнойМенеджерПокупателя,
	|		0
	|	ИЗ
	|		Справочник.Контрагенты КАК КонтрагентыСпр
	|	ГДЕ
	|		КонтрагентыСпр.Покупатель = Истина
	|		И КонтрагентыСпр.Ссылка НЕ В ( 
	|			ВЫБРАТЬ
	|				ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец
	|			ИЗ
	|				РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ДоговорКонтрагента <> &ПустойДоговор) КАК ПродажиКомпанииОбороты
	|			)
	|	) КАК ТаблицаКонтрагентов
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ABCКлассификацияПокупателей.СрезПоследних(&ДатаКонца) КАК ABCКлассификацияПокупателей
	|ПО
	|	ABCКлассификацияПокупателей.Контрагент = ТаблицаКонтрагентов.Контрагент
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(&ДатаКонца) КАК СтадииВзаимоотношений
	|ПО
	|	СтадииВзаимоотношений.Контрагент = ТаблицаКонтрагентов.Контрагент
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя ЕСТЬ NULL
	|		ТОГДА &ПустойABCКласс
	|		ИНАЧЕ ABCКлассификацияПокупателей.ABCКлассПокупателя
	|		КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СтадииВзаимоотношений.Стадия ЕСТЬ NULL
	|		ТОГДА &ПустаяСтадия
	|		ИНАЧЕ СтадииВзаимоотношений.Стадия
	|		КОНЕЦ,
	|	ТаблицаКонтрагентов.Контрагент,
	|	ТаблицаКонтрагентов.Менеджер
	|";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойABCКласс", Перечисления.ABCКлассификация.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтадия", Перечисления.СтадииВзаимоотношенийСПокупателями.ПустаяСсылка());

	ТаблицаРаспределенияКонтрагентов.Очистить();

	ТаблицаКонтрагентов = Запрос.Выполнить().Выгрузить();
	ТаблицаКонтрагентов.Индексы.Добавить("ABCКлассПокупателя, СтадияПокупателя");
	
	// Сначала уберем все строки, у которых стадия - потерянный, а АВС-класс - пустая ссылка
	ПотерянныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(Новый Структура("ABCКлассПокупателя, СтадияПокупателя", Перечисления.ABCКлассификация.ПустаяСсылка(), Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель));
	Для каждого ПотеряннаяСтрока Из ПотерянныеСтроки Цикл
		ТаблицаКонтрагентов.Удалить(ПотеряннаяСтрока);
	КонецЦикла; 
	
	ТаблицаКонтрагентов.Сортировать("Сумма ВОЗР");

	ВсегоСумма = ТаблицаКонтрагентов.Итог("Сумма");

	СуммаВысокая = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_КлассКлиента(Перечисления.ABCКлассификация.AКласс)/100),2);
	СуммаСредняя = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_КлассКлиента(Перечисления.ABCКлассификация.BКласс)/100),2);
	СуммаНизкая = ВсегоСумма - СуммаВысокая - СуммаСредняя;

	СуммаНакопления = 0;
	Для каждого Строки Из ТаблицаКонтрагентов Цикл
		
		СуммаНакопления = СуммаНакопления + Строки.Сумма;
		
		НоваяСтрока = ТаблицаРаспределенияКонтрагентов.Добавить();
		
		Если СуммаНакопления <= СуммаНизкая Тогда
			НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.CКласс;
		ИначеЕсли СуммаНакопления <= (СуммаНизкая + СуммаСредняя) Тогда
			НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.BКласс;
		Иначе
			НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.AКласс;
		КонецЕсли;
		
		// Обнулим АВС-класс, для контрагентов, у которых стадия - потерянный
		Если Строки.СтадияПокупателя = Перечисления.СтадииВзаимоотношенийСПокупателями.ПотерянныйПокупатель Тогда
			НоваяСтрока.ABCКлассификация = Перечисления.ABCКлассификация.ПустаяСсылка();
		КонецЕсли; 
		
		НоваяСтрока.Контрагент = Строки.Контрагент;
		НоваяСтрока.ABCКлассификацияСтарая = Строки.ABCКлассПокупателя;
		НоваяСтрока.ЗначениеПараметра = Строки.Сумма;
		НоваяСтрока.МенеджерКонтрагента = Строки.Менеджер;
		
	КонецЦикла;

	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.Перераспределить.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовПерераспределить(Кнопка)
	
	Если (ПроцентAКласса + ПроцентBКласса + ПроцентCКласса) <> 100 Тогда
		Предупреждение("Сумма значений критериев для параметра распределения, указанных на закладке ""Параметры распределения"", должна быть равна 100%.");
		Возврат;
	КонецЕсли; 
	
	ТаблицаКонтрагентов = ТаблицаРаспределенияКонтрагентов.Выгрузить();
	ТаблицаКонтрагентов.Колонки.Добавить("ИндексКоличества");
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		СтрокаТаблицы.ИндексКоличества = 1;
	КонецЦикла; 
	
	ТекстСообщения = "";
	ТаблицаКонтрагентов.Свернуть("Контрагент", "ИндексКоличества");
	Для каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Если СтрокаТаблицы.ИндексКоличества > 1 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + СтрокаТаблицы.Контрагент;
		КонецЕсли; 
	КонецЦикла; 
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		Сообщить("Найдены строки с повторяющимися контрагентами, корректное перераспределение невозможно." + ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ОтветНаВопрос = Вопрос("Будут перераспределены классы покупателей в зависимости от значений параметра. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтрагентов = ТаблицаРаспределенияКонтрагентов.Выгрузить();
	
	ТаблицаКонтрагентов.Сортировать("ЗначениеПараметра ВОЗР");

	ВсегоСумма = ТаблицаКонтрагентов.Итог("ЗначениеПараметра");

	СуммаВысокая = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_КлассКлиента(Перечисления.ABCКлассификация.AКласс)/100),2);
	СуммаСредняя = Окр((ВсегоСумма*ПолучитьЗначениеПараметраABC_КлассКлиента(Перечисления.ABCКлассификация.BКласс)/100),2);
	СуммаНизкая = ВсегоСумма - СуммаВысокая - СуммаСредняя;

	СуммаНакопления = 0;
	Для каждого Строки Из ТаблицаКонтрагентов Цикл
		
		СуммаНакопления = СуммаНакопления + Строки.ЗначениеПараметра;
		
		Если СуммаНакопления <= СуммаНизкая Тогда
			ABCКлассификация = Перечисления.ABCКлассификация.CКласс;
		ИначеЕсли СуммаНакопления <= (СуммаНизкая + СуммаСредняя) Тогда
			ABCКлассификация = Перечисления.ABCКлассификация.BКласс;
		Иначе
			ABCКлассификация = Перечисления.ABCКлассификация.AКласс;
		КонецЕсли;
		
		СтрокаКонтрагента = ТаблицаРаспределенияКонтрагентов.Найти(Строки.Контрагент, "Контрагент");
		Если СтрокаКонтрагента <> Неопределено Тогда
			СтрокаКонтрагента.ABCКлассификация = ABCКлассификация;
		КонецЕсли; 
		
	КонецЦикла;

	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.История.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовИстория(Кнопка)
	
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные <> Неопределено Тогда
	
		ФормаРегистра = РегистрыСведений.ABCКлассификацияПокупателей.ПолучитьФормуСписка(, ЭтаФорма);
		ФормаРегистра.Отбор.Контрагент.Значение      = ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент;
		ФормаРегистра.Отбор.Контрагент.Использование = Истина;
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НастройкаОтбора.Контрагент.Доступность = Ложь;
		ФормаРегистра.Открыть();
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПослеУдаления элемента формы ТаблицаРаспределенияКонтрагентов.
//
Процедура ТаблицаРаспределенияКонтрагентовПослеУдаления(Элемент)
	
	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы ТаблицаРаспределенияКонтрагентов.
//
Процедура ТаблицаРаспределенияКонтрагентовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СортироватьТЧ();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ТаблицаРаспределенияКонтрагентов.Контрагент.
//
Процедура ТаблицаРаспределенияКонтрагентовКонтрагентПриИзменении(Элемент)
	
	Если Элемент.Значение.Пустая() Тогда
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификация       = Перечисления.ABCКлассификация.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификацияСтарая = Перечисления.ABCКлассификация.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра       = 0;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента     = Справочники.Пользователи.ПустаяСсылка();
		Возврат;
	Иначе
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.МенеджерКонтрагента     = Элемент.Значение.ОсновнойМенеджерПокупателя;
	КонецЕсли; 
	
	СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());
	
	ПараметрАВСРаспределения = Неопределено;
	СтруктураЗначенийРегистра.Свойство("ПараметрABCКлассификацииПокупателей", ПараметрАВСРаспределения);
	
	Если ПараметрАВСРаспределения = Неопределено ИЛИ (ТипЗнч(ПараметрАВСРаспределения) = Тип("ПеречислениеСсылка.ПараметрыABCКлассификацииПокупателей") И ПараметрАВСРаспределения.Пустая()) Тогда
		СтруктураЗначенийРегистраКлассов = РегистрыСведений.ABCКлассификацияПокупателей.ПолучитьПоследнее(ТекущаяДата(), Новый Структура("Контрагент", Элемент.Значение));
		Попытка
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификацияСтарая = СтруктураЗначенийРегистраКлассов.ABCКлассПокупателя;
		Исключение
			ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификацияСтарая = Перечисления.ABCКлассификация.ПустаяСсылка();
		КонецПопытки;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра       = 0;
		Возврат;
	КонецЕсли; 
	
	Если ПараметрАВСРаспределения = Перечисления.ПараметрыABCКлассификацииПокупателей.СуммаВаловойПрибыли Тогда
		СтрокаЗапроса = "
		|	ВЫБОР КОГДА ЦенаСебестоимостиНоменклатуры.ЦенаСебестоимости ЕСТЬ NULL ТОГДА
		|		ПродажиСумма.Сумма
		|	ИНАЧЕ
		|		ПродажиСумма.Сумма - (ПродажиСумма.Количество * ЦенаСебестоимостиНоменклатуры.ЦенаСебестоимости)
		|	КОНЕЦ
		|";
	ИначеЕсли ПараметрАВСРаспределения = Перечисления.ПараметрыABCКлассификацииПокупателей.СуммаВыручки Тогда
		СтрокаЗапроса = "
		|		ПродажиСумма.Сумма ";
	Иначе
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификацияСтарая = Перечисления.ABCКлассификация.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра       = 0;
		Возврат;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|
	|	ВЫБОР КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя ЕСТЬ NULL ТОГДА
	|		&ПустойABCКласс
	|	ИНАЧЕ
	|		ABCКлассификацияПокупателей.ABCКлассПокупателя
	|	КОНЕЦ                           КАК ABCКлассПокупателя,
	|	ТаблицаКонтрагентов.Контрагент  КАК Контрагент,
	|	СУММА(ТаблицаКонтрагентов.Сумма)КАК Сумма
	|
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|	
	|		ПродажиСумма.Контрагент КАК Контрагент,
	|		" + СтрокаЗапроса + "   КАК Сумма
	|	
	|	ИЗ
	|		(
	|	
	|		ВЫБРАТЬ
	|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
	|			ПродажиКомпанииОбороты.Номенклатура                   КАК Номенклатура,
	|			ПродажиКомпанииОбороты.СтоимостьОборот                КАК Сумма,
	|			ПродажиКомпанииОбороты.КоличествоОборот               КАК Количество
	|			
	|
	|		ИЗ
	|			РегистрНакопления.Продажи.Обороты(&ДатаНачала, &ДатаКонца, , ДоговорКонтрагента <> &ПустойДоговор)
	|		                          КАК ПродажиКомпанииОбороты
	|		ГДЕ
	|			ПродажиКомпанииОбороты.ДоговорКонтрагента.Владелец = &ВыбКонтрагент
	|
	|		) КАК ПродажиСумма
	|	
	|";
	
	Если ПараметрАВСРаспределения = Перечисления.ПараметрыABCКлассификацииПокупателей.СуммаВаловойПрибыли Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		(
		|		ВЫБРАТЬ
		|			СебестоимостьНоменклатуры.Номенклатура КАК Номенклатура,
		|			ВЫБОР КОГДА СебестоимостьНоменклатуры.Количество ЕСТЬ NULL ИЛИ СебестоимостьНоменклатуры.Количество = 0 ТОГДА
		|				0
		|			ИНАЧЕ
		|				СебестоимостьНоменклатуры.СуммаСебестоимости/СебестоимостьНоменклатуры.Количество
		|			КОНЕЦ КАК ЦенаСебестоимости
		|		ИЗ
		|		
		|			(
		|			ВЫБРАТЬ
		|				ПродажиСебестоимость.Номенклатура            КАК Номенклатура,
		|				СУММА(ПродажиСебестоимость.СтоимостьОборот)  КАК СуммаСебестоимости,
		|				СУММА(ПродажиСебестоимость.КоличествоОборот) КАК Количество
		|			ИЗ
		|				РегистрНакопления.ПродажиСебестоимость.Обороты(&ДатаНачала, &ДатаКонца) КАК ПродажиСебестоимость
		|				
		|			СГРУППИРОВАТЬ ПО
		|				ПродажиСебестоимость.Номенклатура
		|						
		|			) КАК СебестоимостьНоменклатуры
		|			
		|		) КАК ЦенаСебестоимостиНоменклатуры
		|		
		|	ПО 
		|		ЦенаСебестоимостиНоменклатуры.Номенклатура = ПродажиСумма.Номенклатура
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|   ) КАК ТаблицаКонтрагентов
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ABCКлассификацияПокупателей.СрезПоследних(&ДатаКонца) КАК ABCКлассификацияПокупателей
	|
	|ПО
	|	ABCКлассификацияПокупателей.Контрагент = ТаблицаКонтрагентов.Контрагент
	|	
	|СГРУППИРОВАТЬ ПО
	|
	|	ВЫБОР КОГДА ABCКлассификацияПокупателей.ABCКлассПокупателя ЕСТЬ NULL ТОГДА
	|		&ПустойABCКласс
	|	ИНАЧЕ
	|		ABCКлассификацияПокупателей.ABCКлассПокупателя
	|	КОНЕЦ,
	|	ТаблицаКонтрагентов.Контрагент
	|";

	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ПустойДоговор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойABCКласс", Перечисления.ABCКлассификация.ПустаяСсылка());
	Запрос.УстановитьПараметр("ВыбКонтрагент", Элемент.Значение);
	
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификацияСтарая = ТаблицаЗапроса[0].ABCКлассПокупателя;
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра       = ТаблицаЗапроса[0].Сумма;
	Иначе
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ABCКлассификацияСтарая = Перечисления.ABCКлассификация.ПустаяСсылка();
		ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.ЗначениеПараметра       = 0;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ТаблицаРаспределенияКонтрагентов.
//
Процедура ТаблицаРаспределенияКонтрагентовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СуммаВсего = ТаблицаРаспределенияКонтрагентов.Итог("ЗначениеПараметра");
	СтрокиСПустыКлассом = ТаблицаРаспределенияКонтрагентов.НайтиСтроки(Новый Структура("ABCКлассификация", Перечисления.ABCКлассификация.ПустаяСсылка()));
	Для каждого СтрокаСПустымКлассом Из СтрокиСПустыКлассом Цикл
		СуммаВсего = СуммаВсего - СтрокаСПустымКлассом.ЗначениеПараметра;
	КонецЦикла; 
	
	Если ДанныеСтроки.ABCКлассификация.Пустая() Тогда
		ОформлениеСтроки.Ячейки.ABCКлассификация.УстановитьТекст("Не указан");
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	Иначе
		Если СуммаВсего = 0 Тогда
			ОформлениеСтроки.Ячейки.ПроцентПараметра.УстановитьТекст("");
		Иначе
			ОформлениеСтроки.Ячейки.ПроцентПараметра.УстановитьТекст(Формат((ДанныеСтроки.ЗначениеПараметра*100/СуммаВсего), "ЧЦ=5; ЧДЦ=2"));
		КонецЕсли; 
		Если ДанныеСтроки.ABCКлассификация = Перечисления.ABCКлассификация.AКласс Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.Кирпичный;
		ИначеЕсли ДанныеСтроки.ABCКлассификация = Перечисления.ABCКлассификация.BКласс Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноЗеленый;
		ИначеЕсли ДанныеСтроки.ABCКлассификация = Перечисления.ABCКлассификация.CКласс Тогда
			ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		КонецЕсли;
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.Контрагент.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ABCКлассификацияСтарая.Пустая() Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 2;
	ИначеЕсли ДанныеСтроки.ABCКлассификация.Пустая() Тогда
		ОформлениеСтроки.Ячейки.Контрагент.ОтображатьКартинку = Ложь;
	Иначе
		Если Перечисления.ABCКлассификация.Индекс(ДанныеСтроки.ABCКлассификация) = Перечисления.ABCКлассификация.Индекс(ДанныеСтроки.ABCКлассификацияСтарая) Тогда
			ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 0;
		ИначеЕсли Перечисления.ABCКлассификация.Индекс(ДанныеСтроки.ABCКлассификация) < Перечисления.ABCКлассификация.Индекс(ДанныеСтроки.ABCКлассификацияСтарая) Тогда
			ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 2;
		Иначе
			ОформлениеСтроки.Ячейки.Контрагент.ИндексКартинки = 1;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриСменеСтраницы элемента формы ПанельДокумента.
//
Процедура ПанельДокументаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элемент.ТекущаяСтраница.Имя = "ПараметрыРаспределения" Тогда
	
		СтруктураЗначенийРегистра = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ТекущаяДата());
		
		ПараметрАВСРаспределения = Неопределено;
		СтруктураЗначенийРегистра.Свойство("ПараметрABCКлассификацииПокупателей", ПараметрАВСРаспределения);
		
		Если ПараметрАВСРаспределения = Неопределено ИЛИ (ТипЗнч(ПараметрАВСРаспределения) = Тип("ПеречислениеСсылка.ПараметрыABCКлассификацииПокупателей") И ПараметрАВСРаспределения.Пустая()) Тогда
			ЭлементыФормы.НадписьПараметраРаспределения.Заголовок = "Параметр в учетной политике не указан."
		Иначе
			ЭлементыФормы.НадписьПараметраРаспределения.Заголовок = "" + ПараметрАВСРаспределения + ", в валюте упр.учета (" + СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета").Наименование) + ")";
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КнопкаВыбораПериода.
//
Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНачала, ?(ДатаОкончания='0001-01-01', ДатаОкончания, КонецДня(ДатаОкончания)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Интервал;
	НастройкаПериода.Редактировать();
	ДатаНачала    = НастройкаПериода.ДатаНачала;
	ДатаОкончания = НастройкаПериода.ДатаОкончания;
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.ДокументыПоКонтрагенту.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовДокументыПоКонтрагенту(Кнопка)
	
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаЖурнала = ЖурналыДокументов.ДокументыКонтрагентов.ПолучитьФорму();
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Значение      = ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент;
	ФормаЖурнала.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	
	ФормаЖурнала.Отбор.Дата.Использование = Истина;
	ФормаЖурнала.Отбор.Дата.ВидСравнения  = ВидСравнения.ИнтервалВключаяГраницы;
	ФормаЖурнала.Отбор.Дата.ЗначениеС  = НачалоДня(ДатаНачала);
	ФормаЖурнала.Отбор.Дата.ЗначениеПо = КонецДня(ДатаОкончания);
	
	ФормаЖурнала.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельТаблицаРаспределенияКонтрагентов.Взаиморасчеты.
//
Процедура КоманднаяПанельТаблицаРаспределенияКонтрагентовВзаиморасчеты(Кнопка)
	
	Если ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	ОтчетКонтрагента.УстановитьНачальныеНастройки();
	ОтчетКонтрагента.УниверсальныйОтчет.ДатаНач = НачалоДня(ДатаНачала);
	ОтчетКонтрагента.УниверсальныйОтчет.ДатаКон = КонецДня(ДатаОкончания);
	ОтчетКонтрагента.УниверсальныйОтчет.ВыводитьОбщиеИтоги = Истина;
	
	ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения  = ВидСравнения.Равно;
	ЭлементОтбора.Значение      = ЭлементыФормы.ТаблицаРаспределенияКонтрагентов.ТекущиеДанные.Контрагент;
	
	ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ПослеЗаписи()
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа


КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры


