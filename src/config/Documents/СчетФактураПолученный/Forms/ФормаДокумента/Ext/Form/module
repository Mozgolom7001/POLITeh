////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ВерсияПостановления, ПравилаПостановления735;

Перем мТекущийВидСчетаФактуры;

Перем ВерсияКодовВидовОпераций;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

Процедура УстановитьДоступныеВидыСчетаФактуры()

	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Очистить();
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыПолученного.НаАванс);	
	Если Дата >= '20111001' Тогда	
		ЭлементыФормы.ВидСчетаФактуры.ДоступныеЗначения.Добавить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	КонецЕсли;

КонецПроцедуры

Функция МожноИспользоватьДоговорКонтрагента(ВыбранныйДоговорКонтрагента)
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
		ИЛИ Исправление Тогда
		
		Если ВыбранныйДоговорКонтрагента.РасчетыВУсловныхЕдиницах 
			И ВыбранныйДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
			
			Если Исправление Тогда
				УточнениеСообщения = "исправленных";				
			Иначе
				УточнениеСообщения = "корректировочных"; 
			КонецЕсли;
			Предупреждение("Для договоров в условных единицах регистрация " 
				+ УточнениеСообщения + " счетов-фактур, оформленных в валюте, не поддерживается.");
			Возврат Ложь;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, ВыбратьТекущуюКолонку = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура();
	
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Отбор.Вставить("ДокументыПоДоговоруКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	
	Отбор.Вставить("ПоставщикуВыставляетсяСчетФактураНаВозврат", Ложь);
	Отбор.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Истина);
	
	Если Исправление Тогда
		Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	КонецЕсли;
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный И НЕ Исправление Тогда
		Отбор.Вставить("ВидОперации", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	КонецЕсли;	
	
	Если ВыбратьТекущуюКолонку Тогда
	    ЭлементыФормы.ДокументыОснования.ТекущаяКолонка = ЭлементыФормы.ДокументыОснования.Колонки.ДокументОснование;
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(
		ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДокументыОснования", СписокТипов);
	
КонецПроцедуры

Процедура РассчитатьСуммуДокумента()
	
	СчетФактураКомитента = ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		ИЛИ (СчетФактураКомитента И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный) Тогда
		
		Если ЭтоКомиссияПоПродаже() Тогда
			Сумма    = СчетаФактурыВыданныеПокупателям.Итог("Сумма");
			СуммаНДС = СчетаФактурыВыданныеПокупателям.Итог("НДС");
		Иначе
			Сумма    = Авансы.Итог("Сумма");
			СуммаНДС = Авансы.Итог("СуммаНДС");
		КонецЕсли;
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
				мВалютаРегламентированногоУчета, ВалютаДокумента, 
				1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
			СуммаНДСДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
				мВалютаРегламентированногоУчета, ВалютаДокумента, 
				1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
		Иначе
										
			СуммаДокумента    = Сумма;
			СуммаНДСДокумента = СуммаНДС;
			
		КонецЕсли;
		
		Если Дата >= '20150101'
			И СчетФактураКомитента Тогда 
			СуммаДокументаКомиссия 		= СуммаДокумента;
			СуммаНДСДокументаКомиссия 	= СуммаНДСДокумента;
		Иначе
			СуммаДокументаКомиссия 		= 0;
			СуммаНДСДокументаКомиссия 	= 0;
		КонецЕсли;

	ИначеЕсли СчетФактураКомитента И ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		
		СуммаУвеличение 	= ДокументыОснования.Итог("СуммаУвеличение");
		СуммаНДСУвеличение 	= ДокументыОснования.Итог("СуммаНДСУвеличение");
		СуммаУменьшение 	= ДокументыОснования.Итог("СуммаУменьшение");
		СуммаНДСУменьшение 	= ДокументыОснования.Итог("СуммаНДСУменьшение");
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			СуммаУвеличение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУвеличение,
				мВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
			СуммаНДСУвеличение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСУвеличение,
				мВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
			СуммаУменьшение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУменьшение,
				мВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
			СуммаНДСУменьшение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСУменьшение,
				мВалютаРегламентированногоУчета, ВалютаДокумента, 1, СтруктураКурсаВзаиморасчетов.Курс, 
				1, СтруктураКурсаВзаиморасчетов.Кратность);
			
		КонецЕсли;
		
		СуммаДокумента 		= СуммаУвеличение - СуммаУменьшение;
		СуммаНДСДокумента 	= СуммаНДСУвеличение - СуммаНДСУменьшение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	ЕстьНеВозврат = Ложь;
	Для Каждого СтрокаТЧ Из ДокументыОснования Цикл
		Если Не ТипЗнч(СтрокаТЧ.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			ЕстьНеВозврат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Корректировочный = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
	НаАванс          = ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;
	
	СчетФактураКомитента = ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
	
	ЗаголовокГруппыАвансы = ?(СчетФактураКомитента, "Реквизиты счета-фактуры комитента", "Реквизиты счета-фактуры на аванс");
	
	ЭлементыФормы.РеквизитыСчетаФактурыНаАванс.Заголовок = ЗаголовокГруппыАвансы;
	
	УказанДокументОснование = ДокументыОснования.Количество() > 0 
		И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование);

	ВидимостьКомиссииПоПродаже = ЭтоКомиссияПоПродаже();
	
	ЭлементыФормы.Организация.ТолькоПросмотр = УказанДокументОснование;
	ЭлементыФормы.Контрагент.ТолькоПросмотр  = УказанДокументОснование 
		И ТипЗнч(ДокументыОснования[0].ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет");
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр	= УказанДокументОснование И НЕ НаАванс;
		
	Если НЕ ВидимостьКомиссииПоПродаже И (НаАванс ИЛИ (СчетФактураКомитента И НЕ Корректировочный)) Тогда 
		ЭлементыФормы.ПанельДокументыОснования.ТекущаяСтраница = ЭлементыФормы.ПанельДокументыОснования.Страницы.НаАванс;
	ИначеЕсли Корректировочный Тогда
		ЭлементыФормы.ПанельДокументыОснования.ТекущаяСтраница = ЭлементыФормы.ПанельДокументыОснования.Страницы.Корректировочный;
	ИначеЕсли БланкСтрогойОтчетности Тогда
		ЭлементыФормы.ПанельДокументыОснования.ТекущаяСтраница = ЭлементыФормы.ПанельДокументыОснования.Страницы.БланкСтрогойОтчетности;
	ИначеЕсли ВидимостьКомиссииПоПродаже Тогда
		ЭлементыФормы.ПанельДокументыОснования.ТекущаяСтраница = ЭлементыФормы.ПанельДокументыОснования.Страницы.СводныйКомиссионныйСчетаФактурыПокупателям;
	Иначе
		ЭлементыФормы.ПанельДокументыОснования.ТекущаяСтраница = ЭлементыФормы.ПанельДокументыОснования.Страницы.НаПоступление;	
	КонецЕсли;

	ЕстьОснованиеАО = Ложь;
	Для каждого ТекущийДокументОснование Из ДокументыОснования Цикл
		ЕстьОснованиеАО = НЕ НаАванс 
			И ТипЗнч(ТекущийДокументОснование.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет");
	КонецЦикла; 	
	
	ЭлементыФормы.ДатаВходящего.ТолькоПросмотр	= ЕстьОснованиеАО;
	ЭлементыФормы.НомерВходящего.ТолькоПросмотр	= ЕстьОснованиеАО;
	
	ЭлементыФормы.НадписьСуммаНДСДокумента.Видимость = ВерсияПостановления = 2;
	ЭлементыФормы.СуммаНДСДокумента.Видимость        = ВерсияПостановления = 2;
	
	ЭлементыФормы.ПанельИсправление.Видимость = ВерсияПостановления = 2 И НЕ БланкСтрогойОтчетности;
	ЭлементыФормы.ПанельИсправление.ТекущаяСтраница = ЭлементыФормы.ПанельИсправление.Страницы.СтраницаИсправление;
	
	Если ВерсияПостановления = 2 Тогда
				
		ПанельСведенияОСчетеФактуреРежимСвертки = ?(БланкСтрогойОтчетности,
			РежимСверткиЭлементаУправления.Низ, РежимСверткиЭлементаУправления.Нет);
		
		ЭлементыФормы.НомерИсправления.Доступность = Исправление;
		ЭлементыФормы.ДатаИсправления.Доступность  = Исправление;
		ЭлементыФормы.НомерИсправления.АвтоОтметкаНезаполненного = Исправление И НЕ ЗначениеЗаполнено(НомерИсправления);
		Если НЕ ЭлементыФормы.НомерИсправления.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.НомерИсправления.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		ЭлементыФормы.ДатаИсправления.АвтоОтметкаНезаполненного  = Исправление И НЕ ЗначениеЗаполнено(ДатаИсправления);
		Если НЕ ЭлементыФормы.ДатаИсправления.АвтоОтметкаНезаполненного Тогда
			ЭлементыФормы.ДатаИсправления.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	Иначе
		
		ПанельСведенияОСчетеФактуреРежимСвертки = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	
	ВидимостьКомиссионныхСумм = Дата >= '20150101'
		И НЕ НаАванс;

	Если Корректировочный Тогда
		ЭлементыФормы.ПанельИтоги.ТекущаяСтраница = ЭлементыФормы.ПанельИтоги.Страницы.СтраницаДоплатаУменьшение;
		ЭлементыФормы.НадписьСуммаУвеличениеКомиссия.Видимость      = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаУвеличениеКомиссия.Видимость             = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.ВалютаКомиссияУвеличение.Видимость            = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаНДСУвеличениеКомиссия.Видимость   = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаНДСУвеличениеКомиссия.Видимость          = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаУменьшениеКомиссия.Видимость      = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаУменьшениеКомиссия.Видимость             = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.ВалютаКомиссияУменьшение.Видимость            = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаНДСУменьшениеКомиссия.Видимость   = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаНДСУменьшениеКомиссия.Видимость          = ВидимостьКомиссионныхСумм;
	Иначе
		ЭлементыФормы.ПанельИтоги.ТекущаяСтраница = ЭлементыФормы.ПанельИтоги.Страницы.СтраницаВсего;
		ЭлементыФормы.НадписьСуммаДокументаКомиссия.Видимость       = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаДокументаКомиссия.Видимость              = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.ВалютаКомиссия.Видимость                      = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.НадписьСуммаНДСДокументаКомиссия.Видимость    = ВидимостьКомиссионныхСумм;
		ЭлементыФормы.СуммаНДСДокументаКомиссия.Видимость           = ВидимостьКомиссионныхСумм;
	КонецЕсли;
	
	// Код вида операции корректировочного счета-фактуры на уменьшение стоимости
	ЭлементыФормы.КодВидаОперацииНаУменьшение.Видимость = Корректировочный И ВерсияКодовВидовОпераций > 1;
	ЭлементыФормы.НадписьКодВидаОперацииНаУменьшение.Видимость = Корректировочный И ВерсияКодовВидовОпераций > 1;
	
	ДопКолонкиКорректировка = ЭлементыФормы.ДокументыОснованияКорректировка.Колонки;
	ДопКолонкиКорректировка.УчитыватьИсправлениеИсходногоДокумента.Видимость = ВерсияПостановления = 2;
	ДопКолонкиКорректировка.НомерИсправленияИсходногоДокумента.Видимость 	 = ВерсияПостановления = 2;
	ДопКолонкиКорректировка.ДатаИсправленияИсходногоДокумента.Видимость 	 = ВерсияПостановления = 2;

	ЭлементыФормы.ПанельСведенияОСчетеФактуре.Свертка = ПанельСведенияОСчетеФактуреРежимСвертки;	
	
	ЭлементыФормы.Контрагент.ТолькоПросмотр 	   = ЭлементыФормы.Контрагент.ТолькоПросмотр ИЛИ БланкСтрогойОтчетности;
	ЭлементыФормы.ВидСчетаФактуры.Доступность 	   = ЭлементыФормы.ВидСчетаФактуры.Доступность И НЕ БланкСтрогойОтчетности;
	ЭлементыФормы.ДокументОснование.ТолькоПросмотр = ЭлементыФормы.ДокументОснование.ТолькоПросмотр ИЛИ БланкСтрогойОтчетности;
	
	ЭлементыФормы.КоманднаяПанельСчетаФактурыВыданныеПокупателям.Кнопки.ЗаполнитьСчетаФактурыВыданныеПокупателям.Доступность = Дата >= '20150101';

	// установим видимость надписи КППКонтрагента и ее значение
	УстановитьНадписьКППКонтрагента();

КонецПроцедуры

Функция ЭтоКомиссияПоПродаже()

	Возврат	ПравилаПостановления735
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
			И ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
			И ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный;

КонецФункции

Процедура УстановитьНадписьКППКонтрагента()
	
	РеквизитыКонтрагента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент, "ЮрФизЛицо, КПП");
	
	АктуальноПоВидуСчетаФактуры = (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	
	Если АктуальноПоВидуСчетаФактуры И НЕ РеквизитыКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ЭлементыФормы.ПанельКППКонтрагента.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ПредставлениеКППКонтрагента = ""; 
		Если ЗначениеЗаполнено(КППКонтрагента) Тогда
			ПредставлениеКППКонтрагента = КППКонтрагента;
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			ПредставлениеКППКонтрагента = РеквизитыКонтрагента.КПП;
		КонецЕсли;
		
		ЭлементыФормы.НадписьКППКонтрагента.Заголовок = "КПП: " 
		+ ?(ПустаяСтрока(ПредставлениеКППКонтрагента), "<не задан>", ПредставлениеКППКонтрагента);
		
	Иначе
		ЭлементыФормы.ПанельКППКонтрагента.Свертка = РежимСверткиЭлементаУправления.Право;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаФактурыПоОтчетуКомитенту()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
	Запрос.УстановитьПараметр("ДокументОснование"     , ДокументОснование);
	Запрос.УстановитьПараметр("Организация"           , Организация);
	Запрос.УстановитьПараметр("Комитент"              , Контрагент);
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеализацииПоОтчету.Покупатель КАК Покупатель
		|ПОМЕСТИТЬ ПокупателиПоОтчету
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Товары КАК РеализацииПоОтчету
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РеализацииПоОтчету.ДатаРеализации, ДЕНЬ) = &ДатаВходящегоДокумента
		|	И РеализацииПоОтчету.Ссылка = &ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументРеализации.Ссылка КАК ДокументРеализации
		|ПОМЕСТИТЬ ДокументыРеализации
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРеализации
		|ГДЕ
		|	ДокументРеализации.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(ДокументРеализации.Дата, ДЕНЬ) = &ДатаВходящегоДокумента
		|	И ДокументРеализации.Контрагент В
		|			(ВЫБРАТЬ
		|				ПокупателиПоОтчету.Покупатель
		|			ИЗ
		|				ПокупателиПоОтчету)
		|
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетСубкомиссионераШапка.Контрагент КАК Субкомиссионер,
		|	ПокупателиСубкомиссионера.СчетФактура КАК СчетФактура,
		|	ПокупателиСубкомиссионера.Покупатель КАК Покупатель,
		|	СчетФактураШапка.СуммаДокументаКомиссия КАК Сумма,
		|	СчетФактураШапка.СуммаНДСДокументаКомиссия КАК НДС
		|ПОМЕСТИТЬ ОтчетСубкомиссионера
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ПокупателиСубкомиссионера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетСубкомиссионераШапка
		|		ПО ПокупателиСубкомиссионера.Ссылка = ОтчетСубкомиссионераШапка.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураШапка
		|		ПО ПокупателиСубкомиссионера.СчетФактура = СчетФактураШапка.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РеализованныеТовары КАК РеализованныеТоварыКомитентов
		|		ПО (ОтчетСубкомиссионераШапка.Ссылка = РеализованныеТоварыКомитентов.Регистратор)
		|			И ПокупателиСубкомиссионера.Покупатель = РеализованныеТоварыКомитентов.Покупатель
		|			И ПокупателиСубкомиссионера.ДатаСФ = РеализованныеТоварыКомитентов.ДатаРеализации
		|ГДЕ
		|	ПокупателиСубкомиссионера.Ссылка.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(ПокупателиСубкомиссионера.ДатаСФ, ДЕНЬ) = &ДатаВходящегоДокумента
		|	И НЕ ОтчетСубкомиссионераШапка.ВыписыватьСчетаФактурыСводно
		|	И ПокупателиСубкомиссионера.ВыставленСФ
		|	И ПокупателиСубкомиссионера.Покупатель В
		|			(ВЫБРАТЬ
		|				ПокупателиПоОтчету.Покупатель
		|			ИЗ
		|				ПокупателиПоОтчету)
		|	И НЕ СчетФактураШапка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетСубкомиссионераШапка.Контрагент КАК Субкомиссионер,
		|	ПокупателиСубкомиссионера.СчетФактура КАК СчетФактура,
		|	ПокупателиСубкомиссионера.Покупатель КАК Покупатель,
		|	СУММА(ТоварыПоОтчету.СуммаНДС) КАК НДС,
		|	СУММА(ВЫБОР
		|			КОГДА ОтчетСубкомиссионераШапка.СуммаВключаетНДС
		|				ТОГДА ТоварыПоОтчету.Сумма
		|			ИНАЧЕ ТоварыПоОтчету.Сумма + ТоварыПоОтчету.СуммаНДС
		|		КОНЕЦ) КАК Сумма
		|ПОМЕСТИТЬ СводныйОтчетСубкомиссионера
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ПокупателиСубкомиссионера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетСубкомиссионераШапка
		|		ПО ПокупателиСубкомиссионера.Ссылка = ОтчетСубкомиссионераШапка.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ТоварыПоОтчету
		|		ПО (ТоварыПоОтчету.Ссылка = ПокупателиСубкомиссионера.Ссылка)
		|			И (ТоварыПоОтчету.КлючСтроки = ПокупателиСубкомиссионера.КлючСтроки)
		|ГДЕ
		|	ПокупателиСубкомиссионера.Ссылка.Организация = &Организация
		|	И НАЧАЛОПЕРИОДА(ПокупателиСубкомиссионера.ДатаСФ, ДЕНЬ) = &ДатаВходящегоДокумента
		|	И ОтчетСубкомиссионераШапка.ВыписыватьСчетаФактурыСводно
		|	И ПокупателиСубкомиссионера.ВыставленСФ
		|	И ПокупателиСубкомиссионера.Покупатель В
		|			(ВЫБРАТЬ
		|				ПокупателиПоОтчету.Покупатель
		|			ИЗ
		|				ПокупателиПоОтчету)
		//|	И ТоварыПоОтчету.СчетУчетаБУ.Забалансовый
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетСубкомиссионераШапка.Контрагент,
		|	ПокупателиСубкомиссионера.СчетФактура,
		|	ПокупателиСубкомиссионера.Покупатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураШапка.Ссылка КАК СчетФактура,
		|	СчетФактураШапка.СуммаДокументаКомиссия КАК Сумма,
		|	СчетФактураШапка.СуммаНДСДокументаКомиссия КАК НДС,
		|	НЕОПРЕДЕЛЕНО КАК Субкомиссионер,
		|	СчетФактураШапка.Контрагент КАК Покупатель
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РеализованныеТовары КАК РеализованныеТоварыКомитентов
		|		ПО ДокументыРеализации.ДокументРеализации = РеализованныеТоварыКомитентов.Регистратор
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураОснования
		|		ПО ДокументыРеализации.ДокументРеализации = СчетФактураОснования.ДокументОснование
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураШапка
		|		ПО (СчетФактураОснования.Ссылка = СчетФактураШапка.Ссылка)
		|ГДЕ
		|	НЕ СчетФактураШапка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетСубкомиссионера.СчетФактура,
		|	ОтчетСубкомиссионера.Сумма,
		|	ОтчетСубкомиссионера.НДС,
		|	ОтчетСубкомиссионера.Субкомиссионер,
		|	ОтчетСубкомиссионера.Покупатель
		|ИЗ
		|	ОтчетСубкомиссионера КАК ОтчетСубкомиссионера
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СводныйОтчетСубкомиссионера.СчетФактура,
		|	СводныйОтчетСубкомиссионера.Сумма,
		|	СводныйОтчетСубкомиссионера.НДС,
		|	СводныйОтчетСубкомиссионера.Субкомиссионер,
		|	СводныйОтчетСубкомиссионера.Покупатель
		|ИЗ
		|	СводныйОтчетСубкомиссионера КАК СводныйОтчетСубкомиссионера";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураВыданный.Контрагент КАК Покупатель,
		|	СчетФактураВыданный.Ссылка КАК СчетФактура,
		|	СчетФактураВыданный.СуммаДокумента КАК Сумма,
		|	СчетФактураВыданный.СуммаНДСДокумента КАК НДС,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) = ТИП(Документ.ОтчетКомиссионераОПродажах)
		|			ТОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Контрагент, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Субкомиссионер
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
		|		ПО СчетФактураВыданный.ДокументОснование = ОтчетКомиссионераОПродажах.Ссылка
		|ГДЕ
		|	СчетФактураВыданный.Организация = &Организация
		|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента)
		|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &ДатаВходящегоДокумента
		|	И СчетФактураВыданный.Комитент = &Комитент
		|	И НЕ ЕСТЬNULL(ОтчетКомиссионераОПродажах.ВыписыватьСчетаФактурыСводно, ЛОЖЬ)
		|	И НЕ СчетФактураВыданный.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СчетФактураАвансы.Контрагент,
		|	СчетФактураВыданный.Ссылка,
		|	СчетФактураАвансы.Сумма,
		|	СчетФактураАвансы.СуммаНДС,
		|	ОтчетКомиссионераОПродажах.Контрагент
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
		|		ПО СчетФактураВыданный.ДокументОснование = ОтчетКомиссионераОПродажах.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК СчетФактураАвансы
		|		ПО (СчетФактураАвансы.Ссылка = СчетФактураВыданный.Ссылка)
		|ГДЕ
		|	СчетФактураВыданный.Организация = &Организация
		|	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаАвансКомитента)
		|	И НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) = &ДатаВходящегоДокумента
		|	И СчетФактураВыданный.Комитент = &Комитент
		|	И ОтчетКомиссионераОПродажах.ВыписыватьСчетаФактурыСводно
		|	И НЕ СчетФактураВыданный.ПометкаУдаления";
		
	КонецЕсли;
	
	СчетаФактурыВыданныеПокупателям.Очистить();
	СчетаФактурыВыданныеПокупателям.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьСписокКодовВидовОпераций()
	
	УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
		Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
		ЭлементыФормы.КодВидаОперации.СписокВыбора,
		Дата);
		
	Если ВерсияКодовВидовОпераций > 1 Тогда
		УчетНДС.ЗаполнитьСписокКодовВидовОпераций(
			Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры,
			ЭлементыФормы.КодВидаОперацииНаУменьшение.СписокВыбора,
			Дата);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Начало ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы

КонецПроцедуры 

Процедура ПриОткрытии()
	
	СчетФактураКомитента = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах");
	
	Если НЕ ЗначениеЗаполнено(ВидСчетаФактуры) Тогда
		ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
	КонецЕсли; 

	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		Если НЕ мДокументЗаполнен Тогда
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование);
		ИначеЕсли Не ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		КонецЕсли; 
	КонецЕсли;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		ДокументыОснования.Добавить().ДокументОснование = ДокументОснование;
	КонецЕсли; 
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента   = Дата;
	мТекущийВидСчетаФактуры = ВидСчетаФактуры;
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ (СчетФактураКомитента И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный) Тогда
		Если Авансы.Количество() = 0 Тогда
			Авансы.Добавить();
		КонецЕсли;
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
	КонецЕсли;

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	УстановитьДоступныеВидыСчетаФактуры();
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	ПравилаПостановления735 = УчетНДС.ВерсияПостановленияНДС1137(Дата) >= 3;
	
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);

	УстановитьВидимость();
	ЗаполнитьСписокКодовВидовОпераций();
	
	Если СформированПриВводеНачальныхОстатковНДС Тогда
		//По документам сформированным вводом начальных остатков по НДС не допускаются изменения
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс И НЕ ЭтоНовый() И НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ОпределениеПараметровСчетаФактуры();
	КонецЕсли;
	
	// Начало ЭлектронныеДокументы
	ЭлектронныеДокументыКлиент.ПриОткрытии(ЭтаФорма);
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

КонецПроцедуры 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли; 
			
	СтрокаСообщения = ПроверитьВозможностьЗаписиСФ(Отказ);
	
	Если Отказ Тогда
		Предупреждение(СтрокаСообщения);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(
		ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если Не ВладелецФормы = Неопределено Тогда

		// Надо поменять текст про счет-фактуру в форме-владельце
		Если ТипЗнч(ВладелецФормы) = Тип("Форма") тогда
			ВладелецФормы.ЗаполнитьТекстПроСчетФактуру();
		КонецЕсли;

	КонецЕсли;
	
	// Начало ЭлектронныеДокументы
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

КонецПроцедуры 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Свойство("КППКонтрагента") И КППКонтрагента <> ЗначениеВыбора.КППКонтрагента Тогда
			КППКонтрагента = ЗначениеВыбора.КППКонтрагента;
			УстановитьНадписьКППКонтрагента();
			Модифицированность	= Истина;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Начало ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	Иначе // ИмяСобытия = "ОбновитьОСобытияхЭДО"
		ЭлектронныеДокументыКлиентПереопределяемый.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	КонецЕсли;	
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(
		ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры 

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(
		мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельСчетаФактурыВыданныеПокупателямЗаполнитьСчетаФактурыВыданныеПокупателям(Кнопка)
	
	Если СчетаФактурыВыданныеПокупателям.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		СчетаФактурыВыданныеПокупателям.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьСчетаФактурыПоОтчетуКомитенту();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(
		ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(Дата);
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	Если ВерсияПостановления = 1 Тогда		
		Исправление = Ложь;
		НомерИсправления = 0;
		ДатаИсправления = '00010101';
		НомерИсправленияИсходногоДокумента = "";
		ДатаИсправленияИсходногоДокумента  = '00010101';
		УчитыватьИсправлениеИсходногоДокумента = Ложь;
		Если Дата < '20111001' Тогда
			НомерИсходногоДокумента = "";
			ДатаИсходногоДокумента  = '00010101';
			Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ПравилаПостановления735 = УчетНДС.ВерсияПостановленияНДС1137(Дата) >= 3;
	
	ЗаполнитьСписокКодовВидовОпераций();

	УстановитьДоступныеВидыСчетаФактуры();
		
	УстановитьВидимость();

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(
			ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Элемент)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	УправлениеВзаиморасчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент,Организация, СписокВидовДоговоров);

	Если ДокументыОснования.Количество() > 0 Тогда
		КППКонтрагента = УчетНДС.ПолучитьКПППодразделенияКонтрагента(ДокументыОснования[0].ДокументОснование, "Грузоотправитель");
	КонецЕсли;
	УстановитьНадписьКППКонтрагента();
	
КонецПроцедуры

Процедура НадписьКППКонтрагентаНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		ТекстСообщения = "Не заполнено значение реквизита ""Контрагент""!";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ФормаВыбораКПП = ПолучитьОбщуюФорму("ФормаВыбораКПП", ЭтаФорма);
	ФормаВыбораКПП.Контрагент 		= Контрагент;
	ФормаВыбораКПП.КППКонтрагента 	= КППКонтрагента;
	ФормаВыбораКПП.РольКонтрагента	= "Поставщик";
	ФормаВыбораКПП.ОткрытьМодально();	
	
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента, СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры

Процедура ДоговорКонтрагентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если НЕ МожноИспользоватьДоговорКонтрагента(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидСчетаФактурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущийВидСчетаФактуры = ВидСчетаФактуры;

КонецПроцедуры

Процедура ВидСчетаФактурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ МожноИспользоватьДоговорКонтрагента(ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВидСчетаФактурыПриИзменении(Элемент)
	
	Если мТекущийВидСчетаФактуры = ВидСчетаФактуры Тогда
		Возврат;
	КонецЕсли;
		
	СписокТипов = ПолучитьСписокТиповПоВидуСчетаФактуры(ВидСчетаФактуры, Исправление);
		
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
		И ДокументыОснования.Количество() > 0 Тогда
		
		Если ДокументыОснования.Количество() > 1 Тогда
			
			ТекстВопроса = "Несколько документов-оснований не может быть указано для счета-фактуры на выданный аванс. 
				|Для продолжения требуется очистить все документы-основания, кроме первого. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ВидСчетаФактуры = мТекущийВидСчетаФактуры;
				Возврат;
			Иначе
				
				Если СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено 
					И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
					ТекстВопроса = "Выбранный документ-основание не соответствует виду счета-фактуры. 
						|Для продолжения требуется очистить документ-основание. Продолжить?";
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						ВидСчетаФактуры = мТекущийВидСчетаФактуры;
						Возврат;
					Иначе	
						ДокументыОснования.Очистить();
						ДокументыОснования.Добавить();
					КонецЕсли;	
				Иначе
					ДокументОснованиеПервый = ДокументыОснования[0].ДокументОснование;
					ДокументыОснования.Очистить();
					ДокументыОснования.Добавить();
					ДокументыОснования[0].ДокументОснование = ДокументОснованиеПервый;				
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено 
				И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
				ТекстВопроса = "Выбранный документ-основание не соответствует виду счета-фактуры. 
					|Для продолжения требуется очистить документ-основание. Продолжить?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					ВидСчетаФактуры = мТекущийВидСчетаФактуры;
					Возврат;
				Иначе	
					ДокументыОснования.Очистить();
					ДокументыОснования.Добавить();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
		
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс
		ИЛИ (ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		И НЕ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный) Тогда
		
		Если Авансы.Количество() = 0 Тогда
			Авансы.Добавить();
			ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ДокументыОснования[0].ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Авансы.Очистить();
			СуммаДокумента = 0;
		КонецЕсли;
		
		Если СписокТипов.Найти(ТипЗнч(ДокументыОснования[0].ДокументОснование)) = Неопределено
			И ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
			ТекстВопроса = "Выбранный документ-основание не соответствует виду счета-фактуры. 
			|Для продолжения требуется очистить документ-основание. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				ВидСчетаФактуры = мТекущийВидСчетаФактуры;
				Возврат;
			Иначе	
			    ДокументыОснования.Очистить();
				ДокументыОснования.Добавить();
			КонецЕсли;	
		КонецЕсли;	
		
		ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ДокументыОснования[0];
				
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		НомерИсходногоДокумента = "";
		ДатаИсходногоДокумента = '00010101';
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		Если ТипЗнч(ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			Авансы.Очистить();
		КонецЕсли;	
	КонецЕсли;
	
	мТекущийВидСчетаФактуры = ВидСчетаФактуры;
	
	УстановитьКодВидаОперации();
	
	УстановитьВидимость();	
	
КонецПроцедуры

Процедура ИсправлениеПриИзменении(Элемент)
	
	Если НЕ Исправление Тогда
		НомерИсправления = "";
		ДатаИсправления = '00010101';
	Иначе
		Если НЕ МожноИспользоватьДоговорКонтрагента(ДоговорКонтрагента) Тогда
			Исправление = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьКодВидаОперации();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
		И (ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный ИЛИ Исправление) Тогда 
			
		Если ВыбранноеЗначение.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено
			И НЕ МожноИспользоватьДоговорКонтрагента(ВыбранноеЗначение.ДоговорКонтрагента) Тогда			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		
		СтараяОрганизация = Организация;
		ОпределениеПараметровСчетаФактуры();
		Если Организация <> СтараяОрганизация Тогда
			Номер = "";
		КонецЕсли;
		
	Иначе	
		
		СуммаДокумента = 0;
		Авансы.Очистить();
				
		ЗаполнитьСчетФактуруНаАванс();
		
		Если Авансы.Количество() = 0 Тогда
			Авансы.Добавить();
		КонецЕсли;
		ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		
	КонецЕсли;
	
	Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		Если ЭтоКомиссияПоПродаже() Тогда
			Если СчетаФактурыВыданныеПокупателям.Количество() = 0 Тогда
				СчетаФактурыВыданныеПокупателям.Добавить();
			КонецЕсли;
			ЭлементыФормы.СчетаФактурыВыданныеПокупателям.ТекущаяСтрока = СчетаФактурыВыданныеПокупателям[0];
		Иначе
			Если Авансы.Количество() = 0 Тогда
				Авансы.Добавить();
			КонецЕсли;
			ЭлементыФормы.Авансы.ТекущаяСтрока = Авансы[0];
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "ДокументыОснования"

Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Отказ = ДокументыОснования.Количество() = 1;
	
КонецПроцедуры

Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущаяСтрока.ДокументОснование = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДокументыОснованияДокументОснованиеПриИзменении(Элемент)
	
	// надо проверить, а не выбран ли уже в качестве документа основания этот документ
	ТекЗначение = Элемент.Значение;
	
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
	    Возврат;
	КонецЕсли; 
	
	УжеВыбран = Ложь;
	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		Если (СтрДокОснования.ДокументОснование = ТекЗначение)
		   И (СтрДокОснования.НомерСтроки <> ЭлементыФормы.ДокументыОснования.ТекущаяСтрока.НомерСтроки) Тогда
			УжеВыбран = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеВыбран Тогда
		Сообщить("Данный документ уже выбран в качестве документа-основания. Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
	КонецЕсли;
	
	ОпределениеПараметровСчетаФактуры();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПередУдалением(Элемент, Отказ)
	
	Отказ = ДокументыОснования.Количество() = 1;
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		Элемент.ТекущаяСтрока.ДокументОснование = Неопределено;
		Элемент.ТекущаяСтрока.НомерИсходногоДокумента 	= "";
		Элемент.ТекущаяСтрока.ДатаИсходногоДокумента 	= '00010101';
		Элемент.ТекущаяСтрока.УчитыватьИсправлениеИсходногоДокумента 	= Ложь;
		Элемент.ТекущаяСтрока.НомерИсправленияИсходногоДокумента 		= 0;
		Элемент.ТекущаяСтрока.ДатаИсправленияИсходногоДокумента 		= '00010101';
		Элемент.ТекущаяСтрока.СуммаУвеличение 		= 0;
		Элемент.ТекущаяСтрока.СуммаУменьшение 		= 0;
		Элемент.ТекущаяСтрока.СуммаНДСУвеличение 	= 0;
		Элемент.ТекущаяСтрока.СуммаНДСУменьшение 	= 0
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УчитыватьИсправление = ДанныеСтроки.УчитыватьИсправлениеИсходногоДокумента;
	ОформлениеСтроки.Ячейки.НомерИсправленияИсходногоДокумента.ТолькоПросмотр = НЕ УчитыватьИсправление;
	ОформлениеСтроки.Ячейки.ДатаИсправленияИсходногоДокумента.ТолькоПросмотр  = НЕ УчитыватьИсправление;
	ОформлениеСтроки.Ячейки.НомерИсправленияИсходногоДокумента.ОтметкаНезаполненного 
		= УчитыватьИсправление И НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерИсправленияИсходногоДокумента);
	ОформлениеСтроки.Ячейки.ДатаИсправленияИсходногоДокумента.ОтметкаНезаполненного
		= УчитыватьИсправление И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаИсправленияИсходногоДокумента);
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.ДокументыОснования.ТекущиеДанные;
	Если НЕ ТекущиеДанные.УчитыватьИсправлениеИсходногоДокумента Тогда
		ТекущиеДанные.НомерИсправленияИсходногоДокумента = "";
		ТекущиеДанные.ДатаИсправленияИсходногоДокумента  = '00010101';
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаДокументОснованиеПриИзменении(Элемент)
	
	ТекЗначение = Элемент.Значение;
	Если Не ЗначениеЗаполнено(ТекЗначение) Тогда
	    Возврат;
	КонецЕсли; 
	
	УжеВыбран = Ложь;
	Для Каждого СтрДокОснования Из ДокументыОснования Цикл
		Если (СтрДокОснования.ДокументОснование = ТекЗначение)
		   И (СтрДокОснования.НомерСтроки <> ЭлементыФормы.ДокументыОснованияКорректировка.ТекущаяСтрока.НомерСтроки) Тогда
			УжеВыбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если УжеВыбран Тогда
		Сообщить("Данный документ уже выбран в качестве документа-основания! Повторный выбор не допускается.");
		Элемент.Значение = Неопределено;
	Иначе
		ОпределениеПараметровСчетаФактуры(Истина);
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьКодВидаОперации();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаПослеУдаления(Элемент)
	
	ОпределениеПараметровСчетаФактуры(Истина);
	УстановитьКодВидаОперации();

КонецПроцедуры

Процедура ДокументыОснованияКорректировкаДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораДокументаОснования(Элемент, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаСуммаУвеличениеПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаСуммаНДСУвеличениеПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаСуммаУменьшениеПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура ДокументыОснованияКорректировкаСуммаНДСУменьшениеПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Авансы"

Процедура АвансыПередУдалением(Элемент, Отказ)
	
	Отказ = Авансы.Количество() = 1;
	
КонецПроцедуры

Процедура АвансыПослеУдаления(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры
 
Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
	
КонецПроцедуры

Процедура АвансыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТекущиеДанные.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(
		ТекущиеДанные.Сумма, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура КодВидаОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперации);
	ВыбранныйКод = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущийКод);
	Если ВыбранныйКод <> Неопределено Тогда
		КодВидаОперации = ВыбранныйКод.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура КодВидаОперацииНаУменьшениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущийКод = Элемент.СписокВыбора.НайтиПоЗначению(КодВидаОперацииНаУменьшение);
	ВыбранныйКод = ВыбратьИзСписка(Элемент.СписокВыбора, Элемент, ТекущийКод);
	Если ВыбранныйКод <> Неопределено Тогда
		КодВидаОперацииНаУменьшение = ВыбранныйКод.Значение;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ СчетаФактурыВыданныеПокупателям

Процедура СчетаФактурыВыданныеПокупателямСуммаПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура СчетаФактурыВыданныеПокупателямНДСПриИзменении(Элемент)
	
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

Процедура СчетаФактурыВыданныеПокупателямПередУдалением(Элемент, Отказ)

	Если СчетаФактурыВыданныеПокупателям.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура СчетаФактурыВыданныеПокупателямПослеУдаления(Элемент)

	РассчитатьСуммуДокумента();

КонецПроцедуры

Процедура СчетаФактурыВыданныеПокупателямСчетФактураПриИзменении(Элемент)

	ДанныеСтроки = ЭлементыФормы.СчетаФактурыВыданныеПокупателям.ТекущиеДанные;
	СФВыданныйПокупателю = ДанныеСтроки.СчетФактура;
	Если ЗначениеЗаполнено(СФВыданныйПокупателю) Тогда
		Если Дата >= '20150101' Тогда
			СтруктураПолученияРеквизитовСФ = Новый Структура("Покупатель,Сумма,НДС,ДокументОснование","Контрагент","СуммаДокументаКомиссия","СуммаНДСДокументаКомиссия");
		Иначе
			СтруктураПолученияРеквизитовСФ = Новый Структура("Покупатель,Сумма,НДС,ДокументОснование","Контрагент","СуммаДокумента","СуммаНДСДокумента");
		КонецЕсли;
		СтруктураРеквизитовСФ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СФВыданныйПокупателю,СтруктураПолученияРеквизитовСФ);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки,СтруктураРеквизитовСФ);
		Если ТипЗнч(СФВыданныйПокупателю) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ДанныеСтроки.Субкомиссионер =  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураРеквизитовСФ.ДокументОснование, "Контрагент");
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();

КонецПроцедуры

Процедура СчетаФактурыВыданныеПокупателямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если СчетаФактурыВыданныеПокупателям.Количество() > 1 Тогда
		КодВидаОперации = "28";
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с электронными документами

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыПерезаполнитьДаннымиИзЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ТекстСостоянияЭДНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ЭлектронныеДокументыКлиентПереопределяемый.Подключаемый_ОбработчикОжиданияЭДО(ЭтаФорма);
	
КонецПроцедуры
