////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мТекущаяВалютаВзаиморасчетов;

Перем мТекущаяОрганизация;

// Хранит текущее значение учетной политики розничная торговля облагается ЕНВД
Перем мРозничнаяТорговляОблагаетсяЕНВД;

// Хранит текущее значение склада для контроля учетной политики розничная торговля облагается ЕНВД
Перем мТекущийСклад;

// Переменные для кэширования коллекций колонок табличных полей.
Перем мКолонкиТовары, мКолонкиУслуги;

// Автоотметка СкладОрдера без учета заполненности ТЧ.
Перем мСкладИзШапки;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Флаги наличия реквизитов и табличных частей
Перем мВедениеУчетаЗатратПоПроектам;

Перем мКорректировкаПоступленияДопРасходов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
	                                                 УчетНДС.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураПолученный"));
	
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия перед началом редактирования строки ТЧ.
//
Процедура ПриНачалеРедактированияСтрокиТЧ(Элемент, ИмяТабличнойЧасти, НоваяСтрока)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ЕстьВДокументеПоступления = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
		И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
		
	КонецЕсли;
	
	Если КорректироватьБУиНУ Тогда
		
		Если СтрокаТабличнойЧасти.Номенклатура = Неопределено Тогда
			СтрокаТабличнойЧасти.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
		СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
		
		СтрокаТабличнойЧасти.КоличествоДоИзменения 		= 0;
		СтрокаТабличнойЧасти.ЦенаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения 		= 0;
		СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 		= Перечисления.СтавкиНДС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРедактированияСтрокиТЧ()

// Процедура выполняет проверку соответствия склада в строке табличной части и склада в приходном ордере. В случае
// несоответствия по выбору пользователя склад может быть изменен.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, для которой выполняется проверка
//
Процедура ПриИзмененииПриходногоОрдераВТабличнойЧасти(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти.Склад<>СтрокаТабличнойЧасти.ПриходныйОрдер.Склад Тогда

		ТекстВопроса = "Склад в приходном ордере отличается от склада в текущей строке.
			|Изменить склад в текущей строке?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СтрокаТабличнойЧасти.Склад=СтрокаТабличнойЧасти.ПриходныйОрдер.Склад;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	
	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);
	
	Если ТабличнаяЧасть = Товары Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги", "По услугам предприятия");
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("ПриходЦеныУслуг", "По ценам и услугам контрагента");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокЗапросов;
	
КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена               = Истина;
	ЕстьСерия              = Истина;
	Валюта                 = ВалютаДокумента;
	СпособЗаполненияЦен    = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	ПодбиратьУслуги        = Ложь;
	СкрыватьХарактеристику = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		Команда                = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти      = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия              = Ложь;
		ИмяТабличнойЧасти      = "Услуги";
		ПодбиратьУслуги        = Истина;
		СкрыватьХарактеристику = Истина;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"          , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                 , СкладОрдер);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"            , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"    , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"           , Организация);
	СтруктураПараметровПодбора.Вставить("Сделка"                , Сделка);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"   , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"              , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"             , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"       , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"       , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику", СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"             , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если мКорректировкаПоступленияДопРасходов Тогда
		// В этом случае изменять количество не следует
		Количество = 0;
	КонецЕсли;
	
	ЕстьСкладВТабличнойЧасти = мУказаниеСкладовВТЧ;
	
	Если ТабличнаяЧасть = Услуги Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;	 
							 
	Если ТабличнаяЧасть = Товары И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И НЕ Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти
		И ТабличнаяЧасть <> Услуги
		И ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
		И ЗначениеЗаполнено(СкладОрдер)
	Тогда
		СтруктураОтбора.Вставить("Склад", СкладОрдер);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
				И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
			Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
				И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
			Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		КонецЕсли;
		
	Иначе
		
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
															СпособЗаполненияЦен,
															ТипЦен.ЦенаВключаетНДС,
															УчитыватьНДС,
															СуммаВключаетНДС,
															УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			
			СтрокаТабличнойЧасти.Количество = Количество;
			
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
															СпособЗаполненияЦен,
															ТипЦен.ЦенаВключаетНДС,
															УчитыватьНДС,
															СуммаВключаетНДС,
															УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
			
		КонецЕсли;
		
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть <> Услуги Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	ТабличнаяЧастьИмя = "Товары";
	// Установим текущую строку
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	// Установим текущую колонку
	Если ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"].Видимость Тогда
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	Иначе
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Сумма"];
	КонецЕсли;
	
	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
												ТабличнаяЧасть,
												СтрокаТабличнойЧасти,
												мПараметрыСвязиСтрокТЧ,
												ТабличнаяЧастьИмя,
												ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПодбора()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		РозничнаяТорговляОблагаетсяЕНВД = ОбщегоНазначения.УчетнаяПолитикаНалоговыйУчет("РозничнаяТорговляОблагаетсяЕНВД", Организация, Дата);
		Если ЗначениеЗаполнено(РозничнаяТорговляОблагаетсяЕНВД) Тогда
			мРозничнаяТорговляОблагаетсяЕНВД = РозничнаяТорговляОблагаетсяЕНВД;
		Иначе
			мРозничнаяТорговляОблагаетсяЕНВД = Ложь;
		КонецЕсли;

		Если ЗначениеЗаполнено(ВидПоступления) Тогда
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				мТекущийСклад = СкладОрдер;
			Иначе
				мТекущийСклад = СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			мТекущийСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
		
		ЗаполнениеДокументов.ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ЭтотОбъект,
													мВалютаРегламентированногоУчета,
													СпособЗаполненияЦен,
													"Покупка",
													РежимВызова,
													"Товары",
													мРозничнаяТорговляОблагаетсяЕНВД,
													мТекущийСклад);
		УстановитьВидимость();
		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления) 
								И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
								И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
								И (НЕ ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	
	СвойстваСклада = ПолучитьСвойстваСкладаВТабличнойЧасти();
	СвойстваЗаказа = ПолучитьСвойстваЗаказаПоставщикуВТабличнойЧасти();
	
	// Установим видимость колонок табличнх частей
	УстановитьСвойствоКолонокТЧ(
		"ПриходныйОрдер",
		"Видимость",
		(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру));
		
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС, СуммаНДС, Всего, СуммаНДСДоИзменения, ВсегоДоИзменения",
		"Видимость",
		УчитыватьНДС);
		
	УстановитьСвойствоКолонокТЧ(
		"Подразделение, ОтражатьТоварныйУчет",
		"Видимость",
		КорректироватьБУиНУ И ОтражатьВУправленческомУчете);
	
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"Видимость",
		СвойстваСклада.ВидимостьСклада);
		
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПоставщику",
		"Видимость",
		СвойстваЗаказа.ВидимостьЗаказа);
	УстановитьСвойствоКолонокТЧ(
		"Заказ",
		"Видимость",
		КорректироватьБУиНУ);
		
	УстановитьСвойствоКолонокТЧ(
		"Проект",
		"Видимость",
		КорректироватьБУиНУ И мВедениеУчетаЗатратПоПроектам);
	
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ЦенаДоКорректировки, ВсегоДоКорректировки",
		"Видимость",
		ИсправлениеКорректировки);
		
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДСДоИзменения",
		"Видимость",
		УчитыватьНДС И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		
	УстановитьСвойствоКолонокТЧ(
		"ДокументПартии",
		"Видимость",
		мКорректировкаПоступленияДопРасходов);
		
	Если КорректироватьБУиНУ И мКорректировкаПоступленияДопРасходов Тогда
		
		УстановитьСвойствоКолонокТЧ(
			"Количество, КоличествоДоИзменения, КоличествоДоКорректировки, Цена, ЦенаДоизменения, ЦенаДоКорректировки",
			"Видимость",
			Ложь);
	Иначе
		
		УстановитьСвойствоКолонокТЧ(
			"Количество, КоличествоДоИзменения, Цена, ЦенаДоизменения",
			"Видимость",
			Истина);
			
	КонецЕсли;
	
	// Установим доступность колонок табличных частей
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СтавкаНДСДоИзменения, ЦенаДоИзменения, СодержаниеДоИзменения,
		|КоличествоДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ЦенаДоКорректировки",
		"Доступность",
		НЕ КорректироватьБУиНУ);
		
	// Установим положение колонок табличных частей
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ЦенаДоИзменения, ВсегоДоИзменения",
		"Положение",
		?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
		
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС",
		"Положение",
		?(ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
		
		// Установим АвтоОтметкуНезаполненного колонок табличных частей 
	УстановитьСвойствоКолонокТЧ(
		"Номенклатура, Содержание",
		"АвтоОтметкаНезаполненного",
		КорректироватьБУиНУ);
		
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"АвтоотметкаНеЗаполненного",
		СвойстваСклада.ОбязательноеЗаполнениеСклада);
		
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПоставщику",
		"АвтоотметкаНеЗаполненного",
		СвойстваЗаказа.ОбязательноеЗаполнениеЗаказа);
		
	// Установим видимость ТЧ "Услуги"
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = НЕ (ЭтоКомиссия ИЛИ мКорректировкаПоступленияДопРасходов);
	
	ЭлементыФормы.ВосстановитьНДС.Видимость = ЕстьНДСКВосстановлению();
	
	// Установим видимость счетов
	Если ЭтоКомиссия Тогда
		ВидимостьСчетов = Ложь;
	Иначе
		ВидимостьСчетов = Истина;
	КонецЕсли;
	
	ОписаниеТабличныхЧастей = Новый Структура();
	ОписаниеТабличныхЧастей.Вставить("Товары", мКолонкиТовары);
	ОписаниеТабличныхЧастей.Вставить("Услуги", мКолонкиУслуги);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура выполняет необходимые действия при изменении количества в ТЧ.
//
Процедура ПриИзмененииКоличестваТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если КорректироватьБУиНУ И НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита) Тогда // изменен реквизит Количество
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	Если ЭлементыФормы[ИмяТабличнойЧасти].Колонки.Найти("ОтражатьТоварныйУчет") <> Неопределено Тогда
		СтрокаТабличнойЧасти.ОтражатьТоварныйУчет = Истина;
	КонецЕсли;
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита);
	
КонецПроцедуры // ПриИзмененииКоличестваТЧ()

// Процедура выполняет необходимые действия при изменении цены в ТЧ.
//
Процедура ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] =
		СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] * СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита];
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] =
		УчетНДС.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииЦеныТЧ()

// Процедура выполняет необходимые действия при изменении ставки НДС в ТЧ.
//
Процедура ПриИзмененииСтавкиНДСТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита) Тогда // изменет реквизит СтавкаНДС
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения =
			УчетНДС.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоИзменения,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки =
			УчетНДС.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоКорректировки,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтавкиНДСТЧ()

// Процедура выполняет необходимые действия при изменении суммы в ТЧ.
//
Процедура ПриИзмененииСуммыТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] =
		?(СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита] = 0,
			0,
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] /
			СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита]);
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		УчетНДС.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииСуммыТЧ()

// Функция возвращает поле строки ТЧ, содержащее ставку НДС
//
Функция ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	Возврат
		?(ЗначениеЗаполнено(СуффиксИмениРеквизита)
			И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
				СтрокаТабличнойЧасти.СтавкаНДСДоИзменения,
				СтрокаТабличнойЧасти.СтавкаНДС);
	
КонецФункции

// Процедура выполняет действия, связанные с изменением организации
//
Процедура ПриИзмененииОрганизации()
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ПриИзмененииОблагаетсяЕНВД("Организация");
	
	мТекущаяОрганизация = Организация;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура устанавливает свойство ячеек оформления строки табличного поля
//
Процедура УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки, ИменаЯчеек, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаЯчеек);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если ОформлениеСтроки.Ячейки.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает свойство колонок табличного поля
// 
Процедура УстановитьСвойствоКолонокТЧ(ИменаКолонок, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаКолонок);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если мКолонкиТовары.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиТовары[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
		Если мКолонкиУслуги.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиУслуги[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет необходимые действия при получении данных строк ТЧ.
//
Процедура ПриПолученииДанныхСтрокиТЧ(Элемент, ИмяТабличнойЧасти, ОформленияСтрок)
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		мКолонки = мКолонкиТовары;
	Иначе
		мКолонки = мКолонкиУслуги;
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если мКолонки.ВсегоДоКорректировки.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоКорректировки);
			ОформлениеСтроки.Ячейки.ВсегоДоКорректировки.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		Если мКолонки.ВсегоДоИзменения.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоИзменения);
			ОформлениеСтроки.Ячейки.ВсегоДоИзменения.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		Если мКолонки.Всего.Видимость Тогда
			ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);
			ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		
		ЭтоНоменклатура = (ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура"));
		
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"Номенклатура, Склад, Заказ, ЗаказПоставщику, ПриходныйОрдер,
			|НоменклатурнаяГруппа, Подразделение, СтатьяЗатрат, ХарактерЗатрат, Проект,
			|Заказ, ЗаказПоставщику, ДокументПартии",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеПоступления И КорректироватьБУиНУ);
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"ХарактеристикаНоменклатуры,СерияНоменклатуры,Единица,ЕдиницаМест,КоличествоМест",
			"ТолькоПросмотр",
			(ДанныеСтроки.ЕстьВДокументеПоступления И КорректироватьБУиНУ) ИЛИ (НЕ ЭтоНоменклатура));
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"СтавкаНДС",
			"ТолькоПросмотр",
			(ДанныеСтроки.ЕстьВДокументеПоступления И КорректироватьБУиНУ) 
				И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"Количество",
			"ОтметкаНезаполненного",
			(НЕ ДанныеСтроки.ЕстьВДокументеПоступления) И (НЕ ЗначениеЗаполнено(ДанныеСтроки.Количество)));
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"Сумма",
			"ОтметкаНезаполненного",
			(НЕ ДанныеСтроки.ЕстьВДокументеПоступления) И (НЕ ЗначениеЗаполнено(ДанныеСтроки.Сумма)));
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"Цена",
			"ОтметкаНезаполненного",
			(НЕ ДанныеСтроки.ЕстьВДокументеПоступления) И (НЕ ЗначениеЗаполнено(ДанныеСтроки.Цена)));
			
			
		Если ИмяТабличнойЧасти = "Товары" Тогда
			
			Если ЭтоНоменклатура Тогда
				РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
				РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
				Если мКолонкиТовары.НомерГТД.Видимость Тогда
					ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
				КонецЕсли;
				Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
					ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
			УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
				"Единица,Коэффициент",
				"ОтметкаНезаполненного",
				ЭтоНоменклатура И НЕ ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаИзмерения));
				
			УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
				"Количество, Цена",
				"ТолькоПросмотр",
				КорректироватьБУиНУ И мКорректировкаПоступленияДопРасходов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриПолученииДанныхСтрокиТЧ()

// Процедура заполняет текст про исправляемый документ
//
Процедура ЗаполнитьТекстИсправляемыйДокументПоступления()
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Заголовок = Строка(ИсправляемыйДокументПоступления)
	Иначе
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Заголовок = "Не указан";
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьНДСКВосстановлению()
	
	КорректировочныйСчетФактура = ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	ИсправлениеКорректировочногоСчетаФактуры = (ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки)
		И ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления");
		
	Если НЕ КорректировочныйСчетФактура И НЕ ИсправлениеКорректировочногоСчетаФактуры Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;         	
	
КонецФункции	

// Процедура заполняет список выбора для поля "Отражать корректировку"
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьСписокВыбораОтражатьКорректировку()
	
	ЭлементыФормы.Корректировать.СписокВыбора.Очистить();
	Если ДоступнаКорректировкаБУиНУ() Тогда
		ЭлементыФормы.Корректировать.СписокВыбора.Добавить(1, "Во всех разделах учета");
	КонецЕсли;
	
	ЭлементыФормы.Корректировать.СписокВыбора.Добавить(0, "Только в учете НДС");
	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ЭлементыФормы.Корректировать.СписокВыбора.Добавить(2, "Только в печатной форме");
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение "Корректировать" в зависимости от значений опций документа
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗначениеКорректировать()
	
	Корректировать = ?(КорректироватьБУиНУ,1,?(КорректироватьНДС,0,2));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	// Начало ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование);
		
		Если ЗначениеЗаполнено(ДокументПоступления) Тогда
			ДокументПоступленияМетаданные = ДокументПоступления.Метаданные();
			ОтражатьВУправленческомУчете = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВУправленческомУчете", ДокументПоступленияМетаданные), ДокументПоступления.ОтражатьВУправленческомУчете, ОтражатьВУправленческомУчете);
			ОтражатьВБухгалтерскомУчете  = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВБухгалтерскомУчете", ДокументПоступленияМетаданные), ДокументПоступления.ОтражатьВБухгалтерскомУчете, ОтражатьВБухгалтерскомУчете);
			ОтражатьВНалоговомУчете      = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", ДокументПоступленияМетаданные), ДокументПоступления.ОтражатьВНалоговомУчете, ОтражатьВНалоговомУчете);
		КонецЕсли;
		
	КонецЕсли;
	
	мДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	мКорректировкаПоступленияДопРасходов = (ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
	СтруктураКолонок = Новый Структура();
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
		ВидОперации.Метаданные().ЗначенияПеречисления,
		Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
		
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();
	
	// Заполним гиперссылку на исправляемый документ
	ЗаполнитьТекстИсправляемыйДокументПоступления();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяОрганизация          = Организация; 
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ПриИзмененииОблагаетсяЕНВД();
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	УстановитьЗначениеКорректировать();
	ЗаполнитьСписокВыбораОтражатьКорректировку();	

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);
	
	//МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Начало ЭлектронныеДокументы
	ЭлектронныеДокументыКлиент.ПриОткрытии(ЭтаФорма);
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

	ИнтеграцияЕГАИСПереопределяемый.ПроверитьСостояниеКорректируемогоДокумента(ЭтотОбъект, "ДокументПоступления");
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "   ( " + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                           КурсВзаиморасчетов,
	                                                                                           КратностьВзаиморасчетов,
	                                                                                           мВалютаРегламентированногоУчета) + " )";
	
	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	
	//ОбновитьПодвал();

	//// Подсчитаем количество строк в табличных частях.
	//СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	//СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	//СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Начало ЭлектронныеДокументы
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПослеЗаписи()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ВыполненоСопоставлениеНоменклатуры" И Параметр = Ссылка Тогда
		ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Параметр, , Истина);
	Иначе // ИмяСобытия = "ОбновитьОСобытияхЭДО"
		ЭлектронныеДокументыКлиентПереопределяемый.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	КонецЕсли;	
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",                СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры",  СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры",           СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество",                  СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",            СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект",              ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти",           "Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти",   СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти",        СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ",       мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
	
	ПредыдущийВидОперации = ВидОперации; //Сохраним пред. вид операции для его сравнения с новым
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации[Кнопка.Имя];
	КонецЕсли;
	
	// Если операция не поменялась то выходим
	Если ПредыдущийВидОперации = ВидОперации Тогда 
		Возврат;
	КонецЕсли;
	
	КорректировкаКорректировочногоСчетаФактуры = Ложь;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		Если КорректировкаКорректировочногоСчетаФактуры Тогда
			ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
		Иначе
			ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		КонецЕсли;	
	Иначе
		ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		Для Каждого СтрокаТЧ из Товары Цикл
			Если СтрокаТЧ.ЕстьВДокументеПоступления И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ из Услуги Цикл
			
			Если СтрокаТЧ.ЕстьВДокументеПоступления И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьСписокВыбораОтражатьКорректировку();
	Если ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Корректировать = 2 Тогда
		КорректироватьНДС = Истина;
		УстановитьЗначениеКорректировать();
	КонецЕсли;	
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументПоступления)
		И ЗначениеЗаполнено(Организация)
		И Организация <> ДокументПоступления.Организация Тогда
		
		Если Вопрос("Организация не соответствует организации основания. Основание будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Организация = мТекущаяОрганизация;
			Возврат;
		КонецЕсли;
		
		ДокументПоступления = Неопределено;
		
	КонецЕсли;
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ДокументПоступления.
//
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("ДокументОснование", ДокументПоступления);
	СтруктураЗаполнения.Вставить("ПерезаполнятьДокумент", Истина);
	СтруктураЗаполнения.Вставить("ИнтерактивноеЗаполнение", Истина);
	Заполнить(СтруктураЗаполнения);
	
	ЗаполнитьСписокВыбораОтражатьКорректировку();
	КорректироватьНДС = Истина;
	КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
	УстановитьЗначениеКорректировать();	

	мКорректировкаПоступленияДопРасходов = (ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
	ЗаполнитьТекстИсправляемыйДокументПоступления();
	УстановитьВидимость();
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если Организация <> мТекущаяОрганизация Тогда
		ПриИзмененииОрганизации();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДокументПоступления.
//
Процедура ДокументПоступленияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Организация", Организация);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "");
	
КонецПроцедуры

Процедура ИсправляемыйДокументПоступленияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
		ИсправляемыйДокументПоступления.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");
	
КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ПриИзменении" поля выбора Корректировать
Процедура КорректироватьПриИзменении(Элемент)
	
	КорректироватьБУиНУПредыдущееЗначение = КорректироватьБУиНУ;
	КорректироватьБУиНУ = (Корректировать = 1);
	КорректироватьНДС = (Корректировать <> 2);
	
	Если КорректироватьБУиНУ И Не КорректироватьБУиНУПредыдущееЗначение Тогда
		Ответ = Вопрос("Для установки этого режима необходимо перезаполнить документ по основанию.
			|Если отказаться от перезаполнения будет установлен режим ""Только в учете НДС"". Перезаполнить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСвойстваШапки();
			ЗаполнитьПоДокументу();
		Иначе
			КорректироватьБУиНУ = Ложь;
			УстановитьЗначениеКорректировать();
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриПолученииДанных" табличной части "Товары".
//
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Товары", ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Товары", НоваяСтрока);
	
КонецПроцедуры // ТоварыПриНачалеРедактирования

// Процедура - обработчик события "ПередУдалением" табличной части "Товары"
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеПоступления И КорректироватьБУиНУ Тогда
		Отказ = Истина;
		Сообщить("Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	РаботаСДиалогами.НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивОтборов = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Организация", Организация));
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов, "Товары", ДопПараметры);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" поля табличной части "Товары"
//
Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры //ТоварыПослеУдаления()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, "ЗаказПоставщику", СтруктураОтбора);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" табличной части "Товары"
//
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементыФормы.Товары.ТекущаяСтрока.СерияНоменклатуры = ВыбранноеЗначение;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Приходного ордера
//
Процедура ТоварыПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Приходного ордера
//
Процедура ТоварыПриходныйОрдерПриИзменении(Элемент)
	
	//если склад из шапки - значит его не видно в табличной части.
	//	ничего не надо спрашивать
	Если мСкладИзШапки Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти=ЭлементыФормы.Товары.ТекущиеДанные;
	
	ПриИзмененииПриходногоОрдераВТабличнойЧасти(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЗаказПоставщику
//
Процедура ТоварыЗаказПоставщикуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоКорректировки
//
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоИзменения
//
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоКорректировки
//
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоИзменения
//
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоКорректировки
//
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоИзменения
//
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСДоИзменения
//
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДокументПартии
//
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриПолученииДанных" поля табличной части "Услуги"
//
Процедура УслугиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Услуги", ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "Услуги".
//
Процедура УслугиЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивОтборов = Новый Массив;
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Организация", Организация));
	КонецЕсли;
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов, "Услуги");
	
КонецПроцедуры // УслугиЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЕсли;
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПередУдалением" табличной части "Услуги".
//
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеПоступления И КорректироватьБУиНУ Тогда
		Отказ = Истина;
		Сообщить("Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить( "Организация", Организация);
	СтруктураОтбора.Вставить( "Контрагент",  Контрагент);
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, "ЗаказПоставщику", СтруктураОтбора);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Услуги", НоваяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоКорректировки
//
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоИзменения
//
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоКорректировки
//
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоИзменения
//
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоКорректировки
//
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоИзменения
//
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСДоИзменения
//
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КоличествоДоИзменения = ДанныеСтроки.Количество Тогда
		ОформлениеСтроки.Ячейки.ОтражатьТоварныйУчет.Текст = "";
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЭлементыФормы.Товары.ТекущаяКолонка.Имя = "ОтражатьТоварныйУчет" Тогда
			Если ТекущиеДанные.КоличествоДоИзменения = ТекущиеДанные.Количество Тогда
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Истина;
			Иначе
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УслугиПриАктивизацииЯчейки(Элемент)
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЭлементыФормы.Услуги.ТекущаяКолонка.Имя = "ОтражатьТоварныйУчет" Тогда
			Если ТекущиеДанные.КоличествоДоИзменения = ТекущиеДанные.Количество Тогда
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Истина;
			Иначе
				Элемент.Колонки.ОтражатьТоварныйУчет.ТолькоПросмотр = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.КоличествоДоИзменения = ДанныеСтроки.Количество Тогда
		ОформлениеСтроки.Ячейки.ОтражатьТоварныйУчет.Текст = "";
	КонецЕсли;
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с электронными документами

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыПерезаполнитьДаннымиИзЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ТекстСостоянияЭДНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ЭлектронныеДокументыКлиентПереопределяемый.Подключаемый_ОбработчикОжиданияЭДО(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги = ЭлементыФормы.Услуги.Колонки;
мСкладИзШапки  = НЕ мУказаниеСкладовВТЧ;
мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаПоПроектам();
