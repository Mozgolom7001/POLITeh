////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мОтражатьВРегламентированномУчете;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем СтараяВалюта;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолга,ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолгаУменьшение,ЭлементыФормы.КоманднаяПанельСуммыДолгаУменьшение.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Очищает табличную часть документа при смене контрагента, организации
//
Процедура ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, ОбъектСравнения, ТекстВопроса, СтандартнаяОбработка)
	Если СуммыДолга.Количество() > 0
	   И СуммыДолга[0].ДоговорКонтрагента[ОбъектСравнения] <> ВыбранноеЗначение Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммыДолга.Очистить();
			ВывестиНадписи();
		Иначе  
			//Отказ от выбора
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 		
	КонецЕсли;
КонецПроцедуры

// Открывает для выбора сделки список документов нужного типа в зависимости от вида договора
//
Процедура НачалоВыбораЗначенияСделки(ТабПолеСуммыДолга, Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ДоговорКонтрагента = ТабПолеСуммыДолга.ТекущиеДанные.ДоговорКонтрагента;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ТабПолеСуммыДолга.ТекущаяКолонка = ТабПолеСуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		Возврат;
	КонецЕсли; 

	// Тип документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			ИмяТипаСделки = "ЗаказПокупателя";
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ИмяТипаСделки = "СчетНаОплатуПокупателю";
		Иначе // .ПоДоговоруВЦелом
			ИмяТипаСделки = "ЗаказПокупателя";
		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			ИмяТипаСделки = "ЗаказПоставщику";
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			ИмяТипаСделки = "СчетНаОплатуПоставщика";
		Иначе // .ПоДоговоруВЦелом
			ИмяТипаСделки = "ЗаказПоставщику";
		КонецЕсли;
		
	КонецЕсли;

	ФормаВыбора = Документы[ИмяТипаСделки].ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Установить(ДоговорКонтрагента);
	
	ТекСделка = ТабПолеСуммыДолга.ТекущиеДанные.Сделка;
	Если ЗначениеЗаполнено(ТекСделка) И (ТипЗнч(ТекСделка) = Тип("ДокументСсылка." + ИмяТипаСделки)) Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ТекСделка;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура УстановитьДоступностьСделки(ТабПолеСуммыДолга)
	
	ТекДанные = ТабПолеСуммыДолга.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СделкаДоступна = ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента)
		И (ТекДанные.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ТабПолеСуммыДолга.Колонки.Сделка.ТолькоПросмотр = НЕ СделкаДоступна;

КонецПроцедуры

Процедура УстановитьДоступностьДокументаРасчетов(ТабПолеСуммыДолга)

	ТекДанные = ТабПолеСуммыДолга.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыПоДокументам = ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента)
		И ТекДанные.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	ТабПолеСуммыДолга.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;

КонецПроцедуры

Процедура ПриИзмененииДоговораКонтрагента(ТабПолеСуммыДолга)

	ТекДанные  = ТабПолеСуммыДолга.ТекущиеДанные;
	ТекДоговор = ТекДанные.ДоговорКонтрагента;
	ТекВалюта  = ТекДоговор.ВалютаВзаиморасчетов;
	
	Если ТекВалюта <> ВалютаДокумента Тогда
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета ИЛИ НЕ ТекДоговор.РасчетыВУсловныхЕдиницах Тогда
			Предупреждение("Нужно выбрать договор с валютой " + ВалютаДокумента
			+ ?(ВалютаДокумента <> мВалютаРегламентированногоУчета, "!", "
			|или договор в условных единицах!"));
			ТекДанные.ДоговорКонтрагента = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДоговор) Тогда
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекВалюта, Дата);
		ТекДанные.КурсВзаиморасчетов = СтруктураКурса.Курс;
		ТекДанные.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

	КонецЕсли;

	ТекДанные.Сделка = Неопределено;
	ТекДанные.ДокументРасчетовСКонтрагентом = Неопределено;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов и подписей к ним.
//
Процедура УстановитьВидимость()

	Колонки                = ЭлементыФормы.СуммыДолга.Колонки;
	КолонкиУменьшениеДолга = ЭлементыФормы.СуммыДолгаУменьшение.Колонки;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		ЭлементыФормы.Контрагент.Подсказка                                 = "Контрагент-дебитор";
		ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Дебитор";
		ЭлементыФормы.КонтрагентКредитор.Видимость                         = Истина;
		ЭлементыФормы.КонтрагентКредитор.Подсказка                         = "Контрагент-кредитор";
		ЭлементыФормы.НадписьКонтрагентКредитор.Видимость                  = Истина;
		ЭлементыФормы.НадписьКонтрагентКредитор.Заголовок                  = "Кредитор";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Взаиморасчеты";
		ЭлементыФормы.ДоговорКонтрагента.Видимость                         = Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость                  = Ложь;
		ЭлементыФормы.ПанельСделка.Свертка                                 = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Ложь;
		
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Истина);
		
	Иначе

		ЭлементыФормы.Контрагент.Подсказка                                 = "Контрагент";
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Истина;
			ЭлементыФормы.КонтрагентКредитор.Подсказка                     = "Контрагент, на которого переносится долг";
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Заголовок              = "Получатель";
			ЭлементыФормы.ПанельСделка.Свертка                             = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормы.Сделка.Доступность = ЗначениеЗаполнено(ДоговорКонтрагента) 
				И (НЕ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее)
				И (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
					ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
			ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = ЭлементыФормы.Сделка.Доступность;
			Если НЕ ЭлементыФормы.Сделка.Доступность Тогда
				ЭлементыФормы.Сделка.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
		Иначе
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Ложь;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Ложь;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Ложь;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Ложь;
			ЭлементыФормы.ПанельСделка.Свертка                             = РежимСверткиЭлементаУправления.Верх;
		КонецЕсли;

		ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Контрагент";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Увеличение долга";
		
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Ложь);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.ВидЗадолженности,  Ложь);

	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

		ВалютаДокументаПриИзменении("");
	
	Иначе

		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Сделка");
	СтруктураКолонок.Вставить("КурсВзаиморасчетов");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	СтараяВалюта          = ВалютаДокумента;

	// Установить видимость элементов
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВывестиНадписи();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)

	Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если НЕ ЗначениеЗаполнено(КонтрагентКредитор) Тогда
			Предупреждение("Не выбран контрагент-кредитор! Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		// Заполняется и дебиторская, и кредиторская задолженность
		
		Если СуммыДолга.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			СуммыДолга.Очистить();
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
	Иначе
	
		// Заполняется только кредиторская задолженность
		СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		
		Если СтрокиКредиторскойЗадолженности.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением строки кредиторской задолженности будут очищены. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиКредиторскойЗадолженности Цикл
				СуммыДолга.Удалить(СтрокаТабличнойЧасти);
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
	КонецЕсли; 

КонецПроцедуры // КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам()

Процедура КоманднаяПанельСуммыДолгаУменьшениеЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	// Заполняется только дебиторская задолженность
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	
	Если СтрокиДебиторскойЗадолженности.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением строки дебиторской задолженности будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого СтрокаТабличнойЧасти Из СтрокиДебиторскойЗадолженности Цикл
			СуммыДолга.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();
	
	ВывестиНадписи();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Проверка необходимости пересчета
	ФлагПересчета = Ложь;

	Для каждого СтрокаТаблицы Из СуммыДолга Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора  = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, мТекущаяДатаДокумента);
			СтарыйКурс      = СтруктураВалюты.Курс;
			СтараяКратность = СтруктураВалюты.Кратность;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			НовыйКурс       = СтруктураВалюты.Курс;
			НоваяКратность  = СтруктураВалюты.Кратность;

			Если НЕ (НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность) Тогда
				ФлагПересчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если изменился курс пересчитаем взаиморасчеты
	Если ФлагПересчета Тогда
		ТекстВопроса = "На дату документа у валюты взаиморасчетов был задан другой курс.
		               |Установить курс взаиморасчетов в соответствии с курсом валюты?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТаблицы Из СуммыДолга Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураВалюты                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
					СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
					СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
					ПересчитатьСуммуПоСтроке(СтрокаТаблицы, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Организация", 
						   "При смене организации табличная часть будет очищена. Продолжить?", СтандартнаяОбработка); 
						   
КонецПроцедуры // ОрганизацияОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода контрагента.
//
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
	ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Владелец", 
						   "При смене контрагента табличная часть будет очищена. Продолжить?", СтандартнаяОбработка);
	
КонецПроцедуры // КонтрагентОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	// Перезаполним Юр./Физ. лицо.
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ЮрФизЛицоКонтрагента", МетаданныеДокумента)Тогда
		ЮрФизЛицоКонтрагента = КонтрагентДебитор.ОсновноеЮрФизЛицо;
	КонецЕсли; 

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента-кредитора
//
Процедура КонтрагентКредиторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		// Если заполнена табличная часть, то ее надо очищать при несовпадении владельца с выбранным значением.
		ОчиститьСтрокиТабЧасти(ВыбранноеЗначение, "Владелец", 
		   "При смене контрагента табличная часть будет очищена. Продолжить?", СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента-кредитора.
//
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	Если ДоговорКонтрагента.Владелец <> КонтрагентКредитор Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора для переноса долга
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, 
		КонтрагентКредитор, ДоговорКонтрагента, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Отражать в БУ.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Отражать в НУ.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораКонтрагента(ЭлементыФормы.СуммыДолга);
	УстановитьДоступностьСделки(ЭлементыФормы.СуммыДолга);
	УстановитьДоступностьДокументаРасчетов(ЭлементыФормы.СуммыДолга);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговораКонтрагента(ЭлементыФормы.СуммыДолгаУменьшение);
	УстановитьДоступностьСделки(ЭлементыФормы.СуммыДолгаУменьшение);
	УстановитьДоступностьДокументаРасчетов(ЭлементыФормы.СуммыДолгаУменьшение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораЗначенияСделки(ЭлементыФормы.СуммыДолга, Элемент, СтандартнаяОбработка);

КонецПроцедуры // СуммыДолгаСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаУменьшениеСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	НачалоВыбораЗначенияСделки(ЭлементыФормы.СуммыДолгаУменьшение, Элемент, СтандартнаяОбработка);

КонецПроцедуры // СуммыДолгаУменьшениеСделкаНачалоВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СуммыДолга". Формирует данные в колонке "Валюта" и устанавливает, при необходимости
// автоотметку незаполенного для поля "Сделка
//
Процедура СуммыДолгаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость	Тогда
		ОформлениеСтроки.Ячейки.Валюта.УстановитьТекст(ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	КонецЕсли;

	Если (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
	  ИЛИ ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

	ВывестиНадписи();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;

	Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Контрагент = КонтрагентДебитор;
	Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = КонтрагентКредитор;
		Иначе
			Контрагент = КонтрагентДебитор;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", ВалютаДокумента);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка, СтруктураПараметров);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;

	Контрагент = КонтрагентДебитор;
	
	СтруктураПараметров = Новый Структура;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", ВалютаДокумента);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка, СтруктураПараметров);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ВывестиНадписи() 
	
	ТабСумм         = СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТабДебиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабДебиторская.Количество() Цикл
		СтрокаТаблицы = ТабДебиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТабДебиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СуммаКред = ТабКредиторская.Итог("СуммаРегл");
		СуммаДеб  = ТабДебиторская.Итог("СуммаРегл");
	Иначе
		СуммаКред = ТабКредиторская.Итог("Сумма");
		СуммаДеб  = ТабДебиторская.Итог("Сумма");
	КонецЕсли;
	Разница = СуммаДеб - СуммаКред;
	
	ЭлементыФормы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	ЭлементыФормы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
							
	Если Разница = 0 И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ЭлементыФормы.НадписьВзаимозачет.Заголовок = "ВЗАИМОЗАЧЕТ";
	Иначе
		ЭлементыФормы.НадписьВзаимозачет.Заголовок
							= "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" строки табличного поля
// "СуммыДолга"
//
Процедура СуммыДолгаПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСделки(ЭлементыФормы.СуммыДолга);
	УстановитьДоступностьДокументаРасчетов(ЭлементыФормы.СуммыДолга);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" строки табличного поля
// "СуммыДолгаУменьшение"
//
Процедура СуммыДолгаУменьшениеПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСделки(ЭлементыФормы.СуммыДолгаУменьшение);
	УстановитьДоступностьДокументаРасчетов(ЭлементыФормы.СуммыДолгаУменьшение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолга"
//
Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолгаУменьшение"
//
Процедура СуммыДолгаУменьшениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура СуммыДолгаКурсВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);
КонецПроцедуры

Процедура СуммыДолгаСуммаПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД, Ложь);
КонецПроцедуры

Процедура СуммыДолгаСуммаРеглПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьКурсПоСтроке(ТД);
КонецПроцедуры

Процедура СуммыДолгаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	СтрокаВидаДвижения = ?(ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, "Приход", "Расход");
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ТекДанные.ДоговорКонтрагента,
														ТекДанные.Сделка, СтандартнаяОбработка, СтрокаВидаДвижения);

КонецПроцедуры

Процедура СуммыДолгаКратностьВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеСуммаПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД, Ложь);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеКурсВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеКратностьВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	// Задолженность всегда дебиторская - вид движения "Расход"
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ТекДанные.ДоговорКонтрагента,
														ТекДанные.Сделка, СтандартнаяОбработка, "Расход");

КонецПроцедуры

Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных,ПересчетВалютнойСуммы = Ложь)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если ПересчетВалютнойСуммы Тогда
		СтрокаДанных.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаРегл,
				             мВалютаРегламентированногоУчета, ВалютаДоговора,
					         1, СтрокаДанных.КурсВзаиморасчетов,
					         1,СтрокаДанных.КратностьВзаиморасчетов);
	Иначе
		СтрокаДанных.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					             ВалютаДоговора,мВалютаРегламентированногоУчета,
					             СтрокаДанных.КурсВзаиморасчетов, 1, 
					             СтрокаДанных.КратностьВзаиморасчетов, 1);
	КонецЕсли;  

КонецПроцедуры

Процедура ПересчитатьКурсПоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.КурсВзаиморасчетов = ?(СтрокаДанных.Сумма = 0, СтрокаДанных.КурсВзаиморасчетов, СтрокаДанных.СуммаРегл / СтрокаДанных.Сумма * СтрокаДанных.КратностьВзаиморасчетов);

КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ВалютаНеИзменилась = ВалютаДокумента = СтараяВалюта;
	Если ВалютаНеИзменилась Тогда
		
		СтруктураВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураВалюта.Курс;
		КратностьДокумента = СтруктураВалюта.Кратность;
		Возврат;
		
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	ЭтоВалютныйДокумент = ВалютаДокумента <> мВалютаРегламентированногоУчета;
	Для каждого СтрокаДолга Из СуммыДолга Цикл
	
		Если СтрокаДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаДокумента 
			И (ЭтоВалютныйДокумент ИЛИ НЕ СтрокаДолга.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) Тогда
			СтрокиКУдалению.Добавить(СтрокаДолга);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
	
		ТекстВопроса = "Строки с несоответствующей валютой взаиморасчетов договора 
		               |будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		ОставитьСтаруюВалюту = Ответ <> КодВозвратаДиалога.Да;
		Если ОставитьСтаруюВалюту Тогда
			ВалютаДокумента = СтараяВалюта;
			Возврат;
		КонецЕсли;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			СуммыДолга.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	
	КонецЕсли;
	
	СтруктураВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента      = СтруктураВалюта.Курс;
	КратностьДокумента = СтруктураВалюта.Кратность;
	
	СтараяВалюта = ВалютаДокумента;
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура СуммыДолгаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура СуммыДолгаПослеУдаления(Элемент)
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
		Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтрокаТипа = "ЗаказПокупателя";
		Иначе
			СтрокаТипа = "СчетНаОплатуПокупателю";
		КонецЕсли;
	Иначе
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			СтрокаТипа = "ЗаказПоставщику";
		Иначе
			СтрокаТипа = "СчетНаОплатуПоставщика";
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, СтрокаТипа);

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Если (ЗначениеЗаполнено(Сделка) И ДоговорКонтрагента <> Сделка.ДоговорКонтрагента)
		ИЛИ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее)
		ИЛИ (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
		Тогда
		Сделка = Неопределено;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

