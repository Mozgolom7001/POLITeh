////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит ваВидимлюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиВозвратнаяТара, мКолонкиДокументы, мКолонкиТовары Экспорт;

Перем мФормаСоставНабора, мТекущаяСтрокаНабор;

Перем мСтароеЗначениеСклада Экспорт;

Перем мОтражатьВРегламентированномУчете;
Перем мПоДокументамРасчетов;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

Перем мКартинкаСерийныеНомера, мКартинкаНаборКомплект;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСделки;
Перем мСтароеЗначениеДокЕГАИС Экспорт;

Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении дисконтной карты.
//
Процедура ПриИзмененииДисконтнойКарты()

	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Если ЗначениеЗаполнено(ДисконтнаяКарта.ВладелецКарты)
		   И ДисконтнаяКарта.ВладелецКарты <> Контрагент Тогда
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Ответ = КодВозвратаДиалога.Да;
			Иначе
				Ответ = Вопрос("У выбранной дисконтной карты владелец " + СокрЛП(ДисконтнаяКарта.ВладелецКарты) + "."
				   + Символы.ПС + "Изменить контрагента в документе?", РежимДиалогаВопрос.ДаНет);
			КонецЕсли;

			Если Ответ = КодВозвратаДиалога.Да Тогда
				Контрагент = ДисконтнаяКарта.ВладелецКарты;
				ПриИзмененииКонтрагента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ПриИзмененииДисконтнойКарты()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении контрагента
//
Процедура ПриИзмененииКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
	
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(Неопределено, ДоговорКонтрагента, "ВозвратОтПокупателя");
	Если ЕстьКолонкаЗаказ Тогда
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Товары, "ЗаказПокупателя");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, ВозвратнаяТара, "ЗаказПокупателя");
	КонецЕсли;

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, неопределено, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, Неопределено, мКолонкиДокументы, ЭлементыФормы.Сделка,, "ВозвратОтПокупателя");

	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект = ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	УстановитьРеквизитыУчетаНДС();
	УстановитьДоступностьРеквизитовНДС();
	ЗаполнитьТекстПроСчетФактуру();
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Считывает необходимые для копирования табличной части документа данные из другого документа.
//
// Параметры: 
//  ДокументСсылка - ссылка на документ, чью табличную часть будем копировать, 
//  ТабличнаяЧасть - табличная часть, которую заполняем.
//
// Возвращаемое значение:
//  Выборка из результата запроса.
//
Функция ПолучитьДанныеДляКопирования(ДокументСсылка, ТабличнаяЧасть)

	// Считываем нужную информацию по документу Реализации
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Количество,
	|	Док.ЗаказПокупателя,
	|	Док.Склад,
	|	Док.Цена,
	|	Док.Ссылка.ВалютаДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КурсВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КурсДокумента,
	|	ВЫБОР КОГДА Док.Ссылка.ВалютаДокумента = Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|       Док.Ссылка.КратностьВзаиморасчетов
	|   ИНАЧЕ
	|       1
	|   КОНЕЦ                         КАК КратностьДокумента,";
	Если ТабличнаяЧасть = Товары Тогда
		Запрос.Текст = Запрос.Текст + "
		|	Док.ЕдиницаИзмерения,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.Коэффициент,
		|	Док.КоличествоМест,
		|	Док.Ссылка                         КАК ДокументПартии,
		|	Док.Ссылка.УчитыватьНДС,
		|	Док.Ссылка.СуммаВключаетНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.СтавкаНДС,
		|	Док.Качество,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	Док.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов  КАК ВалютаВзаиморасчетов,
		|	Док.Ссылка.КурсВзаиморасчетов, 
		|	Док.Ссылка.КратностьВзаиморасчетов ";
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	Документ."+ ДокументСсылка.Метаданные().Имя + ?(ТабличнаяЧасть = Товары,".Товары",".ВозвратнаяТара") + " КАК Док
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|УПОРЯДОЧИТЬ ПО 
	|	Док.НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Возврат Выборка;

КонецФункции // ПолучитьДанныеДляКопирования()

// Процедура выполняет копирование табличной части из заданного в форме заказа покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(ТабличнаяЧасть, ВидЗаполнения)
    ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(неопределено, ДоговорКонтрагента,"ВозвратОтПокупателя");

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		ПредставлениеЗаказПокупателя = НРег(Лев(ЭлементыФормы.НадписьСделка.Заголовок, СтрДлина(ЭлементыФормы.НадписьСделка.Заголовок)-1));
	Иначе
		ПредставлениеЗаказПокупателя = Сделка.Метаданные().Представление();
	КонецЕсли;

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли ВидЗаполнения = "Заполнить" И 
		(НЕ ЗначениеЗаполнено(Сделка) 
		  ИЛИ (НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		    И  НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю"))) Тогда
		  
		ТекстПредупреждения = "Не выбран "+ПредставлениеЗаказПокупателя +".
		                      |Заполнение невозможно.";
    ИначеЕсли  ВидЗаполнения = "Добавить" И 
		(НЕ ЗначениеЗаполнено(Сделка) 
		  ИЛИ НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")) Тогда
		  
		ТекстПредупреждения = "Не выбран Заказ покупателя.
		                      |Заполнение невозможно.";

	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя  + " не проведен.
		                      |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 И ВидЗаполнения = "Заполнить" Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоОснованию(Сделка);
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ЗаполнитьВозвратнуюТаруПоОснованию(Сделка);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа РеализацияТоваровУслуг.
//
// Параметры:
//  ТабличнаяЧасть   - табличная часть, которую необходимо заполнить.
//  СпособЗаполнения - строка ("Заполнить" или "Добавить"), определяет способ заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоРеализации(ТабличнаяЧасть, СпособЗаполнения)


	// Оценочная стоимость возвратной тары учитывается в валюте взаиморасчетов по договору,
	// поэтому перед заполнением договор должен быть выбран.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов по договору!");
		Возврат;
	КонецЕсли; 

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	// Теперь нужно выбрать документ, по которому будем заполнять
	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок   = "Выберите документ Реализация для заполнения возврата от покупателя";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ДокументРеализации = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	// Будем работать только с проведенными документами, потому что только у проведенных документов
	// проверено заполнение необходимых реквизитов.
	Если Не ДокументРеализации.Проведен Тогда

		Предупреждение("Документ " + ДокументРеализации.Метаданные().Представление() + " не проведен.
		               |Заполнение невозможно.", , Метаданные().Представление());
		Возврат;

	КонецЕсли;

	// Вызываем процедуру заполнения.
	Если СпособЗаполнения = "Заполнить" Тогда

		Если ТабличнаяЧасть = Товары Тогда

			ЗаполнитьТоварыПоОснованию(ДокументРеализации);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			ЗаполнитьВозвратнуюТаруПоОснованию(ДокументРеализации);

		КонецЕсли;
	
	Иначе // При добавлении надо сворачивать дубли строк, аналогично подбору

		ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(ПолучитьДанныеДляКопирования(ДокументРеализации, ТабличнаяЧасть), ТабличнаяЧасть);

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоРеализации()

// Процедура выполняет заполнение табличной части 
// копированием из выбранного пользователем документа РеализацияТоваровУслуг.
//
// Параметры:
//  ТабличнаяЧасть   - табличная часть, которую необходимо заполнить.
//  СпособЗаполнения - строка ("Заполнить" или "Добавить"), определяет способ заполнения.
//
Процедура ЗаполнитьТабличнуюЧастьПоОрдеру(ТабличнаяЧасть)
	
	// Почистим ТЧ
	Если ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		Если НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
			Предупреждение("Не заполнен приходный ордер! Заполнение невозможно!");
		Иначе
			ЗаполнитьТоварыПоОрдеруУпр(СкладОрдер, ТабличнаяЧасть);
		КонецЕсли;
	Иначе
		Предупреждение("Заполнения по ордеру возможно только для возврата по ордеру!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоРеализации()

// Добавляет с необходимым пересчетом строки табличной части из выбранного документа Реализация
//
// Параметры: 
//  Выборка         - выборка из результата запроса по документу, из которого надо добавить строки табличной части,
//  ТабличнаяЧасть  - табличная часть, в которую надо добавить строки.
//
Процедура ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации(Выборка, ТабличнаяЧасть)

	// Обходим строки Реализации
	СтруктураОтбора = Новый Структура();
	Пока Выборка.Следующий() Цикл

		// Ищем текущую позицию основания в табличной части документа возврата.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора.Вставить("Номенклатура", Выборка.Номенклатура);
        СтруктураОтбора.Вставить("ЗаказПокупателя",             Выборка.ЗаказПокупателя);
        СтруктураОтбора.Вставить("Склад",             			Выборка.Склад);

		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Выборка.ХарактеристикаНоменклатуры);
			СтруктураОтбора.Вставить("СерияНоменклатуры",          Выборка.СерияНоменклатуры);
			СтруктураОтбора.Вставить("ЕдиницаИзмерения",           Выборка.ЕдиницаИзмерения);
			СтруктураОтбора.Вставить("ЕдиницаИзмеренияМест",       Выборка.ЕдиницаИзмеренияМест);
			СтруктураОтбора.Вставить("ДокументПартии",             Выборка.ДокументПартии);

		КонецЕсли;

		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество =  СтрокаТабличнойЧасти.Количество + Выборка.Количество;

			Если ТабличнаяЧасть = Товары Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;
		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Выборка.Количество;
			СтрокаТабличнойЧасти.ЗаказПокупателя  			= Выборка.ЗаказПокупателя;
            СтрокаТабличнойЧасти.Склад  		  			= Выборка.Склад;

			Если ТабличнаяЧасть = Товары Тогда

				СтрокаТабличнойЧасти.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест       = Выборка.ЕдиницаИзмеренияМест;
				СтрокаТабличнойЧасти.Коэффициент                = Выборка.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
				СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;
				СтрокаТабличнойЧасти.ДокументПартии             = Выборка.ДокументПартии;
				СтрокаТабличнойЧасти.Качество                   = Выборка.Качество;

				// Заполняем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

				// Пересчитаем цену в валюту документа.
				Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента,    ВалютаДокумента, 
				                  Выборка.КурсДокумента,      ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				                                                 Выборка.УчитыватьНДС 
				                                               И Выборка.СуммаВключаетНДС,
				                                                 УчитыватьНДС,
																 СуммаВключаетНДС,
				                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

				// Пересчитаем цену в валюту взаиморасчетов (в документах договоры могут отличаться).
				СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, 
				                  Выборка.ВалютаДокумента, ДоговорКонтрагента.ВалютаВзаиморасчетов,
				                  Выборка.КурсДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
				                  Выборка.КратностьДокумента, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

				// По флагам налогообложения тару пересчитывать не надо,
				// Считаем, для тары флаги одинакове (с НДС),

				// Рассчитать реквизиты табличной части.
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			КонецЕсли;
		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	КонецЦикла;

КонецПроцедуры // ДобавитьСтрокиТабличнойЧастиИзДокументаРеализации()

// Процедура выполняет заполнение табличной части не реализованными товарами.
//
// Параметры:
//  СпособЗаполнения - строка способа заполнения ("ПоДокументу" или "ПоДоговору").
//
Процедура ЗаполнитьТоварыНереализованнымиТоварами(СпособЗаполнения, ДокументРеализации = Неопределено)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ДоговорВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ТекстПредупреждения = "Заполнение производится только для документов оформленных по договору с комиссионером.";

	ИначеЕсли СпособЗаполнения = "ПоДоговору" И НЕ ЗначениеЗаполнено(Сделка)
				И (НЕ мУказаниеЗаказовВТЧ И ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам ИЛИ ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ТекстПредупреждения = "Не выбран " + ?(ДоговорВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам, "счет", "заказ") + ". Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыНереализованнымиУпр(СпособЗаполнения, ДокументРеализации);

КонецПроцедуры // ЗаполнитьТоварыНереализованнымиТоварами()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СписокЗапросов.Добавить("ОстаткиУКомиссионеров", "По остаткам номенклатуры у комиссионера");
		Иначе
			Если ЗначениеЗаполнено(ТипЦен) ИЛИ ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями Тогда
				СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
			КонецЕсли;
		КонецЕсли;
		РазворачиватьДоКачества = ТабличнаяЧасть = Товары;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для
// подбора номеклатуры в табличную часть.
//
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена                = мМожноМенятьЦенуВДокументе;
	ЕстьСерия               = Истина;
	Валюта                  = ВалютаДокумента;
	РазворачиватьДоКачества = Ложь;

	Если ТабличнаяЧасть = Товары Тогда

		Команда                 = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти       = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , СкладОрдер);

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если СкладОрдер.ВидСклада <> Перечисления.ВидыСкладов.Оптовый И НЕ СкладОрдер.ТипЦенРозничнойТорговли.Пустая() Тогда
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , СкладОрдер.ТипЦенРозничнойТорговли);
		Иначе
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , ТипЦен);
		КонецЕсли;
	Иначе
		Если СкладОрдер.Склад.ВидСклада <> Перечисления.ВидыСкладов.Оптовый И НЕ СкладОрдер.Склад.ТипЦенРозничнойТорговли.Пустая() Тогда
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , СкладОрдер.Склад.ТипЦенРозничнойТорговли);
		Иначе
			СтруктураПараметровПодбора.Вставить("ТипЦен"           , ТипЦен);
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"     , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"             , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("Сделка"                 , Сделка);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"    , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"          , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы",ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "Сделка"));

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   ТабличнаяЧасть <> Товары) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если НЕ ЗначениеВыбора.Свойство("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти) Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;

	Если ТабличнаяЧасть = ВозвратнаяТара И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если НЕ ЗначениеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);
		СтруктураОтбора.Вставить("НеобходимостьВводаАкцизнойМарки" , Ложь);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти
	   И ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И ЗначениеЗаполнено(СкладОрдер) Тогда
		СтруктураОтбора.Вставить("Склад", СкладОрдер);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура        = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество          = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения    = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент         = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Качество                   = Качество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			ИнтеграцияЕГАИСПереопределяемый.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, Этотобъект);
		
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество          = Количество;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС,
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
    Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	
	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);	

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект); 
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура в зависимости от вида поступления определяет тип для выбора СкладаОрдера
//
Процедура УстановитьТипСкладаОрдера()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если ТипЗнч(СкладОрдер)<>Тип("СправочникСсылка.Склады") Тогда
			СкладОрдер = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать склад, с которого оформляется возврат товаров.";
	Иначе
		Если ТипЗнч(СкладОрдер)<>Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			СкладОрдер = Документы["ПриходныйОрдерНаТовары"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.СкладОрдер.Подсказка = "В этом поле необходимо указать приходный ордер, по которому ранее было оформлено поступление товаров.";
	КонецЕсли;

КонецПроцедуры // УстановитьТипСкладаОрдера()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата); 
	ВидДоговора 		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");

	// Колонку "Себестоимость" не надо показывать при возврате с реализации.
	ВозвратСРеализации = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Себестоимость, Не ВозвратСРеализации);

	Если ВерсияПостановления = 2 Тогда
		ЭлементыФормы.ПанельПокупателемВыставляетсяСчетФактураНаВозврат.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельПокупателемВыставляетсяСчетФактураНаВозврат.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;
	Если ОтразитьВКнигеПокупок И ВерсияПостановления = 2 И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда 
		ЭлементыФормы.ПанельНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНДС.Страницы.ОтражатьВКнигеПокупок;
	Иначе
		ЭлементыФормы.ПанельНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНДС.Страницы.НеОтражатьВКнигеПокупок;
	КонецЕсли;

	ВидимостьСчетов = НЕ (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭтоКомиссия     =    (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность          = ОтражатьВБухгалтерскомУчете;

	ВидимостьПриходногоОрдера = (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);
	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = Истина;
	мКолонкиТовары.ПриходныйОрдер.Видимость                 = ВидимостьПриходногоОрдера;
	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = Истина;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.Видимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = ВидимостьПриходногоОрдера;

	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
									 
	мДоступностьДобавитьПоЗаказам = мКолонкиТовары.ЗаказПокупателя.Видимость;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоЗаказуПокупателя.Доступность = мДоступностьДобавитьПоЗаказам;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоЗаказуПокупателя.Доступность = мДоступностьДобавитьПоЗаказам;

	ИнтеграцияЕГАИСПереопределяемый.УстановитьСвойстваЭлементовЕГАИСнаФормеДокумента(ЭтаФорма);

	РаботаСДиалогами.УстановитьСвойстваЭлементовОтправкиЭлектронногоЧека(ЭлементыФормы, Истина);
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьАвтоотметку()
	
	ЭлементыФормы.НомерРасходногоКассовогоОрдера.АвтоОтметкаНезаполненного = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(НомерРасходногоКассовогоОрдера);
	ЭлементыФормы.НомерРасходногоКассовогоОрдера.ОтметкаНезаполненного     = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(НомерРасходногоКассовогоОрдера);
	ЭлементыФормы.ДатаРасходногоКассовогоОрдера.АвтоОтметкаНезаполненного  = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(ДатаРасходногоКассовогоОрдера);
	ЭлементыФормы.ДатаРасходногоКассовогоОрдера.ОтметкаНезаполненного  	   = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(ДатаРасходногоКассовогоОрдера);
	
	ЭлементыФормы.НомерДокументаОтгрузки.АвтоОтметкаНезаполненного = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(НомерДокументаОтгрузки);
	ЭлементыФормы.НомерДокументаОтгрузки.ОтметкаНезаполненного     = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(НомерДокументаОтгрузки);
	ЭлементыФормы.ДатаДокументаОтгрузки.АвтоВыборНезаполненного    = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(ДатаДокументаОтгрузки);
	ЭлементыФормы.ДатаДокументаОтгрузки.ОтметкаНезаполненного      = (ВидРегистрацииВКнигеПокупок = 3) И НЕ ЗначениеЗаполнено(ДатаДокументаОтгрузки);

КонецПроцедуры

Процедура УстановитьВидРегистрацииВКнигеПокупок()

	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата); 
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	Если ОтразитьВКнигеПокупок И ВерсияПостановления = 2 И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		Если ЗначениеЗаполнено(НомерРасходногоКассовогоОрдера) И ЗначениеЗаполнено(ДатаРасходногоКассовогоОрдера)
			ИЛИ ЗначениеЗаполнено(НомерДокументаОтгрузки) И ЗначениеЗаполнено(ДатаДокументаОтгрузки) Тогда
			ВидРегистрацииВКнигеПокупок = 3;	
		ИначеЕсли ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
			ВидРегистрацииВКнигеПокупок = 1;	
		Иначе
			ВидРегистрацииВКнигеПокупок = 2;
		КонецЕсли;
	Иначе
		ВидРегистрацииВКнигеПокупок = 0;
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Товары.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета) + ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
                  
	ВКнигеПокупокРегистрируетсяДатаНомер = (ВидРегистрацииВКнигеПокупок = 3);
	
	Если ПокупателемВыставляетсяСчетФактураНаВозврат И НЕ ВКнигеПокупокРегистрируетсяДатаНомер Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
		                                                 УчетНДС.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураПолученный"));
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Истина;
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Ложь;
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Процедура устанавливает доступность пункта реквизитов на закладке "НДС"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьРеквизитовНДС()
	
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
	ДоступныПараметрыНДС = (Дата >= '20060101') И (ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Если УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2 Тогда
		
		ЭлементыФормы.ПокупателемВыставляетсяСчетФактураНаВозврат.Доступность 	= Ложь;
		ЭлементыФормы.ОтразитьВКнигеПокупок.Доступность 						= ДоступныПараметрыНДС;
		ЭлементыФормы.НадписьОтразитьВКнигеПокупок.Доступность					= ДоступныПараметрыНДС;
		
		ЭлементыФормы.НадписьНомерРасходногоКассовогоОрдера.Доступность = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		ЭлементыФормы.НомерРасходногоКассовогоОрдера.Доступность        = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		ЭлементыФормы.НадписьДатаРасходногоКассовогоОрдера.Доступность  = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		ЭлементыФормы.ДатаРасходногоКассовогоОрдера.Доступность         = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		
		ЭлементыФормы.НадписьНомерДокументаОтгрузки.Доступность = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		ЭлементыФормы.НомерДокументаОтгрузки.Доступность        = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		ЭлементыФормы.НадписьДатаДокументаОтгрузки.Доступность  = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		ЭлементыФормы.ДатаДокументаОтгрузки.Доступность         = ДоступныПараметрыНДС И (ВидРегистрацииВКнигеПокупок = 3);
		
	Иначе
		
		ЭлементыФормы.ПокупателемВыставляетсяСчетФактураНаВозврат.Доступность 	= ДоступныПараметрыНДС;
		ЭлементыФормы.ОтразитьВКнигеПокупок.Доступность 		= ДоступныПараметрыНДС И Не ПокупателемВыставляетсяСчетФактураНаВозврат;
		ЭлементыФормы.НадписьОтразитьВКнигеПокупок.Доступность 	= ДоступныПараметрыНДС И Не ПокупателемВыставляетсяСчетФактураНаВозврат;
		
		ЭлементыФормы.НадписьНомерРасходногоКассовогоОрдера.Доступность = Ложь;
		ЭлементыФормы.НомерРасходногоКассовогоОрдера.Доступность        = Ложь;
		ЭлементыФормы.НадписьДатаРасходногоКассовогоОрдера.Доступность  = Ложь;
		ЭлементыФормы.ДатаРасходногоКассовогоОрдера.Доступность         = Ложь;
		
		ЭлементыФормы.НадписьНомерДокументаОтгрузки.Доступность = Ложь;
		ЭлементыФормы.НомерДокументаОтгрузки.Доступность        = Ложь;
		ЭлементыФормы.НадписьДатаДокументаОтгрузки.Доступность  = Ложь;
		ЭлементыФормы.ДатаДокументаОтгрузки.Доступность         = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет значение реквизита в табличных частях "Товары", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение)
	
	// Заменим значения в строках
	Для Каждого Строка Из Товары Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
	//Если мИспользоватьТару Тогда
		Для Каждого Строка Из ВозвратнаяТара Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

// Изменяет значение реквизита "Заказ покупателя" в табличных частях при изменении "Сделки".
//
Процедура ИзменитьЗаказВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() + ВозвратнаяТара.Количество()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если колонка заказ недоступна - очистим заказ в табличных частях и выходим
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(неопределено, ДокументОбъект.ДоговорКонтрагента,"ВозвратОтПокупателя");
	
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
		Возврат;
	КонецЕсли;

	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Сделка) И НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если старое значение - не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ТипЗнч(мСтароеЗначениеСделки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка <> мСтароеЗначениеСделки Тогда // Изменен заказ в шапке
		
		// Получим список заказов из табличных частей документа
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "ЗаказПокупателя");
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "ЗаказПокупателя", СписокЗаказов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) Тогда
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокЗаказов.Количество() = 0 И ЗначениеЗаполнено(Сделка) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение заказа в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокЗаказов.НайтиПоЗначению(мСтароеЗначениеСделки) = Неопределено Тогда
			// В табличных частях есть строки со старым значением сделки
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				ТекстВопроса = "Очистить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение заказа");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСделки = Сделка;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗаказВТабличнойЧасти()

// Очищает значение реквизита в табличных частях "Товары", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита)
	
	// Очистим значения в строках
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	Для Каждого Строка Из ВозвратнаяТара Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда 
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя Тогда
				Предупреждение("Возврат товаров от покупателя можно вводить только на основании приходного ордера от покупателя!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);

		Если ЗначениеЗаполнено(ПараметрОснование)
		   И ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;
		
		Если Дата >= '20060101' Тогда 
			ОтразитьВКнигеПокупок = Истина;
			ПокупателемВыставляетсяСчетФактураНаВозврат = (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
		КонецЕсли;

	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	// Установить значение переключателя ВидРегистрацииВКнигеПокупок 
	УстановитьВидРегистрацииВКнигеПокупок();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимоть колонок для таличной части 
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ДокументПартии");
	СтруктураКолонок.Вставить("Себестоимость");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПоДокументамРасчетов        = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	мСтароеЗначениеСклада = СкладОрдер;
    мСтароеЗначениеСделки = Сделка;

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	УстановитьТипСкладаОрдера();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер,
	                                                         "Склад", мУказаниеСкладовВТЧ);

	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, неопределено, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, Неопределено, мКолонкиДокументы, ЭлементыФормы.Сделка,, "ВозвратОтПокупателя");
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",                         "Товары");
	Страницы.Добавить("Тара",                           "ВозвратнаяТара");
	Страницы.Добавить("ДокументыРасчетовСКонтрагентом", "ДокументыРасчетовСКонтрагентом");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	ЗаполнитьТекстПроСчетФактуру();
	
	// Установить доступность реквизитов учета НДС.
	УстановитьДоступностьРеквизитовНДС();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	РаботаСДиалогами.УстановитьДоступностьМенюПроверить(ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

	ИнтеграцияЕГАИСПереопределяемый.ПриОткрытииФормыДокумента(ЭтаФорма, ЭтотОбъект);

	Если ЭтоНовый() И ПараметрОбъектКопирования = Неопределено Тогда
		РаботаСДиалогами.УстановитьАдресЭПДляОтправкиЧека(ЭтотОбъект, Справочники.Контрагенты.ПустаяСсылка(), Контрагент, 
			ЭлементыФормы.АдресЭП.Видимость);
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе

	ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"),  
												ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
												ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
												ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);
	
	ИнтеграцияЕГАИСПереопределяемый.ПослеЗаписиДокументаИзФормы(ЭтаФорма, ЭтотОбъект);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ИнтеграцияЕГАИСПереопределяемый.ПередЗаписьюДокументаИзФормы(Отказ, РежимЗаписи, РежимПроведения, ЭтаФорма, ЭтотОбъект);
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("ВидРегистрацииВКнигеПокупок", ВидРегистрацииВКнигеПокупок);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ИнтеграцияЕГАИСПереопределяемый.ОбработатьОповещения(ЭтаФорма, ЭтотОбъект, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		Если ИнтеграцияЕГАИСПереопределяемый.ПолученИзЕГАИС(ДокументОбъект) Тогда
			ИнтеграцияЕГАИСПереопределяемый.СШКНоменклатура(Номенклатура, Характеристика, Единица, ЭтаФорма, ЭтотОбъект);
		Иначе
			ОбработкаПодбора(Товары, СтруктураПодбора);
		КонецЕсли;
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                мУказаниеСкладовВТЧ,
	                                                ТипЦен, , ДоговорКонтрагента, УсловиеПродаж);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм копирования
// табличной части из Заказу покупателя
//
Процедура КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(Товары, "Заполнить");
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм копирования
// табличной части из Заказу покупателя (с добавлением строк)
Процедура КоманднаяПанельТоварыДобавитьПоЗаказуПокупателя(Кнопка)
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(Товары, "Добавить");
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм копирования
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(Товары, "Заполнить");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм добавления
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыДобавитьИзРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(Товары, "Добавить");
КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм заполнения
// табличной части не реализованными товарами по выбранному документу РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДокументуПередачи(Кнопка)

	// Выберем документ
	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();

	ФормаВыбора.Заголовок = "Выберите документ Реализация для заполнения возврата от покупателя";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	ДокументРеализации = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ДокументРеализации) Тогда 
		Возврат; // ничего не выбрали.
	КонецЕсли;

	ЗаполнитьТоварыНереализованнымиТоварами("ПоДокументу", ДокументРеализации);

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДокументуПередачи()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм заполнения
// табличной части не реализованными товарами по данному договору.
//
Процедура КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДоговору(Кнопка)

	ЗаполнитьТоварыНереализованнымиТоварами("ПоДоговору");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьНереализованнымиТоварамиПоДоговору()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм заполнения
// табличной части по документу "Приходный ордер на товары".
//
Процедура КоманднаяПанельТоварыЗаполнитьПоПриходномуОрдеру(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОрдеру(Товары);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЦеныВалюта()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм копирования
// табличной части из Заказу покупателя
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(ВозвратнаяТара, "Заполнить");
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм копирования
// табличной части из Заказу покупателя (с добавлением строк)
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьПоЗаказуПокупателя(Кнопка)
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя(ВозвратнаяТара, "Добавить");
КонецПроцедуры


// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм копирования
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоРеализации(Кнопка)

	ЗаполнитьТабличнуюЧастьПоРеализации(ВозвратнаяТара, "Заполнить");

КонецПроцедуры // КоманднаяПанельВозвратнаяТараЗаполнитьПоРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм добавления
// табличной части из документа РеализацияТоваровУслуг.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьИзРеализации(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоРеализации(ВозвратнаяТара, "Добавить");
КонецПроцедуры // КоманднаяПанельВозвратнаяТараДобавитьИзРеализации()

// Процедура вызывается при выборе пункта меню "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм заполнения
// табличной части по документу "Приходный ордер на товары".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоПриходномуОрдеру(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОрдеру(ВозвратнаяТара);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, "ЗаказПокупателя" );		

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект)

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном устройстве.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)
	
	Перем ФУ;

	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном устройстве!");
		Возврат;
	КонецЕсли;

	Если Не РаботаСТорговымОборудованием.ПолучитьПроверитьПараметрыДляПробитияЧека(ФУ, Истина, Организация, Истина) Тогда
		Возврат;
	КонецЕсли;

	ОбъектДрайвера = Неопределено;
	ОбработкаОбслуживания = Неопределено;
	ПолучитьСерверТО().ПолучитьОбъектДрайвера(ФУ, ОбработкаОбслуживания, ОбъектДрайвера);
	
	ОбработкаОбслуживания.ПолучитьПараметрыККТ(ОбъектДрайвера);
	ВерсияФормата = МенеджерОборудованияКлиентСервер.ВерсияФФД(ОбъектДрайвера.ВыходныеПараметры);
	Если ВерсияФормата <= "1.0" Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("При использовании ФФД 1.0 фискализация чека из товарных документов не поддерживается");
		Возврат;
	КонецЕсли;
	
	Если (НЕ Проведен) ИЛИ Модифицированность Тогда
		Ответ = Вопрос("Провести документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Предупреждение("Операция не выполнена!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
	
	Если (НЕ Проведен) ИЛИ Модифицированность Тогда
		Предупреждение("Операция не выполнена!");
		Возврат;
	КонецЕсли;

	ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(ФУ);
	Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Кассовая смена не открыта");
		Возврат;
	КонецЕсли;
	
	ПараметрыЧека = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ПараметрыЧека.Вставить("ОписаниеПКС", ОписаниеПКС);
	МенеджерОборудованияВызовСервера.ПодготовитьДанныеДляФискализацииЧека(Ссылка, ПараметрыЧека, ВерсияФормата, 
		ПолучитьСерверТО().ПолучитьМодель(ФУ), "", "");
	
	ОшибкаТО = ОбработкаОбслуживания.ФискализироватьЧек(ОбъектДрайвера, ПараметрыЧека);
	Если ЗначениеЗаполнено(ОшибкаТО) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОбъектДрайвера.ОписаниеОшибки);
		Возврат;
	Иначе
		ЭтотОбъект.НомерЧекаККМ = ОбъектДрайвера.ВыходныеПараметры[1];
		ЭтотОбъект.ККМ = ОписаниеПКС.КассаККМ;
		ЭтотОбъект.ТекстЭлектронногоЧека = ПараметрыЧека.ТекстЭлектронногоЧека;
	КонецЕсли;

	ПриЗаписиПерепроводить = Ложь;
	ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	ПриЗаписиПерепроводить = Истина;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта меню "Заполнить документы расчетов с контрагентом" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомДействиеЗаполнитьДокументыРасчетовСКонтрагентом(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	УстановитьВидРегистрацииВКнигеПокупок();
	ОпределитьРеквизитыПриИзмененииВидаРегистрацииВКнигеПокупок();
	УстановитьРеквизитыУчетаНДС();		

	УстановитьВидимость();
	УстановитьДоступностьРеквизитовНДС();
	УстановитьАвтоотметку();
	ЗаполнитьТекстПроСчетФактуру();
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

Процедура ДатаРасходногоКассовогоОрдераПриИзменении(Элемент)

	УстановитьАвтоотметку();
	
КонецПроцедуры

Процедура НомерРасходногоКассовогоОрдераПриИзменении(Элемент)
	
	УстановитьАвтоотметку();
	
КонецПроцедуры

Процедура НомерДокументаОтгрузкиПриИзменении(Элемент)
	
	УстановитьАвтоотметку();
	
КонецПроцедуры

Процедура ДатаДокументаОтгрузкиПриИзменении(Элемент)
	
	УстановитьАвтоотметку();
	
КонецПроцедуры

// Заполняет при изменении вида регистации в книге покупок значения реквизитов, связанных с ним: ПокупателемВыставляетсяСчетФактураНаВозврат,
// 		НомерРасходногоКассовогоОрдера, ДатаРасходногоКассовогоОрдера
Процедура ОпределитьРеквизитыПриИзмененииВидаРегистрацииВКнигеПокупок()
	
	Если ВидРегистрацииВКнигеПокупок = 1 Тогда
		
		ПокупателемВыставляетсяСчетФактураНаВозврат = Истина;	
		
		НомерРасходногоКассовогоОрдера = "";
		ДатаРасходногоКассовогоОрдера  = '00010101';
		НомерДокументаОтгрузки = "";
		ДатаДокументаОтгрузки = '00010101';
		
	ИначеЕсли ВидРегистрацииВКнигеПокупок = 2 Тогда
		
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;	
		
		НомерРасходногоКассовогоОрдера = "";
		ДатаРасходногоКассовогоОрдера  = '00010101';
		НомерДокументаОтгрузки = "";
		ДатаДокументаОтгрузки = '00010101';

	ИначеЕсли ВидРегистрацииВКнигеПокупок = 3 Тогда
		
		ПокупателемВыставляетсяСчетФактураНаВозврат = Истина;	
		
	Иначе
		
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;	
		
		НомерРасходногоКассовогоОрдера = "";
		ДатаРасходногоКассовогоОрдера  = '00010101';
		НомерДокументаОтгрузки = "";
		ДатаДокументаОтгрузки = '00010101';
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	ПриИзмененииКонтрагента();

КонецПроцедуры // КонтрагентПриИзменении()

Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьАдресЭПДляОтправкиЧека(ЭтотОбъект, Контрагент, ВыбранноеЗначение, ЭлементыФормы.АдресЭП.Видимость);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
    мСтароеЗначениеСделки = Сделка;

	// Данный документ выполняет расход по регистру взаиморасчетов.
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, "ЗаказПокупателя");

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)
	ИзменитьЗаказВТабличнойЧасти();
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") И ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;				
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОрдер
//
Процедура СкладОрдерПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидПоступления), ЭтотОбъект, ЭтаФорма);

	// Установить тип реквизита для ввода (если, например, поле очистили)
	УстановитьТипСкладаОрдера();

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			СкладОрдер,
			мСтароеЗначениеСклада,
			"Товары, ВозвратнаяТара",
			?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, "ПриходныйОрдер", "Склад"));
	КонецЕсли;

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	мСтароеЗначениеСклада = СкладОрдер;

	// Определить в зависимости от вида поступления тип для выбора СкладаОрдера.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПокупателя);
	КонецЕсли;

КонецПроцедуры // СкладОрдерНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)

	ИнтеграцияЕГАИСПереопределяемый.ВидПоступленияПриИзменении(ЭтаФорма, ЭтотОбъект);
	
	УстановитьТипСкладаОрдера();
	УстановитьВидимость();

КонецПроцедуры // ВидПоступленияПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ИнтеграцияЕГАИСПереопределяемый.ОбработкаВыбораВидаПередачиПоступления(ЭтаФорма, ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ОтразитьВКнигеПокупок
//
Процедура ОтразитьВКнигеПокупокПриИзменении(Элемент)
	
	УстановитьВидРегистрацииВКнигеПокупок();
	ОпределитьРеквизитыПриИзмененииВидаРегистрацииВКнигеПокупок();

	УстановитьДоступностьРеквизитовНДС();
	УстановитьАвтоотметку();
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПокупателемВыставляетсяСчетФактураНаВозвратПриИзменении(Элемент)
	
    УстановитьРеквизитыУчетаНДС();		
	УстановитьДоступностьРеквизитовНДС();
	ЗаполнитьТекстПроСчетФактуру();

КонецПроцедуры

Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");
КонецПроцедуры

Процедура ВидРегистрацииВКнигеПокупокПриИзменении(Элемент)

	ОпределитьРеквизитыПриИзмененииВидаРегистрацииВКнигеПокупок();
	УстановитьДоступностьРеквизитовНДС();
	УстановитьАвтоотметку();
	ЗаполнитьТекстПроСчетФактуру();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего", "Себестоимость" и "ЕдиницаХранения"
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
	                                        + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));

	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	// Если заполнен документ партии, то себестоимость будет браться из него.
	// Поэтому если колонка видна, будем выводить в нее текст.
	Если мКолонкиТовары.Себестоимость.Видимость
	   И ЗначениеЗаполнено(ДанныеСтроки.ДокументПартии) Тогда

		ОформлениеСтроки.Ячейки.Себестоимость.ТолькоПросмотр  = Истина;
		ОформлениеСтроки.Ячейки.Себестоимость.УстановитьТекст("Из документа партии");

	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если мКолонкиТовары.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если мКолонкиТовары.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	ИнтеграцияЕГАИСПереопределяемый.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, ЭтотОбъект);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		
		ЭлементыФормы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	КонецЕсли;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода документа партии
// в строке табличной части "Товары".
//
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		СтандартнаяОбработка = Ложь;

		Если ТипЗнч(Элемент.Значение) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Элемент.Значение = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
		КонецЕсли;

		// В качестве владельца формы выбора устанавливаем данный элемент,
		// чтобы выбранное значение было присвоено стандартно.
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент);

		ФормаВыбора.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = Элемент.Значение;
		
		// Отфильруем список документов.по виду операции
		ФормаВыбора.Отбор.ДоговорКонтрагента.Значение      = ДоговорКонтрагента;
		ФормаВыбора.Отбор.ДоговорКонтрагента.Использование = Истина;

		ФормаВыбора.Открыть();

	Иначе // м.б. любой тип

		// Структура отбора
		СтруктОтбора = Новый Структура();

		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
			   И ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				СтруктОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			Иначе
				Если ЗначениеЗаполнено(Сделка) Тогда
					СтруктОтбора.Вставить("Сделка", Сделка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(Организация) Тогда
			СтруктОтбора.Вставить("Организация", Организация);
		КонецЕсли;

		РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "Товары");

	КонецЕсли;

КонецПроцедуры // ТоварыДокументПартииНачалоВыбора()

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Элемент.ТекущиеДанные.Качество = Справочники.Качество.Новый;
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   		И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
		КонецЕсли;

	КонецЕсли;
	
	ИнтеграцияЕГАИСПереопределяемый.ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма, ЭтотОбъект);

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	СтрокаТабличнойЧасти     = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
		мФормаСоставНабора.Закрыть();
	КонецЕсли;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередУдалением(Элемент, Отказ, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры // ТоварыПередУдалением()

Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, "ЗаказПокупателя" );		

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" табличной части
// "Товары". Проверяет возможность копирования строки
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередНачаломИзменения(Элемент, Отказ, ЭтаФорма, ЭтотОбъект)
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" табличной части
// "Товары". Проверяет возможность редактирования данных строки
//
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭлементыФормы.Товары.ТекущиеДанные <> Неопределено И ЭлементыФормы.Товары.ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
		И (Элемент.ТекущаяКолонка.Имя = "Количество" ИЛИ Элемент.ТекущаяКолонка.Имя = "Номенклатура") Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект, , мВалютаРегламентированногоУчета);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   		И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "ВозвратнаяТара");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ВозвратнаяТараПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	мФормаСоставНабора = Неопределено;

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта".
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораИнформационнойКарты(Элемент, Перечисления.ТипыИнформационныхКарт.Дисконтная, СтандартнаяОбработка);

КонецПроцедуры // ДисконтнаяКартаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДисконтнаяКарта".
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	ПриИзмененииДисконтнойКарты();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "УсловиеАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыУсловиеАвтоматическойСкидкиПриИзменении(Элемент)

	Если Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ВидыОплатЧекаККМ") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ВидыОплатЧекаККМ.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ИнформационныеКарты") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ИнформационныеКарты.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Элемент.Значение = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("СправочникСсылка.ВидыДисконтныхКарт") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = Справочники.ВидыДисконтныхКарт.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Значение = ТипЗнч(ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки);
		Если Значение <> Тип("Число") Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.ЗначениеУсловияАвтоматическойСкидки = 0;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыУсловиеАвтоматическойСкидкиПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля "УсловиеАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыУсловиеАвтоматическойСкидкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	Элемент.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт);

КонецПроцедуры // ТоварыУсловиеАвтоматическойСкидкиНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля "ЗначениеУсловияАвтоматическойСкидки"
// в строке табличной части "Товары".
//
Процедура ТоварыЗначениеУсловияАвтоматическойСкидкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		УправлениеРозничнойТорговлей.НачалоВыбораИнформационнойКарты(Элемент, Перечисления.ТипыИнформационныхКарт.Дисконтная, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыЗначениеУсловияАвтоматическойСкидкиНачалоВыбора()

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровВзаиморасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные.Сделка,
	                          СтандартнаяОбработка, "ЗаказПокупателя");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Расход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "ПараметрыЭлектронногоОбменаДокументами".
//
Процедура ДействияФормыПараметрыЭлектронногоОбменаДокументами(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПараметрыЭлектронногоОбменаДокументами(ЭтотОбъект);

КонецПроцедуры // ДействияФормыПараметрыЭлектронногоОбменаДокументами()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с ЕГАИС

// Розничная схема
Процедура ДействияФормыВыгрузитьВЕГАИС(Кнопка)
	
	ИнтеграцияЕГАИСПереопределяемый.ВыгрузитьВЕГАИСРозничныйДокумент(ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура Подключаемый_ВводАкцизнойМарки()
	ИнтеграцияЕГАИСПереопределяемый.ВводАкцизнойМарки(ЭтаФорма, ЭтотОбъект);
КонецПроцедуры

Процедура ОтправитьПоЭПНажатие(Элемент)
	
	РаботаСДиалогами.ВыполнитьОтправкуЭлектронногоЧека(ЭтотОбъект);
	
КонецПроцедуры

Процедура АдресЭПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьАдресЭПКонтрагента(ЭтотОбъект, ЭтаФорма, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиДокументы      = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;

мТерминалы                 = ПолучитьСерверТО().ПолучитьСписокУстройств(
   Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);

