////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ПередОткрытием" Формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПередОткрытиемФормыДокументаВведенногоНаОсновании(ЭтотОбъект, Отказ, ЭтаФорма);
	ЭлектронныеДокументы.УстановитьЗаголовокФормыЭлектронногоДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обаботчик события "ПослеЗаписи" Формы
//
Процедура ПослеЗаписи() Экспорт
	
	ЭлектронныеДокументы.ПослеЗаписиФормыДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ОбновитьСтатусДокумента()
	
	СтатусДокумента = ?(Акцептовать, "Документ принят", "Документ НЕ ПРИНЯТ");
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Структура подчиненности документа" Командной панели "ДействияФормы"
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияОтправкаДокумента(ЗадаватьВопросОПовторнойОтправке = Истина, ЗадаватьВопросОЗаписиДокумента = Истина)
	
	Если Не ЭлектронныеДокументы.ПроверитьПередОтправкойЭлектронногоДокумента(ЭтаФорма, ЗадаватьВопросОПовторнойОтправке, ЗадаватьВопросОЗаписиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ     = Ложь;
	Сообщение = "";
	ЭлектронныеДокументы.ОтправитьИсходящийЭлектронныйДокумент(ЭтотОбъект, Отказ, Сообщение);
	
	ЭлектронныеДокументы.ДействияПослеОтправкиДокумента(Ссылка, Отказ, Сообщение, ЭтаФорма);	
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Отправить" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыОтправить(Кнопка)
	
	ДействияОтправкаДокумента(Истина, Ложь);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле ввода "УчетнаяЗаписьЭлектронногоОбмена"
//
Процедура УчетнаяЗаписьЭлектронногоОбменаПриИзменении(Элемент)
	
	ЭлектронныеДокументы.ПриИзмененииУчетнойЗаписиВДокументе(ЭтотОбъект);
	
КонецПроцедуры

Процедура СоздатьЗаказ(ПринятьЗаказ = Истина)
	
	Если ЗначениеЗаполнено(УчетныйДокумент) Тогда
		
		Если ПринятьЗаказ Тогда
				
			Акцептовать = Истина;
			ЗаписатьВФорме();
			ОбновитьСтатусДокумента();
		    		
			ФормаДокумента = УчетныйДокумент.ПолучитьФорму(, ЭтаФорма);
			ФормаДокумента.Открыть();	
			
		Иначе
			Предупреждение("Заказ покупателя уже создан!");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;		
		
	Док = Документы.ЗаказПокупателя.СоздатьДокумент();
	Док.Организация = Организация;
	Док.Контрагент  = Контрагент;
	Док.ВалютаДокумента  = ИсходныйДокумент.ВалютаДокумента;
	
	СтруктураПараметров = Док.мСтруктураПараметровДляПолученияДоговора;
	
	СтруктураПараметров.Вставить("ВалютаВзаиморасчетовДоговора", Док.ВалютаДокумента);
	СтруктураПараметров.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ПараметрыСеанса.ТекущийПользователь, , , , , СтруктураПараметров);
	
	Док.НомерВходящегоДокументаЭлектронногоОбмена = ИсходныйДокумент.Номер;
	Док.ДатаВходящегоДокументаЭлектронногоОбмена = ИсходныйДокумент.Дата;
	
	Док.Дата = ТекущаяДата();
		
	Док.СуммаВключаетНДС = ИсходныйДокумент.СуммаВключаетНДС;
			
	Для каждого СтрокаТовараЭлДок Из ИсходныйДокумент.Товары Цикл
		
		ЭтоУслуга = СтрокаТовараЭлДок.Номенклатура.Услуга;
		
		Если ЭтоУслуга Тогда
			СтрокаТабличнойЧасти = Док.Услуги.Добавить();
		Иначе
			СтрокаТабличнойЧасти = Док.Товары.Добавить();
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТовараЭлДок.Номенклатура.ЕдиницаХраненияОстатков;
			СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Номенклатура               = СтрокаТовараЭлДок.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаТовараЭлДок.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Количество   = СтрокаТовараЭлДок.Количество;
		
		// цену сумму и ставку НДС рассчитываем автоматически, а затем будет возможность просто сравнить данные
		Док.ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
			
		//СтрокаТабличнойЧасти.Сумма        = СтрокаТовараЭлДок.Сумма;
		//СтрокаТабличнойЧасти.Цена         = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		//СтрокаТабличнойЧасти.СтавкаНДС    = СтрокаТовараЭлДок.СтавкаНДС;
		//СтрокаТабличнойЧасти.СуммаНДС     = СтрокаТовараЭлДок.СуммаНДС;
				
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док);
		
	КонецЦикла;
	
		
	Попытка
		
		Док.Записать();
		УчетныйДокумент = Док.Ссылка;
		
		ЭлектронныеДокументы.СкопироватьПрикрепленныйФайлы(ИсходныйДокумент, УчетныйДокумент);
		
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		
		Если ПринятьЗаказ Тогда
			Акцептовать = Ложь;
			ОбновитьСтатусДокумента();
		КонецЕсли;
		
		Предупреждение("Операция не выполнена");		
		Возврат;
		
	КонецПопытки; 
		
	Если ПринятьЗаказ Тогда
		Акцептовать = Истина;
	КонецЕсли;
	
	ЗаписатьВФорме();
	ОбновитьСтатусДокумента();
		
	ФормаДокумента = Док.ПолучитьФорму(, ЭтаФорма);
	ФормаДокумента.Открыть();	
	
КонецПроцедуры

// Процедура - обаботчик события "Нажатие" в: Кнопка "СоздатьЗаказ"
//
Процедура СоздатьОбновитьЗаказНажатие(Элемент)
	
	СоздатьЗаказ(Истина);
		
КонецПроцедуры

Процедура УчетнаяЗаписьЭлектронногоОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.НачалоВыбораУчетнойЗаписиВДокументе(Элемент, СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	ОбновитьСтатусДокумента();
	
КонецПроцедуры

Процедура ОтклонитьЗаказНажатие(Элемент)
	
	Если ЗначениеЗаполнено(УчетныйДокумент) Тогда
		
		ОтветПользователя = Вопрос("На основании документа создан заказ. Вы уверены что хотите отклонить документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектУчетногоДокумента = УчетныйДокумент.ПолучитьОбъект();
		ОбъектУчетногоДокумента.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
	
	Акцептовать = Ложь;
	
	ОбновитьСтатусДокумента();
	
	ЗаписатьВФорме();
	
	// предлагаем отправить документ
	ОтветПользователя = Вопрос("Документ ОТКЛОНЕН! Отправить отклонение?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДействияОтправкаДокумента(Ложь, Ложь);
	
КонецПроцедуры

// обработчик показа состава файла обмена
Процедура ДействияФормыПоказатьДанныеОбмена(Кнопка)
	
	ЭлектронныеДокументы.ПоказатьДанныеОбмена(ЭтотОбъект);	
	
КонецПроцедуры

// показ примечания
Процедура ПримечаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПоказатьДлинныеСтроковыеДанные(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПоказатьДлинныеСтроковыеДанные(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСоздатьЗаказ(Кнопка)
	
	СоздатьЗаказ(Ложь);	
	
КонецПроцедуры

Процедура ПриОткрытии()
	Если НЕ ЭтоНовый() Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьДанныеДокументовВТаблицуСравнения(ТаблицаСравнения, СтрокаИсходногоДокумента, СтрокаУчетногоДокумента)
	
	СтрокаДобавления = ТаблицаСравнения.Добавить();
	Если СтрокаИсходногоДокумента <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаИсходногоДокумента);
		
	Иначе
		
		СтрокаДобавления.ВходящийЗаказ = "Нет строки во входящем заказе";
		
	КонецЕсли;
	
	Если СтрокаУчетногоДокумента <> Неопределено Тогда
		
		СтрокаДобавления.НоменклатураЗаказ = СтрокаУчетногоДокумента.Номенклатура;
		СтрокаДобавления.ХарактеристикаНоменклатурыЗаказ = СтрокаУчетногоДокумента.ХарактеристикаНоменклатуры;
		СтрокаДобавления.КоличествоЗаказ = СтрокаУчетногоДокумента.Количество;
		СтрокаДобавления.СуммаЗаказ = СтрокаУчетногоДокумента.Сумма;
		СтрокаДобавления.СуммаНДСЗаказ = СтрокаУчетногоДокумента.СуммаНДС;
		
	Иначе
		
		СтрокаДобавления.СозданныйВПрограммеЗаказ = "Нет строки в созданном заказе покупателя";
			
	КонецЕсли;
	
	Если СтрокаИсходногоДокумента <> Неопределено
		И СтрокаУчетногоДокумента <> Неопределено Тогда
		
		СообщениеСтроки = "";
		Если СтрокаИсходногоДокумента.Номенклатура <> СтрокаУчетногоДокумента.Номенклатура Тогда
			СообщениеСтроки = СообщениеСтроки + ", Номенклатура";
		КонецЕсли;
		
		Если СтрокаИсходногоДокумента.ХарактеристикаНоменклатуры <> СтрокаУчетногоДокумента.ХарактеристикаНоменклатуры Тогда
			СообщениеСтроки = СообщениеСтроки + ", Характеристика номенклатуры";
		КонецЕсли;
		
		Если СтрокаИсходногоДокумента.Количество <> СтрокаУчетногоДокумента.Количество Тогда
			СообщениеСтроки = СообщениеСтроки + ", Количество";
		КонецЕсли;
		
		Если СтрокаИсходногоДокумента.Сумма <> СтрокаУчетногоДокумента.Сумма Тогда
			СообщениеСтроки = СообщениеСтроки + ", Сумма";
		КонецЕсли;
		
		Если СтрокаИсходногоДокумента.СуммаНДС <> СтрокаУчетногоДокумента.СуммаНДС Тогда
			СообщениеСтроки = СообщениеСтроки + ", Сумма НДС";
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеСтроки) Тогда
			СообщениеСтроки = "Различия в реквизитах: " + Сред(СообщениеСтроки, 3);
		Иначе
			СообщениеСтроки = "Строки совпадают";
		КонецЕсли;
		
		СтрокаДобавления.СозданныйВПрограммеЗаказ = СообщениеСтроки;
        СтрокаДобавления.ВходящийЗаказ = СообщениеСтроки;
		
	КонецЕсли;			
	
КонецПроцедуры

Процедура СравнитьЭлектронныйДокументСУчетным(ИсходныйДокумент, УчетныйДокумент) Экспорт
	
	ФормаСравнения = ПолучитьФорму("ФормаСравненияДокументов", ЭтаФорма);
	ТаблицаСравнения = ФормаСравнения.СравнениеДокументов;
	
	НоменклатураУчетногоДокумента = ЭлектронныеДокументы.ПодготовитьНоменклатуруДокументаДляЭкспорта(УчетныйДокумент);
	
	КоличествоСтрокВУчетномДокументе = НоменклатураУчетногоДокумента.Количество();
	КоличествоСтрокВИсходномДокументе = ИсходныйДокумент.Товары.Количество();
	
	МинимальноеКоличество = Мин(КоличествоСтрокВУчетномДокументе, КоличествоСтрокВИсходномДокументе);	

	Индекс = 0;
	Пока Индекс <= МинимальноеКоличество - 1 Цикл
			
		СтрокаИсходногоДокумента = ИсходныйДокумент.Товары[Индекс];
		СтрокаУчетногоДокумента = НоменклатураУчетногоДокумента[Индекс];
		ДобавитьДанныеДокументовВТаблицуСравнения(ТаблицаСравнения, СтрокаИсходногоДокумента, СтрокаУчетногоДокумента);		 
		
		Индекс = Индекс +1;
		
	КонецЦикла;		
	
	Индекс = МинимальноеКоличество; 
	Пока Индекс <= КоличествоСтрокВУчетномДокументе - 1 Цикл
			
		СтрокаИсходногоДокумента = Неопределено;
		СтрокаУчетногоДокумента = НоменклатураУчетногоДокумента[Индекс];
		ДобавитьДанныеДокументовВТаблицуСравнения(ТаблицаСравнения, СтрокаИсходногоДокумента, СтрокаУчетногоДокумента);		 
		
		Индекс = Индекс +1;
		
	КонецЦикла;
	
	Индекс = МинимальноеКоличество; 
	Пока Индекс <= КоличествоСтрокВИсходномДокументе - 1 Цикл
			
		СтрокаИсходногоДокумента = ИсходныйДокумент.Товары[Индекс];
		СтрокаУчетногоДокумента = Неопределено;
		ДобавитьДанныеДокументовВТаблицуСравнения(ТаблицаСравнения, СтрокаИсходногоДокумента, СтрокаУчетногоДокумента);		 
		
		Индекс = Индекс +1;
		
	КонецЦикла;
	
	ФормаСравнения.Открыть();
		
КонецПроцедуры

Процедура ОсновныеДействияФормыСравнитьДанныеЗаказов(Кнопка)
	
	СравнитьЭлектронныйДокументСУчетным(ИсходныйДокумент, УчетныйДокумент);	
	
КонецПроцедуры
