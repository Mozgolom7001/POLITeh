////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа для проверки перехода документа в другой период.
Перем мТекущаяДатаДокумента;

// Хранит коллекцию колонок ТЧ "Товары", "ЦеновыеГруппы".
Перем мКолонкиТовары, мКолонкиЦеновыеГруппы, мКолонкиБонусы;

Перем мФормаСоставНабора, мТекущаяСтрокаНабор;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мУчетнаяПолитика;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПолучателиСкидки,ЭлементыФормы.КоманднаяПанельПолучателиСкидки);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВремяПоДнямНедели,ЭлементыФормы.КоманднаяПанельВремяПоДнямНедели);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ЦеновыеГруппы,ЭлементыФормы.КоманднаяПанельЦеновыеГруппы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Бонусы,ЭлементыФормы.КоманднаяПанельБонусы);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура изменяет время в табличной части "ВремяПоДнямНедели".
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ИзменитьВремя(Элемент)

	Для Каждого СтрокаДня Из ВремяПоДнямНедели Цикл
		СтрокаДня.ВремяНачала = ОбщееВремяНачала;
		СтрокаДня.ВремяОкончания = ОбщееВремяОкончания;
		СтрокаДня.Выбран = Истина;
	КонецЦикла;

КонецПроцедуры // ИзменитьВремя()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ТабличнаяЧасть = Товары Тогда
		ЕстьКоличество          = Ложь;
		РазворачиватьДоКачества = Истина;

		Команда = "ПодборВТабличнуюЧастьТовары";

		СписокВидовПодбора = Новый СписокЗначений();
		СписокВидовПодбора.Добавить(,"По справочнику");

		ПредставлениеДок = Метаданные().Представление();

		СтруктураПараметровПодбора = Новый Структура();
		СтруктураПараметровПодбора.Вставить("Команда"                , Команда);
		СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"     , СписокВидовПодбора);
		СтруктураПараметровПодбора.Вставить("Контрагент"             , Неопределено);
		СтруктураПараметровПодбора.Вставить("ДоговорВзаиморасчетов"  , Неопределено);
		СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);
		СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
		
		СтруктураПараметровПодбора.Вставить("ТипЦен"                 , Неопределено);
		СтруктураПараметровПодбора.Вставить("ЕстьКоличество"         , ЕстьКоличество);
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
		СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ "
		                                                             + ПредставлениеДок + " № " + Номер);

		РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());
	ИначеЕсли ТабличнаяЧасть = ЦеновыеГруппы Тогда
		ФормаПодбора = Справочники.ЦеновыеГруппы.ПолучитьФорму("ФормаВыбора", ЭтаФорма);
		ФормаПодбора.РежимВыбора = Истина;
		ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		ФормаПодбора.Открыть();
	ИначеЕсли ТабличнаяЧасть = ПолучателиСкидки Тогда
		Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
			ФормаПодбора = Справочники.Контрагенты.ПолучитьФорму("ФормаВыбора", ЭтаФорма);
		Иначе
			ФормаПодбора = Справочники.Склады.ПолучитьФорму("ФормаВыбора", ЭтаФорма);
		КонецЕсли;

		ФормаПодбора.РежимВыбора = Истина;
		ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		ФормаПодбора.Открыть();

	КонецЕсли;

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, Характеристика, ТекКачество;

	Если ТабличнаяЧасть = Товары Тогда
		Если ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
			   Ложь) Тогда
				Возврат;
			КонецЕсли;

			ЗначениеВыбора.Свойство("Номенклатура"  , Номенклатура);
			ЗначениеВыбора.Свойство("Характеристика", Характеристика);

			ЗначениеВыбора.Свойство("Качество", ТекКачество);
			Если Не ЗначениеЗаполнено(ТекКачество) Тогда
				ТекКачество = Качество;
			КонецЕсли;

			// Ищем выбранную позицию в таблице подобранной номенклатуры.
			// Если не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
			СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
			СтруктураОтбора.Вставить("Качество"                  , ТекКачество);

			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(Товары, СтруктураОтбора);
			Если СтрокаТабличнойЧасти = Неопределено Тогда // надо добавить
				СтрокаТабличнойЧасти = Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
				СтрокаТабличнойЧасти.Качество                   = ТекКачество;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки       = ПроцентСкидкиНаценки;
				СтрокаТабличнойЧасти.ОграничениеСкидкиНаценки   = ОграничениеСкидкиНаценки;
			КонецЕсли;

			ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = ЦеновыеГруппы Тогда
		Если Не ЗначениеВыбора.ЭтоГруппа Тогда

			// Ищем выбранную позицию в таблице подобранных ценовых групп.
			// Если не найдем - добавим новую строку.
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЦеноваяГруппа", ЗначениеВыбора);
			СтруктураОтбора.Вставить("Качество"     , Качество);

			СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ЦеновыеГруппы, СтруктураОтбора);
			Если СтрокаТабличнойЧасти = Неопределено Тогда // надо добавить
				СтрокаТабличнойЧасти = ЦеновыеГруппы.Добавить();
				СтрокаТабличнойЧасти.ЦеноваяГруппа            = ЗначениеВыбора;
				СтрокаТабличнойЧасти.Качество                 = Качество;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки     = ПроцентСкидкиНаценки;
				СтрокаТабличнойЧасти.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
			КонецЕсли;

			ЭлементыФормы.ЦеновыеГруппы.ТекущаяСтрока = СтрокаТабличнойЧасти;
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = ПолучателиСкидки Тогда
		Если Не ЗначениеВыбора.ЭтоГруппа Тогда

			// Ищем выбранную позицию в таблице подобранных получателей скидки.
			// Если не найдем - добавим новую строку.
			СтрокаТабличнойЧасти = ПолучателиСкидки.Найти(ЗначениеВыбора, "Контрагент, Получатель");
			Если СтрокаТабличнойЧасти = Неопределено Тогда // надо добавить
				СтрокаТабличнойЧасти = ПолучателиСкидки.Добавить();

				Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.Контрагенты") Тогда
					СтрокаТабличнойЧасти.Контрагент = ЗначениеВыбора;
				Иначе
					СтрокаТабличнойЧасти.Получатель = ЗначениеВыбора;
				КонецЕсли;
			КонецЕсли;

			ЭлементыФормы.ПолучателиСкидки.ТекущаяСтрока = СтрокаТабличнойЧасти;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаПодбора()

// Осуществляет вызов формы заполнения табличной части документа
//
// Параметры:
//  Добавить            - Истина - добавить, Ложь - заполнить с предворительной очисткой,
//  ОснованиеЗаполнения - строка "Группа" или "Поставщик".
//
Процедура ЗаполнитьТовары(Добавить, ОснованиеЗаполнения)

	Если Товары.Количество() > 0 И НЕ Добавить Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ОснованиеЗаполнения = "Группа" Тогда

		// Теперь нужно выбрать группу, по которой будем заполнять.
		ФормаЗаполнения = ПолучитьФорму("ФормаЗаполнения");

		ФормаЗаполнения.мСтруктураПараметров = Новый Структура("Добавить", Добавить);

		ФормаЗаполнения.Заголовок = "Выберите группу справочника ""Номенклатура"" для заполнения табличной части документа ""Установка скидок""";

		Группа = ФормаЗаполнения.ОткрытьМодально();
	ИначеЕсли ОснованиеЗаполнения = "Поставщик" Тогда

		// Теперь нужно выбрать контрагента, по которому будем заполнять.
		ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора();

		ФормаВыбора.Заголовок   = "Выберите поставщика номенклатуры для заполнения табличной части документа ""Установка скидок""";
		ФормаВыбора.РежимВыбора = Истина;

		Поставщик = ФормаВыбора.ОткрытьМодально();

		Если НЕ ЗначениеЗаполнено(Поставщик) Тогда // ничего не выбрали
			Возврат;
		КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Поставщик", Поставщик);
		Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ОсновнойПоставщик = &Поставщик
		|И НЕ Номенклатура.ЭтоГруппа
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.Текст = Текст;
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();

		Если Не Добавить Тогда
			ТаблицаТоваров.Колонки.Добавить("ПроцентСкидкиНаценки");
			ТаблицаТоваров.Колонки.Добавить("ОграничениеСкидкиНаценки");
			ТаблицаТоваров.Колонки.Добавить("Качество");
			ТаблицаТоваров.ЗаполнитьЗначения(ПроцентСкидкиНаценки, "ПроцентСкидкиНаценки");
			ТаблицаТоваров.ЗаполнитьЗначения(ОграничениеСкидкиНаценки, "ОграничениеСкидкиНаценки");
			ТаблицаТоваров.ЗаполнитьЗначения(Качество, "Качество");
			Товары.Загрузить(ТаблицаТоваров);
		Иначе
			ТаблицаПроверкиДублей = Товары.Выгрузить();
			ТаблицаПроверкиДублей.Индексы.Добавить("Номенклатура");
			Для Каждого СтрокаДобавления ИЗ ТаблицаТоваров Цикл
				Если ТаблицаПроверкиДублей.Найти(Новый Структура("Номенклатура", СтрокаДобавления.Номенклатура)) = Неопределено Тогда
					СтрокаТовара = Товары.Добавить();
					СтрокаТовара.Номенклатура = СтрокаДобавления.Номенклатура;
					СтрокаТовара.Качество = Качество;
					СтрокаТовара.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
					СтрокаТовара.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ОснованиеЗаполнения = "Ценовые группы" Тогда

		// Теперь нужно выбрать ценовую группу, по которой будем заполнять.
		ФормаЗаполнения = ПолучитьФорму("ФормаЗаполненияПоЦеновымГруппам");
		
		ФормаЗаполнения.мСтруктураПараметров = Новый Структура("Добавить", Добавить);

		ФормаЗаполнения.Заголовок = "Выберите ценовую группу для заполнения табличной части документа ""Установка скидок""";

		Группа = ФормаЗаполнения.ОткрытьМодально();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТовары()

// Производит изменение типа элемента формы "ЗначениеУсловия".
//
Процедура ИзменитьТипЗначенияУсловия()

	Если Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
		ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыОплатЧекаККМ");
	ИначеЕсли Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте Тогда
		ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ИнформационныеКарты");
	ИначеЕсли Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт Тогда
		ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыДисконтныхКарт");
	Иначе
		КвалификаторыЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
		ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	КонецЕсли;

	ЗначениеУсловия = ЭлементыФормы.ЗначениеУсловия.ОграничениеТипа.ПривестиЗначение(ЗначениеУсловия);

	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Тогда
		ЗначениеУсловия = 0;
	КонецЕсли;

КонецПроцедуры // ИзменитьТипЗначенияУсловия()

// Производит изменение в соответствии с установленным видом скидки.
//
Процедура ПриИзмененииВидаСкидок()

	Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
		Если Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты Тогда
			Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
			ИзменитьТипЗначенияУсловия();
		КонецЕсли;

		ЭлементСпискаКУдалению = ЭлементыФормы.Условие.СписокВыбора.НайтиПоЗначению(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
		Если ЭлементСпискаКУдалению <> Неопределено Тогда
			ЭлементыФормы.Условие.СписокВыбора.Удалить(ЭлементСпискаКУдалению);
		КонецЕсли;
	Иначе
		ЭлементСпискаКДобавлению = ЭлементыФормы.Условие.СписокВыбора.НайтиПоЗначению(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
		Если ЭлементСпискаКДобавлению = Неопределено Тогда
			ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииВидаСкидок()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех страниц панели "ОсновнаяПанель,
// видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ВидОперацииНеБонусы = (ВидОперации <> Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки);
	ВидОперацииНоменклатура = (ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = ВидОперацииНоменклатура И Не ДляВсейНоменклатуры;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ЦеновыеГруппы.Видимость = (ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Бонусы.Видимость = Не ВидОперацииНеБонусы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки.Видимость = Не ДляВсехПолучателей;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВремяДействияСкидки.Видимость = ПоДнямНедели;

	Если ВидОперацииНоменклатура И ДляВсейНоменклатуры И ДляВсехПолучателей И Не ПоДнямНедели Тогда
		ЭлементыФормы.ОсновнаяПанель.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Видимость = Истина;
	КонецЕсли;

	ЭлементыФормы.ДляВсейНоменклатуры.Видимость = ВидОперацииНоменклатура;

	Если ВидОперацииНоменклатура И ДляВсейНоменклатуры Тогда
		ЭлементыФормы.Качество.АвтоОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.Качество.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.Качество.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

	ЭлементыФормы.Валюта.Видимость                 = ВидОперацииНеБонусы;
	ЭлементыФормы.НадписьВалюта.Видимость          = ВидОперацииНеБонусы;

	ЭлементыФормы.ТипСкидкиНаценки.Видимость       = ВидОперацииНеБонусы;
	ЭлементыФормы.НадписьТипСкидки.Видимость       = ВидОперацииНеБонусы;

	ЭлементыФормы.Условие.Видимость                = ВидОперацииНеБонусы;
	ЭлементыФормы.НадписьУсловие.Видимость         = ВидОперацииНеБонусы;

	ЭлементыФормы.ПроцентСкидкиНаценки.Видимость   = ВидОперацииНеБонусы;
	ЭлементыФормы.НадписьПроцент.Видимость         = ВидОперацииНеБонусы;

	ЭлементыФормы.ОграничениеСкидки.Видимость      = ВидОперацииНеБонусы;
	ЭлементыФормы.НадписьОграничение.Видимость     = ВидОперацииНеБонусы;

	ЭлементыФормы.Качество.Видимость               = ВидОперацииНеБонусы;
	ЭлементыФормы.НадписьКачество.Видимость        = ВидОперацииНеБонусы;

	Если Не ВидОперацииНеБонусы Тогда
		ЭлементыФормы.Валюта.АвтоВыборНезаполненного = Ложь;
		ЭлементыФормы.Валюта.ОтметкаНезаполненного = Ложь;
	Иначе
		ЭлементыФормы.Валюта.АвтоВыборНезаполненного = Истина;
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			ЭлементыФормы.Валюта.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Условие = Перечисления.УсловияСкидкиНаценки.БезУсловий Или Не ВидОперацииНеБонусы Тогда
		ЭлементыФормы.ЗначениеУсловия.Видимость = Ложь;
		ЭлементыФормы.НадписьЗначениеУсловия.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ЗначениеУсловия.Видимость = Истина;
		ЭлементыФормы.НадписьЗначениеУсловия.Видимость = Истина;
	КонецЕсли;

	Если ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки.Заголовок = "Получатели скидки (Контрагенты)";
		ЭлементыФормы.ПолучателиСкидки.Колонки.Контрагент.Видимость = Истина;
		ЭлементыФормы.ПолучателиСкидки.Колонки.Получатель.ТекстШапки = "Договор";
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПолучателиСкидки.Заголовок = "Получатели скидки (Склады)";
		ЭлементыФормы.ПолучателиСкидки.Колонки.Контрагент.Видимость = Ложь;
		ЭлементыФормы.ПолучателиСкидки.Колонки.Получатель.ТекстШапки = "Склад";
	КонецЕсли;

	СтрВалюта = ?(НЕ ЗначениеЗаполнено(Валюта), "<>", Валюта);

	мКолонкиТовары.ОграничениеСкидкиНаценки.ТекстШапки = "Огр. (" + СтрВалюта + ")";

	Если Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента Тогда
		ЭлементыФормы.НадписьЗначениеУсловия.Заголовок= "Значение условия (" + СтрВалюта + "):";
	Иначе
		ЭлементыФормы.НадписьЗначениеУсловия.Заголовок= "Значение условия:";
	КонецЕсли;

	ЭлементыФормы.НадписьОграничение.Заголовок= "Ограничение (" + СтрВалюта + "):";

	мКолонкиЦеновыеГруппы.ОграничениеСкидкиНаценки.ТекстШапки = "Огр. (" + СтрВалюта + ")";

	Если (Условие = Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте
	 Или Условие = Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт)
	   И мУчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И мУчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам
	   И мУчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		мКолонкиТовары.ПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
		мКолонкиЦеновыеГруппы.ПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПроцентСкидкиНаценки.ТолькоПросмотр = Истина;
	Иначе
		мКолонкиТовары.ПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
		мКолонкиЦеновыеГруппы.ПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ПроцентСкидкиНаценки.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием()

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоКоличествуТовара);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоДисконтнойКарте);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуДисконтныхКарт);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.ПоВидуОплаты);
	ЭлементыФормы.Условие.СписокВыбора.Добавить(Перечисления.УсловияСкидкиНаценки.БезУсловий);

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,,ПараметрОбъектКопирования,ПараметрОснование);

		Если НЕ ЗначениеЗаполнено(ПараметрОснование) И ПараметрОбъектКопирования = Неопределено Тогда
			Валюта = глЗначениеПеременной("ВалютаУправленческогоУчета");
			ВидСкидки = Перечисления.ВидыСкидок.Розничная;
			ПриИзмененииВидаСкидок();
			Условие = Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента;
		КонецЕсли;

		ИзменитьТипЗначенияУсловия();

	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;

	ПриИзмененииВидаСкидок();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");

	// Установить ограничение - изменять видимоть колонок для таличного поля 
	// "ТаблицаСкидокНаценок".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  ВидОперации.Метаданные().ЗначенияПеречисления,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
										  
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры".
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиБонусы);

	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",              "Товары");
	Страницы.Добавить("ЦеновыеГруппы",       "ЦеновыеГруппы");
	Страницы.Добавить("Бонусы",              "Бонусы");
	Страницы.Добавить("ПолучателиСкидки",    "ПолучателиСкидки");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

	мФормаСоставНабора = Неопределено;

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	ТипЗначенияВыбора = ТипЗнч(ЗначениеВыбора);

	Если ТипЗначенияВыбора = Тип("Структура") Тогда
		Если ЗначениеВыбора.Команда = "ЗаполнениеТабличнойЧасти"
		 Или ЗначениеВыбора.Команда = "ПодборВТабличнуюЧастьТовары" Тогда
				ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	ИначеЕсли ТипЗначенияВыбора = Тип("СправочникСсылка.ЦеновыеГруппы") Тогда
		ОбработкаПодбора(ЦеновыеГруппы, ЗначениеВыбора);
	ИначеЕсли ТипЗначенияВыбора = Тип("СправочникСсылка.Контрагенты")
	      Или ТипЗначенияВыбора = Тип("СправочникСсылка.Склады") Тогда
		ОбработкаПодбора(ПолучателиСкидки, ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры //ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ПоДнямНедели Тогда
		ВремяПоДнямНедели.Очистить();
	КонецЕсли;

	Если ДляВсейНоменклатуры Тогда
		Товары.Очистить();
	КонецЕсли;

	Если ДляВсехПолучателей Тогда
		ПолучателиСкидки.Очистить();
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	УстановитьВидимость();

	Если ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоНоменклатуре Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Товары"];
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.ПоЦеновымГруппам Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["ЦеновыеГруппы"];
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийУстановкаСкидокНоменклатуры.НатуральныеСкидки Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Бонусы"];
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
//  Кнопка - кнопка командной панели табличной части, которую
//           нажал пользователь
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТаблицыТиповСкидокНаценокПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки.
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект    = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента   = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице = Ложь;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоГруппе(Кнопка)

	ЗаполнитьТовары(Ложь, "Группа");

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоГруппе()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоГруппе(Кнопка)

	ЗаполнитьТовары(Истина, "Группа");

КонецПроцедуры // КоманднаяПанельТоварыДействиеДобавитьПоГруппе()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыЗаполнитьПоПоставщику(Кнопка)

	ЗаполнитьТовары(Ложь, "Поставщик");

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоПоставщику()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДобавитьПоПоставщику(Кнопка)

	ЗаполнитьТовары(Истина, "Поставщик");

КонецПроцедуры // КоманднаяПанельТоварыДобавитьПоПоставщику()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "ОтметитьВсе" командной панели 
// табличного поля "ВремяПоДнямНедели".
//
Процедура КоманднаяПанельВремяПоДнямНеделиДействиеОтметитьВсе(Кнопка)

	Для Каждого День Из ВремяПоДнямНедели Цикл
		День.Выбран = Истина;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельВремяПоДнямНеделиДействиеОтметитьВсе()

// Процедура вызывается при нажатии кнопки "СнятьВсе" командной панели 
// табличного поля "ВремяПоДнямНедели".
//
Процедура КоманднаяПанельВремяПоДнямНеделиДействиеСнятьВсе(Кнопка)

	Для Каждого День из ВремяПоДнямНедели Цикл
		День.Выбран = Ложь;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельВремяПоДнямНеделиДействиеСнятьВсе()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЦеновымГруппам(Кнопка)

	ЗаполнитьТовары(Ложь,"Ценовые группы");

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоЦеновымГруппам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоЦеновымГруппам(Кнопка)

	ЗаполнитьТовары(Истина,"Ценовые группы");

КонецПроцедуры // КоманднаяПанельТоварыДействиеДобавитьПоЦеновымГруппам()

// Процедура вызывает сервисный механизм для подбора ценовых групп в табличную часть.
//
Процедура КоманднаяПанельЦеновыеГруппыПодбор(Кнопка)

	ДействиеПодбор(ЦеновыеГруппы);

КонецПроцедуры // КоманднаяПанельЦеновыеГруппыПодбор()

// Процедура - обработчик события "Нажатие" кнопки "СоставНоменклатуры".
//
Процедура КоманднаяПанельБонусыКнопкаСоставНоменклатуры(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Бонусы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ (СтрокаТабличнойЧасти.Номенклатура.Комплект Или СтрокаТабличнойЧасти.Номенклатура.Набор) Тогда
		Предупреждение("Номенклатура не является набором!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество", СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента", ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Бонусы");
	СтруктураПараметров.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки -1);
	СтруктураПараметров.Вставить("ЗаголовокФормы", "Укажите состав комплекта, на который дается бонус");

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры // КоманднаяПанельБонусыКнопкаСоставНоменклатуры()

// Процедура - обработчик события "Нажатие" кнопки "СоставБонусов".
//
Процедура КоманднаяПанельБонусыКнопкаСоставБонусов(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Бонусы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.СпецПредложение.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", СтрокаТабличнойЧасти.СпецПредложение);
	СтруктураПараметров.Вставить("Количество", 1.000);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", СтрокаТабличнойЧасти.СпецПредложение.ЕдиницаХраненияОстатков);
	СтруктураПараметров.Вставить("ДокументОбъект", ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента", ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Бонусы");
	СтруктураПараметров.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ЗаголовокФормы", "Укажите необходимые бонусы");

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры // КоманднаяПанельБонусыКнопкаСоставБонусов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры //ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры //ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СКИДОК

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" поля "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;

		ТекущаяСтрока.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
		ТекущаяСтрока.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
		ТекущаяСтрока.Качество = Качество;
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" реквизита "Номенклатура" ТЧ "Бонусы".
//
Процедура БонусыНоменклатураПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Элемент.Значение) И Элемент.Значение.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Элемент.Значение = Неопределено;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.Бонусы.ТекущиеДанные;

	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Количество = 1;
	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

	// Ввод состава набора.
	СтрокаТабличнойЧасти.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки - 1;
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтрокаТабличнойЧасти.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки +1;

КонецПроцедуры // БонусыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" реквизита "СпецПредложение" ТЧ "Бонусы".
//
Процедура БонусыСпецПредложениеПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Элемент.Значение)
	   И Не Элемент.Значение.Комплект Тогда
		Предупреждение("В данном контексте можно выбрать только комплекты!");
		Элемент.Значение = Неопределено;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.Бонусы.ТекущиеДанные;

	// Ввод состава набора.
	ОбщегоНазначения.ПоменятьПеременныеМестами(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СпецПредложение);
	ОбщегоНазначения.ПоменятьПеременныеМестами(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.ХарактеристикаСпецПредложения);
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбщегоНазначения.ПоменятьПеременныеМестами(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СпецПредложение);
	ОбщегоНазначения.ПоменятьПеременныеМестами(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.ХарактеристикаСпецПредложения);

	// В составе спец. предложения оставим только бонусы.
	СоставНоменклатуры = ПолучитьСоставСтроки(СтрокаТабличнойЧасти.КлючСтроки - 1, СтрокаТабличнойЧасти);
	Для Каждого КомплектующаяНоменклатуры Из СоставНоменклатуры Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСтроки", СтрокаТабличнойЧасти.КлючСтроки);
		СтруктураПоиска.Вставить("Номенклатура", КомплектующаяНоменклатуры.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", КомплектующаяНоменклатуры.ХарактеристикаНоменклатуры);

		СтрокаСоответствияКомплектов = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(СоставНабора, СтруктураПоиска);
		Если СтрокаСоответствияКомплектов <> Неопределено Тогда

			//Переведем строку в количество за единицу хранения остатков.
			СтрокаСоответствияКомплектов.Количество = СтрокаСоответствияКомплектов.Количество * СтрокаСоответствияКомплектов.ЕдиницаИзмерения.Коэффициент / СтрокаСоответствияКомплектов.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
			СтрокаСоответствияКомплектов.ЕдиницаИзмерения = СтрокаСоответствияКомплектов.Номенклатура.ЕдиницаХраненияОстатков;

			СтрокаСоответствияКомплектов.Количество = СтрокаСоответствияКомплектов.Количество - КомплектующаяНоменклатуры.Количество * КомплектующаяНоменклатуры.ЕдиницаИзмерения.Коэффициент;

			Если СтрокаСоответствияКомплектов.Количество <= 0 Тогда
				СоставНабора.Удалить(СтрокаСоответствияКомплектов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // БонусыСпецПредложениеПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ "Бонусы".
//
Процедура БонусыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;

		ТекущаяСтрока.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект, "Бонусы") +1;
	КонецЕсли;

КонецПроцедуры // БонусыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ "Бонусы".
//
Процедура БонусыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.КоличествоСпецПредложения.УстановитьТекст("1.000");
	ОформлениеСтроки.Ячейки.ЕдиницаИзмеренияСпецПредложения.УстановитьТекст(ДанныеСтроки.СпецПредложение.ЕдиницаХраненияОстатков);

КонецПроцедуры // БонусыПриВыводеСтроки()

// Процедура - обработчик события "ПриАктивизацииЯчейки" ТЧ "Бонусы".
//
Процедура БонусыПриАктивизацииЯчейки(Элемент)

	Если Элемент.ТекущаяКолонка <> Неопределено
	   И Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущаяКолонка.Имя = "Количество"
		 Или Элемент.ТекущаяКолонка.Имя = "ЕдиницаИзмерения" Тогда
			ТекущаяСтрока = Элемент.ТекущиеДанные;

			Если ТекущаяСтрока.Номенклатура.Комплект Тогда
				Элемент.ТекущаяКолонка.ТолькоПросмотр = Истина;
			Иначе
				Элемент.ТекущаяКолонка.ТолькоПросмотр = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // БонусыПриАктивизацииЯчейки()

// Процедура - обработчик события "ПриПередУдалением" строки ТЧ "Бонусы".
//
Процедура БонусыПередУдалением(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Бонусы.ТекущиеДанные;

	Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
		мФормаСоставНабора.Закрыть();
	КонецЕсли;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.КлючСтроки = СтрокаТабличнойЧасти.КлючСтроки - 1;
	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // БонусыПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ПОЛУЧАТЕЛЕЙ

// Процедура - обработчик события "НачалоВыбора" поля "Получатель" табличного поля "ПолучателиСкидки".
//
Процедура ПолучателиСкидкиПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора();
		ФормаВыбора.РежимВыбора = Истина;

		ВладелецДоговора = ЭлементыФормы.ПолучателиСкидки.ТекущиеДанные.Контрагент;
		
		ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение = ВладелецДоговора;
		ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения = ВидСравнения.Равно;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
		Договор = ФормаВыбора.ОткрытьМодально();

		Если Договор <> Неопределено Тогда
			Элемент.Значение = Договор;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Склады") Тогда

		// Уберем из выбора НТТ
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ПолучателиСкидкиПолучательНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "Подбор" в командной панели "ПолучателиСкидки".
//
Процедура КоманднаяПанельПолучателиСкидкиПодбор(Кнопка)

	ДействиеПодбор(ПолучателиСкидки);

КонецПроцедуры // КоманднаяПанельПолучателиСкидкиПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля "ТипСкидкиНаценки".
//
Процедура ТипСкидкиНаценкиПриИзменении(Элемент)

	//ТипСкидки = Элемент.Значение;
	Если НЕ ЗначениеЗаполнено(ТипСкидкиНаценки) Тогда
		Возврат;
	КонецЕсли;

	// Заполним документ на основании выбранного типа.
	Если ЗначениеЗаполнено(ТипСкидкиНаценки.Валюта) Тогда
		Валюта = ТипСкидкиНаценки.Валюта;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипСкидкиНаценки.Качество) Тогда
		Качество = ТипСкидкиНаценки.Качество;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипСкидкиНаценки.ПроцентСкидкиНаценки) Тогда
		ПроцентСкидкиНаценки = ТипСкидкиНаценки.ПроцентСкидкиНаценки;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипСкидкиНаценки.ОграничениеСкидкиНаценки) Тогда
		ОграничениеСкидкиНаценки = ТипСкидкиНаценки.ОграничениеСкидкиНаценки;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипСкидкиНаценки.Условие) Тогда
		Условие = ТипСкидкиНаценки.Условие;

		Если ЗначениеЗаполнено(ТипСкидкиНаценки.ЗначениеУсловия) Тогда
			ЗначениеУсловия = ТипСкидкиНаценки.ЗначениеУсловия;
		Иначе
			ИзменитьТипЗначенияУсловия();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипСкидкиНаценки.ВидСкидки) Тогда
		ВидСкидки = ТипСкидкиНаценки.ВидСкидки;
		ПриИзмененииВидаСкидок();
	КонецЕсли;

	Если ЗначениеЗаполнено(ТипСкидкиНаценки.ОбщееВремяНачала) Тогда
		ОбщееВремяНачала = ТипСкидкиНаценки.ОбщееВремяНачала;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипСкидкиНаценки.ОбщееВремяОкончания) Тогда
		ОбщееВремяОкончания = ТипСкидкиНаценки.ОбщееВремяОкончания;
	КонецЕсли;

	Если ТипСкидкиНаценки.ВремяПоДнямНедели.Количество() = 7 Тогда
		ВремяПоДнямНедели.Загрузить(ТипСкидкиНаценки.ВремяПоДнямНедели.Выгрузить());
	КонецЕсли;

	ДляВсейНоменклатуры = ТипСкидкиНаценки.ДляВсейНоменклатуры;
	ДляВсехПолучателей = ТипСкидкиНаценки.ДляВсехПолучателей;
	ПоДнямНедели = ТипСкидкиНаценки.ПоДнямНедели;

	УстановитьВидимость();

КонецПроцедуры // ТипСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ДляВсейНоменклатуры".
//
Процедура ДляВсейНоменклатурыПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ДляВсейНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ПоДнямНедели".
//
Процедура ПоДнямНеделиПриИзменении(Элемент)

	УстановитьВидимость();

	Если Элемент.Значение Тогда
		Если ВремяПоДнямНедели.Количество() = 0 Тогда
			Для Сч = 0 По 6 Цикл
				СтрокаДень = ВремяПоДнямНедели.Добавить();
				СтрокаДень.ДеньНедели     = Перечисления.ДниНедели[Сч];
				СтрокаДень.ВремяНачала    = '00010101000000';
				СтрокаДень.ВремяОкончания = '00010101235959';
				СтрокаДень.Выбран         = Истина;
			КонецЦикла;

			ОбщееВремяНачала = '00010101000000';
			ОбщееВремяОкончания = '00010101235959';
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоДнямНеделиПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ДляВсехПолучателей".
//
Процедура ДляВсехПолучателейПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ДляВсехПолучателейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ВидСкидки".
//
Процедура ВидСкидкиПриИзменении(Элемент)

	ПриИзмененииВидаСкидок();

КонецПроцедуры // ВидСкидкиПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "ВидСкидки".
//
Процедура ВидСкидкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение <> ВидСкидки И ПолучателиСкидки.Количество() > 0 Тогда
		Ответ = Вопрос("При изменении вида скидки табличная часть ""Получатели скидки"" документа будет очищена."
		   + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПолучателиСкидки.Очистить();
		Иначе // отказ от выбора
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВидСкидкиОбработкаВыбора()

// Процедура - обработчик события "ПриНачалеРедактирования" поля "ПолучателиСкидки".
//
Процедура ПолучателиСкидкиПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если ВидСкидки = Перечисления.ВидыСкидок.Розничная Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Получатель) <> Тип("СправочникСсылка.Склады") Тогда
			Элемент.ТекущиеДанные.Получатель = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ВидСкидки = Перечисления.ВидыСкидок.Оптовая Тогда
		Если ТипЗнч(Элемент.ТекущиеДанные.Получатель) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Элемент.ТекущиеДанные.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Сообщить("Выберите вид скидки!");
	КонецЕсли;

КонецПроцедуры // ПолучателиСкидкиПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля "Условие".
//
Процедура УсловиеПриИзменении(Элемент)

	ИзменитьТипЗначенияУсловия();
	УстановитьВидимость();

КонецПроцедуры // УсловиеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОбщееВремяНачало".
//
Процедура ОбщееВремяНачалоПриИзменении(Элемент)

	ИзменитьВремя(Элемент);

КонецПроцедуры // ОбщееВремяНачалоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОбщееВремяОкончание".
//
Процедура ОбщееВремяОкончаниеПриИзменении(Элемент)

	ИзменитьВремя(Элемент);

КонецПроцедуры // ОбщееВремяОкончаниеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ВремяПоДнямНеделиВремяНачала".
//
Процедура ВремяПоДнямНеделиВремяНачалаПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ВремяПоДнямНедели.ТекущиеДанные;

	Если ТекущаяСтрока.ВремяНачала > ТекущаяСтрока.ВремяОкончания Тогда
		ТекущаяСтрока.ВремяОкончания = ТекущаяСтрока.ВремяНачала;
	КонецЕсли;

КонецПроцедуры // ВремяПоДнямНеделиВремяНачалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ВремяПоДнямНеделиВремяОкончания".
//
Процедура ВремяПоДнямНеделиВремяОкончанияПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ВремяПоДнямНедели.ТекущиеДанные;

	Если ТекущаяСтрока.ВремяНачала > ТекущаяСтрока.ВремяОкончания Тогда
		ТекущаяСтрока.ВремяНачала = ТекущаяСтрока.ВремяОкончания;
	КонецЕсли;

КонецПроцедуры // ВремяПоДнямНеделиВремяОкончанияПриИзменении()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);

КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 
 
// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "Ценовые группы".
//
Процедура ЦеновыеГруппыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;

		ТекущаяСтрока.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
		ТекущаяСтрока.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
		ТекущаяСтрока.Качество = Качество;
	КонецЕсли;

КонецПроцедуры // ЦеновыеГруппыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" реквизита "Валюта".
//
Процедура ВалютаПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ВалютаПриИзменении()

// Процедура - обработчик события "ПриИзменении" реквизита "Контрагент" в ТЧ "Получатели скидки".
//
Процедура ПолучателиСкидкиКонтрагентПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ПолучателиСкидки.ТекущиеДанные;

	Если ТекущаяСтрока.Контрагент <> ТекущаяСтрока.Получатель.Владелец Тогда
		ТекущаяСтрока.Получатель = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ПолучателиСкидкиКонтрагентПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
мКолонкиБонусы = ЭлементыФормы.Бонусы.Колонки;
мКолонкиЦеновыеГруппы = ЭлементыФормы.ЦеновыеГруппы.Колонки;

мУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);

