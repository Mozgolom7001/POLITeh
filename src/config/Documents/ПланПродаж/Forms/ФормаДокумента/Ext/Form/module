////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мМожноМенятьЦенуВДокументе; // Устанавливается в значение "Истина", если пользователю можно менять цену в документе
Перем мФормаПодбораПоНоменклатурнымГруппам; // Хранит текущую форму подбора номенклатурных групп
Перем мТекущийСценарий; // Хранит текущий сценарий
Перем мКолонкиСоставПлана; // Хранит колонки табличного поля "СоставПлана"

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СоставПлана,ЭлементыФормы.КоманднаяПанельСоставПлана.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");
	СписокЗапросов.Добавить("РасходЦеныПлановойСебестоимостиНоменклатуры", "По ценам плановой себестоимости");
	СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
	СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
	
	Если Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		
		ФормаПодбора = Справочники.НоменклатурныеГруппы.ПолучитьФорму("ФормаПодбора", ЭтаФорма, ЭтаФорма);
		
		ФормаПодбора.РазрешитьСоединятьОкно = Истина;
		ФормаПодбора.СоединяемоеОкно = Истина;
		ФормаПодбора.РазрешитьСостояниеПрикрепленное = Истина;
		ФормаПодбора.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Право;
		ФормаПодбора.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное;
		ФормаПодбора.РазрешитьСостояниеОбычное = Ложь;
		ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
		ФормаПодбора.МножественныйВыбор = Истина;
		ФормаПодбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		ФормаПодбора.РежимВыбора = Истина;
		
		ФормаПодбора.Открыть();
		
		мФормаПодбораПоНоменклатурнымГруппам = ФормаПодбора;
		
	Иначе

		СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
		ПредставлениеДок = Метаданные().Представление();

		СтруктураПараметровПодбора = Новый Структура();
		СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьСоставПлана");
		СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

		// Параметры запросов.
		СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата));
		СтруктураПараметровПодбора.Вставить("ТипЦен"                 , ТипЦен);
		СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
		СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);
		СтруктураПараметровПодбора.Вставить("Контрагент"             , Неопределено);
		СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"     , Неопределено);
		СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , мМожноМенятьЦенуВДокументе);
		СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , Ложь);
		СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , ВалютаДокумента);
		СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
		СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер);

		РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());
		
	КонецЕсли;

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора номенклатуры данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораНоменклатура(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены, Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены", ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", Количество);
	ЗначениеВыбора.Свойство("Цена", Цена);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	Если Номенклатура.Услуга Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		
	Иначе
		
		СтруктураОтбора = Новый Структура("ЕдиницаИзмерения, ХарактеристикаНоменклатуры", ЕдиницаИзмерения, Характеристика);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.Количество = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Пересчитаем цену в валюту документа.
		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

		СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ТипЦен.ЦенаВключаетНДС, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.СоставПлана.ТекущаяСтрока = СтрокаТабличнойЧасти;
	
	Попытка // На случай, если колонка не видима, отключена программно
		
		ЭлементыФормы.СоставПлана.ТекущаяКолонка = мКолонкиСоставПлана["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбораНоменклатура()

// Производит заполнение документа переданными из формы подбора номенклатурной группы данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатурной группы;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораНоменклатурнойГруппы(ТабличнаяЧасть, ЗначениеВыбора)

	Перем НоменклатурнаяГруппа, Количество;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ЗначениеВыбора.Свойство("Количество", Количество);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура("Номенклатура, ЕдиницаИзмерения", НоменклатурнаяГруппа, НоменклатурнаяГруппа.ЕдиницаХраненияОстатков);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = НоменклатурнаяГруппа;
		СтрокаТабличнойЧасти.Количество = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = НоменклатурнаяГруппа.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.СоставПлана.ТекущаяСтрока = СтрокаТабличнойЧасти;
	
	Попытка // На случай, если колонка не видима, отключена программно
		
		ЭлементыФормы.СоставПлана.ТекущаяКолонка = мКолонкиСоставПлана["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбораНоменклатурнойГруппы()

// Процедура предназначена для установки текста надписи ДатаПланирования
//
//
Процедура ТекстПериодичности()

	ЭлементыФормы.НадписьДатаПланирования.Заголовок = "Дата планирования (период-ть: "+Сценарий.Периодичность+"):";

КонецПроцедуры // ТекстПериодичности()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "СоставПлана", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьИДоступность()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиСоставПлана.СтавкаНДС.Видимость Тогда
		
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.СтавкаНДС, УчитыватьНДС);
		
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиСоставПлана.СуммаНДС.Видимость Тогда
		
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.СуммаНДС, УчитыватьНДС);
		
	КонецЕсли;
	
	// Установить видимость колонки "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиСоставПлана);

	УстановитьДоступКСуммамИКоличеству();
	УстановитьДоступКХарактеристикеНоменклатуры();
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");

КонецПроцедуры // УстановитьВидимостьИДоступность()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "СоставПлана"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(СоставПлана.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) И ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента + ВалютаДокумента + " = " + КурсДокумента + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ТипЦен) Тогда
		
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
		
	Иначе
		
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
		
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьСоставПланаИтоги.Заголовок = ВременнаяСтрока;

	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ВалютаДокумента) +"):";
		
	Иначе
		
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		
	Иначе
		
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

Процедура УстановитьДоступКСуммамИКоличеству()
	
	Если НЕ ЗначениеЗаполнено(мТекущийСценарий) Тогда
		
		Возврат;
		
	КонецЕсли; 

	// установим для сумм
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.Сумма, мТекущийСценарий.УчетПоСуммам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.СтавкаНДС, мТекущийСценарий.УчетПоСуммам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.СуммаНДС, мТекущийСценарий.УчетПоСуммам);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.Всего, мТекущийСценарий.УчетПоСуммам);
	
	мКолонкиСоставПлана.Всего.ИзменятьВидимость = мТекущийСценарий.УчетПоСуммам;

	// установим для количества
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.ЕдиницаИзмерения, мТекущийСценарий.УчетПоКоличеству);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.Коэффициент, мТекущийСценарий.УчетПоКоличеству);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.Количество, мТекущийСценарий.УчетПоКоличеству);

	// установим для цены
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.Цена, мТекущийСценарий.УчетПоСуммам И мТекущийСценарий.УчетПоКоличеству);

КонецПроцедуры // УстановитьДоступКСуммамИКоличеству()

Процедура УстановитьДоступКХарактеристикеНоменклатуры()
	
	ИспользоватьХарактеристики = глЗначениеПеременной("ИспользоватьХарактеристикиНоменклатуры");
	
	Если НЕ ЗначениеЗаполнено(мТекущийСценарий) Тогда
		
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.ХарактеристикаНоменклатуры, ИспользоватьХарактеристики);
		мКолонкиСоставПлана.ХарактеристикаНоменклатуры.ИзменятьВидимость = Истина;
		
	Иначе
		
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиСоставПлана.ХарактеристикаНоменклатуры, ИспользоватьХарактеристики И мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура);
		мКолонкиСоставПлана.ХарактеристикаНоменклатуры.ИзменятьВидимость = ИспользоватьХарактеристики И мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура;
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьДоступКХарактеристикеНоменклатуры()

Процедура УстановитьВозможностьИзмененияВидимости()

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиСоставПлана, СтруктураКолонок);

КонецПроцедуры // УстановитьВозможностьИзмененияВидимости()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	Если ЭтоНовый() Тогда

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("ВалютаУправленческогоУчета"), "Продажа", ПараметрОбъектКопирования, ПараметрОснование);

	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиСоставПлана);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийСценарий      = Сценарий;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВозможностьИзмененияВидимости();
	УстановитьВидимостьИДоступность();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.СоставПлана.Колонки.Цена.ЭлементУправления.ТолькоПросмотр     = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.СоставПлана.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр    = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.СоставПлана.Колонки.СуммаНДС.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	ТекстПериодичности();

	Если Не ЭтоНовый() Тогда		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;
	
	Если Источник = мФормаПодбораПоНоменклатурнымГруппам Тогда
		
		ОбработкаПодбораНоменклатурнойГруппы(СоставПлана, ЗначениеВыбора);
		
	Иначе
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
			
			ЗначениеВыбора.Свойство("Команда", Команда);

			Если Команда = "ПодборВТабличнуюЧастьСоставПлана" Тогда
				
				ОбработкаПодбораНоменклатура(СоставПлана, ЗначениеВыбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

//Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	мФормаПодбораПоНоменклатурнымГруппам = Неопределено;

КонецПроцедуры //ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели формы,
// вызывает сервисный механизм для изменения общих для всей табличной части "СоставПлана"
// реквизитов - таких, например, как тип цен, валюта и т. д.
//
Процедура ДействияФормыДействиеЦеныВалюта(Кнопка)
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	СтруктураНедоступныхРеквизитов = Новый Структура;
	СтруктураНедоступныхРеквизитов.Вставить("УсловиеПродаж");

	Если ЗначениеЗаполнено(Сценарий) И Сценарий.ДетализацияПланирования <> Перечисления.ДетализацияПланирования.Номенклатура Тогда
		
		СтруктураНедоступныхРеквизитов.Вставить("ТипЦен");
		
	КонецЕсли; 

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураНедоступныхРеквизитов, "СоставПлана");

	Если СтруктураЗначений <> Неопределено Тогда

		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "СоставПлана", мВалютаРегламентированногоУчета, , СтруктураЗначений);

	КонецЕсли;

	УстановитьВидимостьИДоступность();

КонецПроцедуры // ДействияФормыДействиеЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "СоставПлана", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "СоставПлана".
//
Процедура КоманднаяПанельСоставПланаДействиеПодбор(Кнопка)

	ДействиеПодбор(СоставПлана);

КонецПроцедуры // КоманднаяПанельСоставПланаДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "СоставПлана", вызывает сервисный механизм для заполнения
// табличной части  "СоставПлана".
//
Процедура КоманднаяПанельСоставПланаДействиеЗаполнить(Кнопка)
	
	ПомощникПланирования = Обработки.ПомощникПланирования.ПолучитьФорму(, ЭтаФорма);
	
	Если ПомощникПланирования.Открыта() Тогда
		
		ПомощникПланирования.Активизировать();
		Ответ = Вопрос("Предыдущая операция заполнения плана продаж не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ПомощникПланирования.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ПомощникПланирования.мДокумент = ЭтотОбъект;
	
	ПомощникПланирования.Открыть();
	
КонецПроцедуры // КоманднаяПанельСоставПланаДействиеЗаполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаПланирования
//
Процедура ДатаПланированияПриИзменении(Элемент)

	УправлениеПланированием.ВыровнятьДатуПоНачалуПериода(ДатаПланирования, Сценарий.Периодичность);

КонецПроцедуры // ДатаПланированияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Сценарий
//
Процедура ПриИзмененииСценария(Элемент)
	
	Если (НЕ мТекущийСценарий.ДетализацияПланирования = Сценарий.ДетализацияПланирования) И
		(НЕ (НЕ ЗначениеЗаполнено(мТекущийСценарий) И Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура)) И
		(НЕ (НЕ ЗначениеЗаполнено(Сценарий) И мТекущийСценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.Номенклатура)) Тогда
		
		Если СоставПлана.Количество() > 0 Тогда
			
			КодВозврата = Вопрос(
			"Выбран сценарий с детализацией планирования """ + Сценарий.ДетализацияПланирования + """." + Символы.ПС +
			"Детализацией планирования текущего сценария """ + мТекущийСценарий.ДетализацияПланирования + """." + Символы.ПС +
			"Принять изменение и очистить табличную часть?", РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.Отмена);
			
			Если КодВозврата = КодВозвратаДиалога.ОК Тогда
				
				СоставПлана.Очистить();
				
			Иначе
				
				Сценарий = мТекущийСценарий;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущийСценарий = Сценарий;

	ТекстПериодичности();
	УправлениеПланированием.ВыровнятьДатуПоНачалуПериода(ДатаПланирования, Сценарий.Периодичность);

	// установки по типу планируемых показателей
	УстановитьВидимостьИДоступность();

КонецПроцедуры // ПриИзмененииСценария()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СоставПлана

// Процедура - обработчик события "ПриПолученииДанных" табличной части "СоставПлана".
//
Процедура СоставПланаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ВсегоВидимость = Элемент.Колонки.Всего.Видимость;
	
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
			
		Если ВсегоВидимость Тогда
			
			ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ОформлениеСтроки.ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ОформлениеСтроки.ДанныеСтроки.СуммаНДС)));
				
		КонецЕсли;
	
		РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиСоставПлана, ОформлениеСтроки.Ячейки, ОформлениеСтроки.ДанныеСтроки.Номенклатура);
				
	КонецЦикла;
		
КонецПроцедуры // СоставПланаПриПолученииДанных()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СоставПлана.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // СоставПланаНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.СоставПлана.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // СоставПланаХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ХарактеристикаНоменклатуры"
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаХарактеристикаНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.ВыборПоВладельцу) = Тип("СправочникСсылка.НоменклатурныеГруппы") ИЛИ Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для номенклатурных групп не ведется учет по характеристикам!");
		
	КонецЕсли;
	
КонецПроцедуры // СоставПланаХарактеристикаНоменклатурыНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // СоставПланаЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.СоставПлана.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // СоставПланаЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // СоставПланаКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // СоставПланаСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"СоставПлана");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.СоставПлана.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // СоставПланаСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "СоставПлана".
//
Процедура СоставПланаПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
		
		Если Сценарий.ДетализацияПланирования = Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
			
			Элемент.ТекущиеДанные.Номенклатура = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
			
		Иначе
			
			Элемент.ТекущиеДанные.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // СоставПланаПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент"
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаКонтрагентПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СоставПлана.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
		
		СтрокаТабличнойЧасти.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	ИначеЕсли СтрокаТабличнойЧасти.Контрагент <> СтрокаТабличнойЧасти.Договор.Владелец Тогда
		
		СтрокаТабличнойЧасти.Договор = ОбщегоНазначения.ПолучитьОсновнойДоговорКонтрагента(СтрокаТабличнойЧасти.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры // СоставПланаКонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Договор"
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СоставПлана.ТекущиеДанные;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.Договор, СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // СоставПланаДоговорНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "СоставПлана".
//
Процедура СоставПланаЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СоставПлана.ТекущиеДанные;
	
	МассивОтборов = Новый Массив;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		
		МассивОтборов.Добавить(Новый Структура("Имя, Значение, Доступность", "ДоговорКонтрагента", СтрокаТабличнойЧасти.Договор, Истина));
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
		
		МассивОтборов.Добавить(Новый Структура("Имя, Значение, Доступность", "Контрагент", СтрокаТабличнойЧасти.Контрагент, Истина));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		МассивОтборов.Добавить(Новый Структура("Имя, Значение, Доступность", "Подразделение", Подразделение, Истина));
		
	КонецЕсли;

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов, "СоставПлана");
	
КонецПроцедуры // СоставПланаЗаказНачалоВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "СоставПлана".
//
Процедура СоставПланаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "СоставПлана".
//
Процедура СоставПланаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "СоставПлана");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиСоставПлана = ЭлементыФормы.СоставПлана.Колонки;

