////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

Перем мКолонкиТовары;

Перем мОтражатьВРегламентированномУчете;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 
Перем мТекущийДоговорКонтрагентаРегл;

Перем мТекущаяПошлинаВВалюте;
Перем мТекущийНДСВВалюте;
Перем мТекущаяТаможеннаяСтоимостьВВалютеРеглУчета;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Вычисляем суммы по данному разделу.
//
//  Раздел - строка табличной части, определяет раздел, по которому надо посчитать суммы.
//
Процедура ВычислимСуммы(Раздел)

	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	
	НомерРаздела = Разделы.Индекс(Раздел) + 1;
	
	ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	ЭлементыФормы.Всего.Значение        = ОбщегоНазначения.ФорматСумм(ВсегоСтоимость);
	ЭлементыФормы.ВсегоПошлина.Значение = ОбщегоНазначения.ФорматСумм(ВсегоПошлина);
	ЭлементыФормы.ВсегоНДС.Значение     = ОбщегоНазначения.ФорматСумм(ВсегоНДС);

	Раздел.ТаможеннаяСтоимость = ВсегоСтоимость;
	
	Раздел.СуммаПошлины = 
	       РассчитатьСуммуПошлиныГТД(Раздел.ТаможеннаяСтоимость, Раздел.ТаможеннаяСтоимостьВВалютеРеглУчета, Раздел.СтавкаПошлины, Раздел.ПошлинаВВалюте);

	Раздел.СуммаНДС = 
	       РассчитатьСуммуНДСГТД(Раздел.ТаможеннаяСтоимость, Раздел.ТаможеннаяСтоимостьВВалютеРеглУчета, Раздел.СуммаПошлины, Раздел.ПошлинаВВалюте, Раздел.СтавкаНДС, Раздел.НДСВВалюте);

КонецПроцедуры // ВычислимСуммы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Очищает значения в колонке таблицы значений "Товары" по номеру раздела.
//
// Параметры
//  НомерРаздела    - число, номер раздела,
//  ИмяКолонки      - строка, имя колонки табличной части "Товары",
//  ЗначениеОчистки - значение для заполнения.
//
Процедура ОчиститьКолонкуПоРазделу(НомерРаздела, ИмяКолонки, ЗначениеОчистки = 0)

	МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));

	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ЭлементМассива[ИмяКолонки] = ЗначениеОчистки;
	КонецЦикла;

КонецПроцедуры // ПосчитатьИтогиПоРазделу()

// Считает итоги по ТЧ Товары и выводит строку в подвале.
//
// Параметры
//  Раздел          - строка табличной части, определяет раздел, по которому надо посчитать суммы.
//  ВсегоСтоимость  – число, в этот параметр будет возвращен итог по колонке "ФактурнаяСтоимость",
//  ВсегоПошлина    – число, в этот параметр будет возвращен итог по колонке "СуммаПошлины",
//  ВсегоНДС        – число, в этот параметр будет возвращен итог по колонке "СуммаНДС",
//
Процедура ПосчитатьИтогиПоТОварам(Раздел, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС)
	
	НомерРаздела = Разделы.Индекс(Раздел) + 1;
	
	ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	ЭлементыФормы.Всего.Значение        = ОбщегоНазначения.ФорматСумм(ВсегоСтоимость);
	ЭлементыФормы.ВсегоПошлина.Значение = ОбщегоНазначения.ФорматСумм(ВсегоПошлина);
	ЭлементыФормы.ВсегоНДС.Значение     = ОбщегоНазначения.ФорматСумм(ВсегоНДС);

КонецПроцедуры // ПосчитатьИтогиПоТоварам()

// Рассчитывает сумму таможенной пошлины.
//
// Параметры
//  ТаможеннаяСтоимость        - число, величина таможенной стоимости в валюте документа,
//  ТаможеннаяСтоимостьВРублях - булево, признак того, что таможенная стоимость задается в рублях, иначе - в валюте документа,
//  СтавкаПошлины              - число, ставка пошлины, 
//  ПошлинаВВалюте             - булево, признак того, что пошлину надо платить в валюте основного договора с таможней.
//
// Возвращаемое значение:
//   Число  – сумма пошлины.
//
Функция РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, ТаможеннаяСтоимостьВРублях, СтавкаПошлины, ПошлинаВВалюте)


	Если ТаможеннаяСтоимостьВРублях Тогда 
		ВалютаТаможеннойСтоимости    = мВалютаРегламентированногоУчета;
		КурсТаможеннойСтоимости      = 1;
		КратностьТаможеннойСтоимости = 1;
	Иначе
		ВалютаТаможеннойСтоимости    = ВалютаДокумента;
		КурсТаможеннойСтоимости      = КурсДокумента;
		КратностьТаможеннойСтоимости = КратностьДокумента;
	КонецЕсли;
	

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) 
	   И ВалютаТаможеннойСтоимости = ВалютаДокумента Тогда

		Предупреждение("Не выбрана валюта документа!");
		ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;
	
	ИначеЕсли ПошлинаВВалюте Тогда

		Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда

			Предупреждение("Не выбран договор с таможней, который определяет валюту таможенных платежей!");
			ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;

		Иначе

			ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
			                         ВалютаТаможеннойСтоимости, мТекущаяВалютаВзаиморасчетов, КурсТаможеннойСтоимости,
			                         КурсВзаиморасчетов, КратностьТаможеннойСтоимости, КратностьВзаиморасчетов);
		КонецЕсли;

	
	Иначе

		ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
		                         ВалютаТаможеннойСтоимости, мВалютаРегламентированногоУчета,
		                         КурсТаможеннойСтоимости,1,
		                         КратностьТаможеннойСтоимости, 1);

	КонецЕсли;

	Возврат ТаможеннаяСтоимостьВал * СтавкаПошлины / 100;

КонецФункции // РассчитатьСуммуПошлиныГТД()

// Рассчитывает сумму таможенной пошлины.
//
// Параметры
//  ТаможеннаяСтоимость        -  число, величина таможенной стоимости в валюте документа,
//  ТаможеннаяСтоимостьВРублях - булево, признак того, что таможенная стоимость задается в рублях, иначе - в валюте документа,
//  СуммаПошлины               - число, сумма пошлины, 
//  СтавкаПошлины              - число, ставка пошлины, 
//  ПошлинаВВалюте             - булево, признак того, что пошлина в валюте основного договора с таможней (иначе в валюте регл. учета).
//  СтавкаНДС                  - ссылка на перечисление, определяющая ставку НДС, 
//  НДСВВалюте                 - булево, признак того, что НДС надо считать в валюте основного договора с таможней (иначе в валюте регл. учета).
//
// Возвращаемое значение:
//   Число  – сумма НДС.
//
Функция РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, ТаможеннаяСтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте)

	Если ТаможеннаяСтоимостьВРублях Тогда 
		ВалютаТаможеннойСтоимости    = мВалютаРегламентированногоУчета;
		КурсТаможеннойСтоимости      = 1;
		КратностьТаможеннойСтоимости = 1;
	Иначе
		ВалютаТаможеннойСтоимости    = ВалютаДокумента;
		КурсТаможеннойСтоимости      = КурсДокумента;
		КратностьТаможеннойСтоимости = КратностьДокумента;
	КонецЕсли;
	

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) 
	   И ВалютаТаможеннойСтоимости = ВалютаДокумента Тогда

		Предупреждение("Не выбрана валюта документа!");
		БазаНДС = 0;

	ИначеЕсли НДСВВалюте Тогда  // Надо все пересчитать в валюту расчетов с таможней.

		Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
			Предупреждение("Не выбран договор с таможней, который определяет валюту таможенных платежей!");
			ТаможеннаяСтоимостьВал = ТаможеннаяСтоимость;

		Иначе

			ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
			                         ВалютаТаможеннойСтоимости, мТекущаяВалютаВзаиморасчетов, КурсТаможеннойСтоимости,
			                         КурсВзаиморасчетов, КратностьТаможеннойСтоимости, КратностьВзаиморасчетов);
		КонецЕсли;

		Если ПошлинаВВалюте Тогда
			СуммаПошлиныВал = СуммаПошлины;
		Иначе
			СуммаПошлиныВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
			                   мВалютаРегламентированногоУчета, мТекущаяВалютаВзаиморасчетов,
			                   1, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов);
		КонецЕсли;

		БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал;
	
	Иначе // Надо все пересчитать в валюту регл. учета.

		ТаможеннаяСтоимостьВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
		                         ВалютаТаможеннойСтоимости, мВалютаРегламентированногоУчета,
		                         КурсТаможеннойСтоимости,1,
		                         КратностьТаможеннойСтоимости, 1);

		Если ПошлинаВВалюте Тогда

			СуммаПошлиныВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
			                   мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета,
			                   КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
		Иначе
			СуммаПошлиныВал = СуммаПошлины;
		КонецЕсли;

		БазаНДС = ТаможеннаяСтоимостьВал + СуммаПошлиныВал;
	
	КонецЕсли;

	Возврат УчетНДС.РассчитатьСуммуНДС(БазаНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС)); // УчитыватьНДС, Сумма не включает НДС.

КонецФункции // РассчитатьСуммуНДСГТД()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	Валюта  = ВалютаДокумента;
	ИмяТабличнойЧасти = "Товары";
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);
	
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("НомерРаздела",               НомерРаздела);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.НомерРаздела     = НомерРаздела;
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ЭлементыФормы["Товары"].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы["Товары"].ТекущаяКолонка = ЭлементыФормы["Товары"].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит пересчет суммы разделов
//
Процедура ПересчитатьСуммыРазделов()

	ИзменитьВалютуТаможеннойСтоимости = (НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ (ВалютаДокумента = мВалютаРегламентированногоУчета));
	
	// рассчитаем недостающие реквизиты
	Для Каждого СтрокаТабличнойЧасти Из Разделы Цикл
		
		// Валюта таможенной стоимости
		Если ИзменитьВалютуТаможеннойСтоимости Тогда
			СтрокаТабличнойЧасти.ТаможеннаяСтоимостьВВалютеРеглУчета = Истина;
		КонецЕсли;
		
		// Посчитаем суммы
		ВычислимСуммы(СтрокаТабличнойЧасти);
		
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора(ИмяРеквизита)

	ДоговорВал = Истина;
	текДоговор = ДоговорКонтрагента;
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ДоговорВал = Ложь;
		текДоговор = ДоговорКонтрагентаРегл;
	КонецЕсли;
	
	Если ИмяРеквизита="ДоговорКонтрагентаРегл" и ДоговорВал Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = текДоговор.Владелец;
	КонецЕсли;

	НоваяВалютаВзаиморасчетов = текДоговор.ВалютаВзаиморасчетов;
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалютаВзаиморасчетов, Дата);

	Если ДоговорВал Тогда
		Если ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов)
		   И ЗначениеЗаполнено(НоваяВалютаВзаиморасчетов)
		   И (ЗначениеЗаполнено(ТаможенныйСборВал)
			 Или ЗначениеЗаполнено(ТаможенныйШтрафВал))
		   И (мТекущаяВалютаВзаиморасчетов <> НоваяВалютаВзаиморасчетов) Тогда

			Ответ = Вопрос("Изменилась валюта таможенных платежей. Пересчитать суммы таможенного сбора и штрафа? ", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда

				ТаможенныйСборВал  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможенныйСборВал, мТекущаяВалютаВзаиморасчетов, НоваяВалютаВзаиморасчетов,
				                                               КурсВзаиморасчетов, СтруктураКурса.Курс, КратностьВзаиморасчетов, СтруктураКурса.Кратность);
			
				ТаможенныйШтрафВал = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможенныйШтрафВал, мТекущаяВалютаВзаиморасчетов, НоваяВалютаВзаиморасчетов,
				                                               КурсВзаиморасчетов, СтруктураКурса.Курс, КратностьВзаиморасчетов, СтруктураКурса.Кратность);
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Присвоим новые значения
	мТекущаяВалютаВзаиморасчетов = НоваяВалютаВзаиморасчетов;
	КурсВзаиморасчетов           = СтруктураКурса.Курс;
	КратностьВзаиморасчетов      = СтруктураКурса.Кратность;

	// Установим заголовки по новой валюте взаиморасчетов:
	ПоменятьНадписи();

	УстановитьВидимость();
	
	Если (ЗначениеЗаполнено(ДоговорКонтрагента) И ЗначениеЗаполнено(ВалютаДокумента)) ИЛИ ЗначениеЗаполнено(ДоговорКонтрагентаРегл) Тогда
		ПересчитатьСуммыРазделов();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

// Заполняет рублевый договор по выбранным контрагенту и организации.
//
Процедура ЗаполнитьДоговорРегл()
	Если ЗначениеЗаполнено(Организация) Тогда
		Если Не ЗначениеЗаполнено(ДоговорКонтрагентаРегл)
		 Или ДоговорКонтрагентаРегл.Организация <> Организация Тогда
			ДоговорКонтрагентаРегл = ЗаполнениеДокументов.ПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, мСтруктураПараметровДляПолученияДоговораРегл);
		КонецЕсли;
	Иначе
		ДоговорКонтрагентаРегл = Неопределено;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьДоговорРегл()



// Процедура добавляет строку в ТЧ Разделы и заполняет ее значениями по умолчанию.
//
Процедура ДобавитьРазделГТД()

	ЭлементыФормы.Разделы.ТекущаяСтрока = ДобавитьРаздел();
	УстановитьСтраницуПоРазделамГТД();

КонецПроцедуры // ДобавитьРазделГТД()

// Определяет, какую страницу нужно показывать по разделам ГТД.
//
Процедура УстановитьСтраницуПоРазделамГТД()

//	РаботаСДиалогами.УстановитьТекущуюСтраницу("ПанельРазделов",ЭлементыФормы.ОсновнаяПанель);

	Если Разделы.Количество() < 2 Тогда // есть только один раздел
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ОдинРаздел", ЭлементыФормы.ПанельРазделов);

	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("НесколькоРазделов", ЭлементыФормы.ПанельРазделов);

	КонецЕсли;

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Использование = Истина;
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Значение      = НомерРаздела;
	
КонецПроцедуры // УстановитьСтраницуПоРазделамГТД()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Формирует заголовок исходя из переданной валюты (добавляет валюту в конец заголовка).
//
// Параметры
//  ТекстЗаголовка  – строка, текст заголовка,
//  Валюта          – ссылка на справочник валют.
//
Функция СформироватьЗаголовокПоВалюте(ТекстЗаголовка, Валюта)

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТекстЗаголовка  = ТекстЗаголовка + " (<>):";
	Иначе
		ТекстЗаголовка  = ТекстЗаголовка + " (" + СокрЛП(Валюта) + "):";
	КонецЕсли;

	Возврат ТекстЗаголовка;

КонецФункции // СформироватьЗаголовокПоВалюте()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки = ЭлементыФормы.Товары.Колонки;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность для тех элементов формы, доступность которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступность()

	ДоступностьВалютыТаможеннойСтоимости = НЕ (НЕ ЗначениеЗаполнено(ВалютаДокумента) ИЛИ (ВалютаДокумента = мВалютаРегламентированногоУчета));

	ЭлементыФормы.Разделы.Колонки.ТаможеннаяСтоимостьВВалютеРеглУчета.Доступность = ДоступностьВалютыТаможеннойСтоимости;
	ЭлементыФормы.ТаможеннаяСтоимостьВВалютеРеглУчета.Доступность                 = ДоступностьВалютыТаможеннойСтоимости;

КонецПроцедуры // УстановитьДоступность()

// Формирует надписи элементов формы, в частности при смене валют
//
Процедура ПоменятьНадписи()

	Если ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте Тогда
		ЭлементыФормы.НадписьСуммаПошлины.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина", мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.Товары.Колонки.СуммаПошлины.ТекстШапки  = СформироватьЗаголовокПоВалюте("Пошлина", мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.НадписьВсегоПошлина.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина", мТекущаяВалютаВзаиморасчетов);
	Иначе
		ЭлементыФормы.НадписьСуммаПошлины.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина",мВалютаРегламентированногоУчета);
		ЭлементыФормы.Товары.Колонки.СуммаПошлины.ТекстШапки  = СформироватьЗаголовокПоВалюте("Пошлина", мВалютаРегламентированногоУчета);
		ЭлементыФормы.НадписьВсегоПошлина.Заголовок           = СформироватьЗаголовокПоВалюте("Пошлина", мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте Тогда
		ЭлементыФормы.НадписьСуммаНДС.Заголовок           = СформироватьЗаголовокПоВалюте("НДС",мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.Товары.Колонки.СуммаНДС.ТекстШапки  = СформироватьЗаголовокПоВалюте("НДС", мТекущаяВалютаВзаиморасчетов);
		ЭлементыФормы.НадписьВсегоНДС.Заголовок           = СформироватьЗаголовокПоВалюте("НДС", мТекущаяВалютаВзаиморасчетов);
	Иначе
		ЭлементыФормы.НадписьСуммаНДС.Заголовок           = СформироватьЗаголовокПоВалюте("НДС",мВалютаРегламентированногоУчета);
		ЭлементыФормы.Товары.Колонки.СуммаНДС.ТекстШапки  = СформироватьЗаголовокПоВалюте("НДС", мВалютаРегламентированногоУчета);
		ЭлементыФормы.НадписьВсегоНДС.Заголовок           = СформироватьЗаголовокПоВалюте("НДС", мВалютаРегламентированногоУчета);
	КонецЕсли;

	ЭлементыФормы.НадписьВсего.Заголовок                  = СформироватьЗаголовокПоВалюте("Всего", ВалютаДокумента);

	Если ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета Тогда
		ЭлементыФормы .НадписьТаможеннаяСтоимость.Заголовок = СформироватьЗаголовокПоВалюте("Таможенная стоимость", мВалютаРегламентированногоУчета);
	Иначе
		ЭлементыФормы .НадписьТаможеннаяСтоимость.Заголовок = СформироватьЗаголовокПоВалюте("Таможенная стоимость", ВалютаДокумента);
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "(" + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
	                                                                                     КурсДокумента,
	                                                                                     КратностьДокумента,
	                                                                                     мВалютаРегламентированногоУчета)+ ")";

	ЭлементыФормы.НадписьДоговорРегл.Заголовок     = СформироватьЗаголовокПоВалюте("Депозит на таможне", мВалютаРегламентированногоУчета);
	ЭлементыФормы.НадписьТаможенныйСбор.Заголовок  = СформироватьЗаголовокПоВалюте("Таможенный сбор",    мВалютаРегламентированногоУчета);
	ЭлементыФормы.НадписьТаможенныйШтраф.Заголовок = СформироватьЗаголовокПоВалюте("Таможенный штраф",   мВалютаРегламентированногоУчета);

	ЭлементыФормы.НадписьДоговор.Заголовок            = СформироватьЗаголовокПоВалюте("Валютный депозит", мТекущаяВалютаВзаиморасчетов);
	ЭлементыФормы.НадписьТаможенныйСборВал.Заголовок  = СформироватьЗаголовокПоВалюте("Таможенный сбор",            мТекущаяВалютаВзаиморасчетов);
	ЭлементыФормы.НадписьТаможенныйШтрафВал.Заголовок = СформироватьЗаголовокПоВалюте("Таможенный штраф",           мТекущаяВалютаВзаиморасчетов);

	ЭлементыФормы.РамкаТоварыРаздела.Заголовок = "Товары по разделу " + (Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1);

	Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
		ФорматнаяСтрока = "БЛ='" + СокрЛП(мВалютаРегламентированногоУчета) + "'; БИ='не выбрана'";
	Иначе
		ФорматнаяСтрока = "БЛ='" + СокрЛП(мВалютаРегламентированногоУчета) + "'; БИ='" + СокрЛП(мТекущаяВалютаВзаиморасчетов) + "'";
	КонецЕсли;

	ЭлементыФормы.Разделы.Колонки.ПошлинаВВалюте.Формат                   = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.ПошлинаВВалюте.ЭлементУправления.Формат = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.НДСВВалюте.Формат                       = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.НДСВВалюте.ЭлементУправления.Формат     = ФорматнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента)
	 ИЛИ (ВалютаДокумента = мВалютаРегламентированногоУчета) Тогда
		ФорматнаяСтрока = "БЛ='не выбрана'; БИ='" + СокрЛП(мВалютаРегламентированногоУчета) + "'";
	Иначе
		ФорматнаяСтрока = "БЛ='" + СокрЛП(ВалютаДокумента) + "'; БИ='" + СокрЛП(мВалютаРегламентированногоУчета) + "'";
	КонецЕсли;

	ЭлементыФормы.Разделы.Колонки.ТаможеннаяСтоимостьВВалютеРеглУчета.Формат                   = ФорматнаяСтрока;
	ЭлементыФормы.Разделы.Колонки.ТаможеннаяСтоимостьВВалютеРеглУчета.ЭлементУправления.Формат = ФорматнаяСтрока;

КонецПроцедуры // ПоменятьНадписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")
	   И (Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика) Тогда
		Предупреждение("Документ можно вводить только на основании документа """ + СокрЛП(ПараметрОснование.Метаданные().Представление())
		               + """ с видом операции """ + СокрЛП(Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика)
		               + """.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Покупка", ПараметрОбъектКопирования, ПараметрОснование, мСтруктураПараметровДляПолученияДоговора);

		Если Разделы.Количество() = 0 Тогда
			ДобавитьРазделГТД(); // В ГТД должен быть хотя бы один раздел.
		КонецЕсли;
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ФактурнаяСтоимость");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("СуммаПошлины");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ТаможеннаяСтоимость");
	СтруктураКолонок.Вставить("СтавкаПошлины");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаПошлины");
	СтруктураКолонок.Вставить("СуммаНДС");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Разделы.Колонки, СтруктураКолонок);
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьДоступность();

	ЭлементыФормы.Разделы.ТекущаяСтрока =Разделы[0];

	// Установим страницу по разделам ГТД.
	УстановитьСтраницуПоРазделамГТД();

	ПоменятьНадписи();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                Неопределено, Контрагент, ДоговорКонтрагента);

	Если ИмяТекСтраницы = "РазделыГТД" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// формы, вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПустаяСсылка();
	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");

	ТекущаяВалютаДокумента = ВалютаДокумента;

	СтруктураНередактируемыхРеквизитов = Новый Структура;
	СтруктураНередактируемыхРеквизитов.Вставить("УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураНередактируемыхРеквизитов
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		ПересчитатьСуммыРазделов();
		
	КонецЕсли;

	УстановитьВидимость();
	УстановитьДоступность();
	ПоменятьНадписи();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// формы, вызывает процедуру добавления раздела ГТД.
//
Процедура ДействияФормыДобавитьРаздел(Кнопка)

	ДобавитьРазделГТД();

КонецПроцедуры // ДействияФормыДобавитьРаздел()

// Процедура вызывается при нажатии кнопки "УдалитьРаздел" командной панели
// формы, вызывает процедуру добавления раздела ГТД.
//
Процедура ДействияФормыУдалитьРаздел(Кнопка)

	Если Разделы.Количество() = 1 Тогда 
		Предупреждение("В ГТД должен быть хотя бы один раздел!");
		Возврат;
	КонецЕсли;
	
	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	Разделы.Удалить(Разделы[НомерРаздела - 1]);
	
	//Надо грохнуть все записи этого раздела
	МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		Товары.Удалить(ЭлементМассива);
	КонецЦикла;
	
	// Надо переименовать все последующие разделы.
	Для Сч = НомерРаздела + 1 По Разделы.Количество()+ 1 Цикл
	
		МассивСтрок = Товары.НайтиСтроки(Новый Структура("НомерРаздела", Сч));
		КоличествоСтрок = МассивСтрок.Количество();
		Для каждого ЭлементМассива Из МассивСтрок Цикл
			ЭлементМассива.НомерРаздела = Сч - 1;
		КонецЦикла;
		
	КонецЦикла;
	
	НомерРаздела = ?(НомерРаздела > 2,НомерРаздела - 1 , 1);
	ЭлементыФормы.Разделы.ТекущаяСтрока = Разделы[НомерРаздела - 1];

	УстановитьСтраницуПоРазделамГТД();

КонецПроцедуры // ДействияФормыУдалитьРаздел()

// Процедура вызывается при нажатии кнопки "Распределить" командной панели
// ТЧ Товары, вызывает распределение сумм пошлины и НДС по строкам раздела.
//
Процедура КоманднаяПанельТоварыРаспределить(Кнопка)

	// Проверим, есть ли что распределять.
	СуммаПошлины = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	СуммаНДС     = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС;

	// Посчитаема общую помеченных позиций
	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	МассивСтрок  = Товары.НайтиСтроки(Новый Структура("НомерРаздела", НомерРаздела));

	ВсегоСтоимость = 0;
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		ВсегоСтоимость = ВсегоСтоимость + ЭлементМассива.ФактурнаяСтоимость;
	КонецЦикла;

	Если ВсегоСтоимость = 0 Тогда
		Предупреждение("Общая сумма фактурной стоимости раздела нулевая!
		               |Распределение невозможно.");
		Возврат;
	КонецЕсли;

	// Теперь рспределяем
	СтрокаМаксимальнойСуммы  = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма        = 0; // Значение максимальной суммы.
	НепогашеннаяСуммаПошлины = СуммаПошлины;
	НепогашеннаяСуммаНДС     = СуммаНДС;
	Для каждого ЭлементМассива Из МассивСтрок Цикл

		ДельтаПошлины = СуммаПошлины * ЭлементМассива.ФактурнаяСтоимость / ВсегоСтоимость;

		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаПошлины < 0 Тогда
			ДельтаПошлины = Макс(НепогашеннаяСуммаПошлины, ДельтаПошлины)
		Иначе
			ДельтаПошлины = Мин(НепогашеннаяСуммаПошлины, ДельтаПошлины)
		КонецЕсли; 

		ДельтаНДС = СуммаНДС * ЭлементМассива.ФактурнаяСтоимость / ВсегоСтоимость;

		// Если Дельта по модулю оказалась больше, чем осталось погасить
		Если ДельтаНДС < 0 Тогда
			ДельтаНДС = Макс(НепогашеннаяСуммаНДС, ДельтаНДС)
		Иначе
			ДельтаНДС = Мин(НепогашеннаяСуммаНДС, ДельтаНДС)
		КонецЕсли; 

		// Проверим текущую сумму на максимум.
		Если ЭлементМассива.ФактурнаяСтоимость > МаксимальнаяСумма  Тогда
			МаксимальнаяСумма       = ЭлементМассива.ФактурнаяСтоимость;
			СтрокаМаксимальнойСуммы = ЭлементМассива;
		КонецЕсли;

		// Учеличиваем значения.
		ЭлементМассива.СуммаПошлины = ДельтаПошлины;

		// Остаток нераспределенной суммы надо уменьшать на реальное изменение
		НепогашеннаяСуммаПошлины = НепогашеннаяСуммаПошлины - ЭлементМассива.СуммаПошлины;

		ЭлементМассива.СуммаНДС = ДельтаНДС;

		// Остаток нераспределенной суммы надо уменьшать на реальное изменение
		НепогашеннаяСуммаНДС = НепогашеннаяСуммаНДС - ЭлементМассива.СуммаНДС;

	КонецЦикла;

	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСуммаПошлины > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.СуммаПошлины = СтрокаМаксимальнойСуммы.СуммаПошлины + НепогашеннаяСуммаПошлины;
	КонецЕсли;
	
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСуммаНДС > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.СуммаНДС = СтрокаМаксимальнойСуммы.СуммаНДС + НепогашеннаяСуммаНДС;
	КонецЕсли;

	// Посчитаем суммы
	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;

	ПосчитатьИтогиПоРазделу(НомерРаздела, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	ЭлементыФормы.Всего.Значение        = ОбщегоНазначения.ФорматСумм(ВсегоСтоимость);
	ЭлементыФормы.ВсегоПошлина.Значение = ОбщегоНазначения.ФорматСумм(ВсегоПошлина);
	ЭлементыФормы.ВсегоНДС.Значение     = ОбщегоНазначения.ФорматСумм(ВсегоНДС);

	ПоменятьНадписи();

КонецПроцедуры //  КоманднаяПанельТоварыРаспределить()

// Процедура вызывается при нажатии кнопки "ДобавитьИзПоступления" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДобавитьИзПоступления(Кнопка)

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;

	ДокументПоступления = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Если ВвестиЗначение(ДокументПоступления, "Выберите документ поступления") Тогда

		ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела);

	КонецЕсли;

	// Посчитаем суммы
	ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);

КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзПоступления()

// Процедура вызывается при нажатии кнопки "ДобавитьИзПоступленияНТТ" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыДобавитьИзПоступленияНТТ(Кнопка)

	НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;

	ДокументПоступления = Документы.ПоступлениеТоваровУслугВНТТ.ПустаяСсылка();
	Если ВвестиЗначение(ДокументПоступления, "Выберите документ поступления в НТТ") Тогда

		Если ДокументПоступления.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика Тогда
			ЗаполнитьПоПоступлению(ДокументПоступления, НомерРаздела);

			// Посчитаем суммы
			ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);
		Иначе
			Предупреждение("Документ можно заполнить только на основании документа """ + СокрЛП(ДокументПоступления.Метаданные().Представление())
			               + """ с видом операции """ + СокрЛП(Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика)
			               + """.");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзПоступленияНТТ()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетаПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	// Попробуем заполнить рублевый договор с выбранной организацией.
	ЗаполнитьДоговорРегл();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Попробуем заполнить рублевый договор с выбранной организацией.
	ЗаполнитьДоговорРегл();

	// Очистим договор если он не валютный.
	Если ЗначениеЗаполнено(ДоговорКонтрагента)
	   И ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;

	// Могли поменять договор.
	ПриИзмененииДоговора("ДоговорКонтрагента");

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	// Нам нужны договоры с валютой взаиморасчетов, отличной от валюты регл. учета.
	СтруктураДополнительныхПараметров = Новый Структура();

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора",     мВалютаРегламентированногоУчета);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеРавно);
	СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора",     Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.Прочее, СтандартнаяОбработка, СтруктураДополнительныхПараметров)

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ДоговорКонтрагента) 
	   И Не ЗаполнениеДокументов.МожноИспользоватьДоговорДляДокумента(ДоговорКонтрагента, 
	                                        ?(ЗначениеЗаполнено(Контрагент), Контрагент, ДоговорКонтрагента.Владелец),
	                                          Организация, мСтруктураПараметровДляПолученияДоговора) Тогда
		Предупреждение("Выбранный договор не может быть использован в этом документе.
		               |Будет восстановлен старый договор.");
		ДоговорКонтрагента = мТекущийДоговорКонтрагента;
	Иначе
		ПриИзмененииДоговора("ДоговорКонтрагента");
	КонецЕсли;

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагентаРегл
//
Процедура ДоговорКонтрагентаРеглНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагентаРегл = ДоговорКонтрагента;

	// Нам нужны договоры с валютой взаиморасчетов, равной валюте регл. учета.
	СтруктураДополнительныхПараметров = Новый Структура();

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора", мВалютаРегламентированногоУчета);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЗначениеОтбора", Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
	СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагентаРегл,
	                                        Перечисления.ВидыДоговоровКонтрагентов.Прочее, СтандартнаяОбработка, СтруктураДополнительныхПараметров)

КонецПроцедуры // ДоговорКонтрагентаРеглНачалоВыбора()

Процедура ДоговорКонтрагентаРеглПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ДоговорКонтрагентаРегл)
	   И Не ЗаполнениеДокументов.МожноИспользоватьДоговорДляДокумента(ДоговорКонтрагентаРегл, 
	                                        ?(ЗначениеЗаполнено(Контрагент), Контрагент, ДоговорКонтрагентаРегл.Владелец),
	                                          Организация, мСтруктураПараметровДляПолученияДоговораРегл) Тогда
		Предупреждение("Выбранный договор не может быть использован в этом документе.
		               |Будет восстановлен старый договор.");
		ДоговорКонтрагента = мТекущийДоговорКонтрагентаРегл;
	Иначе
		ПриИзмененииДоговора("ДоговорКонтрагентаРегл");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАЗДЕЛЫ

// Процедура - обработчик события "ПриИзменении" поля ТаможеннаяСтоимостьВВалютеРеглУчета
//
Процедура ТаможеннаяСтоимостьВВалютеРеглУчетаПриИзменении(Элемент)

	СтоимостьВРублях    = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета;
	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;

	Если мТекущаяТаможеннаяСтоимостьВВалютеРеглУчета <> СтоимостьВРублях И ЗначениеЗаполнено(ТаможеннаяСтоимость) Тогда
	
		Ответ = Вопрос("Пересчитать таможенную стоимость, сумму пошлины и сумму НДС?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		
			Если СтоимостьВРублях Тогда // была не в рублях, надо пересчитывать в рубли

				ТаможеннаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
				                         ВалютаДокумента, мВалютаРегламентированногоУчета, 
				                         КурсДокумента, 1, КратностьДокумента, 1);

			Иначе // Была в раблях, надо пересчитывать в валюту документа.

				ТаможеннаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТаможеннаяСтоимость,
				                         мВалютаРегламентированногоУчета, ВалютаДокумента,
				                         1, КурсДокумента, 1, КратностьДокумента);

			КонецЕсли; 

			ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость = ТаможеннаяСтоимость;
			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = 
			       РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СтавкаПошлины, ПошлинаВВалюте);
			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС     = 
			       РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

		КонецЕсли; 

	КонецЕсли;

	// Поменяем надписи
	ПоменятьНадписи();

КонецПроцедуры // ТаможеннаяСтоимостьВВалютеРеглУчетаПриИзменении()

Процедура РазделыТаможеннаяСтоимостьВВалютеРеглУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущаяТаможеннаяСтоимостьВВалютеРеглУчета = Элемент.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ТаможеннаяСтоимостьВВалютеРеглУчета
//
Процедура РазделыТаможеннаяСтоимостьВВалютеРеглУчетаПриИзменении(Элемент)

	ТаможеннаяСтоимостьВВалютеРеглУчетаПриИзменении(Элемент);

КонецПроцедуры

Процедура РазделыПошлинаВВалютеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущаяПошлинаВВалюте = Элемент.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ПошлинаВВалюте
//
Процедура РазделыПошлинаВВалютеПриИзменении(Элемент)

	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтоимостьВРублях    = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;

	Если мТекущаяПошлинаВВалюте <> ПошлинаВВалюте И ЗначениеЗаполнено(СуммаПошлины) Тогда
	
		Ответ = Вопрос("Пересчитать сумму пошлины и сумму НДС?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
		
			Если ПошлинаВВалюте Тогда // была не в валюте, надо пересчитывать в валюту

				СуммаПошлины = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
				                         мВалютаРегламентированногоУчета, мТекущаяВалютаВзаиморасчетов,
				                         1, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов);

			Иначе // Была в валюте, надо пересчитывать в регл. учет.

				СуммаПошлины = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПошлины,
				                         мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, 
				                         КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);

			КонецЕсли; 

			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины;
			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС     = 
			      РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

		КонецЕсли; 

	КонецЕсли;

	// Поменяем надписи
	ПоменятьНадписи();

КонецПроцедуры // РазделыПошлинаВВалютеПриИзменении()

Процедура РазделыНДСВВалютеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мТекущийНДСВВалюте = Элемент.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля НДСВВалюте
//
Процедура РазделыНДСВВалютеПриИзменении(Элемент)

	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	СуммаНДС            = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС;

	Если мТекущийНДСВВалюте <> НДСВВалюте И ЗначениеЗаполнено(СуммаНДС) Тогда

		Ответ = Вопрос("Пересчитать сумму НДС?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда

			Если НДСВВалюте Тогда // была не в валюте, надо пересчитывать в валюту

				СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
				                         мВалютаРегламентированногоУчета, мТекущаяВалютаВзаиморасчетов,
				                         1, КурсВзаиморасчетов, 1, КратностьВзаиморасчетов);

			Иначе // Была в валюте, надо пересчитывать в регл. учет.

				СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДС,
				                         мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, 
				                         КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);

			КонецЕсли; 

			ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = СуммаНДС;

		КонецЕсли; 

	КонецЕсли;

	// Поменяем надписи.
	ПоменятьНадписи();

КонецПроцедуры // РазделыНДСВВалютеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ТаможеннаяСтоимость
//
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)

	СтоимостьВРублях    = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета;
	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	
	СуммаПошлины = 
	       РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СтавкаПошлины, ПошлинаВВалюте);

	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины ;
	
	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = 
	       РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

КонецПроцедуры // РазделыТаможеннаяСтоимостьПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СтавкаПошлины
//
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)

	СохранитьЗначение("СтавкаТаможеннойПошлины", ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины);
	
	СтоимостьВРублях    = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета;
	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	
	СуммаПошлины = 
	       РассчитатьСуммуПошлиныГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СтавкаПошлины, ПошлинаВВалюте);

	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины = СуммаПошлины ;
	
	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = 
	       РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

	Если СуммаПошлины = 0 Тогда
		ОчиститьКолонкуПоРазделу(Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1, "СуммаПошлины");
	КонецЕсли;

КонецПроцедуры // РазделыСтавкаПошлиныПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СуммаПошлины
//
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)

	СтоимостьВРублях    = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета;
	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	
	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = 
	     РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

	Если СуммаПошлины = 0 Тогда
		ОчиститьКолонкуПоРазделу(Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1, "СуммаПошлины");
	КонецЕсли;

КонецПроцедуры // РазделыСуммаПошлиныПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СтавкаНДС
//
Процедура РазделыСтавкаНДСПриИзменении(Элемент)

	СтоимостьВРублях    = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимостьВВалютеРеглУчета;
	ТаможеннаяСтоимость = ЭлементыФормы.Разделы.ТекущиеДанные.ТаможеннаяСтоимость;
	СтавкаПошлины       = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаПошлины;
	ПошлинаВВалюте      = ЭлементыФормы.Разделы.ТекущиеДанные.ПошлинаВВалюте;
	СуммаПошлины        = ЭлементыФормы.Разделы.ТекущиеДанные.СуммаПошлины;
	СтавкаНДС           = ЭлементыФормы.Разделы.ТекущиеДанные.СтавкаНДС;
	НДСВВалюте          = ЭлементыФормы.Разделы.ТекущиеДанные.НДСВВалюте;
	
	ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = 
	     РассчитатьСуммуНДСГТД(ТаможеннаяСтоимость, СтоимостьВРублях, СуммаПошлины, ПошлинаВВалюте, СтавкаНДС, НДСВВалюте);

	Если ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = 0 Тогда
		ОчиститьКолонкуПоРазделу(Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1, "СуммаНДС");
	КонецЕсли;

КонецПроцедуры // РазделыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СуммаНДС
//
Процедура СуммаНДСПриИзменении(Элемент)

	Если ЭлементыФормы.Разделы.ТекущиеДанные.СуммаНДС = 0 Тогда
		ОчиститьКолонкуПоРазделу(Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1, "СуммаНДС");
	КонецЕсли;

КонецПроцедуры // СуммаНДСПриИзменении()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Разделы"
//
Процедура РазделыПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияРазделыПриАктивизацииСтроки", 0.1, Истина);	 
    
КонецПроцедуры //РазделыПриАктивизацииСтроки()


// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Разделы
//
Процедура ОбработчикОжиданияРазделыПриАктивизацииСтроки()
    
    НомерРаздела = Разделы.Индекс(ЭлементыФормы.Разделы.ТекущиеДанные) + 1;
	ЭлементыФормы.Разделы.ТекущаяСтрока = Разделы[НомерРаздела - 1];
	
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Использование = Истина;
	ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Значение      = НомерРаздела;

	// Посчитаем суммы
	ВсегоСтоимость = 0;
	ВсегоПошлина   = 0;
	ВсегоНДС       = 0;
	ПосчитатьИтогиПоТОварам(ЭлементыФормы.Разделы.ТекущиеДанные, ВсегоСтоимость, ВсегоПошлина, ВсегоНДС);

	// Поменяем надписи.
	ПоменятьНадписи();    
    
КонецПроцедуры // ОбработчикОжиданияРазделыПриАктивизацииСтроки

 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.НомерРаздела = ЭлементыФормы.Товары.ОтборСтрок.НомерРаздела.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Посчитаем суммы
	ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Посчитаем суммы
	ВычислимСуммы(ЭлементыФормы.Разделы.ТекущиеДанные);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.Найти("СтранаПроисхождения") <> Неопределено
		   И ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТЧ.Коэффициент      = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТЧ, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Справочники.СерииНоменклатуры.ПолучитьФормуВыбора(,Элемент,);

	// Отфильтруем список документов по договору.
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		ФормаВыбора.Отбор.НомерГТД.Значение      = НомерГТД;
		ФормаВыбора.Отбор.НомерГТД.Использование = Истина;
	КонецЕсли;

	ФормаВыбора.ПараметрВыборПоВладельцу = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура;
	ФормаВыбора.ПараметрОтборПоВладельцу = ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура;

	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;

