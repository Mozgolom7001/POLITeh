////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

Перем мКурсСтрокиДокументаРасчетов;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;

Перем мКолонкиТовары, мКолонкиДокументы;

Перем мКартинкаСерийныеНомера;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит список счетов-фактур, сформированных перед записью документа
Перем мМассивСформированныхСФ;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, РЕАЛИЗУЮЩИЕ ФУНКЦИИ СОЗДАНИЯ СЧЕТОВ-ФАКТУР

// Процедура вызывается сразу же после записи документа.
// Выполняется сопоставление строк документа и соответствующих им
// выданных счетов - факутр. Результаты данного сопоставления
// фиксируются в строках документа, в реквизите "СчетФакутра"
//
Процедура СформироватьСчетаФактурыВыданныеДляСтрокДокумента(ТабЧасть = "")
	
	мМассивСформированныхСФ = Новый Массив;
	ВыписыватьСчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И Дата >= '20150101';
	
	// В данной таблице содержится информация о том, какие счета-фактуры уже были
	// выписаны ранее на основании данных документов
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	Иначе
		ТаблицаСФ  = Новый ТаблицаЗначений();
		ТаблицаСФ.Колонки.Добавить("Ссылка",          Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
		ТаблицаСФ.Колонки.Добавить("ДатаСФ",          Новый ОписаниеТипов("Дата"));
		ТаблицаСФ.Колонки.Добавить("Покупатель",      Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаСФ.Колонки.Добавить("Проведен",        Новый ОписаниеТипов("Булево"));
		ТаблицаСФ.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТаблицаСФ.Колонки.Добавить("Использован",         Новый ОписаниеТипов("Булево"));
	
	СписокТабЧастей = Новый СписокЗначений;
	Если ПустаяСтрока(ТабЧасть) Тогда
		СписокТабЧастей.Добавить("Покупатели");
	Иначе
		СписокТабЧастей.Добавить(ТабЧасть);
	КонецЕсли;  
	
	Если ЭтоНовый() ИЛИ Модифицированность Тогда
		ТаблицаСуммДляСФ = Новый ТаблицаЗначений;
		ТаблицаСуммДляСФ.Колонки.Добавить("КлючСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
		ТаблицаСуммДляСФ.Колонки.Добавить("Сумма",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаСуммДляСФ.Колонки.Добавить("СуммаНДС",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		СписокТабличныхЧастей = Новый СписокЗначений;
		СписокТабличныхЧастей.Добавить("Товары");
		
		Для каждого ТабличнаяЧасть Из СписокТабличныхЧастей Цикл
			Для каждого СтрокаДокумента Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
				СтрокаТаблицы = ТаблицаСуммДляСФ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДокумента);
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаСуммДляСФ.Свернуть("КлючСтроки", "Сумма, СуммаНДС");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки,
		|	СУММА(ОтчетКомиссионераОПродажахТовары.Сумма) КАК Сумма,
		|	СУММА(ОтчетКомиссионераОПродажахТовары.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
		|ГДЕ
		|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетКомиссионераОПродажахТовары.КлючСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		ТаблицаСуммДляСФ = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТаблицаСуммДляСФ.Индексы.Добавить("КлючСтроки");
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		
		СчетаФактурыСводно = ВыписыватьСчетаФактурыСводно И ТабЧасть.Значение = "Покупатели";
		
		ТаблицаДокумента = Новый ТаблицаЗначений;
		ТаблицаДокумента.Колонки.Добавить("Покупатель");
		ТаблицаДокумента.Колонки.Добавить("ДатаСФ");
		ТаблицаДокумента.Колонки.Добавить("СчетФактура");
		ТаблицаДокумента.Колонки.Добавить("СуммаБезНДС");
		ТаблицаДокумента.Колонки.Добавить("НДС");
		ТаблицаДокумента.Колонки.Добавить("КоличествоСФ");
		
		// подготовим таблицу документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если НЕ СтрокаДок.ВыставленСФ Тогда
				// СФ не выдан.
				Продолжить;
			КонецЕсли; 
			
			СтрокаСуммДляСФ = ТаблицаСуммДляСФ.Найти(СтрокаДок.КлючСтроки, "КлючСтроки");
			Если СтрокаСуммДляСФ = Неопределено ИЛИ СтрокаСуммДляСФ.Сумма = 0 И СтрокаСуммДляСФ.СуммаНДС = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаТаблицыДок = ТаблицаДокумента.Добавить();
			СтрокаТаблицыДок.Покупатель  = СтрокаДок.Покупатель;
			СтрокаТаблицыДок.ДатаСФ      = СтрокаДок.ДатаСФ;
			СтрокаТаблицыДок.СчетФактура = СтрокаДок.СчетФактура;
			
			СтрокаТаблицыДок.СуммаБезНДС  = СтрокаСуммДляСФ.Сумма - ?(СуммаВключаетНДС, СтрокаСуммДляСФ.СуммаНДС, 0);
			СтрокаТаблицыДок.НДС          = СтрокаСуммДляСФ.СуммаНДС;
			СтрокаТаблицыДок.КоличествоСФ = 1;
			
		КонецЦикла;
		
		// В данной таблице содержится информация о том, какие счета-фактуры необходимо выписать
		Если СчетаФактурыСводно Тогда
			ТаблицаДокумента.Свернуть("СчетФактура, ДатаСФ", "СуммаБезНДС, НДС, КоличествоСФ");
		Иначе
			ТаблицаДокумента.Свернуть("Покупатель, ДатаСФ, СчетФактура", "СуммаБезНДС, НДС");
		КонецЕсли;
		
		Для Каждого СтрокаТаблицыДок Из ТаблицаДокумента Цикл
			Если НЕ СчетаФактурыСводно И (НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.Покупатель)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыДок.ДатаСФ)) Тогда
			    // В строке документа не указаны параметры для создания счета-фактуры
				Продолжить;
			КонецЕсли;
			
			ВерсияКодовВидовОпераций = УчетНДС.ВерсияКодовВидовОпераций(СтрокаТаблицыДок.ДатаСФ);
			
			// Поиск существующего документа счет-фактура выданный
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаТаблицыДок, СчетаФактурыСводно);
			
			Если ДокСФ = Неопределено Тогда
				// Если существующий счет-фактура не найден, нужно создать новый счет-фактуру
				ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
				
				Если ЗначениеЗаполнено(Ссылка) Тогда
					Основания = ДокСФ.ДокументыОснования.Добавить();
					Основания.ДокументОснование = Ссылка;
					ДокСФ.ДокументОснование = Ссылка;
				Иначе
					СсылкаНового = ПолучитьСсылкуНового();
					Если НЕ ЗначениеЗаполнено(СсылкаНового) Тогда
						СсылкаНового = Документы.ОтчетКомиссионераОПродажах.ПолучитьСсылку();
					КонецЕсли;
					
					Основания = ДокСФ.ДокументыОснования.Добавить();
					Основания.ДокументОснование = СсылкаНового;
					ДокСФ.ДокументОснование = СсылкаНового;
					
					УстановитьСсылкуНового(СсылкаНового);
				КонецЕсли; 
				
				ДокСФ.Дата            = СтрокаТаблицыДок.ДатаСФ;
				ДокСФ.Организация     = Организация;
				ДокСФ.Контрагент      = ?(СчетаФактурыСводно, Контрагент, СтрокаТаблицыДок.Покупатель);
				ДокСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
				
				Если СчетаФактурыСводно
					И СтрокаТаблицыДок.КоличествоСФ > 1 Тогда 
					ДокСФ.КодВидаОперации = "27";
				Иначе
					ДокСФ.КодВидаОперации = ?(ВерсияКодовВидовОпераций < 3, "04", "01");
				КонецЕсли;
				
				ДокСФ.КодСпособаВыставления = 1;
				ДокСФ.Выставлен = Истина;
				ДокСФ.ДатаВыставления = Дата;
				ДокСФ.ОпределениеПараметровСчетаФактуры();
				
				Если ДокСФ.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
					ДокСФ.ДатаНомерДокументовОплаты.Добавить();
				КонецЕсли;
				
				ДокСФ.СводныйКомиссионный = СчетаФактурыСводно;
				
				ДокСФ.Записать();
				
				Если СчетаФактурыСводно Тогда
					ТекстСообщения = "Сформирован документ «" + СокрЛП(ДокСФ.Ссылка)
						+ "», с.-ф. № " + СокрЛП(ДокСФ.Номер)
						+ " от " + Формат(ДокСФ.Дата, "ДФ=dd.MM.yyyy") + ").";
				Иначе
					ТекстСообщения = "Сформирован документ «" + СокрЛП(ДокСФ.Ссылка)
						+ "» (покупатель «" + СокрЛП(СтрокаТаблицыДок.Покупатель)
						+ "», с.-ф. № " + СокрЛП(ДокСФ.Номер)
						+ " от " + Формат(ДокСФ.Дата, "ДФ=dd.MM.yyyy") + ").";
				КонецЕсли;
				Сообщить(ТекстСообщения); 
				
				мМассивСформированныхСФ.Добавить(ДокСФ.Ссылка);
				
				// Этот новый счет-фактуру нужно зафиксировать в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Добавить();
				СтрокаСФ.ДатаСФ      = СтрокаТаблицыДок.ДатаСФ;
				СтрокаСФ.Покупатель  = ?(СчетаФактурыСводно, Контрагент, СтрокаТаблицыДок.Покупатель);
				СтрокаСФ.Ссылка      = ДокСФ.Ссылка;
				СтрокаСФ.Использован = Истина;
			Иначе
				// Информацию об этом счете-фактуре нужно обновить в таблице счетов-фактур
				СтрокаСФ = ТаблицаСФ.Найти(ДокСФ.Ссылка, "Ссылка");
				Если ЗначениеЗаполнено(Ссылка) 
					И ДокСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование") = Неопределено Тогда
					Основания = ДокСФ.ДокументыОснования.Добавить();
					Основания.ДокументОснование = Ссылка;
				КонецЕсли;
				Если ДокСФ.СводныйКомиссионный <> СчетаФактурыСводно Тогда
					ДокСФ.СводныйКомиссионный = СчетаФактурыСводно;
				КонецЕсли;
				ДокСФ.ОпределениеПараметровСчетаФактуры();
			КонецЕсли;
			
			Если ДокСФ.ПометкаУдаления Тогда
				ДокСФ.ПометкаУдаления = Ложь;
				мМассивСформированныхСФ.Добавить(ДокСФ.Ссылка);
			КонецЕсли; 
			
			Если ДокСФ.Модифицированность() Тогда
				ДокСФ.Записать();
			КонецЕсли;
		КонецЦикла;
		
		// далее необходимо прописать ссылки на созданные счета-фактуры в строки документа
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			СтрокаСуммДляСФ = ТаблицаСуммДляСФ.Найти(СтрокаДок.КлючСтроки, "КлючСтроки");
			Если СтрокаСуммДляСФ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСуммДляСФ <> Неопределено
				И НЕ СтрокаДок.ВыставленСФ ИЛИ СтрокаСуммДляСФ.Сумма = 0 И СтрокаСуммДляСФ.СуммаНДС = 0 Тогда
				
				// Для строки не нужен счет-фактура
				Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
					СтрокаДок.СчетФактура = Неопределено;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			ДокСФ = НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДок, СчетаФактурыСводно, Ложь);	
			Если ДокСФ <> Неопределено Тогда
				// Если есть счет-фактура - регистрируем его в строке табличной части
				Если НЕ СтрокаДок.СчетФактура = ДокСФ.Ссылка Тогда
					Если ЗначениеЗаполнено(СтрокаДок.СчетФактура) Тогда
						Сообщить("Изменен счет-фактура по строке " + СтрокаДок.НомерСтроки + " """ + ТабЧасть.Значение + """.", СтатусСообщения.Информация); 
					КонецЕсли; 
					
					СтрокаДок.СчетФактура = ДокСФ.Ссылка;
				КонецЕсли; 
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаДок.Покупатель) Тогда
					Сообщить("В строке " + СтрокаДок.НомерСтроки + " """ + ТабЧасть.Значение + """ " +
						?(НЕ ЗначениеЗаполнено(СтрокаДок.Покупатель), "не указан покупатель, ", "") +
						" счет-фактура по строке не зарегистрирован!", СтатусСообщения.Важное);
				КонецЕсли;
				
				// Для строки не создан счет-фактура
				СтрокаДок.СчетФактура = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // СформироватьСчетаФактурыВыданныеДляСтрокДокумента()

// Формирует перечень документов счет-фактура выданный, введенных на 
// основании текущего документа.
//
Функция ПолучитьТаблицуПодчиненныхСчетовФактур(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Ссылка.Контрагент КАК Покупатель,
	|	СчетФактураВыданный.Ссылка.Дата КАК ДатаСФ,
	|	СчетФактураВыданный.Ссылка.Проведен,
	|	СчетФактураВыданный.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	ПометкаУдаления УБЫВ,
	|	Ссылка";
	
	РезТаблица = Запрос.Выполнить().Выгрузить();
	
	Возврат РезТаблица;
	
КонецФункции // ПолучитьТаблицуПодчиненныхСчетовФактур()

// Процедура вызывается сразу перед записью документа.
// выполняется поиск существующего счета-фактуры  по заданным 
// параметрам.
Функция НайтиСчетФактуруВСписке(ТаблицаСФ, СтрокаДокумента, СчетаФактурыСводно, УстановитьПризнакИспользования = Истина)
	
	ПокупательПоиска = ?(СчетаФактурыСводно, Контрагент, СтрокаДокумента.Покупатель);
	
	ДокСФ = Неопределено;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.СчетФактура)
		И НЕ ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура, "Ссылка") = Неопределено Тогда
		СтрокаСФ = ТаблицаСФ.Найти(СтрокаДокумента.СчетФактура, "Ссылка");
		
		Если НачалоДня(СтрокаСФ.ДатаСФ) = НачалоДня(СтрокаДокумента.ДатаСФ)
			И СтрокаСФ.Покупатель = ПокупательПоиска ИЛИ НЕ ЗначениеЗаполнено(СтрокаСФ.Покупатель) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено И УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Возврат ДокСФ;
		КонецЕсли;
	КонецЕсли; 
	
	Для каждого СтрокаСФ Из ТаблицаСФ Цикл
		// Поиск существующего счета-фактуры выполняется по контрагенту и договору.
		Если НачалоДня(СтрокаСФ.ДатаСФ) = НачалоДня(СтрокаДокумента.ДатаСФ)
			И СтрокаСФ.Покупатель = ПокупательПоиска ИЛИ НЕ ЗначениеЗаполнено(СтрокаСФ.Покупатель) Тогда
			// найден подходящий счет-фактура
			ДокСФ = СтрокаСФ.Ссылка.ПолучитьОбъект();
			Если ТаблицаСФ.Колонки.Найти("Использован") <> Неопределено И УстановитьПризнакИспользования Тогда
				СтрокаСФ.Использован = Истина;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокСФ;
	
КонецФункции // НайтиСчетФактуруВСписке()

// Процедура "просматривает" строки табличных частей документа.
// и для тех строк, в которых указан счет-фактура выданный,
// обновляет ссылку на текущий документ
// в этом счете-фактуре.
//
Процедура ОбновитьСсылкиСчетовФактур()
	
	СписокТабЧастей = Новый СписокЗначений;
	СписокТабЧастей.Добавить("Покупатели");
	
	ТаблицаСФ = ПолучитьТаблицуПодчиненныхСчетовФактур(Ссылка);
	ТаблицаСФ.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТабЧасть Из СписокТабЧастей Цикл
		КоличествоСтрок = ЭтотОбъект[ТабЧасть.Значение].Количество();
		Для Каждого СтрокаДок Из ЭтотОбъект[ТабЧасть.Значение] Цикл
			Если СтрокаДок.ВыставленСФ И НЕ СтрокаДок.СчетФактура.Пустая() Тогда
				// Документ, сформирован по "старому", с/ф по нему не перезаписываем
				Если НЕ (КоличествоСтрок = 1 И СтрокаДок.Покупатель = Контрагент) Тогда
					ДокСФ = СтрокаДок.СчетФактура.ПолучитьОбъект();
					Если ДокСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование") = Неопределено Тогда
						// Необходимо модифицировать ссылку в счете-фактуре
						Основания = ДокСФ.ДокументыОснования.Добавить();
						Основания.ДокументОснование = Ссылка;
						ДокСФ.СводныйКомиссионный = Истина;
					КонецЕсли;
					
					ДокСФ.ОпределениеПараметровСчетаФактуры();
					
					Если мМассивСформированныхСФ.Найти(СтрокаДок.СчетФактура) <> Неопределено Тогда
						// счет-фактура только что сформирован, заполним данные платежно-расчетных документов
						ДокСФ.ДатаНомерДокументовОплаты.Очистить();
						ДокСФ.ДатаНомерДокументовОплаты.Добавить();
					КонецЕсли;
					
					Если ДокСФ.Модифицированность() Тогда
						ДокСФ.Записать();
					КонецЕсли;
				КонецЕсли;
				
				СтрокиСФ = ТаблицаСФ.НайтиСтроки(Новый Структура("Ссылка, Использован", СтрокаДок.СчетФактура, Ложь));
				Для каждого СтрокаТаблицыСФ Из СтрокиСФ  Цикл
					СтрокаТаблицыСФ.Использован = Истина;
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// удаляем незадействованные счета-фактуры
	Для каждого СтрокаСчета Из ТаблицаСФ Цикл
		Если НЕ СтрокаСчета.Использован И СтрокаСчета.Ссылка.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
			ТекСФ = СтрокаСчета.Ссылка.ПолучитьОбъект();
			//Проверим - только ли текущий документ зарегистрирован в счете-фактуре
			Если ТекСФ.ДокументыОснования.Количество() > 1 Тогда
				//Удалим строки, относящиеся к текущему счету-фактуре
				СтрокаДок = ТекСФ.ДокументыОснования.Найти(Ссылка, "ДокументОснование");
				Если НЕ СтрокаДок = Неопределено Тогда
					ТекСФ.ДокументыОснования.Удалить(СтрокаДок);
					ТекСФ.СводныйКомиссионный = Ложь;
					ТекСФ.Записать();
					Сообщить("Из документа «" + СокрЛП(ТекСФ.Ссылка) + "» удалена ссылка на текущий документ 
						|(контрагент «" + СокрЛП(СтрокаСчета.Контрагент) + "», с.-ф. № <" + СокрЛП(ТекСФ.Номер) + "> от " + Формат(ТекСФ.Дата, "ДФ=dd.MM.yyyy")+")"); 
				КонецЕсли; 
			Иначе
				Если ТекСФ.ПометкаУдаления = Ложь Тогда
					ТекСФ.УстановитьПометкуУдаления(Истина);
					ТекСФ.СводныйКомиссионный = Ложь;
					ТекСФ.Записать();
					Сообщить("Документ «" + СокрЛП(ТекСФ.Ссылка) + "» 
						|(покупатель «" + СокрЛП(СтрокаСчета.Покупатель) + "», с.-ф. № <" + СокрЛП(ТекСФ.Номер) + "> от " + Формат(ТекСФ.Дата, "ДФ=dd.MM.yyyy") + ") не используется. 
						|Счет-фактура помечен на удаление."); 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСсылкиСчетовФактур()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактураПолученный.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
	                                                 УчетНДС.НайтиПодчиненныйДокумент(Ссылка, "СчетФактураПолученный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура рассчитывает сумму передачи
// Параметры:
//  СтрокаТабличнойЧасти - Строка табличной части Товары
//
Процедура РассчитатьСуммуПередачи(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи 
	                                   * СтрокаТабличнойЧасти.Количество;

	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры //РассчитатьСуммуПередачи()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДенежныеСредства,ЭлементыФормы.КоманднаяПанельДенежныеСредства);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция РассчитатьСуммуДокумента()

	СуммаДок = ДокументОбъект.Товары.Итог("Сумма");

	Если (УчитыватьНДС) И ( НЕ СуммаВключаетНДС) Тогда
		СуммаДок = СуммаДок + ДокументОбъект.Товары.Итог("СуммаНДС");
	КонецЕсли; 

	Возврат СуммаДок;

КонецФункции // РассчитатьСуммуДокумента()

// Процедура выполняет заполение и расчет реквизитов, связанных с комиссионным вознаграждением.
//
Процедура ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения(РежимРаботы = "ПриИзмененииДоговора")

	// при необходимости поменяем способ расчета и процент
	ЧтоИзменилось = "";
	Если РежимРаботы = "ПриИзмененииДоговора" Тогда
		Если СпособРасчетаКомиссионногоВознаграждения <> ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения Тогда
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ЧтоИзменилось = "способ расчета";
		КонецЕсли;
		Если ПроцентКомиссионногоВознаграждения <> ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения Тогда
			ПроцентКомиссионногоВознаграждения = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			ЧтоИзменилось = ЧтоИзменилось + ?(ЧтоИзменилось = "", "", " и")+" процент вознаграждения";
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СпособРасчетаКомиссионногоВознаграждения) Тогда
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			ЧтоИзменилось = "начальное заполнение";
		КонецЕсли;
	КонецЕсли;

	// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
	Если Товары.Количество() > 0 И ЧтоИзменилось <> ""Тогда

		// Надо предложить пересчитать комиссионное вознаграждение.
		
		Если РежимРаботы = "ПриИзмененииДоговора" Тогда
			Ответ = Вопрос("Изменился "+ЧтоИзменилось+". Пересчитать комиссионное вознаграждение?",
		                   РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			Ответ = КодВозвратаДиалога.Да
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения()

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		                                       * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		      * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;

	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
	                                              УчитыватьНДС, СуммаВключаетНДС,
	                                              УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));


КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения();

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект = ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// Производит выбор документа реализации и заполнение на его основании
//
// СпособЗаполнения - "Заполнить" - заполнить с предварительной очисткой
//					  "Добавить"  - добавить строки к уже имеющимся.
//
Процедура ЗаполнитьПоРеализации(СпособЗаполнения = "Заполнить")

	ЗаполнятьТабличнуюЧасть = Ложь;

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;

	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Покупатели.Очистить();
		Товары.Очистить();
	КонецЕсли;

	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ передачи на комиссию для заполнения отчета комиссионера";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	Реализация = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыУпр(Реализация);

КонецПроцедуры //ЗаполнитьПоРеализации()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Рассчитывает сумму НДС в строке ТЧ "Денежные средства".
//
// Параметры
//  СтрокаТабличнойЧасти – строка табличной части "Денежные средства".
//
Процедура РассчитатьСуммуНДССтрокиДенежныеСредства(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	                                                   Истина,
	                                                   Истина,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДССтрокиДенежныеСредства()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	Колонки = ЭлементыФормы.Товары.Колонки;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДСВознаграждения.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДСВознаграждения, УчитыватьНДС);
	КонецЕсли;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.КодТНВЭД, Дата >= '20160701'); // учет НДС по ФЗ-150

	ДоступностьПроцента     = Истина;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

		ДоступностьПроцента = Ложь;
		Если ПроцентКомиссионногоВознаграждения <> 0 Тогда
			ПроцентКомиссионногоВознаграждения = 0;
		КонецЕсли;

	КонецЕсли;

	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	ЭлементыФормы.ДенежныеСредства.Колонки.ДатаАванса.АвтоОтметкаНезаполненного = ВерсияПостановления = 2;
	ЭлементыФормы.ДенежныеСредства.Колонки.Покупатель.АвтоОтметкаНезаполненного = ВерсияПостановления = 2;
	
	ЭлементыФормы.ПроцентКомиссионногоВознаграждения.Доступность = ДоступностьПроцента;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность            = ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.ВыписыватьСчетаФактурыСводно.Доступность = Дата >= '20150101';
	ЭлементыФормы.ВыписыватьСчетаФактурыСводно1.Доступность = Дата >= '20150101';
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете);

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	// Сделка
	Автоотметка = Ложь;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

	// Процент и ставка НДС с комиссионного вознаграждения
	Автоотметка = Ложь;
	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли
	 ИЛИ СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		Автоотметка = Истина;
	КонецЕсли;

	Если ЭлементыФормы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(ПроцентКомиссионногоВознаграждения) Тогда
		ЭлементыФормы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.СтавкаНДСВознаграждения.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтавкаНДСВознаграждения) Тогда
		ЭлементыФормы.СтавкаНДСВознаграждения.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;
	
КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = РассчитатьСуммуДокумента();
	ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС");

	ЭлементыФормы.ВсегоВознаграждения.Значение    = Товары.Итог("СуммаВознаграждения");
	ЭлементыФормы.СуммаНДСВознаграждения.Значение = Товары.Итог("СуммаНДСВознаграждения");

	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		ЭлементыФормы.ВсегоВознаграждения.Значение = ЭлементыФормы.ВсегоВознаграждения.Значение 
		                                           + ЭлементыФормы.СуммаНДСВознаграждения.Значение;
	КонецЕсли; 

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                                  + " " +  ДокументОбъект.ВалютаДокумента
		                                  + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                                  + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование, мСтруктураПараметровДляПолученияДоговора);

		СтавкаНДСВознаграждения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения("НачальноеЗаполнение");
		ВыписыватьСчетаФактурыСводно = Дата >= '20150101';
		
	Иначе
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПоДокументамРасчетов        = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ПокупателиПриАктивизацииСтроки();
	ЗаполнитьТекстПроСчетФактуру(); 

	УстановитьАвтоотметку();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Товары",           "Товары");
	Страницы.Добавить("ДенежныеСредства", "ДенежныеСредства");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.ОсновнаяПанель, Страницы,);

	// установим доступность колонки "ЦенаПередачи" и "СуммаПередачи" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.ЦенаПередачи.ЭлементУправления.ТолькоПросмотр  = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаПередачи.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(РассчитатьСуммуДокумента(),  
		                                                        ВалютаДокумента, 
		                                                        мТекущаяВалютаВзаиморасчетов,
		                                                        ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                                        КурсВзаиморасчетов,
		                                                        ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                                        КратностьВзаиморасчетов);
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();
	ОбновитьСуммыПокупателей();
	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СформироватьСчетаФактурыВыданныеДляСтрокДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	ОбновитьСсылкиСчетовФактур();
	ОбработкаПодчиненныхДокументовСчетФактура(Проведен);

КонецПроцедуры // ПослеЗаписи()


///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен, , ДоговорКонтрагента);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                Ложь,
	                                                ТипЦен, , ДоговорКонтрагента);

	Если ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить по инвентаризации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации(Кнопка)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Покупатели.Очистить();
		Товары.Очистить();
	КонецЕсли;
	
	ФормаВыбора = Документы.ИнвентаризацияТоваровОтданныхНаКомиссию.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ инвентаризации для заполнения отчета комиссионера";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	Инвентаризация = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Инвентаризация) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(Инвентаризация);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации()

// Процедура вызывается при выборе пункта меню "Заполнить по договору" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоДоговору(Кнопка)

	ДоговорВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";
	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка) И (ДоговорВедениеВзаиморасчетов =Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам ИЛИ ДоговорВедениеВзаиморасчетов =Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ТекстПредупреждения = "Не выбран " + ?(ДоговорВедениеВзаиморасчетов =Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам, "счет", "заказ") + ". Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , );
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Покупатели.Очистить();
		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыУпр();

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоДоговору()

// Процедура вызывается при выборе пункта меню "Заполнить по реализации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоРеализации(Кнопка)

	ЗаполнитьПоРеализации();

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Добавить из реализации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьИзРеализации(Кнопка)

	ЗаполнитьПоРеализации("Добавить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;
	
	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМожноМенятьЦенуВДокументе = мМожноМенятьЦенуВДокументе;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить(Товары.НайтиСтроки(Новый Структура("КлючСтроки", ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки))));

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");

	СтруктураНередактируемыхРеквизитов = Новый Структура;
	СтруктураНередактируемыхРеквизитов.Вставить("УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета, СтруктураНередактируемыхРеквизитов
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда

		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;

		// В денежных средствах надо посчитать сумму НДС
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДенежныеСредства Цикл
			РассчитатьСуммуНДССтрокиДенежныеСредства(СтрокаТабличнойЧасти);
		КонецЦикла;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Прочитать();
		НаборТоварыОрганизаций.Очистить();
		НаборТоварыОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьВидимость();
	
	Если Дата < '20150101' Тогда
		ВыписыватьСчетаФактурыСводно = Ложь;
	ИначеЕсли мТекущаяДатаДокумента < '20150101'Тогда
		ВыписыватьСчетаФактурыСводно = Истина;
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода способа
// расчета комиссионного вознаграждения.
//
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)

	Если СпособРасчетаКомиссионногоВознаграждения
		<> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

		// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
		Если Товары.Количество() > 0 Тогда

			// Надо предложить пересчитать комиссионное вознаграждение.
			Ответ = Вопрос("Изменился способ расчета. Пересчитать комиссионное вознаграждение?", 
			               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для каждого СтрокаТабличнойЧасти Из Товары Цикл
					РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // СпособРасчетаКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// комиссионного вознаграждения.
//
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)

	// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
	Если Товары.Количество() > 0 Тогда

		// Надо предложить пересчитать комиссионное вознаграждение.
		Ответ = Вопрос("Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПроцентКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Договор меняется.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером , СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Данный документ выполняет Приход по регистру взаиморасчетов.
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, "ЗаказПокупателя");

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//

Процедура ГиперссылкаСчетФактураПолученныйНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСВознаграждения
//
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	// Нужно спросить об обновлении сумм НДС вознаграждения в ТЧ
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Пересчитать суммы НДС вознаграждения?", 
	               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
		                                                     УчитыватьНДС, СуммаВключаетНДС,
		                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД(СтрокаТЧ);

	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТЧ);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТЧ, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммуПередачи(СтрокаТабличнойЧасти);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

Процедура ТоварыЦенаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуПередачи(СтрокаТабличнойЧасти);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры

Процедура ТоварыСуммаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПередачи = 0;
	Иначе
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьКомиссионноеВознаграждение(ЭлементыФормы.Товары.ТекущиеДанные);

КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиУКомиссионеров", "По остаткам номенклатуры у комиссионера");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"           , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("Заголовок"            , "Подбор номенклатуры в документ " + 
	                                                             ПредставлениеДок + " № " + Номер);
	СтруктураПараметровПодбора.Вставить("Склад"            	   , Справочники.Склады.ПустаяСсылка());

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, КоличествоМест, Цена, Характеристика, Серия, ЕдиницаИзмерения;
	
	Покупатель = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные;
	
	Если Покупатель = Неопределено Тогда
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;
	
	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	СтруктураОтбора.Вставить("ЦенаПередачи"              , Цена);
	СтруктураОтбора.Вставить("КлючСтроки"                , Покупатель.КлючСтроки);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.КлючСтроки       = Покупатель.КлючСтроки;
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * Количество,
		                   ВалютаЦены, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                   КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
		                                                                        Истина, УчитыватьНДС, СуммаВключаетНДС,
																				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьКодТНВЭД(СтрокаТабличнойЧасти);

		Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	
	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);	

КонецПроцедуры // ТоварыОбработкаПодбора()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, Неопределено, Истина, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыВознаграждениеПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
	                                                     УчитыватьНДС, СуммаВключаетНДС,
	                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

													 КонецПроцедуры
													 
// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры // ТоварыПослеУдаления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДЕНЕЖНЫЕ СРЕДСТВА

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма" 
// в строке табличной части "Денежные средства".
//
Процедура ДенежныеСредстваСуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДССтрокиДенежныеСредства(ЭлементыФормы.ДенежныеСредства.ТекущиеДанные);

КонецПроцедуры // ДенежныеСредстваСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНДС" 
// в строке табличной части "Денежные средства".
//
Процедура ДенежныеСредстваСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДССтрокиДенежныеСредства(ЭлементыФормы.ДенежныеСредства.ТекущиеДанные);

КонецПроцедуры // ДенежныеСредстваСтавкаНДСПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровДляДокументовРасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровДляДокументовРасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "ПараметрыЭлектронногоОбменаДокументами".
//
Процедура ДействияФормыПараметрыЭлектронногоОбменаДокументами(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПараметрыЭлектронногоОбменаДокументами(ЭтотОбъект);

КонецПроцедуры // ДействияФормыПараметрыЭлектронногоОбменаДокументами()

/////////////////////////////////////////////////


Процедура ПокупателиПриАктивизацииСтроки(Элемент = Неопределено)
	
	ОтборТовары = ЭлементыФормы.Товары.ОтборСтрок.КлючСтроки;
	
	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные <> Неопределено Тогда
		ОтборТовары.Значение = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки;
		ОтборТовары.Использование = Истина;
	Иначе
		ОтборТовары.Значение = 0;
		ОтборТовары.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСуммыПокупателей()
	
	ЭлементыФормы.ПокупателиТовары.ОбновитьСтроки();
	
КонецПроцедуры

Процедура УдалитьСвязанныеЗаписи(КлючПоиска, Отказ)
	
	НайденныеСтрокиТовары = Товары.НайтиСтроки(КлючПоиска);
	
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		Если Вопрос("При удалении покупателя будут очищены связанные с ним строки по товарам. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтрокиТовары Цикл
			Товары.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПокупателиТоварыПередУдалением(Элемент, Отказ)
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки);
	
	УдалитьСвязанныеЗаписи(КлючПоиска, Отказ);
	
КонецПроцедуры

Процедура ПокупателиТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанныеТовары = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекДанныеТовары.КлючСтроки = ПолучитьНовыйКлючСтроки();
		
		Если Копирование Тогда
			ТекДанныеТовары.ВыставленСФ = Ложь;
			ТекДанныеТовары.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПокупателиТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ПокупателиТовары.Колонки.Всего.Видимость Тогда
		
		Всего = 0;
		НайденныеСтрокиТовары = Товары.НайтиСтроки(Новый Структура("КлючСтроки" , ДанныеСтроки.КлючСтроки));
		Для Каждого Строка Из НайденныеСтрокиТовары Цикл
			Всего = Всего + Строка.Сумма + ?(СуммаВключаетНДС, 0, Строка.СуммаНДС);
		КонецЦикла;
			
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(Всего));
		
		Если ОформлениеСтроки.Ячейки.ВыставленСФ.ЗначениеФлажка
			И НЕ ЗначениеЗаполнено(ОформлениеСтроки.Ячейки.ДатаСФ.Значение) Тогда
			ОформлениеСтроки.Ячейки.ДатаСФ.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.ДатаСФ.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ПокупателиПриАктивизацииСтроки();
КонецПроцедуры

Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ТекДанныеТовары = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные;
	Если ТекДанныеТовары = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Не выбран покупатель!");
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанныеТовары.Покупатель) Тогда
		Отказ = Истина;
		Предупреждение("Не заполнен покупатель!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные <> Неопределено И НоваяСтрока Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
мКолонкиДокументы = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;

