////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ПередОткрытием" Формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПередОткрытиемФормыДокументаВведенногоНаОсновании(ЭтотОбъект, Отказ, ЭтаФорма);	
	ЭлектронныеДокументы.УстановитьЗаголовокФормыЭлектронногоДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обаботчик события "ПослеЗаписи" Формы
//
Процедура ПослеЗаписи() Экспорт
	
	ЭлектронныеДокументы.ПослеЗаписиФормыДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ОбновитьСтатусДокумента()
	
	СтатусДокумента = ?(Акцептовать, "Документ принят", "Документ НЕ ПРИНЯТ");
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Структура подчиненности документа" Командной панели "ДействияФормы"
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияОтправкаДокумента(ЗадаватьВопросОПовторнойОтправке = Истина, ЗадаватьВопросОЗаписиДокумента = Истина)
	
	Если Не ЭлектронныеДокументы.ПроверитьПередОтправкойЭлектронногоДокумента(ЭтаФорма, ЗадаватьВопросОПовторнойОтправке, ЗадаватьВопросОЗаписиДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ     = Ложь;
	Сообщение = "";
	ЭлектронныеДокументы.ОтправитьИсходящийЭлектронныйДокумент(ЭтотОбъект, Отказ, Сообщение);
	
	ЭлектронныеДокументы.ДействияПослеОтправкиДокумента(Ссылка, Отказ, Сообщение, ЭтаФорма);	
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Отправить" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыОтправить(Кнопка)
	
	ДействияОтправкаДокумента(Истина, Ложь);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле ввода "УчетнаяЗаписьЭлектронногоОбмена"
//
Процедура УчетнаяЗаписьЭлектронногоОбменаПриИзменении(Элемент)
	
	ЭлектронныеДокументы.ПриИзмененииУчетнойЗаписиВДокументе(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьСериюНоменклатуры(СтрокаТовараЭлДок, СтрокаТабличнойЧасти)
	
	// определение серии номенклатуры
	Если НЕ ЗначениеЗаполнено(СтрокаТовараЭлДок.НомерГТД)
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		
		Возврат;
		
	КонецЕсли;
		
	СсылкаНаНомерГТД = Справочники.НомераГТД.НайтиПоКоду(СтрокаТовараЭлДок.НомерГТД);
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаНомерГТД) Тогда
		
		ОбъектГТД = Справочники.НомераГТД.СоздатьЭлемент();
		ОбъектГТД.Код = СтрокаТовараЭлДок.НомерГТД;
		ОбъектГТД.Записать();
		
		СсылкаНаНомерГТД = ОбъектГТД.Ссылка;
	КонецЕсли;
	
	СсылкаНаСерию = Справочники.СерииНоменклатуры.НайтиПоРеквизиту("НомерГТД", СсылкаНаНомерГТД, , СтрокаТабличнойЧасти.Номенклатура);
	Если НЕ ЗначениеЗаполнено(СсылкаНаСерию) Тогда
		
		СтранаГТД = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТовараЭлДок.СтранаПроисхождения) Тогда 
			СтранаГТД = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтрокаТовараЭлДок.СтранаПроисхождения);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтранаГТД) Тогда
			
			СтранаГТД = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;
			
			Если Не ЗначениеЗаполнено(СтранаГТД) Тогда
			
				СтранаГТД = Справочники.КлассификаторСтранМира.Россия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектСерии = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		ОбъектСерии.Владелец = СтрокаТабличнойЧасти.Номенклатура;
		ОбъектСерии.СтранаПроисхождения = СтранаГТД;
		ОбъектСерии.НомерГТД = СсылкаНаНомерГТД;
		
		Если ЗначениеЗаполнено(СтрокаТовараЭлДок.СерийныйНомер) Тогда
			
			ОбъектСерии.СерийныйНомер = СтрокаТовараЭлДок.СерийныйНомер;	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовараЭлДок.Сертификат) Тогда
			
			ОбъектСерии.Сертификат = СтрокаТовараЭлДок.Сертификат;	
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовараЭлДок.СрокГодности) Тогда
			
			ОбъектСерии.СрокГодности = СтрокаТовараЭлДок.СрокГодности;	
			
		КонецЕсли;
		
		ОбъектСерии.Наименование = ОбъектСерии.СформироватьНаименование();
		ОбъектСерии.Записать();
		
		СсылкаНаСерию = ОбъектСерии.Ссылка;		
		
	КонецЕсли;							
	
	СтрокаТабличнойЧасти.СерияНоменклатуры = СсылкаНаСерию;
			
КонецПроцедуры

// Процедура - обаботчик события "Нажатие" в: Кнопка "СоздатьНакладную"
//
Процедура СоздатьДокументНажатие(Элемент)
	
	Если ЗначениеЗаполнено(УчетныйДокумент) Тогда
		Предупреждение("Документ ""Поступление товаров и услуг"" уже создан!");
		Возврат;
	КонецЕсли;
	
	Док = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	
	Док.НомерВходящегоДокументаЭлектронногоОбмена = ИсходныйДокумент.НомерТоварнойНакладной;
	Док.ДатаВходящегоДокументаЭлектронногоОбмена = ИсходныйДокумент.ДатаТоварнойНакладной;
	
	Док.Дата = ТекущаяДата();
		
	Если ЗначениеЗаполнено(ИсходныйДокумент.ИсходныйДокумент.УчетныйДокумент) Тогда
		
		// на основании заказа создаем поступление
		Док.Заполнить(ИсходныйДокумент.ИсходныйДокумент.УчетныйДокумент);
		
		Для Каждого СтрокаТовараЭлДок Из ИсходныйДокумент.Товары Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовараЭлДок.НомерГТД) Тогда
				Продолжить;
			КонецЕсли;
			
			// ищем первую строку с той же номенклатурой и не заполненной серией
			НоменклатураПоиска = СтрокаТовараЭлДок.Номенклатура;
			СерияПоиска = Справочники.СерииНоменклатуры.ПустаяСсылка();
			Количество = СтрокаТовараЭлДок.Количество;
			
			// поиск по номенклатуре количеству и пустой серии
			СтруктураПоиска = Новый Структура("Номенклатура,СерияНоменклатуры,Количество", НоменклатураПоиска, СерияПоиска, Количество);
			МассивСтрокТЧ = Док.Товары.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокТЧ.Количество() > 0 Тогда
				
				ЗаполнитьСериюНоменклатуры(СтрокаТовараЭлДок, МассивСтрокТЧ[0]);
				Продолжить;
				
			КонецЕсли;
			
			// поиск по номенклатуре и пустой серии
			СтруктураПоиска = Новый Структура("Номенклатура,СерияНоменклатуры", НоменклатураПоиска, СерияПоиска);
			МассивСтрокТЧ = Док.Товары.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрокТЧ.Количество() > 0 Тогда
				
				ЗаполнитьСериюНоменклатуры(СтрокаТовараЭлДок, МассивСтрокТЧ[0]);
				Продолжить;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Док.Организация = Организация;
		Док.Контрагент  = Контрагент;
		Док.ВалютаДокумента  = ИсходныйДокумент.ВалютаДокумента;
		
		СтруктураПараметров = Док.мСтруктураПараметровДляПолученияДоговора;
	
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетовДоговора", Док.ВалютаДокумента);
		СтруктураПараметров.Вставить("ВидСравненияВалютыВзаиморасчетов", "=");
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док, ПараметрыСеанса.ТекущийПользователь, , , , , СтруктураПараметров);
				
		Док.СуммаВключаетНДС = ИсходныйДокумент.СуммаВключаетНДС;
		Док.Сделка = ИсходныйДокумент.ИсходныйДокумент.УчетныйДокумент;
		
		Для каждого СтрокаТовараЭлДок Из ИсходныйДокумент.Товары Цикл
				
			Если СтрокаТовараЭлДок.Номенклатура.Услуга Тогда
				СтрокаТабличнойЧасти = Док.Услуги.Добавить();
			Иначе
				СтрокаТабличнойЧасти = Док.Товары.Добавить();
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТовараЭлДок.Номенклатура.ЕдиницаХраненияОстатков;
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Номенклатура               = СтрокаТовараЭлДок.Номенклатура;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаТовараЭлДок.ХарактеристикаНоменклатуры;
			СтрокаТабличнойЧасти.Количество   = СтрокаТовараЭлДок.Количество;
			
			СтрокаТабличнойЧасти.Сумма        = СтрокаТовараЭлДок.Сумма;
			СтрокаТабличнойЧасти.Цена         = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.СтавкаНДС    = СтрокаТовараЭлДок.СтавкаНДС;
			СтрокаТабличнойЧасти.СуммаНДС     = СтрокаТовараЭлДок.СуммаНДС;
			
			// определение серии номенклатуры
			ЗаполнитьСериюНоменклатуры(СтрокаТовараЭлДок, СтрокаТабличнойЧасти);
						
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Док);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Док);
				
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		Док.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		Акцептовать = Ложь;
		ОбновитьСтатусДокумента();
		Предупреждение("Операция не выполнена");		
		Возврат;
	КонецПопытки; 
		
	УчетныйДокумент = Док.Ссылка;
	
	ЭлектронныеДокументы.СкопироватьПрикрепленныйФайлы(ИсходныйДокумент, УчетныйДокумент);
	
	Акцептовать = Истина;
	ЗаписатьВФорме();
	ОбновитьСтатусДокумента();
	
	ФормаДокумента = Док.ПолучитьФорму(, ЭтаФорма);
	ФормаДокумента.Открыть();		
		
КонецПроцедуры

Процедура УчетнаяЗаписьЭлектронногоОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.НачалоВыбораУчетнойЗаписиВДокументе(Элемент, СтандартнаяОбработка, ЭтотОбъект, ЭтаФорма);	
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	ОбновитьСтатусДокумента();
	
КонецПроцедуры

Процедура ОтклонитьДокументНажатие(Элемент)
	
	Если ЗначениеЗаполнено(УчетныйДокумент) Тогда
		
		ОтветПользователя = Вопрос("На основании документа создано поступление. Вы уверены что хотите отклонить документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОбъектУчетногоДокумента = УчетныйДокумент.ПолучитьОбъект();
		ОбъектУчетногоДокумента.УстановитьПометкуУдаления(Истина);
		
	КонецЕсли;
		
	Акцептовать = Ложь;
	
	ОбновитьСтатусДокумента();
	
	ЗаписатьВФорме();
	
	// предлагаем отправить документ
	ОтветПользователя = Вопрос("Документ ОТКЛОНЕН! Отправить отклонение?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДействияОтправкаДокумента(Ложь, Ложь);
	
КонецПроцедуры

// обработчик показа состава файла обмена
Процедура ДействияФормыПоказатьДанныеОбмена(Кнопка)
	
	ЭлектронныеДокументы.ПоказатьДанныеОбмена(ЭтотОбъект);	
	
КонецПроцедуры

// показ примечания
Процедура ПримечаниеОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПоказатьДлинныеСтроковыеДанные(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КомментарийОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлектронныеДокументы.ПоказатьДлинныеСтроковыеДанные(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриОткрытии()
	Если НЕ ЭтоНовый() Тогда
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
