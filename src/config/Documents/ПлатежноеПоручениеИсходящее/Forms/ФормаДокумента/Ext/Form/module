////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

Перем ИнвертироватьСуммы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();

	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);

	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);

КонецПроцедуры

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа()

	АдресСуммы = Найти(НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение = "" И НЕ СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	КонецЕсли;
	Если ТекстНазначение=""
		И РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		
		ТекстНазначение = ТекстНазначение
			+ ?(ПустаяСтрока(ТекстНазначение), "По ", " по ")
			+ Строка(СтрокаПлатеж.ДоговорКонтрагента);
	КонецЕсли;

	ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТекстНДС = "";
	
		ТабНДС=РасшифровкаПлатежа.Выгрузить();
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
			ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) ИЛИ СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТабНДС.Итог("СуммаНДС") > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
		
	КонецЕсли;
	
	НазначениеПлатежа = ТекстНазначение + Символы.ПС + ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;

	КонецЕсли;

КонецПроцедуры // УстановитьФокус()

Процедура УстановитьДоступностьДокументаРасчетов()

	Если СтрокаПлатеж <> Неопределено Тогда
		РасчетыПоДокументам = СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность        = РасчетыПоДокументам;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Доступность = РасчетыПоДокументам;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.ТолькоПросмотр = НЕ РасчетыПоДокументам;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДоступностьСделки()
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СделкаДоступна = ЕстьРасчетыСКонтрагентами
			И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами)
			И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами)
			И (СтрокаПлатеж.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее);
		ЭлементыФормы.Сделка.Доступность = СделкаДоступна;
		ЭлементыФормы.НадписьСделка.Доступность = СделкаДоступна;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ТолькоПросмотр = НЕ СделкаДоступна;
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает видимость (доступность) элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ВозможноПеречислениеВБюджет = 
		(ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
		И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
	
	ЭлементыФормы.Панель1.Страницы.СтраницаПеречислениеВБюджет.Видимость = ВозможноПеречислениеВБюджет;
	
	Если ВозможноПеречислениеВБюджет Тогда
	
		ЭлементыФормы.ПеречислениеВБюджет.Доступность =
			(ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		
		ЭлементыФормы.ВидПеречисленияВБюджет.Доступность = ПеречислениеВБюджет;
		ЭлементыФормы.ВидПеречисленияВБюджет.АвтоОтметкаНезаполненного = ПеречислениеВБюджет;
		Если НЕ ПеречислениеВБюджет Тогда
			ЭлементыФормы.ВидПеречисленияВБюджет.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.НадписьСтатусСоставителя.Доступность = ПеречислениеВБюджет;
		ЭлементыФормы.СтатусСоставителя.Доступность        = ПеречислениеВБюджет;
		ЭлементыФормы.НадписьКодБК.Доступность             = ПеречислениеВБюджет;
		ЭлементыФормы.КодБК.Доступность                    = ПеречислениеВБюджет;
		ЭлементыФормы.НадписьКодОКАТО.Доступность          = ПеречислениеВБюджет;
		ЭлементыФормы.КодОКАТО.Доступность                 = ПеречислениеВБюджет;
		ЭлементыФормы.ПанельПлатежейВБюджет.Доступность    = ПеречислениеВБюджет;
	
		УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаПодотчетнику", ЭлементыФормы.ПанельПлатежи);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПереводНаДругойСчет", ЭлементыФормы.ПанельПлатежи);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
	 		
	КонецЕсли;
	
	ВидимостьКонтрагента = (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет);
	ЭлементыФормы.НадписьПолучатель.Видимость = ВидимостьКонтрагента;
	ЭлементыФормы.Контрагент.Видимость        = ВидимостьКонтрагента;
	
	ЭлементыФормы.НадписьСписок.Видимость = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	ЭлементыФормы.Список.Видимость        = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	ЭлементыФормы.Список1.Видимость       = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
	Если ЧастичнаяОплата Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаЧастичнаяОплата", ЭлементыФормы.ПанельОплата);
	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("СтраницаОплата", ЭлементыФормы.ПанельОплата);
	КонецЕсли;
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность                        = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КнопкаПодбор.Доступность                                                    = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить.Кнопки.Заполнить.Доступность = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность                            = НЕ ЧастичнаяОплата;
	
	ЭлементыФормы.ВалютаВзаиморасчетовРаботника.Доступность = НЕ ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = ОтражатьВБухгалтерскомУчете;
	
	ПоказатьРеквизитыПлан = (НЕ Список) И ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа);
	ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость        = ПоказатьРеквизитыПлан;
	ЭлементыФормы.СуммаПлатежаПлан.Видимость              = ПоказатьРеквизитыПлан;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость = ПоказатьРеквизитыПлан;
	ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость       = ПоказатьРеквизитыПлан;
	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость         = ПоказатьРеквизитыПлан;
	ЭлементыФормы.КурсВзаиморасчетовПланПодотчетник.Видимость        = ПоказатьРеквизитыПлан;
	ЭлементыФормы.СуммаПлатежаПланПодотчетник.Видимость              = ПоказатьРеквизитыПлан;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПланПодотчетник.Видимость = ПоказатьРеквизитыПлан;
	ЭлементыФормы.НадписьСуммаПлатежаПланПодотчетник.Видимость       = ПоказатьРеквизитыПлан;
	ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчетник.Видимость         = ПоказатьРеквизитыПлан;
	
	УстановитьДанныеДляРеквизитов();
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, 
		"НадписьПроект,Проект,НадписьПроектПрочие,ПроектПрочие,НадписьПроектПодотчетник,ПроектПодотчетник,РасшифровкаПлатежа.Проект");
			
	УказаниеКППплательщикаОбязательно = ПеречислениеВБюджет;
	
	ЭлементыФормы.КПППлательщика.АвтоОтметкаНезаполненного = УказаниеКППплательщикаОбязательно;
	Если НЕ УказаниеКППплательщикаОбязательно Тогда
		ЭлементыФормы.КПППлательщика.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	УказаниеКППполучателяОбязательно = ПеречислениеВБюджет;
	
	ЭлементыФормы.КПППолучателя.АвтоОтметкаНезаполненного = УказаниеКППполучателяОбязательно;
	Если НЕ УказаниеКППполучателяОбязательно Тогда
		ЭлементыФормы.КПППолучателя.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИдентификатораПлатежа();
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВидимостьИдентификатораПлатежа()
	
	ПрименяетсяИдентификаторПлатежа = (Дата >= ПлатежиВБюджетКлиентСервер.НачалоПримененияИдентификатораПлатежа());
	ЭлементыФормы.НадписьИдентификаторПлатежа.Видимость = ПрименяетсяИдентификаторПлатежа;
	ЭлементыФормы.ИдентификаторПлатежа.Видимость        = ПрименяетсяИдентификаторПлатежа;
	
КонецПроцедуры

Процедура УстановитьВидимостьРеквизитовПлатежаВБюджет()
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("НалоговыйПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ТаможенныйПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ИнойПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	КонецЕсли;
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
		Если ПустаяСтрока(ПериодичностьУплаты) ИЛИ (ПериодичностьУплаты = "0") Тогда
			ЭлементыФормы.ПанельПоказателяПериода.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ПанельПоказателяПериода.Видимость = Истина;
			Если ПериодичностьУплаты = "-" Тогда
				ЭлементыФормы.ПанельПоказателяПериода.ТекущаяСтраница = ЭлементыФормы.ПанельПоказателяПериода.Страницы.ПлатежПоКонкретнойДате;
			Иначе
				ЭлементыФормы.ПанельПоказателяПериода.ТекущаяСтраница = ЭлементыФормы.ПанельПоказателяПериода.Страницы.ПлатежПоПериоду;
				ЭлементыФормы.НадписьПериодПлатежа.Видимость = НЕ ПериодичностьУплаты = "ГД";
				ЭлементыФормы.ПериодПлатежа.Видимость        = НЕ ПериодичностьУплаты = "ГД";
				Если ПериодичностьУплаты = "МС" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 12;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Месяц:";
				ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 4;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Квартал:";
				ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 2;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Полугодие:";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.НадписьКодОКАТО.Заголовок = "Код " + мИмяРеквизитаКодаТерритории;
	ЭлементыФормы.КодОКАТО.Подсказка = "Код " + мИмяРеквизитаКодаТерритории;
	
КонецПроцедуры

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И (НЕ Список) Тогда
		
		ЭлементыФормы.СуммаДокумента.Данные           = "ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		ЭлементыФормы.НадписьСуммаДокумент.Данные     = "НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные    = "";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок = "";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные            = "НадписьВалютаДокумент";
				
		ИнвертироватьСуммы = Истина;
		
	Иначе
		
		ЭлементыФормы.СуммаДокумента.Данные          = "СуммаДокумента";
		ЭлементыФормы.НадписьВалютаДокумент.Данные   = "НадписьВалютаДокумент";
		ЭлементыФормы.НадписьСуммаДокумент.Данные    = "";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок = "Сумма: ";
		
		ИнвертироватьСуммы = Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		
		ПриИзмененииОрганизации();
		
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтрокаПлатеж.ДоговорКонтрагента.ОсновнаяСтатьяДвиженияДенежныхСредств; 
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	СтрокаПлатеж.ДокументПланированияПлатежа   = Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка                        = Неопределено;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено;
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
    СтрокаПлатеж.СтавкаНДС=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");

	РассчитатьСуммуВзаиморасчетов();

	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	ИННПолучателя = Контрагент.ИНН;
	КПППолучателя = Контрагент.КПП;

КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииОрганизации(УстанавливатьСчетОрганизации = Истина)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если УстанавливатьСчетОрганизации Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		Иначе
			СчетОрганизации = Неопределено;
		КонецЕсли;
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СчетКонтрагента = Неопределено;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПолучитьПризнакиОтраженияВРеглУчете(Организация, 
		ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мОтражатьВРегламентированномУчете);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Если НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(
			РасчетныйДокументРаботника, "Организация", Организация, "АвансовыйОтчет") 
			Тогда
			РасчетныйДокументРаботника = Документы.АвансовыйОтчет.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ПеречислениеВБюджет Тогда
		КодОКАТО = Справочники.Организации.КодТерритории(Организация, Дата);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		Организация = СчетОрганизации.Владелец;
		ПриИзмененииОрганизации(Ложь);
		
		АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
			
		УстановитьРеквизитыПлательщика();
		
	КонецЕсли;
	
	ПересчитыватьСумму = Истина;
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(
		ВалютаДокумента, КурсДокумента, КратностьДокумента, 
		?(ДатаОплаты = '00010101', Дата, КонецДня(ДатаОплаты)), 
		СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств, ПересчитыватьСумму);
	
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
			ВалютаПлатежаПлан = Строка.ДокументПланированияПлатежа.ВалютаДокумента;
			Если ЗначениеЗаполнено(ВалютаПлатежаПлан) И (ВалютаПлатежаПлан <> ВалютаДокумента) Тогда
				Строка.ДокументПланированияПлатежа = Неопределено;
				Строка.КурсВзаиморасчетовПлан      = 0;
				Строка.СуммаПлатежаПлан            = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
		
	Если ПересчитыватьСумму Тогда
		// Пересчитаем суммы платежей при изменении валюты
		
		СуммаДокументаПриИзменении();
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				
				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
					Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
					
				ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
					Строка.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						Строка.СуммаВзаиморасчетов, 
						ВалютаВзаиморасчетов, ВалютаДокумента,
						Строка.КурсВзаиморасчетов, КурсДокумента,
						Строка.КратностьВзаиморасчетов, КратностьДокумента);	
				Иначе
					Строка.СуммаПлатежа = 0;
				КонецЕсли;
				
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(Строка);
				
			КонецЦикла;	
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СформироватьНазначениеПлатежа();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			Если ЗначениеЗаполнено(ВалютаДокумента) Тогда 
				НоваяВалютаВзаиморасчетов = ВалютаДокумента;
			Иначе
				НоваяВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если ВалютаВзаиморасчетовРаботника <> НоваяВалютаВзаиморасчетов Тогда
			
				ВалютаВзаиморасчетовРаботника = НоваяВалютаВзаиморасчетов;
				ПриИзмененииВалютыВзаиморасчетовРаботника();
			
			КонецЕсли;
			
			СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
			
		Иначе
			
			СуммаДокументаПриИзменении();
			
		КонецЕсли;
		
	Иначе
		
		// Пересчитаем суммы взаиморасчетов
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				
				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
					Строка.СуммаВзаиморасчетов=Строка.СуммаПлатежа;
					
				ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
					Строка.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
						Строка.СуммаПлатежа, 
						ВалютаДокумента, ВалютаВзаиморасчетов,
						КурсДокумента, Строка.КурсВзаиморасчетов,
						КратностьДокумента, Строка.КратностьВзаиморасчетов);	
				Иначе
					Строка.СуммаВзаиморасчетов = 0;
				КонецЕсли;
								
			КонецЦикла;	
			
			СформироватьНазначениеПлатежа();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			Если ЗначениеЗаполнено(ВалютаДокумента) Тогда 
				НоваяВалютаВзаиморасчетов = ВалютаДокумента;
			Иначе
				НоваяВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если ВалютаВзаиморасчетовРаботника <> НоваяВалютаВзаиморасчетов Тогда
			
				ВалютаВзаиморасчетовРаботника = НоваяВалютаВзаиморасчетов;
				ПриИзмененииВалютыВзаиморасчетовРаботника();
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетКонтрагента) И (СчетОрганизации.ВалютаДенежныхСредств <> СчетКонтрагента.ВалютаДенежныхСредств) Тогда
		СчетКонтрагента = Неопределено;
	КонецЕсли;
	
	НадписьВалютаДокумент = СокрЛП(СчетОрганизации.ВалютаДенежныхСредств);
			
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
			
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		мТекущаяВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
			
	СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа, 
		ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан > 0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетов, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Если Организация.Пустая() Тогда
			
			Организация=СчетКонтрагента.Владелец;

			Если Не ПустаяСтрока(Номер) Тогда
				МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		
		Если Контрагент.Пустая() Тогда
			Контрагент=СчетКонтрагента.Владелец;
			ПриИзмененииКонтрагента();
			ПриИзмененииДоговора();
			УстановитьФокус();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (СчетКонтрагента.Пустая() ИЛИ СчетОрганизации.Пустая() ИЛИ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств) Тогда
		
		Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ТекстСообщения="Несоответствие валют выбранных счетов организации!";
		Иначе
			ТекстСообщения="Валюта счета контрагента не соответствует валюте счета организации!";
		КонецЕсли;
		
		Сообщить(ТекстСообщения);
		СчетКонтрагента = "";
		
		Возврат;
		
	КонецЕсли;	

	СформироватьНазначениеПлатежа();

КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

Процедура ЗаполнениеСписковРеквизитовПлатежейВБюджет()

	ЭлементыФормы.ПериодичностьУплаты.СписокВыбора = ПлатежиВБюджетКлиентСервер.ВидыНалоговыхПериодов();
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		// выполнение условия возможно в двух случаях:
		// 1. случай вызова из тела модуля для нового документа - в этом случае списки заполнятся при повторном вызове из процедуры ПриОткрытии()
		// 2. случай установки пустой даты - при записи сработает проверка на заполненность реквизитов, при изменении даты списки перезаполнятся.
		Возврат;
	КонецЕсли;
	
	ПериодПравил = ПериодПравил();
	
	ЭлементыФормы.СтатусСоставителя.СписокВыбора   = ПлатежиВБюджетКлиентСервер.СтатусыПлательщика(ПериодПравил);
	ЭлементыФормы.ПоказательОснования.СписокВыбора = ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж, ПериодПравил);
	ЭлементыФормы.ПоказательТипа.СписокВыбора      = ПлатежиВБюджетКлиентСервер.ТипыПлатежа(Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж, ПериодПравил);
	
	ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора = ПлатежиВБюджетКлиентСервер.ОснованияПлатежа(Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, ПериодПравил);
	ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора      = ПлатежиВБюджетКлиентСервер.ТипыПлатежа(Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, ПериодПравил);
	
КонецПроцедуры // ЗаполнениеСписковРеквизитовПлатежейВБюджет()

Функция ПериодПравил()
	
	Реквизиты = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджет(ЭтотОбъект);
	Контекст  = Документы.ПлатежноеПоручениеИсходящее.КонтекстПлатежногоДокумента(ЭтотОбъект);
	
	Если ПлатежиВБюджетКлиентСервер.ПереходныйПериодПрименения107н(Реквизиты, Контекст) Тогда
		Возврат ПлатежиВБюджетКлиентСервер.НачалоДействияПриказа107н();
	Иначе
		Возврат Дата;
	КонецЕсли;
	
КонецФункции

// Процедура осуществляет привязку значений реквизитов платежей в бюджет к элементам списка выбора связанных элементов формы
// Вызывается только для нового документа из процедуры ПриОткрытии()
//
// Параметры:
//  Нет.
//
Процедура ОбработатьЭлементыФормыРеквизитовПлатежейВБюджетПослеЗаполненияСписковВыбора()
	
	// обрабатывать значения реквизитов необходимо только для нового документа
	Если НЕ ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	// при копировании значение реквизитов установлены, но списки выбора реквизитов инициализируются после момента привязки элементов списка выбора
	// к значениям реквизитов, то есть значение реквизита отображается на форме не некорректно - не в виде представления элемента списка выбора.
	
	УстанавливатьПоУмолчанию = Ложь;
	СписокСвойств 			 = "";
	
	Если ЗначениеЗаполнено(СтатусСоставителя) И ЭлементыФормы.СтатусСоставителя.СписокВыбора.Количество() > 0 Тогда
		ЭлементСпискаВыбора = ЭлементыФормы.СтатусСоставителя.СписокВыбора.НайтиПоЗначению(СтатусСоставителя);
		Если ЭлементСпискаВыбора = Неопределено Тогда
			// если значения реквизита нет в списке выбора связанного элемента формы, то его нужно установить в значение по умолчанию
			УстанавливатьПоУмолчанию = Истина;
			СписокСвойств = СписокСвойств + ?(ПустаяСтрока(СписокСвойств), "", ", ") + "СтатусСоставителя";
		Иначе
			// для корректного отображения значения реквизита (в виде представления) осуществим программную привязку элемента списка выбора к значению реквизита
			ЭлементыФормы.СтатусСоставителя.ВыделенныйТекст = ЭлементСпискаВыбора.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Если ЗначениеЗаполнено(ПоказательОснования) И ЭлементыФормы.ПоказательОснования.СписокВыбора.Количество() > 0 Тогда
			ЭлементСпискаВыбора = ЭлементыФормы.ПоказательОснования.СписокВыбора.НайтиПоЗначению(ПоказательОснования);
			Если ЭлементСпискаВыбора = Неопределено Тогда
				// если значения реквизита нет в списке выбора связанного элемента формы, то его нужно установить в значение по умолчанию
				УстанавливатьПоУмолчанию = Истина;
				СписокСвойств = СписокСвойств + ?(ПустаяСтрока(СписокСвойств), "", ", ") + "ПоказательОснования";
			Иначе
				// для корректного отображения значения реквизита (в виде представления) осуществим программную привязку элемента списка выбора к значению реквизита
				ЭлементыФормы.ПоказательОснования.ВыделенныйТекст = ЭлементСпискаВыбора.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоказательТипа) И ЭлементыФормы.ПоказательТипа.СписокВыбора.Количество() > 0  Тогда
			ЭлементСпискаВыбора = ЭлементыФормы.ПоказательТипа.СписокВыбора.НайтиПоЗначению(ПоказательТипа);
			Если ЭлементСпискаВыбора = Неопределено Тогда
				// если значения реквизита нет в списке выбора связанного элемента формы, то его нужно установить в значение по умолчанию
				УстанавливатьПоУмолчанию = Истина;
				СписокСвойств = СписокСвойств + ?(ПустаяСтрока(СписокСвойств), "", ", ") + "ПоказательТипа";
			Иначе
				// для корректного отображения значения реквизита (в виде представления) осуществим программную привязку элемента списка выбора к значению реквизита
				ЭлементыФормы.ПоказательТипа.ВыделенныйТекст = ЭлементСпискаВыбора.Представление;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		
		Если ЗначениеЗаполнено(ПоказательОснования) И ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора.Количество() > 0 Тогда
			ЭлементСпискаВыбора = ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора.НайтиПоЗначению(ПоказательОснования);
			Если ЭлементСпискаВыбора = Неопределено Тогда
				// если значения реквизита нет в списке выбора связанного элемента формы, то его нужно установить в значение по умолчанию
				УстанавливатьПоУмолчанию = Истина;
				СписокСвойств = СписокСвойств + ?(ПустаяСтрока(СписокСвойств), "", ", ") + "ПоказательОснования";
			Иначе
				// для корректного отображения значения реквизита (в виде представления) осуществим программную привязку элемента списка выбора к значению реквизита
				ЭлементыФормы.ПоказательОснованияТаможня.ВыделенныйТекст = ЭлементСпискаВыбора.Представление;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоказательТипа) И ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора.Количество() > 0  Тогда
			ЭлементСпискаВыбора = ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора.НайтиПоЗначению(ПоказательТипа);
			Если ЭлементСпискаВыбора = Неопределено Тогда
				// если значения реквизита нет в списке выбора связанного элемента формы, то его нужно установить в значение по умолчанию
				УстанавливатьПоУмолчанию = Истина;
				СписокСвойств = СписокСвойств + ?(ПустаяСтрока(СписокСвойств), "", ", ") + "ПоказательТипа";
			Иначе
				// для корректного отображения значения реквизита (в виде представления) осуществим программную привязку элемента списка выбора к значению реквизита
				ЭлементыФормы.ПоказательТипаТаможня.ВыделенныйТекст = ЭлементСпискаВыбора.Представление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УстанавливатьПоУмолчанию Тогда 
		СтруктураРеквизитов = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджетПоУмолчанию(
			Дата, 
			Организация, 
			СчетКонтрагента,
			ПеречислениеВБюджет);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов, СписокСвойств);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриИзмененииКлючевогоРеквизита(ИмяРеквизита, УстановитьЗначенияПоУмолчанию = Ложь)
	
	// Получим значения по умолчанию, которые отличаются от уже установленных
	Изменения = ПлатежиВБюджетКлиентСервер.ИсправитьЗначенияРеквизитов(
		ИмяРеквизита, 
		Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджет(ЭтаФорма),
		Документы.ПлатежноеПоручениеИсходящее.КонтекстПлатежногоДокумента(ДокументОбъект),
		УстановитьЗначенияПоУмолчанию); 
		
	Документы.ПлатежноеПоручениеИсходящее.УстановитьЗначенияРеквизитовПлатежаВБюджет(ЭтаФорма, Изменения);
		
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
		Если Изменения.Свойство("НалоговыйПериод") Тогда
			ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(Изменения.НалоговыйПериод);
			ПериодичностьУплаты = ОписаниеПериода.Периодичность;
			ПериодичностьУплатыПриИзменении("");
		КонецЕсли;
		
		Если Изменения.Свойство("ДатаДокумента") Тогда
			
			Если Изменения.ДатаДокумента = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
				ПоказательДаты = Дата('00010101');
			Иначе
				ПоказательДаты = ПлатежиВБюджетКлиентСервер.ПреобразоватьСтрокуКДате(Изменения.ДатаДокумента);
				Если ПоказательДаты = Неопределено Тогда
					ПоказательДаты = Дата('00010101');
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда
		
		// Заполним списки реквизитов платежей в бюджет корректными значениями с учетом определенной даты
		ЗаполнениеСписковРеквизитовПлатежейВБюджет();
		ОбработатьЭлементыФормыРеквизитовПлатежейВБюджетПослеЗаполненияСписковВыбора();
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
						
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(РасшифровкаПлатежа[0], ВидОперации);
			
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
				ПеречислениеВБюджет = Истина;
				УстановитьВидПлатежаВБюджет();
				СтруктураРеквизитов = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджетПоУмолчанию(
					Дата, Организация, СчетКонтрагента, ПеречислениеВБюджет);
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
			КонецЕсли;
			
			АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
				Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
									 
			УстановитьРеквизитыПлательщика();
			УстановитьРеквизитыПолучателя();
			
			ВидПлатежа = ВосстановитьЗначение("ПлатежноеПоручениеВидПлатежа");
			ОчередностьПлатежа = 5;
			
			ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
			СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
			
			СформироватьНазначениеПлатежа();
			
		КонецЕсли;

	Иначе

		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		ЭтаФорма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр ИЛИ ЧастичнаяОплата;

	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	УстановитьКурсДокумента();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);

	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мОтражатьВРегламентированномУчете = ЗначениеЗаполнено(Организация) И Организация.ОтражатьВРегламентированномУчете;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										ВидОперации.Метаданные().ЗначенияПеречисления, 
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	
	Список = РасшифровкаПлатежа.Количество() > 1;
	
	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.НадписьЧастичнаяОплата.Заголовок = УправлениеДенежнымиСредствами.СформироватьТекстЧастичнаяОплата(
			Ссылка, "ДенежныеСредстваКСписанию", "ДокументСписания");
	КонецЕсли;

	//Установка меню Клиент-Банк
	РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
	
	Если ПеречислениеВБюджет И (ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж) Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;
	
	ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного = Оплачено;
	Если НЕ Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	мИмяРеквизитаКодаТерритории = Справочники.Организации.ИмяРеквизитаКодаТерритории(Дата);
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	СохранитьЗначение("ПлатежноеПоручениеВидПлатежа", ВидПлатежа);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	Если СтрокаПлатеж <> Неопределено Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
		Иначе
			ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(
			ВалютаВзаиморасчетов, СтрокаПлатеж.КурсВзаиморасчетов, СтрокаПлатеж.КратностьВзаиморасчетов,
			мВалютаРегламентированногоУчета, Истина);
		
		НадписьВалютаДокумент = Строка(СчетОрганизации.ВалютаДенежныхСредств);
		
		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетов) + ":";
		КонецЕсли;
		
		ЭлементыФормы.НадписьИтогоСписок.Заголовок = "Итого платежей по списку: "
			+ Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")
			+ " " + СокрЛП(ВалютаДокумента);
										
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ТекстКурсаЗаявки = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(
				ВалютаВзаиморасчетов, СтрокаПлатеж.КурсВзаиморасчетовПлан, СтрокаПлатеж.КратностьВзаиморасчетов,
				мВалютаРегламентированногоУчета, Истина);
			
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок            = ТекстКурсаЗаявки;
			ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчетник.Заголовок = ТекстКурсаЗаявки;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
			
	Если Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРеглУчета(ЭтотОбъект,СтрокаПлатеж, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан = ?(ЗначениеВыбора.СуммаВзаиморасчетов<>0, ЗначениеВыбора.СуммаПлатежа / ЗначениеВыбора.СуммаВзаиморасчетов, 0);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		УправлениеВзаиморасчетами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы. 
// Вызывается при смене или перечитывании объекта.
Процедура ПриИзмененииДанных()
	
	Если ТипЗнч(СтрокаПлатеж) = Тип("ДокументТабличнаяЧастьСтрока.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа")
		И РасшифровкаПлатежа.Индекс(СтрокаПлатеж) = -1 Тогда
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
		СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	СтарыйВидОперации=ВидОперации;
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя];
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ПеречислениеВБюджет = Истина;
			СтруктураРеквизитов = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджетПоУмолчанию(
				Дата, Организация, СчетКонтрагента, ПеречислениеВБюджет);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
			УстановитьВидПлатежаВБюджет();
			Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
				УстановитьРеквизитыПоказателяПериода();
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ПеречислениеВБюджет = Ложь;
			УстановитьВидПлатежаВБюджет();
			СтруктураРеквизитов = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджетПоУмолчанию(
				Дата, Организация, СчетКонтрагента, ПеречислениеВБюджет);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
		КонецЕсли;
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Список = Ложь;
		
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		УстановитьФокус();
		СформироватьНазначениеПлатежа();
		
		ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
		УстановитьВидимость();
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
				ВалютаВзаиморасчетовРаботника = ВалютаДокумента;
			КонецЕсли;
			
			ПриИзмененииВалютыВзаиморасчетовРаботника();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
			СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			ЭлементыФормы.СчетКонтрагента.ВыборПоВладельцу = Организация;
			
		ИначеЕсли СтарыйВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			ЭлементыФормы.СчетКонтрагента.ВыборПоВладельцу = Контрагент;
			
		КонецЕсли;
		
		АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
		
		УстановитьРеквизитыПлательщика();
		УстановитьРеквизитыПолучателя();

	КонецЕсли;
		
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            			=НовыйКонтрагент;
		СчетКонтрагента					=НовыйКонтрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.ДоговорКонтрагента =НовыйКонтрагент.ОсновнойДоговорКонтрагента;
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()

//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=Лев(РеквизитыКонтрагента[0].Реквизит,10);
	
	СтрокаИНН=РеквизитыКонтрагента.Найти(ТипКонтрагента+"ИНН","Реквизит");
	
	Если НЕ СтрокаИНН=Неопределено Тогда
		
		ИННКраткий=СтрокаИНН.Значение;
		НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
			Предупреждение("Контрагент с ИНН "+ИННКраткий+" уже был создан ранее.")
			
		Иначе                         
			
			Если РеквизитыКонтрагента.Количество()>0 Тогда
				                            
				ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
				ФормаКонтрагентов.СформироватьИЗагрузитьДеревоПоТаблицеЗначений(РеквизитыКонтрагента);
				ФормаКонтрагентов.ОткрытьМодально();
				
				//Проверяем, не был ли создан контрагент в сеансе работы с обработкой
				НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
				
				Если НЕ НовыйКонтрагент.Пустая() Тогда
					
					ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьКурсДокумента();
	РассчитатьСуммуПлатежа();
	
	ЗаполнениеСписковРеквизитовПлатежейВБюджет();
	
	мИмяРеквизитаКодаТерритории = Справочники.Организации.ИмяРеквизитаКодаТерритории(Дата);
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации();

	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПлательщика();

	УстановитьВидимость();
	УстановитьФокус();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПолучателя();

КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПлательщика();
	
	УстановитьВидимость();
	УстановитьФокус();

КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)

	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();

КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаНДС"
//
Процедура СуммаНДСПриИзменении(Элемент)

	СформироватьНазначениеПлатежа();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаДокументаРасчетыПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
			
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();

	Если ЗначениеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;

	ПриИзмененииСчетаКонтрагента();

	ПриИзмененииДоговора();
	УстановитьФокус();

	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПолучателя();

КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если ОтражатьВБухгалтерскомУчете 
		И ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда 
		
		Если ЗначениеЗаполнено(СчетОрганизации) Тогда 
			ВалютаВзаиморасчетовРаботника = СчетОрганизации.ВалютаДенежныхСредств;
		Иначе
			ВалютаВзаиморасчетовРаботника = мВалютаРегламентированногоУчета;
		КонецЕсли;
		
		ПриИзмененииВалютыВзаиморасчетовРаботника();
		
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете 
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
		
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	УстановитьДоступностьСделки();
	УстановитьДоступностьДокументаРасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	ДоговорСтрокаПлатеж = СтрокаПлатеж.ДоговорКонтрагента;
	Если НЕ ДоговорСтрокаПлатеж.РасчетыВУсловныхЕдиницах
		И ДоговорСтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	Иначе
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;					
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
			РассчитатьСуммуПлатежаПлан();
		КонецЕсли;
		
	Иначе	
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
				
				РассчитатьСуммуВзаиморасчетов();
				
			Иначе
				
				СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;

				Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
										
				КонецЕсли;
				
			КонецЕсли;
			
			СформироватьНазначениеПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Значение=Ссылка;
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Использование=Истина;
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

// Заполняет ИНН плательщика при нажатии на кнопку
//
Процедура ЗаполнитьИННПлательщикаНажатие(Элемент)

	Если ПустаяСтрока(ИННПлательщика) Тогда
		ИННПлательщика = АвтоЗначенияРеквизитов.ИННПлательщика;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП плательщика при нажатии на кнопку
//
Процедура ЗаполнитьКПППлательщикаНажатие(Элемент)

	Если ПустаяСтрока(КПППлательщика) Тогда
		КПППлательщика = АвтоЗначенияРеквизитов.КПППлательщика;
	КонецЕсли;

КонецПроцедуры

// Заполняет ИНН получателя при нажатии на кнопку
//
Процедура ЗаполнитьИННПолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		ИННПолучателя = Контрагент.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП получателя при нажатии на кнопку
//
Процедура ЗаполнитьКПППолучателяНажатие(Элемент)

	Если ПустаяСтрока(КПППолучателя) Тогда
		КПППолучателя = АвтоЗначенияРеквизитов.КПППолучателя;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если НЕ ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
 	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовРаботникПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовРаботникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	Если ВалютаВзаиморасчетовРаботника.Пустая() Тогда
		Сообщить("Не указана валюта взаиморасчетов");
		Возврат;
	КонецЕсли;
							   
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовРаботника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   				   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ПриИзмененииВалютыВзаиморасчетовРаботника()
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		И НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(
			РасчетныйДокументРаботника, "ВалютаДокумента", ВалютаВзаиморасчетовРаботника, "АвансовыйОтчет") 
		Тогда
		РасчетныйДокументРаботника = Документы.АвансовыйОтчет.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуВзаиморасчетов();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВалютаВзаиморасчетовРаботникаПриИзменении(Элемент)
	
	ПриИзмененииВалютыВзаиморасчетовРаботника();
	
КонецПроцедуры

Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		И НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(
			РасчетныйДокументРаботника, "ФизЛицо", ФизЛицо, "АвансовыйОтчет") 
		Тогда
		РасчетныйДокументРаботника = Документы.АвансовыйОтчет.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументРаботникаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(, Элемент);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Организация.Установить(Организация);
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Установить(ВалютаВзаиморасчетовРаботника);
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Установить(ФизЛицо);
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументРаботникаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(РасчетныйДокументРаботника) Тогда
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			ФизЛицо = РасчетныйДокументРаботника.ФизЛицо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			ВалютаВзаиморасчетовРаботника = РасчетныйДокументРаботника.ВалютаДокумента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность; 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = РасчетныйДокументРаботника.Организация;
		КонецЕсли;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуПлатежа();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		И НЕ ЗначениеЗаполнено(ФизЛицо) 
		Тогда
		Сообщить("Не указан подотчетник.");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				, ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					, Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				, ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				, КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			, КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						, Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					, "ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			, Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	, Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				, СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					, УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			, СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					, Организация);
	СтруктураПараметров.Вставить("Проект"						, СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
    	СтруктураПараметров.Вставить("Контрагент"				, ФизЛицо);
	Иначе
    	СтруктураПараметров.Вставить("Контрагент"				, Контрагент);
	КонецЕсли;
	
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			, СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						, СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
			
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
										
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать валюту взаиморасчетов."); 
			Возврат;
		КонецЕсли;
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
			Возврат;
		КонецЕсли;
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;

КонецПроцедуры

Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)	
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
			
		ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ФормаСчета.Отбор.Владелец.Значение      = Организация;
		ФормаСчета.Отбор.Владелец.Использование = Истина;
		
		Если Не СчетОрганизации.Пустая() Тогда
			
			ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
			ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = СчетОрганизации.ВалютаДенежныхСредств;
			ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
			
		КонецЕсли;
		
		ФормаСчета.РежимВыбора = Истина;
		
		ФормаСчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, ?(Оплачено,ДатаОплаты,Дата));
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура ДатаОплатыПриИзменении(Элемент)
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморачетов
	Для каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
		Если ВалютаДокумента = СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			
			СтруктураКурсаВалютаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов        = СтруктураКурсаВалютаВзаиморасчетов.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов   = СтруктураКурсаВалютаВзаиморасчетов.Кратность;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
														СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура СуммаДокументаПодотчетникПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры

Процедура УстановитьРеквизитыПлательщика()

	ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	ИННПлательщика   = АвтоЗначенияРеквизитов.ИННПлательщика;
	КПППлательщика   = АвтоЗначенияРеквизитов.КПППлательщика;

КонецПроцедуры

Процедура УстановитьРеквизитыПолучателя()

	ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
	ИННПолучателя   = АвтоЗначенияРеквизитов.ИННПолучателя;
	КПППолучателя   = АвтоЗначенияРеквизитов.КПППолучателя;

КонецПроцедуры

Процедура ИННПлательщикаПриИзменении(Элемент)
		
	Если ПустаяСтрока(ИННПлательщика) Тогда
		ИННПлательщика = АвтоЗначенияРеквизитов.ИННПлательщика;
	КонецЕсли;

КонецПроцедуры

Процедура КПППлательщикаПриИзменении(Элемент)
		
	Если ПустаяСтрока(КПППлательщика) Тогда
		КПППлательщика = АвтоЗначенияРеквизитов.КПППлательщика;
	КонецЕсли;

КонецПроцедуры

Процедура ТекстПлательщикаПриИзменении(Элемент)
		
	Если ПустаяСтрока(ТекстПлательщика) Тогда
		ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	КонецЕсли;

КонецПроцедуры

Процедура ИННПолучателяПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИННПолучателя) Тогда
		ИННПолучателя = АвтоЗначенияРеквизитов.ИННПолучателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстПолучателяПриИзменении(Элемент)
	
	Если ПустаяСтрока(ТекстПолучателя) Тогда
		ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура КПППолучателяПриИзменении(Элемент)
	
	Если ПустаяСтрока(КПППолучателя) Тогда
		КПППолучателя = АвтоЗначенияРеквизитов.КПППолучателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВидПеречисленияВБюджет) Тогда
		ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
	КонецЕсли;
	
	ПриИзмененииКлючевогоРеквизита("ВидПеречисления", Истина);
	
КонецПроцедуры

Процедура УстановитьВидПлатежаВБюджет()

	Если ПеречислениеВБюджет Тогда
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		Иначе
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
	Иначе
		ВидПеречисленияВБюджет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
		
	УстановитьРеквизитыПлательщика();
	УстановитьРеквизитыПолучателя();
	
	УстановитьВидПлатежаВБюджет();

	СтруктураРеквизитов = Документы.ПлатежноеПоручениеИсходящее.РеквизитыПлатежаВБюджетПоУмолчанию(
		Дата, Организация, СчетКонтрагента, ПеречислениеВБюджет);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРеквизитов);
	
	Если ПеречислениеВБюджет И (ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж) Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;
	
	Если НЕ ПеречислениеВБюджет Тогда
		ПериодичностьУплаты = "";
		ГодПлатежа    = 0;
		ПериодПлатежа = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьРеквизитыПоказателяПериода()

	Если ПоказательПериода = "0" ИЛИ ПустаяСтрока(ПоказательПериода) ИЛИ ПустаяСтрока(СтрЗаменить(ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		
		СтрокаВидаПериода = Лев(ПоказательПериода, 2);
		СтрокаПериода     = Сред(ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(ПоказательПериода, 7);
		
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		
		Попытка
			
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
			
		Исключение
			
			ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
			
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();

КонецПроцедуры

Процедура УстановитьПоказательПериода()

	Если ПериодичностьУплаты = "0" Тогда
	
		ПоказательПериода = "0";
	
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
	
		ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		ПоказательПериода = ПериодичностьУплаты + "." + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=") + "." + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	
	КонецЕсли;

КонецПроцедуры

Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПериодичностьУплаты) Тогда
		ПериодичностьУплаты = "0";
	КонецЕсли;
	
	Если ПериодичностьУплаты <> "0" И ПериодичностьУплаты <> "-" Тогда
		
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(РабочаяДата);
		КонецЕсли;
		
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
		
	Иначе
		
		ГодПлатежа = 0;
	
	КонецЕсли;
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ГодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ПериодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ДатаПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура СтатусСоставителяПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(СтатусСоставителя) 
		И Элемент.СписокВыбора.Количество() > 0 Тогда
		СтатусСоставителя = Элемент.СписокВыбора[0].Значение;
 	КонецЕсли;
	
	УстановитьРеквизитыПоказателяПериода();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПоказательОснованияПриИзменении(Элемент)
	
	ПриИзмененииКлючевогоРеквизита("ОснованиеПлатежа");	
	
КонецПроцедуры

Процедура ПоказательТипаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПоказательТипа) Тогда
		ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидПлатежаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйВидПлатежа = ЭлементыФормы.ВидПлатежа.СписокВыбора.НайтиПоЗначению(ВидПлатежа);
	ВыбранныйВидПлатежа = ВыбратьИзСписка(ЭлементыФормы.ВидПлатежа.СписокВыбора, Элемент, ВыбранныйВидПлатежа);
	Если НЕ (ВыбранныйВидПлатежа = Неопределено) Тогда
		ВидПлатежа = ВыбранныйВидПлатежа.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура КодБКПриИзменении(Элемент)
	ПриИзмененииКлючевогоРеквизита("КБК");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("почтой", "почтой");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("телеграфом", "телеграфом");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("электронно", "электронно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("срочно", "срочно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("", "не указывать");

ЗаполнениеСписковРеквизитовПлатежейВБюджет();