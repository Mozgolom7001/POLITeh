
// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Реализация, ЭлементыФормы.КоманднаяПанельРеализация.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Авансы, ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НачисленКУплате, ЭлементыФормы.КоманднаяПанельНачисленКУплате.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Восстановлен, ЭлементыФормы.КоманднаяПанельВосстановлен.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НеОтражаетсяВКниге, ЭлементыФормы.КоманднаяПанельНеОтражаетсяВКниге.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВосстановленПоАвансам, ЭлементыФормы.КоманднаяПанельВосстановленПоАвансам.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

Процедура Реализация0ПриИзменении(Элемент)

	Если Реализация.Количество() > 0
		Или Авансы.Количество() > 0 
		Или НачисленКУплате.Количество() > 0 
		Или НеОтражаетсяВКниге.Количество() > 0 
		Или Восстановлен.Количество() > 0 
		Или ВосстановленПоАвансам.Количество() > 0 Тогда

		Если Вопрос("Необходимо очистить табличные части. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Реализация.Очистить();
			Авансы.Очистить();
			НачисленКУплате.Очистить();
			НеОтражаетсяВКниге.Очистить();
			Восстановлен.Очистить();
			ВосстановленПоАвансам.Очистить();
		Иначе
			Реализация0 = НЕ Реализация0;
		КонецЕсли;

	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( ЭлементыФормы.Реализация.Колонки.Состояние, 	Реализация0);
	
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Авансы.Видимость = Не Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.НачисленКУплате.Видимость = Не Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.НеОтражаетсяВКниге.Видимость = Не Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Восстановлен.Видимость		 = Не Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.ВосстановленПоАвансам.Видимость	= Не Реализация0;
	
	Законодательство2012 = УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2;
	
	ЭлементыФормы.Восстановлен.Колонки.ИсправленныйСчетФактура.Видимость = Законодательство2012;
	ЭлементыФормы.ВосстановленПоАвансам.Колонки.ИсправленныйСчетФактура.Видимость = Законодательство2012;
	
КонецПроцедуры // УстановитьВидимость()
 
// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Реализация.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьВремя(РежимАвтоВремя.Последним);
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
    УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , "Продажа", ПараметрОбъектКопирования, ПараметрОснование);

		УстановитьВремя(РежимАвтоВремя.Последним);

		НачалоПериода = НачалоМесяца(Дата); 
		КонецПериода  = КонецМесяца(Дата);
		
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	мТекущаяДатаДокумента  = Дата;
	
	// Параметры для выбора организации
	УчетПоВсемОрганизациям = Истина; // Для совместимости с БП
	
	// Проверка ведения однофирменности
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();

	// Установка текущей страницы
	Страницы = Новый СписокЗначений;
	Страницы.Добавить("Реализация",         "Реализация");
	Страницы.Добавить("Авансы",             "Авансы");
	Страницы.Добавить("НачисленКУплате",    "НачисленКУплате");
	Страницы.Добавить("Восстановлен",       "Восстановлен");
	Страницы.Добавить("НеОтражаетсяВКниге", "НеОтражаетсяВКниге");
	Страницы.Добавить("ВосстановленПоАвансам", "ВосстановленПоАвансам");
	РаботаСДиалогами.УстановкаТекущейСтраницы(ЭтотОбъект, ЭлементыФормы.НДСПоВидамНачисления, Страницы,);

КонецПроцедуры

Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда

		Предупреждение("Не указана организация. Операция не записана.");

		Отказ = Истина;

		ТекущийЭлемент = ЭлементыФормы.Организация;

		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура СоставДокументОплатыПриИзменении(Элемент)
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если не ТД = неопределено 
		и ЗначениеЗаполнено(Элемент.Значение) Тогда
		МетаданныеДокумента = Элемент.Значение.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты",МетаданныеДокумента)
			и ЗначениеЗаполнено(Элемент.Значение.ДатаОплаты) тогда
			ТД.ДатаОплаты = Элемент.Значение.ДатаОплаты;
		Иначе
			ТД.ДатаОплаты = Элемент.Значение.Дата;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

Процедура СуммаБезНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Реализация.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура КоманднаяПанельРеализацияЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьРазделРеализация(УчетнаяПолитикаНУ);

КонецПроцедуры

Процедура КоманднаяПанельАвансыЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделАвансы();
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленКУплатеЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделНачисленКУплате();
	
КонецПроцедуры

Процедура КоманднаяПанельНеОтражаетсяВКнигеЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделНеОтражаетсяВКниге(УчетнаяПолитикаНУ);
КонецПроцедуры

Процедура КоманднаяПанельВосстановленПоАвансамЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделВосстановленПоАвансам(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	СтраницаПанели  = ЭлементыФормы.НДСПоВидамНачисления.Страницы;
	
	СтраницаПанели.Реализация.Заголовок = "По реализации ("   + ДокументОбъект.Реализация.Количество() + " поз.)";
	СтраницаПанели.Авансы.Заголовок = "С авансов (" + ДокументОбъект.Авансы.Количество() + " поз.)";
	СтраницаПанели.НачисленКУплате.Заголовок = "Начислен к уплате (" + ДокументОбъект.НачисленКУплате.Количество() + " поз.)";
	СтраницаПанели.НеОтражаетсяВКниге.Заголовок = "Не отражается в книге (" + ДокументОбъект.НеОтражаетсяВКниге.Количество() + " поз.)";
	СтраницаПанели.Восстановлен.Заголовок = "Восстановление по другим операциям (" + ДокументОбъект.Восстановлен.Количество() + " поз.)";
	СтраницаПанели.ВосстановленПоАвансам.Заголовок = "Восстановление по авансам (" + ДокументОбъект.ВосстановленПоАвансам.Количество() + " поз.)";

КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ОшибкаПолученияУчетнойПолитики = Ложь;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаПолученияУчетнойПолитики, Организация, "Нал");
	
	Если ОшибкаПолученияУчетнойПолитики Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделРеализация(УчетнаяПолитикаНУ);
	
	Если Не Реализация0 Тогда
	
		ЗаполнитьРазделАвансы();
		
		ЗаполнитьРазделНачисленКУплате();
		
		ЗаполнитьРазделНеОтражаетсяВКниге(УчетнаяПолитикаНУ);
	
		ЗаполнитьРазделВосстановлен();
		
		ЗаполнитьРазделВосстановленПоАвансам();
		
	КонецЕсли; 

КонецПроцедуры

Процедура РеализацияСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТД.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Реализация");

КонецПроцедуры

Процедура РеализацияДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТД.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Реализация");
КонецПроцедуры

Процедура РеализацияСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	Если Не Реализация0 Тогда
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Возврат);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Иначе
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	КонецЕсли;
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура РеализацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и ДанныеСтроки.КорректируемыйПериод = '00010101000000');
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ АВАНСЫ

Процедура АвансыСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = ЭлементыФормы.Авансы.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент,ДоговорКонтрагента", Организация,ТД.Покупатель,ТД.ДоговорАванса);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Авансы");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Покупателя табличной части Авансы.
//
Процедура АвансыПокупательПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДоговорАванса.Владелец <> СтрокаТабличнойЧасти.Покупатель Тогда
		СтрокаТабличнойЧасти.ДоговорАванса = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // АвансыПокупательПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "ДоговорАванса" в табличной части Авансы.
//
Процедура АвансыДоговорАвансаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Покупатель, СтрокаТабличнойЧасти.ДоговорАванса,
				СПокупателем, СтандартнаяОбработка);
	
КонецПроцедуры // АвансыДоговорАвансаНачалоВыбора()

Процедура АвансыСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура АвансыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и ДанныеСтроки.КорректируемыйПериод = '00010101000000');
	
	Если ТипЗнч(ДанныеСтроки.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")
		И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДоговорАванса) Тогда
		ОформлениеСтроки.Ячейки.ДоговорАванса.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.ДоговорАванса.Текст = "<Комиссия>";
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленКУплатеСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НачисленКУплате");
	
КонецПроцедуры // НачисленКУплатеСчетФактураНачалоВыбора()

Процедура НачисленКУплатеДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НачисленКУплате");
	
КонецПроцедуры // НачисленКУплатеДокументОплатыНачалоВыбора()

Процедура НеОтражаетсяВКнигеСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НеОтражаетсяВКниге");
	
КонецПроцедуры // НеОтражаетсяВКнигеСчетФактураНачалоВыбора()

Процедура НеОтражаетсяВКнигеДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НеОтражаетсяВКниге");
	
КонецПроцедуры // НеОтражаетсяВКнигеДокументОплатыНачалоВыбора()

Процедура НачисленКУплатеСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура РеализацияСостояниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СписокВыбора.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
КонецПроцедуры

Процедура ВосстановленСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТекущиеДанные.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Восстановлен");

КонецПроцедуры

Процедура ВосстановленСтавкаНДСПриИзменении(Элемент)
	ТД = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленСуммаБезНДСПриИзменении(Элемент)
	ТД = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура КоманднаяПанельВосстановленЗаполнить(Кнопка)
	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазделВосстановлен();

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

Процедура НачисленКУплатеДокументОплатыПриИзменении(Элемент)
	ТД = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если не ТД = неопределено 
		и ЗначениеЗаполнено(Элемент.Значение) Тогда
		МетаданныеДокумента = Элемент.Значение.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты",МетаданныеДокумента)
			и ЗначениеЗаполнено(Элемент.Значение.ДатаОплаты) тогда
			ТД.ДатаОплаты = Элемент.Значение.ДатаОплаты;
		Иначе
			ТД.ДатаОплаты = Элемент.Значение.Дата;
		КонецЕсли;
	КонецЕсли;  

КонецПроцедуры

Процедура НеОтражаетсяВКнигеДокументОплатыПриИзменении(Элемент)
	ТД = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если не ТД = неопределено 
		и ЗначениеЗаполнено(Элемент.Значение) Тогда
		МетаданныеДокумента = Элемент.Значение.Метаданные();
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты",МетаданныеДокумента)
			и ЗначениеЗаполнено(Элемент.Значение.ДатаОплаты) тогда
			ТД.ДатаОплаты = Элемент.Значение.ДатаОплаты;
		Иначе
			ТД.ДатаОплаты = Элемент.Значение.Дата;
		КонецЕсли;
	КонецЕсли;  

КонецПроцедуры

Процедура АвансыСуммаБезНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ТД = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
КонецПроцедуры

Процедура НачисленКУплатеСуммаБезНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ТД = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура НачисленКУплатеСтавкаНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ТД = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ТД = ЭлементыФормы.Авансы.ТекущиеДанные;
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
КонецПроцедуры

Процедура НеОтражаетсяВКнигеСтавкаНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ТД = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура НеОтражаетсяВКнигеСуммаБезНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ТД = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОССТАНОВЛЕН ПО АВАНСАМ

Процедура ВосстановленПоАвансамПоставщикПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец <> СтрокаТабличнойЧасти.Поставщик Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановленПоАвансамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Поставщик, 
			СтрокаТабличнойЧасти.ДоговорКонтрагента, СПоставщиком, СтандартнаяОбработка);

КонецПроцедуры

Процедура ВосстановленПоАвансамСуммаБезНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленПоАвансамСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленПоАвансамПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));

КонецПроцедуры

Процедура ВосстановленПоАвансамСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация, Контрагент", Организация, ТекущиеДанные.Поставщик);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Отбор.Вставить( "ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ВосстановленПоАвансам");
	
КонецПроцедуры

