////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мТекСтрока; // Текущая строка таблицы Материалы

Перем мКолонкиМатериалы;

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСклада;

Перем мОтражатьВРегламентированномУчете;
Перем мИспользоватьВнутренниеЗаказы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы, ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит) // Подключение данной процедуры-обработчика выполняется из кода конфигурации

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена                = Ложь;
	ЕстьСерия               = Истина;
	РазворачиватьДоКачества = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Команда           = "ПодборВТабличнуюЧастьМатериалы";
	ИмяТабличнойЧасти = "Материалы";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Склад);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);

	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Ложь) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("КоличествоМест"  , КоличествоМест);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",     		   Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",     	   Серия);
	Если ЗначениеЗаполнено(Качество) Тогда
		СтруктураОтбора.Вставить("Качество"         , Качество);
	КонецЕсли;
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", 		   ЕдиницаИзмерения);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест = СтрокаТабличнойЧасти.КоличествоМест + КоличествоМест;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если КоличествоМест = Неопределено Тогда
			СтрокаТабличнойЧасти.Количество       = Количество;
		Иначе
			СтрокаТабличнойЧасти.КоличествоМест   = КоличествоМест;
		КонецЕсли;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
		Если ЗначениеЗаполнено(Качество) Тогда
			СтрокаТабличнойЧасти.Качество          = Качество;
		Иначе
			СтрокаТабличнойЧасти.Качество         = ПолучитьКачество(Номенклатура);
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

		// Рассчитываем реквизиты табличной части.
		Если КоличествоМест = Неопределено Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		Иначе
			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

	ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

КонецПроцедуры // ПриИзмененииНоменклатуры()

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНеПолучены = Ложь;
	ПарамертыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ПараметрыНеПолучены, Организация, "Нал");
	Если ПараметрыНеПолучены Тогда
		мСложныйУчетНДС = Ложь;
	Иначе
		мСложныйУчетНДС = ПарамертыНУ.СложныйУчетНДС;
	КонецЕсли; 

КонецПроцедуры // ОпределитьСложныйУчетНДС()

// Очищает значение реквизита в табличных частях "Материалы".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита)
	
	// Очистим значения в строках
	Для Каждого Строка Из Материалы Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитВТабличныхЧастях()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет видимостью/доступностью элементов формы
//
Процедура ДоступностьЭлементовФормы()

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры // ДоступностьЭлементовФормы()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Материалы", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки = ЭлементыФормы.Материалы.Колонки;
	
	ЭлементыФормы.НадписьНДСвСтоимостиТоваров.Видимость = (мСложныйУчетНДС И ОтражатьВБухгалтерскомУчете);
	ЭлементыФормы.НДСвСтоимостиТоваров.Видимость        = (мСложныйУчетНДС И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиМатериалы.ВнутреннийЗаказ, мИспользоватьВнутренниеЗаказы);
	
	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата());

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				Сообщить("Требование - накладную можно вводить только на основании заказа от подразделения", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), , , ПараметрОбъектКопирования, ПараметрОснование);

		УстановитьВремя(РежимАвтоВремя.Последним);

		Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;
		
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);

	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("СтатьяЗатрат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	мИспользоватьВнутренниеЗаказы = УправлениеЗаказами.ИспользоватьВнутренниеЗаказы();

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(ЭлементыФормы.Материалы.Колонки, , ЭлементыФормы.Склад, 
	                                                          "Склад", мУказаниеСкладовВТЧ);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Сохраним текущее значение склада
	мСтароеЗначениеСклада = Склад;

	// Установить видимость и доступность элементов формы.
	УстановитьВидимость();
	ДоступностьЭлементовФормы();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                Неопределено);

	ОбработкаПодбора(Материалы, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить по внутреннему заказу" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ФормаВыбора = Документы.ВнутреннийЗаказ.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Отбор = ФормаВыбора.Отбор.ВидЗаказа;
	Отбор.ВидСравнения  = ВидСравнения.Равно;
	Отбор.Значение      = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение;
	Отбор.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидЗаказа.Доступность = Ложь;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Заказчик;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Заказчик.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ВнутрЗаказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВнутрЗаказ) Тогда
		Возврат;
	КонецЕсли;
	
	Материалы.Очистить();
	
	РезультатЗапроса = ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов( ВнутрЗаказ, ?(ЭтоНовый(), КонецДня(Дата), Дата));
	ЗаполнитьМатериалыПоВнутреннемуЗаказу(РезультатЗапроса);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при нажатии кнопки "Добавить по поступлению" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоПоступлению(Кнопка)

	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокПоступления = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	Если мУказаниеСкладовВТЧ Тогда

		СтруктТабЧастей = Новый Структура;
		СтруктТабЧастей.Вставить("Товары",         "Склад");
			
		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
		СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");
		Если мУказаниеСкладовВТЧ Тогда
			СтруктПараметры.Вставить("ВсеСклады", Истина);
		Иначе
			СтруктПараметры.Вставить("ВсеСклады", Ложь);
		КонецЕсли;
			
		ВыбСклад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(ДокПоступления, СтруктПараметры);
	Иначе
		ВыбСклад = "ВсеСклады";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Номенклатура 				КАК Номенклатура,
	|ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|СерияНоменклатуры 			КАК СерияНоменклатуры,
	|Заказ 						КАК ЗаказРезерв,
	|ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
	|Сумма(Количество)			КАК Количество,
	|Сумма(КоличествоМест)		КАК КоличествоМест,
	|ЕдиницаИзмеренияМест 		КАК ЕдиницаИзмеренияМест,
	|Коэффициент 				КАК Коэффициент,
	|Склад 						КАК Склад
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ Ссылка = &Ссылка "
	+?(ВыбСклад <> "ВсеСклады","И Склад = &ВыбСклад","")+"
	|СГРУППИРОВАТЬ ПО Номенклатура,
	|ХарактеристикаНоменклатуры,
	|СерияНоменклатуры,
	|Заказ,
	|ЕдиницаИзмерения,
    |ЕдиницаИзмеренияМест,
	|Коэффициент,
	|Склад";

	Запрос.УстановитьПараметр("Ссылка", ДокПоступления);
	Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаТЧ = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		СтрокаТЧ.Качество    = Справочники.Качество.Новый;
        ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля( СтрокаТЧ);
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТоварыДействиеДобавитьПоПоступлению()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельМатериалыДействиеИзменить(Кнопка)

	// Получим контекст обработки.
	ИзменениеТабличнойЧасти      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧасти = ИзменениеТабличнойЧасти.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧасти.ДокументОбъект        = ЭтотОбъект;
	ФормаИзменениеТабличнойЧасти.мФормаДокумента       = ЭтаФорма;
	ФормаИзменениеТабличнойЧасти.мЕстьНДС              = Ложь;
	ФормаИзменениеТабличнойЧасти.мЕстьЦенаВРознице     = Ложь;
	ФормаИзменениеТабличнойЧасти.мСпособЗаполненияЦен  = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧасти.мИмяТабличнойЧастиДокумента = "Материалы";

	//Перенесем табличную часть
	ИзменениеТабличнойЧасти.Товары.Загрузить(Материалы.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧасти.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа, по остаткам товаров, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Записать();
		
		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Записать();
		
		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры //ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;

	// Установить доступность элементов формы
	УстановитьВидимость();
	ДоступностьЭлементовФормы();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВБухгалтерскомУчете = Истина;
		ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент);
	КонецЕсли;
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	// Определим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			Склад,
			мСтароеЗначениеСклада,
			"Материалы",
			"Склад");
	Иначе
		ОчиститьРеквизитВТабличныхЧастях("Склад");
	КонецЕсли;

КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСклада = Склад;

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "ХарактерЗатрат" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
    РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Материалы.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
		КонецЕсли;
		Если ЭлементыФормы.Материалы.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

	ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Материалы".
//
Процедура МатериалыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

КонецПроцедуры // МатериалыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Материалы".
//
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока 
	   И Не Копирование Тогда
		Если Не мТекСтрока = Неопределено Тогда
			Элемент.ТекущаяСтрока.СтатьяЗатрат = мТекСтрока.СтатьяЗатрат;
			МатериалыСтатьяЗатратПриИзменении(Элемент);
		КонецЕсли;
		Элемент.ТекущиеДанные.Склад = Склад;
	КонецЕсли;

КонецПроцедуры // МатериалыПриНачалеРедактирования()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Материалы".
//
Процедура МатериалыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мТекСтрока = Элемент.ТекущаяСтрока;
	
КонецПроцедуры // МатериалыПередНачаломДобавления()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
КонецПроцедуры // МатериалыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказ
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивОтборов = Новый Массив;
	МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Организация", Организация));
	
	//Необходимо исключить внутренний заказ
	//Он оставлен среди типов для возможности переноса данных, но не должен выбираться интерактивно
	МассивИсключаемыхТипов = Новый Массив;
	МассивИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ВнутреннийЗаказ"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключаемыеТипы", МассивИсключаемыхТипов);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов, "Материалы", ДопПараметры);
	
КонецПроцедуры // МатериалыЗаказНачалоВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура МатериалыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Материалы".
//
Процедура МатериалыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Материалы");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Материалы".
//
Процедура МатериалыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ТоварыПеретаскивание()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

Процедура МатериалыЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка,, "Материалы");
КонецПроцедуры

Процедура МатериалыВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивОтборов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение));
	Иначе
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение));
		МассивОтборов.Добавить(Новый Структура("Имя, Значение", "Заказчик", Подразделение));
	КонецЕсли;
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, МассивОтборов, "Материалы");

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельМатериалыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;

