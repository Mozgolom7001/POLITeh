////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

Перем ПерезаполнятьДисплейПокупателя Экспорт;

Перем мТерминалы;
Перем мФУ;
Перем мВидФУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении дисконтной карты.
//
Процедура ПриИзмененииДисконтнойКарты()

	ВладелецДисконтнойКарты = ДисконтнаяКарта.ВладелецКарты;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура устанавливает переданный вид операции и изменяет внешний вид формы
// в соответствии с новым видом операции.
//
// Параметры:
//  ВидОперацииНовый - вид операции, который требуется установить.
//
Процедура УстановитьВидОперации(ВидОперацииНовый)

	ВидОперации = ВидОперацииНовый;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		НазваниеКнопкиПереключенияРежима = "Чек возврата";
	Иначе
		НазваниеКнопкиПереключенияРежима = "Регистрация продажи";
	КонецЕсли;

	Кнопка = ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ЧекВозврата;
	Кнопка.Текст     = НазваниеКнопкиПереключенияРежима;
	Кнопка.Пояснение = НазваниеКнопкиПереключенияРежима;
	Кнопка.Подсказка = НазваниеКнопкиПереключенияРежима;

КонецПроцедуры // УстановитьВидОперации()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ИзТерминала;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Характеристика",      Характеристика);
	ЗначениеВыбора.Свойство("Серия",               Серия);
	ЗначениеВыбора.Свойство("ИзТерминала",         ИзТерминала);

	Если ИзТерминала <> Неопределено
	   И ИзТерминала Тогда
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика,
			                            ТипЦен, Дата, ЕдиницаИзмерения,
			                            мВалютаРегламентированногоУчета, 1, 1, ,
			                            Неопределено);
		ВалютаЦены = мВалютаРегламентированногоУчета;
	КонецЕсли;

	// Пересчитаем цену в валюту регламентированного учета
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена           = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;

	ПоследняяСтрока = Товары.Количество()-1;
	Если Товары.Количество() > 0
	   И Товары[ПоследняяСтрока].Номенклатура = Номенклатура
	   И Товары[ПоследняяСтрока].ЕдиницаИзмерения = ЕдиницаИзмерения
	   И Товары[ПоследняяСтрока].ХарактеристикаНоменклатуры = Характеристика
	   И Товары[ПоследняяСтрока].СерияНоменклатуры = Серия
	   И НЕ Товары[ПоследняяСтрока].НеобходимостьВводаАкцизнойМарки
	   Тогда
		СтрокаТабличнойЧасти = Товары[ПоследняяСтрока];

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		// Расчет скидок.
		Если Не ПересчитатьАвтоматическиеСкидки() Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	Иначе // не нашли или нашли в уже пробитой строке - добавляем новую строку.

		Если Номенклатура = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если Цена = 0 Тогда
			Сообщить("На товар: " + Номенклатура + " не назначена цена!", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;

		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Цена                       = Цена;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		ШтрихКод = "";
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			СтрокаШтрихкода = УправлениеРозничнойТорговлей.ПолучитьШтрихКод(СтрокаТабличнойЧасти.Номенклатура,
															 СтрокаТабличнойЧасти.ЕдиницаИзмерения,
															 СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
															 СтрокаТабличнойЧасти.СерияНоменклатуры,
															 Справочники.Качество.Новый);

			Если СтрокаШтрихкода <> Неопределено Тогда
				ШтрихКод = СтрокаШтрихкода.Штрихкод;
			КонецЕсли;
		КонецЕсли;

		СтрокаТабличнойЧасти.ШтрихКод = ШтрихКод;

		Если Не ПересчитатьАвтоматическиеСкидки() Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		
		ИнтеграцияЕГАИСПереопределяемый.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, ЭтотОбъект);

		// Ввод состава набора
		СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, в которой изменена номенклатура;
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, , Истина);

	Если СтрокаТабличнойЧасти.Цена = 0
	   И СтрокаТабличнойЧасти.Номенклатура <> Неопределено Тогда
		Предупреждение("На товар: " + СтрокаТабличнойЧасти.Номенклатура + " не назначена цена!");
		СтрокаТабличнойЧасти.Номенклатура = Неопределено;
	КонецЕсли;

	// Установим способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части, в которой изменена характеристика номенклатуры;
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, , Истина);

	Если СтрокаТабличнойЧасти.Цена = 0
	   И СтрокаТабличнойЧасти.Номенклатура = Неопределено Тогда
		Предупреждение("На товар: " + СтрокаТабличнойЧасти.Номенклатура + " не назначена цена!");
		СтрокаТабличнойЧасти.Номенклатура = Неопределено;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура осуществляет вывод информации на дисплей покупателя.
//
// Параметры:
//  Нет.
//
Процедура ВывестиИнформациюНаДисплейПокупателя(Данные) Экспорт

	ВидТО    = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя;
	Дисплеи  = ПолучитьСерверТО().ПолучитьСписокУстройств(ВидТО, КассаККМ);
	Дисплей  = Неопределено;

	Для Каждого Дисплей Из Дисплеи Цикл
		Если ПустаяСтрока(Данные) Тогда
			ПолучитьСерверТО().ОчиститьДисплейПокупателя(Дисплей);
		Иначе
			ПолучитьСерверТО().ВывестиСтрокуНаДисплейПокупателя(Дисплей, Данные);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВывестиИнформациюНаДисплейПокупателя()

// Проверяет права пользователя на работу с интерфейсом кассира
//
// Параметры:
//  мТекущийПользователь - Пользователь, для которого проверяются права.
//
Процедура ПроверитьДоступностьСервисныхФункций(мТекущийПользователь)

	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ZОтчет.Доступность                = УправлениеДопПравамиПользователей.РазрешитьЗакрытиеСмены(мТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.АннулированиеЧека.Доступность     = УправлениеДопПравамиПользователей.РазрешитьАннулированиеЧека(мТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ЧекВозврата.Доступность           = УправлениеДопПравамиПользователей.РазрешитьЧекВозврата(мТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.ОтчетОСменеБезГашения.Доступность = УправлениеДопПравамиПользователей.РазрешитьОтчетОСменеБезГашения(мТекущийПользователь);
	ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.НазначитьСкидку.Доступность       = УправлениеДопПравамиПользователей.РазрешитьНазначениеРучныхСкидок(мТекущийПользователь);
	мКолонкиТовары.ПроцентСкидкиНаценки.ТолькоПросмотр = Не ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки.НазначитьСкидку.Доступность;

КонецПРоцедуры

//Производит закрытие чека на фискальном регистраторе и печать товарного чека.
//
// Параметры:
//  Печать - булево, признак необходимости печати товарного чека.
//
Процедура ЗакрытьЧек(Печать = Ложь)

	Перем Ответ;
	Перем Паника;

	Если ТолькоПросмотр Тогда
		Закрыть();
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
			Если Не ЧекПробитНаККМ И Товары.Итог("Сумма") > 0 Тогда
				ФормаОплат = ПолучитьФорму("ФормаОплатЧека", ЭтаФорма);
				Результат  = ФормаОплат.ОткрытьМодально();
			КонецЕсли;
		Иначе
			Результат = "Закрыть чек";
		КонецЕсли;

		Если Результат <> "Закрыть чек" Тогда
			Возврат;
		Иначе
			РучнойРежимПечати = Ложь;
			Если УстановленЕНВДОрганизации()
			   И КассаККМ.ФормироватьНефискальныеЧеки Тогда
				Если КассаККМ.РучнойРежимФормирования Тогда
					Если (мФУ = Неопределено И Не Печать)
					 Или (мФУ <> Неопределено) Тогда
						Ответ = Вопрос("Напечатать чек на " + ?(мФУ = Неопределено, "принтере", "принтере документов для ЕНВД") + "?",
						               РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
						Если Ответ = КодВозвратаДиалога.Отмена Тогда
							Возврат;
						Иначе
							Если мФУ = Неопределено Тогда
								Печать = (Ответ = КодВозвратаДиалога.Да);
							Иначе
								РучнойРежимПечати = (Ответ = КодВозвратаДиалога.Да);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Не Печать Тогда
					Печать = (мФУ = Неопределено);
				КонецЕсли;
			КонецЕсли;

			СоздатьНовыйЧек = Истина;

			Если Не ПровестиИРаспечататьЧек(Ответ, Паника, ЭтаФорма, РучнойРежимПечати) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(Ответ);
				Если Паника Тогда
					Предупреждение("Возможны расхождения ИБ и ленты ФР!", ,"Внимание! Критическая ошибка!!!");
					Возврат;
				КонецЕсли;
			КонецЕсли;

			Если ЧекПробитНаККМ
			 Или (УстановленЕНВДОрганизации()
			   И КассаККМ.ФормироватьНефискальныеЧеки) Тогда
				Если Печать Тогда
					Печать("Чек");
				КонецЕсли;
				ДокументОбъект = Документы.ЧекККМ.СоздатьДокумент();
				ДокументОбъект.Дата = РабочаяДата;
				ПриОткрытии();
				Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗакрытьЧек()

// Процедура выбора чека ККМ для возврата.
//
Процедура ЧекККМНачалоВыбора()

	ФормаВыбора = ПолучитьФорму("ФормаВыбора");
	ФормаВыбора.РежимВыбора = Истина;

	ФормаВыбора.ДокументСписок.Отбор.КассаККМ.Установить(КассаККМ);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.КассаККМ.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.Проведен.Установить(Истина);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Проведен.Доступность = Ложь;

	ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Установить(Перечисления.ВидыОперацийЧекККМ.Продажа);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

	ЧекККМПродажа = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
		Заполнить(ЧекККМПродажа);

		УстановитьВидОперации(Перечисления.ВидыОперацийЧекККМ.Возврат);
	КонецЕсли;

КонецПроцедуры // ЧекККМНачалоВыбора()

// Процедура осуществляет возврат в режим регистрации продажи
//
// Параметры
//  Нет
//
Процедура ЧекККМКонецВыбора()

	УстановитьВидОперации(Перечисления.ВидыОперацийЧекККМ.Продажа);

КонецПроцедуры // ЧекККМКонецВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка  = &Настройка
	|");
	
	Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Настройка"   , ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяКассаККМ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КассаККМ = Выборка.Значение;
	КонецЕсли;

	МассивФР  = ПолучитьСерверТО().ПолучитьСписокУстройств(
	            	Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	            	КассаККМ);
	МассивККТ = ПолучитьСерверТО().ПолучитьСписокУстройств(
	            	Перечисления.ВидыТорговогоОборудования.ККТ,
	            	КассаККМ);
	МассивФУ = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивФР);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивККТ);
	КоличествоФУ = МассивФУ.Количество();

	Если КоличествоФУ = 0
	   И Не КассаККМ.ФормироватьНефискальныеЧеки Тогда
		Предупреждение("Фискальное устройство не подключено!");
		Отказ = Истина;
		Возврат;
	ИначеЕсли КоличествоФУ = 1 Тогда
		мФУ = МассивФУ[0];
	ИначеЕсли КоличествоФУ > 1 Тогда
		СписокФУ = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(МассивФУ);

		мФУ = СписокФУ.ВыбратьЭлемент("Необходимо выбрать фискальное устройство:");
		Если мФУ = Неопределено Тогда
			Предупреждение("Выбор фискального устройства не был осуществлен.
			               |Продолжение работы невозможно.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		мФУ = мФУ.Значение;
	КонецЕсли;
	
	мВидФУ = ПолучитьСерверТО().ПолучитьВид(мФУ);
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПарольАдминистратораФискальногоРегистратора") <> 0 Тогда
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = "Администратор: " + глЗначениеПеременной("глТекущийПользователь");
	ИначеЕсли УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПарольКассираФискальногоРегистратора") <> 0 Тогда
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = "Кассир: " + глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа");

		// Тип цен по умолчанию - из типа цен розничной торговли на данном складе
		РозничныйТипЦен = Склад.ТипЦенРозничнойТорговли;
		Если ЗначениеЗаполнено(РозничныйТипЦен) Тогда
			ТипЦен = РозничныйТипЦен;
		КонецЕсли;

		ЧекПробитНаККМ = Ложь;
		Параметры = Новый Структура;
		Ответ = "";

		Если НачалоДня(ЭтотОбъект.Дата) = НачалоДня(ТекущаяДата()) Тогда
			ЭтотОбъект.Дата = ТекущаяДата();
		КонецЕсли;

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	УстановитьВидОперации(ВидОперации);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// включим режим вывода строк
	ВывестиИнформациюНаДисплейПокупателя(ПолучитьСтрокуДляВыводаНаДисплейПокупателя());

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	ПроверитьДоступностьСервисныхФункций(глЗначениеПеременной("глТекущийПользователь"));

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	Если ЧекПробитНаККМ Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;

	Если Не УстановленЕНВДОрганизации()
	   И КассаККМ.ФормироватьНефискальныеЧеки Тогда
		Сообщить("Организация """ + КассаККМ.Владелец + """ не облагается ЕНВД! Формирование нефискальных чеков ККМ невозможно.
			|Для изменения настроек кассы ККМ обратитесь к администратору системы.", СтатусСообщения.Важное);
	КонецЕсли;

	КнопкиСервиса = ЭлементыФормы.ДействияФормы.Кнопки.Сервис.Кнопки;
	Если мВидФУ = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
		КнопкаОтчетСГашением = КнопкиСервиса.Найти("ZОтчет");
		Если КнопкаОтчетСГашением <> Неопределено Тогда
			КнопкаОтчетСГашением.Текст = "Закрыть кассовую смену";
		КонецЕсли;
	Иначе
		КнопкаОткрытьКассовуюСмену = КнопкиСервиса.Найти("ОткрытьКассовуюСмену");
		Если КнопкаОткрытьКассовуюСмену <> Неопределено Тогда
			КнопкиСервиса.Удалить(КнопкаОткрытьКассовуюСмену);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаВсего = Товары.Итог("Сумма");

	ЭлементыФормы.СуммаДокумента.Заголовок = ОбщегоНазначения.ФорматСумм(СуммаВсего, ,"0,00");

	// Если начали заполнение чека, нужно скрыть страницу с суммой сдачи по предыдущему чеку.
	Если СуммаВсего > 0 
	   И ЭлементыФормы.ПанельСкидкиСдача.ТекущаяСтраница <> ЭлементыФормы.ПанельСкидкиСдача.Страницы.Скидки Тогда
		ЭлементыФормы.ПанельСкидкиСдача.ТекущаяСтраница = ЭлементыФормы.ПанельСкидкиСдача.Страницы.Скидки; 
	КонецЕсли;

	Если ДисконтнаяКарта.Пустая() Тогда
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = "Нет.";
	Иначе
		ЭлементыФормы.ДисконтнаяКарта.Заголовок = СокрЛП(ДисконтнаяКарта);
	КонецЕсли;

	ИтогСкидка = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары) - СуммаВсего;
	Если ИтогСкидка < 0 Тогда
		ЭлементыФормы.СкидкиИтогоСумма.Заголовок = ОбщегоНазначения.ФорматСумм(-ИтогСкидка, ,"0,00");
		ЭлементыФормы.Скидки.Заголовок = "Наценки:";
	Иначе
		ЭлементыФормы.СкидкиИтогоСумма.Заголовок = ОбщегоНазначения.ФорматСумм(ИтогСкидка, ,"0,00");
		ЭлементыФормы.Скидки.Заголовок = "Скидки:";
	КонецЕсли;

	ЭлементыФормы.НадписьСменаЧекККМ.Заголовок = "Смена №: " + НомерСменыККМ + "; Чек ККМ №: " + НомерЧекаККМ;

	Если ТекущаяСтрока = Неопределено Тогда
		СуммаТовара = 0;
		ЭлементыФормы.ИнфНадписьТекущийТовар.Заголовок = "";
	Иначе
		СуммаТовара = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
		ЭлементыФормы.ИнфНадписьТекущийТовар.Заголовок = СокрЛП(ТекущаяСтрока.Номенклатура);
	КонецЕсли;

	Если СуммаТовара = 0 Тогда
		ЭлементыФормы.ИнфНадписьТекущаяСумма.Заголовок = "";
	Иначе
		ЭлементыФормы.ИнфНадписьТекущаяСумма.Заголовок = СокрЛП(ТекущаяСтрока.Цена) + "руб. Х " + СокрЛП(ТекущаяСтрока.Количество)
		                                               + " " + СокрЛП(ТекущаяСтрока.ЕдиницаИзмерения)
		                                               + " = " + СокрЛП(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество) + "руб.";
	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя(ПолучитьСтрокуДляВыводаНаДисплейПокупателя());

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Отказ = Истина;

КонецПроцедуры

// Функция формирует и возвращает строку для вывода на дисплей покупателя.
//
// Возвращаемое значение:
//  Строка - строка для вывода на дисплей покупателя.
//
Функция ПолучитьСтрокуДляВыводаНаДисплейПокупателя()

	Если ЭлементыФормы.ПанельСкидкиСдача.ТекущаяСтраница = ЭлементыФормы.ПанельСкидкиСдача.Страницы.Сдача Тогда
		Данные = "Сдача: " + ЭлементыФормы.НадписьСдача.Заголовок + " руб.";
	Иначе
		ТекущаяСтрока = ЭлементыФормы.Товары.ТекущиеДанные;
		Данные = ?(ТекущаяСтрока = Неопределено, "", СокрЛП(ТекущаяСтрока.Номенклатура) + Символы.ПС
		         + "Итого: " + Формат(ЭлементыФормы.СуммаДокумента.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0"));
	КонецЕсли;

	Возврат Данные;

КонецФункции // ПолучитьСтрокуДляВыводаНаДисплейПокупателя()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема
	 Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, мВалютаРегламентированногоУчета,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, , , УсловиеПродаж, Склад);

	ОбработкаПодбора(Товары, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                мВалютаРегламентированногоУчета, Номер,
	                                                мУказаниеСкладовВТЧ,
	                                                ТипЦен, , , УсловиеПродаж, Склад);

	ОбработкаПодбора(Товары, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ВыходИзПрограммы" командной панели
// формы.
//
Процедура ДействияФормыВыходИзПрограммы(Кнопка)

	Отказ = Ложь;
	Если глЗапрашиватьПодтверждениеПриЗакрытии <> Ложь Тогда
		ЗапрашиватьПотверждение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	                                                          "ЗапрашиватьПодтверждениеПриЗакрытии");
		Если ЗапрашиватьПотверждение Тогда
			Ответ = Вопрос("Завершить работу с программой?", РежимДиалогаВопрос.ДаНет);
			Отказ = (Ответ = КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "НазначитьСкидку" командной панели
// формы. Процедура назначает ручную скидку на позиции товара.
//
Процедура ДействияФормыНазначитьСкидку(Кнопка)

	ПроцентСкидки = 0;
	ВвестиЧисло(ПроцентСкидки, "Введите процент скидки.", 5, 2);

	Для Каждого СтрокаТовара Из Товары Цикл
		СтрокаТовара.ПроцентСкидкиНаценки = ПроцентСкидки;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТовара, ЭтотОбъект);
	КонецЦикла;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Аннулирование чека" командной панели
// формы.
//
Процедура ДействияФормыАннулированиеЧека(Кнопка)

	ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПустаяСсылка();
	ВладелецДисконтнойКарты = Справочники.Контрагенты.ПустаяСсылка();

	Если Товары.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить таблицу товаров?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Товары.Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Внесение в денежный ящик" командной панели
// формы. 
//
Процедура ДействияФормыВнесениеВДенежныйЯщик(Кнопка)

	Если мФУ <> Неопределено Тогда
		Если мВидФУ = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
			ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(мФУ);
			Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Кассовая смена не открыта");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Сумма = Неопределено;
		Если ВвестиЧисло(Сумма, "Необходимо ввести сумму", 15, 3) Тогда
			Пароль    = ПолучитьСерверТО().ПолучитьПарольКассираККМ();
			Результат = ПолучитьСерверТО().ВнестиСумму(мФУ, Пароль, Сумма);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
				Предупреждение(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Изъятие денег" командной панели
// формы.
//
Процедура ДействияФормыИзъятиеДенег(Кнопка)

	Если мФУ <> Неопределено Тогда
		Если мВидФУ = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
			ОписаниеПКС = КассовыеСменыВызовСервера.ОписаниеПоследнейКассовойСмены(мФУ);
			Если ОписаниеПКС = Неопределено ИЛИ ОписаниеПКС.Статус = Перечисления.СтатусыКассовойСмены.Закрыта Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Кассовая смена не открыта");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Сумма = Неопределено;
		Если ВвестиЧисло(Сумма, "Необходимо ввести сумму", 15, 3) Тогда
			Пароль    = ПолучитьСерверТО().ПолучитьПарольКассираККМ();
			Результат = ПолучитьСерверТО().ВнестиСумму(мФУ, Пароль, -Сумма);
			Если ЗначениеЗаполнено(Результат) Тогда
				ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
				Предупреждение(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыОткрытьКассовуюСмену(Кнопка)
	
	КассовыеСменыКлиент.ОткрытьКассовуюСмену(мФУ);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Отчет о смене без гашения" командной панели
// формы.
//
Процедура ДействияФормыОтчетОСменеБезГашения(Кнопка)

	Если мФУ <> Неопределено Тогда
		Пароль    = ПолучитьСерверТО().ПолучитьПарольАдминистратораККМ();
		Результат = ПолучитьСерверТО().ОтчетБезГашения(мФУ, Пароль);
		Если ЗначениеЗаполнено(Результат) Тогда
			ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
			Предупреждение(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Z-отчет" командной панели
// формы.
//
Процедура ДействияФормыZОтчет(Кнопка)

	Форма = Обработки.ЗакрытиеКассовойСмены.ПолучитьФорму();
	Форма.Открыть();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Авторизация" командной панели
// формы.
//
Процедура ДействияФормыАвторизация(Кнопка)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
	Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
	Запрос.УстановитьПараметр("ПустойПароль", "");

	Запрос.Текст ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиПользователей.Пользователь,
	|	НастройкиПользователей.Настройка,
	|	НастройкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
	|
	|ГДЕ
	|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
	|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();

	ФормаАвторизации = ПолучитьФорму("ФормаАвторизации");
	ФормаАвторизации.мТаблицаПользователей = ТаблицаПользователей;
	ФормаАвторизации.ДокументОбъект = ЭтотОбъект;
	ВидПользователя = ФормаАвторизации.ОткрытьМодально();

	Если ВидПользователя <> Неопределено Тогда

		Ответственный = глЗначениеПеременной("глТекущийПользователь");
		ЭлементыФормы.НадписьТекущийПользователь.Заголовок = ВидПользователя + глЗначениеПеременной("глТекущийПользователь");
		ПроверитьДоступностьсервисныхФункций(глЗначениеПеременной("глТекущийПользователь"));

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Из терминала сбора данных" командной панели
// формы.
//
Процедура ДействияФормыТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры // ДействияФормыТоварыИзТерминалаСбораДанных()

// Процедура вызывается при нажатии кнопки "Товарный чек" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если Товары.Итог("Сумма") = 0 тогда
		Предупреждение("Чек не заполнен.");
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Печать товарного чека возможна только после закрытия чека. Закрыть чек?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытьЧек(Истина);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Закрытие чека" командной панели
// формы.
//
Процедура ДействияФормыДействиеЗакрытиеЧека(Кнопка)

	Если Товары.Итог("Сумма") = 0 тогда
		Предупреждение("Чек не заполнен.");
		Возврат;
	КонецЕсли;

	ЗакрытьЧек();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Чек возврата" командной панели
// формы.
//
Процедура ДействияФормыЧекВозврата(Кнопка)

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа Тогда
		Товары.Очистить();
		ЧекККМНачалоВыбора();
	Иначе
		Товары.Очистить();
		ЧекККМКонецВыбора();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;

	ИнтеграцияЕГАИСПереопределяемый.ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма, ЭтотОбъект);

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередНачаломИзменения" табличной части
// "Товары".
//
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	 ТекущиеДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	 
	 Если ЗначениеЗаполнено(ТекущиеДанные)  Тогда
		 
		 Если ТекущиеДанные.НеобходимостьВводаАкцизнойМарки
			 И (Элемент.ТекущаяКолонка.Имя = "Количество" ИЛИ Элемент.ТекущаяКолонка.Имя = "Номенклатура") Тогда
			 Отказ = Истина;
		 КонецЕсли;
		 
	 КонецЕсли;	
	 
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	ИнтеграцияЕГАИСПереопределяемый.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, ЭтотОбъект);
	
	ШтрихКод = "";
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаШтрихкода = УправлениеРозничнойТорговлей.ПолучитьШтрихКод(СтрокаТабличнойЧасти.Номенклатура,
		                                                 СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                 СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                                                 СтрокаТабличнойЧасти.СерияНоменклатуры,
		                                                 Справочники.Качество.Новый);

		Если СтрокаШтрихкода <> Неопределено Тогда
			ШтрихКод = СтрокаШтрихкода.Штрихкод;
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти.ШтрихКод = ШтрихКод;
	СтрокаТабличнойЧасти.Количество = Макс(1, СтрокаТабличнойЧасти.Количество);

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) Тогда
		СтрокаТабличнойЧасти.Номенклатура = СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец;
	КонецЕсли;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРучнойСкидкиПриИзменении()

// Процедура - обработчик события "ПередУдалением" табличной части
// "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередУдалением(Элемент, Отказ, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Расчет скидок.
	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Артикул" табличной части
// "Товары".
//
Процедура ТоварыАртикулОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ПостроительЗапроса =  Новый ПостроительЗапроса;
	
	ПостроительЗапроса.Текст = "
	|ВЫБРАТЬ
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|";

	ПостроительЗапроса.ЗаполнитьНастройки();
	СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить("Артикул");
	СтрокаОтбора.Значение = Текст;
	СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит;
	ПостроительЗапроса.Выполнить();

	ТаблицаАртикулов = ПостроительЗапроса.Результат.Выгрузить();

	СтрДлинаАртикул = СтрДлина (Текст);
	Текст = ВРЕГ(Текст);
	КоличествоСтрок = ТаблицаАртикулов.Количество();
	Если КоличествоСтрок > 0 Тогда
		Для Сч = 1 по КоличествоСтрок Цикл
			СтрокаАртикула = ТаблицаАртикулов[КоличествоСтрок - Сч];
			Если ВРЕГ(Лев(СтрокаАртикула.Артикул, СтрДлинаАртикул)) <> Текст Тогда
				ТаблицаАртикулов.Удалить(СтрокаАртикула);
			КонецЕсли;
		КонецЦикла;

		ТаблицаАртикулов.Сортировать("Номенклатура");
		СтрокаВыбора = ТаблицаАртикулов.ВыбратьСтроку("Выберите товар");

		Если СтрокаВыбора <> Неопределено Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура = СтрокаВыбора.Номенклатура;
			ТоварыНоменклатураПриИзменении(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыАртикулОкончаниеВводаТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Штрихкод" табличной части
// "Товары".
//
Процедура ТоварыШтрихКодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	ПостроительЗапроса =  Новый ПостроительЗапроса;
	
	ПостроительЗапроса.Текст = "ВЫБРАТЬ
	                           |	Штрихкоды.Владелец КАК Номенклатура,
	                           |	ВЫБОР КОГДА ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL ТОГДА
	                           |	NULL ИНАЧЕ
	                           |	Штрихкоды.Владелец.Артикул КОНЕЦ КАК Артикул,
	                           |	Штрихкоды.Штрихкод,
	                           |	Штрихкоды.ЕдиницаИзмерения,
	                           |	Штрихкоды.ХарактеристикаНоменклатуры,
	                           |	Штрихкоды.СерияНоменклатуры,
	                           |	Штрихкоды.Качество
	                           |ИЗ
	                           |	РегистрСведений.Штрихкоды КАК Штрихкоды
	                           |
	                           |ГДЕ
	                           |	(НЕ(ВЫРАЗИТЬ(Штрихкоды.Владелец КАК Справочник.Номенклатура) ЕСТЬ NULL ))";

	ПостроительЗапроса.ЗаполнитьНастройки();
	СтрокаОтбора = ПостроительЗапроса.Отбор.Добавить("Штрихкод");
	СтрокаОтбора.Значение = Текст;
	СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит;
	ПостроительЗапроса.Выполнить();

	ТаблицаШтрихкодов = ПостроительЗапроса.Результат.Выгрузить();

	СтрДлинаШтрихкод = СтрДлина (Текст);
	Текст = ВРЕГ(Текст);
	КоличествоСтрок = ТаблицаШтрихкодов.Количество();
	Если КоличествоСтрок > 0 Тогда
		Для Сч = 1 по КоличествоСтрок Цикл
			СтрокаШтрихкода = ТаблицаШтрихкодов[КоличествоСтрок - Сч];
			Если ВРЕГ(Лев(СтрокаШтрихкода.Штрихкод, СтрДлинаШтрихкод)) <> Текст Тогда
				ТаблицаШтрихкодов.Удалить(СтрокаШтрихкода);
			КонецЕсли;
		КонецЦикла;

		ТаблицаШтрихкодов.Сортировать("Номенклатура");
		СтрокаВыбора = ТаблицаШтрихкодов.ВыбратьСтроку("Выберите товар");

		Если СтрокаВыбора <> Неопределено Тогда

			ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура = СтрокаВыбора.Номенклатура;
			ЭлементыФормы.Товары.ТекущиеДанные.Количество = 1;
			ЭлементыФормы.Товары.ТекущиеДанные.ХарактеристикаНоменклатуры = СтрокаВыбора.ХарактеристикаНоменклатуры;
			ЭлементыФормы.Товары.ТекущиеДанные.СерияНоменклатуры = СтрокаВыбора.СерияНоменклатуры;
			ЭлементыФормы.Товары.ТекущиеДанные.Артикул = СтрокаВыбора.Артикул;
			ЭлементыФормы.Товары.ТекущиеДанные.ШтрихКод = СтрокаВыбора.Штрихкод;

			ТоварыНоменклатураПриИзменении(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура);

		КонецЕсли;
	Иначе
		Предупреждение("Не найдено товаров с указанным началом штрихкода.");
		Элемент.Значение = "";
	КонецЕсли;

КонецПроцедуры // ТоварыШтрихКодОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "Нажатие" гиперссылки "ВладелецДисконтнойКарты".
//
Процедура ВладелецДисконтнойКартыНажатие(Элемент)

	Если ЗначениеЗаполнено(ВладелецДисконтнойКарты) Тогда
		ВладелецДисконтнойКарты.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;

КонецПроцедуры // ВладелецДисконтнойКартыНажатие()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Расчет скидок.
	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихкоду".
//
Процедура ДействияФормыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // ДействияФормыПоискПоШтрихКоду()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	Ценообразование.ПроверитьВозможностьЗаменыДисконтнойКарты(ЭтотОбъект, ПолучитьЗначениеУчетнойПолитики());

КонецПроцедуры // ПослеЗаписи()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с ЕГАИС

Процедура Подключаемый_ВводАкцизнойМарки()
	
	ИнтеграцияЕГАИСПереопределяемый.ВводАкцизнойМарки(ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары                 = ЭлементыФормы.Товары.Колонки;
ПерезаполнятьДисплейПокупателя = Истина;

мТерминалы = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);
