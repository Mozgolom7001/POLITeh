////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мТерминалы;

Перем мКартинкаСерийныеНомера, мКартинкаНаборКомплект;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия для отображения оплаты.
//
Процедура ОтобразитьОплату()

	Если Оплата.Количество() < 2 Тогда
		ПереключательОплатаПростая = Истина;
	Иначе
		ПереключательОплатаПростая = Ложь;
	КонецЕсли;

	Если Оплата.Количество() = 1 Тогда
		ВидОплаты = Оплата[0].ВидОплаты;
		СуммаОплаты = Оплата[0].Сумма;
	КонецЕсли;

КонецПроцедуры // ОтобразитьОплату()

// Процедура выполняет необходимые действия при изменении дисконтной карты.
//
Процедура ПриИзмененииДисконтнойКарты()

	ВладелецДисконтнойКарты = ДисконтнаяКарта.ВладелецКарты;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииНоменклатурыТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	ИнтеграцияЕГАИСПереопределяемый.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, ЭтотОбъект);
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если СтрокаТабличнойЧасти.НеобходимостьВводаАкцизнойМарки Тогда
		
		ЭлементыФормы.Товары.ЗакончитьРедактированиеСтроки(Ложь);
		ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

// Процедура выполняет необходимые действия при изменении количества в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииКоличестваТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииКоличестваТовары()

// Процедура выполняет необходимые действия перед удалением строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//  Отказ - флаг отказа.
//
Процедура ПередУдалениемТовары(Элемент, Отказ)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередУдалением(Элемент, Отказ, ЭтаФорма, ЭтотОбъект);

КонецПроцедуры // ПередУдалениемТовары()

// Процедура выполняет необходимые действия после удаления строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПослеУдаленияТовары(Элемент)

	ПересчитатьАвтоматическиеСкидки();

	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;

КонецПроцедуры // ПослеУдаленияТовары()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура вызывается для обработки программного изменения строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", изменение которой нужно обработать.
//  ИзмененнаяКолонка - название колонки, обработчик изменения которой необходимо вызвать.
//
Процедура ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, ИзмененнаяКолонка) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	Если ИзмененнаяКолонка = "Номенклатура" Тогда
		ПриИзмененииНоменклатурыТовары(ЭлементыФормы.Товары);
	ИначеЕсли ИзмененнаяКолонка = "Количество" Тогда
		ПриИзмененииКоличестваТовары(ЭлементыФормы.Товары);
	КонецЕсли;

КонецПроцедуры // ИзменениеСтрокиПрограммное()

// Процедура вызывается для обработки программного удалениия строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", которую нужно удалить.
//
Процедура УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	ПередУдалениемТовары(ЭлементыФормы.Товары, Ложь);

	Товары.Удалить(СтрокаТабличнойЧасти);

	ПослеУдаленияТовары(ЭлементыФормы.Товары);

КонецПроцедуры // УдалениеСтрокиПрограммное()

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		// Склад - розничная торговая точка
		СписокЗапросов.Добавить("РасходЦеныРозничнаяТочка", "По ценам номенклатуры в розничной точке");
		СписокЗапросов.Добавить("РасходОстаткиЦеныРозничнаяТочка", "По остаткам и ценам номенклатуры в розничной точке");
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		// Склад - оптовая торговая точка
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
	КонецЕсли;
	
	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
	ИначеЕсли Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	КонецЕсли;

	ТипЦенДляЗапроса    = ТипЦен;
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",            ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",                   Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен",                  ТипЦенДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация",             Организация);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",      Неопределено);
	СтруктураПараметровПодбора.Вставить("Контрагент",              Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен",     СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",                ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",               ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",         мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги",         Истина);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж",           УсловиеПродаж);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	Если РаботаСДиалогами.ПроверитьЧтоКачествоВСтруктуреПодбораНеУдовлетворяетУсловиямПодбора(ЗначениеВыбора,
	   Истина) Тогда
		Возврат;
	КонецЕсли;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",          ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура",        Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",          Количество);
	ЗначениеВыбора.Свойство("Цена",                Цена);
	ЗначениеВыбора.Свойство("Характеристика",      Характеристика);
	ЗначениеВыбора.Свойство("Серия",               Серия);

	// Пересчитаем цену в валюту регламентированного учета
	СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
	Цена           = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, мВалютаРегламентированногоУчета, СтруктураКурса.Курс, СтруктураКурса.Кратность, Дата);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	СтруктураОтбора.Вставить("НеобходимостьВводаАкцизнойМарки" , Ложь);
	
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
		СтруктураОтбора.Вставить("Цена", Цена);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	СуммаСтроки = 0;
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		Если Не ПересчитатьАвтоматическиеСкидки() Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.Цена                       = Цена;
		
		ИнтеграцияЕГАИСПереопределяемый.ПроверитьНеобходимостьВводаАкцизнойМарки(СтрокаТабличнойЧасти, ЭтаФорма, Этотобъект);
	
		Если Не ПересчитатьАвтоматическиеСкидки() Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

		// Ввод состава набора
		СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
	                                    мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, , Истина);

	// Установим способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект,
	                                    мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, , Истина);

	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Производит пересчет необходимых полей при изменении типа цен
//
Процедура ПриИзмененииТипаЦен(Ответ)

	Если Товары.Количество()>0 Тогда
		ТекстВопроса = "Изменился тип цен. Пересчитать табличную часть?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда

			СтруктураЗначений = Новый Структура;
			СтруктураЗначений.Вставить("НовыйТипЦен"            , ТипЦен);
			СтруктураЗначений.Вставить("НовыйВалютаДокумента"   , мВалютаРегламентированногоУчета);
			СтруктураЗначений.Вставить("НовыйКурсДокумента"     , 1);
			СтруктураЗначений.Вставить("НовыйКратностьДокумента", 1);
			СтруктураЗначений.Вставить("УсловиеПродаж"          , УсловиеПродаж);

			Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
				СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
			Иначе
				СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			КонецЕсли;

			// Получить нужные цены запросом
			РезультатЗапросаЦен = Ценообразование.СформироватьЗапросПоЦенам(СтруктураЗначений, 
			                                                  СпособЗаполненияЦен, 
			                                                  Товары.ВыгрузитьКолонку("Номенклатура"),
			                                                  Дата, Неопределено, , Склад);

			ВыборкаИзРезультатаЗапроса = РезультатЗапросаЦен.Выбрать();
			
			СтруктураПоиска = Новый Структура(); // стркутура для поиска в результате запроса

			// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл

				СтруктураПоиска.Вставить("Номенклатура"              , СтрокаТабличнойЧасти.Номенклатура);
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);

				ВыборкаИзРезультатаЗапроса.Сбросить(); 
				Если ВыборкаИзРезультатаЗапроса.НайтиСледующий(СтруктураПоиска) Тогда // Нашли запись

					// Если для данного товара есть цена данного типа
					// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
					Если НЕ ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Цена) Тогда
						СтрокаТабличнойЧасти.Цена = 0;
					Иначе
						// Присваиваем значение цены и единицы цены
						Если СтруктураЗначений.НовыйТипЦен.Рассчитывается Тогда

							Цена = ВыборкаИзРезультатаЗапроса.Цена * (1 + ВыборкаИзРезультатаЗапроса.ПроцентСкидкиНаценки / 100);
							СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураЗначений.НовыйТипЦен.ВалютаЦены, ДокументОбъект.Дата);
							МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена, 
														ВыборкаИзРезультатаЗапроса.ВалютаЦены,
														СтруктураЗначений.НовыйТипЦен.ВалютаЦены,
														ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
														СтруктураВалюты.Курс,
														ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
														СтруктураВалюты.Кратность);
							СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(Цена,
																		СтруктураЗначений.НовыйТипЦен.ПорядокОкругления,
																		СтруктураЗначений.НовыйТипЦен.ОкруглятьВБольшуюСторону);

						Иначе
							СтрокаТабличнойЧасти.Цена = ВыборкаИзРезультатаЗапроса.Цена;
						КонецЕсли;

						// Пересчитываем цену в ваюту документа
						Если СтруктураЗначений.НовыйВалютаДокумента <> ВыборкаИзРезультатаЗапроса.ВалютаЦены Тогда
							СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
							                                    ВыборкаИзРезультатаЗапроса.ВалютаЦены, 
							                                    СтруктураЗначений.НовыйВалютаДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КурсВалютыЦены,
							                                    СтруктураЗначений.НовыйКурсДокумента, 
							                                    ВыборкаИзРезультатаЗапроса.КратностьВалютыЦены,
							                                    СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииТипаЦен()

// Процедура осуществляет вывод информации на дисплей покупателя.
//
// Параметры:
//  Нет.
//
Процедура ВывестиИнформациюНаДисплейПокупателя()

	ВидТО    = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя;
	Дисплеи  = ПолучитьСерверТО().ПолучитьСписокУстройств(ВидТО, КассаККМ);
	Дисплей  = Неопределено;
	//Данные   = ?(ЭлементыФормы.Товары.ТекущаяСтрока = Неопределено,
	//			 "",
	//			 СокрЛП(ЭлементыФормы.Товары.ТекущаяСтрока.Номенклатура)
	//			 + Символы.ПС
	//			 + "Итого: " + Формат(ЭлементыФормы.Всего.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0"));

	Данные = Неопределено;
	Если ЭлементыФормы.Товары.ТекущаяСтрока <> Неопределено Тогда
		Данные = Новый ТаблицаЗначений;
		Данные.Колонки.Добавить("Текст");
		Данные.Колонки.Добавить("БегущаяСтрока");
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.Текст = СокрЛП(ЭлементыФормы.Товары.ТекущаяСтрока.Номенклатура);
		НоваяСтрока.БегущаяСтрока = Истина;
		НоваяСтрока = Данные.Добавить();
		НоваяСтрока.Текст = "Итого: " + Формат(ЭлементыФормы.Всего.Значение, "ЧДЦ=2; ЧРГ=' '; ЧН=0");
		НоваяСтрока.БегущаяСтрока = Ложь;
	КонецЕсли;

	Для Каждого Дисплей Из Дисплеи Цикл
		Если Данные = Неопределено Тогда
			ПолучитьСерверТО().ОчиститьДисплейПокупателя(Дисплей);
		Иначе
			ПолучитьСерверТО().ВывестиСтрокиНаДисплейПокупателя(Дисплей, Данные);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ВывестиИнформациюНаДисплейПокупателя()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = Номенклатура;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Чек, по которому возвращается товар нужно показывать только в чеке на возврат.
	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		ЭлементыФормы.ЧекККМПродажа.Видимость = Истина;
		ЭлементыФормы.НадписьЧекККМПродажа.Видимость = Истина;
		ЭлементыФормы.НадписьСдача.Видимость = Ложь;
		ЭлементыФормы.Сдача.Видимость = Ложь;
		ЭлементыФормы.НадписьСуммаОплаты.Видимость = Ложь;
		ЭлементыФормы.КнопкаОплатаБезСдачи.Видимость = Ложь;
		ЭлементыФормы.СуммаОплаты.Видимость = Ложь;

		ЭлементыФормы.ПереключательОплатаПростая.Доступность = Ложь;
		ЭлементыФормы.ВидОплаты.Доступность = Ложь;
		ЭлементыФормы.ПереключательОплатаСписком.Доступность = Ложь;

		ЭлементыФормы.ВидОплаты.АвтоОтметкаНезаполненного = Ложь;

		ЭлементыФормы.Оплата.ТолькоПросмотр = Истина;
	Иначе
		ЭлементыФормы.ЧекККМПродажа.Видимость = Ложь;
		ЭлементыФормы.НадписьЧекККМПродажа.Видимость = Ложь;
		ЭлементыФормы.НадписьСдача.Видимость = Истина;
		ЭлементыФормы.Сдача.Видимость = Истина;
		ЭлементыФормы.НадписьСуммаОплаты.Видимость = Истина;
		ЭлементыФормы.КнопкаОплатаБезСдачи.Видимость = Истина;
		ЭлементыФормы.СуммаОплаты.Видимость = Истина;

		ЭлементыФормы.ПереключательОплатаПростая.Доступность = Истина;
		ЭлементыФормы.ВидОплаты.Доступность = ПереключательОплатаПростая;
		ЭлементыФормы.ПереключательОплатаСписком.Доступность = Истина;

		ЭлементыФормы.СуммаОплаты.ТолькоПросмотр = Не ПереключательОплатаПростая;

		ЭлементыФормы.ВидОплаты.АвтоОтметкаНезаполненного = ПереключательОплатаПростая;

		Если Не ПереключательОплатаПростая Тогда
			ЭлементыФормы.ВидОплаты.ОтметкаНезаполненного = Ложь;
		КонецЕсли;

		ЭлементыФормы.Оплата.ТолькоПросмотр = Ложь;
	КонецЕсли;

	Если ПереключательОплатаПростая Тогда
		ЭлементыФормы.ПанельОплата.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОплата, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительОплата.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОплата, ГраницаЭлементаУправления.Верх);

		ЭлементыФормы.ПанельОплата.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительОплата.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		ЭлементыФормы.РазделительОплата.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОплата.Свертка = РежимСверткиЭлементаУправления.Нет;

		ЭлементыФормы.РазделительОплата.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОплата.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительОплата, ГраницаЭлементаУправления.Низ);
	КонецЕсли;

	РаботаСДиалогами.УстановитьСвойстваЭлементовОтправкиЭлектронногоЧека(ЭлементыФормы, Истина);

КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
Процедура ОбновитьПодвал()

	Если ЧекПробитНаККМ Тогда
		ЭлементыФормы.НадписьЧекККМПробит.Заголовок = "Чек пробит";
		ЭлементыФормы.НомерЧекаККМ.Заголовок = НомерЧекаККМ;
	Иначе
		ЭлементыФормы.НадписьЧекККМПробит.Заголовок = "";
		ЭлементыФормы.НомерЧекаККМ.Заголовок = "";
	КонецЕсли;

	СуммаВсего = Товары.Итог("Сумма");
	СуммаНал = ПолучитьСуммуНаличнойОплаты();
	СуммаБезнал = ПолучитьСуммуБезналичнойОплаты();

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение = ОбщегоНазначения.ФорматСумм(СуммаВсего);

	ВременнаяСтрока = "";

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Цены АТТ: " + Склад +".";
	Иначе
		Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ТипЦен +".";
		Иначе
			ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
		КонецЕсли;
	КонецЕсли;

	ИтогСкидка = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары) - СуммаВсего;
	Если ИтогСкидка > 0 Тогда
		ВременнаяСтрока = ВременнаяСтрока + " Сумма скидки: " + ОбщегоНазначения.ФорматСумм(ИтогСкидка) + ".";
	ИначеЕсли ИтогСкидка < 0 Тогда
		ВременнаяСтрока = ВременнаяСтрока + " Сумма наценки: " + ОбщегоНазначения.ФорматСумм(-ИтогСкидка) + ".";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + " Условие продаж: " + УсловиеПродаж + ".";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(мВалютаРегламентированногоУчета) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		ЭлементыФормы.НадписьСдача.Заголовок = "Сдача (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаРегламентированногоУчета) +"):";
		ЭлементыФормы.НадписьСдача.Заголовок = "Сдача (" + СокрЛП(мВалютаРегламентированногоУчета) +"):";
	КонецЕсли;

	ВывестиИнформациюНаДисплейПокупателя();

	Если СуммаБезнал > СуммаВсего Тогда
		ЭлементыФормы.Сдача.Значение = 0;
	Иначе
		ЭлементыФормы.Сдача.Значение = СуммаНал - СуммаВсего + СуммаБезнал;
	КонецЕсли;

	Если Не ПереключательОплатаПростая Тогда
		СуммаОплаты = Оплата.Итог("Сумма");
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

	//Видимость автоматических скидок.
	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = МожноРассчитыватьАвтоматическиеСкидки();

	ОтобразитьОплату();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	СчитывателиRFIDметок = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток);
	Для Каждого Считыватель Из СчитывателиRFIDметок Цикл
		Результат = ПолучитьСерверТО().УстановитьРежимДрайвераRFID(Считыватель, Истина);
		ПолучитьСерверТО().ОткрытьСессиюRFID(Считыватель);
	КонецЦикла;

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа", ПараметрОбъектКопирования, ПараметрОснование);
		ПриИзменииКассыККМ();

		// Чек всегда в рублях со всеми налогами.
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		// Тип цен по умолчанию - из типа цен розничной торговли на данном складе
		РозничныйТипЦен = Склад.ТипЦенРозничнойТорговли;
		Если ЗначениеЗаполнено(РозничныйТипЦен) Тогда
			ТипЦен = РозничныйТипЦен;
		КонецЕсли; 

		ЧекПробитНаККМ = Ложь;
		Архивный = Ложь;
		
		Если Оплата.Количество() = 0 Тогда
			ВидОплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидОплатыЧекаККМ");
			ПриИзмененииВидаОплаты();
		КонецЕсли;
		
		Если НачалоДня(ЭтотОбъект.Дата) = НачалоДня(ТекущаяДата()) Тогда
			ЭтотОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;

	АдресЭлектроннойПочты = АдресЭП;
	
	СтруктураКолонок = Новый Структура();
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));


	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);
										  
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	// включим режим вывода строк
	ВывестиИнформациюНаДисплейПокупателя();

	Весы = ПолучитьСерверТО().ПолучитьСписокУстройств(
	   Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы);
	Если Весы.Количество() = 0 Тогда
		ЭлементыФормы.НадписьВесы.Доступность = Ложь;
		ЭлементыФормы.ТекущиеВесы.Доступность = Ложь;
	Иначе
		ЭлементыФормы.НадписьВесы.Доступность = Истина;
		ЭлементыФормы.ТекущиеВесы.Доступность = Истина;

		СписокВесов = РаботаСТорговымОборудованием.ПолучитьСписокУстройствТОДляВыбора(Весы);

		ЭлементыФормы.ТекущиеВесы.СписокВыбора = СписокВесов;

		Если СписокВесов.Количество() = 1 Тогда
			ЭлементыФормы.ТекущиеВесы.Значение = СписокВесов[0].Значение;
		КонецЕсли;
	КонецЕсли;

	// Установим доступность колонки "Цена" для редактирования.
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();
	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	Если ЧекПробитНаККМ ИЛИ Архивный Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ?(Архивный, " (архивный)", "");
	
	ЭлементыФормы.НомерСекции.Заголовок = Склад.НомерСекции;
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	РаботаСДиалогами.УстановитьДоступностьМенюПроверить(ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиОплатитьКартой(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

	РаботаСДиалогами.УстановитьДоступностьКнопкиСерийныеНомера(ЭлементыФормы.КоманднаяПанельТовары.Кнопки);

	РаботаСДиалогами.УстановитьДоступностьКнопкиПолучитьВес(ЭлементыФормы.КоманднаяПанельТовары.Кнопки, Весы);

	// Активировать кнопку "ручного" режима печати чека ККМ
	Если ЗначениеЗаполнено(КассаККМ)
	   И УстановленЕНВДОрганизации()
	   И КассаККМ.ФормироватьНефискальныеЧеки
	   И КассаККМ.РучнойРежимФормирования
	   И Не ЧекПробитНаККМ Тогда
		МассивФР = ПолучитьСерверТО().ПолучитьСписокУстройств(
		           Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
		           КассаККМ);
		МассивККТ = ПолучитьСерверТО().ПолучитьСписокУстройств(
		            Перечисления.ВидыТорговогоОборудования.ККТ,
		            КассаККМ);

		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЧекККМ.Доступность = (МассивФР.Количество() > 0) ИЛИ (МассивККТ.Количество() > 0);
	ИначеЕсли ЧекПробитНаККМ Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЧекККМ.Доступность = Ложь;
	КонецЕсли;

	Если Не УстановленЕНВДОрганизации()
	   И КассаККМ.ФормироватьНефискальныеЧеки Тогда
		Сообщить("Организация """ + КассаККМ.Владелец + """ не облагается ЕНВД! Формирование нефискальных чеков ККМ невозможно.
			|Для изменения настроек кассы ККМ обратитесь к администратору системы.", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//При проведении документа проверим возможность получения бонусов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
		ТолькоСерые = Неопределено;

		Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Розничная) Тогда
			Если Не(ТолькоСерые И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеПредлагатьНеполныеСпецПредложения")) Тогда
				Ответ = Вопрос("В документе можно составить спец. предложения." + Символы.ПС + "Открыть форму подбора спец. предложений?", РежимДиалогаВопрос.ДаНет);

				Если Ответ = КодВозвратаДиалога.Да Тогда
					Ценообразование.РассчитатьНатуральныеСкидки("Товары", ЭтотОбъект, ЭтаФорма, Перечисления.ВидыСкидок.Розничная);

					// Если пользователь отказался от выбора спец. предложения - вернемся к редактированию документа.
					Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Розничная) Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ЧекПробитНаККМ Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;

	Ценообразование.ПроверитьВозможностьЗаменыДисконтнойКарты(ЭтотОбъект, ПолучитьЗначениеУчетнойПолитики());

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	КоличествоМеток = 0;
	ВидУстройства = Неопределено;
	НаименованиеУстройства = "";

	СчитывателиRFIDметок = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток);
	Для Каждого Считыватель Из СчитывателиRFIDметок Цикл
		ПолучитьСерверТО().ЗакрытьСессиюRFID(Считыватель, Истина, КоличествоМеток);
		Если КоличествоМеток > 0 Тогда
			ПолучитьСерверТО().ПолучитьПредставлениеУстройства(Считыватель, ВидУстройства, НаименованиеУстройства);
			Сообщить(НаименованиеУстройства + ": В поле считывателя остались метки - " + КоличествоМеток + " шт.", СтатусСообщения.Внимание);
		КонецЕсли;
		Результат = ПолучитьСерверТО().УстановитьРежимДрайвераRFID(Считыватель, Ложь);
	КонецЦикла;

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

	Если ЭлементыФормы.ТекущиеВесы.Значение <> Неопределено Тогда
		СохранитьЗначение("ВесыПредыдущегоСеанса", ЭлементыФормы.ТекущиеВесы.Значение);
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ДисплейПокупателя
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ЭлектронныеВесы
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательRFIDМеток
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ЭквайринговаяСистема 
		 Или Вид = Перечисления.ВидыТорговогоОборудования.ККТ Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ПанельТовары.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, мВалютаРегламентированногоУчета,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, , , УсловиеПродаж, Склад);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ПанельТовары.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                мВалютаРегламентированногоУчета, Номер,
	                                                мУказаниеСкладовВТЧ,
	                                                ТипЦен, , , УсловиеПродаж, Склад);

	Если ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ RFID МЕТОК)

Функция RFIDЧтениеМеток(ДанныеИзМеток) Экспорт

	Для Каждого СтрокаДанных Из ДанныеИзМеток Цикл
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(СтрокаДанных.ШК, ЭтаФорма);
	КонецЦикла;

	Возврат Истина;

КонецФункции

Функция RFIDМеткаВПоле(Событие, Данные) Экспорт 

	Возврат Истина;

КонецФункции

Функция RFIDНетМетокВПоле(Событие, Данные) Экспорт 

	Возврат Истина;

КонецФункции

Функция RFIDОшибкаВДрайвере(Событие, Данные) Экспорт 

	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Предупреждение("Состав набора-комплекта при возврате товара не редактируется!");
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	КонецЕсли;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураВалюты              = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);

	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента",    мВалютаРегламентированногоУчета);
	СтруктураРеквизитовДокумента.Вставить("КурсДокумента",      СтруктураВалюты.Курс);
	СтруктураРеквизитовДокумента.Вставить("КратностьДокумента", СтруктураВалюты.Кратность);

	СтруктураНередактируемыхРеквизитов = Новый Структура;

	СтруктураНередактируемыхРеквизитов.Вставить("ВалютаДокумента");
	СтруктураНередактируемыхРеквизитов.Вставить("КурсДокумента");

	Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		СтруктураНередактируемыхРеквизитов.Вставить("ТипЦен");
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, ,СтруктураЗначений);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийЧекККМ[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" кнопки "ОК" командной панели 
// "ОсновныеДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - кнопка "ОК"
//
Процедура ОсновныеДействияФормыОК(Кнопка)

	Перем Ответ;
	Перем Отказ;

	Если ПровестиИРаспечататьЧек(Ответ, Отказ, ЭтаФорма) Тогда
		Закрыть();
	Иначе
		Предупреждение(?(Отказ, "Возможны расхождения ИБ и ленты ФР! ", "") + Ответ);
	КонецЕсли;

КонецПроцедуры // ОсновныеДействияФормыОК()

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

Процедура ОсновныеДействияФормыЧекККМ(Кнопка)

	Перем Ответ;
	Перем Отказ;

	Если ПровестиИРаспечататьЧек(Ответ, Отказ, ЭтаФорма, Истина) Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЧекККМ.Доступность = Ложь;
	Иначе
		Предупреждение(?(Отказ, "Возможны расхождения ИБ и ленты ФР! ", "") + Ответ);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "НачалоВыбора" элемента формы "ВидОплаты".
//
Процедура ВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборТипаОплаты(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры // ВидОплатыНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЧекККМПродажа".
//
Процедура ЧекККМПродажаПриИзменении(Элемент)

	Если ВидОперации = Перечисления.ВидыОперацийЧекККМ.Возврат Тогда
		Если ЗначениеЗаполнено(ЧекККМПродажа) Тогда
			Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
				КассаККМ = ЧекККМПродажа.КассаККМ;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ЧекККМПродажа.Склад;
			КонецЕсли;

			Оплата.Загрузить(ЧекККМПродажа.Оплата.Выгрузить());
		КонецЕсли;

		ОтобразитьОплату();
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ЧекККМПродажаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад
//
Процедура СкладПриИзменении(Элемент)

	//Если Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный Тогда
		ПриИзмененииТипаЦен(Ложь);
	//КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

	ЭлементыФормы.НомерСекции.Заголовок = Склад.НомерСекции;

	УстановитьВидимость();

КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "КассаККМ".
//
Процедура КассаККМОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВывестиИнформациюНаДисплейПокупателя();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТекущиеВесы".
//
Процедура ТекущиеВесыПриИзменении(Элемент)

	СохранитьЗначение("ВесыПредыдущегоСеанса", ЭлементыФормы.ТекущиеВесы.Значение);

КонецПроцедуры

// Процедура - обработчик события "Нажатие" поля "КнопкаВес".
//
Процедура КнопкаВесНажатие(Элемент)

	Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Необходимо выбрать строку, для которой необходимо получить вес.");
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеВесы) Тогда
		Предупреждение("Необходимо выбрать весы на странице ""Дополнительно"".");
	Иначе
		Количество = Неопределено;
		Результат  = ПолучитьСерверТО().ПолучитьВесЭВ(ТекущиеВесы, Количество);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ЭлементыФормы.Товары.ТекущиеДанные.Количество = Количество;
			ПриИзмененииКоличестваТовары(Элемент);
			ПересчитатьАвтоматическиеСкидки();
		Иначе
			Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиЭВТО(Результат);
			Предупреждение(Текст);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы ДисконтнаяКарта
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораИнформационнойКарты(Элемент, Перечисления.ТипыИнформационныхКарт.Дисконтная, СтандартнаяОбработка);

КонецПроцедуры // ДисконтнаяКартаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "ДисконтнаяКарта".
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	ПриИзмененииДисконтнойКарты();

КонецПроцедуры // ДисконтнаяКартаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "НачалоВыбора" табличной части "Оплата".
//
Процедура ОплатаВидОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборТипаОплаты(СтандартнаяОбработка, Элемент);
	
КонецПроцедуры // ОплатаВидОплатыНачалоВыбора()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Установим способ редактирования цены.
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;

	ИнтеграцияЕГАИСПереопределяемый.ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма, ЭтотОбъект);

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТовары(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СуммаСтроки = СтрокаТабличнойЧасти.Цена*СтрокаТабличнойЧасти.Количество;
	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличестваТовары(Элемент);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ПередУдалениемТовары(Элемент, Отказ);

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	ПослеУдаленияТовары(Элемент);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПередНачаломДобавления" табличной части
// "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличной части
// "Товары".
//
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ИнтеграцияЕГАИСПереопределяемый.ТоварыПередНачаломИзменения(Элемент, Отказ, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

	Если ДанныеСтроки.Номенклатура.Услуга Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Товары".
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьКартинкиВСтрокахТЧ(ОформленияСтрок, мКартинкаСерийныеНомера, мКартинкаНаборКомплект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменеии реквизита "КассаККМ".
//
Процедура ПриИзменииКассыККМ()

	Организация = КассаККМ.Владелец;

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Изменить активность кнопки "ручного" режима печати чека ККМ
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		МассивФР = ПолучитьСерверТО().ПолучитьСписокУстройств(
		           Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
		           КассаККМ);
		МассивККТ = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ККТ, КассаККМ);
		МассивФУ = Новый Массив();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивФР);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФУ, МассивККТ);

		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЧекККМ.Доступность = (Не ЧекПробитНаККМ
		                                                                 И УстановленЕНВДОрганизации(Истина)
		                                                                 И КассаККМ.ФормироватьНефискальныеЧеки
		                                                                 И КассаККМ.РучнойРежимФормирования
		                                                                 И МассивФУ.Количество() > 0);
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ЧекККМ.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // ПриИзменииОрганизации()


// Процедура - обработчик события ПриИзменении реквизита "КассаККМ".
//
Процедура КассаККМПриИзменении(Элемент)

	ПриИзменииКассыККМ();

КонецПроцедуры // КассаККМПриИзменении()

// Процедура - обработчик события ПриИзменении переключателя "ПереключательОплатаПростая".
//
Процедура ПереключательОплатаПростаяПриИзменении(Элемент)

	Если ПереключательОплатаПростая Тогда
		Если Оплата.Количество() > 1 Тогда
			Ответ = Вопрос("Список оплат будет очищен." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПереключательОплатаПростая = Ложь;
			Возврат;
		Иначе
			Пока Оплата.Количество() > 1 Цикл
				Оплата.Удалить(Оплата[1]);
			КонецЦикла;

			Если Оплата.Количество() > 0 Тогда
				ВидОплаты = Оплата[0].ВидОплаты;
				СуммаОплаты = Оплата[0].Сумма;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВидОплаты = Неопределено;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ПереключательОплатаПростаяПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита "ВидОплаты".
//
Процедура ВидОплатыПриИзменении(Элемент)

	ПриИзмененииВидаОплаты();

КонецПроцедуры // ВидОплатыПриИзменении()

// Процедура - обработчик события ПриИзменении реквизита "СуммаОплаты".
//
Процедура СуммаОплатыПриИзменении(Элемент)

	ПриИзмененииСуммыОплаты();

КонецПроцедуры // СуммаОплатыПриИзменении()

// Процедура выполняет необходимые действия при изменении реквизита "ВидОплаты".
//
Процедура ПриИзмененииВидаОплаты()

	Если Оплата.Количество() = 0 Тогда
		СтрокаОплаты = Оплата.Добавить();
	Иначе
		СтрокаОплаты = Оплата[0];
	КонецЕсли;

	СтрокаОплаты.ВидОплаты = ВидОплаты;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ПриИзмененииВидаОплаты()

// Процедура выполняет необходимые действия при изменении реквизита "СуммаОплаты".
//
Процедура ПриИзмененииСуммыОплаты()

	Если Оплата.Количество() = 0 Тогда
		СтрокаОплаты = Оплата.Добавить();
	Иначе
		СтрокаОплаты = Оплата[0];
	КонецЕсли;

	СтрокаОплаты.Сумма = СуммаОплаты;

КонецПроцедуры // ПриИзмененииСуммыОплаты()

// Процедура - обработчик события Нажатие кнопки "КнопкаОплатаБезСдачи".
//
Процедура КнопкаОплатаБезСдачиНажатие(Элемент)

	Если ПереключательОплатаПростая Тогда
		СуммаОплаты = Товары.Итог("Сумма");

		ПриИзмененииСуммыОплаты();
	Иначе
		Предупреждение("Оплата редактируется в списке!");
	КонецЕсли;

КонецПроцедуры // КнопкаОплатаБезСдачиНажатие()

Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПриИзменении" реквизита "ВидОплаты" в ТЧ "Оплата".
//
Процедура ОплатаВидОплатыПриИзменении(Элемент)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ОплатаВидОплатыПриИзменении()

// Процедура - обработчик события "ПослеУдаления" строки в ТЧ "Оплата".
//
Процедура ОплатаПослеУдаления(Элемент)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ОплатаПослеУдаления()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

Процедура КоманднаяПанельТоварыОплатитьКартой(Кнопка)

	ОплатитьКартой(СуммаОплаты);

КонецПроцедуры // КоманднаяПанельТоварыОплатитьКартой()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПЕРЕТАСКИВАНИЕ НОМЕНКЛАТУРЫ

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПеретаскиваниеИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	Если РаботаСДиалогами.ЭтоПеретаскиваниеИзПодбора(ПараметрыПеретаскивания) Тогда
		РаботаСДиалогами.ПроверкаПеретаскиванияИзПодбора(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Ссылка, "Товары");
	Иначе
		РаботаСДиалогами.ПеретаскиваниеОтменить(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененЭлементКассыККМ"
	   И Источник = КассаККМ.Ссылка Тогда
		ПриИзменииКассыККМ();
	КонецЕсли;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ для работы с ЕГАИС

Процедура Подключаемый_ВводАкцизнойМарки()
	
	ИнтеграцияЕГАИСПереопределяемый.ВводАкцизнойМарки(ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ отправки электронного чека

Процедура ОтправитьПоЭПНажатие(Элемент)
	
	РаботаСДиалогами.ВыполнитьОтправкуЭлектронногоЧека(ЭтотОбъект);
	
КонецПроцедуры

Процедура АдресЭППриИзменении(Элемент)
	АдресЭП = АдресЭлектроннойпочты;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
мТерминалы     = ПолучитьСерверТО().ПолучитьСписокУстройств(
               		Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);
