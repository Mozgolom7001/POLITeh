Перем мТаблицаПользователей Экспорт;
Перем мПользователь Экспорт;
Перем ДокументОбъект Экспорт;

Перем мУказаниеСкладовВТЧ;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если мТаблицаПользователей = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарольКассираФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольКассираФискальногоРегистратора);
		Запрос.УстановитьПараметр("ПарольАдминистратораФР", ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора);
		Запрос.УстановитьПараметр("ПустойПароль", "");

		Запрос.Текст ="
		|ВЫБРАТЬ
		|	НастройкиПользователей.Пользователь,
		|	НастройкиПользователей.Настройка,
		|	НастройкиПользователей.Значение
		|ИЗ
		|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО НастройкиПользователей.Пользователь = Пользователи.Ссылка
		|
		|ГДЕ
		|	   (НастройкиПользователей.Настройка = &ПарольКассираФР И НастройкиПользователей.Значение <> &ПустойПароль
		|	ИЛИ НастройкиПользователей.Настройка = &ПарольАдминистратораФР И НастройкиПользователей.Значение <> &ПустойПароль)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователь
		|АВТОУПОРЯДОЧИВАНИЕ
		|";

		мТаблицаПользователей = Запрос.Выполнить().Выгрузить();
		мТаблицаПользователей.Индексы.Добавить("Пользователь");
	КонецЕсли;

	ТаблицаДляСвертки = мТаблицаПользователей.Скопировать();
	ТаблицаДляСвертки.Свернуть("Пользователь");
	Если ТаблицаДляСвертки.Количество() = 0 Тогда
		Предупреждение("Не обнаружено пользователей с установленными паролями кассира или администратора ККМ!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ЭлементыФормы.Пользователь.СписокВыбора.ЗагрузитьЗначения(ТаблицаДляСвертки.ВыгрузитьКолонку("Пользователь"));
	Пользователь = ТаблицаДляСвертки[0].Пользователь;

КонецПроцедуры

Функция ВыполнитьАвторизацию(ПолучатьПароли = Ложь)Экспорт

	ПаролиПользователя = мТаблицаПользователей.НайтиСтроки(Новый Структура("Пользователь", Пользователь));

	ВидПользователя = Неопределено;
	АвторизацияЗавершенаУспешно = Ложь;

	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Предупреждение("Не выбран пользователь!");
		Возврат Неопределено;
	КонецЕсли;

	Если ПолучатьПароли Тогда

		Для каждого СтрокаПароля Из ПаролиПользователя Цикл
			Если ЗначениеЗаполнено(СтрокаПароля.Значение) Тогда
				АвторизацияЗавершенаУспешно = Истина;
				Если СтрокаПароля.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора Тогда
					ВидПользователя = "Администратор: ";
					Прервать;
				Иначе
					ВидПользователя = "Кассир: ";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если НЕ АвторизацияЗавершенаУспешно Тогда
			Предупреждение("Пользователю: """+ Пользователь + """ не указаны пароли кассира/администратора ККМ");
		КонецЕсли;

	Иначе
		
		Если Пароль = 0 Тогда
			Предупреждение("Введите пароль!");
			Возврат Неопределено;
		КонецЕсли;

		Для каждого СтрокаПароля Из ПаролиПользователя Цикл
			Если СтрокаПароля.Значение = Пароль Тогда
				АвторизацияЗавершенаУспешно = Истина;
				Если СтрокаПароля.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПарольАдминистратораФискальногоРегистратора Тогда
					ВидПользователя = "Администратор: ";
				Иначе
					ВидПользователя = "Кассир: ";
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ АвторизацияЗавершенаУспешно Тогда
			Предупреждение("Пароль неверный!");
		КонецЕсли;

	КонецЕсли;

	Если ВидПользователя <> Неопределено Тогда
		глЗначениеПеременнойУстановить("глТекущийПользователь", Пользователь, Истина);
	КонецЕсли;

	Возврат ВидПользователя;

КонецФункции

Процедура ОсновныеДействияФормыВыполнитьАвторизацию(Кнопка)

	ВидПользователя = ВыполнитьАвторизацию();
	Если ВидПользователя <> Неопределено Тогда

		Закрыть(ВидПользователя);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат = Истина;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат = Истина;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
		Пользователь = Карта.ВладелецКарты;
		ВидПользователя = ВыполнитьАвторизацию(Истина);
		Если ВидПользователя <> Неопределено Тогда
			глЗначениеПеременнойУстановить("глТекущийПользователь", Пользователь, Истина);
			Закрыть(ВидПользователя);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если Карта.ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
		Пользователь = Карта.ВладелецКарты;
		ВидПользователя = ВыполнитьАвторизацию(Истина);
		Если ВидПользователя <> Неопределено Тогда
			глЗначениеПеременнойУстановить("глТекущийПользователь", Пользователь, Истина);
			Закрыть(ВидПользователя);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()
