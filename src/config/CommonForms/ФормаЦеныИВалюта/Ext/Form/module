Перем мВалютаРегламентированногоУчета Экспорт;
Перем СтруктураНередактируемыхРеквизитов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Проверяет выбранные значения реквизитов,
// формирует структуру возвращаемых значений и закрывает форму.
//
// Параметры:
//  Отказ - булево, флаг отказа в закрытии формы.
//
Процедура СохранитьИзменения(Отказ = Неопределено)

	// Проверка заполненности реквизитов.
	Если ПерезаполнитьЦеныПоТипу И ЭлементыФормы.НовыйТипЦен.Доступность И НЕ ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Предупреждение("Не выбран тип цен для заполнения!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.НовыйВалютаДокумента.Доступность И НЕ ЗначениеЗаполнено(НовыйВалютаДокумента) Тогда
		Предупреждение("Не выбрана новая валюта документа!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.НовыйКурсДокумента.Доступность И НЕ ЗначениеЗаполнено(НовыйКурсДокумента) Тогда
		Предупреждение("Установлен нулевой новый курс документа!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность И НЕ ЗначениеЗаполнено(НовыйКурсВзаиморасчетов) Тогда
		Предупреждение("Установлен нулевой новый курс взаиморасчетов!");

		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполним структуру возвращаемых параметров.
	СтруктураВозвращаемыхЗначений = Новый Структура;
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийТипЦен"                 , ТекущийТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаДокумента"        , ТекущийВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийВалютаВзаиморасчетов"   , ТекущийВалютаВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсДокумента"          , ТекущийКурсДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКурсВзаиморасчетов"     , ТекущийКурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУчитыватьНДС"           , ТекущийУчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("ТекущийСуммаВключаетНДС"       , ТекущийСуммаВключаетНДС);

	СтруктураВозвращаемыхЗначений.Вставить("ПерезаполнитьЦеныПоТипу"       , ПерезаполнитьЦеныПоТипу);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйТипЦен"                   , НовыйТипЦен);
	СтруктураВозвращаемыхЗначений.Вставить("ПересчитатьЦеныПоВалюте"       , ПересчитатьЦеныПоВалюте);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйВалютаДокумента"          , НовыйВалютаДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсДокумента"            , НовыйКурсДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКурсВзаиморасчетов"       , НовыйКурсВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУчитыватьНДС"             , НовыйУчитыватьНДС);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйСуммаВключаетНДС"         , НовыйСуммаВключаетНДС);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьДокумента"     , ТекущийКратностьДокумента);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьДокумента"       , НовыйКратностьДокумента);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийКратностьВзаиморасчетов", ТекущийКратностьВзаиморасчетов);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйКратностьВзаиморасчетов"  , НовыйКратностьВзаиморасчетов);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийНДСВключенВСтоимость"   , ТекущийНДСВключенВСтоимость);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйНДСВключенВСтоимость"     , НовыйНДСВключенВСтоимость);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийИспользоватьПлановуюСебестоимость", ТекущийИспользоватьПлановуюСебестоимость);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйИспользоватьПлановуюСебестоимость"  , НовыйИспользоватьПлановуюСебестоимость);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийРегистрироватьЦеныПоставщика"     , ТекущийРегистрироватьЦеныПоставщика);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйРегистрироватьЦеныПоставщика"       , НовыйРегистрироватьЦеныПоставщика);

	СтруктураВозвращаемыхЗначений.Вставить("ТекущийУсловиеПродаж"                    , ТекущийУсловиеПродаж);
	СтруктураВозвращаемыхЗначений.Вставить("НовыйУсловиеПродаж"                      , НовыйУсловиеПродаж);

	// Все сделали, можно закрывать форму.
	Модифицированность = Ложь;
	Закрыть(СтруктураВозвращаемыхЗначений);

КонецПроцедуры // СохранитьИзменения()

// Процедура определяет необходимость и взводит флаг пересчета цен по валюте.
//
Процедура УстановитьФлагПересчетаЦенПоВалюте()

	Если ЭлементыФормы.ПересчитатьЦеныПоВалюте.Доступность И Не ПересчитатьЦеныПоВалюте Тогда
		ПересчитатьЦеныПоВалюте = (НовыйВалютаДокумента <> ТекущийВалютаДокумента);
	КонецЕсли;

КонецПроцедуры // УстановитьФлагПересчетаЦенПоВалюте()

// Процедура определяет необходимость и взводит флаг пересчета цен по типу цен.
//
Процедура УстановитьФлагПерезаполнитьЦеныПоТипу()

	Если ЭлементыФормы.ПерезаполнитьЦеныПоТипу.Доступность И Не ПерезаполнитьЦеныПоТипу Тогда
		ПерезаполнитьЦеныПоТипу = (НовыйТипЦен <> ТекущийТипЦен Или НовыйУсловиеПродаж <> ТекущийУсловиеПродаж);
	КонецЕсли;

КонецПроцедуры // УстановитьФлагПерезаполнитьЦеныПоТипу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьДоступность()

	// Флаги включения НДС в сумму видимы только тогда, когда взведен флаг учета НДС.
	Элементыформы.НовыйСуммаВключаетНДС.Видимость = НовыйУчитыватьНДС;
	Элементыформы.НовыйНДСВключенВСтоимость.Видимость = НовыйУчитыватьНДС;
	Элементыформы.ТекущийСуммаВключаетНДС.Видимость = НовыйУчитыватьНДС;
	Элементыформы.ТекущийНДСВключенВСтоимость.Видимость = НовыйУчитыватьНДС;

	// Если задана структура исключений, то сделаем недоступными соответствующие реквизиты.
	Если СтруктураНеРедактируемыхРеквизитов <> Неопределено Тогда

		Для каждого ЭлементСтруктуры Из СтруктураНеРедактируемыхРеквизитов Цикл
			ЭлементыФормы["Новый" + ЭлементСтруктуры.Ключ].Доступность = Ложь;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	// Флаги доступны, если ТЧ документа не пуста и если разрешено менять (доступны)
	// соответствующие реквизиты.
	Если ТабличнаяЧастьПуста Тогда // пересчитывать не нужно
		ЭлементыФормы.ПерезаполнитьЦеныПоТипу.Доступность = Ложь;
		ЭлементыФормы.ПересчитатьЦеныПоВалюте.Доступность = Ложь;
	Иначе
		//ЭлементыФормы.ПерезаполнитьЦеныПоТипу.Доступность = ЭлементыФормы.НовыйТипЦен.Доступность;
		ЭлементыФормы.ПересчитатьЦеныПоВалюте.Доступность = ЭлементыФормы.НовыйВалютаДокумента.Доступность
		   И (ЭлементыФормы.НовыйКурсДокумента.Доступность Или ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность);
	КонецЕсли;

	УстановитьДоступность();

	// Взведем при необходимости флаги пересчета.
	// Флаг взведен, если новое и текущее значения отличаются
	// Текущие и новые значения реквизитов могут отличаться, 
	// например разные значения устанавливаются в ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора().
	УстановитьФлагПересчетаЦенПоВалюте();
	УстановитьФлагПерезаполнитьЦеныПоТипу();

	// Возможна ситуация, когда валюта документа передается, а курс не передается.
	// Чтобы при этом не было нулевого курса, будет заполнять его руками
	// в случае наличия курса взаиморасчетов и совпадения валюты взаиморасчетов с валютой
	// документа - будем брать курс взаиморасчетов, иначе - текущий курс.
	Если ЭлементыФормы.НовыйВалютаДокумента.Доступность и НовыйКурсДокумента = 0 Тогда
		Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность и НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
			НовыйКурсДокумента      = НовыйКурсВзаиморасчетов;
			НовыйКратностьДокумента = НовыйКратностьВзаиморасчетов;
		Иначе
			СтруктураНовыйВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДатаКурса);
			НовыйКурсДокумента      = СтруктураНовыйВалюта.Курс;
			НовыйКратностьДокумента = СтруктураНовыйВалюта.Кратность;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Если форма открывается с пустой валютой взаиморасчетов, а в открывающем ее документе
	// существует реквизит ДоговорКонтрагента, не дадим открыть форму, пока не будет установлен договор
	// взаиморасчетов
	// определим наличие этого реквизита по доступности НовогоКурсаВзаиморасчетов

	Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность и НЕ ЗначениеЗаполнено(ТекущийВалютаВзаиморасчетов) Тогда
		Предупреждение("Не выбран договор контрагента (или в договоре не указана валюта)!");
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность Тогда

		Ответ = Вопрос("Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, ,
		               КодВозвратаДиалога.Да, Заголовок);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьИзменения(Отказ);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "При Изменении" поля "Условия продаж".
//
Процедура НовыйУсловиеПродажПриИзменении(Элемент)

	УстановитьФлагПерезаполнитьЦеныПоТипу();

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Истина;

КонецПроцедуры // НовыйУсловиеПродажПриИзменении()

// Процедура - обработчик события "При Изменении" поля "Тип цен".
//
Процедура НовыйТипЦенПриИзменении(Элемент)

	УстановитьФлагПерезаполнитьЦеныПоТипу();

	// установим флаг СуммаВключаемНДС из типа цены
	Если ЗначениеЗаполнено(НовыйТипЦен) И НовыйУчитыватьНДС Тогда
		НовыйСуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
	КонецЕсли;

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Истина;

КонецПроцедуры // НовыйТипЦенПриИзменении()

// Процедура - обработчик события "Начало выбра" поля "Тип цен".
//
Процедура НовыйТипЦенНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Установим тип реквизита НовыйТипЦен и, в случае необходимости, владельца.
	Если НЕ ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецТипаЦен) Тогда
			НовыйТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		Иначе
			НовыйТипЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
			ЭлементыФормы.НовыйТипЦен.ВыборПоВладельцу = ВладелецТипаЦен;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // НовыйТипЦенНачалоВыбора()

// Процедура - обработчик события "Обработка выбора" поля "Валюта Документа".
//
Процедура НовыйВалютаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НовыйВалютаДокумента    = ВыбранноеЗначение;

	//Сменим курс
	Если ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность
	   И НовыйВалютаДокумента = ТекущийВалютаВзаиморасчетов Тогда
		// если крус взаиморасчетов присутствует в вызвавшем форму документе, тогда
		// в случае совпадения валюты документа с валютой взаиморасчетов возьмем курс и кратность из нее
		НовыйКурсДокумента      = НовыйКурсВзаиморасчетов;
		НовыйКратностьДокумента = НовыйКратностьВзаиморасчетов;
	Иначе

		// вычислим курс
		СтруктураНовыйВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДатаКурса);
		НовыйКурсДокумента      = СтруктураНовыйВалюта.Курс;
		НовыйКратностьДокумента = СтруктураНовыйВалюта.Кратность;
	КонецЕсли;

	//Взведем при необходимости флаг пересчета.
	УстановитьФлагПересчетаЦенПоВалюте();

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений
	Модифицированность = Истина;

КонецПроцедуры // НовыйВалютаДокументаОбработкаВыбора()

// Процедура - обработчик события "Начало выбора" поля "Курс Документа".
//
Процедура НовыйКурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Сохраним значение.
	СтарыйКурсДокумента = НовыйКурсДокумента;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = НовыйВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = НовыйКратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = НовыйКурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> Неопределено Тогда
		НовыйКратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;
		НовыйКурсДокумента      = СтруктураКурсаИКратности.КурсВалюты;
	КонецЕсли;

	// Взводим флаг модифицированности, если поменяли курс, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Модифицированность Или (СтарыйКурсДокумента <> НовыйКурсДокумента);

КонецПроцедуры // НовыйКурсДокументаНачалоВыбора()

// Процедура - обработчик события "Начало выбора" поля "Курс взаиморасчетов".
//
Процедура НовыйКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Сохраним значение.
	СтарыйКурсВзаиморасчетов = НовыйКурсВзаиморасчетов;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущийВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = НовыйКратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = НовыйКурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		НовыйКратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		НовыйКурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;

	// Взводим флаг модифицированности, если поменяли курс, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Модифицированность Или (СтарыйКурсВзаиморасчетов <> НовыйКурсВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага "Учитывать НДС".
//
Процедура НовыйУчитыватьНДСПриИзменении(Элемент)

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Истина;

	// Если налог не учитываем. то надо снять флаг включения в сумму.
	Если Не НовыйУчитыватьНДС Тогда
		
		// Значение флага меняем только если он доступен.
		Если Элементыформы.НовыйСуммаВключаетНДС.Доступность Тогда
			НовыйСуммаВключаетНДС = Ложь;
		КонецЕсли;

		НовыйНДСВключенВСтоимость = Ложь;
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры // НовыйУчитыватьНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "Сумма Включает НДС".
//
Процедура НовыйСуммаВключаетНДСПриИзменении(Элемент)

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Истина;

КонецПроцедуры // НовыйСуммаВключаетНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "НДС включен в стоимость".
//
Процедура НовыйНДСВключатьВСтоимостьПриИзменении(Элемент)

	// Взводим флаг модифицированности, чтобы при закрытии спросить о сохранении значений.
	Модифицированность = Истина;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки ОК в форме.
//
Процедура КнопкаОКНажатие(Элемент)

	СохранитьИзменения();

КонецПроцедуры // КнопкаОКНажатие()

// Процедура - обработчик события обновления формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ИнфНадписьНовогоКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(НовыйВалютаДокумента,
	   НовыйКурсДокумента, НовыйКратностьДокумента, мВалютаРегламентированногоУчета);

	ЭлементыФормы.ИнфНадписьТекущегоКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаДокумента,
	   ТекущийКурсДокумента, ТекущийКратностьДокумента, мВалютаРегламентированногоУчета);

	ЭлементыФормы.ИнфНадписьНовогоКурсаВзаиморасчетов.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаВзаиморасчетов,
	   НовыйКурсВзаиморасчетов, НовыйКратностьВзаиморасчетов, мВалютаРегламентированногоУчета);

	ЭлементыФормы.ИнфНадписьТекущегоКурсаВзаиморасчетов.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ТекущийВалютаВзаиморасчетов,
	   ТекущийКурсВзаиморасчетов, ТекущийКратностьВзаиморасчетов, мВалютаРегламентированногоУчета);

КонецПроцедуры // ОбновлениеОтображения()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");


