
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполнения дерева основной даты запрета
//
Процедура ЗаполнитьОсновноеДерево()    
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |    Границы.Пользователь КАК Пользователь,
				   |    Границы.ГраницаЗапретаИзменений,
				   |    // Поле ПризнакТипаСтроки используется для 
				   |    // обозначения уровня записи - Организация/ГруппаПользователей/Пользователь
				   |    ВЫБОР
				   |        КОГДА Границы.Пользователь = НЕОПРЕДЕЛЕНО
				   |            ТОГДА 1
				   |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
				   |            ТОГДА 2
				   |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
				   |            ТОГДА 3
				   |    КОНЕЦ КАК ПризнакТипаСтроки,
				   |    Истина как ПравоНаИзменение                   
				   |ИЗ
				   |    РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
				   |ГДЕ
				   |    Границы.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |    ПризнакТипаСтроки,
				   |    Пользователь
				   |АВТОУПОРЯДОЧИВАНИЕ";
	
	КореньДерева = ДеревоОсновнойДаты.Строки.Добавить();
	ОбщаяДата = Дата(1,1,1);    
    
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПризнакТипаСтроки = 1 Тогда
			ОбщаяДата = Выборка.ГраницаЗапретаИзменений;    
			Продолжить;
		КонецЕсли;    
		
		СтрокаДерева = КореньДерева.Строки.Добавить();
		СтрокаДерева.Пользователь       = Выборка.Пользователь;
		СтрокаДерева.Граница            = Выборка.ГраницаЗапретаИзменений;		    	    	
		СтрокаДерева.ТипСтроки          = Выборка.ПризнакТипаСтроки;
        СтрокаДерева.ПравоНаИзменение   = Выборка.ПравоНаИзменение;
	КонецЦикла;
	
	КореньДерева.Граница            = ОбщаяДата;   
	КореньДерева.ТипСтроки          = 1;	
    КореньДерева.ПравоНаИзменение   = Истина;		
КонецПроцедуры // ЗаполнитьОсновноеДерево

// Процедура заполнения дерева даты запрета регламентированных данных
//
Процедура ЗаполнитьРеглДерево()
	//Перем ОбщаяДата;
	//
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				   |    Организации.Ссылка КАК Организация,
				   |    ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) КАК Пользователь,
				   |    ЕСТЬNULL(Границы.ГраницаЗапретаИзменений, ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)) КАК ГраницаЗапретаИзменений,
				   |    ЕСТЬNULL(ПраваДоступаПользователей.Запись, ЛОЖЬ) КАК ПравоНаИзменение,
				   |    ВЫБОР
				   |        КОГДА ЕСТЬNULL(Границы.Пользователь, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
				   |            ТОГДА 1
				   |        КОГДА Границы.Пользователь ССЫЛКА Справочник.ГруппыПользователей
				   |            ТОГДА 2
				   |        КОГДА Границы.Пользователь ССЫЛКА Справочник.Пользователи
				   |            ТОГДА 3
				   |    КОНЕЦ КАК ПризнакТипаСтроки                   
				   |ИЗ
				   |    Справочник.Организации КАК Организации
				   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыЗапретаИзмененияДанных КАК Границы
				   |        ПО Границы.Организация = Организации.Ссылка
				   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК ПраваДоступаПользователей
				   |        ПО Организации.Ссылка = ПраваДоступаПользователей.ОбъектДоступа
                   |            И Организации.Ссылка = ПраваДоступаПользователей.ВладелецПравДоступа
				   |            И (ПраваДоступаПользователей.ВидОбъектаДоступа = Значение(Перечисление.ВидыОбъектовДоступа.Организации))
				   |            И (ПраваДоступаПользователей.Пользователь В 
				   |				(ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |					Справочник.ГруппыПользователей.ПользователиГруппы.Ссылка
				   |				 ИЗ
				   |					Справочник.ГруппыПользователей.ПользователиГруппы
				   |				 ГДЕ
				   |					Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь))
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |    Организация,ПризнакТипаСтроки,
				   |    Границы.Пользователь
				   |    АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);                   
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивСтрокКРазвороту = Новый Массив;
	ЕстьРольПолныеПрава = РольДоступна("ПолныеПрава");
	Пока Выборка.Следующий() Цикл
				
		Если Выборка.Пользователь = Неопределено Тогда
			СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
			СтрокаОрганизации.ОрганизацияПользователь = Выборка.Организация;
			СтрокаОрганизации.Граница = Выборка.ГраницаЗапретаИзменений;		
			СтрокаОрганизации.ПравоНаИзменение = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
			СтрокаОрганизации.ТипСтроки = Выборка.ПризнакТипаСтроки;
		Иначе		
			Если СтрокаОрганизации = Неопределено Тогда
				// сначала добавляем корневую строку организации
				СтрокаОрганизации = ДеревоРеглДаты.Строки.Добавить();
				СтрокаОрганизации.ОрганизацияПользователь = Выборка.Организация;   
				СтрокаОрганизации.Граница = Выборка.ГраницаЗапретаИзменений;		
				СтрокаОрганизации.ПравоНаИзменение = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;
				СтрокаОрганизации.ТипСтроки = 1;
			КонецЕсли;    
			// добавляем строку текущего пользователя
			МассивСтрокКРазвороту.Добавить(СтрокаОрганизации);				
			СтрокаПользователя = СтрокаОрганизации.Строки.Добавить();
			СтрокаПользователя.ОрганизацияПользователь = Выборка.Пользователь;
			СтрокаПользователя.Граница = Выборка.ГраницаЗапретаИзменений;
			СтрокаПользователя.ПравоНаИзменение = ЕстьРольПолныеПрава ИЛИ Выборка.ПравоНаИзменение;			
			СтрокаПользователя.ТипСтроки = Выборка.ПризнакТипаСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКРазвороту ИЗ МассивСтрокКРазвороту Цикл
		ЭлементыФормы.ДеревоРеглДаты.Развернуть(СтрокаКРазвороту);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеглДерево()

// Процедура создает запись в наборе регистра сведений
// ГраницыЗапретаИзмененияДанных 
// для строки дерева значений - основной и регламентированной даты
//
Процедура СоздатьЗаписьОсновногоДерева(СтрокиДерева, Набор, ОсновныеДаты)
    
    Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		Запись = Набор.Добавить();
		Запись.Организация = Справочники.Организации.ПустаяСсылка();
	   	Запись.Пользователь = СтрокаДерева.Пользователь;		
		Запись.ГраницаЗапретаИзменений = СтрокаДерева.Граница;
		ОсновныеДаты[Запись.Пользователь] = Запись.ГраницаЗапретаИзменений;    	
		СоздатьЗаписьОсновногоДерева(СтрокаДерева.Строки, Набор, ОсновныеДаты)
    КонецЦикла;
    
КонецПроцедуры // СоздатьЗаписьОсновногоДерева

// Процедура добавляет новую запись в дерево значений
//
Процедура ДобавитьСтрокуДерева(ТипСтроки, КорневаяСтрока, ИмяДерева, ИмяПоляПользователь = "Пользователь")
      // Если у пользователя нет права на редактирование данных
   // этой ветки - добавление в нее невозможно.
   Если Не КорневаяСтрока.ПравоНаИзменение Тогда
      Сообщить("У Вас нет права редактирования данных организации " + КорневаяСтрока.ОрганизацияПользователь, СтатусСообщения.Важное);
      
      Возврат;
   КонецЕсли;
   
   Если ТипСтроки = 2 Тогда
       ФормаВыбора = Справочники.ГруппыПользователей.ПолучитьФормуВыбора();
	   ФормаВыбора.Отбор.Ссылка.Установить(Справочники.ГруппыПользователей.ВсеПользователи);
       ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;     	   
   Иначе    
       ФормаВыбора = Справочники.Пользователи.ПолучитьФормуВыбора();       
	КонецЕсли;    
    
    ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
    
    ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
    
    Если ВыбранноеЗначение = Неопределено Тогда
        Возврат;
    КонецЕсли;    
    
    СуществующаяСтрока = КорневаяСтрока.Строки.Найти(ВыбранноеЗначение);
    Если Не  СуществующаяСтрока = Неопределено Тогда     
        ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СуществующаяСтрока;
        
        Возврат;
    КонецЕсли;  
    
    СтрокаПользователя = КорневаяСтрока.Строки.Добавить();
    
    СтрокаПользователя[ИмяПоляПользователь] = ВыбранноеЗначение;
    СтрокаПользователя.Граница              = КорневаяСтрока.Граница;
    СтрокаПользователя.ТипСтроки            = ТипСтроки;		
    СтрокаПользователя.ПравоНаИзменение     = Истина;
    
    КорневаяСтрока.Строки.Сортировать("ТипСтроки, " + ИмяПоляПользователь);
    
    ЭлементыФормы[ИмяДерева].ТекущаяСтрока = СтрокаПользователя;
КонецПроцедуры // ДобавитьСтрокуДерева

// Процедура выполняет сохранение данных деревьев значений формы
// в регистр сведений "ГраницыЗапретаИзмененияДанных"
//
Процедура СохранитьДанные()
	
	//ВЦ+
	Если Найти("ВЦ, Ткаченко", ИмяПользователя()) = 0 Тогда
	
		Сообщить("Пользователю запрещено изменять Дату запрета редактирования !!!");
		Возврат;
	
	КонецЕсли; 
	//ВЦ-
	
	ОсновныеДаты = Новый Соответствие;
	// запись основного дерева дат	
	Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
    
	СоздатьЗаписьОсновногоДерева(ДеревоОсновнойДаты.Строки, Набор, ОсновныеДаты);    
    
	Набор.Записать();
	
	// запись дерева регл. дат
    Запрос = Новый Запрос;
    Запрос.Текст  = "ВЫБРАТЬ //РАЗРЕШЕННЫЕ
    |	Организации.Ссылка КАК Организация
    |ИЗ
    |	Справочник.Организации КАК Организации";
    
    Если Не РольДоступна("ПолныеПрава") Тогда
        Запрос.Текст = Запрос.Текст + "
        |ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК ПраваДоступаПользователей			
        |        ПО Организации.Ссылка = ПраваДоступаПользователей.ОбъектДоступа
        |            И Организации.Ссылка = ПраваДоступаПользователей.ВладелецПравДоступа
        |            И (ПраваДоступаПользователей.ВидОбъектаДоступа = Значение(Перечисление.ВидыОбъектовДоступа.Организации))
        |            И (ПраваДоступаПользователей.Пользователь В 
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Справочник.ГруппыПользователей.ПользователиГруппы.Ссылка
		|				 ИЗ
		|					Справочник.ГруппыПользователей.ПользователиГруппы
		|				 ГДЕ
		|					Справочник.ГруппыПользователей.ПользователиГруппы.Пользователь = &ТекущийПользователь))
        |	         И (ПраваДоступаПользователей.Запись = ИСТИНА)";
        
        Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
        
    КонецЕсли;						
    
    Выборка = Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл		
        
        Набор = РегистрыСведений.ГраницыЗапретаИзмененияДанных.СоздатьНаборЗаписей();
        Набор.Отбор.Организация.Установить(Выборка.Организация);
        
        СтрокаВДереве = ДеревоРеглДаты.Строки.Найти(Выборка.Организация, "ОрганизацияПользователь");
        
        Запись = Набор.Добавить();
        Запись.Организация = Выборка.Организация;
        Запись.Пользователь = Неопределено;
        
        Если СтрокаВДереве = Неопределено Тогда
            Запись.ГраницаЗапретаИзменений = Дата('00010101');
        Иначе
            Запись.ГраницаЗапретаИзменений = СтрокаВДереве.Граница;
            Для Каждого СтрокаПользователи ИЗ СтрокаВДереве.Строки Цикл       
                Запись                          = Набор.Добавить();                
                Запись.Организация              = Выборка.Организация;
                Запись.Пользователь             = СтрокаПользователи.ОрганизацияПользователь;
                Запись.ГраницаЗапретаИзменений  = СтрокаПользователи.Граница;
            КонецЦикла;
        КонецЕсли;			
        
        Набор.Записать();
        
    КонецЦикла;
    ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
    Модифицированность = Ложь;
	Если НЕ ОбщегоНазначения.ОпределитьТекущийРежимРаботыМонопольный() Тогда
		Предупреждение("Для других пользователей новое значение даты запрета изменения данных 
						|вступит в силу после перезапуска их сеанса работы с программой.");
	КонецЕсли;
					
КонецПроцедуры // СохранитьДанные

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" основной формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ЗаполнитьОсновноеДерево();
	ЗаполнитьРеглДерево();
КонецПроцедуры

// Процедура - обработчик событя "ПередЗакрытием" основной формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьДанные();
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

  ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ ПАНЕЛИ "Основная дата"

// Процедура - обработчик события "ПриВыводеСтроки"
// табличного поля "ДеревоОсновнойДаты"
//
Процедура ДеревоОсновнойДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ТипСтроки  = 1 Тогда
		ОформлениеСтроки.Ячейки.Пользователь.УстановитьТекст("Общая дата");
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;		
	Если ОформлениеСтроки.ДанныеСтроки.ТипСтроки  = 2 Тогда
		ОформлениеСтроки.Ячейки.Пользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическиеЛица);
		ОформлениеСтроки.Ячейки.Пользователь.Шрифт = Новый Шрифт(,,Истина);
	Иначе
		ОформлениеСтроки.Ячейки.Пользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическоеЛицо);        
	КонецЕсли;	
КонецПроцедуры // ДеревоОсновнойДатыПриВыводеСтроки

// Процедура - обработчик события "ПриИзменении"
// табличного поля "ДеревоОсновнойДатыПриВыводеСтроки"
Процедура ДеревоОсновнойДатыГраницаПриИзменении(Элемент)
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоОсновнойДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.Граница = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ ПАНЕЛИ "Ограничение регламентной информации"


// Процедура - обработчик событи "ПриИзменении"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыГраницаПриИзменении(Элемент)
	Для каждого ПодчиненнаяСтрока ИЗ ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока.Строки Цикл
		ПодчиненнаяСтрока.Граница = Элемент.Значение;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры
 
// Процедура - обработчик события "ПередУдалением"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПередУдалением(Элемент, Отказ)
	Если Элемент.ТекущаяСтрока.Уровень()>0 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)   	
		
	ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ОтображатьКартинку = Истина;
	
	Если НЕ ДанныеСтроки.ПравоНаИзменение Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
    Если ДанныеСтроки.ТипСтроки = 1 Тогда
        // Организация
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);		
    Иначе
        // Группы пользователя
		Если ДанныеСтроки.ТипСтроки  = 2 Тогда
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическиеЛица);
            ОформлениеСтроки.Ячейки.ОрганизацияПользователь.Шрифт = Новый Шрифт(,,Истина);
        Иначе
            // Пользователь
            ОформлениеСтроки.Ячейки.ОрганизацияПользователь.УстановитьКартинку(БиблиотекаКартинок.ФизическоеЛицо);			
		КонецЕсли;
    КонецЕсли;

КонецПроцедуры

// Процедура - орбработчик события "ПриПолученииДанных"
// табличного поля "ДеревоРеглДаты"
Процедура ДеревоРеглДатыПриПолученииДанных(Элемент, ОформленияСтрок)	
	Для Каждого ОформлениеСтроки ИЗ ОформленияСтрок Цикл		
		ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ОтображатьКартинку = Истина;		
		Если ОформлениеСтроки.ДанныеСтроки.Уровень() = 0 Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ИндексКартинки = 1;
		Иначе
			ОформлениеСтроки.Ячейки.ОрганизацияПользователь.ИндексКартинки = 0;
		КонецЕсли;		
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Запись данных в соотв. регистр сведений
Процедура КнопкаВыполнитьНажатие(Элемент)
	СохранитьДанные();
КонецПроцедуры

// Добавление в табличное поле "ДеревоОсновнойДаты" новой записи
// по группе пользователей
Процедура КоманднаяПанельДереваОсновнойДатыДобавитьГруппуПользователей(Кнопка)
	ДобавитьСтрокуДерева(2, ДеревоОсновнойДаты.Строки[0], "ДеревоОсновнойДаты");    
КонецПроцедуры

// Добавление в табличное поле "ДеревоОсновнойДаты" новой записи
// по пользователю
Процедура КоманднаяПанельДереваОсновнойДатыДобавитьПользователя(Кнопка)
	ДобавитьСтрокуДерева(3, ДеревоОсновнойДаты.Строки[0], "ДеревоОсновнойДаты");
КонецПроцедуры

// Удаление строки из табличного поля "ДеревоОсновнойДаты"
// В ДеревеОсновнойДаты запрещено удаление корневой строки "ОбщаяДата"
Процедура КоманднаяПанельДереваОсновнойДатыУдалитьСтроку(Кнопка)
   	ТекущаяСтрока = ЭлементыФормы.ДеревоОсновнойДаты.ТекущаяСтрока;    
	Если ТекущаяСтрока = Неопределено тогда
		Возврат;
    КонецЕсли;	    
    
    Если ТекущаяСтрока.Уровень() = 0 Тогда
        Сообщить("Удаление общей даты запрета невозможно. Вы можете удалить пользователя или группу пользователей.", СтатусСообщения.Важное);
        
        Возврат;        
    КонецЕсли;
    
	ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
КонецПроцедуры // КоманднаяПанельДереваОсновнойДатыУдалитьСтроку

// Добавление в табличное поле "ДеревоРеглДаты" новой записи
// по группе пользователей
Процедура КоманднаяПанельДереваРеглДатыДобавитьГруппуПользователей(Кнопка)
	КорневаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;
	Если КорневаяСтрока = Неопределено Тогда
		// если в табличном поле не выбрана строка
		// добавление в дерево невозможно
		Возврат;
	КонецЕсли;
	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
		// Если выбрана строка на уровне пользователя или группы пользователей
		// новую строку добавляем в ту же ветку дерева
		КорневаяСтрока = КорневаяСтрока.Родитель;
	КонецЕсли;    
		
	ДобавитьСтрокуДерева(2, КорневаяСтрока, "ДеревоРеглДаты", "ОрганизацияПользователь");
	
КонецПроцедуры

// Добавление в табличное поле "ДеревоРеглДаты" новой записи
// по пользователю
Процедура КоманднаяПанельДереваРеглДатыДобавитьПользователя(Кнопка)
	КорневаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;
	Если КорневаяСтрока = Неопределено Тогда
		// если в табличном поле не выбрана строка
		// добавление в дерево невозможно
		Возврат;
	КонецЕсли;
	Если НЕ КорневаяСтрока.ТипСтроки = 1 Тогда
		// Если выбрана строка на уровне пользователя или группы пользователей
		// новую строку добавляем в ту же ветку дерева
		КорневаяСтрока = КорневаяСтрока.Родитель;
	КонецЕсли;    
	
	ДобавитьСтрокуДерева(3, КорневаяСтрока, "ДеревоРеглДаты" , "ОрганизацияПользователь");
	
КонецПроцедуры

// Процедура - обработчик события нажатия на кнопку "Удалить строку"
// командной панели КоманднаяПанельДереваРеглДаты
//
Процедура КоманднаяПанельДереваРеглДатыУдалитьСтроку(Кнопка)
    ТекущаяСтрока = ЭлементыФормы.ДеревоРеглДаты.ТекущаяСтрока;    
    
	Если ТекущаяСтрока = Неопределено тогда
		Возврат;
    КонецЕсли;	
    
    Если ТекущаяСтрока.Уровень() = 0 Тогда
        Сообщить("Удаление организации невозможно. Вы можете удалить пользователя или группу пользователей.", СтатусСообщения.Важное);
        
        Возврат;        
    КонецЕсли;
    
    Если НЕ ТекущаяСтрока.ПравоНаИзменение тогда
        СтрокаОрганизации = ?(ТекущаяСтрока.Уровень() = 0, ТекущаяСтрока, ТекущаяСтрока.Родитель);
        Сообщить("У Вас нет права на удаление данных по организации " + СтрокаОрганизации.ОрганизацияПользователь, СтатусСообщения.Важное);
        
        Возврат;
    КонецЕсли;	                           
       
	ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);

КонецПроцедуры // КоманднаяПанельДереваРеглДатыУдалитьСтроку

ДеревоРеглДаты.Колонки.Добавить("ПравоНаИзменение");
ДеревоРеглДаты.Колонки.Добавить("ТипСтроки");

ДеревоОсновнойДаты.Колонки.Добавить("ПравоНаИзменение");
ДеревоОсновнойДаты.Колонки.Добавить("ТипСтроки");