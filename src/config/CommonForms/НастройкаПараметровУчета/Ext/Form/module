////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

Перем мИсходноеЗначениеХранитьФайлыВТомахНаДиске;
Перем мИсходноеЗначениеИспользоватьЭлектронныеЦифровыеПодписи;
Перем мРегламентноеЗаданиеОтправкаОформленныхЭД;
Перем мРегламентноеЗаданиеПолучениеНовыхЭД;
Перем мРегламентноеЗаданиеНаличиеНовыхЭД;
Перем мРегламентноеЗаданиеОбработкаОтветовЕГАИС;
Перем мРегламентноеЗаданиеОтправкаЭлектронныхЧеков;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция преобразовывает таблицу значений в хранилище значения
//
// Параметры
//  Шаблоны – таблица значений
//
// Возвращаемое значение:
//   Хранилище значений
//
Функция ПолучитьШаблоныНомеров(Шаблоны)

	ТаблицаСоответствий = Новый Соответствие;

	Для каждого СтрокаШаблонов Из Шаблоны Цикл

		Если ПустаяСтрока(СтрокаШаблонов.ШаблоныТелефонныхНомеров) Тогда
			Продолжить;
		КонецЕсли;

		ТаблицаСоответствий.Вставить(СтрЧислоВхождений(СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров),"9"),СокрЛП(СтрокаШаблонов.ШаблоныТелефонныхНомеров));

	КонецЦикла;

	Возврат Новый ХранилищеЗначения(ТаблицаСоответствий);

КонецФункции // ПолучитьШаблоныНомеров()

// Процедура преобразовывает хранилище значений в таблицу значений 
//
// Параметры
//  Шаблоны – хранилище значений
//
// Возвращаемое значение:
//   НЕТ
//
Процедура ПолучитьТаблицуШаблоновТелефонов(Шаблоны)

	Если ТипЗнч(Шаблоны) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;

	СтруктураШаблонов = Шаблоны.Получить();

	ШаблоныТелефонов.Очистить();

	Если ТипЗнч(СтруктураШаблонов) = Тип("Соответствие") Тогда

		Для Индекс = 1 По 50 Цикл //думаю, больше 50-ти значных номеров не может быть

			НайденныйШаблон = СтруктураШаблонов.Получить(Индекс);

			Если НайденныйШаблон <> Неопределено Тогда

				СтрокаШаблонов = ШаблоныТелефонов.Добавить();
				СтрокаШаблонов.ШаблоныТелефонныхНомеров = НайденныйШаблон;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура проверяет возможность редактирования валюты
// регламентированного учета
//
Процедура ПроверкаДоступностиВалютыУчета();

	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаРегламентированногоУчета)
		 ИЛИ НЕ ПравоДоступа("Изменение", Метаданные.Константы.ВалютаУправленческогоУчета)
		 Тогда
		// Если нет прав на изменение хотя бы одной константы - закрываем доступ на все
		ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = Истина;
		ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = Истина;
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	Для каждого Док из Метаданные.Документы Цикл
		Если Док.Имя = "УстановкаСоответствияСчетовБУиНУ" или Док.Имя = "УстановкаСоответствияСчетовБУиМСФО" Тогда
			Продолжить;
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "","", "ОБЪЕДИНИТЬ ВСЕ") + "
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ" + Док.Имя + ".Ссылка
		|ИЗ
		|	Документ." + Док.Имя + " КАК " + "Документ" + Док.Имя + "
		|";

	КонецЦикла;

	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьДокументы = НЕ РезультатЗапроса.Пустой();
	Исключение
		ЕстьДокументы = Истина;
	КонецПопытки;

	ЭлементыФормы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;
	ЭлементыФормы.ВалютаУправленческогоУчета.ТолькоПросмотр     = ЕстьДокументы;

	Если ЕстьДокументы Тогда
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = "После ввода документов валюты учета изменять нельзя.";
	Иначе
		ЭлементыФормы.ТекстВажнойНадписи.Заголовок = "Валюты учета можно изменять пока не введены документы.";
	КонецЕсли;

КонецПроцедуры // ПроверкаДоступностиВалютыУчета()

// Определяет возможность установить значение константы СписыватьПартииРасходнымОрдером = Ложь
// От значения константы зависит каким образом будет осуществляться списание партий товаров по ордерной схеме
// 
Функция МожноОтключитьСписыватьПартииРасходнымОрдером()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТоварыТовары.СерияУказываетсяПриОтпускеСоСклада,
	|	РасходныйОрдерНаТоварыТовары.Ссылка,
	|	РасходныйОрдерНаТоварыТовары.СерияНоменклатуры
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО РасходныйОрдерНаТоварыТовары.Ссылка = СписанныеТовары.Регистратор
	|			И (РасходныйОрдерНаТоварыТовары.СерияУказываетсяПриОтпускеСоСклада)
	|			И (РасходныйОрдерНаТоварыТовары.СерияНоменклатуры <> &ПустаяСерия)";
	
	Запрос.УстановитьПараметр("ПустаяСерия",Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Возврат Запрос.Выполнить().Пустой();

КонецФункции // МожноОтключитьСписыватьПартииРасходнымОрдером()

Процедура УстановитьДоступностьПараметровНДС()
	
	ЭлементыФормы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Видимость = УказыватьСокращенноеНаименование;
	ЭлементыФормы.НадписьПрименяетсяС1.Видимость               								= ЭлементыФормы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Видимость;
	
	ЭлементыФормы.НачалоПримененияИсправленныхСчетовФактур.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур);
	ЭлементыФормы.ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС.Доступность = ПересчитыватьНДСпоСтавке;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНДС()
	УказыватьСокращенноеНаименование = ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре <> '00010101';
	ПересчитыватьНДСпоСтавке = ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС <> '00010101';
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
// 
Процедура ПриОткрытии()

	ПолучитьТаблицуШаблоновТелефонов(КонстантыНабор.ШаблоныТелефонныхНомеров);

	ПроверкаДоступностиВалютыУчета();
    ЗаполнитьДанныеНДС();
	УстановитьДоступностьПараметровНДС();
	
	ЗаполнитьИсходныеЗначенияКонстант();
	ИспользоватьАвтоматическоеПолучениеЭД = мРегламентноеЗаданиеПолучениеНовыхЭД.Использование;
	ИспользоватьАвтоматическуюОтправкуЭД  = мРегламентноеЗаданиеОтправкаОформленныхЭД.Использование;
	ПроверятьНаличиеНовыхЭД				  = мРегламентноеЗаданиеНаличиеНовыхЭД.Использование;
	ИспользоватьАвтоОбработкуОтветовЕГАИС = мРегламентноеЗаданиеОбработкаОтветовЕГАИС.Использование;

	УстановитьТекстРасписанияРегламентногоЗадания(мРегламентноеЗаданиеПолучениеНовыхЭД, ЭлементыФормы.ГиперссылкаРасписаниеАвтоматическогоПолученияЭД);
	УстановитьТекстРасписанияРегламентногоЗадания(мРегламентноеЗаданиеОтправкаОформленныхЭД, ЭлементыФормы.ГиперссылкаРасписаниеАвтоматическойОтправкиЭД);
	УстановитьТекстРасписанияРегламентногоЗадания(мРегламентноеЗаданиеНаличиеНовыхЭД, ЭлементыФормы.ГиперссылкаРасписаниеПроверкиНаличияНовыхЭД);
	УстановитьТекстРасписанияРегламентногоЗадания(мРегламентноеЗаданиеОбработкаОтветовЕГАИС, ЭлементыФормы.НадписьРасписаниеЗапускаОбработкиОтветовЕГАИС);
	УстановитьТекстРасписанияРегламентногоЗадания(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков, ЭлементыФормы.РасписаниеОтправкиЧеков);
	ЭлементыФормы.РасписаниеОтправкиЧеков.Заголовок = "Расписание: " + 
		?(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Использование, СокрЛП(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Расписание), "Не задано");
	
	УстановитьДоступностьНастроекЭлектронныхДокументов();
	УстановитьДоступностьНастроекУчетаАлкоголя();
	УстановитьДоступностьНастроекОтправкиЧеков();

	ЭтаИнформационнаяБазаФайловая = ОпределитьЭтаИнформационнаяБазаФайловая();
	ЭлементыФормы.РамкаГруппыСинхронизацияВремени.Видимость       = Не ЭтаИнформационнаяБазаФайловая;
	ЭлементыФормы.ПроверятьРазницуВоВремениССервером.Видимость    = Не ЭтаИнформационнаяБазаФайловая;
	ЭлементыФормы.ЕдинаяНумерацияВсехВыданныхСчетовФактур.Заголовок = УчетНДС.ПредставлениеНумерацииСчетовФактурНаАванс(ЭлементыФормы.ЕдинаяНумерацияВсехВыданныхСчетовФактур.ВыбираемоеЗначение);
	ЭлементыФормы.ОтдельнаяНумерацияСчетовФактурНаАвансСПрефиксомА.Заголовок = УчетНДС.ПредставлениеНумерацииСчетовФактурНаАванс(ЭлементыФормы.ОтдельнаяНумерацияСчетовФактурНаАвансСПрефиксомА.ВыбираемоеЗначение);

	Этаформа.Модифицированность = Ложь;

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
// 
Процедура ПриЗаписи(Отказ)

	ПроверитьПодключениеОбработчикаОжидания();
	ИнтеграцияЕГАИСПереопределяемый.УстановитьВидимостьИнтерфейсаЕГАИС();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
// 
Процедура ПередЗаписью(Отказ)
	
	КонстантыНабор.ШаблоныТелефонныхНомеров = ПолучитьШаблоныНомеров(ШаблоныТелефонов);
	КонстантыНабор.ШаблоныТелефонныхНомеров = ПолучитьШаблоныНомеров(ШаблоныТелефонов);
	Ошибки                                  = "";

	Если НЕ ЗначениеЗаполнено(КонстантыНабор.ПрефиксШтучногоТовара) Тогда
		Ошибки = " - Не заполнено значение префикса штрихкода штучного товара."
	Иначе
		Код = КодСимвола(КонстантыНабор.ПрефиксШтучногоТовара);
		Если (Код < 48) Или (Код > 57) Тогда
			Ошибки = " - Значение префикса штрихкода штучного товара может принимать значения от 0 до 9";
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КонстантыНабор.ПрефиксВесовогоТовара) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
		                    "",
		                    "
		                    |")
		                + " - Не заполнено значение префикса штрихкода весового товара."
	Иначе
		Код = КодСимвола(КонстантыНабор.ПрефиксВесовогоТовара);
		Если (Код < 48) Или (Код > 57) Тогда
			Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
			                    "",
			                    "
			                    |")
			                + " - Значение префикса штрихкода весового товара может принимать значения от 0 до 9.";
		ИначеЕсли КонстантыНабор.ПрефиксШтучногоТовара = КонстантыНабор.ПрефиксВесовогоТовара Тогда
			Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
			                    "",
			                    "
			                    |")
			                + " - Значение префикса штрихкода весового товара не должно совпадать со значением префикса штрихкода штучного товара.";
		КонецЕсли;
	КонецЕсли;

	Если (КонстантыНабор.ДлинаКодаВесовогоТовара < 1) Или (КонстантыНабор.ДлинаКодаВесовогоТовара > 9) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
		                    "",
		                    "
		                    |")
		                + " - Значение длины кода весового товара может принимать значения от 1 до 9.";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(КонстантыНабор.ПорядокПрисвоенияPLU) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
		                    "",
		                    "
		                    |")
		                + " - Не задан порядок назначения кодов товара для выгрузки в ККМ в режиме Offline.";
	КонецЕсли;

	ИмяСтраницы = "КодыТовара";
	
	Если НЕ СписыватьПартииРасходнымОрдером И НЕ МожноОтключитьСписыватьПартииРасходнымОрдером() тогда

		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
		                    "",
		                    "
		                    |")
		                + " - Есть проведенные документы ""Расходный ордер на товары"", в которых серия указана 
							|при отпуске со склада. Нельзя записать значение константы ""Списывать партии 
							|расходным ордером"" = ""Ложь"".";
		ИмяСтраницы = "Общие";
							
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур) Тогда
		Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
		                    "",
		                    "
		                    |")
		                + " - Не указана дата, с которой учет НДС ведется в соответствии с Постановлением Правительства РФ от 26 декабря 2011 г. № 1137
							|""О формах и правилах заполнения (ведения) документов, применяемых при расчетах по налогу на добавленную стоимость""";
		
		ИмяСтраницы = "НДС";
	КонецЕсли;
	
	Если ПустаяСтрока(Ошибки) Тогда
		Если Не РаботаСТорговымОборудованием.КорректныйПорядокНазначенияPLU(КонстантыНабор.ПорядокПрисвоенияPLU) Тогда
			Ответ = Вопрос("ВНИМАНИЕ!
			               |Порядок назначения кодов по коду номенклатуры конфликтует с
			               |уже назначенными кодами товаров для выгрузки в ККМ в режиме Offline.
			               |Товары с неуникальными кодами не попадут в список выгрузки.
			               |Установить порядок назначения кодов по коду номенклатуры?",
			               РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				ЭлементыФормы.ПанельНастройкиУчета.ТекущаяСтраница =
					ЭлементыФормы.ПанельНастройкиУчета.Страницы.КодыТовара;
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если КонстантыНабор.ПрефиксУзлаРаспределеннойИнформационнойБазы <> Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить() Тогда
			Сообщить("Для корректной работы механизма назначения префиксов этой информационной базы 
				|необходимо завершить работу всех пользователей и перезапустить текущий сеанс 1С:Предприятия");	
		КонецЕсли;
	
	Иначе
		Ошибки = "Были обнаружены следующие ошибки:
		         |" + Ошибки;
		Предупреждение(Ошибки);
		ЭлементыФормы.ПанельНастройкиУчета.ТекущаяСтраница =
			ЭлементыФормы.ПанельНастройкиУчета.Страницы[ИмяСтраницы];
		Отказ = Истина;
	КонецЕсли;

	мРегламентноеЗаданиеОтправкаОформленныхЭД.Использование = ИспользоватьАвтоматическуюОтправкуЭД;
	мРегламентноеЗаданиеПолучениеНовыхЭД.Использование      = ИспользоватьАвтоматическоеПолучениеЭД;
	Попытка
		мРегламентноеЗаданиеОтправкаОформленныхЭД.Записать();
		мРегламентноеЗаданиеПолучениеНовыхЭД.Записать();
	Исключение
		ТекстСообщения = "Произошла ошибка при сохранении настройки автоматической отправки / получения электронных документов.
			|Подробное описание ошибки: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	мРегламентноеЗаданиеНаличиеНовыхЭД.Использование        = ПроверятьНаличиеНовыхЭД;
	Попытка
		мРегламентноеЗаданиеНаличиеНовыхЭД.Записать();
	Исключение
		ТекстСообщения = "Произошла ошибка при сохранении настройки проверки наличия новых электронных документов.
			|Подробное описание ошибки: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	мРегламентноеЗаданиеОбработкаОтветовЕГАИС.Использование = ИспользоватьАвтоОбработкуОтветовЕГАИС;
	Попытка
		мРегламентноеЗаданиеОбработкаОтветовЕГАИС.Записать();
	Исключение
		ТекстСообщения = "Произошла ошибка при сохранении настройки автоматической обработки ответов ЕГАИС.
			|Подробное описание ошибки: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Использование = ОтправкаЭлектронныхЧековПослеПробития И Не ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД;
	Попытка
		мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Записать();
	Исключение
		ТекстСообщения = "Произошла ошибка при сохранении настройки отправки электронных чеков.
			|Подробное описание ошибки: " + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	ЗаполнитьИсходныеЗначенияКонстант();
	Оповестить("НастройкаПараметровУчетаИзменена",, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы "НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытия".
// 
Процедура НастройкаШаблоновБыстрогоВводаКонтрагентаИзСобытияНажатие(Элемент)

	СписокИменКонстант = Новый СписокЗначений;
	СписокИменКонстант.Добавить("ВидАдресаКонтрагента");
	СписокИменКонстант.Добавить("ВидТелефонаКонтактногоЛица");
	СписокИменКонстант.Добавить("ВидТелефонаКонтрагента");
	СписокИменКонстант.Добавить("ВидЭлектроннойПочтыКонтактногоЛица");
	СписокИменКонстант.Добавить("ВидЭлектроннойПочтыКонтрагента");
	СписокИменКонстант.Добавить("ЮрФизЛицо");
	СписокИменКонстант.Добавить("ОсновнойВидДеятельностиКонтрагента");
	
	Запись = РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.СоздатьМенеджерЗаписи();
	
	Обработка = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
	Обработка.Запись = Запись;
	ФормаНастройки = Обработка.ПолучитьФорму();
	ФормаНастройки.ЗаполнитьНачальныеДанные(КонстантыНабор);
	
	ФормаНастройки.ВозможностьРегистрации = Ложь;
	
	ФормаНастройки.ОткрытьМодально();
	
	СтруктураПрочихЗначений = Новый Структура;
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ДанныеНезарегистрированныхКонтрагентов.Ресурсы Цикл
		Если СписокИменКонстант.НайтиПоЗначению(Реквизит.Имя) <> Неопределено Тогда
			КонстантыНабор[Реквизит.Имя] = Запись[Реквизит.Имя];
		Иначе
			СтруктураПрочихЗначений.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;

	ХранилищеПрочихЗначений = Новый ХранилищеЗначения(СтруктураПрочихЗначений);
	КонстантыНабор.ЗначенияПоУмолчаниюДляНовогоКонтрагента = ХранилищеПрочихЗначений;

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Процедура ПрефиксУзлаРаспределеннойИнформационнойБазыПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

Процедура ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуреПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре)
		И УказыватьСокращенноеНаименование Тогда
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = '20090609';
	КонецЕсли;

КонецПроцедуры

Процедура УказыватьСокращенноеНаименование1ПриИзменении(Элемент)

	Если УказыватьСокращенноеНаименование
		И Не ЗначениеЗаполнено(ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре) Тогда
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = '20090609';
	ИначеЕсли Не УказыватьСокращенноеНаименование Тогда
		ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре = '00010101';
	КонецЕсли;

	УстановитьДоступностьПараметровНДС();

КонецПроцедуры

Процедура НачалоПримененияИсправленныхСчетовФактурПриИзменении(Элемент)
	
	Если НачалоПримененияИсправленныхСчетовФактур < '20120101'
		ИЛИ НачалоПримененияИсправленныхСчетовФактур > '20120401' Тогда
		
		НачалоПримененияИсправленныхСчетовФактур = '20120401';
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитыватьНДСпоСтавкеПриИзменении(Элемент)
	
	Если ПересчитыватьНДСпоСтавке 
		И ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС = '00010101' Тогда
		
		ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС = '19800101';
		
	ИначеЕсли (НЕ ПересчитыватьНДСпоСтавке)
		И ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС <> '00010101' Тогда
		
		ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС = '00010101';
		
	КонецЕсли;
	
	УстановитьДоступностьПараметровНДС();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА ЭлектронныеДокументы

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ИспользоватьОбменЭДПриИзменении(Элемент)
	
	Если НЕ ИспользоватьОбменЭД Тогда
		ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов = Ложь;
		ИспользоватьАвтоматическуюОтправкуЭД = Ложь;
		ИспользоватьАвтоматическоеПолучениеЭД = Ложь;
		ПроверятьНаличиеНовыхЭД = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьНастроекЭлектронныхДокументов();
	
КонецПроцедуры

Процедура ИспользоватьЭлектронныеЦифровыеПодписиПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекЭлектронныхДокументов()
	
КонецПроцедуры

Процедура ГиперссылкаНастройкаКриптографииНажатие(Элемент)
	
	Если мИсходноеЗначениеИспользоватьЭлектронныеЦифровыеПодписи <> ИспользоватьЭлектронныеЦифровыеПодписи Тогда
		ТекстВопроса = "Для продолжения необходимо записать настройки. Записать?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, "Настройка криптографии");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			 Возврат;
		КонецЕсли; 
		
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.НастройкаКриптографии", , ЭтаФорма);

КонецПроцедуры

Процедура ХранитьФайлыВТомахНаДискеПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекЭлектронныхДокументов();
	
КонецПроцедуры

Процедура ГиперссылкаТомаХраненияФайловНажатие(Элемент)
	
	Если мИсходноеЗначениеХранитьФайлыВТомахНаДиске <> ХранитьФайлыВТомахНаДиске Тогда
		ТекстВопроса = "Для продолжения необходимо записать настройки. Записать?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,, "Тома хранения файлов");
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			 Возврат;
		КонецЕсли; 
		
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ТомаХраненияФайлов.ФормаСписка",, ЭтаФорма);
	
КонецПроцедуры

Процедура ИспользоватьАвтоматическоеПолучениеЭДПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекЭлектронныхДокументов();
	
КонецПроцедуры

Процедура ГиперссылкаРасписаниеАвтоматическогоПолученияЭДНажатие(Элемент)
	
	РедактироватьРасписаниеРегламентногоЗадания(мРегламентноеЗаданиеПолучениеНовыхЭД, Элемент)
	
КонецПроцедуры

Процедура ИспользоватьАвтоматическуюОтправкуЭДПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекЭлектронныхДокументов();
	
КонецПроцедуры

Процедура ГиперссылкаРасписаниеАвтоматическойОтправкиЭДНажатие(Элемент)
	
	РедактироватьРасписаниеРегламентногоЗадания(мРегламентноеЗаданиеОтправкаОформленныхЭД, Элемент)
	
КонецПроцедуры

Процедура ПроверятьНаличиеНовыхЭДПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекЭлектронныхДокументов();
	
КонецПроцедуры

Процедура ГиперссылкаРасписаниеПроверкиНаличияНовыхЭДНажатие(Элемент)
	
	РедактироватьРасписаниеРегламентногоЗадания(мРегламентноеЗаданиеНаличиеНовыхЭД, Элемент)
	
КонецПроцедуры

Процедура ГиперссылкаПараметрыДоступаВИнтернетНажатие(Элемент)

	ОткрытьФормуМодально("ОбщаяФорма.ПараметрыПроксиСервера");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные

Процедура ЗаполнитьИсходныеЗначенияКонстант()

	мИсходноеЗначениеХранитьФайлыВТомахНаДиске			 	= ХранитьФайлыВТомахНаДиске;
	мИсходноеЗначениеИспользоватьЭлектронныеЦифровыеПодписи	= ИспользоватьЭлектронныеЦифровыеПодписи;

КонецПроцедуры

Процедура УстановитьДоступностьНастроекЭлектронныхДокументов()
	
	ЭлементыФормы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Доступность = ИспользоватьОбменЭД;
	ЭлементыФормы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Доступность = ИспользоватьОбменЭД;
	
	ЭлементыФормы.ИспользоватьАвтоматическоеПолучениеЭД.Доступность = ИспользоватьОбменЭД;
	ЭлементыФормы.ИспользоватьАвтоматическуюОтправкуЭД.Доступность  = ИспользоватьОбменЭД;
	ЭлементыФормы.ПроверятьНаличиеНовыхЭД.Доступность  				= ИспользоватьОбменЭД;
	
	ЭлементыФормы.ГиперссылкаРасписаниеАвтоматическогоПолученияЭД.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
	ЭлементыФормы.ГиперссылкаРасписаниеАвтоматическойОтправкиЭД.Доступность   = ИспользоватьАвтоматическуюОтправкуЭД;
	ЭлементыФормы.ГиперссылкаРасписаниеПроверкиНаличияНовыхЭД.Доступность     = ПроверятьНаличиеНовыхЭД;
	
	ЭлементыФормы.ГиперссылкаТомаХраненияФайлов.Доступность    = ХранитьФайлыВТомахНаДиске;
	ЭлементыФормы.ГиперссылкаНастройкаКриптографии.Доступность = ИспользоватьЭлектронныеЦифровыеПодписи;
	
КонецПроцедуры

Процедура УстановитьТекстРасписанияРегламентногоЗадания(РегламентноеЗадание, ЭлементФормы)
	
	ЭлементФормы.Заголовок = СокрЛП(РегламентноеЗадание.Расписание);
	
КонецПроцедуры

Процедура РедактироватьРасписаниеРегламентногоЗадания(РегламентноеЗадание, Элемент)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РегламентноеЗадание.Расписание);
	
	Если Диалог.ОткрытьМодально() Тогда
		
		РегламентноеЗадание.Расписание = Диалог.Расписание;
		ЭтаФорма.Модифицированность = Истина;
		
	КонецЕсли;
	
	УстановитьТекстРасписанияРегламентногоЗадания(РегламентноеЗадание, Элемент)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА УчетАлкоголя

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий

Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекУчетаАлкоголя();
	Если Не ВестиСведенияДляДекларацийПоАлкогольнойПродукции Тогда
		ИспользоватьАвтоОбработкуОтветовЕГАИС = Ложь;
		ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьНастройкиОбменаЕГАИСНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

Процедура ИспользоватьАвтоОбработкуОтветовЕГАИСПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекУчетаАлкоголя();
	
КонецПроцедуры

Процедура НадписьРасписаниеЗапускаОбработкиОтветовЕГАИСНажатие(Элемент)
	
	РедактироватьРасписаниеРегламентногоЗадания(мРегламентноеЗаданиеОбработкаОтветовЕГАИС, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные
Процедура УстановитьДоступностьНастроекУчетаАлкоголя()
	
	ЭлементыФормы.НадписьНастройкиОбменаЕГАИС.Доступность  					= ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	ЭлементыФормы.ИспользоватьАвтоОбработкуОтветовЕГАИС.Доступность		    = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	ЭлементыФормы.НадписьРасписаниеЗапускаОбработкиОтветовЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции И ИспользоватьАвтоОбработкуОтветовЕГАИС;
	ЭлементыФормы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Доступность    = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	ЭлементыФормы.ДатаНачалаПримененияПриказа164.Доступность    			= ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	ЭлементыФормы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Доступность  = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАЗДЕЛА РозничныеПродажи
Процедура УстановитьДоступностьНастроекОтправкиЧеков()
	
	ЭлементыФормы.СпособОтправкиЗаголовок.Доступность = ОтправкаЭлектронныхЧековПослеПробития;
	ЭлементыФормы.ЧерезОператора.Доступность = ОтправкаЭлектронныхЧековПослеПробития;
	ЭлементыФормы.СредствамиКонфигурации.Доступность = ОтправкаЭлектронныхЧековПослеПробития;
	Элементыформы.НеПечататьФискальныйЧекПриОтправкеЭлектронного.Доступность = ОтправкаЭлектронныхЧековПослеПробития;
	ЭлементыФормы.ПояснениеНеПечататьФискальныйЧекПриОтправкеЭлектронного.Доступность = ОтправкаЭлектронныхЧековПослеПробития;
	ЭлементыФормы.РасписаниеОтправкиЧеков.Доступность = ОтправкаЭлектронныхЧековПослеПробития И Не ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД;
	ЭлементыФормы.ЭлектронныеЧекиККМ.Доступность = ОтправкаЭлектронныхЧековПослеПробития И Не ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД;
	ЭлементыФормы.ПояснениеСистемнаяУчетнаяЗаписьЭП.Доступность = ОтправкаЭлектронныхЧековПослеПробития И Не ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД;
	мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Использование = ОтправкаЭлектронныхЧековПослеПробития И Не ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД;
	ЭлементыФормы.РасписаниеОтправкиЧеков.Заголовок = "Расписание: " + 
		?(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Использование, СокрЛП(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Расписание), "Не задано");
	
КонецПроцедуры

Процедура ОтправкаЭлектронныхЧековПослеПробитияЧекаПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекОтправкиЧеков();
	
КонецПроцедуры

Процедура ЧерезОператораПриИзменении(Элемент)
	
	УстановитьДоступностьНастроекОтправкиЧеков();
	
КонецПроцедуры

Процедура РасписаниеОтправкиЧековНажатие(Элемент)
	
	РедактироватьРасписаниеРегламентногоЗадания(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков, Элемент);
	ЭлементыФормы.РасписаниеОтправкиЧеков.Заголовок = "Расписание: " + 
		?(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Использование, СокрЛП(мРегламентноеЗаданиеОтправкаЭлектронныхЧеков.Расписание), "Не задано");
	
КонецПроцедуры

Процедура ЭлектронныеЧекиККМНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.ЭлектронныеЧекиККМ.ФормаСписка");
	
КонецПроцедуры

Процедура ПояснениеСистемнаяУчетнаяЗаписьЭПНажатие(Элемент)
	
	СУЗ = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты.ПолучитьОбъект();
	СУЗ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мРегламентноеЗаданиеОтправкаОформленныхЭД 	 = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОтправкаОформленныхЭД); 
мРегламентноеЗаданиеПолучениеНовыхЭД 		 = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ПолучениеНовыхЭД);
мРегламентноеЗаданиеНаличиеНовыхЭД   		 = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.НаличиеНовыхЭД);
мРегламентноеЗаданиеОбработкаОтветовЕГАИС    = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС);
мРегламентноеЗаданиеОтправкаЭлектронныхЧеков = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхЧеков);
