
Перем Объект, ИмяКолонкиКода, ИмяКолонкиКлюча;

Процедура ПриОткрытии()
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	ОпределитьСлужебныеПеременные();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего события, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
	
КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт
	
	Результат = Ложь;
	
	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБРАБОТЧИКИ СОБЫТЙ)

// Процедура осуществляет обработку полученного штрихкода
// от сканера штрихкода
//
// Параметры:
//  Штрихкод   - <Строка>
//             - Текстовое представление штрихкода.
//
Процедура СШКОбработатьШтрихкод(Штрихкод) Экспорт
	
	ШтрихкодМарки = Штрихкод;
	
	ПодключитьОбработчикОжидания("ЗакрытьФормуПриСканировании", 0.1, Истина);
	
КонецПроцедуры

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт
	
	Возврат Ложь;
	
КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

// Функция осуществляет обработку сканирования штрихкода номенклатуры
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНоменклатура()

///////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗакрытьФормуПриСканировании()
	
	Если НЕ ШтрихкодСоответствуетШаблону(ШтрихкодМарки) Тогда
		ТекстОшибки = НСтр("ru = 'Штрихкод не соответствует формату.'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ШтрихкодМаркиПрисутствуетВЧеке() Тогда
		ТекстОшибки = НСтр("ru = 'Штрихкод марки уже присутствует в чеке.'");
		ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Закрыть(ШтрихкодМарки);
	
КонецПроцедуры

Функция ШтрихкодСоответствуетШаблону(Штрихкод)

	ТипШтрихкодМарки = ФабрикаXDTO.Тип("egaischeque.joint.2", "BK");
	
	Попытка
		ТипШтрихкодМарки.Проверить(Штрихкод);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

Функция ШтрихкодМаркиПрисутствуетВЧеке()
	
	МассивАкцизныхМарок = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура(ИмяКолонкиКода, ШтрихкодМарки));
	
	Если МассивАкцизныхМарок.Количество() > 0 Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить(ИмяКолонкиКода , ШтрихкодМарки);
		СтруктураПоиска.Вставить(ИмяКолонкиКлюча, КлючСтроки);
		
		МассивАкцизныхМарокПоТекущемуКлючу = Объект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивАкцизныхМарок.Количество() = МассивАкцизныхМарокПоТекущемуКлючу.Количество() Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьСлужебныеПеременные()
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Объект = ВладелецФормы.Объект;
		ИмяКолонкиКода  = "КодАкцизнойМарки";
		ИмяКолонкиКлюча = "КлючСвязи";
	Иначе
		Объект = ВладелецФормы.ДокументОбъект;
		ИмяКолонкиКода  = "ШтрихкодМарки";
		ИмяКолонкиКлюча = "КлючСтроки";
	КонецЕсли;
КонецПроцедуры
