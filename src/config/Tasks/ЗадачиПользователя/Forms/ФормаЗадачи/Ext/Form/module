////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мЧас;
Перем мМинута;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура сохраняет значения переменных мЧас и мМинута
//
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)
	
	мЧас    = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута
//
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;
	
КонецПроцедуры

// Процедура управляет доступностью кнопок формы
//
Процедура УстановитьДоступностьЭлементов()
	
	ЭлементыФормы.Наименование.ТолькоПросмотр = Выполнена ИЛИ ((НЕ Выполнена) И (Инициатор <> ПараметрыСеанса.ТекущийПользователь));
	ЭлементыФормы.Оповещение.Доступность      = НЕ Выполнена;
	ЭлементыФормы.СрокОповещения.Доступность  = Оповещение;
	
КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура управляет надписью заголовка формы
//
Процедура УстановитьЗаголовокФормы()
	
	ЭтаФорма.Заголовок = "Задача от " + Формат(Дата, "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""");
	
КонецПроцедуры // УстановитьЗаголовокФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

// Обработчик начала выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокИсполненияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокИсполнения
//
Процедура СрокИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокИсполненияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СрокИсполненияОбработкаВыбора()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокОповещенияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокОповещения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокОповещенияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // СрокОповещенияОбработкаВыбора()

// Обработчик установки-снятия флага оповещения
//
Процедура ОповещениеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры // ОповещениеПриИзменении()

// Обработчик нажатия кнопки выбора в поле "Объект"
//
Процедура ОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокТипов = Новый СписокЗначений;
	МассивТипов = Элемент.ТипЗначения.Типы();
	
	Для Каждого ТипДокумента Из МассивТипов Цикл
		
		ОбъектСсылка = Новый(ТипДокумента);
		СписокТипов.Добавить(ОбъектСсылка.Метаданные().Синоним);
		
	КонецЦикла;
	
	ЗначениеЭлемента = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);
	
	Если ЗначениеЭлемента = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СписокТипов.Индекс(ЗначениеЭлемента) < 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = Новый (МассивТипов[СписокТипов.Индекс(ЗначениеЭлемента)]);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Обработка события формы ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Если Не Отказ И ЗначениеЗаполнено(БизнесПроцесс) Тогда
		РаботаСБизнесПроцессами.ОткрытьФормуВыполненияЗадачи(Ссылка,Отказ);
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Обработка события формы ПриОткрытии
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		Инициатор   = ПараметрыСеанса.ТекущийПользователь;
		Исполнитель = ПараметрыСеанса.ТекущийПользователь;
		
		ЭлементыФормы.СрокОповещения.Доступность = Оповещение;
		
	Иначе
		
		УстановитьДоступностьЭлементов();
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Обработка события формы ПередЗаписью
//
Процедура ПередЗаписью(Отказ)
	
	ЕстьОшибки = ЛОЖЬ;
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо определить исполнителя задачи в поле ""Исполнитель""!", ЕстьОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Необходимо сформулировать условие задачи!", ЕстьОшибки);
	КонецЕсли;
	
	Отказ = ЕстьОшибки;
	
КонецПроцедуры // ПередЗаписью()

// Обработка события формы ПослеЗаписи
//
Процедура ПослеЗаписи()
	
	УстановитьДоступностьЭлементов();
	УстановитьЗаголовокФормы();
	ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ВыполненаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры
