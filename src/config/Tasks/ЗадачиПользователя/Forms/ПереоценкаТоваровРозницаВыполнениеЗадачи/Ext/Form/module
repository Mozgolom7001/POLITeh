////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем мЧас;
Перем мМинута;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура устанавливает гиперссылку на додкумент "УстановкаЦенНоменклатуры".
//
Процедура УстановитьГиперСсылкуНаДокумент()

	УстановкаЦенНоменклатуры = БизнесПроцесс.УстановкаЦенНоменклатуры;

	ЭлементыФормы.ГиперссылкаУстановкаЦенНоменклатуры.Заголовок = СокрЛП(УстановкаЦенНоменклатуры.Номер) + " от " + УстановкаЦенНоменклатуры.Дата;

КонецПроцедуры // УстановитьГиперСсылкуНаДокумент()

// Процедура сохраняет значения переменных мЧас и мМинута.
//
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)
	
	мЧас    = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута.
//
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОЖЬ;
	
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;
	
КонецПроцедуры // ПередатьДатуВЭлемент()

// Процедура управляет доступностью элементов формы.
//
Процедура УстановитьДоступностьЭлементов()

	ТолькоПросмотр = Выполнена;

КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура управляет надписью заголовка формы.
//
Процедура УстановитьЗаголовокФормы()

	Заголовок = СокрЛП(Наименование) + " от " + Формат(Дата, "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""") + ?(Выполнена, ". Выполнена", ". Не выполнена");

КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура заполняет таблицу значений документами, созданными в процессе выполнения задач.
//
Процедура ОбновитьТаблицуДокументов()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БизнесПроцесс",       БизнесПроцесс);
	Запрос.УстановитьПараметр("ПереоценкаСкладаАТТ", БизнесПроцессы.ПереоценкаТоваровРозница.ТочкиМаршрута.ПереоценкаСкладаАТТ);

	ТочкиВводаДокументов = Новый Массив();
	ТочкиВводаДокументов.Добавить(БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.ПровестиИнвентаризацию);
	ТочкиВводаДокументов.Добавить(БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.УстановитьНовыеЦены);
	Запрос.УстановитьПараметр("ТочкиВводаДокументов", ТочкиВводаДокументов);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиПользователя.Объект) КАК Документ,
	|	ЗадачиПользователя.Объект КАК ДокументСсылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиПользователя.БизнесПроцесс.Склад) КАК Склад,
	|	ЗадачиПользователя.БизнесПроцесс.Склад КАК СкладСсылка,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиПользователя.Объект.Ответственный) КАК Ответственный,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиПользователя.ТочкаМаршрута) КАК ТочкаМаршрута
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.ТочкаМаршрута В(&ТочкиВводаДокументов)
	|	И ЗадачиПользователя.БизнесПроцесс В
	|			(ВЫБРАТЬ
	|				ПереоценкаТоваровАТТ.Ссылка КАК ПереоценкаАТТ
	|			ИЗ
	|				БизнесПроцесс.ПереоценкаТоваровАТТ КАК ПереоценкаТоваровАТТ
	|			ГДЕ
	|				ПереоценкаТоваровАТТ.ВедущаяЗадача.БизнесПроцесс = &БизнесПроцесс
	|				И ПереоценкаТоваровАТТ.ВедущаяЗадача.ТочкаМаршрута = &ПереоценкаСкладаАТТ)
	|	И ЗадачиПользователя.Выполнена = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкладСсылка";

	ТабДокументы = Запрос.Выполнить().Выгрузить();

КонецПроцедуры // ОбновитьТаблицуДокументов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Обработчик нажатия элемента "КартаМаршрута" панели ДействияФормы.
//
Процедура ДействияФормыКартаМаршрута(Кнопка)

	РаботаСБизнесПроцессами.ОткрытьКартумаршрута(БизнесПроцесс);

КонецПроцедуры // ДействияФормыКартаМаршрута

// Обработчик нажатия элемента "ОбновитьСписок" панели "КоманднаяПанельДокументы".
//
Процедура КоманднаяПанельДокументыДействиеОбновитьСписок(Кнопка)

	ОбновитьТаблицуДокументов()

КонецПроцедуры // КоманднаяПанельДокументыДействиеОбновитьСписок()

// Обработчик нажатия элемента "ДвиженияДокументаПоРегистрам" панели "КоманднаяПанельДокументы".
//
Процедура КоманднаяПанельДокументыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭлементыФормы.ТабДокументы.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;

	Документ = ЭлементыФормы.ТабДокументы.ТекущиеДанные.ДокументСсылка;
	Если ЗначениеЗаполнено(Документ) И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ)) Тогда
		РаботаСДиалогами.НапечататьДвиженияДокумента(Документ);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДокументыДвиженияДокументаПоРегистрам()

// Обработчик нажатия элемента "СтруктураПодчиненностиДокумента" панели "КоманднаяПанельДокументы".
//
Процедура КоманднаяПанельДокументыСтруктураПодчиненностиДокумента(Кнопка)

	Если ЭлементыФормы.ТабДокументы.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;

	Документ = ЭлементыФормы.ТабДокументы.ТекущиеДанные.ДокументСсылка;
	Если ЗначениеЗаполнено(Документ) И Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ)) Тогда
		РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Документ);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДокументыСтруктураПодчиненностиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ
//

// Процедура - обработчик нажатия элемента "ГиперссылкаСравнениеЦенАТТиЦенНоменклатуры".
//
Процедура ГиперссылкаСравнениеЦенАТТиЦенНоменклатурыНажатие(Элемент)

	ФормаОтчета = Отчеты.СравнениеЦенАТТиЦенНоменклатуры.ПолучитьФорму();

	Если ЭлементыФормы.ТабДокументы.ТекущиеДанные <> Неопределено Тогда
		ФормаОтчета.ОтчетОбъект.Склад = ЭлементыФормы.ТабДокументы.ТекущиеДанные.СкладСсылка;
	КонецЕсли;

	ФормаОтчета.Открыть();

КонецПроцедуры // ГиперссылкаСравнениеЦенАТТиЦенНоменклатурыНажатие()

// Обработчик нажатия гиперссылки "УстановкаЦенНоменклатуры".
//
Процедура УстановкаЦенНоменклатурыНажатие(Элемент)

	Если ЗначениеЗаполнено(УстановкаЦенНоменклатуры) Тогда
		ОткрытьЗначение(УстановкаЦенНоменклатуры);
	КонецЕсли;

КонецПроцедуры // УстановкаЦенНоменклатурыНажатие()

// Обработчик события ПриПолученииДанных табличного поля "ТабДокументы".
//
Процедура ТабДокументыПриПолученииДанных(Элемент, ОформленияСтрок)

	Для Каждого ОформлениеСтроки из ОформленияСтрок Цикл

		ДокументСсылка = ОформлениеСтроки.ДанныеСтроки.ДокументСсылка;
		Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
			Продолжить;
		КонецЕсли;

		Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
			Продолжить;
		КонецЕсли;

		ОформлениеСтроки.Ячейки.СостояниеДокумента.ОтображатьКартинку = Истина;

		Если ДокументСсылка.ПометкаУдаления Тогда

			ОформлениеСтроки.Ячейки.СостояниеДокумента.ИндексКартинки = 1;
		ИначеЕсли ДокументСсылка.Проведен Тогда

			ОформлениеСтроки.Ячейки.СостояниеДокумента.ИндексКартинки = 0;
		Иначе

			ОформлениеСтроки.Ячейки.СостояниеДокумента.ИндексКартинки = 2;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ТабДокументыПриПолученииДанных()

// Обработчик выбора табличного поля "ТабДокументы".
//
Процедура ТабДокументыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока.ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ВыбраннаяСтрока.ДокументСсылка.ПолучитьФорму().Открыть();
	Исключение
	КонецПопытки;

КонецПроцедуры // ТабДокументыВыбор()

// Обработчик начала выбора значения поля "СрокИсполнения".
//
Процедура СрокИсполненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокИсполненияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля "СрокИсполнения".
//
Процедура СрокИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокИсполненияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры //СрокИсполненияОбработкаВыбора()

// Обработчик выбора значения поля "СрокОповещения".
//
Процедура СрокОповещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры //СрокОповещенияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля "СрокОповещения".
//
Процедура СрокОповещенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокОповещения = ВыбранноеВремя.Значение;
	КонецЕсли;
	
КонецПроцедуры // СрокОповещенияНачалоВыбораИзСписка()

// Обработчик выбора значения поля "СрокОповещения".
//
Процедура СрокОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры //СрокОповещенияОбработкаВыбора()

// Обработчик установки-снятия флага оповещения.
//
Процедура ОповещениеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры // ОповещениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	УстановитьДоступностьЭлементов();

	УстановитьЗаголовокФормы();

	ОбновитьТаблицуДокументов();

	УстановитьГиперСсылкуНаДокумент();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	УстановитьДоступностьЭлементов()
	
КонецПроцедуры // ПослеЗаписи()


