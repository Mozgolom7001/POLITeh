
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура делает доступной кнопку удаления задачи непосредственно создателю задачи
//
Процедура ОбновитьКнопкуВыполнение()
	
	Если ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока <> Неопределено Тогда
		
		ЭлементыФормы.ДействияФормы.Кнопки.Выполнение.Доступность = Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.Выполнение.Доступность = (ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Инициатор = ПараметрыСеанса.ТекущийПользователь) ИЛИ (ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Исполнитель = ПараметрыСеанса.ТекущийПользователь);
		Если ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Выполнена Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Выполнение.Подсказка = "Снять пометку выполнения с текущей задачи";
		Иначе
			ЭлементыФормы.ДействияФормы.Кнопки.Выполнение.Подсказка = "Пометить текущую задачу как выполненную";
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Выполнение.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет отображением списка задач:
// устанавлмивает отбор только активных задач или сбрасывает этот отбор
//
Процедура УстановитьОтборАктивных()
	
	Если ТолькоАктивные Тогда
		
		ЭтаФорма.Отбор.Выполнена.ВидСравнения       = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Выполнена.Использование      = Истина;
		ЭтаФорма.Отбор.Выполнена.Значение           = Ложь;
		
	Иначе
		ЭтаФорма.Отбор.Выполнена.Использование      = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ОтборАктивных.Пометка = ТолькоАктивные;
	
КонецПроцедуры

// Процедура управляет отображением списка задач:
// устанавливает отбор только задач, пставленных текущим пользователем или
// возвращает к отбору по исполнителю-текущему пользователю
//
Процедура УстановитьОтборПоставленных()
	
	Если ТолькоПоставленные Тогда
		
		ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.НеРавно;
		ЭтаФорма.Отбор.Исполнитель.Использование = Истина;
		ЭтаФорма.Отбор.Исполнитель.Значение      = ПараметрыСеанса.ТекущийПользователь;
		
		ЭтаФорма.Отбор.Инициатор.ВидСравнения  = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Инициатор.Использование = Истина;
		ЭтаФорма.Отбор.Инициатор.Значение      = ПараметрыСеанса.ТекущийПользователь;
		
		ЭлементыФормы.ДействияФормы.Кнопки.ОтборПоставленных.Подсказка = "Отобрать задачи по мне как по исполнителю";
		
	Иначе
		
		ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.Равно;
		ЭтаФорма.Отбор.Исполнитель.Использование = Истина;
		ЭтаФорма.Отбор.Исполнитель.Значение      = ПараметрыСеанса.ТекущийПользователь;
		
		ЭтаФорма.Отбор.Инициатор.Использование = Ложь;
		
		ЭлементыФормы.ДействияФормы.Кнопки.ОтборПоставленных.Подсказка = "Отобрать поставленные мной задачи для контроля прочих исполнителей";
		
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ОтборПоставленных.Пометка = ТолькоПоставленные;
	
КонецПроцедуры

// Процедура управляет отображением панели с деталями задачи
//
Процедура ПоказатьСпрятатьПанельДеталей()
	
	Если ПоказатьДетали Тогда
		
		ЭлементыФормы.ДействияФормы.Кнопки.Детали.Подсказка = "Скрыть детализацию по задаче";
		
		ЭлементыФормы.РазделительДеталей.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельДеталей.Свертка      = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельДеталей.Высота = 0 Тогда
			
			ТекущийВерх = ЭлементыФормы.ПанельДеталей.Верх;
			
			ЭлементыФормы.ПанельДеталей.Верх   = ТекущийВерх - 155;
			ЭлементыФормы.ПанельДеталей.Высота = ТекущийВерх - ЭлементыФормы.ПанельДеталей.Верх;
			
		КонецЕсли;
		
		ЭлементыФормы.РазделительДеталей.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельДеталей.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительДеталей, ГраницаЭлементаУправления.Низ);
		
		УстановитьТекстHTMLПоля();
		
	Иначе
		
		ЭлементыФормы.ДействияФормы.Кнопки.Детали.Подсказка = "Отобразить детализацию по задаче";
		
		ЭлементыФормы.ПанельДеталей.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельДеталей, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительДеталей.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельДеталей, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельДеталей.Свертка      = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительДеталей.Свертка = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Детали.Пометка = ПоказатьДетали;
	
КонецПроцедуры

// Функция создает блок текста в HTML-формате.
// Созданный блок представляет собой некие сведения,
// которые озаглавлены строкой текста и могут содержать как строковое описание для чтения,
// так и сведения об объекте, переход к которому будет осуществлен по гиперссылке.
// Набор создаваемых блоков используется для отображения детализации.
//
// Параметры:
//	ЗаголовокБлока - строка с заглавием блока (только строка);
//	Содержимое     - собственно содержимое: текст, либо объект для открытия по гиперссылке;
//	ШрифтФейс      - название шрифта, которым будет отображен блок;
//	ШрифтСайз      - размер шрифта
//
Функция СформироватьHTMLБлок(ЗаголовокБлока, Содержимое, ШрифтФейс = "Verdana", ШрифтСайз = "2")
	
	БлокТекст = "<tr><td><b><font face=" + ШрифтФейс + " size=" + ШрифтСайз + ">" + ЗаголовокБлока + "</font></b></td></tr>";
	
	БлокТекст = БлокТекст + "
		|<table border=""0"">
		|<tr><td>&nbsp;&nbsp;</td>
		|<td><font face=" + ШрифтФейс + " size=" + ШрифтСайз + ">" + ?(ТипЗнч(Содержимое) = Тип("Строка"), СтрЗаменить(Содержимое, Символы.ПС, "<br>"), "<a id=" + ЗначениеВСтрокуВнутр(Содержимое) + " href=about:blank>" + Строка(Содержимое) + "</a>") + "</font></td>
		|<td>&nbsp;</td>
		|</table></div>";
		
	Возврат БлокТекст;
	
КонецФункции

// Процедура собирает необходимый текст в HTML-формате и устанавливает его текстом HTML-поля
//
Процедура УстановитьТекстHTMLПоля()
	
	ТекстПоля = "
	|<HTML>
	|<HEAD>
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|</HEAD>
	|<BODY>";
	
	Если ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока <> Неопределено Тогда
		
		Если ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Оповещение Тогда
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок("Оповещение:", Формат(ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.СрокОповещения, "ДФ=""дддд ',' дд ММММ гггг 'г.' ЧЧ:мм"""));
		КонецЕсли;
		
		Если СтрДлина(ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Описание) > 0 Тогда
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок("Детальное описание:", ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Описание);
		КонецЕсли;
		
		Если ЭтаФорма.Отбор.Инициатор.Использование Тогда
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок("Исполнитель задачи:", ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Исполнитель);
		Иначе
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок("Автор задачи:", ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Инициатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Объект) Тогда
			ТекстПоля = ТекстПоля + СформироватьHTMLБлок("Основание задачи:", ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПоля = ТекстПоля + "</BODY></HTML>";
	
	ЭлементыФормы.ПолеДеталей.УстановитьТекст(ТекстПоля);
	
КонецПроцедуры

// Процедура обновления деталей
//
Процедура ОбновлениеОтображенияДеталей()
	
	Если ПоказатьДетали Тогда
		УстановитьТекстHTMLПоля();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СПИСКА

// Процедура-обработчик добавления новой задачи
//
Процедура ЗадачаСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если НЕ Копирование Тогда
		Отказ = ИСТИНА;
	
		НоваяЗадача = Задачи.ЗадачиПользователя.СоздатьЗадачу();
		Если (ЭтаФорма.Отбор.Объект.Использование = ИСТИНА)
			И (ЭтаФорма.Отбор.Объект.ВидСравнения = ВидСравнения.Равно)
			И (ЭтаФорма.Отбор.Объект.Значение <> Неопределено) Тогда
			НоваяЗадача.Объект = ЭтаФорма.Отбор.Объект.Значение;
		КонецЕсли;
	
		ФормаЗадачи = НоваяЗадача.ПолучитьФорму( , "НоваяЗадача");
		Если ФормаЗадачи.Открыта() Тогда
			ФормаЗадачи.Активизировать();
		Иначе
			ФормаЗадачи.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события ПриАктивизацииСтроки
//
Процедура ЗадачаСписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьКнопкуВыполнение();
	Если ПоказатьДетали Тогда
		УстановитьТекстHTMLПоля();
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события ПриВыводеСтроки
//
Процедура ЗадачаСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СтрокаПоздравления = УправлениеКонтактами.ПолучитьСтрокуУсловияДР();
	
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Ссылка.СрокИсполнения < ТекущаяДата() Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
	Если ДанныеСтроки.Ссылка.Выполнена Тогда
		
		Если ДанныеСтроки.Ссылка.ПамятнаяДата Тогда 
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 7;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 6;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.Ссылка.Оповещение Тогда
		
		Если ДанныеСтроки.Ссылка.СрокОповещения < ТекущаяДата() Тогда
			
			Если ДанныеСтроки.Ссылка.ПамятнаяДата Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСтроки.Ссылка.ПамятнаяДата Тогда
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 5;
			Иначе
				ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 4;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеСтроки.Ссылка.ПамятнаяДата Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 1;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик нажатия кнопки "Выполнение"
//
Процедура ДействияФормыВыполнение(Кнопка)
	
	Если ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока <> Неопределено Тогда
		ТекущаяЗадача = ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока.Ссылка.ПолучитьОбъект();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущаяЗадача.Выполнена Тогда
		// Задачи в рамках бизнес-процессов с выполнения не снимаются.
		Если ЗначениеЗаполнено(ТекущаяЗадача.БизнесПроцесс) Тогда
			Возврат;
		КонецЕсли;

		ТекстВопроса = "Вы уверены, что следует снять пометку выполнения с текущей задачи?";

	Иначе

		ТекстВопроса = "Вы уверены, что текущую задачу следует считать выполненной?";
	КонецЕсли;
		
	Выполнение = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	Если Выполнение = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(ТекущаяЗадача.БизнесПроцесс) Тогда
			Попытка
				ТекущаяЗадача.ВыполнитьЗадачуИнтерактивно();
				
			Исключение
			КонецПопытки;
		Иначе
			ТекущаяЗадача.Выполнена = НЕ ТекущаяЗадача.Выполнена;
			ТекущаяЗадача.Записать();
		КонецЕсли;
		ОбновитьКнопкуВыполнение();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки "ОтборАктивных"
//
Процедура ДействияФормыОтборАктивных(Кнопка)
	
	ТолькоАктивные = НЕ ТолькоАктивные;
	УстановитьОтборАктивных();
	
КонецПроцедуры

// Процедура-обработчик события ПриОткрытии
//
Процедура ПриОткрытии()
	
	ПоказыватьПриЗапуске = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьСписокЗадачПриЗапуске");
	ТолькоАктивные       = Истина;
	ТолькоПоставленные   = Ложь;
	
	УстановитьОтборАктивных();
	УстановитьОтборПоставленных();
	
	ЭлементыФормы.ЗадачаСписок.НастройкаПорядка.Наименование.Доступность = Ложь;
	ЭлементыФормы.ЗадачаСписок.Значение.Порядок.Установить("СрокИсполнения УБЫВ");
	ПоказатьСпрятатьПанельДеталей();
	
КонецПроцедуры

// Процедура-обработчик закрытия формы
//
Процедура ПриЗакрытии()
	
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьСписокЗадачПриЗапуске", ПоказыватьПриЗапуске);
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки "Детали"
//
Процедура ДействияФормыДетали(Кнопка)
	
	ПоказатьДетали = НЕ ПоказатьДетали;
	ПоказатьСпрятатьПанельДеталей();
	
КонецПроцедуры

// Процедура-обработчик события onclick HTML-поля
//
Процедура ПолеДеталейonclick(Элемент, pEvtObj)
	
	Если СтрДлина(pEvtObj.srcElement.id) > 0 Тогда
		
		ОбъектЗадачи = ЗначениеИзСтрокиВнутр(pEvtObj.srcElement.id).ПолучитьОбъект();
		ОбъектЗадачи.ПолучитьФорму().Открыть();
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки ОтборПоставленных
//
Процедура ДействияФормыОтборПоставленных(Кнопка)
	
	ТолькоПоставленные = НЕ ТолькоПоставленные;
	УстановитьОтборПоставленных();
	
КонецПроцедуры

// Процедура-обработчик нажатия кнопки Обновить
//
Процедура ДействияФормыОбновить(Кнопка)
	
	ОбновлениеОтображенияДеталей();
	
КонецПроцедуры

// Процедура-обработчик записи нового объекта в подчиненной форме
//
Процедура ЗадачаСписокОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	ОбновлениеОтображенияДеталей();
	
КонецПроцедуры


