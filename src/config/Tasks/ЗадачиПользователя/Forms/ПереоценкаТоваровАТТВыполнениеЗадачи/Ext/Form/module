////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем мЧас;
Перем мМинута;
Перем мДокументПереоценкаТоваровВРознице;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура устанавливает гиперссылку на документ "УстановкаЦенНоменклатуры".
//
Процедура УстановитьГиперСсылкуНаДокумент()

	УстановкаЦенНоменклатуры = БизнесПроцесс.УстановкаЦенНоменклатуры;
	Склад                    = БизнесПроцесс.Склад;

	ЭлементыФормы.ГиперссылкаУстановкаЦенНоменклатуры.Заголовок = СокрЛП(УстановкаЦенНоменклатуры.Номер) + " от " + УстановкаЦенНоменклатуры.Дата;

КонецПроцедуры // УстановитьГиперСсылкуНаДокумент()

// Процедура создает, заполняет и открывает форму документа в зависимости от точки маршрута.
//
Процедура СоздатьНовыйДокументВТочкеМаршрута()

	Если ЗначениеЗаполнено(Объект) Тогда

		Ответ = Вопрос("Документ уже создан. Ввести новый документ?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.ПровестиИнвентаризацию Тогда

		ДокументОбъект = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.ИнициализироватьНовыйДокумент(Неопределено,Неопределено);
		ДокументОбъект.Склад          = БизнесПроцесс.Склад;
		ДокументОбъект.УчитыватьСерии = Истина;

		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Объект = ДокументОбъект.Ссылка;
		Исключение
		КонецПопытки;
	
		ФормаДокумента = ДокументОбъект.ПолучитьФорму();
		ФормаДокумента.Открыть();

		НастроитьОтборПостроителяОтчетаИнвентаризации(ФормаДокумента.ПостроительОтчета, БизнесПроцесс.УстановкаЦенНоменклатуры, БизнесПроцесс.Склад.ТипЦенРозничнойТорговли);
		ФормаДокумента.ЗаполнитьПоОстаткамНаСкладе(ФормаДокумента.ПостроительОтчета);

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.УстановитьНовыеЦены Тогда

		ДокументОбъект      = Документы.ПереоценкаТоваровВРознице.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.ИнициализироватьНовыйДокумент(Неопределено,Неопределено);
		
		ДокументОбъект.ДокументУстановкаЦен = БизнесПроцесс.УстановкаЦенНоменклатуры;
		ДокументОбъект.Склад                = БизнесПроцесс.Склад;
		ДокументОбъект.ЗаполнитьТовары("ЗаполнитьИзУстановкиЦен");

		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Объект = ДокументОбъект.Ссылка;
		Исключение
		КонецПопытки;

		ДокументОбъект.ПолучитьФорму().Открыть();
	КонецЕсли;

КонецПроцедуры // СоздатьНовыйДокументВТочкеМаршрута()

// Процедура открывает отчет ведомость по товарам в рознице с отбором по складу.
//
Процедура ОткрытьОтчетВедомостьПоТоварамВРознице()

	ФормаОтчета = Отчеты.ВедомостьТоварыВРознице.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ОтборПоСкладу = ФормаОтчета.ОтчетОбъект.УниверсальныйОтчет.ПостроительОтчета.Отбор.Найти("Склад");

	Если ОтборПоСкладу <> Неопределено Тогда
		ОтборПоСкладу.Установить(БизнесПроцесс.Склад);
	КонецЕсли;

КонецПроцедуры // ОткрытьОтчетВедомостьПоТоварамВРознице()

// Функция возвращает документ ПереоценкаТоваровВРознице введенный в точке маршрута.
//
// Параметры:
//  БизнесПроцесс – бизнес-процесс, экземпляр бизнес-процесса.
//  ТочкаМаршрута – точка маршрута бизнес-процесса.
//
// Возвращаемое значение:
//  ДокументСсылка.ПереоценкаТоваровВРознице – созданный в точке маршрута документ.
//
Функция ПолучитьПереоценкуТоваровВРознице(БизнесПроцесс, ТочкаМаршрута)

	Результат = Неопределено;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗадачиПользователя.Объект КАК Документ
	|ИЗ
	|	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	|ГДЕ
	|	ЗадачиПользователя.БизнесПроцесс = &БизнесПроцесс
	|	И ЗадачиПользователя.ТочкаМаршрута = &ТочкаМаршрута
	|	И (НЕ ЗадачиПользователя.Объект = ЗНАЧЕНИЕ(Документ.ПереоценкаТоваровВРознице.ПустаяСсылка))
	|	И ЗадачиПользователя.Объект ССЫЛКА Документ.ПереоценкаТоваровВРознице");

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	Возврат Результат;

КонецФункции // ПолучитьПереоценкуТоваровВРознице()

// Процедура производит печать этикеток и ценников из модуля документа.
//
// Параметры:
//  Макет – строка, имя макета печати.
//
Процедура НапечататьИзДокумента(Макет)

	Если мДокументПереоценкаТоваровВРознице = Неопределено Тогда

		мДокументПереоценкаТоваровВРознице = ПолучитьПереоценкуТоваровВРознице(БизнесПроцесс, БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.УстановитьНовыеЦены);
	КонецЕсли;

	Если мДокументПереоценкаТоваровВРознице <> Неопределено Тогда
		Попытка
			мДокументПереоценкаТоваровВРознице.ПолучитьОбъект().Печать(Макет,1)
		Исключение
		КонецПопытки;
	Иначе
		Сообщить("Печать невозможна! В рамках текущего бизнес-процесса переоценка не выполнялась!");
	КонецЕсли;

КонецПроцедуры // НапечататьИзДокумента()

// Процедура настраивает отбор построителя запросов документа инвентаризация товаров.
//
// Параметры:
//  ПостроительОтчета - построитель отчета.
//  УстановкаЦен      - документ "УстановкаЦенНоменклатуры", источник номенклатуры для отбора.
//  ТипЦен            - справочник "ТипыЦенНоменклатуры", фильтр для отбора номенклатуры.
//
Процедура НастроитьОтборПостроителяОтчетаИнвентаризации(ПостроительОтчета, УстановкаЦен, ТипЦен)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстановкаЦен.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦен
	|ГДЕ
	|	УстановкаЦен.Ссылка = &Ссылка
	|	И УстановкаЦен.ТипЦен = &ТипЦен");

	Запрос.УстановитьПараметр("Ссылка", УстановкаЦен);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);

	СписокТоваров = Новый СписокЗначений();
	СписокТоваров.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Если СписокТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОборНоменклатура = ПостроительОтчета.Отбор.Найти("Номенклатура");
	Если ОборНоменклатура <> Неопределено Тогда

		ОборНоменклатура.ВидСравнения  = ВидСравнения.ВСписке;
		ОборНоменклатура.Значение      = СписокТоваров;
		ОборНоменклатура.Использование = Истина;

	КонецЕсли;

КонецПроцедуры // СформироватьВыборкуТоваровДляИнвентаризации()

// Процедура открывает форму списка документов с отбором.
//
// Параметры:
//  ВидДокумента –строка, вид документа (как он задан в метаданных).
//  Элемент      –элемент формы, владелец открываемой формы.
//
Процедура ОткрытьФормуСпискаДокументовДляВыбора(ВидДокумента, Элемент)

	ФормаДокумента=Документы[ВидДокумента].ПолучитьФормуВыбора(, Элемент);
	ФормаДокумента.ДокументСписок.Отбор.Склад.Установить(БизнесПроцесс.Склад);
	ФормаДокумента.Открыть();

КонецПроцедуры // ОткрытьФормуСпискаДокументов()

// Процедура управляет выбором документа "Инвентаризация".
//
Процедура ОбработатьВыборДокументаИнвентаризация(Элемент)

	ОткрытьФормуСпискаДокументовДляВыбора("ИнвентаризацияТоваровНаСкладе", Элемент);

КонецПроцедуры // ОбработатьВыборДокументаИнвентаризация()

// Процедура управляет выбором документа ПереоценкаТоваровВРознице.
//
// Параметры:
//  Элемент –элемент формы
//
Процедура ОбработатьВыборДокументаПереоценки(Элемент)

	ОткрытьФормуСпискаДокументовДляВыбора("ПереоценкаТоваровВРознице", Элемент);

КонецПроцедуры // ОбработатьВыборДокументаПереоценки()

// Процедура сохраняет значения переменных мЧас и мМинута.
//
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)
	
	мЧас    = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ПрисвоитьЧасМинутуИзЭлемента()

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута.
//
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;
	
КонецПроцедуры // ПередатьДатуВЭлемент()

// Процедура управляет доступностью кнопок формы.
//
Процедура УстановитьДоступностьЭлементов()

	ТолькоПросмотр = Выполнена;

КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура управляет надписью заголовка формы.
//
Процедура УстановитьЗаголовокФормы()

	Заголовок = СокрЛП(Наименование) + " от " + Формат(Дата, "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""") + ?(Выполнена, ". Выполнена", ". Не выполнена");

КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура управляет видимостью страниц панели формы.
//
Процедура УстановитьВидимостьСтраницПанели()

	Если ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.НапечататьЭтикеткиЦенники Тогда

		ЭлементыФормы.ОсновнаПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаПанель.Страницы["ПечатьЭтикеток"];
		ЭлементыФормы.РезультатыВыполнения.Заголовок = "Печать";

	Иначе

		ЭлементыФормы.Объект.АвтоОтметкаНезаполненного = Истина;
		ЭлементыФормы.ОсновнаПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаПанель.Страницы["ВводДокумента"];

	КонецЕсли;

	Если ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.ПровестиИнвентаризацию Тогда

		ЭлементыФормы.РезультатыВыполнения.Заголовок = "Инвентаризация";

	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.УстановитьНовыеЦены Тогда

		ЭлементыФормы.РезультатыВыполнения.Заголовок = "Переоценка";

	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьСтраницПанели()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Обработчик нажатия гиперссылки Склад.
//
Процедура ГиперссылкаСкладНажатие(Элемент)

	Если ЗначениеЗаполнено(Склад) Тогда
		ОткрытьЗначение(Склад);
	КонецЕсли;

КонецПроцедуры // ГиперссылкаСкладНажатие()

// Обработчик нажатия гиперссылки ВедомостьПоТоварамВРознице.
//
Процедура ГиперссылкаВедомостьПоТоварамВРозницеНажатие(Элемент)

	ОткрытьОтчетВедомостьПоТоварамВРознице()

КонецПроцедуры // ГиперссылкаВедомостьПоТоварамВРозницеНажатие()

// Обработчик нажатия гиперссылки ОтчетТорг29.
//
Процедура ГиперссылкаОтчетТорг29Нажатие(Элемент)

	ФормаОтчета = Отчеты.ТоварныйОтчетТОРГ29.ПолучитьФорму();
	ФормаОтчета.Склад = БизнесПроцесс.Склад;
	ФормаОтчета.Открыть();

КонецПроцедуры // ГиперссылкаОтчетТорг29Нажатие()

// Обработчик нажатия кнопки НапечататьЭтикетки командной панели КоманднаяПанельПечать
//
Процедура КоманднаяПанельПечатьНапечататьЭтикетки(Кнопка)

	НапечататьИзДокумента("Этикетки");

КонецПроцедуры // КоманднаяПанельПечатьНапечататьЭтикетки()

// Обработчик нажатия кнопки НапечататьЦенники командной панели КоманднаяПанельПечать.
//
Процедура КоманднаяПанельПечатьНапечататьЦенники(Кнопка)

	НапечататьИзДокумента("Ценники");

КонецПроцедуры // КоманднаяПанельПечатьНапечататьЦенники()

// Обработчик кнопки действия формы КартаМаршрута.
//
Процедура ДействияФормыКартаМаршрута(Кнопка)

	РаботаСБизнесПроцессами.ОткрытьКартумаршрута(БизнесПроцесс);

КонецПроцедуры // ДействияФормыКартаМаршрута()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ
//

// Обработчик нажатия гиперссылки "УстановкаЦенНоменклатуры".
//
Процедура УстановкаЦенНоменклатурыНажатие(Элемент)

	Если ЗначениеЗаполнено(УстановкаЦенНоменклатуры) Тогда
		ОткрытьЗначение(УстановкаЦенНоменклатуры);
	КонецЕсли;

КонецПроцедуры // УстановкаЦенНоменклатурыНажатие()

// Обработчик нажатия кнопки "ВвестиНовый".
//
Процедура КнопкаВвестиНовыйНажатие(Элемент)

	СоздатьНовыйДокументВТочкеМаршрута();

КонецПроцедуры // КнопкаВвестиНовыйНажатие()

// Обработчик события "НачалоВыбора" значения поля "Объект".
//
Процедура ОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.ПровестиИнвентаризацию Тогда

		ОбработатьВыборДокументаИнвентаризация(Элемент);
	ИначеЕсли ТочкаМаршрута = БизнесПроцессы.ПереоценкаТоваровАТТ.ТочкиМаршрута.УстановитьНовыеЦены Тогда

		ОбработатьВыборДокументаПереоценки(Элемент);
	КонецЕсли;

КонецПроцедуры // ОбъектНачалоВыбора()

// Обработчик события "НачалоВыбора" значения поля "СрокИсполнения".
//
Процедура СрокИсполненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПрисвоитьЧасМинутуИзЭлемента(Элемент);
	
КонецПроцедуры // СрокИсполненияНачалоВыбора()

// Обработчик выбора из выпадающего списка поля "СрокИсполнения".
//
Процедура СрокИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры // СрокИсполненияНачалоВыбораИзСписка()

// Обработчик выбора значения поля "СрокИсполнения".
//
Процедура СрокИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры // СрокИсполненияОбработкаВыбора()

// Обработчик выбора значения поля "СрокОповещения".
//
Процедура СрокОповещенияНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПрисвоитьЧасМинутуИзЭлемента(Элемент);

КонецПроцедуры //СрокОповещенияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокОповещения = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры // СрокОповещенияНачалоВыбораИзСписка()

// Обработчик выбора значения поля "СрокОповещения".
//
Процедура СрокОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры //СрокОповещенияОбработкаВыбора()

// Обработчик установки-снятия флага оповещения
//
Процедура ОповещениеПриИзменении(Элемент)

	УстановитьДоступностьЭлементов();

КонецПроцедуры // ОповещениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	УстановитьДоступностьЭлементов();

	УстановитьЗаголовокФормы();

	УстановитьВидимостьСтраницПанели();

	УстановитьГиперСсылкуНаДокумент();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	УстановитьДоступностьЭлементов()

КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// БЕЗ ПРОЦЕДУР
//
мДокументПереоценкаТоваровВРознице = Неопределено;
