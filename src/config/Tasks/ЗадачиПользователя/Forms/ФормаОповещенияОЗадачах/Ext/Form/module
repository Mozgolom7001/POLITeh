////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем мСписокОтложенногоВремени;
Перем мСписокЗадачДляСверки;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Функция представляет разницу между параметром и текущей датой, в виде строки
//
// Параметры
//	ДатаСрока - Дата формата ДатаВремя
//
Функция СрокСтрокой(ДатаСрока)
	
	РазностьДат = КонецМинуты(ТекущаяДата()) - КонецМинуты(ДатаСрока);
	Если РазностьДат > 0 Тогда
		
		Предлог     = "на";
		Определение = "просрочен";
		Секунды     = РазностьДат;
		
	Иначе
		
		Предлог     = "через";
		Определение = "истекает";
		Секунды     = - РазностьДат;
		
	КонецЕсли;
	
	ЧислоМинут = 1;
	ЧислоЧасов = 0;
	ЧислоДней  = 0;
	
	Если (Секунды >= 60) И (Секунды < 3600) Тогда // в 1 часе 3600 секунд
		ЧислоМинут = Цел(Секунды/60);
	ИначеЕсли (Секунды >= 3600) И (Секунды < 86400) Тогда // в 1 дне 86400 секунд
		
		ЧислоЧасов = Цел(Секунды/(60*60));
		ЧислоМинут = Цел((Секунды - ЧислоЧасов*60*60)/60);
		
	ИначеЕсли Секунды >= 86400 Тогда
		
		ЧислоДней  = Цел(Секунды/(60*60*24));
		ЧислоЧасов = Цел((Секунды - ЧислоДней*60*60*24)/(60*60));
		ЧислоМинут = Цел((Секунды - (ЧислоДней*60*60*24 + ЧислоЧасов*60*60))/60);
		
	КонецЕсли;
	
	Возврат Предлог + " " + ?(ЧислоДней > 0, Строка(ЧислоДней) + " дн. ", "") + ?(ЧислоЧасов > 0, Строка(ЧислоЧасов) + " час. ", "") + Строка(ЧислоМинут) + " мин. " + Определение;
	
КонецФункции // СрокСтрокой()

//Процедура активизирует форму и нужную строку табличного поля
//
Процедура АктивизироватьФорму(ВыгрузкаЗадачДляСверки) Экспорт
	
	ЗадачаСписок.Обновить();
	
	Если НЕ НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(мСписокЗадачДляСверки, ВыгрузкаЗадачДляСверки) Тогда
		
		мСписокЗадачДляСверки = ВыгрузкаЗадачДляСверки;
		
		ЭтаФорма.Отбор.СрокОповещения.ВидСравнения  = ВидСравнения.Меньше;
		ЭтаФорма.Отбор.СрокОповещения.Использование = Истина;
		ЭтаФорма.Отбор.СрокОповещения.Значение      = ТекущаяДата();
		ЭтаФорма.Обновить();
		
		Если (НЕ ЭтаФорма.ВводДоступен()) Тогда
			ЭтаФорма.Активизировать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открывает форму Задачи, выбранную в строке табличного поля
//
Процедура ОткрытьФормуЗадачи(ТекущаяЗадача)
	
	ФормаЗадачи = ТекущаяЗадача.ПолучитьФорму();
	ФормаЗадачи.Открыть();
	
КонецПроцедуры // ОткрытьФормуЗадачи()

// Процедура отмечает выделенную задачу как выполненную и записывает
//
Процедура ВыполнитьЗадачу(ТекущаяЗадача)
	
	Задача = ТекущаяЗадача.ПолучитьОбъект();
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс) Тогда

		Попытка

			Задача.ВыполнитьЗадачуИнтерактивно();
		Исключение
		КонецПопытки;
	Иначе

		Задача.Выполнена = ИСТИНА;
		Задача.Записать();
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗадачу()

// Процедура переносит срок исполнения выделенной Задачи на поздний срок
//
Процедура ОтложитьЗадачу(ТекущаяЗадача)
	
	Задача = ТекущаяЗадача.ПолучитьОбъект();
	Задача.СрокОповещения = НачалоМинуты(ТекущаяДата() + ЗначениеОтложенногоВремени);
	Задача.Записать();
	
КонецПроцедуры // ОтложитьЗадачу()

// Процедура изменяет содержимое элементов Надпись формы
//
// Параметры
//	Тема - содержимое надписи НадписьТема
//	Напомнить - содержимое надписи НадписьНапомнить
//
Процедура ЗаполнитьПоля(Тема, Напомнить)
	
	ЭлементыФормы.НадписьТема.Заголовок      = Тема;
	ЭлементыФормы.НадписьНапомнить.Заголовок = Напомнить; 
	
КонецПроцедуры // ЗаполнитьПоля()

// Процедура обновляет содержимое заданных объектов формы
//
Процедура ОбновитьПоляФормы(Элемент)
	
	Если ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		ЗаполнитьПоля("", "Выбрано задач - " + Строка(ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество()));	
	ИначеЕсли ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() = 1 Тогда
		ЗаполнитьПоля(Элемент.ТекущиеДанные.Наименование, "Исполнить: " + Формат(Элемент.ТекущиеДанные.СрокИсполнения, "ДФ=""дддд', 'дд ММММ гггг 'г. в' ЧЧ:мм"""));
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПоляФормы()

// Процедура выполняет операции с выделенными Задачами согласно выбранному режиму
//
// Параметры
//	Режим - опция нажатия определенной кнопки на форме
//
Процедура ОбработатьВыделенныеСтроки(Режим = "Открыть")
	
	ШагПрохода = 0;
	
	Пока ШагПрохода <= ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() - 1 Цикл
		
		ВыделеннаяСтрока = ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Получить(ШагПрохода);
		
		Если Режим = "Открыть" Тогда
			ОткрытьФормуЗадачи(ВыделеннаяСтрока.Ссылка);
		ИначеЕсли Режим = "Прекратить" Тогда
			ВыполнитьЗадачу(ВыделеннаяСтрока.Ссылка);
		ИначеЕсли (Режим = "Отложить") Тогда
			ОтложитьЗадачу(ВыделеннаяСтрока.Ссылка);
		КонецЕсли;
		
		ШагПрохода = ШагПрохода + 1;
				
	КонецЦикла;
	
	ЗадачаСписок.Обновить();
	
	УправлениеКонтактами.ПроверитьНапоминанияПользователя(ПараметрыСеанса.ТекущийПользователь);
	
КонецПроцедуры // ОбработатьВыделенныеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ
//

// Обработчик события табличного поля ПриВыводеСтроки
//
Процедура ЗадачаСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ссылка <> Неопределено Тогда
		
		ОформлениеСтроки.Ячейки.СрокСтрокой.УстановитьТекст(СрокСтрокой(ДанныеСтроки.Ссылка.СрокОповещения));
		
		СтрокаПоздравления = УправлениеКонтактами.ПолучитьСтрокуУсловияДР();
		
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
		
		Если ДанныеСтроки.Ссылка.ПамятнаяДата Тогда
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
		Иначе
			ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события табличного поля ПриВыбореСтроки
//
Процедура ЗадачаСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОткрытьФормуЗадачи(ЭлементыФормы.ЗадачаСписок.ТекущаяСтрока);
	
КонецПроцедуры

// Обработка события табличного поля ПриАктивизацииСтроки
//
// Параметр - стандартный
//
Процедура ЗадачаСписокПриАктивизацииСтроки(Элемент)
	
	ОбновитьПоляФормы(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ПозицияЗначенияСпискаОтложенногоВремени = ВосстановитьЗначение("ПозицияЗначенияСпискаОтложенногоВремени");
	
	ЭтаФорма.Отбор.Оповещение.ВидСравнения   = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Оповещение.Использование  = Истина;
	ЭтаФорма.Отбор.Оповещение.Значение       = Истина;
	ЭтаФорма.Отбор.Выполнена.ВидСравнения    = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Выполнена.Использование   = Истина;
	ЭтаФорма.Отбор.Выполнена.Значение        = Ложь;
	ЭтаФорма.Отбор.Исполнитель.ВидСравнения  = ВидСравнения.Равно;
	ЭтаФорма.Отбор.Исполнитель.Использование = Истина;
	ЭтаФорма.Отбор.Исполнитель.Значение      = ПараметрыСеанса.ТекущийПользователь;
	
	ЭлементыФормы.ЗначениеОтложенногоВремени.СписокВыбора = мСписокОтложенногоВремени;
	
	Если ПозицияЗначенияСпискаОтложенногоВремени = Неопределено Тогда
		ЭлементыФормы.ЗначениеОтложенногоВремени.Значение = мСписокОтложенногоВремени[0].Значение;
	Иначе
		ЭлементыФормы.ЗначениеОтложенногоВремени.Значение = ПозицияЗначенияСпискаОтложенногоВремени;
	КонецЕсли;
	
	ЗадачаСписок.Колонки.Добавить("СрокИсполнения");
	
КонецПроцедуры

// Обработка нажатия кнопки КнопкаОткрыть
//
Процедура КнопкаОткрытьНажатие(Элемент)
	
	ОбработатьВыделенныеСтроки();
	
КонецПроцедуры // КнопкаОткрытьНажатие()

// Обработка нажатия кнопки КнопкаПрекратить
//
Процедура КнопкаПрекратитьНажатие(Элемент)
	
	Если ЭлементыФормы.ЗадачаСписок.ВыделенныеСтроки.Количество() > 1 Тогда
		
		Ответ = Вопрос("Вы уверены, что следует прекратить выделенные напоминания?", РежимДиалогаВопрос.ДаНет, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ОбработатьВыделенныеСтроки("Прекратить");
	
КонецПроцедуры // КнопкаПрекратитьНажатие()

// Обработка нажатия кнопки КнопкаОтложить
//
Процедура КнопкаОтложитьНажатие(Элемент)
	
	ОбработатьВыделенныеСтроки("Отложить");
		
КонецПроцедуры // КнопкаОтложитьНажатие()

// Процедура-обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	ФормаОповещенияЗадачОткрыта = Ложь;
	СохранитьЗначение("ПозицияЗначенияСпискаОтложенногоВремени", ЭлементыФормы.ЗначениеОтложенногоВремени.Значение);
	
КонецПроцедуры

мСписокОтложенногоВремени = УправлениеКонтактами.ПолучитьСписокИнтерваловНапоминания();
