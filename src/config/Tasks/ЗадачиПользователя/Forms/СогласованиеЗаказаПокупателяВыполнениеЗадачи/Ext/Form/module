////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем мЧас;
Перем мМинута;
Перем мКартинкаНеВыполненойЗадачи;
Перем мКартинкаВыполненойЗадачи;


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура сохраняет значения переменных мЧас и мМинута
//
Процедура ПрисвоитьЧасМинутуИзЭлемента(Элемент)

	мЧас    = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);

КонецПроцедуры // ПрисвоитьЧасМинутуИзЭлемента()

// Процедура присваивает дату с учетом сохраненных значений мЧас и мМинута
//
Процедура ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = ЛОЖЬ;

	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас             = 0;
	мМинута          = 0;

КонецПроцедуры // ПередатьДатуВЭлемент()

// Процедура управляет доступностью кнопок формы
//
Процедура УстановитьДоступностьЭлементов()

	ЭлементыФормы.Наименование.ТолькоПросмотр = Выполнена Или ((Не Выполнена) И (Инициатор <> ПараметрыСеанса.ТекущийПользователь));
	ЭлементыФормы.Оповещение.Доступность      = Не Выполнена;
	ЭлементыФормы.СрокОповещения.Доступность  = Оповещение;

	ЭлементыФормы.ПоложительныйРезультат.Доступность       = Не Выполнена;
	ЭлементыФормы.ОтрицательныйРезультат.Доступность       = Не Выполнена;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыполнитьЗадачу.Доступность = Не Выполнена;

КонецПроцедуры // УстановитьДоступностьЭлементов()

// Процедура управляет надписью заголовка формы задачи.
//
Процедура УстановитьЗаголовокФормы()

	Заголовок = СокрЛП(Наименование) + " от " + Формат(Дата, "ДФ=""дд ММММ гггг 'г.' ЧЧ:мм:сс""") + ?(Выполнена, ". Выполнена", ". Не выполнена");

КонецПроцедуры // УстановитьЗаголовокФормы()

// Процедура выполняет задачу.
//
Процедура ОсновныеДействияФормыКнопкаВыполнитьЗадачу(Кнопка)

	Если Выполнена Тогда
		Предупреждение("Задача выполнена. Повторное выполнение задачи не допускается !");
		Возврат;
	КонецЕсли;

	Попытка

		Заблокировать();
	Исключение
		Предупреждение("Не удалось заблокировать запись. Действие не выполнено.
						|Возможно, форма объекта уже открыта либо объект используется другим пользователем.");
		Возврат;
	КонецПопытки;

	НачатьТранзакцию();

	ЕстьОшибки = Ложь;

	Попытка

		СохранитьРезультатыСогласования(ЕстьОшибки);
		ВыполнитьЗадачуИнтерактивно();
	Исключение
		ЕстьОшибки = Истина;
	КонецПопытки;

	Если ЕстьОшибки Тогда

		ОтменитьТранзакцию();

	Иначе

		ЗафиксироватьТранзакцию();
		Закрыть();

	КонецЕсли;

КонецПроцедуры // ОсновныеДействияФормыОсновныеДействияФормыВыполнена()

// Процедура сохраняет данные по задаче в регистр сведений "Рецензии".
//
Процедура СохранитьРезультатыСогласования(Отказ=Ложь)

	// В данной точке данные не вносятся.
	Если ТочкаМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута.НачатьВыполнениеЗаказа Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерЗаписиРецензии.Модифицированность() Тогда

		МенеджерЗаписиРецензии.Задача          = Ссылка;
		МенеджерЗаписиРецензии.ТочкаМаршрута   = ТочкаМаршрута;
		МенеджерЗаписиРецензии.БизнесПроцесс   = БизнесПроцесс;
		МенеджерЗаписиРецензии.НомерЦикла      = БизнесПроцесс.НомерЦикла;

		Заголовок  ="Выполнение задачи:" + Ссылка;

		Попытка

			МенеджерЗаписиРецензии.Записать();
		Исключение

			ОбщегоНазначения.СообщитьОбОшибке("Ошибка записи:"+ОписаниеОшибки() , Отказ, Заголовок );
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры // СохранитьРезультатыСогласования()

//Процедура управляет видимостью страниц панели "ОсновнаПанель".
//
Процедура УстановитьВидимостьСтраницПанели()

	ВидимостьПанели = Не (ТочкаМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута.НачатьВыполнениеЗаказа);

	Если ТочкаМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута.НачатьВыполнениеЗаказа Тогда

		ЭлементыФормы.ПанельРецензияВиза.Страницы["СтраницаРецензирования"].Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьСтраницПанели()

// Процедура управляет заголовком и выбираемым значением переключателей на форме.
//
Процедура ОбработатьРеквизитРезультат()

	ТочкиМаршрута = БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута;

	Если ТочкаМаршрута = ТочкиМаршрута.ОзнакомитьсяСРезультатами Тогда

		ЭлементыФормы.ПоложительныйРезультат.ВыбираемоеЗначение = Перечисления.РезультатыБизнесПроцессаСогласование.ЗавершитьСогласование;
		ЭлементыФормы.ПоложительныйРезультат.Заголовок = "Завершить";

		ЭлементыФормы.ОтрицательныйРезультат.ВыбираемоеЗначение = Перечисления.РезультатыБизнесПроцессаСогласование.ПовторноеСогласование;
		ЭлементыФормы.ОтрицательныйРезультат.Заголовок = "Повторить";

	КонецЕсли;

КонецПроцедуры // ОбработатьРеквизитФлагРезультата()

// Процедура обновляет актуальные результаты согласования.
//
Процедура ОбновитьАктуальныеРезультатыСогласования()

	ЭлементыФормы.АктуальныеРезультатыСогласования.Значение = РаботаСБизнесПроцессами.ПолучитьРезультатЗапросаПоСогласованию(БизнесПроцесс).Выгрузить()

КонецПроцедуры // ОбновитьАктуальныеРезультатыСогласования()

// Процедура вызывается при выводе строки табличного поля "Рецензии".
//
// Параметры:
//  ОформлениеСтроки - ОформлениеСтроки, содержит оформление строки 
//  ДанныеСтроки - ДанныеСтроки, данные выводимой строки.
//
Процедура ОбработатьВыводИнформацииОЗадачахВТабПоле(ОформлениеСтроки, ДанныеСтроки)

	ТекЗадача = ДанныеСтроки.Задача;

	Если Не ЗначениеЗаполнено(ТекЗадача) Тогда
		Возврат;
	КонецЕсли;

	ОформлениеСтроки.Ячейки.Пользователь.УстановитьТекст(СокрЛП(ТекЗадача.Исполнитель));
	ОформлениеСтроки.Ячейки.Картинка.УстановитьКартинку(мКартинкаВыполненойЗадачи);

	Если ТекЗадача = Ссылка Тогда

		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);

	КонецЕсли;

КонецПроцедуры // ОбработатьВыводИнформацииОЗадачахВТабПоле()

// Процедура открывает карту маршрута бизнес-процесса.
//
Процедура ОткрытьКартуМаршрута()

	РаботаСБизнесПроцессами.ОткрытьКартумаршрута(БизнесПроцесс);

КонецПроцедуры // ОткрытьКартуМаршрута()

// Процедура устанавливает реквизит формы "ОбъектСогласования".
//
Процедура ОбновитьДополнительнуюИнформацию()

	ОбъектСогласования = БизнесПроцесс.ОбъектСогласования;

	ЭлементыФормы.ГиперссылкаЗаказПокупателя.Заголовок = СокрЛП(ОбъектСогласования.Номер) + " от " + ОбъектСогласования.Дата;

КонецПроцедуры // УстановитьОбъектСогласования()

// Процедура открывает значение реквизита формы "ОбъектСогласования".
//
Процедура ОткрытьОбъектСогласования()

	Если ЗначениеЗаполнено(ОбъектСогласования) Тогда

		ОткрытьЗначение(ОбъектСогласования);
	КонецЕсли;

КонецПроцедуры // ОткрытьОбъектСогласования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура - обработчик нажатия элемента "АнализЗаказа".
//
Процедура ОткрытьАнализЗаказа(Элемент)

	УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ОбъектСогласования,Ложь, Истина);

КонецПроцедуры // ОткрытьАнализЗаказа()

// Процедура обработчик действия элемента "Анализ".
//
Процедура ДействияФормыАнализ(Кнопка)

	РаботаСБизнесПроцессами.ОткрытьАнализСогласованияЗаказа(БизнесПроцесс);

КонецПроцедуры // ДействияФормыАнализ()

// Процедура - обработчик действия элемента панели "ПеречитатьОбъект" командной панели "ДействияФормы".
//
Процедура ДействияФормыПеречитатьОбъект(Кнопка)

	Если Не ЭтоНовый() Тогда

		Прочитать();
		РаботаСБизнесПроцессами.ПолучитьДанныеЗадачи(Ссылка, МенеджерЗаписиРецензии);
		УстановитьДоступностьЭлементов();
		ОбработатьРеквизитРезультат();
		Модифицированность = Ложь;

	КонецЕсли;

КонецПроцедуры // ДействияФормыПеречитатьОбъект()

// Процедура - обработчик действия элемента панели "Обновить" командной панели "КоманднаяПанельРезультаты".
//
Процедура КоманднаяПанельРезультатыОбновить(Кнопка)

	ОбновитьАктуальныеРезультатыСогласования()

КонецПроцедуры // КоманднаяПанельРезультатыОбновить()

// Процедура - обработчик действия элемента панели "КартаМаршрута" командной панели "КоманднаяПанельРезультаты".
//
Процедура ДействияФормыКартаМаршрута(Кнопка)

	ОткрытьКартуМаршрута()

КонецПроцедуры // ДействияФормыКартаМаршрута()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ
//

// Процедура - обработчик события "Выбор" табличного поля "АктуальныеРезультатыСогласования".
// 
Процедура АктуальныеРезультатыСогласованияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = ЭлементыФормы.АктуальныеРезультатыСогласования.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		ОткрытьЗначение(ТекущиеДанные.Задача);
	КонецЕсли;

КонецПроцедуры // АктуальныеРезультатыСогласованияВыбор()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "АктуальныеРезультатыСогласования".
//
Процедура АктуальныеРезультатыСогласованияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОбработатьВыводИнформацииОЗадачахВТабПоле(ОформлениеСтроки, ДанныеСтроки)

КонецПроцедуры // АктуальныеРезультатыСогласованияПриВыводеСтроки()

// Процедура - обработчик события "ПриСменеСтраницы" панели "ОсновнаПанель".
//
Процедура ОсновнаПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ЭлементыФормы.ОсновнаПанель.ТекущаяСтраница.Имя = "РезультатыСогласования" Тогда
		ОбновитьАктуальныеРезультатыСогласования();
	КонецЕсли;

КонецПроцедуры // ОсновнаПанельПриСменеСтраницы()

// Обработчик начала выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПрисвоитьЧасМинутуИзЭлемента(Элемент);

КонецПроцедуры // СрокИсполненияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокИсполнения
//
Процедура СрокИсполненияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокИсполнения = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры //СрокИсполненияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокИсполнения
//
Процедура СрокИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры //СрокИсполненияОбработкаВыбора()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПрисвоитьЧасМинутуИзЭлемента(Элемент);

КонецПроцедуры //СрокОповещенияНачалоВыбора()

// Обработчик выбора из выпадающего списка, поля СрокОповещения
//
Процедура СрокОповещенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыбранноеВремя = ВыборДатыВремениИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	Если ВыбранноеВремя <> Неопределено Тогда
		СрокОповещения = ВыбранноеВремя.Значение;
	КонецЕсли;

КонецПроцедуры // СрокОповещенияНачалоВыбораИзСписка()

// Обработчик выбора значения поля СрокОповещения
//
Процедура СрокОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ПередатьДатуВЭлемент(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры //СрокОповещенияОбработкаВыбора()

// Обработчик установки-снятия флага оповещения
//
Процедура ОповещениеПриИзменении(Элемент)

	УстановитьДоступностьЭлементов();

КонецПроцедуры // ОповещениеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ТочкаМаршрута <> БизнесПроцессы.СогласованиеЗаказаПокупателя.ТочкиМаршрута.НачатьВыполнениеЗаказа Тогда

		РаботаСБизнесПроцессами.ПолучитьДанныеЗадачи(Ссылка, МенеджерЗаписиРецензии);

		Если Не Выполнена Тогда
			РаботаСБизнесПроцессами.УстановитьЗначениеРесурсовПоУмолчанию(Ссылка, МенеджерЗаписиРецензии);
		КонецЕсли;

	КонецЕсли;

	УстановитьДоступностьЭлементов();

	УстановитьЗаголовокФормы();

	УстановитьВидимостьСтраницПанели();

	ОбработатьРеквизитРезультат();

	ОбновитьДополнительнуюИнформацию();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)

	//При необходимости сохраним-обновим данные согласования.
	СохранитьРезультатыСогласования(Отказ);

КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	УстановитьДоступностьЭлементов();

	УстановитьЗаголовокФормы();

КонецПроцедуры // ПослеЗаписи()





мКартинкаНеВыполненойЗадачи = БиблиотекаКартинок.ЗадачаОбъект;
мКартинкаВыполненойЗадачи   = БиблиотекаКартинок.ВыполнитьЗадачу;

