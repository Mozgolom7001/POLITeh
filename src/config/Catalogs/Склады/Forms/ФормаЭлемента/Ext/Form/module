
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура изменяет доступность закладок в зависимости от записанности объекта.
//
Процедура ДоступностьЗакладок()

	ЭлементыФормы.Панель.Страницы.Свойства.Доступность  = НЕ ЭтоНовый();
	ЭлементыФормы.Панель.Страницы.Категории.Доступность = НЕ ЭтоНовый();

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события элемента КоманднаяПанельФормы.Файлы.
//
Процедура ДействияФормыФайлы(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);

	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);

	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА СВОЙСТВ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьСвойстваИЗначения()

// Обработчик события ПередНачаломДобавления элемента Свойства.
//
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Свойства.
//
Процедура СвойстваПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Свойства.
//
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Свойства.
//
Процедура СвойстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента Свойства.Значение.
//
Процедура СвойстваЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента Свойства.Значение.
//
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.Свойства.ТекущиеДанные.Значение = Неопределено;
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.Свойства.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА КАТЕГОРИЙ

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьКатегории()

// Обработчик события ПередНачаломДобавления элемента формы Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)

	Модифицированность = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);

	Если ЭтоНовый() Тогда

		Если НЕ ЗначениеЗаполнено(ВидСклада) Тогда
			ВидСклада               = Перечисления.ВидыСкладов.Оптовый;
			ТипЦенРозничнойТорговли = Неопределено;
			НомерСекции             = 0;
		КонецЕсли;

	КонецЕсли;

	ДоступностьЗакладок();
	УстановитьДоступность();

	ПрочитатьОтветственноеЛицо();

КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Склады;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры //ПриИзмененииДанных()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

	ДоступностьЗакладок();
	ЗаписатьОтветственноеЛицо(Отказ);

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.Свойства);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

// Обработчик события "Нажатие" конопки "История...".
//
Процедура КнопкаИсторияНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.ОтветственныеЛица.ПолучитьФормуСписка();
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Значение = Ссылка;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.ВидСравнения = ВидСравнения.Равно;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Использование = Истина;
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;

		ФормаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьДоступность()

	ФлагРозничный = (ВидСклада = Перечисления.ВидыСкладов.Розничный);
	ФлагНТТ       = (ВидСклада = Перечисления.ВидыСкладов.НТТ);
	РозницаНТТ    = (ФлагРозничный Или ФлагНТТ);

	ЭлементыФормы.ТипЦенРозничнойТорговли.АвтоОтметкаНезаполненного = РозницаНТТ;

	Если Не РозницаНТТ Тогда
		ЭлементыФормы.ТипЦенРозничнойТорговли.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

	ЭлементыФормы.НадписьНомерСекции.Доступность                  = Не ФлагНТТ;
	ЭлементыФормы.НомерСекции.Доступность                         = Не ФлагНТТ;
	ЭлементыФормы.РасчетРозничныхЦенПоТорговойНаценке.Доступность = ФлагНТТ;

КонецПроцедуры // УстановитьДоступность()

// Процедура читает данные о текущем ответственном лице.
//
Процедура ПрочитатьОтветственноеЛицо()

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.ОтветственноеЛицо.Значение = Неопределено;
	Иначе
		ЭлементыФормы.ОтветственноеЛицо.Значение = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// Процедура записывает данные об Ответственном лице.
//
// Параметры:
//  Отказ - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьОтветственноеЛицо(Отказ)

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОтветственноеЛицо.Значение) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.ОтветственноеЛицо.Значение = СрезПоследних[0].ФизическоеЛицо Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;


	МенеджерЗаписи = РегистрыСведений.ОтветственныеЛица.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Период             = ТекущаяДата();
	МенеджерЗаписи.СтруктурнаяЕдиница = Ссылка;
	МенеджерЗаписи.ФизическоеЛицо     = ЭлементыФормы.ОтветственноеЛицо.Значение;

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить("Не удалось записать данные об ответственном лице : " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьОтветственноеЛицо()

// Обработчик события пришедшего оповещения
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" 
	   И (Источник = Ссылка Или (ТипЗнч(Источник) = Тип("СправочникСсылка.Склады") И Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;

		Если ИмяОбновляемогоЭлемента = "ОтветственноеЛицо" Тогда
			ПрочитатьОтветственноеЛицо();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаОповещения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события "ПриИзменении" вида склада.
//
Процедура ВидСкладаПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры //ВидСкладаПриИзменении()

Процедура ПослеЗаписи()
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры


