
Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьТекущуюСтраницуПанели()
	
	Если СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ОтправлятьНаСервер Тогда
		ЭлементыФормы.ПанельСоединения.ТекущаяСтраница = ЭлементыФормы.ПанельСоединения.Страницы.НаСервер;
	
	ИначеЕсли СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ВыгружатьВФайл Тогда
		ЭлементыФормы.ПанельСоединения.ТекущаяСтраница = ЭлементыФормы.ПанельСоединения.Страницы.ВФайл;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработатьВыборКаталога(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		
	ДиалогВыбораФайла.Каталог = Элемент.Значение;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ПередОткрытием" Формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый()
		И ПараметрОбъектКопирования = Неопределено Тогда
		
		СпособОтправки = Перечисления.СпособОтправкиЭлектронногоДокумента.ОтправлятьНаСервер;	
		СоединениеССервером = "http://212.57.97.129/1cnet/services/EDIService";
		ТипОчередиДляОбработкиСообщений = Перечисления.ТипОчередиДляОбработкиЭлектронныхСообщений.ВсеОчереди;
		ПортСервера = 80;
		
	КонецЕсли;
	
	ОбновитьДоступностьНастроекПрокси();
	
	ПараметрыЭлектронногоОбмена.Отбор.УчетнаяЗаписьЭлектронногоОбмена.Установить(Ссылка);
	ПараметрыЭлектронногоОбмена.Прочитать();
	ЭлементыФормы.ПараметрыЭлектронногоОбмена.НастройкаОтбораСтрок.УчетнаяЗаписьЭлектронногоОбмена.Доступность = Ложь;
	
	
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	УстановитьТекущуюСтраницуПанели();
	
	ОбновитьДоступностьАвтообмена();
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

// Процедура - обаботчик события "ПриЗаписи" Формы
//
Процедура ПриЗаписи(Отказ)
	
	ПараметрыЭлектронногоОбмена.Отбор.УчетнаяЗаписьЭлектронногоОбмена.Установить(Ссылка);
	Для каждого Запись Из ПараметрыЭлектронногоОбмена Цикл
		Запись.УчетнаяЗаписьЭлектронногоОбмена = Ссылка;
	КонецЦикла;
	
	Попытка
		ПараметрыЭлектронногоОбмена.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);		
	КонецПопытки; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обаботчик события "НачалоВыбора" в: Поле ввода "КаталогДляВыгрузки"
//
Процедура КаталогДляВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обаботчик события "НачалоВыбора" в: Поле ввода "КаталогДляЗагрузки"
//
Процедура КаталогДляЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборКаталога(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле ввода "СпособОтправки"
//
Процедура СпособОтправкиПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницуПанели();
	
КонецПроцедуры

Процедура КаталогДляВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)

	ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КаталогДляЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагентыЗапросКаталога(Кнопка)
	
	Если ЭлементыФормы.ПараметрыЭлектронногоОбмена.ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ЭлементыФормы.ПараметрыЭлектронногоОбмена.ТекущиеДанные.Контрагент) Тогда
		
		Предупреждение("Не указан контрагент для которого необходимо выполнить операцию. В списке контрагентов для обмена выберете нужную строку и повторите операцию.");
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	ДокументЗапроса = Документы.ИсходящийЗапросКаталога.СоздатьДокумент();
	ДокументЗапроса.УчетнаяЗаписьЭлектронногоОбмена = Ссылка;
	ДокументЗапроса.Контрагент = ЭлементыФормы.ПараметрыЭлектронногоОбмена.ТекущиеДанные.Контрагент;
	
	ДокументЗапроса.ПолучитьФорму(, ЭтаФорма).Открыть();	
	
КонецПроцедуры

Процедура КоманднаяПанельКонтрагентыЗапросПрайсЛиста(Кнопка)
	
	Если ЭлементыФормы.ПараметрыЭлектронногоОбмена.ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ЭлементыФормы.ПараметрыЭлектронногоОбмена.ТекущиеДанные.Контрагент) Тогда
		
		Предупреждение("Не указан контрагент для которого необходимо выполнить операцию. В списке контрагентов для обмена выберете нужную строку и повторите операцию.");
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность() Тогда
		Записать();
	КонецЕсли;
	
	ДокументЗапроса = Документы.ИсходящийЗапросПрайсЛиста.СоздатьДокумент();
	ДокументЗапроса.УчетнаяЗаписьЭлектронногоОбмена = Ссылка;
	ДокументЗапроса.Контрагент = ЭлементыФормы.ПараметрыЭлектронногоОбмена.ТекущиеДанные.Контрагент;
	
	ДокументЗапроса.ПолучитьФорму(, ЭтаФорма).Открыть();	
	
КонецПроцедуры

Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.НастройкаРегламентногоЗадания.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Доступность = ИспользоватьРегламентныеЗадания;
	
КонецПроцедуры

Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	Перем ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно;
	
	ПроцедурыОбменаДаннымиКлиент.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(мРегламентноеЗадание, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно);
	ЭлементыФормы.НастройкаРегламентногоЗадания.Заголовок = ТекстЗаголовка;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РасписаниеАктивно И ИспользоватьРегламентныеЗадания, мЖирныйШрифт, мОбычныйШрифт);
	
КонецПроцедуры

Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ОбновитьДоступностьАвтообмена();
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	Если ИспользоватьРегламентныеЗадания Тогда
		
		НадписьРасписаниеРегламентногоЗаданияНажатие(ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки);
		
	Конецесли;
	
КонецПроцедуры

Процедура РедактированиеРасписанияРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();			
		
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗаданиеОбменЭлектроннымиДокументами");
				
		ОбъектЗадания.Наименование = Наименование;
		ОбъектЗадания.Использование = Истина;
	        		
	КонецЕсли;
	
	// редактирование самого расписания непосредственно
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОбъектЗадания.Расписание);
		
	Если Диалог.ОткрытьМодально() Тогда
		
		ОбъектЗадания.Расписание = Диалог.Расписание;
		Попытка
			ОбъектЗадания.Записать();
			РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		Исключение
			ВызватьИсключение "Произошла ошибка при сохранении расписания выполнения обменов. Возможно данные расписания были изменены. Закройте форму настройки и повторите попытку изменения расписания еще раз.
			|Подробное описание ошибки: " + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();	
	
КонецПроцедуры

Процедура РедактироватьНастройкиРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();				
			
	КонецЕсли;
	
	Диалог = ПолучитьОбщуюФорму("ДиалогРегламентногоЗадания");
	Диалог.РегламентноеЗадание = ОбъектЗадания;
	Диалог.Наименование = Наименование;
	Диалог.МетаданныеВыбор = "ЗаданиеОбменЭлектроннымиДокументами";
	
	Если Диалог.ОткрытьМодально() <> Истина Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
				
	Иначе
		
		Модифицированность = Истина;
		ОбъектЗадания = Диалог.РегламентноеЗадание;
				
	КонецЕсли;	
	
	Если ОбъектЗадания <> Неопределено Тогда
		
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();	
	
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры

Процедура НадписьНастройкаРегламентногоЗаданияНажатие(Элемент)
	
	РедактироватьНастройкиРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
			
КонецПроцедуры

Процедура ДействияФормыПолучить(Кнопка)
	
	// надо проверить редактируется ли объект
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные настроек были изменены. Для получения входящих сообщений необходимо сохранить изменения. Сохранить внесенные в настройку изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	ЭлектронныеДокументы.ПолучитьЭлектронныеДокументы(ЭтотОбъект.Ссылка);	
	
КонецПроцедуры

Процедура ДействияФормыДокументыОбмена(Кнопка)
	
	// надо проверить редактируется ли объект
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные настроек были изменены. Для получения информации о документах обмена необходимо сохранить изменения. Сохранить внесенные в настройку изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Записать();
	КонецЕсли;
	
	ФормаПоказа = Обработки.ДокументыЭлектронногоОбмена.ПолучитьФорму("Форма");
	ФормаПоказа.Открыть();
	
КонецПроцедуры

Процедура ОбновитьДоступностьНастроекПрокси()
	
	ЭлементыФормы.НадписьСерверПрокси.Доступность = ПроксиИспользование;
	ЭлементыФормы.ПроксиСервер.Доступность = ПроксиИспользование;
	
	ЭлементыФормы.НадписьПортПрокси.Доступность = ПроксиИспользование;
	ЭлементыФормы.ПроксиПорт.Доступность = ПроксиИспользование;
	
	ЭлементыФормы.НадписьИмяПользователяПрокси.Доступность = ПроксиИспользование;
	ЭлементыФормы.ПроксиИмяПользователя.Доступность = ПроксиИспользование;
	
	ЭлементыФормы.НадписьПарольПрокси.Доступность = ПроксиИспользование;
	ЭлементыФормы.ПроксиПароль.Доступность = ПроксиИспользование;
	
КонецПроцедуры

Процедура ФлажокИспользоватьПроксиСерверПриИзменении(Элемент)
	
	ОбновитьДоступностьНастроекПрокси();
	
КонецПроцедуры

мРегламентноеЗадание = Неопределено;

мЖирныйШрифт = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();
