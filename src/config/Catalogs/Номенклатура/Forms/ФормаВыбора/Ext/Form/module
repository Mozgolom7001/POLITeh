
Перем мКнопкаПереключенияРежима;
Перем мПустаяКартинка;
Перем мСписокЗначенийОтбораНоменклатуры;
// список значений строк - префиксов колонок с суммами
Перем мСписокПрефиксовЦен;
// соответсвие хранит структуры курсов валют
Перем мСоответствиеКурсовВалют;
// количество колонок в табличном поле ТабличноеПолеОстаткиТоваров без учета колонок сумм
Перем мКоличествоБазовыхКолонокОстаткиТоваров;

// объект для поиска данных
Перем мПоискОбъектовВСпискахДанных;

// Переменная тип структура инциализируется если форма открывается для выбора номенклатуры с характеристикой
Перем мСтруктураПриВыбореЗначения Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура пересчитывает суммы номенклатуры по курсам
Процедура ПересчитатьВалютыОстатковНоменклатуры()
	
	Если НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
		СтруктураКурса = УправлениеЗапасами.ВернутьСтруктуруКурсВалюты(мСоответствиеКурсовВалют, ВалютаЦены);
    КонецЕсли;

	УправлениеЗапасами.ПересчитатьОстаткиВВалюте(ОстаткиТоваров, мСписокПрефиксовЦен, СтруктураКурса, ВВалютеЦены, ВалютаЦены)

КонецПроцедуры

// Процедура готовит данные для выбранного элемента, если форма вызвана для выбора номенклатуры с характеристикой
Функция ПодготовитьДанныеСтруктуры(ВыбраннаяСтрока = Неопределено)
	Перем Склад, ПоляДляОбновления, ВладелецФормы;
	
	ОбновяемыеПоля = Новый Структура();
	мСтруктураПриВыбореЗначения.Свойство("ПоляДляОбновления",ПоляДляОбновления);
	мСтруктураПриВыбореЗначения.Свойство("ВладельцыФормы",ВладелецФормы);
	
	ПоляДляОбновления.Свойство("Склад",Склад);
	Склад = ?(Склад = Неопределено,Справочники.Склады.ПустаяСсылка(),Склад);
	
	ОбновяемыеПоля.Вставить("Склад",Склад);
	ОбновяемыеПоля.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Если НЕ ВыбраннаяСтрока = Неопределено Тогда
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.Родитель) Тогда
			ОбновяемыеПоля.Вставить("Склад", ВыбраннаяСтрока.ХарактеристикаСклад);
			ОбновяемыеПоля.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.Родитель.ХарактеристикаСклад);
		Иначе
			ОбновяемыеПоля.Вставить("ХарактеристикаНоменклатуры", ВыбраннаяСтрока.ХарактеристикаСклад);
		КонецЕсли;
		ЭтаФорма.ВладелецФормы = ВладелецФормы["ЭтаФорма"];
	Иначе
		ЭтаФорма.ВладелецФормы = ВладелецФормы["Элемент"];
	КонецЕсли;
	
	ОбновяемыеПоля.Вставить("Номенклатура", ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	Для Каждого Элемент Из ПоляДляОбновления Цикл
		значение = ОбновяемыеПоля[Элемент.Ключ];
		ПоляДляОбновления[Элемент.Ключ] = значение;
		мСтруктураПриВыбореЗначения.Вставить(Элемент.Ключ,значение);
	КонецЦикла;

	мСтруктураПриВыбореЗначения.Вставить("ПоляДляОбновления",ПоляДляОбновления);
	мСтруктураПриВыбореЗначения.Вставить("ВыборСХаракткристикой",ВыбраннаяСтрока = Неопределено);
	возврат мСтруктураПриВыбореЗначения;
КонецФункции

// Процедура обновляет таблицу остатков на складах, основываясь на текущей номенклатуре
Процедура ПоказатьОстаткиТоваров()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОстаткиТоваровНаСкладах.Пометка Тогда
		
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено
		   И НЕ ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		   
			мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
			УправлениеЗапасами.ПолучитьДеревоОстатковНоменклатуры(ОстаткиТоваров, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка, Истина, СписокЦенОстатков, , мСоответствиеКурсовВалют);
			//Разворачиваем дерево
			Для Каждого СтрокаДереваОстатков Из ОстаткиТоваров.Строки Цикл
				ЭлементыФормы.ТабличноеПолеОстаткиТоваров.Развернуть(СтрокаДереваОстатков, Истина);
			КонецЦикла;
			РаботаСДиалогами.ОбновитьШапкиКолонокОстатков(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЕдиницаХраненияОстатков);
			ПересчитатьВалютыОстатковНоменклатуры();
		Иначе
			ОстаткиТоваров.Строки.Очистить();
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры

Процедура УстановитьВидимостьОстатковНаСкладах()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОстаткиТоваровНаСкладах.Пометка Тогда
		
		ЭлементыФормы.РазделительОстатковНаСкладах.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Высота = 0 Тогда
			ТекущийВерх = ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх;
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх = ТекущийВерх - 144;
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Высота = ТекущийВерх - ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх;
		КонецЕсли;
		
		ЭлементыФормы.РазделительОстатковНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительОстатковНаСкладах, ГраницаЭлементаУправления.Низ);
		
	Иначе
		
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОстаткиТоваровНаСкладах, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительОстатковНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОстаткиТоваровНаСкладах, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительОстатковНаСкладах.Свертка = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	
КонецПроцедуры

 //Процедура полностью перестраивает дерево остатков
Процедура ПерестроитьДеревоОстатков()
	
	// структуры остатков надо восстановить
	ОстаткиТоваров = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
	ПоказатьОстаткиТоваров();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Устанавливает режим списка справочника, или выбора номенклатуры контрагента
//
Процедура УстановитьРежимОтображенияФормы()

	Если мКнопкаПереключенияРежима.Пометка Тогда
		ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныхПолей.Страницы.ВыборНоменклатурыКонтрагента;
		ЭлементыФормы.ДействияФормы.ИсточникДействий = ЭлементыФормы.СписокНоменклатурыКонтрагента;
	Иначе
		ЭлементыФормы.ПанельТабличныхПолей.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныхПолей.Страницы.ВыборНоменклатуры;
		ЭлементыФормы.ДействияФормы.ИсточникДействий = ЭлементыФормы.СправочникСписок;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
	
	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры

// Обновляет содержимое картинки
//
Процедура ПоказатьОсновноеИзображение()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = Истина Тогда
		
		Если НЕ мКнопкаПереключенияРежима.Пометка Тогда
			ЭлементКартинки = ЭлементыФормы.ОсновноеИзображение;
			Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено
			   И НЕ ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа
			   И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.ОсновноеИзображение) Тогда
				ОсновноеИзображение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.ОсновноеИзображение;
			Иначе
				ОсновноеИзображение = Неопределено;
			КонецЕсли; 
		Иначе
			ЭлементКартинки = ЭлементыФормы.ОсновноеИзображениеКонтрагента;
			Если ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные <> Неопределено Тогда
				ТекНоменклатура = ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные.Номенклатура;
				Если ЗначениеЗаполнено(ТекНоменклатура)
				   И НЕ ТекНоменклатура.ЭтоГруппа
				   И ЗначениеЗаполнено(ТекНоменклатура.ОсновноеИзображение) Тогда
					ОсновноеИзображение = ТекНоменклатура.ОсновноеИзображение;
				Иначе
					ОсновноеИзображение = Неопределено;
				КонецЕсли; 
			Иначе
				ОсновноеИзображение = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ОсновноеИзображение) Тогда
			ЭлементКартинки.Картинка = ОсновноеИзображение.Хранилище.Получить();
		Иначе
			ЭлементКартинки.Картинка = мПустаяКартинка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Показывает или прячет панель основного изображения в зависимости от пометки кнопки изображения
//
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка Тогда
		
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельОсновногоИзображения.Высота = 0 Тогда
			ТекущийВерх = ЭлементыФормы.ПанельОсновногоИзображения.Верх;
			ЭлементыФормы.ПанельОсновногоИзображения.Верх = ТекущийВерх - 144;
			ЭлементыФормы.ПанельОсновногоИзображения.Высота = ТекущийВерх - ЭлементыФормы.ПанельОсновногоИзображения.Верх;
		КонецЕсли;
		
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Низ);
		
	Иначе
		
		// Картинка основного грида
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Низ;
		
		// Картинка грида номенклатуры контрагента
		ЭлементыФормы.ПанельОсновногоИзображенияКонтрагента.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельТабличныхПолей, ГраницаЭлементаУправления.Лево);
		ЭлементыФормы.РазделительКонтрагента.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельОсновногоИзображенияКонтрагента, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.ПанельОсновногоИзображенияКонтрагента.Свертка = РежимСверткиЭлементаУправления.Лево;
		ЭлементыФормы.РазделительКонтрагента.Свертка = РежимСверткиЭлементаУправления.Лево;
		
	КонецЕсли;
		
	ПоказатьОсновноеИзображение();
	
КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

// Процедура - обработчик нажатия на кнопку Изображения
//
Процедура ДействияФормыИзображение(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры // ДействияФормыИзображение()

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента СправочникСписок.
//
Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияПриАктивизацииСтроки", 0.1, Истина);	 
    
КонецПроцедуры // СправочникСписокПриАктивизацииСтроки()

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля СправочникСписок
//
Процедура ОбработчикОжиданияПриАктивизацииСтроки()
    
    ПоказатьОсновноеИзображение();
	ПоказатьОстаткиТоваров();
    
КонецПроцедуры // ОбработчикОжиданияПриАктивизацииСтроки

 
// Процедура устанавливает доступность элемента управления ВалютаЦены
Процедура ПроверитьДоступностьВалютуЦен()
	
	ЭлементыФормы.ВалютаЦены.Доступность = НЕ ВВалютеЦены;
	ЭлементыФормы.НадписьВалютаЦены.Доступность = НЕ ВВалютеЦены;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Если НЕ ЗначениеЗаполнено(КонтрагентОтбораНоменклатуры) Тогда
		мКнопкаПереключенияРежима.Доступность = Ложь;
		мКнопкаПереключенияРежима.Пометка = Ложь;
	Иначе
		мКнопкаПереключенияРежима.Доступность = Истина;
		Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьФормуВыбораСправочникаНоменклатураСОтборомПоПоставщику") = Истина Тогда
			мКнопкаПереключенияРежима.Пометка = Истина;
		КонецЕсли;
		СписокНоменклатурыКонтрагента.Отбор.Контрагент.Значение = КонтрагентОтбораНоменклатуры;
		СписокНоменклатурыКонтрагента.Отбор.Контрагент.Использование = Истина;
		ЭлементыФормы.СписокНоменклатурыКонтрагента.НастройкаОтбора.Контрагент.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьРежимОтображенияФормы();
	
	ПоказатьСпрятатьПанельОсновногоИзображения();
	УстановитьВидимостьОстатковНаСкладах();
		
	ЭлементыФормы.СписокНоменклатурыКонтрагента.НастройкаПорядка.Номенклатура.Доступность                   = Истина;
	ЭлементыФормы.СписокНоменклатурыКонтрагента.НастройкаПорядка.АртикулНоменклатурыКонтрагента.Доступность = Истина;
	
	СписокНоменклатурыКонтрагента.Порядок.Установить("Номенклатура ВОЗР");
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	мПоискОбъектовВСпискахДанных.СохранитьНастройки();
	
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.Изображение", ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка);
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.Остатки", ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОстаткиТоваровНаСкладах.Пометка);
	
	// сохранение параметров отображения остатков
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.ВВалютеЦены", ВВалютеЦены);
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.ВалютаЦены", ВалютаЦены);
	// список элементов СписокЦенОстатков помеченных галочками
	ПорядокСледованияТиповЦен = Новый Массив;
	ПорядокСледованияТиповЦен = СписокЦенОстатков.ВыгрузитьКолонку("Ссылка");
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.ПрядокСледованияЭлементовТиповЦен", ПорядокСледованияТиповЦен);
	СохранитьЗначение("Справочники.Номенклатура.ФормаВыбора.СписокПомеченныхЭлементовТиповЦен", мСписокПрефиксовЦен);

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	мПоискОбъектовВСпискахДанных.ВосстановитьНастройки(ЭлементыФормы.ТипПоискаДанных);
	мПоискОбъектовВСпискахДанных.ВосстановитьСписокОтбораДанных();
	
	мКоличествоБазовыхКолонокОстаткиТоваров = ЭлементыФормы.ТабличноеПолеОстаткиТоваров.Колонки.Количество();
	
	ПоказыватьКартинку = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.Изображение");
	ПоказыватьОстатки  = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.Остатки");

	Если ПоказыватьКартинку = Неопределено Тогда
		ПоказыватьКартинку = Истина;
	КонецЕсли;
	Если ПоказыватьОстатки = Неопределено Тогда
		ПоказыватьОстатки = Ложь;
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.Изображение.Пометка = ПоказыватьКартинку;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ОстаткиТоваровНаСкладах.Пометка = ПоказыватьОстатки;
	
	// восстановление параметров отображения остатков
	ВВалютеЦены = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.ВВалютеЦены");
	ВалютаЦены = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.ВалютаЦены");
	
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов")
	КонецЕсли;
	
	Если (ВВалютеЦены = Неопределено) Или НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВВалютеЦены = Истина;	
	КонецЕсли;
	ПроверитьДоступностьВалютуЦен();
	
	// восстанавливаем выделенные элементы у СписокЦенОстатков
	СписокПомеченныхЭлементовТиповЦен = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.СписокПомеченныхЭлементовТиповЦен");
	УправлениеЗапасами.ОбновитьСписокТиповЦен(СписокЦенОстатков, СписокПомеченныхЭлементовТиповЦен);
		
	ПорядокСледованияТиповЦен = ВосстановитьЗначение("Справочники.Номенклатура.ФормаВыбора.ПрядокСледованияЭлементовТиповЦен");
	УправлениеЗапасами.УпорядочитьСписокТиповЦен(СписокЦенОстатков, ПорядокСледованияТиповЦен);
	
	ПерестроитьДеревоОстатков();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		ПоказатьОсновноеИзображение();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗакрытиеФормыПоиска"
		И Источник = ЭтаФорма Тогда
		
		// обновляем выпадающий список настроек отбора данных
		мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	
	ИначеЕсли ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		ПоказатьОсновноеИзображение();
	Иначе
		Если (ИмяСобытия = "ОбновитьФорму" И Источник = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка)
		 ИЛИ (ИмяСобытия = "ЗаписанЭлементНоменклатуры" И Параметр = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
			Обновить();
			ПоказатьОсновноеИзображение();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы ДействияФормы.НоменклатураКонтрагента.
//
Процедура ДействияФормыНоменклатураКонтрагента(Кнопка)
	
	мКнопкаПереключенияРежима.Пометка = НЕ мКнопкаПереключенияРежима.Пометка;
	УстановитьРежимОтображенияФормы();
	
КонецПроцедуры

// Показывает/Скрывает табличное поле остатков товаров на складах
//
Процедура ДействияФормыОстаткиТоваровНаСкладах(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	УстановитьВидимостьОстатковНаСкладах();
	
	Если Кнопка.Пометка Тогда
		ПоказатьОстаткиТоваров();
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" элемента формы ОсновноеИзображение.
//
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	ТекущиеДанныеСписка = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено ИЛИ ТекущиеДанныеСписка.ЭтоГруппа Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСписка.ОсновноеИзображение.Пустая() Тогда
		Предупреждение("Основное изображение номенклатуры не задано!");
		Возврат;
	КонецЕсли;
	
	РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ТекущиеДанныеСписка.ОсновноеИзображение, ТекущиеДанныеСписка.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура ДействияФормыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура - обработчик события "Нажатие" элемента формы ОсновноеИзображение.
//
Процедура СписокНоменклатурыКонтрагентаПриАктивизацииСтроки(Элемент)

	ПоказатьОсновноеИзображение();

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" элемента формы СписокНоменклатурыКонтрагента.
//
Процедура СписокНоменклатурыКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПоказатьОсновноеИзображение();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ОсновноеИзображениеКонтрагента.
//
Процедура ОсновноеИзображениеКонтрагентаНажатие(Элемент)
	
	ТекущиеДанныеСписка = ЭлементыФормы.СписокНоменклатурыКонтрагента.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанныеСписка.Номенклатура) ИЛИ ТекущиеДанныеСписка.Номенклатура.ЭтоГруппа Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСписка.Номенклатура.ОсновноеИзображение.Пустая() Тогда
		Предупреждение("Основное изображение номенклатуры не задано!");
		Возврат;
	КонецЕсли;
	
	РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ТекущиеДанныеСписка.Номенклатура.ОсновноеИзображение, ТекущиеДанныеСписка.Номенклатура);
	
КонецПроцедуры

// Процедура - обработчик события "Выбор" элемента формы СписокНоменклатурыКонтрагента.
//
Процедура СписокНоменклатурыКонтрагентаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОповеститьОВыборе(ВыбраннаяСтрока.Номенклатура);
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ ДЛЯ ОТОБРАЖЕНИЯ ОСТАТКОВ ТОВАРОВ

// Процедура - обработчик события Выбор элемента управления ТабличноеПолеОстаткиТоваров.
//
Процедура ТабличноеПолеОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Если Колонка.Имя = "ХарактеристикаСклад" 
			И НЕ мСтруктураПриВыбореЗначения = Неопределено Тогда
			ОповеститьОВыборе(ПодготовитьДанныеСтруктуры(ВыбраннаяСтрока));
		Иначе
			РаботаСДиалогами.ОбработатьВыборТаблицаОстатков(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события ПриВыводеСтроки элемента управления ТабличноеПолеОстаткиТоваров.
//
Процедура ТабличноеПолеОстаткиТоваровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиБезЦены(Элемент, ОформлениеСтроки, ДанныеСтроки, Истина, ЭлементыФормы.СправочникСписок.ТекущиеДанные);
	РаботаСДиалогами.ПриВыводеСуммОстатковНоменклатуры(ОформлениеСтроки, ДанныеСтроки, мСписокПрефиксовЦен, ВВалютеЦены);
	
КонецПроцедуры

// Процедура - обработчик "При изменении флажка" у табличного поля СписокЦенОстатков
Процедура СписокЦенОстатковПриИзмененииФлажка(Элемент, Колонка)
	
	КолонкаВДеревеОстатков = Неопределено;
	// если добавилась новая колонка
	Если Элемент.ТекущиеДанные.Пометка Тогда
		// а может колонка то есть в дереве, а в таблице она не отображается 
		КолонкаВДеревеОстатков = ОстаткиТоваров.Колонки.Найти(Элемент.ТекущиеДанные.Префикс + "Цена");
		
		Если КолонкаВДеревеОстатков = Неопределено Тогда
			// поля в дереве нет - надо все пересчитать
			ОстаткиТоваров = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
		КонецЕсли;
		// обновляем суммы
		ПоказатьОстаткиТоваров();
		
	Иначе
		// обновляем список префиксов видымых цен
		мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
	КонецЕсли;
	
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
		
КонецПроцедуры

// Процедура - обработчик  "При Изменении" поля ввода ВалютаЦены
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик  "При Изменении" поля выбора ВыборТипаРасчетаВалюты
Процедура ВыборТипаРасчетаВалютыПриИзменении(Элемент)
	
	ПроверитьДоступностьВалютуЦен();
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Пометить все типы цен"
Процедура КоманднаяПанельТипыЦенДействие(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Истина);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Отменить пометку всех типов цен"
Процедура КоманднаяПанельТипыЦенОтменитьВсе(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Ложь);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Обновить" у типов цен
Процедура КоманднаяПанельТипыЦенОбновить(Кнопка)
	
	УправлениеЗапасами.ОбновитьИУпорядочитьСписокТиповЦен(СписокЦенОстатков);	
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Переместить вверх" у типов цен
Процедура КоманднаяПанельТипыЦенПереместитьВверх(Кнопка)

	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Истина);
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Переместить вниз" у типов цен
Процедура КоманднаяПанельТипыЦенПереместитьВниз(Кнопка)
	
	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Ложь);
	
КонецПроцедуры

// Процедура - обработчик "Перед удалением" у типов цен
Процедура СписокЦенОстатковПередУдалением(Элемент, Отказ)
	// Удалять ничего нельзя
	Отказ = Истина; 
КонецПроцедуры

// Процедура - обработчик "Перед началом добавления" у типов цен
Процедура СписокЦенОстатковПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Добавлять ничего нельзя
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик "Окончание перетаскивания" у типов цен
Процедура СписокЦенОстатковОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьПорядокКолонокСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров) 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	ОповеститьОВыборе(Номенклатура);
	Если Не ЗакрыватьПриВыборе Тогда
		ТекущийЭлемент.ТекущаяСтрока = Номенклатура;
	КонецЕсли;

	Возврат Истина;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

//УНИВЕРСАЛЬНЫЙ ПОИСК ОБЪЕКТОВ
///////////////////////////////////////////////////////////////////////////////

// Процедура - обработчик события ПриИзменении элемента управления ЗначениеОтбораСпискаНоменклатуры.
//
Процедура ЗначениеОтбораСпискаНоменклатурыПриИзменении(Элемент)
	
	мПоискОбъектовВСпискахДанных.ЗначениеОтбораПоискаданныхПриИзменении(Элемент, ЗначениеОтбораСпискаНоменклатуры);
	
КонецПроцедуры

// Процедура - обработчик события АвтоПодборТекста элемента управления ЗначениеОтбораСпискаНоменклатуры.
//
Процедура ЗначениеОтбораСпискаНоменклатурыАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// при выводе строки списка
Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мПоискОбъектовВСпискахДанных.СписокПриВыводеСтрокиСпискаОтбораДанных(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ТипПоискаДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// обработка выбора элемента из списка
	мПоискОбъектовВСпискахДанных.ОбработатьВыборТипаОграниченияИзСписка(ЭтаФорма, Элемент, ВыбранноеЗначение, 
		СтандартнаяОбработка, ЗначениеОтбораСпискаНоменклатуры);
	
КонецПроцедуры

// кнопка открытия настройки
Процедура ТипПоискаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанныхОткрытие(ЗначениеОтбораСпискаНоменклатуры, Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если (НЕ мСтруктураПриВыбореЗначения = Неопределено) И (НЕ ВыбраннаяСтрока.ЭтоГруппа) Тогда
		ПодготовитьДанныеСтруктуры();
	КонецЕсли;
	
КонецПроцедуры


мПустаяКартинка = Новый Картинка;

мКнопкаПереключенияРежима = ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.НоменклатураКонтрагента;

СправочникСписок.Колонки.Добавить("ОсновноеИзображение");
СправочникСписок.Колонки.Добавить("ВестиУчетПоХарактеристикам");
СправочникСписок.Колонки.Добавить("ЕдиницаХраненияОстатков");

мСписокЗначенийОтбораНоменклатуры	= Новый СписокЗначений;
мСоответствиеКурсовВалют				= Новый Соответствие;

мПоискОбъектовВСпискахДанных = МодульПоискаВДанных.СоздатьОбъектПоискаДанныхДляНоменклатуры(ЭлементыФормы.ЗначениеОтбораСпискаНоменклатуры, 
	ЭлементыФормы.СправочникСписок, СправочникСписок);

