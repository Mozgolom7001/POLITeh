Перем мВалютаРегламентированногоУчета Экспорт;
Перем УстановкаСкидокНоменклатуры;
Перем ОтменаСкидок;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет реквизиты нового элемента справочника
//
Процедура ЗаполнитьНовыйЭлемент() Экспорт

	ЗаполнитьСписокВыбораВидаДоговора();

	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		Если НЕ ЗначениеЗаполнено(Владелец) Тогда
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		Иначе
			Если Владелец.Покупатель Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			ИначеЕсли Владелец.Поставщик Тогда
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			Иначе
				ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
			ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
			Если НЕ ЗначениеЗаполнено(ВедениеВзаиморасчетов) Тогда
				ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Владелец.НеЯвляетсяРезидентом И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РеализацияНаЭкспорт = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидУсловийДоговора) Тогда
		ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
	КонецЕсли;

	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");
	КонецЕсли;

	Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
	 ИЛИ  ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
	   И ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда
		РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
	КонецЕсли;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
	КонецЕсли;

	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
	 ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
		ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
	КонецЕсли;

	УстановитьТипЦенДоговора();

КонецПроцедуры // ЗаполнитьНовыйЭлемент()

// Процедура рассчитывает скидки контрагента.
//
Процедура ПоказатьСкидки()
	//Заполним таблицу скидок по договору.
	СписокПолучателей = Новый СписокЗначений;
	СписокПолучателей.Добавить(Владелец);
	СписокПолучателей.Добавить(Ссылка);
	СписокПолучателей.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПолучателей" , СписокПолучателей);
	Запрос.УстановитьПараметр("ПустаяДата"        , '00010101000000');
	Запрос.УстановитьПараметр("ДатаНачалаПериода"        , ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода"        , ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("УсловиеСуммы"        , Перечисления.УсловияСкидкиНаценки.ПоСуммеДокумента);

	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Записи.ПолучательСкидки,
	|	Записи.ПроцентСкидкиНаценки КАК Процент,
	|	Записи.Номенклатура.Представление КАК Номенклатура,
	|	Записи.ХарактеристикаНоменклатуры.Представление КАК Характеристика,
	|	Записи.Качество.Представление КАК Качество,
	|	Записи.Условие,
	|	Записи.ЗначениеУсловия КАК ЗначениеУсловия,
	|	Записи.Регистратор.Ссылка КАК УстановкаСкидокНоменклатуры,
	|	Записи.Регистратор.Представление,
	|	Записи.Период КАК Начало,
	|	ВЫБОР КОГДА Записи.ДатаОкончания > ОтменыСкидок.ДатаОтмены
	|			ИЛИ Записи.ДатаОкончания = &ПустаяДата ТОГДА
	|		ОтменыСкидок.ДатаОтмены
	|	ИНАЧЕ
	|		Записи.ДатаОкончания
	|	КОНЕЦ КАК Окончание,
	|	ВремяДействия.ДеньНедели,
	|	ВремяДействия.ВремяНачала,
	|	ВремяДействия.ВремяОкончания,
	|	Записи.ОграничениеСкидкиНаценки КАК ОграничениеСкидкиНаценки,
	|	ОтменыСкидок.Регистратор КАК ОтменаСкидок,
	|	ВЫБОР КОГДА Записи.Условие = &УсловиеСуммы ТОГДА
	|		Записи.Валюта.Представление
	|	ИНАЧЕ Неопределено
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	РегистрСведений.СкидкиНаценкиНоменклатуры КАК Записи
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|
	|	(ВЫБРАТЬ
	|		ОтменаСкидокНоменклатурыДокументы.УстановкаСкидокНоменклатуры,
	|		ВложенныйЗапрос.ПолучательСкидки,
	|		ВложенныйЗапрос.Номенклатура,
	|		ВложенныйЗапрос.ХарактеристикаНоменклатуры,
	|		ВложенныйЗапрос.Качество,
	|		ВложенныйЗапрос.Регистратор,
	|		ВложенныйЗапрос.Период КАК ДатаОтмены
	|		ИЗ
	|		(ВЫБРАТЬ
	|			СкидкиНаценкиНоменклатуры.ПолучательСкидки КАК ПолучательСкидки,
	|			СкидкиНаценкиНоменклатуры.Номенклатура КАК Номенклатура,
	|			СкидкиНаценкиНоменклатуры.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|			СкидкиНаценкиНоменклатуры.Качество КАК Качество,
	|			СкидкиНаценкиНоменклатуры.Регистратор КАК Регистратор,
	|			СкидкиНаценкиНоменклатуры.Период КАК Период
	|			ИЗ
	|				РегистрСведений.СкидкиНаценкиНоменклатуры КАК СкидкиНаценкиНоменклатуры
	|			ГДЕ
	|				СкидкиНаценкиНоменклатуры.ПолучательСкидки В (&СписокПолучателей)
	|				И СкидкиНаценкиНоменклатуры.Период <= &ДатаОкончанияПериода
	|				И НЕ Выразить (СкидкиНаценкиНоменклатуры.Регистратор КАК Документ.ОтменаСкидокНоменклатуры) ЕСТЬ NULL
	|		) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтменаСкидокНоменклатуры.Документы КАК ОтменаСкидокНоменклатурыДокументы
	|		ПО ВложенныйЗапрос.Регистратор = ОтменаСкидокНоменклатурыДокументы.Ссылка
	|	)КАК ОтменыСкидок
	|ПО
	|	Записи.Регистратор = ОтменыСкидок.УстановкаСкидокНоменклатуры
	|	И ОтменыСкидок.ПолучательСкидки = Записи.ПолучательСкидки
	|	И ОтменыСкидок.Номенклатура = Записи.Номенклатура
	|	И ОтменыСкидок.ХарактеристикаНоменклатуры = Записи.ХарактеристикаНоменклатуры
	|	И ОтменыСкидок.Качество = Записи.Качество
	|Левое СОЕДИНЕНИЕ РегистрСведений.ВремяДействияСкидок КАК ВремяДействия
	|	ПО Записи.Регистратор = ВремяДействия.Регистратор
	|
	|ГДЕ Записи.ПолучательСкидки В (&СписокПолучателей)
	|	И (Записи.ПроцентСкидкиНаценки <> 0)
	|	И (
	// Начало периода скидок меньше начала выбранного периода и окончание периода скидок больше начала выбранного периода.
	|		((Записи.Период < &ДатаНачалаПериода) И (Записи.ДатаОкончания >= &ДатаНачалаПериода ИЛИ Записи.ДатаОкончания = &ПустаяДата))
	|	ИЛИ ((Записи.Период >= &ДатаНачалаПериода) И (Записи.Период <= &ДатаОкончанияПериода)))
	|УПОРЯДОЧИТЬ ПО
	|	Записи.ПолучательСкидки,
	|	Номенклатура,
	|	Характеристика,
	|	Качество,
	|	Условие,
	|	ЗначениеУсловия,
	|	ВремяДействия.ДеньНедели,
	|	ВремяДействия.ВремяНачала,
	|	ВремяДействия.ВремяОкончания,
	|	Процент УБЫВ,
	|	Начало ВОЗР
	|АВТОУПОРЯДОЧИВАНИЕ
	|";

	Запрос.Текст           = Текст;
	Скидки = Запрос.Выполнить().Выгрузить();
	ПредыдущаяСкидка = Неопределено;
	СтрокиКУдалению = Новый Массив;
	Для Каждого ТекСкидка Из Скидки Цикл
		Если ПредыдущаяСкидка <> Неопределено Тогда
			Если ТекСкидка.Номенклатура = ПредыдущаяСкидка.Номенклатура
			   И ТекСкидка.Характеристика = ПредыдущаяСкидка.Характеристика
			   И ТекСкидка.Качество = ПредыдущаяСкидка.Качество
			   И ТекСкидка.Условие = ПредыдущаяСкидка.Условие
			   И ТекСкидка.ЗначениеУсловия = ПредыдущаяСкидка.ЗначениеУсловия
			   И ТекСкидка.ДеньНедели = ПредыдущаяСкидка.ДеньНедели
			   И ТекСкидка.ВремяНачала = ПредыдущаяСкидка.ВремяНачала
			   И ТекСкидка.ВремяОкончания = ПредыдущаяСкидка.ВремяОкончания
			   И ТекСкидка.Начало > ПредыдущаяСкидка.Начало
			   Тогда
				СтрокиКУдалению.Добавить(ПредыдущаяСкидка);
			КонецЕсли;
		КонецЕсли;
		ПредыдущаяСкидка = ТекСкидка;
	КонецЦикла;

	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		Скидки.Удалить(СтрокаКУдалению);
	КонецЦикла;
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
Процедура ОбновитьСвойства()
	ЭлементыФормы.Панель.Страницы.Свойства.Доступность       = НЕ ЭтоНовый();
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Ссылка;
	Свойства.ОбъектОтбораНазначений = Ссылка;
	
	Свойства.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

// Процедура обновляет информацию в таблице категорий объекта.
//
Процедура ОбновитьКатегории()
    ЭлементыФормы.Панель.Страницы.Категории.Доступность      = НЕ ЭтоНовый();
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;

	Категории.ОбъектОтбораКатегорий = Ссылка;

	Категории.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура заполняет список значений для выбора ЭУ ВидДоговора
//
Процедура ЗаполнитьСписокВыбораВидаДоговора()

	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Владелец) Тогда
		РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее());
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
	Иначе
		Если ЭтотОбъект.Владелец.Покупатель И ЭтотОбъект.Владелец.Поставщик Тогда
			РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ВидыДоговоровКонтрагентов"));
		ИначеЕсли ЭтотОбъект.Владелец.Покупатель Тогда
			РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовДляПокупателя());
		ИначеЕсли ЭтотОбъект.Владелец.Поставщик Тогда
			РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовДляПоставщика());
		Иначе
			РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ВидДоговора, УправлениеВзаиморасчетами.ПолучитьСписокВидовДоговоровВзаиморасчетовПрочее());
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет список значений для выбора ЭУ ВедениеВзаиморасчетов
//
Процедура ЗаполнитьСписокВыбораВедениеВзаиморасчетов()
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Вставить(0, Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокВыбора.Вставить(1, Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	СписокВыбора.Вставить(2, Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
	
	РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.ВедениеВзаиморасчетов, СписокВыбора);
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность для элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Управление видимостью элементов формы

	Если ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ВидимостьКонтроляДней = Истина;
	Иначе
		ВидимостьКонтроляДней = Ложь;
	КонецЕсли;

	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		  ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		  ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ВидимостьОбщихЭлементов     = Истина;
	Иначе
		ВидимостьОбщихЭлементов     = Ложь;
	КонецЕсли;

	Если ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
	 ИЛИ ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		ВидимостьПроцентаПредоплаты = Истина;
		ВидимостьУчетаТоваров       = Истина;
	Иначе
		ВидимостьПроцентаПредоплаты = Ложь;
		ВидимостьУчетаТоваров       = Ложь;
	КонецЕсли;

	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ВидимостьПроцентаПредоплаты = Ложь;
	КонецЕсли;

	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидимостьУчетаТоваров       = Ложь;
	КонецЕсли;

	Если ВидДоговора.Пустая() ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ЭлементыФормы.ВедениеВзаиморасчетов.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ВедениеВзаиморасчетов.Доступность = Истина;
	КонецЕсли;

	// Установка видимости общих реквизитов контроля
	ЭлементыФормы.РамкаГруппыКонтрольДебиторскойЗадолженности.Видимость  = ВидимостьОбщихЭлементов;
	ЭлементыФормы.КонтролироватьСуммуЗадолженности.Видимость             = ВидимостьОбщихЭлементов;
	Если ВидимостьОбщихЭлементов Тогда
		ЭлементыФормы.ДопустимаяСуммаЗадолженности.Видимость             = КонтролироватьСуммуЗадолженности;
	Иначе
		ЭлементыФормы.ДопустимаяСуммаЗадолженности.Видимость             = ВидимостьОбщихЭлементов;
	КонецЕсли;

	// Установка видимости реквизитов контроля дней
	ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Видимость         = ВидимостьКонтроляДней;
	Если ВидимостьКонтроляДней Тогда
		ЭлементыФормы.ДопустимоеЧислоДнейЗадолженности.Видимость         = КонтролироватьЧислоДнейЗадолженности;
	Иначе
		ЭлементыФормы.ДопустимоеЧислоДнейЗадолженности.Видимость         = ВидимостьКонтроляДней;
	КонецЕсли;

	// Установка видимости реквизитов процента предоплаты
	ЭлементыФормы.НадписьПроцентПредоплаты.Видимость                     = ВидимостьПроцентаПредоплаты;
	ЭлементыФормы.ПроцентПредоплаты.Видимость                            = ВидимостьПроцентаПредоплаты;

	// Закладка "Учет товаров"
	ЭлементыФормы.Панель.Страницы.УчетТоваров.Видимость   = ВидимостьУчетаТоваров;
	Если ВидимостьУчетаТоваров Тогда
		// Установка видимости и доступности полей настройки авторезервирования
		ЭлементыФормы.ЧислоДнейРезерваБезОплаты.Видимость = ДержатьРезервБезОплатыОграниченноеВремя;
	КонецЕсли;

	// Установка видимости реквизита реализации на экспорт
	Если ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ЭлементыФормы.РеализацияНаЭкспорт.Видимость = Ложь;
	Иначе
		ЭлементыФормы.РеализацияНаЭкспорт.Видимость = Истина;
	КонецЕсли;
	
	// Страницы условий договора
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее ИЛИ ВидДоговора.Пустая() Тогда
		ЭлементыФормы.ВидУсловийДоговора.Доступность            = Ложь;
		ЭлементыФормы.Панель.Страницы.УсловияДоговора.Видимость = Ложь;
		ЭлементыФормы.Панель.Страницы.Дополнительно.Видимость   = Ложь;
	Иначе
		ЭлементыФормы.ВидУсловийДоговора.Доступность = Истина;
		Если ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий ИЛИ ВидУсловийДоговора.Пустая() Тогда
			ЭлементыФормы.Панель.Страницы.УсловияДоговора.Видимость = Ложь;
		Иначе
			ЭлементыФормы.Панель.Страницы.УсловияДоговора.Видимость = Истина;
		КонецЕсли; 
		ЭлементыФормы.Панель.Страницы.Дополнительно.Видимость = Истина;
	КонецЕсли;

	// Закладка "Дополнительно"
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ЭлементыФормы.ПанельНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНДС.Страницы.НДСсАвансов;
		Если ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка() Тогда
			ЭлементыФормы.ПанельАвансы.ТекущаяСтраница = ЭлементыФормы.ПанельАвансы.Страницы.Информация;
		Иначе
			ЭлементыФормы.ПанельАвансы.ТекущаяСтраница = ЭлементыФормы.ПанельАвансы.Страницы.НеРегистрировать;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНДС.Страницы.НДСНалоговыйАгент;
	КонецЕсли;		
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ЭлементыФормы.РамкаГруппыНДСВКачествеНалоговогоАгента.Видимость = Истина;
		ЭлементыФормы.УчетАгентскогоНДС.Видимость = Истина;
		ЭлементыФормы.ТекстВидАгентскогоДоговора.Видимость = УчетАгентскогоНДС;
		ЭлементыФормы.ВидАгентскогоДоговора.Видимость = УчетАгентскогоНДС;
	Иначе
		ЭлементыФормы.ВидАгентскогоДоговора.Видимость = Ложь;
		ЭлементыФормы.УчетАгентскогоНДС.Видимость = Ложь;
		ЭлементыФормы.ТекстВидАгентскогоДоговора.Видимость = Ложь;
		ЭлементыФормы.РамкаГруппыНДСВКачествеНалоговогоАгента.Видимость = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(Неопределено, ЭлементыФормы, "НадписьПроект,ОсновнойПроект");

	// Закладка "Скидки"
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ЭлементыФормы.Панель.Страницы.Скидки.Видимость= Истина;
	Иначе
		ЭлементыФормы.Панель.Страницы.Скидки.Видимость= Ложь;
	КонецЕсли;

	//Видимость и доступность флага "Расчеты в условных единицах"
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		ИначеЕсли УчетАгентскогоНДС тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		Иначе  
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Истина;
		Конецесли;
	Иначе
		ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
	КонецЕсли;

	ДоговорКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭлементыФормы.КонтролироватьДенежныеСредстваКомитента.Доступность  = ДоговорКомиссии;
	ЭлементыФормы.СпособРасчетаКомиссионногоВознаграждения.Доступность = ДоговорКомиссии;
	ЭлементыФормы.ПроцентКомиссионногоВознаграждения.Доступность       = ДоговорКомиссии;

	ЭлементыФормы.КонтролироватьДенежныеСредстваКомитента.Заголовок   = ?(ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "Контролировать денежные средства комиссионера",
															"Контролировать денежные средства комитента");

	ЭлементыФормы.ВестиПоДокументамРасчетовСКонтрагентами.Доступность = НЕ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
															
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает тип значения для типа цен договора в зависимости от вида контрагента (поставщик, покупатель)
// 
Процедура УстановитьТипЦенДоговора()

	Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) И ТипЗнч(ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		ТипЦен = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	ИначеЕсли (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И ТипЗнч(ТипЦен) <> Тип("СправочникСсылка.ТипыЦенНоменклатурыКонтрагентов") Тогда
		ТипЦен = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии".
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);

	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	
	Если СправочникОбъект.ЭтоНовый() Тогда

		ЗаполнитьНовыйЭлемент();

	КонецЕсли;

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = Ссылка;
	
	ЭлементыФормы.ДокументыУсловияДоговора.НастройкаОтбора.ДокументыПоДоговоруКонтрагента.Доступность = Ложь;

	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
	 Или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ДатаНачалаПериода = ТекущаяДата();
		ДатаОкончанияПериода = ДатаНачалаПериода;
	КонецЕсли;

	ВСоответствииСУчетнойПолитикой = (ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка());

	ОбновитьСвойства();
	ОбновитьКатегории();
	
	УстановитьВидимость();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриИзмененииДанных".
//
Процедура ПриИзмененииДанных()
	
	ЗаполнитьСписокВыбораВидаДоговора();
	
	УстановитьВидимость();
	
	Свойства.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов;
	ОбновитьСвойства();
	
	Категории.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ДоговорыКонтрагентов;
	ОбновитьКатегории();
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения".
//
Процедура ОбновлениеОтображения()

	Если КонтролироватьСуммуЗадолженности Тогда
		Если ВалютаВзаиморасчетов.Пустая() Тогда
			ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Контролировать сумму задолженности, сумма :";
		Иначе
			ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Контролировать сумму задолженности, сумма (" + ВалютаВзаиморасчетов + ") не более:";
		КонецЕсли; 
	Иначе
		ЭлементыФормы.КонтролироватьСуммуЗадолженности.Заголовок = "Контролировать сумму задолженности";
	КонецЕсли; 

	Если КонтролироватьЧислоДнейЗадолженности Тогда
		ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Заголовок = "Контролировать число дней задолженности, число дней не более:";
	Иначе
		ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Заголовок = "Контролировать число дней задолженности";
	КонецЕсли; 

	Если ДержатьРезервБезОплатыОграниченноеВремя Тогда
		ЭлементыФормы.ДержатьРезервБезОплатыОграниченноеВремя.Заголовок = "Держать резерв без оплаты ограниченное время, дней не более:";
	Иначе
		ЭлементыФормы.ДержатьРезервБезОплатыОграниченноеВремя.Заголовок = "Держать резерв без оплаты ограниченное время";
	КонецЕсли; 

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ)
	
	// Очистим значения неиспользуемых реквизитов
	// Реквизиты закладки "Общие"
	Если НЕ ЭтаФорма.ЭлементыФормы.КонтролироватьСуммуЗадолженности.Видимость Тогда
		КонтролироватьСуммуЗадолженности = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.ЭлементыФормы.КонтролироватьЧислоДнейЗадолженности.Видимость Тогда
		КонтролироватьЧислоДнейЗадолженности = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.ЭлементыФормы.ПроцентПредоплаты.Видимость Тогда
		ПроцентПредоплаты = 0;
	КонецЕсли;
	
	Если Не КонтролироватьСуммуЗадолженности Тогда
		ДопустимаяСуммаЗадолженности = 0;
	КонецЕсли;

	Если Не КонтролироватьЧислоДнейЗадолженности Тогда
		ДопустимоеЧислоДнейЗадолженности = 0;
	КонецЕсли;

	// Реквизиты закладки "Учет товаров"
	ВидимостьЗакладкиУчетТоваров = ЭлементыФормы.Панель.Страницы.УчетТоваров.Видимость;
	
	Если НЕ ЭтаФорма.ЭлементыФормы.ДержатьРезервБезОплатыОграниченноеВремя.Видимость 
		ИЛИ НЕ ВидимостьЗакладкиУчетТоваров Тогда
		ДержатьРезервБезОплатыОграниченноеВремя = Ложь;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.ЭлементыФормы.ОбособленныйУчетТоваровПоЗаказамПокупателей.Видимость 
		ИЛИ НЕ ВидимостьЗакладкиУчетТоваров Тогда
		ОбособленныйУчетТоваровПоЗаказамПокупателей = Ложь;
	КонецЕсли;
	
	Если Не ДержатьРезервБезОплатыОграниченноеВремя Тогда
		ЧислоДнейРезерваБезОплаты = 0;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)

	Свойства.ЗаписатьЗначенияСвойств();
	Категории.ЗаписатьКатегорииОбъекта();
	
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Ссылка);
	КонецЕсли; 
	
	ОбновитьСвойства();
	ОбновитьКатегории();
	
	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	ДокументыУсловияДоговора.Отбор.ДокументыПоДоговоруКонтрагента.Значение      = Ссылка;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") И ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
	
		СписокКнопокФайлов = Новый СписокЗначений;
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
		СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
		РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		Свойства.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.Свойства);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		Категории.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" переключателя ведения взаиморасчетов.
//
Процедура ВедениеВзаиморасчетовПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ВедениеВзаиморасчетовПриИзменении

// Процедура - обработчик события "ПриИзменении" переключателя ведения взаиморасчетов.
//
Процедура ВестиПоДокументамРасчетовСКонтрагентамиПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "КонтролироватьСуммуЗадолженности".
//
Процедура КонтролироватьСуммуЗадолженностиПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "КонтролироватьЧислоДнейЗадолженности".
//
Процедура КонтролироватьЧислоДнейЗадолженностиПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ДержатьРезервБезОплатыОграниченноеВремя".
//
Процедура ДержатьРезервБезОплатыОграниченноеВремяПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик нажатия кнопки Файлы, меню ДействияФормы.
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия кнопки НоваяЗадача, меню ДействияФормы.
//
Процедура ДействияФормыНоваяЗадача(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		РаботаСДиалогами.ПроверитьЗадачиПоОбъекту(Ссылка);
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыНоваяЗадача()

// Процедура - обработчик нажатия пункта СписокЗадач, подменю Перейти, меню ДействияФормы.
//
Процедура ДействияФормыСписокЗадач(Кнопка)
	
	РаботаСДиалогами.ОткрытьЗадачиТекущегоПользователя(Ссылка);
	
КонецПроцедуры // ДействияФормыСписокЗадач()

// Процедура - обработчик события "Очистка" элемента формы ВидУсловийДоговора.
//
Процедура ВидУсловийДоговораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ВидУсловийДоговора.
//
Процедура ВидУсловийДоговораПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий
		И ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.УсловияДоговора Тогда
	
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Общие;
	
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы ДокументыУсловияДоговора.
//
Процедура ДокументыУсловияДоговораПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Копирование Тогда
	
		Отказ = Истина;
		
		ДокОбъект = Документы.УсловияПоставокПоДоговорамКонтрагентов.СоздатьДокумент();
		
		ДокОбъект.Контрагент            = ЭтотОбъект.Владелец;
		ДокОбъект.ДоговорКонтрагента = Ссылка;
		
		ДокОбъект.ПолучитьФорму().Открыть();
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ВидДоговора.
//
Процедура ВидДоговораПриИзменении(Элемент)

	Если ВидДоговора.Пустая() ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		ВидУсловийДоговора                       = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;
		ВедениеВзаиморасчетов                    = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		ТипЦен                                   = Неопределено;
		СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПустаяСсылка();
		ПроцентКомиссионногоВознаграждения       = 0;
		ВестиПоДокументамРасчетовСКонтрагентом   = Ложь;
	КонецЕсли;

	//Зачистка флага "Расчеты в условных единицах" для всех видов договоров кроме договоров в поставщиком и с покупателем
	Если не (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	//Зачистка флага "Реализация на экспорт" для всех видов договоров кроме договора с покупателем
	Если Не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		РеализацияНаЭкспорт = Ложь;
	КонецЕсли;
	
	//Группа - НДС в качестве налогового агента
	Если УчетАгентскогоНДС 
		И НЕ (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда
		УчетАгентскогоНДС = Ложь;
		ВидАгентскогоДоговора = Неопределено;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьТипЦенДоговора();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы ТипЦенПокупки.
//
Процедура ТипЦенПокупкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УстановитьТипЦенДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы ТипЦенПокупки.
//
Процедура ТипЦенПокупкиОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьТипЦенДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВидДоговора.
//
Процедура ВидДоговораНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораВидаДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "УчетАгентскогоНДС".
//
Процедура УчетАгентскогоНДСПриИзменении(Элемент)
	
	Если (НЕ ЗначениеЗаполнено(ВидАгентскогоДоговора)) И УчетАгентскогоНДС Тогда
		// Установим значение "по умолчанию"
		ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда;
	КонецЕсли;
	Если РасчетыВУсловныхЕдиницах И УчетАгентскогоНДС тогда
		//Зачистка флага "Расчеты в условных единицах" при исполнении обязанности налогового агента по уплате НДС
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	УстановитьВидимость();	
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы "КоманднаяПанельДокументыУсловияДоговора.Анализ".
//
Процедура КоманднаяПанельДокументыУсловияДоговораАнализ(Кнопка)
	
	Если ЭлементыФормы.ДокументыУсловияДоговора.ТекущиеДанные <> Неопределено Тогда
		УправлениеКонтактами.СформироватьАнализУсловийДоговораВзаиморасчетов(глЗначениеПеременной("глТекущийПользователь"), ЭлементыФормы.ДокументыУсловияДоговора.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета  Тогда
	//Зачистка флага "Расчеты в условных единицах" и "Реализация на экспорт" для валюты, совпадающей с валютой рег. учета
		Если РасчетыВУсловныхЕдиницах тогда
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
	КонецЕсли;
    УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" элемента формы "Скидки".
//
Процедура СкидкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" элемента формы "Скидки".
//
Процедура СкидкиПередНачаломИзменения(Элемент, Отказ)

	Если ЭлементыФормы.Скидки.ТекущаяКолонка.Имя = "ОтменаСкидок" Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОтменаСкидок) Тогда
			Отказ = Истина;
		Иначе
			ОтменаСкидок = Элемент.ТекущиеДанные.ОтменаСкидок;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.Скидки.ТекущаяКолонка.Имя = "УстановкаСкидокНоменклатуры" Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.УстановкаСкидокНоменклатуры) Тогда
			Отказ = Истина;
		Иначе
			УстановкаСкидокНоменклатуры = Элемент.ТекущиеДанные.УстановкаСкидокНоменклатуры;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" элемента формы "Скидки".
//
Процедура СкидкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура КнопкаПоказатьНажатие(Элемент)
	ПоказатьСкидки();
КонецПроцедуры

Процедура СкидкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Элемент.ТекущиеДанные.УстановкаСкидокНоменклатуры = УстановкаСкидокНоменклатуры;
	Элемент.ТекущиеДанные.ОтменаСкидок = ОтменаСкидок;
КонецПроцедуры

Процедура ОсновнойПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВСоответствииСУчетнойПолитикойПриИзменении(Элемент)
	
	Если ВСоответствииСУчетнойПолитикой Тогда
		ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка();
	ИначеЕсли ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка() Тогда
		ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА СВОЙСТВ

// Обработчик события ПередНачаломДобавления элемента формы Свойства.
//
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Свойства.
//
Процедура СвойстваПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы Свойства.
//
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Свойства.
//
Процедура СвойстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Свойства.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Свойства.Значение.
//
Процедура СвойстваЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента формы Свойства.Значение.
//
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.Свойства.ТекущиеДанные.Значение = Неопределено;
	
	Свойства.ПривестиТипЗначенияСвойства(ЭлементыФормы.Свойства.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента формы Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Категории.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Категории.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)

	Модифицированность = Истина;

КонецПроцедуры

Процедура ПослеЗаписи()
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры


ЗаполнитьСписокВыбораВидаДоговора();
ЗаполнитьСписокВыбораВедениеВзаиморасчетов();
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");

