Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;
Перем мКнопкаРедактироватьКИВДиалоге;
Перем мОбъектКИ;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ОбновитьКИ();
	Если Не ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Права);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительПрава);
	КонецЕсли;

	// ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы

КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);

	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;

	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 

	Если ЭтоНовый() Тогда
		ОсновнойБанковскийСчет = Неопределено;
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ОтражатьВРегламентированномУчете = Истина;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();

КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Обработчик события "ПриИзмененииДанных" формы.
//
Процедура ПриИзмененииДанных()

	//Заполним руководителя
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации.Руководитель;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.Руководитель.Значение = Неопределено;
	Иначе
		ЭлементыФормы.Руководитель.Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

	//Заполним главного бухгалтера
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.ГлавныйБухгалтер.Значение = Неопределено;
	Иначе
		ЭлементыФормы.ГлавныйБухгалтер.Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

	//Заполним кассира
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации.Кассир;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.Кассир.Значение = Неопределено;
	Иначе
		ЭлементыФормы.Кассир.Значение       = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры // ПриИзмененииДанных()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	Если ТипЗнч(мОбъектКИ) = Тип("СправочникСсылка.Организации") Тогда
		мОбъектКИ = Ссылка;
	КонецЕсли;

	Если мОбъектКИ <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);
	КонецЕсли;

	ЗаписатьОтветственноеЛицо("Руководитель", Отказ);
	ЗаписатьОтветственноеЛицо("ГлавныйБухгалтер", Отказ);
	ЗаписатьОтветственноеЛицо("Кассир", Отказ);

	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

КонецПроцедуры

// Процедура - обработчик пришедшего оповещения.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") и Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;

	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

Процедура ДействияФормыВыгрузитьОбъектВФайл(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.БыстрыйОбменСформироватьНовыйЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события НачалоВыбора элемента формы ОсновнойБанковскийСчет.
//
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПрава(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(мОбъектКИ));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(мОбъектКИ)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(мОбъектКИ)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);

КонецПроцедуры

// Обработчик нажатия на кнопку УстановитьОсновным командной панели КоманднаяПанельКонтактнаяИнформация.
//
Процедура КоманднаяПанельКонтактнаяИнформацияУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Процедура определяет текущий объект для отображения контактной информации
// и выводит контактную информацию для объекта в табличное поле КонтактнаяИнформация.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьКИ()
	
	Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		ОбъектКИ = ПараметрОбъектКопирования;
	Иначе
		ОбъектКИ = Ссылка;
	КонецЕсли;
	
	Если ОбъектКИ = мОбъектКИ Тогда
		Возврат;
	Иначе
		мОбъектКИ = ОбъектКИ;
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация.Видимость = Истина;
	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		НаименованиеПлательщикаПриПеречисленииНалогов = Наименование;
	КонецЕсли;
		
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов управления формы 
// в зависимости от значений реквизитов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеВидимостьюИДоступностьюЭлементовФормы()

	ЭтоФизЛицо = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);

	ЭлементыФормы.КПП.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьКПП.Видимость = НЕ ЭтоФизЛицо;

	ЭлементыФормы.НадписьОГРН.Заголовок = ?(ЭтоФизЛицо, "ОГРНИП:", "ОГРН:");
	ЭлементыФормы.ОГРН.Маска = ?(ЭтоФизЛицо, "999999999999999", "9999999999999");
	ЭлементыФормы.РамкаГруппыСвидетельствоОПостановке.Заголовок = ?(ЭтоФизЛицо, "Свидетельство о государственной регистрации", "Свидетельство о постановке на учет в налоговом органе");

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ОбновитьКИ();
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыПеречитать(Кнопка)
	
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки КнопкаИсторияРуководитель.
//
Процедура КнопкаИсторияРуководительНажатие(Элемент)

	ПросмотрИсторииОтветственногоЛица("Руководитель");

КонецПроцедуры // КнопкаИсторияРуководительНажатие()

// Обработчик события Нажатие кнопки КнопкаИсторияГлавныйБухгалтер.
//
Процедура КнопкаИсторияГлавныйБухгалтерНажатие(Элемент)

	ПросмотрИсторииОтветственногоЛица("ГлавныйБухгалтер");

КонецПроцедуры // КнопкаИсторияГлавныйБухгалтерНажатие()

// Обработчик события Нажатие кнопки КнопкаИсторияКассир.
//
Процедура КнопкаИсторияКассирНажатие(Элемент)

	ПросмотрИсторииОтветственногоЛица("Кассир");

КонецПроцедуры // КнопкаИсторияКассирНажатие()

// Процедура показывает историю изменения ответственного лица.
//
// Параметры:
//  ОтветственноеЛицо - строка, наименование ответственного лица, 
//                      информацию о котором нужно прочитать.
//
Процедура ПросмотрИсторииОтветственногоЛица(ОтветственноеЛицо)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
		Отбор.СтруктурнаяЕдиница = Ссылка;
		Отбор.ОтветственноеЛицо   = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];

		Форма = РегистрыСведений.ОтветственныеЛицаОрганизации.ПолучитьФорму("ФормаСписка", ЭтаФорма );
		Форма.ПараметрОтборПоИзмерению = Отбор;
		Форма.ЭлементыФормы.РегистрСведенийСписок.Колонки.СтруктурнаяЕдиница.Доступность = Ложь;
		Форма.ЭлементыФормы.РегистрСведенийСписок.Колонки.ОтветственноеЛицо.Доступность = Ложь;
		Форма.Открыть();

	КонецЕсли;

КонецПроцедуры // ПросмотрИсторииОтветственногоЛица()

// Процедура записывает данные об ответственном лице.
//
// Параметры:
//  ОтветственноеЛицо - строка, наименование ответственного лица, 
//                      информацию о котором нужно прочитать,
//  Отказ             - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьОтветственноеЛицо(ОтветственноеЛицо, Отказ)

	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	Отбор.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если Не ЗначениеЗаполнено(ЭлементыФормы[ОтветственноеЛицо].Значение) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если ЭлементыФормы[ОтветственноеЛицо].Значение = СрезПоследних[0].ФизическоеЛицо Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизации.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Период             = ТекущаяДата();
	МенеджерЗаписи.СтруктурнаяЕдиница = Ссылка;
	МенеджерЗаписи.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизации[ОтветственноеЛицо];
	МенеджерЗаписи.ФизическоеЛицо     = ЭлементыФормы[ОтветственноеЛицо].Значение;

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить("Не удалось записать данные об ответственном лице : """ + ОтветственноеЛицо + """" 
		         + ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьОтветственноеЛицо()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьСвойстваИЗначения()

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьКатегории()

Процедура ПослеЗаписи()
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

Процедура ПрефиксПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;

мИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
