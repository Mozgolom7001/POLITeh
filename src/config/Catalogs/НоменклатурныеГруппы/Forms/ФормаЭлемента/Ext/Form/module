Процедура УстановитьДоступностьСостава()
	
	Если Ссылка.Пустая() Тогда
		СписокГруппы.Отбор.Код.Установить("");
	Иначе
		СписокГруппы.Отбор.Сбросить();
		СписокГруппы.Отбор.НоменклатурнаяГруппа.Установить(Ссылка);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);

	Если ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
			БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьСостава();

КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
	
	Если Не ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		Предупреждение("Перед записью необходимо определить базовую единицу измерения!");
		Отказ = Истина;
	КонецЕсли;

	ПроверитьЕдиницуХраненияОстатков(Отказ);
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

КонецПроцедуры // ПриЗаписи()

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()

	УстановитьДоступностьСостава();
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);

КонецПроцедуры

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.
	ИнформационнаяНадписьБазовойЕдиницыИзмерения.Заголовок = БазоваяЕдиницаИзмерения.НаименованиеПолное;
	ЭлементыФормы.
	ИнформационнаяНадписьЕдиницыХраненияОстатков.Заголовок = ИнформацияОЕдиницеХраненияОстатков();
	
КонецПроцедуры // ОбновлениеОтображения()

// Обработчик события "ПриИзмененииДанных" формы.
//
Процедура ПриИзмененииДанных()

	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы;
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры // ПриИзмененииДанных()

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РАБОТЫ СО СПИСКОМ ГРУППЫ

Процедура СписокГруппыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Перем ВыбЭлемент;
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Предупреждение("Ввод новой записи копированием запрещен!");
		Возврат;
	КонецЕсли; 
	
	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Элемент еще не записан. Записать?", РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Если Не ЗаписатьВФорме() Тогда
			    Возврат;
			КонецЕсли; 
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВвестиЗначение(ВыбЭлемент,,Тип("СправочникСсылка.Номенклатура")) Тогда
		
		ОбъектНоменклатуры = ВыбЭлемент.ПолучитьОбъект();
		Если ОбъектНоменклатуры.ЭтоГруппа Тогда
			Предупреждение("В состав номенклатурной группы могут включаться только элементы номенклатуры!");
		Иначе
			Если ЗначениеЗаполнено(ОбъектНоменклатуры.НоменклатурнаяГруппа) Тогда
				Ответ = Вопрос("Выбранная номенклатура "+ВыбЭлемент+" уже входит в группу "+ОбъектНоменклатуры.НоменклатурнаяГруппа+". Включить ее текущую номенклатурную группу?", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли; 
			КонецЕсли;
			ОбъектНоменклатуры.НоменклатурнаяГруппа = Ссылка;
			ОбъектНоменклатуры.Записать();
			СписокГруппы.Обновить();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СписокГруппыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Вес = 1;
		Элемент.ТекущиеДанные.НоменклатурнаяГруппа = Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокГруппыПередУстановкойПометкиУдаления(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбъектНоменклатуры = Элемент.ТекущиеДанные.Ссылка.ПолучитьОбъект();
	ОбъектНоменклатуры.НоменклатурнаяГруппа = Справочники.Номенклатура.ПустаяСсылка();
	ОбъектНоменклатуры.Записать();
	
	СписокГруппы.Обновить();
	
КонецПроцедуры

Процедура СписокГруппыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаЭлемента = ВыбраннаяСтрока.ПолучитьФорму("ФормаЭлемента", ЭтаФорма, ВыбраннаяСтрока);
	ФормаЭлемента.Открыть();
	
	Если ФормаЭлемента.ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительные.Видимость = Ложь Тогда
		
		ФормаЭлемента.ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительные.Видимость = Истина;
		
	КонецЕсли;
	
	ФормаЭлемента.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаЭлемента.ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительные;
	ФормаЭлемента.ТекущийЭлемент = ФормаЭлемента.ЭлементыФормы.ВесовойКоэффициентВхождения;
	
КонецПроцедуры // СписокГруппыВыбор()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РАБОТЫ С ЕДИНИЦАМИ ИЗМЕРЕНИЯ

Процедура ЕдиницаХраненияОстатковНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры // ЕдиницаХраненияОстатковНачалоВыбора()

Функция ИнформацияОЕдиницеХраненияОстатков()

	Информация = "Единица хранения остатков "+СокрЛП(ЕдиницаХраненияОстатков);
	Возврат Информация;

КонецФункции // ИнформацияОЕдиницеХраненияОстатков()

// Процедура записывает единицу хранения остатков номенклатуры.
//
Процедура ПроверитьЕдиницуХраненияОстатков(Отказ)

	Если ЗначениеЗаполнено(ЕдиницаХраненияОстатков) Тогда
		Возврат;
	КонецЕсли; 

	ВыборкаЕдиниц = Справочники.ЕдиницыИзмерения.Выбрать(, Ссылка);
	Если ВыборкаЕдиниц.Следующий() Тогда
		НайденнаяЕдиница = ВыборкаЕдиниц.Ссылка;
	Иначе
		НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();

		НайденнаяЕдиницаОбъект.Наименование            = СокрЛП(БазоваяЕдиницаИзмерения);
		НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = БазоваяЕдиницаИзмерения;
		НайденнаяЕдиницаОбъект.Коэффициент             = 1;
		НайденнаяЕдиницаОбъект.Владелец                = Ссылка;

		Попытка
			НайденнаяЕдиницаОбъект.Записать();
		Исключение
			Сообщить("Не удалось записать единицу хранения остатков: " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		НайденнаяЕдиница = НайденнаяЕдиницаОбъект.Ссылка;
		
	КонецЕсли;
	
	ЕдиницаХраненияОстатков = НайденнаяЕдиница;
	ЗаписатьВФорме();

КонецПроцедуры // ПроверитьЕдиницуХраненияОстатков()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьСвойстваИЗначения()

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_НоменклатурныеГруппы Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьКатегории()

Процедура СписокГруппыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.СписокГруппы.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Ссылка);

КонецПроцедуры


