// Обработка поиска по строке для Региона
Перем мРегионОбработкаПоискаПоСтроке;
Перем мРегионТекстПоискаПоСтроке;
Перем мРегионПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Района
Перем мРайонОбработкаПоискаПоСтроке;
Перем мРайонТекстПоискаПоСтроке;
Перем мРайонПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Города
Перем мГородОбработкаПоискаПоСтроке;
Перем мГородТекстПоискаПоСтроке;
Перем мГородПоследнееЗначениеЭлементаПоискаПоСтроке;

// Обработка поиска по строке для Населенного Пункта
Перем мНаселенныйПунктОбработкаПоискаПоСтроке;
Перем мНаселенныйПунктТекстПоискаПоСтроке;
Перем мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Процедура формирует представление адреса по текущему значению и добавляемой части
Процедура ДобавитьВПредставлениеРег(ТекПредставление, ДобавляемаяЧасть)
	
	Если НЕ ЗначениеЗаполнено(ДобавляемаяЧасть) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекПредставление) Тогда
		ТекПредставление = СокрЛП(ДобавляемаяЧасть);
		Возврат;
	КонецЕсли;
	
	ТекПредставление = ТекПредставление + ", " + ДобавляемаяЧасть;
	
КонецПроцедуры

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставление()

	ТекПредставление = "";

	ДобавитьВПредставлениеРег(ТекПредставление, Регион);
	ДобавитьВПредставлениеРег(ТекПредставление, Район);
	ДобавитьВПредставлениеРег(ТекПредставление, Город);
	ДобавитьВПредставлениеРег(ТекПредставление, НаселенныйПункт);
	
	Если (Представление <> ТекПредставление) Тогда
		Представление = ТекПредставление;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступность(ЭлементФормы, ДоступностьЭлементаФормы)
	
	Если ЭлементФормы.Доступность <> ДоступностьЭлементаФормы Тогда
		ЭлементФормы.Доступность = ДоступностьЭлементаФормы;
	КонецЕсли;
	
КонецПроцедуры

// устанавливает доступность для изменения элементов справочника и
// возвращает идет ли работа с Россией
Функция УстановитьВидимость()
	
	ДоступностьСоставляющих = (Страна = Справочники.КлассификаторСтранМира.Россия);
	
	УстановитьДоступность(ЭлементыФормы.НадписьРегион, ДоступностьСоставляющих);
	УстановитьДоступность(ЭлементыФормы.Регион, ДоступностьСоставляющих);
	
	УстановитьДоступность(ЭлементыФормы.НадписьРайон, ДоступностьСоставляющих);
	УстановитьДоступность(ЭлементыФормы.Район, ДоступностьСоставляющих);
	
	УстановитьДоступность(ЭлементыФормы.НадписьГород, ДоступностьСоставляющих);
	УстановитьДоступность(ЭлементыФормы.Город, ДоступностьСоставляющих);
	
	УстановитьДоступность(ЭлементыФормы.НадписьНаселенныйПункт, ДоступностьСоставляющих);
	УстановитьДоступность(ЭлементыФормы.НаселенныйПункт, ДоступностьСоставляющих);
	
	Если НЕ ДоступностьСоставляющих Тогда
		// все стираем то что можно выбирать из справочников
		Если 	ЗначениеЗаполнено(Регион) 
			ИЛИ ЗначениеЗаполнено(Район)
			ИЛИ ЗначениеЗаполнено(Город)
			ИЛИ ЗначениеЗаполнено(НаселенныйПункт) Тогда
			
			Представление = "";
		КонецЕсли;
		
		Регион			= "";
		Район			= "";
		Город 			= "";
		НаселенныйПункт	= "";
	КонецЕсли;
	
	// если не РОССИЯ, то адрес только ручками вводим
	УстановитьДоступность(ЭлементыФормы.Представление, НЕ ДоступностьСоставляющих);
	
	Возврат ДоступностьСоставляющих;
			
КонецФункции

// Процедура по коду устанавливает атрибуты адресного элемента
Процедура ЗаполнитьПоКодуАдресныеЭлементы(КодАдресногоЭлемента) Экспорт

	Поле6 = "";
	Поле7 = "";
	УправлениеКонтактнойИнформацией.ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Регион, Район, Город, НаселенныйПункт, Поле6, Поле7);
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура вызывается при открытии формы.
//
Процедура ПриОткрытии()

	Если Код > 0 Тогда
		Страна = Справочники.КлассификаторСтранМира.Россия;
		// для Россия устанавливаем территориальное деление по адресному классификатору
		ЗаполнитьПоКодуАдресныеЭлементы(Код*УправлениеКонтактнойИнформацией.МаскаУлицы());
	Иначе
		// по представлению ищем страну
		Если Пустаястрока(Представление) Тогда
			Страна = Справочники.КлассификаторСтранМира.Россия;
		Иначе
			// ищем страну
			ПозицияЗапятой = Найти(Представление, ",");
			Если ПозицияЗапятой = 0 Тогда
				// может все представление и есть страна
				ИмяСтраны = СокрЛП(Представление);
				Страна = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(ИмяСтраны);
				Если ЗначениеЗаполнено(Страна) Тогда
					Предаставление = "";
                КонецЕсли;
			Иначе
				ИмяСтраны = СокрЛП(Лев(Представление, ПозицияЗапятой - 1));
				Страна = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(ИмяСтраны);
				Если ЗначениеЗаполнено(Страна) Тогда
					Представление = СокрЛП(Сред(Представление, ПозицияЗапятой + 1));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если УстановитьВидимость() Тогда
		СформироватьПредставление();
	конецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

// Процедура - обработчик события "ПриИзменении" поля ввода "Регион".
//
Процедура РегионПриИзменении(Элемент)
	
	мРегионПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Район".
//
Процедура РайонПриИзменении(Элемент)
	
	мРайонПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Город".
//
Процедура ГородПриИзменении(Элемент)
	
	мГородПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке = Элемент.Значение;
	СформироватьПредставление();
	
КонецПроцедуры


// Универсальная процедура - обработчик для выпадающего списка сокращений территориальных единиц
Процедура ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриВыбореИзСпискаСокращений(ЭтаФорма, Элемент, СтандартнаяОбработка, ПолеРедактирования, Уровень);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Регион".
//
Процедура РегионНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Регион, 1);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Район".
//
Процедура РайонНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Район, 2);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Город".
//
Процедура ГородНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, Город, 3);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ОбработатьВыборИзСпискаСокращений(Элемент, СтандартнаяОбработка, НаселенныйПункт, 4);
	
КонецПроцедуры




// Процедура - обработчик события "НачалоВыбора" поля ввода "Регион".
//
Процедура РегионНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Регион);
	ФормаВыбора.ОтобратьТолькоРегионы(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Регион));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Район".
//
Процедура РайонНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Район);
	ФормаВыбора.УстановитьРодителя(Регион, "", "", "");
	ФормаВыбора.ОтобратьТолькоРайоны(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Район));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Город".
//
Процедура ГородНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Город);
	ФормаВыбора.УстановитьРодителя(Регион, Район, "", "");
	ФормаВыбора.ОтобратьТолькоГорода(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(Город));
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(НаселенныйПункт);
	ФормаВыбора.УстановитьРодителя(Регион, Район, Город, "");
	ФормаВыбора.ОтобратьТолькоНаселенныеПункты(УправлениеКонтактнойИнформацией.ОбрезатьСокращение(НаселенныйПункт));
	ФормаВыбора.Открыть();

КонецПроцедуры



// Процедура заполняет поля родителя и проверяет потомков при кстановке адреса
Процедура ОбновитьАдресныеЭлементы(АдреснаяЗапись)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, АдреснаяЗапись);
	// Для всех элементов ниже по иерархии надо определить подходят ли он под ограничения
	Улица = "";
	УправлениеКонтактнойИнформацией.АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Регион, Район, Город, НаселенныйПункт, Улица, АдреснаяЗапись);
	// последние значения поисков по строке запоминаем
	УправлениеКонтактнойИнформацией.УстановитьПоследниеЗначенияПоисковПоСтрокеДляАдресныхЭлементов(Регион, Район, Город, НаселенныйПункт, Улица,
	 	мРегионПоследнееЗначениеЭлементаПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке,
	 	мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке, Улица);
	
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - универсальный обработчик события "ОбработкаВыбора" для полей "Регион"
// "Район"  "Город" "НаселенныйПункт"
Процедура ОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдреснаяЗапись = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись);
	ОбновитьАдресныеЭлементы(АдреснаяЗапись);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Регион".
//
Процедура РегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Район".
//
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Город".
//
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры


// Процедура автоподбора текста для различных территориальных делений
Процедура УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
												 
	СтруктураЭлемента = Неопределено;											 
	УправлениеКонтактнойИнформацией.АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
												 СтруктураЭлемента);

	Если ЗначениеЗаполнено(ТекстАвтоПодбора) Тогда											  
													  
		ТекстАвтоПодбора = ТекстАвтоПодбора + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		// не надо предков и потомков обновлять - пользователь может еще не определился
		//ОбновитьАдресныеЭлементы(СтруктураЭлемента);

	КонецЕсли;
		
КонецПроцедуры

//Универсальня процедура обработки окончания ввода текста для территориального подразделения
Процедура УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке)
	СтруктураЭлемента = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаПоискаПоСтроке, ТекстПоискаПоСтроке, ПоследнееЗначениеЭлементаПоискаПоСтроке,
													СтруктураЭлемента);

	Если СтруктураЭлемента.Количество() > 0 Тогда											  
		Значение = Значение + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		ОбновитьАдресныеЭлементы(СтруктураЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Регион
Процедура РегионАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 "", "", "", "", 1);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Регион
Процедура РегионОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											"", "", "", "", 1,
											мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
		
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Район
Процедура РайонАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Регион, "", "", "", 2);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Район
Процедура РайонОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Регион, "", "", "", 2,
											мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
	
КонецПроцедуры
	
// Процедура обработчик события АвтоПодборТекста элемента формы Город
Процедура ГородАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Регион, Район, "", "", 3);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Город
Процедура ГородОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Регион, Район, "", "", 3,
											мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);

КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											Регион, Район, Город, "", 4);									  
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Регион, Район, Город, "", 4,
											мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);
											
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура - обработчик события "ЗагрузитьАК" командной панели "ДействияФормы".
//
Процедура ДействияФормыЗагрузитьАК(Кнопка)

	РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗагрузкиАдресногоКлассификатора").Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" у поля ввода "Страна"
Процедура СтранаПриИзменении(Элемент)
	
	Если УстановитьВидимость() Тогда
		СформироватьПредставление();
	конецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	Закрыть(Ложь);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	КодРоссийскогоРегиона = 0;
	КодЭлемента = 0;
	
	Если (Страна = Справочники.КлассификаторСтранМира.Россия) ИЛИ (Страна = Справочники.КлассификаторСтранМира.ПустаяСсылка()) Тогда
		
		СтрокаАдресногоКлассификатора = УправлениеКонтактнойИнформацией.ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(Регион, Район, Город, НаселенныйПункт, "");
		Если СтрокаАдресногоКлассификатора <> Неопределено Тогда
			КодЭлемента = СтрокаАдресногоКлассификатора.Код;
		КонецЕсли;
			
		КодРоссийскогоРегиона = (КодЭлемента/УправлениеКонтактнойИнформацией.МаскаРайона());
	Иначе
		Представление = УправлениеКонтактнойИнформацией.СформироватьПредставлениеАдресаЗаПределамиРФ(Строка(Страна), Представление);
	КонецЕсли;
	
	Код = Цел(КодЭлемента/УправлениеКонтактнойИнформацией.МаскаУлицы());
	
	Закрыть(Истина);
	
КонецПроцедуры


// ТЕКСТ ОСНОВНОЙ ПРОГРАММЫ
///////////////////////////////////////////////////////////////////////////////

ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мРегионОбработкаПоискаПоСтроке, мРегионТекстПоискаПоСтроке, мРегионПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мРайонОбработкаПоискаПоСтроке, мРайонТекстПоискаПоСтроке, мРайонПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мГородОбработкаПоискаПоСтроке, мГородТекстПоискаПоСтроке, мГородПоследнееЗначениеЭлементаПоискаПоСтроке);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиПоискаПоСтроке(мНаселенныйПунктОбработкаПоискаПоСтроке, мНаселенныйПунктТекстПоискаПоСтроке, мНаселенныйПунктПоследнееЗначениеЭлементаПоискаПоСтроке);

