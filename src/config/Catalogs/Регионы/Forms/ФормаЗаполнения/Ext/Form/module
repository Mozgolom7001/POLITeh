// список добавленных элементов (только 1 уровня)
Перем мДобавленныеЭлементы;
// хранит маску населенного пункта
Перем мМаскаНаселенногоПункта;

// Хранит текущий Регион
Перем мТекущийРегион;
// Хранит текущий Район
Перем мТекущийРайон;
// Хранит текущий Город
Перем мТекущийГород;

// прогрессор
Перем мФормаПрогрессора;
// выборка данныз справочника регионов
Перем мСсылкиРегионы;


// Функция Добавляет элемент в Дерево по родителю
Функция ВставитьЭлементВДеревоПоРодителю(КодЭлемента, НаименованиеЭлемента, Родитель)
	
	// вставляем в дерево очередной регион
	Если  Родитель = Неопределено Тогда
		АдреснаяВетка = АдресноеДерево.Строки.Добавить();
	Иначе
		АдреснаяВетка = Родитель.Строки.Добавить();
	КонецЕсли;
		
	АдреснаяВетка.Наименование = НаименованиеЭлемента;
	АдреснаяВетка.Код = КодЭлемента;

	Возврат АдреснаяВетка;
КонецФункции

//Функция в переменных мТекущийГород, мТекущийРайон, мТекущийРегион
// находит элемент по коду
Функция НайтиГородРайонРегион(Элемент, КодПодбора, ТипЭлемента)
	
	Если (мТекущийГород <> Неопределено) И (мТекущийГород.Код = КодПодбора) Тогда
		ВставитьЭлементВДеревоПоРодителю(Элемент.Код, Элемент.Наименование, мТекущийГород);
		Возврат Истина;
	КонецЕсли;
	
	Если (мТекущийРайон <> Неопределено) И (мТекущийРайон.Код = КодПодбора) Тогда
		ЭлементДерева = ВставитьЭлементВДеревоПоРодителю(Элемент.Код, Элемент.Наименование, мТекущийРайон);
		
		// по типу смотрим что делать
		Если ТипЭлемента = 3 Тогда
			мТекущийГород = ЭлементДерева;
		Иначе
			// это и не город вовсе...
			мТекущийГород = Неопределено;	
		КонецЕсли;

		Возврат Истина;
	КонецЕсли;
	
	Если (мТекущийРегион <> Неопределено) И (мТекущийРегион.Код = КодПодбора) Тогда
		ЭлементДерева = ВставитьЭлементВДеревоПоРодителю(Элемент.Код, Элемент.Наименование, мТекущийРегион);
		
		// по типу смотрим что делать
		Если ТипЭлемента = 2 Тогда
			// Район поменялся
			мТекущийРайон = ЭлементДерева;
			мТекущийГород = Неопределено;
		ИначеЕсли ТипЭлемента = 3 Тогда
			// город поменялся
			мТекущийРайон = Неопределено;
			мТекущийГород = ЭлементДерева;
		Иначе
			мТекущийРайон = Неопределено;
			мТекущийГород = Неопределено;
		КонецЕсли;
			
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЭлемента = 1 Тогда
		
		ЭлементДерева = ВставитьЭлементВДеревоПоРодителю(Элемент.Код, Элемент.Наименование, Неопределено);
		// Регион поменялся
		мТекущийГород = Неопределено;
		мТекущийРайон = Неопределено;
	  	мТекущийРегион = ЭлементДерева;
		мДобавленныеЭлементы.Вставить(Элемент.Код, ЭлементДерева);
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Процедура находит по коду региона его предка в иерархии регионов
Процедура НайтиРодителяДляРегиона(Элемент)
	
	КодЭлемента = Цел(Элемент.Код / мМаскаНаселенногоПункта);
	// определим по коду элемента что это за элемент
	Если КодЭлемента%1000000000 = 0 Тогда
		ТипЭлемента = 1;
		НайтиГородРайонРегион(Элемент, Элемент.Код, ТипЭлемента);
		
	ИначеЕсли КодЭлемента%1000000 = 0 Тогда
		ТипЭлемента = 2;
		НайтиГородРайонРегион(Элемент, (Цел(КодЭлемента / 1000000000)*1000000000) * мМаскаНаселенногоПункта, ТипЭлемента);

	ИначеЕсли КодЭлемента%1000 = 0 Тогда
		ТипЭлемента = 3;
		НайтиГородРайонРегион(Элемент, (Цел(КодЭлемента / 1000000)*1000000) * мМаскаНаселенногоПункта, ТипЭлемента);

    Иначе
		ТипЭлемента = 4;	
		НайтиГородРайонРегион(Элемент, (Цел(КодЭлемента / 1000)*1000) * мМаскаНаселенногоПункта, ТипЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура загрузки первых 4-х адресных уровней в дерево
Процедура ЗарузитьАдресныеУровни()
	
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.КомментарийЗначения = "Загрузка населенных пунктов ...";

	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение КАК Наименование,
	|	АдресныйКлассификатор.Код
  	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента В (1, 2, 3, 4)
	|
	|УПОРЯДОЧИТЬ ПО
	| 	АдресныйКлассификатор.Код";
											

	ЗапросАдресныхЭлементов = Новый Запрос(ТекстЗапроса);
	
	ВыборкаЭлементов = ЗапросАдресныхЭлементов.Выполнить().Выбрать();
	мФормаПрогрессора.МаксимальноеЗначение = Цел(ВыборкаЭлементов.Количество()/200);
	
	ТекущийНомер = 0;
	мТекущийГород = Неопределено;
	мТекущийРайон = Неопределено;
	мТекущийРегион = Неопределено;
	Пока ВыборкаЭлементов.Следующий() Цикл
		
		Если ТекущийНомер%200 = 0 Тогда
			мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		КонецЕсли;
		
		НайтиРодителяДляРегиона(ВыборкаЭлементов);
						
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры
  
// Процедура обновляет список районов
Процедура ОбновитьСписок()
	
	мФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка регионов";
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.КомментарийЗначения = "Загрузка регионов ...";
	мФормаПрогрессора.Открыть();

	МаскаРегионов = УправлениеКонтактнойИнформацией.МаскаРегиона();	
	// Заполняем регионы
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаРегионов");
	
	ВсегоЗаписей = КлассификаторАдресов.ВысотаТаблицы - 1;
	мФормаПрогрессора.МаксимальноеЗначение = ВсегоЗаписей;


	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		мФормаПрогрессора.Значение = Сч;
		КодАдреса = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		КодРегиона = Цел(КодАдреса / УправлениеКонтактнойИнформацией.МаскаРегиона());
		Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		
		Регионы.Добавить(КодРегиона * МаскаРегионов, Наименование + " " + Сокращение);
		
	КонецЦикла;
	
	Регионы.СортироватьПоПредставлению();
	
	мДобавленныеЭлементы = Новый Соответствие;
	
	ЗарузитьАдресныеУровни();
	
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура отмечает все элементы определенного уровня
Процедура ПометитьВетки(Ветка, ФлагПометки, Рекурсивно)
	
	Если Ветка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ветка.Пометка = ФлагПометки;
		
	// надо ли ниже уровня ставить пометки...
	Если Рекурсивно Тогда
		
		Для Каждого Элемент Из Ветка.Строки Цикл
			ПометитьВетки(Элемент, ФлагПометки, Рекурсивно);	
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

// процедура отмечает все элементы текущего уровня
Процедура ПометитьЭлементыОдногоУровня(Родитель, ФлагПометки)
	
	Если Родитель <> Неопределено Тогда
		ОсновнойЭлемент = Родитель;
		Если ФлагПометки Тогда
			Родитель.Пометка = Истина;
			ПроверитьПометкуУРодителей(Родитель);
		КонецЕсли;
	Иначе
		ОсновнойЭлемент = АдресноеДерево;
	КонецЕсли;
	
	Для Каждого Элемент Из ОсновнойЭлемент.Строки Цикл
		Элемент.Пометка = ФлагПометки;
		// а не всегда можно уровни то сбрасывать
		Если НЕ ФлагПометки Тогда
			НельзяСниматьФлаг = Ложь;
			Для Каждого ВложенныйЭлемент Из Элемент.Строки Цикл  
				Если ВложенныйЭлемент.Пометка Тогда
					НельзяСниматьФлаг = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НельзяСниматьФлаг Тогда
				Элемент.Пометка = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проставляет галочки у всех элементов у которых хотя бы один подчиненный элемент помечен
Процедура ПроверитьПометкуУРодителей(Ветка)
	
	Если Ветка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = Ветка.Родитель;
	Если (НЕ Ветка.Пометка) ИЛИ (Ветка.Родитель = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Родитель.Пометка Тогда
		Родитель.Пометка = Истина;
		ПроверитьПометкуУРодителей(Родитель);
	КонецЕсли; 
	
КонецПроцедуры	


// Функция формирует полное наименование элемента путем конкатенации всех названий у предков
Функция СформироватьПолноеНаименованиеВетки(Ветка)
	
	НовоеНаименование = СокрЛП(Ветка.Наименование);
		
	РодительВетки = Ветка.Родитель;
	Пока РодительВетки <> Неопределено Цикл
		НовоеНаименование = СокрЛП(РодительВетки.Наименование) + ", " + НовоеНаименование;
		РодительВетки = РодительВетки.Родитель;
	КонецЦикла;
	
	Возврат  НовоеНаименование;
 	
КонецФункции

// Процедура переносит выбранные из дерева данные в справочник регионов
Процедура СинхронизироватьРегионы(Ветка)
	
	Если Не Ветка.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	НовоеНаименование = СформироватьПолноеНаименованиеВетки(Ветка);
				
	   // добавляем к коду Код страны
	СуществующаяСтрока = мСсылкиРегионы.Найти(Ветка.Код, "КОД");
	
	Если СуществующаяСтрока = Неопределено Тогда
		// создаем элемент заново
		НовыйОбъект = Справочники.Регионы.СоздатьЭлемент();
		НовыйОбъект.КодАдресногоЭлемента = Ветка.Код;
		НовыйОбъект.Наименование = НовоеНаименование;
		КодРегиона = Ветка.Код/УправлениеКонтактнойИнформацией.МаскаРегиона();
		НовыйОбъект.КодРегиона = ?(КодРегиона<10, "0"+КодРегиона, Строка(КодРегиона));
		НовыйОбъект.ПроверятьСоответствиеКодаИКодаРегиона = Ложь;
		// родителя указываем
		Если Ветка.Родитель <> Неопределено Тогда
			НовыйОбъект.Родитель = Ветка.Родитель.Ссылка;
		Иначе
			НовыйОбъект.Родитель = РодительскийРегион;
		КонецЕсли;
					
		НовыйОбъект.Записать();
		
		Ветка.Ссылка = НовыйОбъект.Ссылка;
	Иначе
		Ветка.Ссылка = СуществующаяСтрока.Ссылка;
	КонецЕсли;
	
	// рекурсивно для каждого вложенного
	Для Каждого Лист из Ветка.Строки Цикл
		СинхронизироватьРегионы(Лист);
	КонецЦикла;
	
КонецПроцедуры	

// ОБРАБОТЧИКИ
///////////////////////////////////////////////////////////////////////////////

// обработчик нажатия кнопки "Обновить список"
Процедура ОсновныеДействияФормыОбновитьСписок(Кнопка)
	
	ОбновитьСписок()
	
КонецПроцедуры

// обработчик события "ПриАктивизацииСтроки" у Списка значений Регионы
Процедура РегионыПриАктивизацииСтроки(Элемент)
	
	// Позиционируемся на соответствующем элементе дерева регионов
	Код = Элемент.ТекущаяСтрока.Значение;
	
	СтрокаДерева = мДобавленныеЭлементы[Код];
	
	Если СтрокаДерева <> Неопределено Тогда
		ЭлементыФормы.АдресноеДерево.ТекущаяСтрока = СтрокаДерева;
	КонецЕсли;
	
КонецПроцедуры

// обработчик меню "ПометитьВключеннные" 
Процедура КоманднаяПанельАдресноеДеревоПометитьВключеннные(Кнопка)
	
	ПометитьВетки(ЭлементыФормы.АдресноеДерево.ТекущиеДанные, Истина, Истина);
	ПроверитьПометкуУРодителей(ЭлементыФормы.АдресноеДерево.ТекущиеДанные);

КонецПроцедуры

// обработчик меню "СброситьВключеннные" 
Процедура КоманднаяПанельАдресноеДеревоСброситьВключеннные(Кнопка)
	
	ПометитьВетки(ЭлементыФормы.АдресноеДерево.ТекущиеДанные, Ложь, Истина);
	ПроверитьПометкуУРодителей(ЭлементыФормы.АдресноеДерево.ТекущиеДанные);

КонецПроцедуры

// Обработчик нажатия кнопки "ДополнитьСправочник"
Процедура ОсновныеДействияФормыДополнитьСправочник(Кнопка)
	
	мФормаПрогрессора.НаименованиеОбработкиДанных = "Заполнение справочника регионов";
	мФормаПрогрессора.Значение = 0;
	мФормаПрогрессора.МаксимальноеЗначение = АдресноеДерево.Строки.Количество();
	мФормаПрогрессора.Открыть();
	
	//выборка имеющихся ссылок справочника регионы
	ТекстЗапроса =
	"Выбрать РАЗЛИЧНЫЕ
	|	Регионы.ССЫЛКА,
	|	Регионы.КодАдресногоЭлемента КОД 
	|из Справочник.Регионы Как Регионы
	| Где Регионы.Ссылка В Иерархии (&РегионРодитель)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("РегионРодитель", РодительскийРегион);
	мСсылкиРегионы = Запрос.Выполнить().Выгрузить();
	мСсылкиРегионы.Индексы.Добавить("КОД");
	
	// переносим данные регионов в справочник
	Для Каждого Регион из АдресноеДерево.Строки Цикл
		мФормаПрогрессора.Значение = мФормаПрогрессора.Значение + 1;
		мФормаПрогрессора.КомментарийЗначения = Регион.Наименование;
		СинхронизироватьРегионы(Регион);
	КонецЦикла;
	
	мФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// обработчик меню "ПометитьТекущийУровень" 
Процедура КоманднаяПанельАдресноеДеревоПометитьТекущийУровень(Кнопка)
	
	Если ЭлементыФормы.АдресноеДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПометитьЭлементыОдногоУровня(ЭлементыФормы.АдресноеДерево.ТекущиеДанные.Родитель, Истина)
	
КонецПроцедуры

// обработчик меню "СброситьТекущийУровень" 
Процедура КоманднаяПанельАдресноеДеревоСброситьТекущийУровень(Кнопка)
	
	Если ЭлементыФормы.АдресноеДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПометитьЭлементыОдногоУровня(ЭлементыФормы.АдресноеДерево.ТекущиеДанные.Родитель, Ложь)
	
КонецПроцедуры

// Обработчик "при изменении флажка" у табличного поля АдресноеДерево
Процедура АдресноеДеревоПриИзмененииФлажка(Элемент, Колонка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Пометка Тогда
		ПроверитьПометкуУРодителей(Элемент.ТекущиеДанные);
	Иначе
	
		Для Каждого СтрокаПотомка ИЗ Элемент.ТекущиеДанные.Строки Цикл
			Если СтрокаПотомка.Пометка Тогда
				Элемент.ТекущиеДанные.Пометка = Истина;
				Возврат;	
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "перед открытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПолныеПрава.ЕстьЗаписиВРегистреСведений("АдресныйКлассификатор") Тогда
		
		ОтветНаВопрос = Вопрос("Адресный классификатор пуст. Хотите произвести загрузку адресного классификатора?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗагрузкиАдресногоКлассификатора").ОткрытьМодально();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры


//ТЕКСТ ОСНОВНОЙ ЧАСТИ
///////////////////////////////////////////////////////////////////////////////
мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
мМаскаНаселенногоПункта = УправлениеКонтактнойИнформацией.МаскаНасПункта();
