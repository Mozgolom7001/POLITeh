Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет

Перем мЭтоНовый;
Перем мИНН;

// Список реквизитов для которых нужно проверять заполненность полей
Перем СписокРеквизитовДляПроверкиЗаполнения;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

Перем МодифицированыПараметрыWEBЗаказа;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД; 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает заголовок поля НадписьИННГоловногоКонтрагента
//
Процедура УстановитьНадписьИННГоловногоКонтрагента()
	
	Если ОбособленноеПодразделение И ГоловнойКонтрагент <> Ссылка Тогда
		ЭлементыФормы.НадписьИННГоловногоКонтрагента.Заголовок = "ИНН: " + ИНН;
	Иначе
		ЭлементыФормы.НадписьИННГоловногоКонтрагента.Заголовок = "ИНН:";
	КонецЕсли;

КонецПроцедуры 

Процедура ВидимостьГоловногоКонтрагента()
	
	ЭлементыФормы.ГоловнойКонтрагент.Видимость        = ВходитВХолдинг;
	ЭлементыФормы.НадписьГоловнойКонтрагент.Видимость = ВходитВХолдинг;
	
	ЭлементыФормы.ГоловнойКонтрагентФизЛицо.Видимость        = ВходитВХолдинг;
	ЭлементыФормы.НадписьГоловнойКонтрагентФизЛицо.Видимость = ВходитВХолдинг;
	
КонецПроцедуры

// Формирует запрос по учетным записям Интернет пользователей, отнесенным
// к данному контрагенту.
//
// Возвращаемое значение:
//   Запрос  – Сформированный запрос.
//
Функция ПолучитьЗапросПоУчетнымЗаписямИнтернетПользователей()

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	УчетныеЗаписиИнтернетПользователей.Логин,
	               |	УчетныеЗаписиИнтернетПользователей.Пароль,
	               |	УчетныеЗаписиИнтернетПользователей.Контрагент
	               |ИЗ
	               |	РегистрСведений.УчетныеЗаписиИнтернетПользователей КАК УчетныеЗаписиИнтернетПользователей
	               |ГДЕ
	               |	УчетныеЗаписиИнтернетПользователей.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", Ссылка);
	Возврат Запрос;

КонецФункции // ПолучитьЗапросПоУчетнымЗаписямИнтернетПользователей()

Процедура ОбновитьТелефоныКонтактногоЛица()

	СтрокаТелефонов = "";
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ
		|
		|";
		
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Объект", ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка.КонтактноеЛицо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
		КонецЦикла;
	
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;
	
	ЭлементыФормы.ТелефоныКонтактногоЛица.Заголовок = "Телефоны: " + СтрокаТелефонов;

КонецПроцедуры

// Процедура контолирует длину ИНН и выводит сообщение.
//
Процедура ПроверитьИНН()

	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		Возврат;
	КонецЕсли;

	ДлинаИНН       = СтрДлина(ИНН);
	ТекстСообщения = "";

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ДлинаИНН = 12 Тогда
			ТекстСообщения = """ИНН"" физического лица 12 символов!";
		КонецЕсли;
	Иначе
		Если НЕ ДлинаИНН = 10 Тогда
			ТекстСообщения = """ИНН"" юридического лица 10 символов!";
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Длина ""ИНН"" не соответствует требованиям: " + ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

// Процедура управляет доступностью кнопок ввода новых заказов с контрагентом.
//
Процедура ДоступностьВводаНовыхЗаказов()

	ЭлементыФормы.ДействияФормы.Кнопки.Создать.Кнопки.НовыйЗаказПокупателя.Доступность           = Покупатель;
	ЭлементыФормы.ДействияФормы.Кнопки.Действия.Кнопки.Создать.Кнопки.НовыйЗаказПокупателя.Доступность = Покупатель;
	ЭлементыФормы.ДействияФормы.Кнопки.Создать.Кнопки.НовыйЗаказПоставщику.Доступность           = Поставщик;
	ЭлементыФормы.ДействияФормы.Кнопки.Действия.Кнопки.Создать.Кнопки.НовыйЗаказПоставщику.Доступность = Поставщик;

КонецПроцедуры

// Процедура изменяет доступность закладок в зависимости от записанности объекта.
//
Процедура ДоступностьЗакладок()

	ЭлементыФормы.Панель.Страницы.СчетаИДоговоры.Доступность = НЕ ЭтоНовый();
	ЭлементыФормы.Панель.Страницы.Категории.Доступность      = НЕ ЭтоНовый();
	ЭлементыФормы.Панель.Страницы.События.Доступность        = НЕ ЭтоНовый();
	ЭлементыФормы.Панель.Страницы.Свойства.Доступность       = НЕ ЭтоНовый();

КонецПроцедуры

// Процедура открывает форму нового документ Контакт.
//
Процедура ВвестиНовоеСобытие(Копирование = Ложь, Элемент = Неопределено, ЗаданныйВидСобытия = Неопределено)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 

	Если Копирование Тогда
		Если Элемент.ТекущаяСтрока <> Неопределено И НЕ Элемент.ТекущаяСтрока.Пустая() Тогда
			Элемент.ТекущаяСтрока.Скопировать().ПолучитьФорму(,ЭтаФорма).Открыть();
		КонецЕсли;
	Иначе
		
		Если Элемент <> Неопределено И Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.Ссылка.Пустая() Тогда
			ВыбранныйВидСобытия = РаботаСДиалогами.ВыбратьВидНовогоСобытия(ЗаданныйВидСобытия, Элемент.ТекущиеДанные.ВидСобытия);
		Иначе
			ВыбранныйВидСобытия = РаботаСДиалогами.ВыбратьВидНовогоСобытия(ЗаданныйВидСобытия);
		КонецЕсли; 
		
		Если ВыбранныйВидСобытия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Док = Документы.Событие.СоздатьДокумент();
			
		Док.ВидСобытия     = ВыбранныйВидСобытия;
		Док.Контрагент     = Ссылка;
		Док.КонтактноеЛицо = ОсновноеКонтактноеЛицо;
		Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
		
		ФормаСобытия       = Док.ПолучитьФорму(,ЭтаФорма);
		ФормаСобытия.СтруктураОбъектКонтрагент = Новый Структура("Объект, ЗаписыватьОбъект", ЭтотОбъект, Истина);
		ФормаСобытия.Открыть();
		
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.События;	
		
	КонецЕсли; 

КонецПроцедуры

// Процедура считывает стадию взаимоотношений с контрагентом
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьСтадиюВзаимоотношений() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.СтадииВзаимоотношенийСПокупателями.СрезПоследних(, Контрагент = &Ссылка) КАК СтадииВзаимоотношенийСПокупателямиСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		СтадияРегистра  = Выборка.Стадия;
		КлассПостоянногоПокупателя  = Выборка.КлассПостоянногоПокупателя;
	
		Если ЗначениеЗаполнено(СтадияРегистра) Тогда
			Если СтадияРегистра = Перечисления.СтадииВзаимоотношенийСПокупателями.ПостоянныйПокупатель Тогда
				СтадияВзаимоотношений = СокрЛП(СтадияРегистра) + " (" + СокрЛП(?(КлассПостоянногоПокупателя.Пустая(),"класс не выбран",КлассПостоянногоПокупателя)) + ")";
			Иначе
				СтадияВзаимоотношений = СтадияРегистра;
			КонецЕсли; 
		Иначе
			СтадияВзаимоотношений = "Стадия взаимоотношений не указана";
		КонецЕсли;
	Иначе
		СтадияВзаимоотношений = "Стадия взаимоотношений не указана";
	КонецЕсли; 

КонецПроцедуры

// Процедура считывает источник информации при обращении контрагента
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьИсточникИнформацииПриОбращении() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.ИсточникИнформацииПриОбращении.СрезПоследних(, Контрагент = &Ссылка) КАК ИсточникИнформацииПриОбращенииСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИсточникРегистра  = Выборка.ИсточникИнформации;
		Если ЗначениеЗаполнено(ИсточникРегистра) Тогда
			ИсточникИнформации = ИсточникРегистра;
		Иначе
			ИсточникИнформации = "Источник информации при обращении не указан";
		КонецЕсли;
	Иначе
		ИсточникИнформации = "Источник информации при обращении не указан";
	КонецЕсли; 

КонецПроцедуры

// Процедура считывает стадию взаимоотношений с контрагентом
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьABCКлассПокупателя() Экспорт

	СтрокаКласса = "АВС-класс не указан";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.ABCКлассификацияПокупателей.СрезПоследних(, Контрагент = &Ссылка) КАК ABCКлассификацияПокупателейСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ABCКлассПокупателя) Тогда
			СтрокаКласса = Выборка.ABCКлассПокупателя;
		КонецЕсли;
	КонецЕсли; 
	
	ABCКлассПокупателя = СтрокаКласса;
	
КонецПроцедуры

// Процедура считывает стадию надежность поставщика
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьНадежность() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.НадежностьПоставщиков.СрезПоследних(, Контрагент = &Ссылка) КАК НадежностьПоставщиковСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.Надежность) Тогда
			НадежностьПоставщика = Выборка.Надежность;
		Иначе
			НадежностьПоставщика = "Надежность не указана";
		КонецЕсли; 
	Иначе
		НадежностьПоставщика = "Надежность не указана";
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обновляет информацию в таблице свойств объекта.
//
Процедура ОбновитьСвойства()

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Ссылка;
	Свойства.ОбъектОтбораНазначений = Ссылка;
	
	Свойства.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

// Процедура обновляет информацию в таблице категорий объекта.
//
Процедура ОбновитьКатегории()

	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;

	Категории.ОбъектОтбораКатегорий = Ссылка;

	Категории.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

// Процедура управляет видимостью страниц панели ПанельЮрФизЛицо.
//
Процедура ВидимостьПанелейЮрФизЛица()

	НеВидимыеСтраницы = Новый Массив;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидимаяСтраница   = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо;
		НеВидимыеСтраницы.Добавить(ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо);
		НеВидимыеСтраницы.Добавить(ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ОбособленноеПодразделение);
	ИначеЕсли ОбособленноеПодразделение Тогда
		ВидимаяСтраница   = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ОбособленноеПодразделение;
		НеВидимыеСтраницы.Добавить(ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо);
		НеВидимыеСтраницы.Добавить(ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо);
	Иначе
		ВидимаяСтраница   = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо;
		НеВидимыеСтраницы.Добавить(ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо);
		НеВидимыеСтраницы.Добавить(ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ОбособленноеПодразделение);
	КонецЕсли;

	Если ЭлементыФормы.ПанельЮрФизЛицо.ТекущаяСтраница <> ВидимаяСтраница Тогда
		ВидимаяСтраница.Видимость   = Истина;
		Для Каждого НеВидимаяСтраница ИЗ НеВидимыеСтраницы Цикл
			НеВидимаяСтраница.Видимость = Ложь;
		КонецЦикла;
		ЭлементыФормы.ПанельЮрФизЛицо.ТекущаяСтраница = ВидимаяСтраница;
	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью страниц панели ПанельПокупательПоставщик.
//
Процедура ВидимостьПанелейПоставщикПокупатель()
	
	СтраницыПанели = ЭлементыФормы.ПанельПокупательПоставщик.Страницы;
	
	Если СтраницыПанели.КакПокупатель.Видимость <> Покупатель Тогда
		СтраницыПанели.КакПокупатель.Видимость = Покупатель;
	КонецЕсли; 

	Если СтраницыПанели.КакПоставщик.Видимость <> Поставщик Тогда
		СтраницыПанели.КакПоставщик.Видимость = Поставщик;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает досупность элементов формы для редактирования логина и пароля WEB-расширений.
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьЛогинаПароля()

	ЭлементыФормы.Логин.Доступность                     = РазрешенДоступКWEBЗаказам;
	ЭлементыФормы.Пароль.Доступность                    = РазрешенДоступКWEBЗаказам;
	ЭлементыФормы.КнопкаСгенерироватьПароль.Доступность = РазрешенДоступКWEBЗаказам;

КонецПроцедуры // УстановитьДоступностьЛогинаПароля()

// Процедура записывает основной договор контрагента контрагента.
//
Процедура ПроверитьОсновнойДоговорКонтрагента(Отказ, НовыйОсновнойДоговорУказан)

	Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(, Ссылка);
	Если ВыборкаДоговоров.Следующий() Тогда
		ОсновнойДоговорКонтрагента = ВыборкаДоговоров.Ссылка;
	Иначе
		НайденныйДоговорОбъект              = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НайденныйДоговорОбъект.Наименование = "Основной договор";

		НайденныйДоговорОбъект.ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			НайденныйДоговорОбъект.ВалютаВзаиморасчетов = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;

		НайденныйДоговорОбъект.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	Организации.Ссылка
			               |ИЗ
			               |	Справочник.Организации КАК Организации";
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				НайденныйДоговорОбъект.Организация = Выборка.Ссылка;
			Иначе
				Сообщить("Не удалось записать основной договор контрагента (не найдена организация).");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;

		НайденныйДоговорОбъект.Владелец           = Ссылка;
		НайденныйДоговорОбъект.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.БезДополнительныхУсловий;

		Если Покупатель Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
		ИначеЕсли Поставщик Тогда
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
			НайденныйДоговорОбъект.ТипЦен      = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка();
		Иначе
			НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		Иначе
			НайденныйДоговорОбъект.ВедениеВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеВедениеВзаиморасчетовПоДоговорам");
			Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
				НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам;
			КонецЕсли;
			НайденныйДоговорОбъект.ВестиПоДокументамРасчетовСКонтрагентом = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДокументамСКонтрагентами");

		КонецЕсли;


		Если (НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		 ИЛИ  НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		   И НайденныйДоговорОбъект.ВалютаВзаиморасчетов <> глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
			НайденныйДоговорОбъект.РасчетыВУсловныхЕдиницах = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновныеРасчетыПоДоговоруВУсловныхЕдиницах");
		КонецЕсли;

		Если НеЯвляетсяРезидентом И НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НайденныйДоговорОбъект.РеализацияНаЭкспорт = Истина;
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
		 ИЛИ НайденныйДоговорОбъект.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			НайденныйДоговорОбъект.ОбособленныйУчетТоваровПоЗаказамПокупателей = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОбособленныйУчетТоваровПоЗаказамПокупателей");
		КонецЕсли;

		Если НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			НайденныйДоговорОбъект.ПроцентПредоплаты = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойРазмерПредоплатыПоЗаказуПокупателя");
		КонецЕсли;

		Попытка
			НайденныйДоговорОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось записать основной договор контрагента.");
			Отказ = Истина;
			Возврат;
		КонецПопытки;

		ОсновнойДоговорКонтрагента = НайденныйДоговорОбъект.Ссылка;
		НовыйОсновнойДоговорУказан = Истина;

	КонецЕсли;

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного банковского счета.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета()

	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Пометка     = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Пометка     = ЭлементыФормы.БанковскиеСчета.ТекущаяСтрока.Ссылка = ОсновнойБанковскийСчет;
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного договора взаиморасчетов.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоДоговора()

	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = Ложь;
	Иначе
		Если ЭлементыФормы.Договоры.ТекущиеДанные.ЭтоГруппа Тогда
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = Ложь;
		Иначе
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Истина;
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка = ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного контактного лица.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица()

	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельКонтактныеЛицаКонтрагента.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельКонтактныеЛицаКонтрагента.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка = ОсновноеКонтактноеЛицо);
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного вида деятельности.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности()

	Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельВидыДеятельности.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельВидыДеятельности.Кнопки.СделатьОсновным.Доступность = (НЕ (ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности = ОсновнойВидДеятельности) И ЗначениеЗаполнено(ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности));
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного менеджера покупателя.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя()

	Если ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельМенеджерыПокупателя.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельМенеджерыПокупателя.Кнопки.СделатьОсновным.Доступность = (НЕ (ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя = ОсновнойМенеджерПокупателя) И ЗначениеЗаполнено(ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя));
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование
	 ИЛИ НаименованиеПолное = ПолучитьПолноеНаименованиеСОКОПФ() Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Функция возвращает полное наименование контрагента как ОКОПФ и Наименование
//
Функция ПолучитьПолноеНаименованиеСОКОПФ()
	
	Если Лев(Наименование,1) = """" Тогда
		КовычкаОткрывающая = "";
	Иначе
		КовычкаОткрывающая = """";
	КонецЕсли;
	
	Если Прав(Наименование,1) = """" Тогда
		КовычкаЗакрывающая = "";
	Иначе
		КовычкаЗакрывающая = """";
	КонецЕсли;
	
	Возврат СокрЛП(ОКОПФ)+" "+КовычкаОткрывающая+Наименование+КовычкаЗакрывающая;
КонецФункции

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		Если НЕ ЗначениеЗаполнено(ОКОПФ) Тогда
			НаименованиеПолное = Наименование;
		Иначе
			НаименованиеПолное = ПолучитьПолноеНаименованиеСОКОПФ();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
			
			// при изменении фактического или юридического адреса надо и второй менять
			УправлениеКонтактнойИнформацией.СкопироватьАдресКонтактнойИнформации(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, НаборКонтактнойИнформации);
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ОбновлениеИННОбособленныхПодразделенийКонтрагента" Тогда
		
		Если ОбособленноеПодразделение И ГоловнойКонтрагент <> Ссылка И Источник = ГоловнойКонтрагент Тогда
			ИНН = ГоловнойКонтрагент.ИНН;
			УстановитьНадписьИННГоловногоКонтрагента();
			ЭтаФорма.Обновить();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый()
		И ТипЗнч(ПараметрОснование) <> Тип("СправочникСсылка.Организации")
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьПомощникВводаНовыхКонтрагентов") Тогда
		
		ВводНовогоКонтрагента = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.Создать();
		Форма = ВводНовогоКонтрагента.ПолучитьФорму( , ВладелецФормы);
		Форма.ЗаполнитьНачальныеДанные();
		Форма.СписокСправочника = Истина;
		
		Если Родитель <> Неопределено Тогда
			Форма.Родитель = Родитель;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			ВводНовогоКонтрагента.Запись.НаименованиеКонтрагента = Наименование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НаименованиеПолное) Тогда
			ВводНовогоКонтрагента.Запись.НаименованиеКонтрагентаПолное = НаименованиеПолное;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ВводНовогоКонтрагента.Запись.ДополнительноеОписание = ДополнительноеОписание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИНН) Тогда
			ВводНовогоКонтрагента.Запись.ИНН = ИНН;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОсновнойВидДеятельности) Тогда
			ВводНовогоКонтрагента.Запись.ОсновнойВидДеятельностиКонтрагента = ОсновнойВидДеятельности;
		КонецЕсли;
		
		
		ОсновнойСтатусКонтрагента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСтатусКонтрагента");
		Покупатель = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
		Поставщик  = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		
		ВводНовогоКонтрагента.Запись.Покупатель = Покупатель;
		ВводНовогоКонтрагента.Запись.Поставщик  = Поставщик;
		
		Если ЗначениеЗаполнено(ЮрФизЛицо) Тогда
			ВводНовогоКонтрагента.Запись.ЮрФизЛицо = ЮрФизЛицо;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОКОПФ) Тогда
			ВводНовогоКонтрагента.Запись.ОКОПФ = ОКОПФ;
		КонецЕсли;
		
		Форма.Открыть();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрОснование) = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидСвязи"  , Перечисления.ВидыСобственныхКонтрагентов.Организация);
		Запрос.УстановитьПараметр("Основание" , ПараметрОснование);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|   Контрагент
		|ИЗ
		|   РегистрСведений.СобственныеКонтрагенты 
		|ГДЕ Объект     = &Основание
		|    И ВидСвязи = &ВидСвязи";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Отказ = Истина;
			Ответ = Вопрос("Для данной организации уже существует контрагент. Открыть форму?",
				        РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Форма = Выборка.Контрагент.ПолучитьФорму("ФормаЭлемента");
				Форма.Открыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтактныеЛицаКонтрагента.Отбор.Владелец.Значение      = Ссылка;
	КонтактныеЛицаКонтрагента.Отбор.Владелец.Использование = Истина;
	
	// ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ЭлектронныеДокументы.ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(Ссылка);
	КонецЕсли;
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПередОткрытием

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);

	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(мКнопкаРедактироватьКИВДиалоге);

	ПрочитатьСтадиюВзаимоотношений();
	ПрочитатьИсточникИнформацииПриОбращении();
	ПрочитатьНадежность();
	ПрочитатьABCКлассПокупателя();

	ОбновитьСвойства();

	ОбновитьКатегории();

	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
			ЮрФизЛицо   = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;
		
		// установим флаги Покупатель и Поставщик в зависимости от настроек пользоватлеи
		ОсновнойСтатусКонтрагента = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСтатусКонтрагента");
		Если ПараметрОбъектКопирования = Неопределено Тогда
			Покупатель = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Покупатель);
			Поставщик  = (ОсновнойСтатусКонтрагента = Перечисления.СтатусыКонтрагентов.Поставщик);
		КонецЕсли;

	КонецЕсли;
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидКонтрагента	= "ФизическоеЛицо";
	ИначеЕсли ОбособленноеПодразделение Тогда
		ВидКонтрагента	= "ОбособленноеПодразделение";
	Иначе
		ВидКонтрагента	= "ЮридическоеЛицо";
	КонецЕсли;
	
	УстановитьНадписьИННГоловногоКонтрагента();

	ВидимостьПанелейПоставщикПокупатель();

	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Действия.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);

	ДоступностьЗакладок();
	ДоступностьВводаНовыхЗаказов();

	События.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	События.Отбор.ДокументыПоКонтрагенту.Значение      = Ссылка;
	События.Отбор.ДокументыПоКонтрагенту.ВидСравнения  = ВидСравнения.Равно;

	ЭлементыФормы.События.НастройкаОтбора.ДокументыПоКонтрагенту.Доступность = Ложь;

	Если (НЕ ЭтоНовый() И ГоловнойКонтрагент = Ссылка) ИЛИ ЭтоНовый() ИЛИ ОбособленноеПодразделение Тогда
		ВходитВХолдинг = Ложь;
	Иначе
		ВходитВХолдинг = Истина;
	КонецЕсли;

	ВидимостьГоловногоКонтрагента();
	
	// Установить печатную форму по умолчанию.
	РаботаСДиалогами.УстановитьКнопкуПечати(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПередЗаписью(Отказ)
	
	мЭтоНовый = ЭтоНовый();
	мИНН = Ссылка.ИНН;
	
	ЗаполнениеДокументов.ПроверитьЗаполнениеРеквизитов(ЭтотОбъект, СписокРеквизитовДляПроверкиЗаполнения, Отказ, мЭтоНовый);
	
	Если НЕ ВходитВХолдинг И НЕ ОбособленноеПодразделение Тогда
		ТекущаяМодифицированность = Модифицированность;
		ГоловнойКонтрагент        = Ссылка;
		Модифицированность        = ТекущаяМодифицированность;
	КонецЕсли;
	
	Если ОбособленноеПодразделение И ЗначениеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент <> Ссылка Тогда
		ТекущаяМодифицированность = Модифицированность;
		ИНН 					  = ГоловнойКонтрагент.ИНН;
		Модифицированность        = ТекущаяМодифицированность;
	КонецЕсли;
	
	Если Не Отказ и мЭтоНовый и УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ВыполнятьПоискДублейПередЗаписьюНовогоКонтрагента") = Истина Тогда
		
		ПоискДублей       = Обработки.ПоискИЗаменаДублирующихсяЭлементов.Создать();
		СтруктураПоиска = Новый Структура("Код,ИНН,Наименование,НаименованиеПолное",Неопределено,"=","=","=");
		НайденныеОбъекты  = ПоискДублей.НайтиДубли(ЭтотОбъект,СтруктураПоиска);
			
		Если НайденныеОбъекты.Количество() > 0 Тогда
			ФормаПоискаДублей = ПоискДублей.ПолучитьФорму("ФормаПоиска", ЭтаФорма);
			ФормаПоискаДублей.НайденныеОбъекты = НайденныеОбъекты;
			Результат = ФормаПоискаДублей.ОткрытьМодально();
			Если  Результат = Неопределено Тогда
					
				Отказ = Истина;
					
			ИначеЕсли Не Результат = Истина Тогда 
					
				Отказ = Истина;
				ОповеститьОЗаписиНовогоОбъекта(Результат);
				Модифицированность = Ложь;
				Если ЭтаФорма.Открыта() Тогда
					Закрыть();
				КонецЕсли;
					
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	НовыйОсновнойДоговорУказан = Ложь;
	Если мЭтоНовый = Истина Тогда
		ПроверитьОсновнойДоговорКонтрагента(Отказ, НовыйОсновнойДоговорУказан);
	КонецЕсли;
	мЭтоНовый = Неопределено;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Свойства.ОбъектОтбораЗначений   = Ссылка;
	Свойства.ОбъектОтбораНазначений = Ссылка;
	Если Свойства.ЗначенияСвойствМодифицированы() Тогда
		Свойства.ЗаписатьЗначенияСвойств();
		ОбновитьСвойства();
	КонецЕсли;
	
	Категории.ОбъектОтбораКатегорий = Ссылка;
	Если Категории.ЗначенияКатегорийМодифицированы() Тогда
		Категории.ЗаписатьКатегорииОбъекта();
		ОбновитьКатегории();
	КонецЕсли;

	ПрочитатьABCКлассПокупателя();
	ПрочитатьСтадиюВзаимоотношений();
	ПрочитатьИсточникИнформацииПриОбращении();
	ПрочитатьНадежность();

	ДоступностьЗакладок();
	
	События.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
	События.Отбор.ДокументыПоКонтрагенту.Значение      = Ссылка;
	События.Отбор.ДокументыПоКонтрагенту.ВидСравнения  = ВидСравнения.Равно;

	ДоступностьВводаНовыхЗаказов();
	
	Если НЕ ОбособленноеПодразделение Тогда
		Если НЕ ВходитВХолдинг Тогда
			Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
				ГоловнойКонтрагент = Ссылка;
			КонецЕсли; 
		Иначе
			Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не выбран головной контрагент.",, "Элемент не записан.");
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран головной контрагент.",, "Элемент не записан.");
			Отказ = Истина;
		ИначеЕсли ЗначениеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент = Ссылка Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для обособленного подразделения не может в качестве головного контрагента указываться сам контрагент",, "Элемент не записан.");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;

	Если НовыйОсновнойДоговорУказан Тогда
		Если Отказ Тогда
			ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			Попытка
				ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Элемент не записан!");
				ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	
	КонтактныеЛицаКонтрагента.Отбор.Владелец.Значение      = Ссылка;

	//Если нужно, то обновим параметры Веб-пользователя
	Если МодифицированыПараметрыWEBЗаказа Тогда

		МенеджерЗаписи = РегистрыСведений.УчетныеЗаписиИнтернетПользователей.СоздатьМенеджерЗаписи();
		Если РазрешенДоступКWEBЗаказам Тогда // нужно добавить
			МенеджерЗаписи.Логин      = Логин;
			МенеджерЗаписи.Пароль     = Пароль;
			МенеджерЗаписи.Контрагент = Ссылка;
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),Отказ, "Элемент не записан!");
				Возврат;
			КонецПопытки;
		Иначе // Нужно удалить, если что-то было

			Выборка = ПолучитьЗапросПоУчетнымЗаписямИнтернетПользователей().Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МенеджерЗаписи.Логин      = Выборка.Логин;
				МенеджерЗаписи.Удалить();
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		Свойства.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.Свойства);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		Категории.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	Свойства.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	ОбновитьСвойства();
	
	Категории.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	ОбновитьКатегории();

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

	Если (НЕ Ссылка.Пустая() И ГоловнойКонтрагент = Ссылка) ИЛИ Ссылка.Пустая() ИЛИ ОбособленноеПодразделение Тогда
		ВходитВХолдинг = Ложь;
	Иначе
		ВходитВХолдинг = Истина;
	КонецЕсли;
	ВидимостьГоловногоКонтрагента();
	
	УстановитьНадписьИННГоловногоКонтрагента();
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
		Если ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Действия.Кнопки.Файлы);
			РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		ИначеЕсли ЗначениеВыбора = "ОбновлениеКонтактнойИнформации" Тогда
			ОбновитьТелефоныКонтактногоЛица();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, , ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	УправлениеКонтактнойИнформацией.СкопироватьАдресКонтактнойИнформации(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, НаборКонтактнойИнформации);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ СОБЫТИЯ

// Обработчик события ПриВыводеСтроки элемента формы События.
//
Процедура СобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.СостояниеСобытия.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Завершено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 4;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Запланировано Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 6;
	ИначеЕсли ДанныеСтроки.СостояниеСобытия = Перечисления.СостоянияСобытий.Отменено Тогда
		ОформлениеСтроки.Ячейки.СостояниеСобытия.ИндексКартинки = 5;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.Важность.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Важность.ОтображатьТекст    = Ложь;
	Если ДанныеСтроки.Важность = Перечисления.Важность.Высокая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.Важность = Перечисления.Важность.Низкая Тогда
		ОформлениеСтроки.Ячейки.Важность.ИндексКартинки = 1;
	КонецЕсли; 

	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьФлажок   = Ложь;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ОтображатьТекст    = Истина;
	ОформлениеСтроки.Ячейки.ВидСобытия.ИндексКартинки     = УправлениеКонтактами.ОпределитьИндексКартинкиВидаСобытия(ДанныеСтроки.ВидСобытия,ДанныеСтроки.ТипСобытия);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы События.
//
Процедура СобытияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ВвестиНовоеСобытие(Копирование, Элемент);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.СделатьОсновным.
//
Процедура КоманднаяПанельБанковскиеСчетаСделатьОсновным(Кнопка)

	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Если ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка Тогда
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтрагента.СделатьОсновным.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтрагентаСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеКонтактноеЛицо = ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.КоманднаяПанельДоговоры.
//
Процедура КоманднаяПанельДоговорыСделатьОсновным(Кнопка)

	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Договоры.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;

	Если ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка Тогда
		ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();

КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.СписокСобытий.
//
Процедура ДействияФормыСписокСобытий(Кнопка)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	Иначе
		ФормаСпискаСобытий = Документы.Событие.ПолучитьФормуСписка();
		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Значение      = Ссылка;
		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Использование = Истина;
		ФормаСпискаСобытий.Открыть();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.Файлы.
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.Отчет.
//
Процедура ДействияФормыОтчет(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
	Отчет.КонтрагентОтчета = Ссылка;
	Отчет.ДатаОтчета = ТекущаяДата();
	
	ФормаОтчета = Отчет.ПолучитьФорму();
	
	Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
	
	ФормаОтчета.Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ВедомостьВзаиморасчетов.
//
Процедура ДействияФормыВедомостьВзаиморасчетов(Кнопка)
	
	ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
	
	ОтчетКонтрагента.УстановитьНачальныеНастройки();
		
	ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
	ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
	ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
	ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Порядок.Очистить();
	
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
		
	ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ?(Ссылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ЭлементОтбора.Значение = Ссылка;
	
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Период");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор");
		
	ОтчетКонтрагента.УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
	
	ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
	ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.Продажи.
//
Процедура ДействияФормыПродажи(Кнопка)
	
		ОтчетПродажи = Отчеты.Продажи.Создать();
		ОтчетПродажи.УстановитьНачальныеНастройки();
		
		Пока ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
			
			ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
			
		КонецЦикла;
		
		Пока ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
			
			ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
			
		КонецЦикла;
		
		Пока ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
			
			ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
			
		КонецЦикла;
		
		ОтчетПродажи.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
		ОтчетПродажи.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
		ОтчетПродажи.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
		
		ЭлементОтбора = ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ?(Ссылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		ЭлементОтбора.Значение = Ссылка;
		
		ОтчетПродажи.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
		ФормаОтчета = ОтчетПродажи.ПолучитьФорму();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ЗаказыПокупателей.
//
Процедура ДействияФормыЗаказыПокупателей(Кнопка)
	
	ОтчетКонтрагента = Отчеты.АнализЗаказовПокупателей.Создать();
		
	ОтчетКонтрагента.УстановитьНачальныеНастройки();
			
	Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
				
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
				
	КонецЦикла;
			
	Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
				
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
				
	КонецЦикла;
			
	Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
				
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
				
	КонецЦикла;
			
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СостояниеОплаты");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПокупателя");
		
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("СостояниеОтгрузки", ТипРазмещенияРеквизитовИзмерений.Отдельно,3);

	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Запланировано",     Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Предоплата",         "Предоплата",        Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаУпр",			 "Осталось отгрузить "+Символы.ПС+ "(в валюте упр. учета)",	   Истина, "ЧЦ=15; ЧДЦ=2");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаВзаиморасчетов","Осталось отгрузить "+Символы.ПС+ "(в валюте взаиморасчетов)",Ложь, "ЧЦ=15; ЧДЦ=2");
		
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Запланировано",      "Запланировано",       Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузить",  "Осталось отгрузить",  Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СоСклада",           "Со склада",           Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Заказано",           "Заказано",            Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОбеспечить", "Осталось обеспечить", Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		
	ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ДоговорКонтрагентаВладелец"];
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ?(Ссылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ЭлементОтбора.Значение = Ссылка;
		
	ОтчетКонтрагента.СостояниеОплатыПоЗаказу 	= Истина;
	ОтчетКонтрагента.НеОплачено 				= Истина;
	ОтчетКонтрагента.ОплаченоЧастично 			= Истина;
		
	ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
			
	ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ЗаказыПоставщикам.
//
Процедура ДействияФормыЗаказыПоставщикам(Кнопка)
	
	ОтчетКонтрагента = Отчеты.АнализЗаказовПоставщикам.Создать();
		
	ОтчетКонтрагента.УстановитьНачальныеНастройки();
			
	Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
				
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
				
	КонецЦикла;
			
	Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
				
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
				
	КонецЦикла;
			
	Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
				
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
				
	КонецЦикла;
			
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СостояниеОплаты");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПоставщику");

	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("СостояниеОтгрузки", ТипРазмещенияРеквизитовИзмерений.Отдельно,3);

	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Сумма заказа",   				Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗапланировано", "Сумма запланировано оплатить",Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", 			Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Оплачено",   		 "Оплачено",		 			Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьЗакупитьСуммаУпр",			 "Осталось закупить "+Символы.ПС+ "(в валюте упр. учета)",	   Ложь, "ЧЦ=15; ЧДЦ=2");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьЗакупитьСуммаВзаиморасчетов", "Осталось закупить "+Символы.ПС+ "(в валюте взаиморасчетов)",Ложь, "ЧЦ=15; ЧДЦ=2");
		
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Запланировано",      "Запланировано",      Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузить",  "Осталось закупить",  Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
	ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Заказано",           "Размещено в заказе", Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
			
	ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ДоговорКонтрагентаВладелец"];
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ?(Ссылка.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	ЭлементОтбора.Значение = Ссылка;
		
	ОтчетКонтрагента.СостояниеОплатыПоЗаказу 	= Истина;
	ОтчетКонтрагента.НеОплачено 				= Истина;
	ОтчетКонтрагента.ОплаченоЧастично 			= Истина;
			
	ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
			
	ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ТелефонныйЗвонок.
//
Процедура ДействияФормыТелефонныйЗвонок(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ТелефонныйЗвонок);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ЛичнаяВстреча.
//
Процедура ДействияФормыЛичнаяВстреча(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ЛичнаяВстреча);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ЭлектронноеПисьмо.
//
Процедура ДействияФормыЭлектронноеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.ПочтовоеПисьмо.
//
Процедура ДействияФормыПочтовоеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.ПочтовоеПисьмо);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.Прочее.
//
Процедура ДействияФормыПрочее(Кнопка)
	
	ВвестиНовоеСобытие(Ложь, Неопределено, Перечисления.ВидыСобытий.Прочее);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.НовыйЗаказПокупателя.
//
Процедура ДействияФормыНовыйЗаказПокупателя(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Покупатель Тогда
		Предупреждение("Контрагент не является покупателем.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйЗаказ.Контрагент = Ссылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.НовыйЗаказПоставщику.
//
Процедура ДействияФормыНовыйЗаказПоставщику(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ Поставщик Тогда
		Предупреждение("Контрагент не является поставщиком.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
	НовыйЗаказ.Контрагент = Ссылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельВидыДеятельности.СделатьОсновным.
//
Процедура КоманднаяПанельВидыДеятельностиСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойВидДеятельности = ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности;
	ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.МенеджерыПокупателяСделатьОсновным.
//
Процедура КоманднаяПанельМенеджерыПокупателяСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойМенеджерПокупателя = ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя;
	ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя();

КонецПроцедуры

// Обработчик события Нажатие элемента формы ДействияФормы.НаписатьПисьмо.
//
Процедура ДействияФормыНаписатьПисьмо(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.НаписатьПисьмоОбъекту(Ссылка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтрагента.НаписатьПисьмо.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтрагентаНаписатьПисьмо(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.НаписатьПисьмоОбъекту(ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтрагента.СписокСобытий.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтрагентаСписокСобытий(Кнопка)

	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка.Пустая() Тогда
	
		ФормаСпискаСобытий = Документы.Событие.ПолучитьФормуСписка();

		ФормаСпискаСобытий.Отбор.КонтактноеЛицо.Значение      = ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка;
		ФормаСпискаСобытий.Отбор.КонтактноеЛицо.Использование = Истина;

		ФормаСпискаСобытий.Открыть();
		
	Иначе

		Возврат;
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтрагента.ЭлектронныеПисьма.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтрагентаЭлектронныеПисьма(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(ЭлементыФормы.КонтактныеЛицаКонтрагента.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыЗагрузитьПерезаполнитьОбъектИзФайла(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
    Иначе
		ЭлектронныеДокументыКлиент.БыстрыйОбменЗагрузитьЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА СВОЙСТВ

// Обработчик события ПередНачаломДобавления элемента формы Свойства.
//
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Свойства.
//
Процедура СвойстваПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы Свойства.
//
Процедура СвойстваПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Свойства.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Свойства.
//
Процедура СвойстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Свойства.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Свойства.Значение.
//
Процедура СвойстваЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента формы Свойства.Значение.
//
Процедура СвойстваЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.Свойства.ТекущиеДанные.Значение = Неопределено;
	
	Свойства.ПривестиТипЗначенияСвойства(ЭлементыФормы.Свойства.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ МЕХАНИЗМА КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента формы Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Категории.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента формы Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	Категории.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьТекст    = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьФлажок   = Ложь;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)

	Модифицированность = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы СтадияВзаимоотношений.
//
Процедура СтадияВзаимоотношенийНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Перед указанием стадии взаимоотношений необходимо записать элемент");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.СтадииВзаимоотношенийСПокупателями.ПолучитьФормуСписка(,ЭтаФорма,"Контрагент"+Код);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события Нажатие элемента формы ИсточникИнформации
//
Процедура ИсточникИнформацииПриОбращенииНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Источники информации при обращении отображаются только у записанных элементов справочника и устанавливаются в документе 'Событие'");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.ИсточникИнформацииПриОбращении.ПолучитьФормуСписка(,ЭтаФорма);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы Договоры.
//
Процедура ДоговорыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И ЭтотОбъект.ОсновнойДоговорКонтрагента = ДанныеСтроки.Ссылка Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки <> Неопределено Тогда
		СсылкаСтроки = ДанныеСтроки.Ссылка;
	Иначе
		СсылкаСтроки = Неопределено;
	КонецЕсли;
	
	Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И ЭтотОбъект.ОсновнойБанковскийСчет = СсылкаСтроки Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

КонецПроцедуры

// Обработчик события Очистка элемента формы ВидКонтрагента.
//
Процедура ВидКонтрагентаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Возврат;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВидКонтрагента.
//
Процедура ВидКонтрагентаПриИзменении(Элемент)

	Если ВидКонтрагента = "ФизическоеЛицо" Тогда
		ЮрФизЛицо 							= Перечисления.ЮрФизЛицо.ФизЛицо;
		КПП									= "";
		Если НЕ ВходитВХолдинг Тогда
			ГоловнойКонтрагент				= Ссылка;
		КонецЕсли;
		ОбособленноеПодразделение			= Ложь;
	ИначеЕсли ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		ЮрФизЛицо							= Перечисления.ЮрФизЛицо.ЮрЛицо;
		ДокументУдостоверяющийЛичность		= "";
		Если ГоловнойКонтрагент = Ссылка Тогда
			ГоловнойКонтрагент				= Неопределено;
			ИНН								= "";
		Иначе
			ИНН								= ГоловнойКонтрагент.ИНН;
		КонецЕсли;
		ОбособленноеПодразделение			= Истина;
		ВходитВХолдинг						= Ложь;
	Иначе
		ЮрФизЛицо							= Перечисления.ЮрФизЛицо.ЮрЛицо;
		ДокументУдостоверяющийЛичность		= "";
		Если НЕ ВходитВХолдинг Тогда
			ГоловнойКонтрагент				= Ссылка;
		КонецЕсли;
		ОбособленноеПодразделение			= Ложь;
	КонецЕсли;
	
	УстановитьНадписьИННГоловногоКонтрагента();
	
	ВидимостьПанелейЮрФизЛица();
	ПроверитьИНН();

КонецПроцедуры

// Обработчик события Нажатие элемента формы Надежность.
//
Процедура НадежностьНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Перед указанием надежности поставщика необходимо записать элемент");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.НадежностьПоставщиков.ПолучитьФормуСписка(,ЭтаФорма,"Контрагент"+Код);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Покупатель.
//
Процедура ПокупательПриИзменении(Элемент)

	ВидимостьПанелейПоставщикПокупатель();
	ДоступностьВводаНовыхЗаказов();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Поставщик.
//
Процедура ПоставщикПриИзменении(Элемент)

	ВидимостьПанелейПоставщикПокупатель();
	ДоступностьВводаНовыхЗаказов();

КонецПроцедуры

// Обработчик события Нажатие элемента формы ABCКлассПокупателя.
//
Процедура ABCКлассПокупателяНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Предупреждение("Перед указанием АВС-класса клиента необходимо записать элемент");
		Отказ = Истина;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаСпискаРегистра = РегистрыСведений.ABCКлассификацияПокупателей.ПолучитьФормуСписка(,ЭтаФорма,"Контрагент"+Код);
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Значение = Ссылка;
		ФормаСпискаРегистра.РегистрСведенийСписок.Отбор.Контрагент.Использование = Истина;
		ФормаСпискаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);
	
	Если ЗначениеЗаполнено(ОКОПФ) Тогда
		Список.Добавить(ПолучитьПолноеНаименованиеСОКОПФ());
	КонецЕсли;

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

// Обработчик события ПередНачаломДобавления элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Договоры.
//
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы Договоры.
//
Процедура ДоговорыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
		ОсновнойДоговорКонтрагента = Элемент.ТекущаяСтрока.Ссылка;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы Договоры.
//
Процедура ДоговорыПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияКонтактныеЛицаКонтрагентаПриАктивизацииСтроки", 0.1, Истина);	 
	
КонецПроцедуры // КонтактныеЛицаКонтрагентаПриАктивизацииСтроки

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля КонтактныеЛицаКонтрагента
//
Процедура ОбработчикОжиданияКонтактныеЛицаКонтрагентаПриАктивизацииСтроки()
    
    ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
	ОбновитьТелефоныКонтактногоЛица();
    
КонецПроцедуры // ОбработчикОжиданияКонтактныеЛицаКонтрагентаПриАктивизацииСтроки

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.КонтактноеЛицо) Тогда
		Предупреждение("Контактное лицо должно быть обязательно заполнено");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = ОсновноеКонтактноеЛицо Тогда
		ОтветНаВопрос = Вопрос("Данное контактное лицо является основным. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Отказ = (ОтветНаВопрос <> КодВозвратаДиалога.Да);
		Если НЕ Отказ Тогда
			ОсновноеКонтактноеЛицо = Справочники.КонтактныеЛицаКонтрагентов.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности();
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойВидДеятельности) И ЗначениеЗаполнено(ДанныеСтроки.ВидДеятельности) И ОсновнойВидДеятельности = ДанныеСтроки.ВидДеятельности Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ВидыДеятельности.Количество() = 1 И НЕ ЗначениеЗаполнено(ОсновнойВидДеятельности) И ЗначениеЗаполнено(ВидыДеятельности[0].ВидДеятельности) Тогда
	
		ОтветНаВопрос = Вопрос("Установить текущий вид деятельности основным ?", РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ОсновнойВидДеятельности = ВидыДеятельности[0].ВидДеятельности;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоВидаДеятельности();
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПередУдалением(Элемент, Отказ)
	
	Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ВидыДеятельности.ТекущиеДанные.ВидДеятельности = ОсновнойВидДеятельности Тогда
		ОтветНаВопрос = Вопрос("Данный вид деятельности является основным. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Отказ = (ОтветНаВопрос <> КодВозвратаДиалога.Да);
		Если НЕ Отказ Тогда
			ОсновнойВидДеятельности = Справочники.ВидыДеятельностиКонтрагентов.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы ВидыДеятельности.
//
Процедура ВидыДеятельностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДеятельности)
	   И ВидыДеятельности.НайтиСтроки(Новый Структура("ВидДеятельности", Элемент.ТекущиеДанные.ВидДеятельности)).Количество() > 1 Тогда
	
		Если ОтменаРедактирования Тогда
			ВидыДеятельности.Удалить(Элемент.ТекущаяСтрока);
		Иначе
			Предупреждение("Выбранный вид деятельности уже есть в списке.");
			Отказ = Истина;
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы МенеджерыПокупателя.
//
Процедура МенеджерыПокупателяПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя();
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы МенеджерыПокупателя.
//
Процедура МенеджерыПокупателяПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойМенеджерПокупателя) И ЗначениеЗаполнено(ДанныеСтроки.МенеджерПокупателя) И ОсновнойМенеджерПокупателя = ДанныеСтроки.МенеджерПокупателя Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы МенеджерыПокупателя.
//
Процедура МенеджерыПокупателяПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И ЗначениеЗаполнено(Элемент.ТекущиеДанные.МенеджерПокупателя)
	   И МенеджерыПокупателя.НайтиСтроки(Новый Структура("МенеджерПокупателя", Элемент.ТекущиеДанные.МенеджерПокупателя)).Количество() > 1 Тогда
	
		Если ОтменаРедактирования Тогда
			МенеджерыПокупателя.Удалить(Элемент.ТекущаяСтрока);
		Иначе
			Предупреждение("Выбранный менеджер покупателя уже есть в списке.");
			Отказ = Истина;
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы МенеджерыПокупателя.
//
Процедура МенеджерыПокупателяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если МенеджерыПокупателя.Количество() = 1 И НЕ ЗначениеЗаполнено(ОсновнойМенеджерПокупателя) И ЗначениеЗаполнено(МенеджерыПокупателя[0].МенеджерПокупателя) Тогда
	
		ОтветНаВопрос = Вопрос("Установить текущего менеджера основным ?", РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ОсновнойМенеджерПокупателя = МенеджерыПокупателя[0].МенеджерПокупателя;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя();
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы МенеджерыПокупателя.
//
Процедура МенеджерыПокупателяПередУдалением(Элемент, Отказ)
	
	Если ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.МенеджерыПокупателя.ТекущиеДанные.МенеджерПокупателя = ОсновнойМенеджерПокупателя Тогда
		ОтветНаВопрос = Вопрос("Данный менеджер является основным. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Отказ = (ОтветНаВопрос <> КодВозвратаДиалога.Да);
		Если НЕ Отказ Тогда
			ОсновнойМенеджерПокупателя = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) И ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И ДанныеСтроки.Ссылка = ОсновноеКонтактноеЛицо Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента формы КонтактныеЛицаКонтрагента.
//
Процедура КонтактныеЛицаКонтрагентаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если КонтактныеЛицаКонтрагента.Количество() = 1 И НЕ ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) И ЗначениеЗаполнено(КонтактныеЛицаКонтрагента[0].КонтактноеЛицо) Тогда
	
		ОтветНаВопрос = Вопрос("Установить текущее контактное лицо основным ?", РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			ОсновноеКонтактноеЛицо = КонтактныеЛицаКонтрагента[0].КонтактноеЛицо;
		КонецЕсли; 
	
	КонецЕсли; 
	
	ПроверитьДоступностьКнопкиУстановкиОсновногоМенеджераПокупателя();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИНН1.
//
Процедура ИНН1ПриИзменении(Элемент)
	
	ПроверитьИНН();
	ОбщегоНазначения.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИНН.
//
Процедура ИННПриИзменении(Элемент)
	ПроверитьИНН();
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ОКОПФ.
//
Процедура ОКОПФПриИзменении(Элемент)
	СформироватьНаименованиеПолноеАвтоматически();
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка для ОКОПФ.
//
Процедура ОКОПФНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторОКОПФ.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОКОПФ КАК КлассификаторОКОПФ
	|
	|ГДЕ
	|	КлассификаторОКОПФ.ПометкаУдаления = ЛОЖЬ И
	|	КлассификаторОКОПФ.БыстрыйВыбор = ИСТИНА";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаРезультата из Результат Цикл
		Список.Добавить(СтрокаРезультата.Ссылка);
	КонецЦикла;
	
	// Выбор из списка и обработка выбора.
	
	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.ОКОПФ);
	
	Если РезультатВыбора <> Неопределено Тогда
		ОКОПФ = РезультатВыбора.Значение;
		СформироватьНаименованиеПолноеАвтоматически();
	КонецЕсли;

КонецПроцедуры

Процедура ВходитВХолдингПриИзменении(Элемент)
	
	Если Элемент.Значение И ГоловнойКонтрагент = Ссылка И НЕ ОбособленноеПодразделение Тогда
		ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ГоловнойКонтрагент страницы ОбособленноеПодразделение
// панели ПанельЮрФизЛицо
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) И (ГоловнойКонтрагент.ОбособленноеПодразделение 
		ИЛИ ГоловнойКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Головной контрагент не может быть обособленным подразделением или физическим лицом");
		ГоловнойКонтрагент = Неопределено;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) И ГоловнойКонтрагент <> Ссылка Тогда
		ИНН = ГоловнойКонтрагент.ИНН;
	Иначе
		ИНН = "";
	КонецЕсли;

	УстановитьНадписьИННГоловногоКонтрагента();
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ГоловнойКонтрагент страницы ОбособленноеПодразделение
// панели ПанельЮрФизЛицо
Процедура ГоловнойКонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Контрагенты.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.ЮрФизЛицо.Установить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	ФормаВыбора.Отбор.ОбособленноеПодразделение.Установить(Ложь);
	Если ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ГоловнойКонтрагент;
	КонецЕсли; 
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ВидыДеятельностиОтветственныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.КонтактныеЛицаКонтрагентов.ПолучитьФормуВыбора(,Элемент);
	Форма.СправочникСписок.Отбор.Владелец.Использование = Истина;
	Форма.СправочникСписок.Отбор.Владелец.Значение = Ссылка;
	Форма.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельКонтактныеЛицаКонтрагентаКонтактныеЛицаОбновить(Кнопка)
	
	КонтактныеЛицаКонтрагента.Обновить();
	ОбновитьТелефоныКонтактногоЛица();
	
КонецПроцедуры

Процедура КомментарийСтрокойНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста");
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(Комментарий);
	ОтредактировалиТекст = ФормаРедактированияТекста.ОткрытьМодально();
	
	Если ОтредактировалиТекст = Истина Тогда
		Комментарий = ФормаРедактированияТекста.ПолучитьРедактируемыйТекст();
	КонецЕсли;
	
КонецПроцедуры

// Процедура Обработчик нажатия на кнопку КнопкаГенарацииКПП
Процедура КнопкаГенарацииКППНажатие(Элемент)
	
	ОбщегоНазначения.ЗаполнитьКППпоИНН(ИНН, КПП);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Печать" командной панели формы,
// вызывает печать по умолчанию для формы документа.
//
Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры // ОсновныеДействияФормыДействиеПечать()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ЭлектронныеПисьма.
//
Процедура КоманднаяПанельФормыЭлектронныеПисьма(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельФормы.ЭлектронныеПисьмаПлюсКонтактныеЛица.
//
Процедура КоманднаяПанельФормыЭлектронныеПисьмаПлюсКонтактныеЛица(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛица.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Ссылка
	|";
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	СписокКонтактныхЛиц.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СписокКонтактныхЛиц.Вставить(0, Ссылка);
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(СписокКонтактныхЛиц);
	
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.Страницы.Получить(ТекущаяСтраница) = Элемент.Страницы.WEBДоступ Тогда

		МодифицированыПараметрыWEBЗаказа = Истина;

		// Нужно прочитать значения Веб-доступа из регистра
		Если ПустаяСтрока(Логин)
		   И Не ЭтоНовый() Тогда

			ТЗ = ПолучитьЗапросПоУчетнымЗаписямИнтернетПользователей().Выполнить().Выгрузить();
			КоличествоСтрок = ТЗ.Количество() ;
			Если КоличествоСтрок = 0 Тогда
				РазрешенДоступКWEBЗаказам = Ложь;
			Иначе
				Логин  = ТЗ[0].Логин;
				Пароль = ТЗ[0].Пароль;
				РазрешенДоступКWEBЗаказам = Истина;

				Если КоличествоСтрок > 1 Тогда
					ТекстПредупреждения = "Внимание!
					                       |для данного контрагента заведены несколько учетных записей Интернет-пользователей с логинами: 
					                       |";
					Для каждого СтрокаТаблицы Из ТЗ Цикл
						ТекстПредупреждения = ТекстПредупреждения + " """+ СокрЛП(СтрокаТаблицы.Логин) + ""","
					КонецЦикла;
					ТекстПредупреждения = Лев(ТекстПредупреждения, СтрДлина(ТекстПредупреждения)- 1); // убираем последнюю запятую
					ТекстПредупреждения = ТекстПредупреждения + ".
					                                            |Нужно удалить ненужные записи в регистре сведений ""Учетные записи Интернет-пользователей"".";
					Предупреждение(ТекстПредупреждения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		УстановитьДоступностьЛогинаПароля();
	КонецЕсли;

КонецПроцедуры

Процедура РазрешенДоступКWEBЗаказамПриИзменении(Элемент)

	Если РазрешенДоступКWEBЗаказам Тогда

		// Заполним значения, если пустые
		Если ПустаяСтрока(Логин) Тогда
			Логин = СокрЛП(Код);
		КонецЕсли;

		Если ПустаяСтрока(Пароль) Тогда
			Пароль = УправлениеПользователями.СгенерироватьПароль();
		КонецЕсли;
	КонецЕсли;

	УстановитьДоступностьЛогинаПароля();

КонецПроцедуры

Процедура КнопкаСгенерироватьПарольНажатие(Элемент)
	Пароль = УправлениеПользователями.СгенерироватьПароль();
КонецПроцедуры

Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);
	
	Если НЕ ОбособленноеПодразделение И мИНН <> ИНН Тогда
		Оповестить("ОбновлениеИННОбособленныхПодразделенийКонтрагента", , Ссылка);
	КонецЕсли;
	
КонецПроцедуры

//ВЦ+ ///////////////////////////////////////
Процедура ДействияФормыЗаполнитьПоЕГРЮЛ(Кнопка)
	
	Коннект = ПолучитьПодключение();
	Сведения = Неопределено;
	
	Если СтрДлина(ИНН) > 10 Тогда
		
		Сведения = Коннект.РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СокрЛП(ИНН));
		
	Иначе
		
		Сведения = Коннект.РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(СокрЛП(ИНН));
	КонецЕсли; 
	
	Если Сведения = Неопределено Тогда
	
		Сообщить("Инн не задан, или меньше 10 знаков");
		Коннект = Неопределено;
		Возврат;
	
	КонецЕсли; 
	
	ЮрАдрес = Сведения.ЮридическийАдрес.Представление;
	
	НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборЗаписей, Ссылка);
	
	ЮрАдресНайден = Ложь;

	Для каждого КонтИнформация Из НаборЗаписей Цикл
	
		Если КонтИнформация.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента") Тогда
		
			КонтИнформация.Представление = ЮрАдрес;
		    ЮрАдресНайден = Истина;
		КонецЕсли; 
	
	КонецЦикла; 
	
	Если НЕ ЮрАдресНайден Тогда
	
		ЗаписьЮрАдрес = НаборЗаписей.Добавить();
		ЗаписьЮрАдрес.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
		ЗаписьЮрАдрес.Объект = Ссылка;
		ЗаписьЮрАдрес.Период = ТекущаяДата();
		ЗаписьЮрАдрес.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		ЗаписьЮрАдрес.Представление = ЮрАдрес;
	
	КонецЕсли; 
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборЗаписей, Ссылка, Ложь);
	
	НаименованиеПолное = Сведения.НаименованиеСокращенное;
	//Наименование = Сведения.Наименование;
	
	Коннект = Неопределено;
	
	ЭтаФорма.Модифицированность = Истина;
	
	НаборКонтактнойИнформации.Прочитать();
	
	ЭтаФорма.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодключение()
	
	ПараметрыПодключения = "File=""C:\1С_Базы\БП 8 30"";Usr=""вц"";Pwd=""вц"";";
	Коннектор = Новый COMОбъект("V83.COMConnector");
	Попытка
		
		Возврат Коннектор.Connect(ПараметрыПодключения);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка подключения!!!");
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ПолучитьПодключение()
//ВЦ-////////////////////////////////////////
ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо.Видимость 					= Ложь;
ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо.Видимость 					= Истина;
ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ОбособленноеПодразделение.Видимость 	= Ложь;

ЭлементыФормы.Панель.Страницы.WEBДоступ.Видимость = Константы.ИспользоватьWEBЗаказы.Получить();

ВидимостьПанелейЮрФизЛица();

мЖирныйШрифт = Новый Шрифт(,, Истина);
мОбычныйШрифт = Новый Шрифт();

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;

События.Колонки.Добавить("ТипСобытия");

СписокРеквизитовДляПроверкиЗаполнения = Новый СписокЗначений();
СписокРеквизитовДляПроверкиЗаполнения.Добавить("Наименование", "Наименование");

МодифицированыПараметрыWEBЗаказа = Ложь;

СписокВыбораВида = Новый СписокЗначений;
СписокВыбораВида.Добавить("ЮридическоеЛицо", 			Строка(Перечисления.ЮрФизЛицо.ЮрЛицо));
СписокВыбораВида.Добавить("ФизическоеЛицо", 			Строка(Перечисления.ЮрФизЛицо.ФизЛицо));
СписокВыбораВида.Добавить("ОбособленноеПодразделение", 	"Обособленное подразделение");
ЭлементыФормы.ВидКонтрагента.СписокВыбора = СписокВыбораВида;

мИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
