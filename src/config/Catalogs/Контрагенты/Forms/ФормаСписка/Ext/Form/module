////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// объект для поиска данных
Перем мПоискОбъектовВСпискахДанных;

// Хранит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура открывает форму нового документ Контакт.
//
Процедура ВвестиНовоеСобытие(ВыбранныйВидСобытия)

	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСсылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя выбирать группу контрагентов.");
		Возврат;
	КонецЕсли; 

	Док = Документы.Событие.СоздатьДокумент();
	
	Док.ВидСобытия     = ВыбранныйВидСобытия;
	Док.ВидОбъекта     = Перечисления.ВидыОбъектовСобытия.Контрагент;
	Док.Контрагент     = ТекущаяСсылка;
	Док.КонтактноеЛицо = ТекущаяСсылка.ОсновноеКонтактноеЛицо;

	ФормаСобытия       = Док.ПолучитьФорму(,ЭтаФорма);
	
	ФормаСобытия.Открыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриПолученииДанных" элемента формы "СправочникСписок"
//
Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	// ЭлектронныеДокументы
	ЭлектронныеДокументыПереопределяемый.УстановитьСтатусПодключенияК1СЭДО(Элемент, ОформленияСтрок);
	// Конец ЭлектронныеДокументы
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события нажатие по кнопке СписокСобытий командной панели ДействияФормы.
//
Процедура ДействияФормыСписокСобытий(Кнопка)

	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Данная операция недоступна для группы.");
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка.Пустая() Тогда
	
		ФормаСпискаСобытий = Документы.Событие.ПолучитьФормуСписка();

		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Значение      = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		ФормаСпискаСобытий.Отбор.ДокументыПоКонтрагенту.Использование = Истина;

		ФормаСпискаСобытий.Открыть();
		
	Иначе

		Возврат;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Файлы командной панели ДействияФормы.
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Отчет командной панели ДействияФормы.
//
Процедура ДействияФормыОтчет(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
			
			Предупреждение("Нельзя формировать отчет по группе!");
			Возврат;
			
		Иначе
			
			Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
			Отчет.КонтрагентОтчета = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
			Отчет.ДатаОтчета = ТекущаяДата();
			
			ФормаОтчета = Отчет.ПолучитьФорму();
			
			Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
			
			ФормаОтчета.Открыть();
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ВедомостьВзаиморасчетов командной панели ДействияФормы.
//
Процедура ДействияФормыВедомостьВзаиморасчетов(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		
		ОтчетКонтрагента = Отчеты.ВедомостьВзаиморасчетыСКонтрагентами.Создать();
		
		ОтчетКонтрагента.УстановитьНачальныеНастройки();
		
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Очистить();
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Очистить();
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Очистить();
		ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Порядок.Очистить();
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
		
		ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ?(ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		ЭлементОтбора.Значение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Период");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("Регистратор");
		
		ОтчетКонтрагента.УниверсальныйОтчет.ВыводитьДетальныеЗаписи = Истина;
		
		ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
		ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Продажи командной панели ДействияФормы.
//
Процедура ДействияФормыПродажи(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		
		ОтчетПродажи = Отчеты.Продажи.Создать();
		ОтчетПродажи.УстановитьНачальныеНастройки();
		
		Пока ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
			
			ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
			
		КонецЦикла;
		
		Пока ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
			
			ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
			
		КонецЦикла;
		
		Пока ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
			
			ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
			
		КонецЦикла;
		
		ОтчетПродажи.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Контрагент");
		ОтчетПродажи.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Номенклатура");
		ОтчетПродажи.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("Регистратор");
		
		ЭлементОтбора = ОтчетПродажи.УниверсальныйОтчет.ПостроительОтчета.Отбор["Контрагент"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ?(ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		ЭлементОтбора.Значение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		
		ОтчетПродажи.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
		
		ФормаОтчета = ОтчетПродажи.ПолучитьФорму();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЗаказыПокупателей командной панели ДействияФормы.
//
Процедура ДействияФормыЗаказыПокупателей(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		
		ОтчетКонтрагента = Отчеты.АнализЗаказовПокупателей.Создать();
		
		ОтчетКонтрагента.УстановитьНачальныеНастройки();
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
				
		КонецЦикла;
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
				
		КонецЦикла;
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
				
		КонецЦикла;
			
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СостояниеОплаты");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПокупателя");
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("СостояниеОтгрузки", ТипРазмещенияРеквизитовИзмерений.Отдельно,3);

		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Запланировано",     Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Предоплата",         "Предоплата",        Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаУпр",			 "Осталось отгрузить "+Символы.ПС+ "(в валюте упр. учета)",	   Истина, "ЧЦ=15; ЧДЦ=2");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузитьСуммаВзаиморасчетов","Осталось отгрузить "+Символы.ПС+ "(в валюте взаиморасчетов)",Ложь, "ЧЦ=15; ЧДЦ=2");
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Запланировано",      "Запланировано",       Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузить",  "Осталось отгрузить",  Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СоСклада",           "Со склада",           Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Заказано",           "Заказано",            Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОбеспечить", "Осталось обеспечить", Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Отгрузка (в ед. хранения)");
		
		ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ДоговорКонтрагентаВладелец"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ?(ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		ЭлементОтбора.Значение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		
		ОтчетКонтрагента.СостояниеОплатыПоЗаказу 	= Истина;
		ОтчетКонтрагента.НеОплачено 				= Истина;
		ОтчетКонтрагента.ОплаченоЧастично 			= Истина;
		
		ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
			
		ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЗаказыПоставщикам командной панели ДействияФормы.
//
Процедура ДействияФормыЗаказыПоставщикам(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка) Тогда
		
		ОтчетКонтрагента = Отчеты.АнализЗаказовПоставщикам.Создать();
		
		ОтчетКонтрагента.УстановитьНачальныеНастройки();
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияСтроки[0]);
				
		КонецЦикла;
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ИзмеренияКолонки[0]);
				
		КонецЦикла;
			
		Пока ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Количество() > 0 Цикл
				
			ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля.Удалить(ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.ВыбранныеПоля[0]);
				
		КонецЦикла;
			
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагентаВладелец");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ДоговорКонтрагента");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("СостояниеОплаты");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьИзмерениеСтроки("ЗаказПоставщику");

		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьДополнительноеПоле("СостояниеОтгрузки", ТипРазмещенияРеквизитовИзмерений.Отдельно,3);

		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗаказа",        "Сумма заказа",   				Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("СуммаЗапланировано", "Сумма запланировано оплатить",Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОплатить",   "Осталось оплатить", 			Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Оплачено",   		 "Оплачено",		 			Истина, "ЧЦ=15; ЧДЦ=2", "Оплата", "Оплата");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьЗакупитьСуммаУпр",			 "Осталось закупить "+Символы.ПС+ "(в валюте упр. учета)",	   Ложь, "ЧЦ=15; ЧДЦ=2");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьЗакупитьСуммаВзаиморасчетов", "Осталось закупить "+Символы.ПС+ "(в валюте взаиморасчетов)",Ложь, "ЧЦ=15; ЧДЦ=2");
		
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Запланировано",      "Запланировано",      Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("ОсталосьОтгрузить",  "Осталось закупить",  Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
		ОтчетКонтрагента.УниверсальныйОтчет.ДобавитьПоказатель("Заказано",           "Размещено в заказе", Ложь, "ЧЦ=15; ЧДЦ=3", "Отгрузка", "Закупка (в ед. хранения)");
			
		ЭлементОтбора = ОтчетКонтрагента.УниверсальныйОтчет.ПостроительОтчета.Отбор["ДоговорКонтрагентаВладелец"];
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ?(ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
		ЭлементОтбора.Значение = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
		
		ОтчетКонтрагента.СостояниеОплатыПоЗаказу 	= Истина;
		ОтчетКонтрагента.НеОплачено 				= Истина;
		ОтчетКонтрагента.ОплаченоЧастично 			= Истина;
			
		ОтчетКонтрагента.УниверсальныйОтчет.мВосстанавливатьНастройкиПриОткрытии = Ложь;
			
		ФормаОтчета = ОтчетКонтрагента.ПолучитьФорму();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ТелефонныйЗвонок командной панели ДействияФормы.
//
Процедура ДействияФормыТелефонныйЗвонок(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ТелефонныйЗвонок);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЛичнаяВстреча командной панели ДействияФормы.
//
Процедура ДействияФормыЛичнаяВстреча(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ЛичнаяВстреча);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЭлектронноеПисьмо командной панели ДействияФормы.
//
Процедура ДействияФормыЭлектронноеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ЭлектронноеПисьмо);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ПочтовоеПисьмо командной панели ДействияФормы.
//
Процедура ДействияФормыПочтовоеПисьмо(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.ПочтовоеПисьмо);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Прочее командной панели ДействияФормы.
//
Процедура ДействияФормыПрочее(Кнопка)
	
	ВвестиНовоеСобытие(Перечисления.ВидыСобытий.Прочее);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке НовыйЗаказПокупателя командной панели ДействияФормы.
//
Процедура ДействияФормыНовыйЗаказПокупателя(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСсылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя выбирать группу контрагентов.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСсылка.Покупатель Тогда
		Предупреждение("Контрагент не является покупателем.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	НовыйЗаказ.Контрагент = ТекущаяСсылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке НовыйЗаказПоставщику командной панели ДействияФормы.
//
Процедура ДействияФормыНовыйЗаказПоставщику(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекущаяСсылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя выбирать группу контрагентов.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущаяСсылка.Поставщик Тогда
		Предупреждение("Контрагент не является поставщиком.");
		Возврат;
	КонецЕсли; 
	
	НовыйЗаказ = Документы.ЗаказПоставщику.СоздатьДокумент();
	НовыйЗаказ.Контрагент = ТекущаяСсылка;
	НовыйЗаказ.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке НаписатьПисьмо командной панели ДействияФормы.
//
Процедура ДействияФормыНаписатьПисьмо(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	УправлениеЭлектроннойПочтой.НаписатьПисьмоОбъекту(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЭлектронныеПисьма командной панели ДействияФормы.
//
Процедура ДействияФормыЭлектронныеПисьма(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Данная операция недоступна для группы.");
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке ЭлектронныеПисьмаПлюсКонтактныеЛица командной панели ДействияФормы.
//
Процедура ДействияФормыЭлектронныеПисьмаПлюсКонтактныеЛица(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Данная операция недоступна для группы.");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактныеЛицаКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛицаКонтрагентов
	|ГДЕ
	|	КонтактныеЛицаКонтрагентов.Владелец = &Ссылка
	|";
	
	СписокКонтактныхЛиц = Новый СписокЗначений;
	
	СписокКонтактныхЛиц.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	СписокКонтактныхЛиц.Вставить(0, ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(СписокКонтактныхЛиц);
	
КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ДействиеСвойства.
//
Процедура ДействияФормыДействиеСвойства(Кнопка)

	Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, );

	Форма.ОбъектОтбораЗначений   = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;
	Форма.ОбъектОтбораНазначений = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ДействиеКатегории.
//
Процедура ДействияФормыДействиеКатегории(Кнопка)

	Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, );

	Форма.НазначениеКатегорий   = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
	Форма.ОбъектОтбораКатегорий = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры

// Процедура - обработчик события нажатие по кнопке Отчет командной панели ДействияФормы.
//
Процедура ДействияФормыПомощникВвода(Кнопка)
	
	Форма = Обработки.РедактированиеДанныхНезарегистрированныхКонтрагентов.ПолучитьФорму( , ЭлементыФормы.СправочникСписок);
	Форма.ЗаполнитьНачальныеДанные();
	Форма.СписокСправочника = Истина;
	Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока <> Неопределено Тогда
		
		Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Ссылка.ЭтоГруппа Тогда
			Форма.Родитель = ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Ссылка;
		ИначеЕсли ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Ссылка.Родитель <> Неопределено Тогда
			Форма.Родитель = ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Ссылка.Родитель;
		КонецЕсли;
		
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыЗагрузитьПерезаполнитьОбъектИзФайла(Кнопка)
	
	ТекДанные = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекДанные.ЭтоГруппа Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Для загрузки объекта из файла выберите элемент, а не группу.");
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиент.БыстрыйОбменЗагрузитьЭД(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// перед открытием формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	мПоискОбъектовВСпискахДанных.ВосстановитьНастройки(ЭлементыФормы.ТипПоискаДанных);
	мПоискОбъектовВСпискахДанных.ВосстановитьСписокОтбораДанных();

	// ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы

КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыПоиска"
		И Источник = ЭтаФорма Тогда
		
		// обновляем выпадающий список настроек отбора данных
		мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	
	КонецЕсли;
    		
КонецПроцедуры

// при закрытии формы
Процедура ПриЗакрытии()
	
	мПоискОбъектовВСпискахДанных.СохранитьНастройки();
	
КонецПроцедуры

//УНИВЕРСАЛЬНЫЙ ПОИСК ОБЪЕКТОВ
///////////////////////////////////////////////////////////////////////////////

// Процедура - обработчик события ПриИзменении элемента управления ЗначениеОтбораСпискаКонтрагентов.
//
Процедура ЗначениеОтбораСпискаКонтрагентовПриИзменении(Элемент)
	
	мПоискОбъектовВСпискахДанных.ЗначениеОтбораПоискаданныхПриИзменении(Элемент, ЗначениеОтбораСпискаКонтрагентов);
				
КонецПроцедуры

// Процедура - обработчик события АвтоПодборТекста элемента управления ЗначениеОтбораСпискаКонтрагентов.
//
Процедура ЗначениеОтбораСпискаКонтрагентовАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
			
КонецПроцедуры

// при выводе строки списка
Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мПоискОбъектовВСпискахДанных.СписокПриВыводеСтрокиСпискаОтбораДанных(Элемент, ОформлениеСтроки, ДанныеСтроки);
			
КонецПроцедуры


Процедура ТипПоискаДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// обработка выбора элемента из списка
	мПоискОбъектовВСпискахДанных.ОбработатьВыборТипаОграниченияИзСписка(ЭтаФорма, Элемент, ВыбранноеЗначение, 
		СтандартнаяОбработка, ЗначениеОтбораСпискаКонтрагентов);
	
КонецПроцедуры

// кнопка открытия настройки
Процедура ТипПоискаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанныхОткрытие(ЗначениеОтбораСпискаКонтрагентов, Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыДействиеУчетныеЗаписиИнтернетПользователей(Кнопка)
	РегистрыСведений.УчетныеЗаписиИнтернетПользователей.ПолучитьФормуСписка().Открыть();
КонецПроцедуры


мПоискОбъектовВСпискахДанных = МодульПоискаВДанных.СоздатьОбъектПоискаДанныхДляКонтрагентов(ЭлементыФормы.ЗначениеОтбораСпискаКонтрагентов, 
	ЭлементыФормы.СправочникСписок, СправочникСписок);

мИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
