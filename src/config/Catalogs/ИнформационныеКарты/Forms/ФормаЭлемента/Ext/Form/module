Перем мТипКартыДоИзменения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость для элементов формы.
//
Процедура УстановитьВидимость()

	ЭтоШтриховаяКарта = (ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая);
	ЭтоДисконтнаяКарта = (ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная);

	ЭлементыФормы.ТипШтрихкода.Видимость = ЭтоШтриховаяКарта;
	ЭлементыФормы.НадписьТипШтрихкода.Видимость = ЭтоШтриховаяКарта;

	ЭлементыФормы.ВидДисконтнойКарты.Видимость = ЭтоДисконтнаяКарта;
	ЭлементыФормы.НадписьВидДисконтнойКарты.Видимость = ЭтоДисконтнаяКарта;

	Если ЭтоДисконтнаяКарта Тогда
		ЭлементыФормы.ВладелецКарты.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ВладелецКарты.ОтметкаНезаполненного = Ложь;
	Иначе
		ЭлементыФормы.ВладелецКарты.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

// Процедура изменяет внешний вид формы в зависимости от значения, выбранного в поле "ТипКарты".
//
Процедура ПриИзмененииТипаКарты()

	Если ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная Тогда
		ЭлементыФормы.ВладелецКарты.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе
		ЭлементыФормы.ВладелецКарты.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	КонецЕсли;

	ВладелецКарты = ЭлементыФормы.ВладелецКарты.ОграничениеТипа.ПривестиЗначение(ВладелецКарты);

КонецПроцедуры // ПриИзмененииТипаКарты()

// Процедура изменяет внешний вид формы в зависимости от значения, выбранного в поле "ВидКарты".
//
Процедура ПриИзмененииВидаКарты()

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		ЭлементыФормы.ТекущийКодКарты.Данные = "ШтрихКодКарты";
		ЭлементыФормы.ТекущийКодКарты.ОграничениеТипа = Новый ОписаниеТипов("Строка",,,,ТипШтрихкода.ТипЗначения.КвалификаторыСтроки);
	Иначе
		ЭлементыФормы.ТекущийКодКарты.Данные = "КодКарты";
		ЭлементыФормы.ТекущийКодКарты.ОграничениеТипа = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100));
	КонецЕсли;

КонецПроцедуры // ПриИзмененииВидаКарты()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ВидКарты) Тогда
			ВидКарты = Перечисления.ВидыИнформационныхКарт.Магнитная;
			ПриИзмененииВидаКарты();
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ТипКарты) Тогда
			ТипКарты = Перечисления.ТипыИнформационныхКарт.Дисконтная;
			ПриИзмененииТипаКарты();
		КонецЕсли;

		ТипШтрихКода = ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		ЭлементыФормы.ТекущийКодКарты.Данные = "ШтрихКодКарты";
	Иначе
		ЭлементыФормы.ТекущийКодКарты.Данные = "КодКарты";
	КонецЕсли;

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		Штрихкод        = Неопределено;
		СтрокаШтрихкода = УправлениеРозничнойТорговлей.ПолучитьШтрихКод(Ссылка);
		Если СтрокаШтрихкода <> Неопределено Тогда
			ШтрихКодКарты = СтрокаШтрихкода.Штрихкод;
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();

	мТипКартыДоИзменения = ТипКарты;

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Владелец     = Ссылка;
		ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкода;
		ЗаписьШтрихкода.Штрихкод     = КодКарты;

		Попытка
			ЗаписьШтрихкода.Удалить();
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		КодКарты = ШтрихКодКарты;
	КонецЕсли;

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПриЗаписи" формы.
//
Процедура ПриЗаписи(Отказ)

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		Если ШтрихКодКарты = "" Тогда
			Предупреждение("Перед записью необходимо заполнить код карты!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТипШтрихКода = "" Тогда
			Предупреждение("Перед записью необходимо заполнить тип штрихкода!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Если КодКарты = "" Тогда
			Предупреждение("Перед записью необходимо заполнить код карты!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипКарты = Перечисления.ТипыИнформационныхКарт.Регистрационная Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецКарты) Тогда
			Предупреждение("Перед записью необходимо заполнить поле Владелец карты!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписейШтриходов = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
	НаборЗаписейШтриходов.Отбор.Владелец.Установить(Ссылка);
	
	Попытка
		НаборЗаписейШтриходов.Записать();
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		
		ЗаписьШтрихкода              = РегистрыСведений.Штрихкоды.СоздатьМенеджерЗаписи();
		ЗаписьШтрихкода.Владелец     = Ссылка;
		ЗаписьШтрихкода.ТипШтрихкода = ТипШтрихкода;
		ЗаписьШтрихкода.Штрихкод     = ШтрихКодКарты;

		Попытка
			ЗаписьШтрихкода.Записать(Истина);
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Предупреждение("Подбор номенклатуры в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Если Карта = Ссылка Тогда
		Предупреждение("Считан штрихкод, соответствующий данной информационной карте.");
		Возврат Истина;
	КонецЕсли;

	Ответ = Вопрос("Считанный штрихкод соответствует существующей информационной карте.
	               |Открыть форму соответствующего элемента?",
	               РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Карта.ПолучитьФорму().Открыть();
	КонецЕсли;

	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Если Не ПустаяСтрока(КодКарты) Тогда
		Ответ = Вопрос("Задать считанный штрихкод """
		               + Штрихкод
		               + """ в качестве нового кода карты?",
		               РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	ВидКарты      = Перечисления.ВидыИнформационныхКарт.Штриховая;
	ТипШтрихКода  = ТипКода;
	ВидКартыПриИзменении(ЭлементыФормы.ВидКарты);

	ШтрихКодКарты = Штрихкод;

	Возврат Истина;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если Карта = Ссылка Тогда
		Предупреждение("Считан код, соответствующий данной информационной карте.");
		Возврат Результат;
	КонецЕсли;

	Ответ = Вопрос("Считанный код соответствует существующей информационной карте.
	               |Открыть форму соответствующего элемента?",
	               РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Карта.ПолучитьФорму().Открыть();
	КонецЕсли;

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Истина;

	Если Не ПустаяСтрока(КодКарты) Тогда
		Ответ = Вопрос("Задать считанный код """
		               + Код
		               + """ в качестве нового кода карты?",
		               РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	ВидКарты      = Перечисления.ВидыИнформационныхКарт.Магнитная;
	ВидКартыПриИзменении(ЭлементыФормы.ВидКарты);
	КодКарты      = Код;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события "ПриИзменении" поля "Вид карты".
//
Процедура ВидКартыПриИзменении(Элемент)

	ПриИзмененииВидаКарты();
	УстановитьВидимость();

КонецПроцедуры // ВидКартыПриИзменении()

// Обработчик события "ПриИзменении" поля "Тип карты".
//
Процедура ТипКартыПриИзменении(Элемент)

	Если мТипКартыДоИзменения <> ТипКарты Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецКарты) Тогда
			Ответ = КодВозвратаДиалога.Да;
		Иначе
			Ответ = Вопрос("При изменении типа карты поле ""Владелец карты"" будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ТипКарты = мТипКартыДоИзменения;
		Иначе
			мТипКартыДоИзменения = ТипКарты;

			ПриИзмененииТипаКарты();

			УстановитьВидимость();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТипКартыПриИзменении()

// Обработчик события "ПриИзменении" поля "ТипШтрихкода".
//
Процедура ТипШтрихкодаПриИзменении(Элемент)

	ПриИзмененииВидаКарты();

КонецПроцедуры // ТипШтрихкодаПриИзменении()

// Обработчик события "ПриИзменении" поля "ТекущийКодКарты".
//
Процедура ТекущийКодКартыПриИзменении(Элемент)

	Если ВидКарты = Перечисления.ВидыИнформационныхКарт.Штриховая Тогда
		Если Не (НЕ ЗначениеЗаполнено(ТипШтрихкода)
		 Или ЗначениеЗаполнено(ШтрихКодКарты)
		 Или Не РаботаСТорговымОборудованием.ПроверитьШтрихКод(ШтрихКодКарты, ТипШтрихкода)) Тогда
			Сообщить("Не верный штрихкод!", СтатусСообщения.Важное);
			ШтрихКодКарты = "";
		КонецЕсли;

		ЭлементыФормы.ТекущийКодКарты.Значение = ШтрихКодКарты;
	КонецЕсли;

КонецПроцедуры // ТекущийКодКартыПриИзменении()

Процедура ТипШтрихкодаОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ТипШтрихкодаОчистка()

Процедура ПослеЗаписи()
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

