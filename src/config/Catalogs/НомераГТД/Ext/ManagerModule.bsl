
// Определяет регистрационный номер декларации на товары для каждого элемента справочника "Номера ГТД".
// Если регистрационный номер определить не удалось устанавливает признак "СтранаВвозаНеРФ".
Процедура ОпределитьРегистрационныйНомерИСтрануВвоза() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НомераГТД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|ГДЕ
	|	НомераГТД.РегистрационныйНомер = """"
	|	И НЕ НомераГТД.СтранаВвозаНеРФ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаРезультата Из РезультатЗапроса Цикл
		
		Попытка
			
			ОбработатьЭлементСправочника(СтрокаРезультата);
			
		Исключение
			// Если не удалось обработать какой-либо элемент справочника, повторяем попытку снова.
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать элемент справочника: %1 по причине:
					|%2'"),
					СтрокаРезультата.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.НомераГТД, СтрокаРезультата.Ссылка, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьЭлементСправочника(ЭлементСправочника)
	
	НачатьТранзакцию();
	Попытка
		
		// Блокируем объект от изменения другими сеансами.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НомераГТД");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементСправочника.Ссылка);
		Блокировка.Заблокировать();
		
		СправочникОбъект = ЭлементСправочника.Ссылка.ПолучитьОбъект();
		
		// Если объект ранее был удален или обработан другими сеансами, пропускаем его.
		Если СправочникОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(СправочникОбъект.РегистрационныйНомер)
			ИЛИ СправочникОбъект.СтранаВвозаНеРФ Тогда
			// Элемент справочника уже обработан.
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Реквизиты = РегистрационныйНомерИСтранаВвоза(СправочникОбъект.Код);
		ЗаполнитьЗначенияСвойств(СправочникОбъект, Реквизиты, "РегистрационныйНомер,СтранаВвозаНеРФ");
		
		// Запись обработанного объекта.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает параметры таможенной декларации - регистрационный номер и признак того, декларировался ли товар в РФ.
// Порядок получения регистрационного номера таможенной декларации см. в описании функции РегистрационныйНомер(). 
// Если РегистрационныйНомер() вернет пустую строку, будет установлен признак, что товар декларировался не в РФ.
//
// Параметры
//    НомерТаможеннойДекларации - номер таможенной декларации или регистрационный номер таможенной декларации.
//
// Возвращаемое значение:
//    Структура 
//      * РегистрационныйНомер - Строка -  регистрационный номер таможенной декларации либо пустая строка, 
//                                         если его не удалось определить.
//      * СтранаВвозаНеРФ      - Булево - признак, что товар декларировался не в РФ.
Функция РегистрационныйНомерИСтранаВвоза(НомерТаможеннойДекларации) Экспорт
	
	РегистрационныйНомер = РегистрационныйНомер(НомерТаможеннойДекларации);
	
	Реквизиты = Новый Структура();
	Реквизиты.Вставить("РегистрационныйНомер", РегистрационныйНомер);
	Реквизиты.Вставить("СтранаВвозаНеРФ", НЕ ЗначениеЗаполнено(РегистрационныйНомер));
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает регистрационный номер таможенной декларции по переданному полному номеру
// декларации на товары.
// Регистрационный номер не будет определен если "полный" номер таможенной декларации не соответствует 
// структуре номера декларации, выдаваемой российскими таможенными органами.
// 
// Регистрационный номер таможенной декларации может быть получен из "полного" номера таможенной декларации
// или регистрационного номера при условиях:
// 1. Длина номера таможенной декларации от 23 до 27 символов.
// 2. Количество элементов, разделенных знаком дробь ("/") 3 или 4.
// 3. Длина первого элемента 8, второго 6, третьего 7, четвертого (при наличии) от 1 до 3 символов.
// 4. Второй элемент можно преобразовать в дату.
// Регистрационный номер таможенной декларации будет получен из "полного" номера таможенной декларации
// путем отсечения последнего (4-го) элемента номера.
//
// Параметры
//    НомерТаможеннойДекларации - номер таможенной декларации или регистрационный номер таможенной декларации.
//
// Возвращаемое значение:
//    Регистрационный номер - Строка - регистрационный номер таможенной декларации либо пустая строка, 
//                                     если его не удалось определить.
Функция РегистрационныйНомер(НомерТаможеннойДекларации)
	
	НомерДекларацииНаТовары = СокрЛП(НомерТаможеннойДекларации);
	ПустойРегистрационныйНомер = "";
	
	Если СтрДлина(НомерДекларацииНаТовары) < 23
	 ИЛИ СтрДлина(НомерДекларацииНаТовары) > 27 Тогда
		Возврат ПустойРегистрационныйНомер;
	КонецЕсли;
	
	МассивТД = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(НомерДекларацииНаТовары, "/");
	
	Если МассивТД.Количество() > 4
	 ИЛИ МассивТД.Количество() < 3 Тогда
		// Номер декларации на товары указан с ошибками.
		Возврат ПустойРегистрационныйНомер;
	КонецЕсли;
	
	КодТаможенногоОргана = МассивТД[0];
	
	Если СтрДлина(КодТаможенногоОргана) <> 8 Тогда
		Возврат ПустойРегистрационныйНомер;
	КонецЕсли;
	
	ДатаПринятияДекларацииНаТовары = МассивТД[1];
	
	Если СтрДлина(ДатаПринятияДекларацииНаТовары) <> 6 Тогда
		Возврат ПустойРегистрационныйНомер;
	Иначе
		СтрокаВДату = СтрокаВДату(ДатаПринятияДекларацииНаТовары);
		Если НЕ ЗначениеЗаполнено(СтрокаВДату) Тогда
			Возврат ПустойРегистрационныйНомер;
		КонецЕсли;
	КонецЕсли;

	ПорядковыйНомерДекларацииНаТовары = МассивТД[2];
	
	Если СтрДлина(ПорядковыйНомерДекларацииНаТовары) <> 7 Тогда
		Возврат ПустойРегистрационныйНомер;
	КонецЕсли;
	
	Если МассивТД.Количество() = 4 Тогда
		ПорядковыйНомерТовара = МассивТД[3];
		Если СтрДлина(ПорядковыйНомерТовара) > 3
		 ИЛИ СтрДлина(ПорядковыйНомерТовара) < 1 Тогда
			Возврат ПустойРегистрационныйНомер;
		КонецЕсли;
		МассивТД.Удалить(3);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(МассивТД, "/");
	
КонецФункции

Функция СтрокаВДату(Значение) Экспорт
	
	ТолькоЦифрыВСтроке = СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
	Если НЕ ТолькоЦифрыВСтроке Тогда
		Возврат '00010101';
	КонецЕсли; 
			
	ПозицияПробела = Найти(Значение, " ");
	Если ПозицияПробела > 0 Тогда
		Значение = Лев(Значение, ПозицияПробела - 1);
	КонецЕсли;
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "/", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	Значение = Сред(Значение, 5) + Сред(Значение, 3, 2) + Лев(Значение, 2);
	Если СтрДлина(Значение) = 6 Тогда
		Год = СтрокаВЧисло(Лев(Значение, 2));
		Значение = ?(Год > 29, "19", "20") + Значение;
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат    = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВЧисло(Значение)
	
	СтрокаБезНулей = СтрЗаменить(Значение, "0", "");
	Если ПустаяСтрока(СтрокаБезНулей) Или СтрокаБезНулей = "-" Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипЧисло  = Новый ОписаниеТипов("Число");
	Результат = ТипЧисло.ПривестиЗначение(Значение);
	
	Возврат ?(Результат <> 0 И Не ПустаяСтрока(СтрокаБезНулей), Результат, Неопределено);
	
КонецФункции
