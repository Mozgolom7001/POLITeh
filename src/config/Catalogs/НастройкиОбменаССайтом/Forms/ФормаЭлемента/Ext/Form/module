
Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьДоступностьИВидимостьЭлементовФормы()
	
	ЭлементыФормы.ПанельОсновная.Страницы.ВыгрузкаТоваров.Видимость = ОбменТоварами;
	ЭлементыФормы.ПанельОсновная.Страницы.ОбменЗаказами.Видимость = ОбменЗаказами;
	
	Если ВыгружатьНаСайт Тогда
		
		ЭлементыФормы.ПанельНазначение.ТекущаяСтраница = ЭлементыФормы.ПанельНазначение.Страницы.СтраницаСайт;
		
	Иначе
		
		ЭлементыФормы.ПанельНазначение.ТекущаяСтраница = ЭлементыФормы.ПанельНазначение.Страницы.СтраницаКаталог;
		
	КонецЕсли;
	
	// параметры соединения
	ЭлементыФормы.НадписьСерверПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиСервер.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьПортПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиПорт.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьИмяПользователяПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиИмяПользователя.Доступность = HTTPОбменПроксиИспользование;
	
	ЭлементыФормы.НадписьПарольПрокси.Доступность = HTTPОбменПроксиИспользование;
	ЭлементыФормы.HTTPОбменПроксиПароль.Доступность = HTTPОбменПроксиИспользование;
	
	Если ОбменТоварами И ВыгружатьТолькоИзменения Тогда
		ЭлементыФормы.ПанельУзелТовары.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельУзелТовары.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	Если ОбменЗаказами И ВыгружатьТолькоИзменения Тогда
		ЭлементыФормы.ПанельУзелЗаказы.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельУзелЗаказы.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	ЭлементыФормы.ПереключательПроводитьОперативно.Видимость = ПроводитьДокументы;
	ЭлементыФормы.ПереключательПРоводитьНеОперативно.Видимость = ПроводитьДокументы;
	
	ЭлементыФормы.НадписьПричинаЗакрытияЗаказов.Видимость = ДействияСОтмененнымиЗаказами = 2;
	ЭлементыФормы.ПричинаЗакрытияЗаказов.Видимость = ДействияСОтмененнымиЗаказами = 2;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
Конецпроцедуры

Процедура ВыполнитьОбменЕслиВозможно()
	
	Если Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Ответ = Вопрос("Для проведения обмена необходимо сохранить настройку. Сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПроцедурыОбменаССайтом.ВыполнитьАвтообмен(Ссылка, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриОткрытии()
	
	Если ЭтоНовый()
		И НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		
		ЗаполнитьПоУмолчанию();
		ПроцедурыОбменаССайтом.НастроитьПостроитель(ПостроительОтчета, КлассифицироватьПоЦеновымГруппам, ВыгружатьВсеХарактеристики);
		ПроцедурыОбменаССайтом.ЗаполнитьОтборПостроителя(ПостроительОтчета);
		ПроцедурыОбменаССайтом.ЗаполнитьПорядокПостроителя(ПостроительОтчета);
		
	Иначе
		
		ПроцедурыОбменаССайтом.НастроитьПостроитель(ПостроительОтчета, КлассифицироватьПоЦеновымГруппам, ВыгружатьВсеХарактеристики);
		СтруктураНастроекПостроителя = СохраненныеНастройкиПостроителя.Получить();
		ТаблицаОтбора  = СтруктураНастроекПостроителя.ТаблицаОтбора;
		ТаблицаПорядка = СтруктураНастроекПостроителя.ТаблицаПорядка;
		
		ПроцедурыОбменаССайтом.ЗаполнитьОтборПостроителя(ПостроительОтчета);
		ПроцедурыОбменаССайтом.ЗаполнитьПорядокПостроителя(ПостроительОтчета);
		
		Если ТаблицаОтбора <> Неопределено Тогда 
			ОбщегоНазначения.ЗаполнитьОтборПоТаблицеЗначений(ПостроительОтчета.Отбор, ТаблицаОтбора);
		КонецЕсли;
		
		Если ТаблицаПорядка <> Неопределено Тогда 
			ПроцедурыОбменаССайтом.ЗаполнитьПорядокПоТаблицеЗначений(ПостроительОтчета.Порядок, ТаблицаПорядка);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	ПроцедурыОбменаССайтом.ЗаполнитьТаблицуКаталогов(СохраненнаяТаблицаКаталогов, ТаблицаКаталогов);
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
	ОбновитьДоступностьАвтообмена();
	
КонецПроцедуры

Процедура ПереключательПолнаяВыгрузкаПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПереключательВыгрузкаИзмененийПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура УзелПланаОбменаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаТоварами) Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаТоварами = ПланыОбмена.ОбменССайтомТоварами.ЭтотУзел() Тогда
		
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выберите другой узел или создайте новый.");
		УзелОбменаТоварами = Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура КаталогВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбора.Заголовок 				 	 = "Выберите каталог для обмена данными";
	ДиалогВыбора.ПредварительныйПросмотр 	 = Ложь;
    ДиалогВыбора.Каталог 				 	 = Элемент.Значение;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЗапуститьПриложение("explorer " + Элемент.Значение);
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ТаблицаОтбора  = УправлениеОтчетами.ПолучитьКопиюОтбораВТЗ(ПостроительОтчета.Отбор);
	ТаблицаПорядка = ПроцедурыОбменаССайтом.ПолучитьКопиюПорядкаВТЗ(ПостроительОтчета.Порядок);
	
	СохраненныеНастройкиПостроителя = Новый ХранилищеЗначения(Новый Структура("ТаблицаОтбора,ТаблицаПорядка", ТаблицаОтбора, ТаблицаПорядка));
	
	ПроцедурыОбменаССайтом.СохранитьТаблицуКаталогов(СохраненнаяТаблицаКаталогов, ТаблицаКаталогов);
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяИБ Тогда
		
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если ИспользоватьРегламентныеЗадания
			И НЕ ЗначениеЗаполнено(ПользовательДляВыполненияРеглЗаданий) Тогда
			
			Сообщить("Не установлена константа ""Пользователь, для выполнения регламентных заданий в файловом режиме"". Периодический обмен выполняться не будет!", СтатусСообщения.ОченьВажное);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// для помеченой на удаление настройки обмен автоматически не производится
	Если (ПометкаУдаления И ИспользоватьРегламентныеЗадания) Тогда
		
		Сообщить("Настройка помечена на удаление. Автоматический обмен по ней производится не будет!", СтатусСообщения.Важное);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДействиеВыполнитьОбмен(Кнопка)
	
	ВыполнитьОбменЕслиВозможно();
	
КонецПроцедуры
 
Процедура ПереключательНазначениеСайтПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПроверитьНажатие(Элемент)
	
	ДополнительнаяИнформация = "";
	ТекстСообщенияПользователю = ПроцедурыОбменаССайтом.ВыполнитьТестовоеПодключениеКСерверуHTTP(ЭтотОбъект, ДополнительнаяИнформация);
	
	Если Не ПустаяСтрока(ДополнительнаяИнформация) Тогда
		
		Сообщить(ДополнительнаяИнформация);
		
	КонецЕсли;
	
	Предупреждение(ТекстСообщенияПользователю);
	
КонецПроцедуры

Процедура ФлажокИспользоватьПроксиСерверПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ПереключательЗаписыватьПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.НастройкаРегламентногоЗадания.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Доступность = ИспользоватьРегламентныеЗадания;
	
КонецПроцедуры


Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	Перем ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно;
	
	ПроцедурыОбменаДаннымиКлиент.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(мРегламентноеЗадание, ТекстЗаголовка, ТекстРасписания, РассписаниеАктивно);
	ЭлементыФормы.НастройкаРегламентногоЗадания.Заголовок = ТекстЗаголовка;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РассписаниеАктивно И ИспользоватьРегламентныеЗадания, мЖирныйШрифт, мОбычныйШрифт);	
	
КонецПроцедуры

Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)

	ОбновитьДоступностьАвтообмена();
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	Если ИспользоватьРегламентныеЗадания Тогда
		
		НадписьРасписаниеРегламентногоЗаданияНажатие(ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки);
		
	Конецесли;
	
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры


Процедура РедактированиеРасписанияРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	КонецЕсли;
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗаданиеОбменССайтом");
		
		ОбъектЗадания.Наименование = Наименование;
		ОбъектЗадания.Использование = Истина;

	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОбъектЗадания.Расписание);
		
	Если Диалог.ОткрытьМодально() Тогда
		
		ОбъектЗадания.Расписание = Диалог.Расписание;
		ОбъектЗадания.Записать();
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	Иначе
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНастройкиНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры

Процедура РедактироватьНастройкиРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	КонецЕсли;
	
	Диалог = ПолучитьОбщуюФорму("ДиалогРегламентногоЗадания");
	Диалог.РегламентноеЗадание = ОбъектЗадания;
	Диалог.Наименование = Наименование;
	Диалог.МетаданныеВыбор = "ЗаданиеОбменССайтом";
	
	Если Диалог.ОткрытьМодально() <> Истина Тогда
		
		ОбъектЗадания = ПолучитьОбъектРегламентногоЗадания();
		
	Иначе
		
		Модифицированность = Истина;
		ОбъектЗадания = Диалог.РегламентноеЗадание;
		
	КонецЕсли;
	
	Если ОбъектЗадания <> Неопределено Тогда
		
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры
 
Процедура НастройкаРегламентногоЗаданияНажатие(Элемент)
	
	РедактироватьНастройкиРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Если ВладелецФормы <> Неопределено Тогда
		
		ОповеститьОЗаписиНовогоОбъекта(Ссылка);
		
	КонецЕсли;
	
	Если ВыгружатьТолькоИзменения Тогда
		ПроцедурыОбменаССАйтом.УстановитьФлагПринудительнойПолнойВыгрузки(Ссылка, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОткрытьМониторОбменов(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьМониторОбменовДляНастройки(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура НадписьСсылкаНаСайтНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.1c-bitrix.ru/1c/");
	
КонецПроцедуры

Процедура ПолеКартинкиЛоготипНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.1c-bitrix.ru");
	
КонецПроцедуры

Процедура НадписьНадписьПодробнееОСтандартеCML2Нажатие(Элемент)
	
	ЗапуститьПриложение("http://v8.1c.ru/edi/edi_stnd/90/");
	
КонецПроцедуры

Процедура НадписьНадписьПодробнееОТехнологииОбменаНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.v8.1c.ru/edi/edi_app/130");
	
КонецПроцедуры

Процедура ОбменТоварамиПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура ОбменЗаказамиПриИзменении(Элемент)
	
	УстановитьДоступностьИВидимостьЭлементовФормы();
	
КонецПроцедуры

Процедура УзелОбменаЗаказамиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбменаЗаказами) Тогда
		Возврат;
	КонецЕсли;
	
	Если УзелОбменаЗаказами = ПланыОбмена.ОбменССайтомЗаказами.ЭтотУзел() Тогда
		
		Сообщить("Выбранный узел соответствует текущей информационной базе. Выберите другой узел или создайте новый.");
		УзелОбменаЗаказами = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаКаталоговПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПроцедурыОбменаССайтом.ОбработатьСтрокуТаблицыКаталогов(ДанныеСтроки, ОформлениеСтроки.Ячейки["Группы"]);
	
КонецПроцедуры

Процедура ТаблицаКаталоговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Отказ = (НЕ ОтменаРедактирования) И (НЕ ЗначениеЗаполнено(СокрЛП(Элемент.ТекущиеДанные.Каталог)));
КонецПроцедуры

Процедура ТаблицаКаталоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ТаблицаКаталоговПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПостроительОтчетаОтборПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПостроительОтчетаОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПостроительОтчетаОтборПриИзмененииФлажка(Элемент, Колонка)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПостроительОтчетаПорядокПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПостроительОтчетаПорядокПриИзмененииФлажка(Элемент, Колонка)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ПостроительОтчетаПорядокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

Процедура ТаблицаКаталоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если КлассифицироватьПоЦеновымГруппам Тогда 
		Элемент.Колонки.Группы.ЭлементУправления.ТипЗначенияСписка = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
	Иначе
		Элемент.Колонки.Группы.ЭлементУправления.ТипЗначенияСписка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	КонецЕсли;
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ИдКаталога = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура КлассифицироватьПоЦеновымГруппамПриИзменении(Элемент)
	Если ПроцедурыОбменаССайтом.ГруппыВыбраны(ТаблицаКаталогов) Тогда
		Ответ = Вопрос("Таблица соответствия групп классификатора каталогам на сайте будет очищена!"
			+ Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);	
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			КлассифицироватьПоЦеновымГруппам = НЕ КлассифицироватьПоЦеновымГруппам;
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаТК Из ТаблицаКаталогов Цикл
			СтрокаТК.Группы.Очистить();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияСОтмененнымиЗаказамиПриИзменении(Элемент)
	УстановитьДоступностьИВидимостьЭлементовФормы()
КонецПроцедуры


мРегламентноеЗадание = Неопределено;

мЖирныйШрифт  = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();
