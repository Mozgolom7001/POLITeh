////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЦветТемноСерый;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура управляет выбором вида бизнес-процесса.
//
// Параметры:
// Элемент - элемент формы в котором происходит выбор.
// СтандартнаяОбработка - флаг стандартной обработки.
//
Процедура ВыбратьВидБизнесПроцесса(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущееЗначение = Элемент.Значение;

	СписокВыбора = Новый СписокЗначений;
	Для Каждого Значение Из Перечисления.ВидыБизнесПроцессов Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент,СписокВыбора.НайтиПоЗначению(ТекущееЗначение));
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущееЗначение <> ВыбранныйЭлемент.Значение Тогда

		Если ПараметрыТочекМаршрута.Количество() > 0 Тогда 

			Ответ = Вопрос("Изменился вид бизнес-процесса. Состав точек маршрута будет перезаполнен.Продолжить?", РежимДиалогаВопрос.ДаНет);

			Если Не Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;

		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Элемент.Значение=ВыбранныйЭлемент.Значение;

	ЗаполнитьПараметрыТочекМаршрута();
	АктивизироватьКартуМаршрута();
	УстановитьВидимостьЭлементовФормы();

КонецПроцедуры // ВыбратьВидБизнесПроцесса()

// Процедура сворачивает панель с табличным полем "Исполнители" в зависимости от вида бизнес-процесса.
//
Процедура УстановитьВидимостьЭлементовФормы()

	Если ВидБизнесПроцесса = Перечисления.ВидыБизнесПроцессов.СогласованиеЗаказаПокупателя Тогда

		ЭлементыФормы.Исполнители.Доступность            = Истина;

	Иначе

		ЭлементыФормы.Исполнители.Доступность            = Ложь;

	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьЭлементовФормы()

// Процедура добавляет исполнителя в табличную часть "Исполнители" для бизнес-процесса "СогласованиеЗаказаПокупателя".
//
Процедура ДобавитьИсполнителя(Отказ)

	Отказ = Истина;
	ТекДанные = ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТекДанные.ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие Или
			 ТекДанные.ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс) Тогда
		Предупреждение("Для данной точки маршрута исполнитель не предусмотрен !");
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие И 
		 Не ТекДанные.ТочкаМаршрута.Групповая Тогда

		СтрокиИсполнителей = Исполнители.НайтиСтроки(Новый Структура("ТочкаМаршрута", ТекДанные.ТочкаМаршрута));
		Если СтрокиИсполнителей.Количество() > 0 Тогда
			Предупреждение("Для данной точки маршрута предусмотрено не более одного исполнителя !");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИсполнители = Исполнители.Добавить();
	СтрокаИсполнители.ТочкаМаршрута = ТекДанные.ТочкаМаршрута;
	ЭлементыФормы.Исполнители.ТекущаяСтрока = СтрокаИсполнители;

КонецПроцедуры // ДобавитьИсполнителя()

//Процедура производит установку доступности реквизитов формы.
//
Процедура УстановитьДоступностьЭлементовФормы()
	
	ТекДанные = ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементыФормы.Настройка.Доступность = (ТекДанные.ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс);
	ЭлементыФормы.Выполнять.Доступность = (ТекДанные.ТочкаМаршрута.Вид = ВидТочкиМаршрутаБизнесПроцесса.Действие);

КонецПроцедуры // УстановитьДоступностьРеквизитовФормы()

// Процедура активизирует карту маршрута.
//
Процедура АктивизироватьКартуМаршрута()
	
	ОбновитьКартуМаршрута();

	Если ЭлементыФормы.ПолеКартыМаршрута.ЭлементыГрафическойСхемы.Количество()>0 Тогда

		ЭлементыФормы.ПолеКартыМаршрута.ТекущийЭлемент = ЭлементыФормы.ПолеКартыМаршрута.ЭлементыГрафическойСхемы[0];
		ПолеКартыМаршрутаПриАктивизации(ЭлементыФормы.ПолеКартыМаршрута)

	КонецЕсли;

КонецПроцедуры // АктивизироватьКартуМаршрута()

// Процедура производит первоначальное заполнение табличной части ПараметрыТочекМаршрута.
//
Процедура ЗаполнитьПараметрыТочекМаршрута()

	ПараметрыТочекМаршрута.Очистить();
	Исполнители.Очистить();

	Если Не ЗначениеЗаполнено(ВидБизнесПроцесса) Тогда
		Возврат;
	ИначеЕсли Метаданные.БизнесПроцессы.Найти(ПолучитьСтроковоеИмябизнесПроцесса()) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого ТочкаМаршрута ИЗ БизнесПроцессы[ПолучитьСтроковоеИмябизнесПроцесса()].ТочкиМаршрута Цикл
		
		ВидТочкиМаршрута = ТочкаМаршрута.Вид;
		Если Не (ВидТочкиМаршрута = ВидТочкиМаршрутаБизнесПроцесса.Действие Или
			ВидТочкиМаршрута = ВидТочкиМаршрутаБизнесПроцесса.ВложенныйБизнесПроцесс) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаПараметрыТочекМаршрута= ПараметрыТочекМаршрута.Добавить();
		СтрокаПараметрыТочекМаршрута.Выполнять     = Истина;
		СтрокаПараметрыТочекМаршрута.ТочкаМаршрута = ТочкаМаршрута;
		СтрокаПараметрыТочекМаршрута.Представление = ТочкаМаршрута.НаименованиеЗадачи;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПараметрыТочекМаршрута()

// Процедура обновляет подписи к элементу графической схемы типа "Действие".
//
// Параметры:
//  ЭлементСхемы - элемент графической схемы.
//
Процедура ОбновитьЭлементГрафическойСхемы(ЭлементСхемы = Неопределено)

	// Значит обновляем текущий элемент графической схемы.
	Если ЭлементСхемы = Неопределено Тогда
		Если ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные <> Неопределено Тогда
			ЭлементСхемы = ЭлементыФормы.ПолеКартыМаршрута.ЭлементыГрафическойСхемы.Найти(ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные.ТочкаМаршрута);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыДействие") Тогда
		Возврат;
	КонецЕсли;

	СтрокаПараметрыТочекМаршрута = ПараметрыТочекМаршрута.Найти(ЭлементСхемы.Значение);
	Если СтрокаПараметрыТочекМаршрута <> Неопределено Тогда

		Если Не СтрокаПараметрыТочекМаршрута.Выполнять Тогда

			ЭлементСхемы.Пояснение = "Не выполняется";
			ЭлементСхемы.ЦветФона  = мЦветТемноСерый;

		Иначе

			ЭлементСхемы.Пояснение = СокрЛП(СтрокаПараметрыТочекМаршрута.ТочкаМаршрута.Пояснение);

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьЭлементГрафическойСхемы()

// Процедура производит обновление отображения точек маршрута на карте.
//
Процедура ОбновитьКартуМаршрута()

	ЭлементыФормы.ПолеКартыМаршрута.УстановитьСхему(Новый ГрафическаяСхема);

	Если Не ЗначениеЗаполнено(ВидБизнесПроцесса) Тогда
		Возврат;
	КонецЕсли;

	СтроковоеИмябизнесПроцесса = ПолучитьСтроковоеИмябизнесПроцесса();
	Если Метаданные.БизнесПроцессы.Найти(СтроковоеИмябизнесПроцесса) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлементыФормы.ПолеКартыМаршрута.УстановитьСхему(БизнесПроцессы[СтроковоеИмябизнесПроцесса].ПолучитьКартуМаршрута());
	
	Для Каждого ЭлементСхемы Из ЭлементыФормы.ПолеКартыМаршрута.ЭлементыГрафическойСхемы Цикл
		ОбновитьЭлементГрафическойСхемы(ЭлементСхемы);
	КонецЦикла;

КонецПроцедуры // ОбновитьКартуМаршрута()

// Процедура производит выбор времени из выпадающего списка.
//
// Параметры:
//  Элемент              - элемент формы у которого происходит выбор.
//  СтандартнаяОбработка - 
//  МаксЗначение         - число, максимальное значение выбора.
//  Инкремент            - число, шаг формирования списка времени.
//
Процедура ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка, МаксЗначение, Инкремент)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВремен = Новый СписокЗначений;
	
	ВремяСписка = 0;
	
	Для Счетчик =0 По МаксЗначение Цикл

		СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		ВремяСписка = ВремяСписка + Инкремент;

	КонецЦикла;
	
	ВыбЭлемент= ЭтаФорма.ВыбратьИзСписка(СписокВремен, Элемент);
	
	Если ВыбЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбЭлемент.Значение;

КонецПроцедуры // ВыборЧасовИзВыпадающегоСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ГРАФИЧЕСКОЙ СХЕМЫ
//

// Процедура обработчик события "ПриАктивизации" графической схемы.
//
Процедура ПолеКартыМаршрутаПриАктивизации(Элемент)
	
	ТекЭлемент = Элемент.ТекущийЭлемент;
	
	Если ТекЭлемент = Неопределено Или ТекЭлемент.Имя = "" Тогда
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ТекЭлемент) = Тип("ЭлементГрафическойСхемыДействие") Или
			ТипЗнч(ТекЭлемент) = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
		

		СтрокаПараметрыТочекМаршрута  =  ПараметрыТочекМаршрута.Найти(ТекЭлемент.Значение);

		Если  СтрокаПараметрыТочекМаршрута = Неопределено Тогда
			
			СтрокаПараметрыТочекМаршрута =   ПараметрыТочекМаршрута.Добавить();
			СтрокаПараметрыТочекМаршрута .ТочкаМаршрута = ТекЭлемент.Значение;
		КонецЕсли;

		ЭлементыФормы.ПараметрыТочекМаршрута.ТекущаяСтрока = СтрокаПараметрыТочекМаршрута;
		ЭлементыФормы.Выполнять.Заголовок                  = Строка(СтрокаПараметрыТочекМаршрута.ТочкаМаршрута);
		ЭлементыФормы.Исполнители.ОтборСтрок.ТочкаМаршрута.Установить(СтрокаПараметрыТочекМаршрута.ТочкаМаршрута);

	КонецЕсли;

	УстановитьДоступностьЭлементовФормы() ;

КонецПроцедуры // ПолеКартыМаршрутаПриАктивизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ
//

// Процедура - обработчик действия элемента "РедактироватьКодНомер".
//
Процедура ДействияФормыРедактироватьКодНомер(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(),
			ЭтаФорма, 
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю, 
			ЭлементыФормы.Код);

КонецПроцедуры // ДействияФормыРедактироватьКодНомер()

// Процедура - обработчик события "ПриИзменении" элемента "Настройка".
//
Процедура НастройкаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные.Настройка) Тогда
		Если ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные.Настройка.ВидБизнесПроцесса <> Перечисления.ВидыБизнесПроцессов.ПереоценкаТоваровАТТ Тогда
			ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные.Настройка = Справочники.НастройкиБизнесПроцессов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента "Настройка".
//
Процедура НастройкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.НастройкиБизнесПроцессов.ПолучитьФормуВыбора(,Элемент,Элемент);
	ФормаВыбора.СправочникСписок.Отбор.ВидБизнесПроцесса.Установить(Перечисления.ВидыБизнесПроцессов.ПереоценкаТоваровАТТ);
	ФормаВыбора.ПараметрТекущаяСтрока = ЭлементыФормы.ПараметрыТочекМаршрута.ТекущиеДанные.Настройка;
	ФормаВыбора.Открыть();

КонецПроцедуры // НастройкаНачалоВыбора()

// Процедура обработчик события "ПриИзменении" элемента "Представление".
//
Процедура ПредставлениеПриИзменении(Элемент)

	ОбновитьЭлементГрафическойСхемы();

КонецПроцедуры // ПредставлениеПриИзменении()

// Процедура обработчик события "ПриИзменении" элемента Выполнять.
//
Процедура ВыполнятьПриИзменении(Элемент)

	ОбновитьКартуМаршрута()

КонецПроцедуры // ВыполнятьПриИзменении()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ВидБизнесПроцесса.
//
Процедура ВидБизнесПроцессаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыбратьВидБизнесПроцесса(Элемент, СтандартнаяОбработка);

КонецПроцедуры // ВидБизнесПроцессаНачалоВыбораИзСписка()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ПериодОповещенияЧас.
//
Процедура ПериодОповещенияЧасНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка,23,1);

КонецПроцедуры // ПериодОповещенияЧасНачалоВыбораИзСписка()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ПериодВыполненияЧас.
//
Процедура ПериодВыполненияЧасНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка,23,1);

КонецПроцедуры // ПериодВыполненияЧасНачалоВыбораИзСписка()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ПериодВыполненияДн.
//
Процедура ПериодВыполненияДнейНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка,30,1);

КонецПроцедуры // ПериодВыполненияНачалоВыбораИзСписка()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ПериодОповещения.
//
Процедура ПериодОповещенияДнейНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка,30,1);

КонецПроцедуры // ПериодОповещенияНачалоВыбораИзСписка()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ПериодВыполненияМин.
//
Процедура ПериодВыполненияМинНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка ,11,5);
	
КонецПроцедуры // ПериодВыполненияЧасМинНачалоВыбораИзСписка()

// Процедура обработчик события "НачалоВыбораИзСписка" элемента ПериодОповещенияМин.
//
Процедура ПериодОповещенияМинНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ВыборЧасовИзВыпадающегоСписка(Элемент, СтандартнаяОбработка ,11,5);

КонецПроцедуры // ПериодОповещенияМинНачалоВыбораИзСписка()

// Процедура обработчик события "ПередНачаломДобавления" табличного поля "Исполнители".
//
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование)

	ДобавитьИсполнителя(Отказ);

КонецПроцедуры // ИсполнителиПередНачаломДобавления()

// Процедура обработчик события "НачалоВыбора" табличного поля "Исполнители".
//
Процедура ИсполнителиИсполнительНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыИсполнителейЗадач.Инициатор);
	СписокЗначений.Добавить(Перечисления.ВидыИсполнителейЗадач.Пользователь);
	ВыбранноеЗначение = ВыбратьИзСписка(СписокЗначений, Элемент);

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранноеЗначение.Значение = Перечисления.ВидыИсполнителейЗадач.Пользователь Тогда
		ФормаВыбора = Справочники.Пользователи.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора .Открыть();
	Иначе
		Элемент.Значение = ВыбранноеЗначение.Значение;
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиПользовательНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() И Не ЗначениеЗаполнено( ПараметрОбъектКопирования ) Тогда
		ЗаполнитьПараметрыТочекМаршрута();
	КонецЕсли;
	
	АктивизироватьКартуМаршрута();

	УстановитьВидимостьЭлементовФормы();

	УстановитьДоступностьЭлементовФормы();

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// БЕЗ ПРОЦЕДУР
//
мЦветТемноСерый = WebЦвета.ТемноСерый;

 