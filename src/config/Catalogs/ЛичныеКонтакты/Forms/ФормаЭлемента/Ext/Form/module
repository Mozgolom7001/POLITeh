
Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;

Перем мКнопкаРедактироватьКИВДиалоге;

Перем текФамилия;
Перем текИмя;
Перем текОтчество;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает свойства ReadOnly для элементоф формы, относящихся к дате рождения контактного
// лица и напоминаниям о дне рождения
//
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
//
Процедура ДоступностьДанныхНапоминанияОДнеРождения()

	Если ДатаРождения = '00010101000000' Тогда
	
		ЭлементыФормы.НапоминатьОДнеРождения.Доступность      = Ложь;
		ЭлементыФормы.КоличествоДнейДоНапоминания.Доступность = Ложь;
		ЭлементыФормы.НадписьДней.Доступность                 = Ложь;
		
	Иначе
		
		ЭлементыФормы.НапоминатьОДнеРождения.Доступность      = Истина;
		ЭлементыФормы.КоличествоДнейДоНапоминания.Доступность = НапоминатьОДнеРождения;
		ЭлементыФормы.НадписьДней.Доступность                 = НапоминатьОДнеРождения;
		
	КонецЕсли;

КонецПроцедуры // ДоступностьДанныхНапоминанияОДнеРождения()

// Функция определяет номера позиций пробелов в строке реквизита Наименование
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Массив, числа - позиции пробелов в строке
//
Функция ОпределитьПозицииПробелов()
	
	Пробелы = Новый Массив;
	
	Для а = 1 По 2 Цикл
		Пробелы.Добавить(0);
	КонецЦикла;
	
	КолПробелов = 0;
	
	Для а = 1 По СтрДлина(Наименование) Цикл
		
		Если Сред(Наименование, а, 1) = " " Тогда
			
			Пробелы[КолПробелов] = а;
			КолПробелов = КолПробелов + 1;
			
		КонецЕсли;
		
		Если КолПробелов = 2 Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Пробелы;
	
КонецФункции // ОпределитьПозицииПробелов()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(мКнопкаРедактироватьКИВДиалоге);
	
	текФамилия = Фамилия;
	текИмя = Имя;
	текОтчество = Отчество;
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
	// Установим ЭУ по умолчанию
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Фамилия;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
			И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
			И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()
	
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ПрочитатьЗаполнитьКатегории();
	
КонецПроцедуры // ПриИзмененииДанных()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
		
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
	Если НЕ Отказ Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

// Обработчик события ПослеЗаписи формы.
//
Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);
	
КонецПроцедуры // КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге()

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры // КонтактнаяИнформацияПриНачалеРедактирования()

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРедактирования = Обработки.РедактированиеКонтактнойИнформации.Создать();
	ОбработкаРедактирования.ДоступностьОбъекта = Ложь;
	ОбработкаРедактирования.РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные, , ЭтаФорма);
	
КонецПроцедуры // КонтактнаяИнформацияПредставлениеНачалоВыбора()

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонтактнаяИнформацияТипОчистка()

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка));
	
КонецПроцедуры // КонтактнаяИнформацияВидНачалоВыбора()

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли;
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры // КонтактнаяИнформацияВидПриИзменении()

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры // КонтактнаяИнформацияВидАвтоПодборТекста()

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры // КонтактнаяИнформацияВидОкончаниеВводаТекста()

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры // КонтактнаяИнформацияПередОкончаниемРедактирования()

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры // КонтактнаяИнформацияПредставлениеПриИзменении()

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры // КоманднаяПанельКонтактнойИнформацииУстановитьОсновным()

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры // КонтактнаяИнформацияПриАктивизацииСтроки()

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры // КонтактнаяИнформацияПриВыводеСтроки()

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	
КонецПроцедуры // КонтактнаяИнформацияПередУдалением()

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации, Ложь, ЭтаФорма);
	
КонецПроцедуры // КонтактнаяИнформацияПередНачаломДобавления()

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);
	
КонецПроцедуры // КонтактнаяИнформацияПередНачаломИзменения()

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры // КонтактнаяИнформацияТипПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события Нажатие элемента формы ДействияФормы.РедактироватьКод.
//
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры // ДействияФормыРедактироватьКод()

// Обработчик события Нажатие элемента формы ДействияФормы.НаписатьПисьмо.
//
Процедура ДействияФормыНаписатьПисьмо(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.НаписатьПисьмоОбъекту(Ссылка);
	
КонецПроцедуры // ДействияФормыНаписатьПисьмо()

// Обработчик события Нажатие элемента формы ДействияФормы.ЭлектронныеПисьма.
//
Процедура ДействияФормыЭлектронныеПисьма(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеЭлектроннойПочтой.ОткрытьЭлектронныеПисьмаПоОбъекту(Ссылка);
	
КонецПроцедуры // ДействияФормыЭлектронныеПисьма()

// Обработчик события ПриИзменении элемента Фамилия.
//
Процедура ФамилияПриИзменении(Элемент)
	
	ПозицииПробелов = ОпределитьПозицииПробелов();
	
	Если ПозицииПробелов[0] > 0 Тогда
		
		ФамилияИзНаименования = Сред(Наименование, 1, (ПозицииПробелов[0] - 1));
		
		Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда
			
			текФамилия = СокрЛП(Элемент.Значение);
			Возврат;
			
		КонецЕсли;
		
		Наименование = СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[0]);
		
	Иначе
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = СокрЛП(Элемент.Значение);
		Иначе
			
			Если СокрЛП(Наименование) = текФамилия Тогда
				Наименование = СокрЛП(Элемент.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	текФамилия = СокрЛП(Элемент.Значение);
	
КонецПроцедуры // ФамилияПриИзменении()

// Обработчик события ПриИзменении элемента Имя.
//
Процедура ИмяПриИзменении(Элемент)
	
	ПозицииПробелов = ОпределитьПозицииПробелов();
	
	Если ПозицииПробелов[0] > 0 И ПозицииПробелов[1] > 0 Тогда
		
		ИмяИзНаименования = Сред(Наименование, (ПозицииПробелов[0] + 1), (ПозицииПробелов[1] - ПозицииПробелов[0] - 1));
		
		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда
			
			текИмя = СокрЛП(Элемент.Значение);
			Возврат;
			
		КонецЕсли;
		
		Наименование = Сред(Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[1]);
		
	ИначеЕсли ПозицииПробелов[0] > 0 Тогда
		
		ИмяИзНаименования = Сред(Наименование, (ПозицииПробелов[0] + 1));
		
		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда
			
			текИмя = СокрЛП(Элемент.Значение);
			Возврат;
			
		КонецЕсли;
		
		Наименование = Сред(Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение);
		
	Иначе
		
		Если НЕ ПустаяСтрока(Наименование) Тогда
			Наименование = Наименование + " " + СокрЛП(Элемент.Значение);
		Иначе
			Наименование = " " + СокрЛП(Элемент.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	текИмя = СокрЛП(Элемент.Значение);
	
КонецПроцедуры // ИмяПриИзменении()

// Обработчик события ПриИзменении элемента Отчество.
//
Процедура ОтчествоПриИзменении(Элемент)
	
	ПозицииПробелов = ОпределитьПозицииПробелов();
	
	Если ПозицииПробелов[1] > 0 Тогда
		
		ОтчествоИзНаименования = Сред(Наименование, (ПозицииПробелов[1] + 1));
		
		Если ОтчествоИзНаименования <> текОтчество И НЕ ПустаяСтрока(ОтчествоИзНаименования) Тогда
			
			текОтчество = СокрЛП(Элемент.Значение);
			Возврат;
			
		КонецЕсли;
		
		Наименование = Сред(Наименование, 1, ПозицииПробелов[1]) + СокрЛП(Элемент.Значение);
		
	Иначе
		
		Если НЕ ПустаяСтрока(Наименование) Тогда
			Наименование = Наименование + " " + СокрЛП(Элемент.Значение);
		Иначе
			Наименование = " " + СокрЛП(Элемент.Значение);
		КонецЕсли;
		
	КонецЕсли;
	
	текОтчество = СокрЛП(Элемент.Значение);
	
КонецПроцедуры // ОтчествоПриИзменении()

// Обработчик события НачалоВыбораИзСписка элемента Наименование.
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	
	Если НЕ ПустаяСтрока(Фамилия) Тогда
		СписокВыбора.Добавить(СокрЛП(Фамилия));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "."));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "." + СокрЛП(Сред(Отчество,1,1)) + "."));
	КонецЕсли;
	
	ЭлементыФормы.Наименование.СписокВыбора = СписокВыбора;
	
КонецПроцедуры // НаименованиеНачалоВыбораИзСписка()

// Обработчик события ПриИзменении элемента ДатаРождения.
//
Процедура ДатаРожденияПриИзменении(Элемент)
	
	Если ДатаРождения = '00010101000000' Тогда
		НапоминатьОДнеРождения = Ложь;
	КонецЕсли; 
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
КонецПроцедуры // ДатаРожденияПриИзменении()

// Обработчик события ПриИзменении элемента НапоминатьОДнеРождения.
//
Процедура НапоминатьОДнеРожденияПриИзменении(Элемент)
	
	ДоступностьДанныхНапоминанияОДнеРождения();
	
КонецПроцедуры // НапоминатьОДнеРожденияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);
	
КонецПроцедуры // СвойстваИЗначенияПередНачаломДобавления()

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);
	
КонецПроцедуры // СвойстваИЗначенияПередУдалением()

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры // СвойстваИЗначенияПриНачалеРедактирования()

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры // СвойстваИЗначенияПриВыводеСтроки()

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // СвойстваИЗначенияЗначениеПриИзменении()

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры // СвойстваИЗначенияЗначениеОчистка()

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);
	
КонецПроцедуры // КатегорииПередНачаломДобавления()

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;
	
	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, Колонка)
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")
	
	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	
КонецПроцедуры // ПрочитатьЗаполнитьСвойстваИЗначения()

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")
	
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	
КонецПроцедуры // ПрочитатьЗаполнитьКатегории()

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;

