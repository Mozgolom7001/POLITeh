////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "При открытии" формы.
// Данное событие возникает при открытии формы, до показа окна пользователю.
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	ЗаполнитьПорядкиНазначенияPLU();
	ОбновитьПорядкиНазначенияPLU();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При нажатии" кнопок подменю
// "ПорядокПрисвоенияКода" командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано событие
//
Процедура ДействияФормыПорядокНазначенияPLUНажатие(Кнопка)

	ПорядокНазначения = Перечисления.ПорядокПрисвоенияPLU[Кнопка.Имя];
	Если Не РаботаСТорговымОборудованием.КорректныйПорядокНазначенияPLU(ПорядокНазначения) Тогда
		ВывестиПротиворечащиеПозиции();
		Ответ = Вопрос("ВНИМАНИЕ!
		               |Порядок назначения кодов по коду номенклатуры конфликтует с
		               |уже назначенными кодами товаров для выгрузки в ККМ в режиме Offline.
		               |Товары с неуникальными кодами не попадут в список выгрузки.
		               |Установить порядок назначения кодов по коду номенклатуры?",
		               РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Константы.ПорядокПрисвоенияPLU.Установить(ПорядокНазначения);
	ОбновитьПорядкиНазначенияPLU();

КонецПроцедуры // ДействияФормыПорядокНазначенияPLUНажатие()

// Процедура - обработчик события "При изменении" табличного поля
// "РегистрСведенийСписок" (элемент колонки "Номенклатура").
//
// Параметры
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         (поле ввода значения номенклатуры).
//
Процедура РегистрСведенийСписокНоменклатураПриИзменении(Элемент)

	ОбработкаИзмененияНоменклатуры();

КонецПроцедуры // РегистрСведенийСписокНоменклатураПриИзменении()

// Процедура - обработчик события "При начале редактирования" табличного
// поля "РегистрСведенийСписок"
//
// Параметры
//  Элемент     - <ТабличноеПоле>
//              - Табличное поле, с которым связано данное событие
//                ("РегистрСведенийСписок")
//
//  НоваяСтрока - <Булево>
//              - Признак редактирования новой строки. Имеет значение
//                Истина, если строка была добавлена или скопирована.
//
//  Копирование - <Булево>
//              - Если данный параметр имеет значение Истина, то
//                выполняется копирование строки.
//
Процедура РегистрСведенийСписокПриНачалеРедактирования(Элемент,
                                                       НоваяСтрока,
                                                       Копирование)

	Если Копирование Тогда
		Если ЗначениеЗаполнено(ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Номенклатура) Тогда
			ОбработкаИзмененияНоменклатуры();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // РегистрСведенийСписокПриНачалеРедактирования()

// Процедура - обработчик события "При изменении" табличного поля
// "РегистрСведенийСписок" (элемент колонки "КассаККМ").
//
// Параметры
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         (поле ввода значения КассаККМ).
//
Процедура РегистрСведенийСписокКассаККМПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Номенклатура) Тогда
		ОбработкаИзмененияНоменклатуры();
	КонецЕсли;

КонецПроцедуры // РегистрСведенийСписокКассаККМПриИзменении()

// Процедура - обработчик события "При нажатии" кнопки "Заполнить"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано событие
//
Процедура ДействияФормыЗаполнить(Кнопка)

	Результат = РегистрыСведений.ТоварыНаККМ.ПолучитьФорму("ФормаЗаполнения", ЭтаФорма).ОткрытьМодально();

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РегТовары = РегистрыСведений.ТоварыНаККМ;

	СозданоНовых = 0;

	Выборка = Результат.Выбрать();

	Попытка
		Пока Выборка.Следующий() Цикл
			МЗ = РегТовары.СоздатьМенеджерЗаписи();
			МЗ.ЕдиницаИзмерения           = Выборка.ЕдиницаИзмерения;
			МЗ.КассаККМ                   = Выборка.Касса;
			МЗ.Код                        = РаботаСТорговымОборудованием.ПолучитьНовыйPLU(Выборка.Касса, Выборка.Номенклатура);
			МЗ.Номенклатура               = Выборка.Номенклатура;
			МЗ.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
			МЗ.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			
			Если МЗ.Код <> 0 Тогда
				МЗ.Записать();
                СозданоНовых = СозданоНовых + 1;
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;

	Предупреждение("Создано " + СокрЛП(СозданоНовых) + " новых записей.");

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура - обработчик события "При нажатии" кнопки "Очистить"
// командной панели "ДействияФормы"
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано событие
//
Процедура ДействияФормыОчистить(Кнопка)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|    1 КАК Результат
	|ИЗ
	|    РегистрСведений.ТоварыНаККМ КАК РегТовары");
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("ВНИМАНИЕ!!!
	               |Все записи регистра сведений будут удалены.
	               |Перед выполнением данной операции настоятельно рекомендуется
	               |закрыть смену на ККМ.
	               |Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РегистрыСведений.ТоварыНаККМ.СоздатьНаборЗаписей().Записать();
	КонецЕсли;

КонецПроцедуры // ДействияФормыОчистить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура осуществляет заполнение выпадающего меню "ПорядокПрисвоенияКода"
//
// Параметры
//  Нет
//
Процедура ЗаполнитьПорядкиНазначенияPLU()

	Порядки        = Перечисления.ПорядокПрисвоенияPLU;
	Количество     = Порядки.Количество() - 1;
	МенюПорядок    = ЭлементыФормы.ДействияФормы.Кнопки.ПорядокПрисвоенияКода;
	Индекс         = 0;
	ДействиеКнопки = Новый Действие("ДействияФормыПорядокНазначенияPLUНажатие");
	Для Индекс = 0 По Количество Цикл
		Врем                  = Порядки[Индекс];
		МД                    = Врем.Метаданные();
		ОМД                   = МД.ЗначенияПеречисления.Получить(
			Перечисления[МД.Имя].Индекс(Врем));
		Имя                   = ОМД.Имя;
		Кнопка                = МенюПорядок.Кнопки.Добавить(
			Имя,
			ТипКнопкиКоманднойПанели.Действие,
			Врем,
			ДействиеКнопки);
		Кнопка.Подсказка      = Омд.Комментарий;
		Кнопка.Пояснение      = Омд.Комментарий;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПорядкиНазначенияPLU()

// Процедура осуществляет обновление состояния кнопок, соответствующих
// порядкам назначения PLU.
//
// Параметры
//  Нет
//
Процедура ОбновитьПорядкиНазначенияPLU()

	КнопкиПорядков = ЭлементыФормы.ДействияФормы.Кнопки.ПорядокПрисвоенияКода.Кнопки;
	ИмяКнопки      = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(Константы.ПорядокПрисвоенияPLU.Получить());

	Для Каждого Кнопка Из КнопкиПорядков Цикл
		Кнопка.Пометка = (Кнопка.Имя = ИмяКнопки);
	КонецЦикла;

КонецПроцедуры // ОбновитьПорядкиНазначенияPLU()

// Процедура осуществляет вывод позиций, противоречащих порядку назначения
// кодов товара по кодам номенклатуры
//
// Параметры
//  Нет
//
Процедура ВывестиПротиворечащиеПозиции()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    ПРЕДСТАВЛЕНИЕ(РегТовары1.Номенклатура)               КАК Номенклатура,
	|    ПРЕДСТАВЛЕНИЕ(РегТовары1.ХарактеристикаНоменклатуры) КАК ХарактеристикаНоменклатуры,
	|    ПРЕДСТАВЛЕНИЕ(РегТовары1.СерияНоменклатуры)          КАК СерияНоменклатуры,
	|    ПРЕДСТАВЛЕНИЕ(РегТовары1.ЕдиницаИзмерения)           КАК ЕдиницаИзмерения
	|ИЗ
	|    РегистрСведений.ТоварыНаККМ КАК РегТовары1
	|        ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыНаККМ КАК РегТовары2
	|        ПО РегТовары1.КассаККМ     = РегТовары2.КассаККМ
	|         И РегТовары1.Номенклатура = РегТовары2.Номенклатура
	|         И (РегТовары1.ХарактеристикаНоменклатуры <> РегТовары2.ХарактеристикаНоменклатуры
	|            ИЛИ РегТовары1.СерияНоменклатуры      <> РегТовары2.СерияНоменклатуры
	|            ИЛИ РегТовары1.ЕдиницаИзмерения       <> РегТовары2.ЕдиницаИзмерения)");
	Список  = "Конфликтующие значения:";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Список = Список
		         + "
		           |Номенклатура """
		         + Выборка.Номенклатура
		         + """ с характеристикой """
		         + Выборка.ХарактеристикаНоменклатуры
		         + """, серией """
		         + Выборка.СерияНоменклатуры
		         + """ и единицей измерения """
		         + Выборка.ЕдиницаИзмерения
		         + """."
	КонецЦикла;
	Сообщить(Список);

КонецПроцедуры // ВывестиПротиворечащиеПозиции()

// Процедура осуществляет обработку изменения значения поля "Номенклатура"
//
// Параметры
//  Нет
//
Процедура ОбработкаИзмененияНоменклатуры()

	КассаККМ       = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.КассаККМ;
	Номенклатура   = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Номенклатура;
	Характеристика = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.ХарактеристикаНоменклатуры;
	Серия          = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.СерияНоменклатуры;
	Единица        = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.ЕдиницаИзмерения;

	Если Характеристика.Владелец <> Номенклатура Тогда
		ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	Если Серия.Владелец <> Номенклатура Тогда
		ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.СерияНоменклатуры = Неопределено;
	КонецЕсли;
	Если Единица.Владелец <> Номенклатура Тогда
		ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;

	ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.Код = РаботаСТорговымОборудованием.ПолучитьНовыйPLU(КассаККМ, Номенклатура);

КонецПроцедуры // ОбработкаИзмененияНоменклатуры()
