// таблица типов цен приемника
Перем ТипыЦенПриемника;

// Процедура устанавливает заголовок у кнопки копирования
Процедура УстановитьЗаголовокКнопкиКопировать()
	
	КнопкаКопированияПереноса = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Копировать;
	Если КопироватьНоменклатуру Тогда
		КнопкаКопированияПереноса.Подсказка = "Копировать";
		КнопкаКопированияПереноса.Пояснение = "Копировать";
	Иначе
		КнопкаКопированияПереноса.Подсказка = "Переносить";
		КнопкаКопированияПереноса.Пояснение = "Переносить";
	КонецЕсли;
		
КонецПроцедуры

// Процедура устанавливает доступность элементов управления, зависящих от флажка
// переносить цены
Процедура УстановитьДоступностьПереноситьЦены()
	
	ЭлементыФормы.ТипыЦенДляПереноса.Доступность = ПереноситьЦены;
	ЭлементыФормы.КоманднаяПанельТиповЦен.Доступность = ПереноситьЦены;
		
КонецПроцедуры

// Процедура устанавливает отбор по контрагенту и читает данные из регистра сведений
// НоменклатураКонтрагентов
Процедура ЗаполнитьНаборЗаписейНоменклатуры()
	
	РегистрСведенийНаборЗаписей.Отбор.Контрагент.Использование = Истина;
	РегистрСведенийНаборЗаписей.Отбор.Контрагент.Значение      = КонтрагентИсточник;
	РегистрСведенийНаборЗаписей.Прочитать();
	
КонецПроцедуры

// функция возвращает типы цен контрагента
Функция ПолучитьТаблицуТиповЦенКонтрагента(Контрагент)
	
	// типы цен обновляем
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
					|	Истина КАК ПОМЕТКА,
					|	&ПустойТипЦен КАК СсылкаНовогоТипаЦены,
	                |	ТипыЦенНоменклатурыКонтрагентов.Ссылка,
	                |	ТипыЦенНоменклатурыКонтрагентов.ТипЦеныНоменклатуры
	                |ИЗ
	                |	Справочник.ТипыЦенНоменклатурыКонтрагентов КАК ТипыЦенНоменклатурыКонтрагентов
					| ГДЕ (ТипыЦенНоменклатурыКонтрагентов.Владелец = &КонтрагентИсточник)";
					
	Запрос.УстановитьПараметр("КонтрагентИсточник", Контрагент);
	Запрос.УстановитьПараметр("ПустойТипЦен", Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка());
	ТаблицаТиповЦен = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаТиповЦен;
	
КонецФункции

// Функция проверяет корректность соответсвия типов цен приемника и источника
Функция ПроверитьСоответсвиеТиповЦенПриемникаИИсточника()
	
	// пробегаем таблицу типов цен приемника и смотрим, что бы не было незаполненных
	// ссылок если такой тип цен есть в приемнике
	Для Каждого ЗаписьИсточника Из ТипыЦенДляПереноса Цикл
		
		Если НЕ ЗаписьИсточника.Пометка ИЛИ ЗначениеЗаполнено(ЗаписьИсточника.СсылкаНовогоТипаЦены) Тогда
			Продолжить;
		КонецЕсли;
			
		ТипЦены = ЗаписьИсточника.ТипЦеныНоменклатуры;
		СтрокаПриемника = ТипыЦенПриемника.Найти(ТипЦены, "ТипЦеныНоменклатуры");
		Если СтрокаПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Предупреждение("У контрагента-приемника существует тип цен """ + ТипЦены.Наименование + """");
		Возврат Ложь;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// процедура обновляет таблицу типо цен для примника, устанавливая соответсвия типов цен
Процедура ОбновитьДанныеТиповЦенДляПриемника()
	
	ТипыЦенДляПереноса.ЗаполнитьЗначения(Справочники.ТипыЦенНоменклатурыКонтрагентов.ПустаяСсылка(), "СсылкаНовогоТипаЦены");
	ТипыЦенПриемника = ПолучитьТаблицуТиповЦенКонтрагента(КонтрагентПриемник);
	ТипыЦенПриемника.Индексы.Добавить("ТипЦеныНоменклатуры");
    // пробегаем таблицу типов цен приемника и ставим куда можем соответсвие
	Для Каждого ЗаписьИсточника Из ТипыЦенДляПереноса Цикл
		
		ТипЦены = ЗаписьИсточника.ТипЦеныНоменклатуры;
		
		СтрокаПриемника = ТипыЦенПриемника.Найти(ТипЦены, "ТипЦеныНоменклатуры");
		Если СтрокаПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьИсточника.СсылкаНовогоТипаЦены = СтрокаПриемника.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

// процедура обновляет данные формы для выбранного контрагента - источника
Процедура ОбновитьДанныеДляКонтрагента()
	
	//  Обновляем набор записей номенклатуры
	ЗаполнитьНаборЗаписейНоменклатуры();
	ТипыЦенДляПереноса = ПолучитьТаблицуТиповЦенКонтрагента(КонтрагентИсточник);
	ОбновитьДанныеТиповЦенДляПриемника();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтрагентИсточник.
//
Процедура КонтрагентИсточникПриИзменении(Элемент)
	
	ОбновитьДанныеДляКонтрагента();
	
КонецПроцедуры

//Процедура удаляет записи из набора источника которые есть в результирующем наборе
Процедура УдалитьЗаписиНоменклатурыИсточника(НаборЗаписейИсточника, ТаблицаПереносимыхЗаписей)
	
	Для Каждого Запись Из НаборЗаписейИсточника Цикл
		
		СтруктураПоиска = Новый Структура("Контрагент,Номенклатура,ХарактеристикаНоменклатуры",КонтрагентИсточник, Запись.Номенклатура, Запись.ХарактеристикаНоменклатуры);
		
		// если такая номенклатура уже есть - ее не переносим
		Если ТаблицаПереносимыхЗаписей.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписиИсточника = РегистрыСведений.НоменклатураКонтрагентов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиИсточника.Контрагент = КонтрагентИсточник;
    	МенеджерЗаписиИсточника.Номенклатура = Запись.Номенклатура;
		МенеджерЗаписиИсточника.ХарактеристикаНоменклатуры = Запись.ХарактеристикаНоменклатуры;
		
		МенеджерЗаписиИсточника.Прочитать();
		МенеджерЗаписиИсточника.Удалить();
				
	КонецЦикла;
	
КонецПроцедуры

// Функция копирует - переносит номенклатуру контрагентов
Функция КопироватьПеренестиНоменклатуруКонтрагентов()
	
	НаборЗаписей = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Использование = Истина;
	НаборЗаписей.Отбор.Контрагент.Значение      = КонтрагентПриемник;
	НаборЗаписей.Прочитать();
	
	ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
	
	МетаданныеРегистра = НаборЗаписей.Метаданные();
	СкопированоЗаписейНоменклатуры = 0;
	
	Для каждого Запись из  РегистрСведенийНаборЗаписей Цикл
		
		СтруктураПоиска = Новый Структура("Контрагент,Номенклатура,ХарактеристикаНоменклатуры",КонтрагентПриемник,Запись.Номенклатура,Запись.ХарактеристикаНоменклатуры);
		
		// если такая номенклатура уже есть - ее не переносим
		Если ТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить();  
		НоваяЗапись.Контрагент =  КонтрагентПриемник;
		
		// измерения
		Для индекс = 0 по МетаданныеРегистра.Измерения.Количество()-1 Цикл
			Измерение = МетаданныеРегистра.Измерения[индекс].Имя;
			Если Измерение <> "Контрагент" Тогда
				НоваяЗапись[Измерение] =  Запись[Измерение];
			КонецЕсли;
		КонецЦикла;
		
		// ресурсы
		Для индекс = 0 по МетаданныеРегистра.Ресурсы.Количество()-1 Цикл
			Ресурс = МетаданныеРегистра.Ресурсы[индекс].Имя;
			НоваяЗапись[Ресурс] =  Запись[Ресурс];
		КонецЦикла;
		
		СкопированоЗаписейНоменклатуры = СкопированоЗаписейНоменклатуры + 1;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
		
		// сколько номенклатурных позиций скопировано
		Если КопироватьНоменклатуру Тогда
			Сообщить("Скопировано " + Строка(СкопированоЗаписейНоменклатуры) + " номенклатурных позиций от " + 
						КонтрагентИсточник.Наименование + " к " + КонтрагентПриемник.Наименование);
		Иначе
			Сообщить("Перенесено " + Строка(СкопированоЗаписейНоменклатуры) + " номенклатурных позиций от " + 
						КонтрагентИсточник.Наименование + " к " + КонтрагентПриемник.Наименование);

	    КонецЕсли;

		// если нужно перенести записи - то очищаем набор
		Если Не КопироватьНоменклатуру Тогда
			
			// по-новому читаем набор записей контрагента источника, так как часть записей может быть удалена
			НаборЗаписейИсточника = РегистрыСведений.НоменклатураКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписейИсточника.Отбор.Контрагент.Использование = Истина;
			НаборЗаписейИсточника.Отбор.Контрагент.Значение      = КонтрагентИсточник;
			НаборЗаписейИсточника.Прочитать();
            ТаблицаПереноса = РегистрСведенийНаборЗаписей.Выгрузить(); 
			
			УдалитьЗаписиНоменклатурыИсточника(НаборЗаписейИсточника, ТаблицаПереноса);
           
			ЗаполнитьНаборЗаписейНоменклатуры();
			
			// сколько номенклатуры контрагента удалено
			Сообщить("Удалено " + Строка(ТаблицаПереноса.Количество()) + " номенклатурных позиций у контрагента " + 
						КонтрагентИсточник.Наименование);
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
		Предупреждение("Произошла ошибка при копировании/переносе номенклатуры контрагентов.");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Функция копирует типы цен контрагентов
функция КопироватьТипыЦен()
	
	Для Каждого СтрокаТипаЦен Из ТипыЦенДляПереноса Цикл
		
		Если НЕ СтрокаТипаЦен.Пометка ИЛИ ЗначениеЗаполнено(СтрокаТипаЦен.СсылкаНовогоТипаЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		// добавляем новый тип цены у контрагента приемника
		НоваяЗапись = Справочники.ТипыЦенНоменклатурыКонтрагентов.СоздатьЭлемент();
		НоваяЗапись.Владелец = КонтрагентПриемник;
		
		КопируемыйТипЦен = СтрокаТипаЦен.Ссылка.ПолучитьОбъект(); 
		
		НоваяЗапись.Наименование = КопируемыйТипЦен.Наименование;
		НоваяЗапись.ВалютаЦены = КопируемыйТипЦен.ВалютаЦены;
		НоваяЗапись.ЦенаВключаетНДС = КопируемыйТипЦен.ЦенаВключаетНДС;
		НоваяЗапись.ТипЦеныНоменклатуры = КопируемыйТипЦен.ТипЦеныНоменклатуры;
		НоваяЗапись.ОписаниеТипаЦеныНоменклатурыКонтрагента = КопируемыйТипЦен.ОписаниеТипаЦеныНоменклатурыКонтрагента;
		НоваяЗапись.Комментарий = КопируемыйТипЦен.Комментарий;
				
		Попытка
			НоваяЗапись.Записать();
			СтрокаТипаЦен.СсылкаНовогоТипаЦены = НоваяЗапись.Ссылка;
			Сообщить("У контрагента " + КонтрагентПриемник.Наименование + " создан новый тип цен: " + НоваяЗапись.Наименование);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
			Предупреждение("Произошла ошибка при копировании типов цен контрагентов.");
			Возврат Ложь;
		КонецПопытки;
    
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// функция возвращает таблицу типов цен для контрагента источника
// только для выбранных пользователем типов цен и номенклатуры
Функция ПолучитьТаблицуЦенКонтрагента()
	
	// получаем ограничения
	// номенклатура
	МассивНоменклатуры = РегистрСведенийНаборЗаписей.ВыгрузитьКолонку("Номенклатура");
	Если МассивНоменклатуры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	// типы цен
	МассивТиповЦен = Новый Массив;
	Для Каждого СтрокаТиповЦен Из ТипыЦенДляПереноса Цикл
		Если СтрокаТиповЦен.Пометка Тогда
			МассивТиповЦен.Добавить(СтрокаТиповЦен.Ссылка);	
		КонецЕсли;
	КонецЦикла;
	Если МассивТиповЦен.Количество() = 0 Тогда
		Возврат Неопределено
	КонецЕсли;
	
	// выбираем последние типы цен
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.ТипЦен,
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура,
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.ХарактеристикаНоменклатуры,
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.ЕдиницаИзмерения,
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
	                |	ЦеныНоменклатурыКонтрагентовСрезПоследних.Цена
	                |ИЗ
	                |	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(, Номенклатура В (&Номенклатура) И ТипЦен В (&ТипЦен)) 
					|	КАК ЦеныНоменклатурыКонтрагентовСрезПоследних";
					
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("ТипЦен", МассивТиповЦен);
	ТаблицаЦенКонтрагента = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЦенКонтрагента;
	
КонецФункции

// Функция копирует цены номенклатуры от контрагента источника к контрагенту приемнику
Функция КопироватьЦеныНоменклатуры()
	
	ТаблицаЦенКонтрагента =  ПолучитьТаблицуЦенКонтрагента();
	Если (ТаблицаЦенКонтрагента = Неопределено) ИЛИ (ТаблицаЦенКонтрагента.Количество() = 0) Тогда
		Возврат Истина
	КонецЕсли;
	
	// создаем документ
	ДокументЦен = Документы.УстановкаЦенНоменклатурыКонтрагентов.СоздатьДокумент();
	ДокументЦен.Контрагент = КонтрагентПриемник;
	ДокументЦен.Дата = ТекущаяДата();
	ДокументЦен.Комментарий = "Документ создан на базе цен контрагента: " + КонтрагентИсточник.Наименование;
	
	ТабЧастьТипыЦен = ДокументЦен.ТипыЦен;
	ТабЧастьТовары = ДокументЦен.Товары;

	СписокТиповЦен = Новый СписокЗначений;

	// добавляем данные в Товары
	Для Каждого СтрокаТаблицыТиповЦен Из ТаблицаЦенКонтрагента Цикл
		
		// ищем тип цен контрагента приемника
		СтрокаТиповЦен = ТипыЦенДляПереноса.Найти(СтрокаТаблицыТиповЦен.ТипЦен, "Ссылка");
		// по идее то строка типов цен всегда должна найтись
		Если СтрокаТиповЦен <> Неопределено Тогда
			
			ТипЦенПриемника = СтрокаТиповЦен.СсылкаНовогоТипаЦены;
			// ищем тип цены в списке, если не находим - добавляем
			СтрокаСпискаТиповЦен = СписокТиповЦен.НайтиПоЗначению(ТипЦенПриемника);
			Если СтрокаСпискаТиповЦен = Неопределено Тогда
				СписокТиповЦен.Добавить(ТипЦенПриемника);	
			КонецЕсли;
			
		КонецЕсли;

		СтрокаТабличнойЧасти = ТабЧастьТовары.Добавить();
		СтрокаТабличнойЧасти.ТипЦен = ТипЦенПриемника;		
		СтрокаТабличнойЧасти.Номенклатура = СтрокаТаблицыТиповЦен.Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = СтрокаТаблицыТиповЦен.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТаблицыТиповЦен.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Валюта = СтрокаТаблицыТиповЦен.Валюта;
		СтрокаТабличнойЧасти.Цена = СтрокаТаблицыТиповЦен.Цена;
		
	КонецЦикла;
	
	// добавляем данные в табличную часть типов цен
	Для Каждого СтрокаТипаЦены Из СписокТиповЦен Цикл
		
		СтрокаТиповЦен = ТабЧастьТипыЦен.Добавить();
		СтрокаТиповЦен.ТипЦен = СтрокаТипаЦены.Значение; 
		
	КонецЦикла;
	
	Попытка
		// пытаемся провести документ
		ДокументЦен.Записать(РежимЗаписиДокумента.Проведение);
		
		ПредставлениеДокументаЦен = ДокументЦен.Номер + " от " + Строка(ДокументЦен.Дата);
        Сообщить("Создан документ: Установка цен номенклатуры контрагентов № " + ПредставлениеДокументаЦен);
		Сообщить("Проведен документ: Установка цен номенклатуры контрагентов № " + ПредставлениеДокументаЦен);
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка проведения документа ""Установка цен номенклатуры контрагентов"" ." + Символы.ПС +
				ОписаниеОшибки());
		Попытка
			// пытаемся документ просто записать
			ДокументЦен.Записать();
			ПредставлениеДокументаЦен = ДокументЦен.Номер + " от " + Строка(ДокументЦен.Дата);
			Сообщить("Создан документ: Установка цен номенклатуры контрагентов № " + ПредставлениеДокументаЦен);
			Сообщить("Документ с установкой цен номенклатуры № " + ПредставлениеДокументаЦен + " успешно записан, но НЕ проведен.");
        Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка записи документа ""Установка цен номенклатуры контрагентов"" ." + Символы.ПС +
				ОписаниеОшибки());
		КонецПопытки;
		
		Предупреждение("Ошибка проведения документа ""Установка цен номенклатуры контрагентов"" .");
		Возврат Ложь;
		
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

// Обработчик события Нажатие элемента формы ОсновныеДействияФормы.Копировать.
//
Процедура ОсновныеДействияФормыКопировать(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентПриемник) Тогда
		Предупреждение("Выберите контрагента-приемника для копирования/переноса данных.");
		Возврат;
	КонецЕсли;
	
	Если КонтрагентИсточник = КонтрагентПриемник Тогда
		Предупреждение("Контрагент-приемник и контрагент-источник совпадают.");
		Возврат;	
	КонецЕсли;
	
	Если ПереноситьЦены Тогда
		// перенос типов цен
		ДанныеКорректны = ПроверитьСоответсвиеТиповЦенПриемникаИИсточника();
		Если Не ДанныеКорректны Тогда
			Возврат;
		КонецЕсли;

		УдачноСкопировано = КопироватьТипыЦен();
		Если Не УдачноСкопировано Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	// Перенос номенклатуры контрагентов
	УдачноСкопировано = КопироватьПеренестиНоменклатуруКонтрагентов();
	Если Не УдачноСкопировано Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереноситьЦены Тогда

		// перенос цен номенклатуры
		УдачноСкопировано = КопироватьЦеныНоменклатуры();
		Если Не УдачноСкопировано Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если КопироватьНоменклатуру Тогда
		Предупреждение("Копирование данных успешно завершено.",10);
	Иначе
		Предупреждение("Перенос данных успешно завершен.",10);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	ОбновитьДанныеДляКонтрагента();
	УстановитьЗаголовокКнопкиКопировать();
	УстановитьДоступностьПереноситьЦены();
	
КонецПроцедуры

// Обработчик события При Изменении у ПереключательКопироватьПереноситьНоменклатуру
Процедура ПереключательКопироватьПереноситьНоменклатуруПриИзменении(Элемент)
	
	УстановитьЗаголовокКнопкиКопировать();

КонецПроцедуры

// Обработчик события При Изменении у ПереноситьЦены
Процедура ПереноситьЦеныПриИзменении(Элемент)
	
	УстановитьДоступностьПереноситьЦены();
	
КонецПроцедуры

// Обработчик события При Изменении у КонтрагентПриемник
Процедура КонтрагентПриемникПриИзменении(Элемент)
	
	ОбновитьДанныеТиповЦенДляПриемника()
	
КонецПроцедуры

// Обработчик события начала выбора у колонки СсылкаНовогоТипаЦены
Процедура ТипыЦенДляПереносаСсылкаНовогоТипаЦеныНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(КонтрагентПриемник) Тогда
		Предупреждение("Не выбран контрагент-приемник!");
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = Справочники.ТипыЦенНоменклатурыКонтрагентов.ПолучитьФормуВыбора(, Элемент,);
	ОтборПоВладельцу = ФормаВыбора.Отбор.Владелец;
	ОтборПоВладельцу.Использование = Истина;
	ОтборПоВладельцу.Значение = КонтрагентПриемник;
	ОтборПоВладельцу.ВидСравнения = ВидСравнения.Равно;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Обработчик нажатия на кнопку Обновить у Панели типов цен
Процедура КоманднаяПанельТиповЦенОбновить(Кнопка)
	
	ТипыЦенДляПереноса = ПолучитьТаблицуТиповЦенКонтрагента(КонтрагентИсточник);
	ОбновитьДанныеТиповЦенДляПриемника();
	
КонецПроцедуры

// Обработчик нажатия на кнопку выделить все типы цен
Процедура КоманднаяПанельТиповЦенВыделитьВсеТипыЦен(Кнопка)
	
	ТипыЦенДляПереноса.ЗаполнитьЗначения(Истина, "Пометка");	
	
КонецПроцедуры

// Обработчик нажатия на кнопку отменить выделение всех типов цен
Процедура КоманднаяПанельТиповЦенОтменитьВыделениеТиповЦен(Кнопка)

	ТипыЦенДляПереноса.ЗаполнитьЗначения(Ложь, "Пометка");	
	
КонецПроцедуры

// Обработчик события просмотр у колонки Ссылка
Процедура ТипыЦенДляПереносаСсылкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем основную форму элемента
	ФормаЭлемента = Элемент.Значение.ПолучитьОбъект().ПолучитьФорму();
	ФормаЭлемента.ТолькоПросмотр = Истина;
	ФормаЭлемента.Открыть(); 

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ФОРМЫ

КопироватьНоменклатуру = Истина;
ПереноситьЦены = Истина;
ТипыЦенДляПереноса.Индексы.Добавить("Ссылка");